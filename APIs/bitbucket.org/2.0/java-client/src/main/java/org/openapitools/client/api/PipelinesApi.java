/*
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DeploymentVariable;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.PaginatedDeploymentVariable;
import org.openapitools.client.model.PaginatedPipelineCaches;
import org.openapitools.client.model.PaginatedPipelineKnownHosts;
import org.openapitools.client.model.PaginatedPipelineScheduleExecutions;
import org.openapitools.client.model.PaginatedPipelineSchedules;
import org.openapitools.client.model.PaginatedPipelineSteps;
import org.openapitools.client.model.PaginatedPipelineVariables;
import org.openapitools.client.model.PaginatedPipelines;
import org.openapitools.client.model.Pipeline;
import org.openapitools.client.model.PipelineBuildNumber;
import org.openapitools.client.model.PipelineCacheContentUri;
import org.openapitools.client.model.PipelineKnownHost;
import org.openapitools.client.model.PipelineSchedule;
import org.openapitools.client.model.PipelineSchedulePostRequestBody;
import org.openapitools.client.model.PipelineSchedulePutRequestBody;
import org.openapitools.client.model.PipelineSshKeyPair;
import org.openapitools.client.model.PipelineStep;
import org.openapitools.client.model.PipelineVariable;
import org.openapitools.client.model.PipelinesConfig;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PipelinesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PipelinesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PipelinesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createDeploymentVariable
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param environmentUuid The environment. (required)
     * @param deploymentVariable The variable to create (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The variable was created. </td><td>  * Location - The location of the project. This header is only provided when the project key is updated. <br>  </td></tr>
        <tr><td> 404 </td><td> The account, repository, environment or variable with the given UUID was not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A variable with the provided key already exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDeploymentVariableCall(String workspace, String repoSlug, String environmentUuid, DeploymentVariable deploymentVariable, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deploymentVariable;

        // create path and map variables
        String localVarPath = "/repositories/{workspace}/{repo_slug}/deployments_config/environments/{environment_uuid}/variables"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "repo_slug" + "}", localVarApiClient.escapeString(repoSlug.toString()))
            .replace("{" + "environment_uuid" + "}", localVarApiClient.escapeString(environmentUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDeploymentVariableValidateBeforeCall(String workspace, String repoSlug, String environmentUuid, DeploymentVariable deploymentVariable, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling createDeploymentVariable(Async)");
        }

        // verify the required parameter 'repoSlug' is set
        if (repoSlug == null) {
            throw new ApiException("Missing the required parameter 'repoSlug' when calling createDeploymentVariable(Async)");
        }

        // verify the required parameter 'environmentUuid' is set
        if (environmentUuid == null) {
            throw new ApiException("Missing the required parameter 'environmentUuid' when calling createDeploymentVariable(Async)");
        }

        // verify the required parameter 'deploymentVariable' is set
        if (deploymentVariable == null) {
            throw new ApiException("Missing the required parameter 'deploymentVariable' when calling createDeploymentVariable(Async)");
        }

        return createDeploymentVariableCall(workspace, repoSlug, environmentUuid, deploymentVariable, _callback);

    }

    /**
     * Create a variable for an environment
     * Create a deployment environment level variable.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param environmentUuid The environment. (required)
     * @param deploymentVariable The variable to create (required)
     * @return DeploymentVariable
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The variable was created. </td><td>  * Location - The location of the project. This header is only provided when the project key is updated. <br>  </td></tr>
        <tr><td> 404 </td><td> The account, repository, environment or variable with the given UUID was not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A variable with the provided key already exists. </td><td>  -  </td></tr>
     </table>
     */
    public DeploymentVariable createDeploymentVariable(String workspace, String repoSlug, String environmentUuid, DeploymentVariable deploymentVariable) throws ApiException {
        ApiResponse<DeploymentVariable> localVarResp = createDeploymentVariableWithHttpInfo(workspace, repoSlug, environmentUuid, deploymentVariable);
        return localVarResp.getData();
    }

    /**
     * Create a variable for an environment
     * Create a deployment environment level variable.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param environmentUuid The environment. (required)
     * @param deploymentVariable The variable to create (required)
     * @return ApiResponse&lt;DeploymentVariable&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The variable was created. </td><td>  * Location - The location of the project. This header is only provided when the project key is updated. <br>  </td></tr>
        <tr><td> 404 </td><td> The account, repository, environment or variable with the given UUID was not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A variable with the provided key already exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeploymentVariable> createDeploymentVariableWithHttpInfo(String workspace, String repoSlug, String environmentUuid, DeploymentVariable deploymentVariable) throws ApiException {
        okhttp3.Call localVarCall = createDeploymentVariableValidateBeforeCall(workspace, repoSlug, environmentUuid, deploymentVariable, null);
        Type localVarReturnType = new TypeToken<DeploymentVariable>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a variable for an environment (asynchronously)
     * Create a deployment environment level variable.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param environmentUuid The environment. (required)
     * @param deploymentVariable The variable to create (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The variable was created. </td><td>  * Location - The location of the project. This header is only provided when the project key is updated. <br>  </td></tr>
        <tr><td> 404 </td><td> The account, repository, environment or variable with the given UUID was not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A variable with the provided key already exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDeploymentVariableAsync(String workspace, String repoSlug, String environmentUuid, DeploymentVariable deploymentVariable, final ApiCallback<DeploymentVariable> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDeploymentVariableValidateBeforeCall(workspace, repoSlug, environmentUuid, deploymentVariable, _callback);
        Type localVarReturnType = new TypeToken<DeploymentVariable>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPipelineForRepository
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param pipeline The pipeline to initiate. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The initiated pipeline. </td><td>  * Location - The location of the project. This header is only provided when the project key is updated. <br>  </td></tr>
        <tr><td> 400 </td><td> The account or repository is not enabled, the yml file does not exist in the repository for the given revision, or the request body contained invalid properties. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account or repository was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPipelineForRepositoryCall(String workspace, String repoSlug, Pipeline pipeline, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pipeline;

        // create path and map variables
        String localVarPath = "/repositories/{workspace}/{repo_slug}/pipelines"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "repo_slug" + "}", localVarApiClient.escapeString(repoSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPipelineForRepositoryValidateBeforeCall(String workspace, String repoSlug, Pipeline pipeline, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling createPipelineForRepository(Async)");
        }

        // verify the required parameter 'repoSlug' is set
        if (repoSlug == null) {
            throw new ApiException("Missing the required parameter 'repoSlug' when calling createPipelineForRepository(Async)");
        }

        // verify the required parameter 'pipeline' is set
        if (pipeline == null) {
            throw new ApiException("Missing the required parameter 'pipeline' when calling createPipelineForRepository(Async)");
        }

        return createPipelineForRepositoryCall(workspace, repoSlug, pipeline, _callback);

    }

    /**
     * Run a pipeline
     * Endpoint to create and initiate a pipeline. There are a couple of different options to initiate a pipeline, where the payload of the request will determine which type of pipeline will be instantiated. # Trigger a Pipeline for a branch One way to trigger pipelines is by specifying the branch for which you want to trigger a pipeline. The specified branch will be used to determine which pipeline definition from the &#x60;bitbucket-pipelines.yml&#x60; file will be applied to initiate the pipeline. The pipeline will then do a clone of the repository and checkout the latest revision of the specified branch.  ### Example  &#x60;&#x60;&#x60; $ curl -X POST -is -u username:password \\   -H &#39;Content-Type: application/json&#39; \\  https://api.bitbucket.org/2.0/repositories/jeroendr/meat-demo2/pipelines/ \\   -d &#39;   {     \&quot;target\&quot;: {       \&quot;ref_type\&quot;: \&quot;branch\&quot;,       \&quot;type\&quot;: \&quot;pipeline_ref_target\&quot;,       \&quot;ref_name\&quot;: \&quot;master\&quot;     }   }&#39; &#x60;&#x60;&#x60; # Trigger a Pipeline for a commit on a branch or tag You can initiate a pipeline for a specific commit and in the context of a specified reference (e.g. a branch, tag or bookmark). The specified reference will be used to determine which pipeline definition from the bitbucket-pipelines.yml file will be applied to initiate the pipeline. The pipeline will clone the repository and then do a checkout the specified reference.  The following reference types are supported:  * &#x60;branch&#x60; * &#x60;named_branch&#x60; * &#x60;bookmark&#x60;  * &#x60;tag&#x60;  ### Example  &#x60;&#x60;&#x60; $ curl -X POST -is -u username:password \\   -H &#39;Content-Type: application/json&#39; \\   https://api.bitbucket.org/2.0/repositories/jeroendr/meat-demo2/pipelines/ \\   -d &#39;   {     \&quot;target\&quot;: {       \&quot;commit\&quot;: {         \&quot;type\&quot;: \&quot;commit\&quot;,         \&quot;hash\&quot;: \&quot;ce5b7431602f7cbba007062eeb55225c6e18e956\&quot;       },       \&quot;ref_type\&quot;: \&quot;branch\&quot;,       \&quot;type\&quot;: \&quot;pipeline_ref_target\&quot;,       \&quot;ref_name\&quot;: \&quot;master\&quot;     }   }&#39; &#x60;&#x60;&#x60; # Trigger a specific pipeline definition for a commit You can trigger a specific pipeline that is defined in your &#x60;bitbucket-pipelines.yml&#x60; file for a specific commit. In addition to the commit revision, you specify the type and pattern of the selector that identifies the pipeline definition. The resulting pipeline will then clone the repository and checkout the specified revision.  ### Example  &#x60;&#x60;&#x60; $ curl -X POST -is -u username:password \\   -H &#39;Content-Type: application/json&#39; \\  https://api.bitbucket.org/2.0/repositories/jeroendr/meat-demo2/pipelines/ \\  -d &#39;   {      \&quot;target\&quot;: {       \&quot;commit\&quot;: {          \&quot;hash\&quot;:\&quot;a3c4e02c9a3755eccdc3764e6ea13facdf30f923\&quot;,          \&quot;type\&quot;:\&quot;commit\&quot;        },         \&quot;selector\&quot;: {            \&quot;type\&quot;:\&quot;custom\&quot;,               \&quot;pattern\&quot;:\&quot;Deploy to production\&quot;           },         \&quot;type\&quot;:\&quot;pipeline_commit_target\&quot;    }   }&#39; &#x60;&#x60;&#x60; # Trigger a specific pipeline definition for a commit on a branch or tag You can trigger a specific pipeline that is defined in your &#x60;bitbucket-pipelines.yml&#x60; file for a specific commit in the context of a specified reference. In addition to the commit revision, you specify the type and pattern of the selector that identifies the pipeline definition, as well as the reference information. The resulting pipeline will then clone the repository a checkout the specified reference.  ### Example  &#x60;&#x60;&#x60; $ curl -X POST -is -u username:password \\   -H &#39;Content-Type: application/json&#39; \\  https://api.bitbucket.org/2.0/repositories/jeroendr/meat-demo2/pipelines/ \\  -d &#39;   {      \&quot;target\&quot;: {       \&quot;commit\&quot;: {          \&quot;hash\&quot;:\&quot;a3c4e02c9a3755eccdc3764e6ea13facdf30f923\&quot;,          \&quot;type\&quot;:\&quot;commit\&quot;        },        \&quot;selector\&quot;: {           \&quot;type\&quot;: \&quot;custom\&quot;,           \&quot;pattern\&quot;: \&quot;Deploy to production\&quot;        },        \&quot;type\&quot;: \&quot;pipeline_ref_target\&quot;,        \&quot;ref_name\&quot;: \&quot;master\&quot;,        \&quot;ref_type\&quot;: \&quot;branch\&quot;      }   }&#39; &#x60;&#x60;&#x60;   # Trigger a custom pipeline with variables In addition to triggering a custom pipeline that is defined in your &#x60;bitbucket-pipelines.yml&#x60; file as shown in the examples above, you can specify variables that will be available for your build. In the request, provide a list of variables, specifying the following for each variable: key, value, and whether it should be secured or not (this field is optional and defaults to not secured).  ### Example  &#x60;&#x60;&#x60; $ curl -X POST -is -u username:password \\   -H &#39;Content-Type: application/json&#39; \\  https://api.bitbucket.org/2.0/repositories/{workspace}/{repo_slug}/pipelines/ \\  -d &#39;   {     \&quot;target\&quot;: {       \&quot;type\&quot;: \&quot;pipeline_ref_target\&quot;,       \&quot;ref_type\&quot;: \&quot;branch\&quot;,       \&quot;ref_name\&quot;: \&quot;master\&quot;,       \&quot;selector\&quot;: {         \&quot;type\&quot;: \&quot;custom\&quot;,         \&quot;pattern\&quot;: \&quot;Deploy to production\&quot;       }     },     \&quot;variables\&quot;: [       {         \&quot;key\&quot;: \&quot;var1key\&quot;,         \&quot;value\&quot;: \&quot;var1value\&quot;,         \&quot;secured\&quot;: true       },       {         \&quot;key\&quot;: \&quot;var2key\&quot;,         \&quot;value\&quot;: \&quot;var2value\&quot;       }     ]   }&#39; &#x60;&#x60;&#x60;  # Trigger a pull request pipeline  You can also initiate a pipeline for a specific pull request.  ### Example  &#x60;&#x60;&#x60; $ curl -X POST -is -u username:password \\   -H &#39;Content-Type: application/json&#39; \\  https://api.bitbucket.org/2.0/repositories/{workspace}/{repo_slug}/pipelines/ \\  -d &#39;   {  \&quot;target\&quot;: {       \&quot;type\&quot;: \&quot;pipeline_pullrequest_target\&quot;,    \&quot;source\&quot;: \&quot;pull-request-branch\&quot;,       \&quot;destination\&quot;: \&quot;master\&quot;,       \&quot;destination_commit\&quot;: {         \&quot;hash\&quot; : \&quot;9f848b7\&quot;       },       \&quot;commit\&quot;: {        \&quot;hash\&quot; : \&quot;1a372fc\&quot;       },       \&quot;pullrequest\&quot; : {        \&quot;id\&quot; : \&quot;3\&quot;       },    \&quot;selector\&quot;: {         \&quot;type\&quot;: \&quot;pull-requests\&quot;,         \&quot;pattern\&quot;: \&quot;**\&quot;       }     }   }&#39; &#x60;&#x60;&#x60; 
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param pipeline The pipeline to initiate. (required)
     * @return Pipeline
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The initiated pipeline. </td><td>  * Location - The location of the project. This header is only provided when the project key is updated. <br>  </td></tr>
        <tr><td> 400 </td><td> The account or repository is not enabled, the yml file does not exist in the repository for the given revision, or the request body contained invalid properties. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account or repository was not found. </td><td>  -  </td></tr>
     </table>
     */
    public Pipeline createPipelineForRepository(String workspace, String repoSlug, Pipeline pipeline) throws ApiException {
        ApiResponse<Pipeline> localVarResp = createPipelineForRepositoryWithHttpInfo(workspace, repoSlug, pipeline);
        return localVarResp.getData();
    }

    /**
     * Run a pipeline
     * Endpoint to create and initiate a pipeline. There are a couple of different options to initiate a pipeline, where the payload of the request will determine which type of pipeline will be instantiated. # Trigger a Pipeline for a branch One way to trigger pipelines is by specifying the branch for which you want to trigger a pipeline. The specified branch will be used to determine which pipeline definition from the &#x60;bitbucket-pipelines.yml&#x60; file will be applied to initiate the pipeline. The pipeline will then do a clone of the repository and checkout the latest revision of the specified branch.  ### Example  &#x60;&#x60;&#x60; $ curl -X POST -is -u username:password \\   -H &#39;Content-Type: application/json&#39; \\  https://api.bitbucket.org/2.0/repositories/jeroendr/meat-demo2/pipelines/ \\   -d &#39;   {     \&quot;target\&quot;: {       \&quot;ref_type\&quot;: \&quot;branch\&quot;,       \&quot;type\&quot;: \&quot;pipeline_ref_target\&quot;,       \&quot;ref_name\&quot;: \&quot;master\&quot;     }   }&#39; &#x60;&#x60;&#x60; # Trigger a Pipeline for a commit on a branch or tag You can initiate a pipeline for a specific commit and in the context of a specified reference (e.g. a branch, tag or bookmark). The specified reference will be used to determine which pipeline definition from the bitbucket-pipelines.yml file will be applied to initiate the pipeline. The pipeline will clone the repository and then do a checkout the specified reference.  The following reference types are supported:  * &#x60;branch&#x60; * &#x60;named_branch&#x60; * &#x60;bookmark&#x60;  * &#x60;tag&#x60;  ### Example  &#x60;&#x60;&#x60; $ curl -X POST -is -u username:password \\   -H &#39;Content-Type: application/json&#39; \\   https://api.bitbucket.org/2.0/repositories/jeroendr/meat-demo2/pipelines/ \\   -d &#39;   {     \&quot;target\&quot;: {       \&quot;commit\&quot;: {         \&quot;type\&quot;: \&quot;commit\&quot;,         \&quot;hash\&quot;: \&quot;ce5b7431602f7cbba007062eeb55225c6e18e956\&quot;       },       \&quot;ref_type\&quot;: \&quot;branch\&quot;,       \&quot;type\&quot;: \&quot;pipeline_ref_target\&quot;,       \&quot;ref_name\&quot;: \&quot;master\&quot;     }   }&#39; &#x60;&#x60;&#x60; # Trigger a specific pipeline definition for a commit You can trigger a specific pipeline that is defined in your &#x60;bitbucket-pipelines.yml&#x60; file for a specific commit. In addition to the commit revision, you specify the type and pattern of the selector that identifies the pipeline definition. The resulting pipeline will then clone the repository and checkout the specified revision.  ### Example  &#x60;&#x60;&#x60; $ curl -X POST -is -u username:password \\   -H &#39;Content-Type: application/json&#39; \\  https://api.bitbucket.org/2.0/repositories/jeroendr/meat-demo2/pipelines/ \\  -d &#39;   {      \&quot;target\&quot;: {       \&quot;commit\&quot;: {          \&quot;hash\&quot;:\&quot;a3c4e02c9a3755eccdc3764e6ea13facdf30f923\&quot;,          \&quot;type\&quot;:\&quot;commit\&quot;        },         \&quot;selector\&quot;: {            \&quot;type\&quot;:\&quot;custom\&quot;,               \&quot;pattern\&quot;:\&quot;Deploy to production\&quot;           },         \&quot;type\&quot;:\&quot;pipeline_commit_target\&quot;    }   }&#39; &#x60;&#x60;&#x60; # Trigger a specific pipeline definition for a commit on a branch or tag You can trigger a specific pipeline that is defined in your &#x60;bitbucket-pipelines.yml&#x60; file for a specific commit in the context of a specified reference. In addition to the commit revision, you specify the type and pattern of the selector that identifies the pipeline definition, as well as the reference information. The resulting pipeline will then clone the repository a checkout the specified reference.  ### Example  &#x60;&#x60;&#x60; $ curl -X POST -is -u username:password \\   -H &#39;Content-Type: application/json&#39; \\  https://api.bitbucket.org/2.0/repositories/jeroendr/meat-demo2/pipelines/ \\  -d &#39;   {      \&quot;target\&quot;: {       \&quot;commit\&quot;: {          \&quot;hash\&quot;:\&quot;a3c4e02c9a3755eccdc3764e6ea13facdf30f923\&quot;,          \&quot;type\&quot;:\&quot;commit\&quot;        },        \&quot;selector\&quot;: {           \&quot;type\&quot;: \&quot;custom\&quot;,           \&quot;pattern\&quot;: \&quot;Deploy to production\&quot;        },        \&quot;type\&quot;: \&quot;pipeline_ref_target\&quot;,        \&quot;ref_name\&quot;: \&quot;master\&quot;,        \&quot;ref_type\&quot;: \&quot;branch\&quot;      }   }&#39; &#x60;&#x60;&#x60;   # Trigger a custom pipeline with variables In addition to triggering a custom pipeline that is defined in your &#x60;bitbucket-pipelines.yml&#x60; file as shown in the examples above, you can specify variables that will be available for your build. In the request, provide a list of variables, specifying the following for each variable: key, value, and whether it should be secured or not (this field is optional and defaults to not secured).  ### Example  &#x60;&#x60;&#x60; $ curl -X POST -is -u username:password \\   -H &#39;Content-Type: application/json&#39; \\  https://api.bitbucket.org/2.0/repositories/{workspace}/{repo_slug}/pipelines/ \\  -d &#39;   {     \&quot;target\&quot;: {       \&quot;type\&quot;: \&quot;pipeline_ref_target\&quot;,       \&quot;ref_type\&quot;: \&quot;branch\&quot;,       \&quot;ref_name\&quot;: \&quot;master\&quot;,       \&quot;selector\&quot;: {         \&quot;type\&quot;: \&quot;custom\&quot;,         \&quot;pattern\&quot;: \&quot;Deploy to production\&quot;       }     },     \&quot;variables\&quot;: [       {         \&quot;key\&quot;: \&quot;var1key\&quot;,         \&quot;value\&quot;: \&quot;var1value\&quot;,         \&quot;secured\&quot;: true       },       {         \&quot;key\&quot;: \&quot;var2key\&quot;,         \&quot;value\&quot;: \&quot;var2value\&quot;       }     ]   }&#39; &#x60;&#x60;&#x60;  # Trigger a pull request pipeline  You can also initiate a pipeline for a specific pull request.  ### Example  &#x60;&#x60;&#x60; $ curl -X POST -is -u username:password \\   -H &#39;Content-Type: application/json&#39; \\  https://api.bitbucket.org/2.0/repositories/{workspace}/{repo_slug}/pipelines/ \\  -d &#39;   {  \&quot;target\&quot;: {       \&quot;type\&quot;: \&quot;pipeline_pullrequest_target\&quot;,    \&quot;source\&quot;: \&quot;pull-request-branch\&quot;,       \&quot;destination\&quot;: \&quot;master\&quot;,       \&quot;destination_commit\&quot;: {         \&quot;hash\&quot; : \&quot;9f848b7\&quot;       },       \&quot;commit\&quot;: {        \&quot;hash\&quot; : \&quot;1a372fc\&quot;       },       \&quot;pullrequest\&quot; : {        \&quot;id\&quot; : \&quot;3\&quot;       },    \&quot;selector\&quot;: {         \&quot;type\&quot;: \&quot;pull-requests\&quot;,         \&quot;pattern\&quot;: \&quot;**\&quot;       }     }   }&#39; &#x60;&#x60;&#x60; 
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param pipeline The pipeline to initiate. (required)
     * @return ApiResponse&lt;Pipeline&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The initiated pipeline. </td><td>  * Location - The location of the project. This header is only provided when the project key is updated. <br>  </td></tr>
        <tr><td> 400 </td><td> The account or repository is not enabled, the yml file does not exist in the repository for the given revision, or the request body contained invalid properties. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account or repository was not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Pipeline> createPipelineForRepositoryWithHttpInfo(String workspace, String repoSlug, Pipeline pipeline) throws ApiException {
        okhttp3.Call localVarCall = createPipelineForRepositoryValidateBeforeCall(workspace, repoSlug, pipeline, null);
        Type localVarReturnType = new TypeToken<Pipeline>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Run a pipeline (asynchronously)
     * Endpoint to create and initiate a pipeline. There are a couple of different options to initiate a pipeline, where the payload of the request will determine which type of pipeline will be instantiated. # Trigger a Pipeline for a branch One way to trigger pipelines is by specifying the branch for which you want to trigger a pipeline. The specified branch will be used to determine which pipeline definition from the &#x60;bitbucket-pipelines.yml&#x60; file will be applied to initiate the pipeline. The pipeline will then do a clone of the repository and checkout the latest revision of the specified branch.  ### Example  &#x60;&#x60;&#x60; $ curl -X POST -is -u username:password \\   -H &#39;Content-Type: application/json&#39; \\  https://api.bitbucket.org/2.0/repositories/jeroendr/meat-demo2/pipelines/ \\   -d &#39;   {     \&quot;target\&quot;: {       \&quot;ref_type\&quot;: \&quot;branch\&quot;,       \&quot;type\&quot;: \&quot;pipeline_ref_target\&quot;,       \&quot;ref_name\&quot;: \&quot;master\&quot;     }   }&#39; &#x60;&#x60;&#x60; # Trigger a Pipeline for a commit on a branch or tag You can initiate a pipeline for a specific commit and in the context of a specified reference (e.g. a branch, tag or bookmark). The specified reference will be used to determine which pipeline definition from the bitbucket-pipelines.yml file will be applied to initiate the pipeline. The pipeline will clone the repository and then do a checkout the specified reference.  The following reference types are supported:  * &#x60;branch&#x60; * &#x60;named_branch&#x60; * &#x60;bookmark&#x60;  * &#x60;tag&#x60;  ### Example  &#x60;&#x60;&#x60; $ curl -X POST -is -u username:password \\   -H &#39;Content-Type: application/json&#39; \\   https://api.bitbucket.org/2.0/repositories/jeroendr/meat-demo2/pipelines/ \\   -d &#39;   {     \&quot;target\&quot;: {       \&quot;commit\&quot;: {         \&quot;type\&quot;: \&quot;commit\&quot;,         \&quot;hash\&quot;: \&quot;ce5b7431602f7cbba007062eeb55225c6e18e956\&quot;       },       \&quot;ref_type\&quot;: \&quot;branch\&quot;,       \&quot;type\&quot;: \&quot;pipeline_ref_target\&quot;,       \&quot;ref_name\&quot;: \&quot;master\&quot;     }   }&#39; &#x60;&#x60;&#x60; # Trigger a specific pipeline definition for a commit You can trigger a specific pipeline that is defined in your &#x60;bitbucket-pipelines.yml&#x60; file for a specific commit. In addition to the commit revision, you specify the type and pattern of the selector that identifies the pipeline definition. The resulting pipeline will then clone the repository and checkout the specified revision.  ### Example  &#x60;&#x60;&#x60; $ curl -X POST -is -u username:password \\   -H &#39;Content-Type: application/json&#39; \\  https://api.bitbucket.org/2.0/repositories/jeroendr/meat-demo2/pipelines/ \\  -d &#39;   {      \&quot;target\&quot;: {       \&quot;commit\&quot;: {          \&quot;hash\&quot;:\&quot;a3c4e02c9a3755eccdc3764e6ea13facdf30f923\&quot;,          \&quot;type\&quot;:\&quot;commit\&quot;        },         \&quot;selector\&quot;: {            \&quot;type\&quot;:\&quot;custom\&quot;,               \&quot;pattern\&quot;:\&quot;Deploy to production\&quot;           },         \&quot;type\&quot;:\&quot;pipeline_commit_target\&quot;    }   }&#39; &#x60;&#x60;&#x60; # Trigger a specific pipeline definition for a commit on a branch or tag You can trigger a specific pipeline that is defined in your &#x60;bitbucket-pipelines.yml&#x60; file for a specific commit in the context of a specified reference. In addition to the commit revision, you specify the type and pattern of the selector that identifies the pipeline definition, as well as the reference information. The resulting pipeline will then clone the repository a checkout the specified reference.  ### Example  &#x60;&#x60;&#x60; $ curl -X POST -is -u username:password \\   -H &#39;Content-Type: application/json&#39; \\  https://api.bitbucket.org/2.0/repositories/jeroendr/meat-demo2/pipelines/ \\  -d &#39;   {      \&quot;target\&quot;: {       \&quot;commit\&quot;: {          \&quot;hash\&quot;:\&quot;a3c4e02c9a3755eccdc3764e6ea13facdf30f923\&quot;,          \&quot;type\&quot;:\&quot;commit\&quot;        },        \&quot;selector\&quot;: {           \&quot;type\&quot;: \&quot;custom\&quot;,           \&quot;pattern\&quot;: \&quot;Deploy to production\&quot;        },        \&quot;type\&quot;: \&quot;pipeline_ref_target\&quot;,        \&quot;ref_name\&quot;: \&quot;master\&quot;,        \&quot;ref_type\&quot;: \&quot;branch\&quot;      }   }&#39; &#x60;&#x60;&#x60;   # Trigger a custom pipeline with variables In addition to triggering a custom pipeline that is defined in your &#x60;bitbucket-pipelines.yml&#x60; file as shown in the examples above, you can specify variables that will be available for your build. In the request, provide a list of variables, specifying the following for each variable: key, value, and whether it should be secured or not (this field is optional and defaults to not secured).  ### Example  &#x60;&#x60;&#x60; $ curl -X POST -is -u username:password \\   -H &#39;Content-Type: application/json&#39; \\  https://api.bitbucket.org/2.0/repositories/{workspace}/{repo_slug}/pipelines/ \\  -d &#39;   {     \&quot;target\&quot;: {       \&quot;type\&quot;: \&quot;pipeline_ref_target\&quot;,       \&quot;ref_type\&quot;: \&quot;branch\&quot;,       \&quot;ref_name\&quot;: \&quot;master\&quot;,       \&quot;selector\&quot;: {         \&quot;type\&quot;: \&quot;custom\&quot;,         \&quot;pattern\&quot;: \&quot;Deploy to production\&quot;       }     },     \&quot;variables\&quot;: [       {         \&quot;key\&quot;: \&quot;var1key\&quot;,         \&quot;value\&quot;: \&quot;var1value\&quot;,         \&quot;secured\&quot;: true       },       {         \&quot;key\&quot;: \&quot;var2key\&quot;,         \&quot;value\&quot;: \&quot;var2value\&quot;       }     ]   }&#39; &#x60;&#x60;&#x60;  # Trigger a pull request pipeline  You can also initiate a pipeline for a specific pull request.  ### Example  &#x60;&#x60;&#x60; $ curl -X POST -is -u username:password \\   -H &#39;Content-Type: application/json&#39; \\  https://api.bitbucket.org/2.0/repositories/{workspace}/{repo_slug}/pipelines/ \\  -d &#39;   {  \&quot;target\&quot;: {       \&quot;type\&quot;: \&quot;pipeline_pullrequest_target\&quot;,    \&quot;source\&quot;: \&quot;pull-request-branch\&quot;,       \&quot;destination\&quot;: \&quot;master\&quot;,       \&quot;destination_commit\&quot;: {         \&quot;hash\&quot; : \&quot;9f848b7\&quot;       },       \&quot;commit\&quot;: {        \&quot;hash\&quot; : \&quot;1a372fc\&quot;       },       \&quot;pullrequest\&quot; : {        \&quot;id\&quot; : \&quot;3\&quot;       },    \&quot;selector\&quot;: {         \&quot;type\&quot;: \&quot;pull-requests\&quot;,         \&quot;pattern\&quot;: \&quot;**\&quot;       }     }   }&#39; &#x60;&#x60;&#x60; 
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param pipeline The pipeline to initiate. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The initiated pipeline. </td><td>  * Location - The location of the project. This header is only provided when the project key is updated. <br>  </td></tr>
        <tr><td> 400 </td><td> The account or repository is not enabled, the yml file does not exist in the repository for the given revision, or the request body contained invalid properties. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account or repository was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPipelineForRepositoryAsync(String workspace, String repoSlug, Pipeline pipeline, final ApiCallback<Pipeline> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPipelineForRepositoryValidateBeforeCall(workspace, repoSlug, pipeline, _callback);
        Type localVarReturnType = new TypeToken<Pipeline>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPipelineVariableForTeam
     * @param username The account. (required)
     * @param pipelineVariable The variable to create. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created variable. </td><td>  * Location - The location of the project. This header is only provided when the project key is updated. <br>  </td></tr>
        <tr><td> 404 </td><td> The account does not exist. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A variable with the provided key already exists. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call createPipelineVariableForTeamCall(String username, PipelineVariable pipelineVariable, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pipelineVariable;

        // create path and map variables
        String localVarPath = "/teams/{username}/pipelines_config/variables"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPipelineVariableForTeamValidateBeforeCall(String username, PipelineVariable pipelineVariable, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling createPipelineVariableForTeam(Async)");
        }

        return createPipelineVariableForTeamCall(username, pipelineVariable, _callback);

    }

    /**
     * Create a variable for a user
     * Create an account level variable. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
     * @param username The account. (required)
     * @param pipelineVariable The variable to create. (optional)
     * @return PipelineVariable
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created variable. </td><td>  * Location - The location of the project. This header is only provided when the project key is updated. <br>  </td></tr>
        <tr><td> 404 </td><td> The account does not exist. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A variable with the provided key already exists. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public PipelineVariable createPipelineVariableForTeam(String username, PipelineVariable pipelineVariable) throws ApiException {
        ApiResponse<PipelineVariable> localVarResp = createPipelineVariableForTeamWithHttpInfo(username, pipelineVariable);
        return localVarResp.getData();
    }

    /**
     * Create a variable for a user
     * Create an account level variable. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
     * @param username The account. (required)
     * @param pipelineVariable The variable to create. (optional)
     * @return ApiResponse&lt;PipelineVariable&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created variable. </td><td>  * Location - The location of the project. This header is only provided when the project key is updated. <br>  </td></tr>
        <tr><td> 404 </td><td> The account does not exist. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A variable with the provided key already exists. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<PipelineVariable> createPipelineVariableForTeamWithHttpInfo(String username, PipelineVariable pipelineVariable) throws ApiException {
        okhttp3.Call localVarCall = createPipelineVariableForTeamValidateBeforeCall(username, pipelineVariable, null);
        Type localVarReturnType = new TypeToken<PipelineVariable>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a variable for a user (asynchronously)
     * Create an account level variable. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
     * @param username The account. (required)
     * @param pipelineVariable The variable to create. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created variable. </td><td>  * Location - The location of the project. This header is only provided when the project key is updated. <br>  </td></tr>
        <tr><td> 404 </td><td> The account does not exist. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A variable with the provided key already exists. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call createPipelineVariableForTeamAsync(String username, PipelineVariable pipelineVariable, final ApiCallback<PipelineVariable> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPipelineVariableForTeamValidateBeforeCall(username, pipelineVariable, _callback);
        Type localVarReturnType = new TypeToken<PipelineVariable>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPipelineVariableForUser
     * @param selectedUser Either the UUID of the account surrounded by curly-braces, for example &#x60;{account UUID}&#x60;, OR an Atlassian Account ID. (required)
     * @param pipelineVariable The variable to create. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created variable. </td><td>  * Location - The location of the project. This header is only provided when the project key is updated. <br>  </td></tr>
        <tr><td> 404 </td><td> The account does not exist. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A variable with the provided key already exists. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call createPipelineVariableForUserCall(String selectedUser, PipelineVariable pipelineVariable, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pipelineVariable;

        // create path and map variables
        String localVarPath = "/users/{selected_user}/pipelines_config/variables"
            .replace("{" + "selected_user" + "}", localVarApiClient.escapeString(selectedUser.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPipelineVariableForUserValidateBeforeCall(String selectedUser, PipelineVariable pipelineVariable, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'selectedUser' is set
        if (selectedUser == null) {
            throw new ApiException("Missing the required parameter 'selectedUser' when calling createPipelineVariableForUser(Async)");
        }

        return createPipelineVariableForUserCall(selectedUser, pipelineVariable, _callback);

    }

    /**
     * Create a variable for a user
     * Create a user level variable. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
     * @param selectedUser Either the UUID of the account surrounded by curly-braces, for example &#x60;{account UUID}&#x60;, OR an Atlassian Account ID. (required)
     * @param pipelineVariable The variable to create. (optional)
     * @return PipelineVariable
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created variable. </td><td>  * Location - The location of the project. This header is only provided when the project key is updated. <br>  </td></tr>
        <tr><td> 404 </td><td> The account does not exist. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A variable with the provided key already exists. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public PipelineVariable createPipelineVariableForUser(String selectedUser, PipelineVariable pipelineVariable) throws ApiException {
        ApiResponse<PipelineVariable> localVarResp = createPipelineVariableForUserWithHttpInfo(selectedUser, pipelineVariable);
        return localVarResp.getData();
    }

    /**
     * Create a variable for a user
     * Create a user level variable. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
     * @param selectedUser Either the UUID of the account surrounded by curly-braces, for example &#x60;{account UUID}&#x60;, OR an Atlassian Account ID. (required)
     * @param pipelineVariable The variable to create. (optional)
     * @return ApiResponse&lt;PipelineVariable&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created variable. </td><td>  * Location - The location of the project. This header is only provided when the project key is updated. <br>  </td></tr>
        <tr><td> 404 </td><td> The account does not exist. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A variable with the provided key already exists. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<PipelineVariable> createPipelineVariableForUserWithHttpInfo(String selectedUser, PipelineVariable pipelineVariable) throws ApiException {
        okhttp3.Call localVarCall = createPipelineVariableForUserValidateBeforeCall(selectedUser, pipelineVariable, null);
        Type localVarReturnType = new TypeToken<PipelineVariable>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a variable for a user (asynchronously)
     * Create a user level variable. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
     * @param selectedUser Either the UUID of the account surrounded by curly-braces, for example &#x60;{account UUID}&#x60;, OR an Atlassian Account ID. (required)
     * @param pipelineVariable The variable to create. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created variable. </td><td>  * Location - The location of the project. This header is only provided when the project key is updated. <br>  </td></tr>
        <tr><td> 404 </td><td> The account does not exist. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A variable with the provided key already exists. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call createPipelineVariableForUserAsync(String selectedUser, PipelineVariable pipelineVariable, final ApiCallback<PipelineVariable> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPipelineVariableForUserValidateBeforeCall(selectedUser, pipelineVariable, _callback);
        Type localVarReturnType = new TypeToken<PipelineVariable>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPipelineVariableForWorkspace
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param pipelineVariable The variable to create. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created variable. </td><td>  * Location - The location of the project. This header is only provided when the project key is updated. <br>  </td></tr>
        <tr><td> 404 </td><td> The workspace does not exist. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A variable with the provided key already exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPipelineVariableForWorkspaceCall(String workspace, PipelineVariable pipelineVariable, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pipelineVariable;

        // create path and map variables
        String localVarPath = "/workspaces/{workspace}/pipelines-config/variables"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPipelineVariableForWorkspaceValidateBeforeCall(String workspace, PipelineVariable pipelineVariable, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling createPipelineVariableForWorkspace(Async)");
        }

        return createPipelineVariableForWorkspaceCall(workspace, pipelineVariable, _callback);

    }

    /**
     * Create a variable for a workspace
     * Create a workspace level variable.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param pipelineVariable The variable to create. (optional)
     * @return PipelineVariable
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created variable. </td><td>  * Location - The location of the project. This header is only provided when the project key is updated. <br>  </td></tr>
        <tr><td> 404 </td><td> The workspace does not exist. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A variable with the provided key already exists. </td><td>  -  </td></tr>
     </table>
     */
    public PipelineVariable createPipelineVariableForWorkspace(String workspace, PipelineVariable pipelineVariable) throws ApiException {
        ApiResponse<PipelineVariable> localVarResp = createPipelineVariableForWorkspaceWithHttpInfo(workspace, pipelineVariable);
        return localVarResp.getData();
    }

    /**
     * Create a variable for a workspace
     * Create a workspace level variable.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param pipelineVariable The variable to create. (optional)
     * @return ApiResponse&lt;PipelineVariable&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created variable. </td><td>  * Location - The location of the project. This header is only provided when the project key is updated. <br>  </td></tr>
        <tr><td> 404 </td><td> The workspace does not exist. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A variable with the provided key already exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PipelineVariable> createPipelineVariableForWorkspaceWithHttpInfo(String workspace, PipelineVariable pipelineVariable) throws ApiException {
        okhttp3.Call localVarCall = createPipelineVariableForWorkspaceValidateBeforeCall(workspace, pipelineVariable, null);
        Type localVarReturnType = new TypeToken<PipelineVariable>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a variable for a workspace (asynchronously)
     * Create a workspace level variable.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param pipelineVariable The variable to create. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created variable. </td><td>  * Location - The location of the project. This header is only provided when the project key is updated. <br>  </td></tr>
        <tr><td> 404 </td><td> The workspace does not exist. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A variable with the provided key already exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPipelineVariableForWorkspaceAsync(String workspace, PipelineVariable pipelineVariable, final ApiCallback<PipelineVariable> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPipelineVariableForWorkspaceValidateBeforeCall(workspace, pipelineVariable, _callback);
        Type localVarReturnType = new TypeToken<PipelineVariable>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createRepositoryPipelineKnownHost
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param pipelineKnownHost The known host to create. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The known host was created. </td><td>  * Location - The location of the project. This header is only provided when the project key is updated. <br>  </td></tr>
        <tr><td> 404 </td><td> The account or repository does not exist. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A known host with the provided hostname already exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRepositoryPipelineKnownHostCall(String workspace, String repoSlug, PipelineKnownHost pipelineKnownHost, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pipelineKnownHost;

        // create path and map variables
        String localVarPath = "/repositories/{workspace}/{repo_slug}/pipelines_config/ssh/known_hosts"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "repo_slug" + "}", localVarApiClient.escapeString(repoSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRepositoryPipelineKnownHostValidateBeforeCall(String workspace, String repoSlug, PipelineKnownHost pipelineKnownHost, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling createRepositoryPipelineKnownHost(Async)");
        }

        // verify the required parameter 'repoSlug' is set
        if (repoSlug == null) {
            throw new ApiException("Missing the required parameter 'repoSlug' when calling createRepositoryPipelineKnownHost(Async)");
        }

        // verify the required parameter 'pipelineKnownHost' is set
        if (pipelineKnownHost == null) {
            throw new ApiException("Missing the required parameter 'pipelineKnownHost' when calling createRepositoryPipelineKnownHost(Async)");
        }

        return createRepositoryPipelineKnownHostCall(workspace, repoSlug, pipelineKnownHost, _callback);

    }

    /**
     * Create a known host
     * Create a repository level known host.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param pipelineKnownHost The known host to create. (required)
     * @return PipelineKnownHost
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The known host was created. </td><td>  * Location - The location of the project. This header is only provided when the project key is updated. <br>  </td></tr>
        <tr><td> 404 </td><td> The account or repository does not exist. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A known host with the provided hostname already exists. </td><td>  -  </td></tr>
     </table>
     */
    public PipelineKnownHost createRepositoryPipelineKnownHost(String workspace, String repoSlug, PipelineKnownHost pipelineKnownHost) throws ApiException {
        ApiResponse<PipelineKnownHost> localVarResp = createRepositoryPipelineKnownHostWithHttpInfo(workspace, repoSlug, pipelineKnownHost);
        return localVarResp.getData();
    }

    /**
     * Create a known host
     * Create a repository level known host.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param pipelineKnownHost The known host to create. (required)
     * @return ApiResponse&lt;PipelineKnownHost&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The known host was created. </td><td>  * Location - The location of the project. This header is only provided when the project key is updated. <br>  </td></tr>
        <tr><td> 404 </td><td> The account or repository does not exist. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A known host with the provided hostname already exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PipelineKnownHost> createRepositoryPipelineKnownHostWithHttpInfo(String workspace, String repoSlug, PipelineKnownHost pipelineKnownHost) throws ApiException {
        okhttp3.Call localVarCall = createRepositoryPipelineKnownHostValidateBeforeCall(workspace, repoSlug, pipelineKnownHost, null);
        Type localVarReturnType = new TypeToken<PipelineKnownHost>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a known host (asynchronously)
     * Create a repository level known host.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param pipelineKnownHost The known host to create. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The known host was created. </td><td>  * Location - The location of the project. This header is only provided when the project key is updated. <br>  </td></tr>
        <tr><td> 404 </td><td> The account or repository does not exist. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A known host with the provided hostname already exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRepositoryPipelineKnownHostAsync(String workspace, String repoSlug, PipelineKnownHost pipelineKnownHost, final ApiCallback<PipelineKnownHost> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRepositoryPipelineKnownHostValidateBeforeCall(workspace, repoSlug, pipelineKnownHost, _callback);
        Type localVarReturnType = new TypeToken<PipelineKnownHost>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createRepositoryPipelineSchedule
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param pipelineSchedulePostRequestBody The schedule to create. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created schedule. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> There were errors validating the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The maximum limit of schedules for this repository was reached. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account or repository was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRepositoryPipelineScheduleCall(String workspace, String repoSlug, PipelineSchedulePostRequestBody pipelineSchedulePostRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pipelineSchedulePostRequestBody;

        // create path and map variables
        String localVarPath = "/repositories/{workspace}/{repo_slug}/pipelines_config/schedules"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "repo_slug" + "}", localVarApiClient.escapeString(repoSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRepositoryPipelineScheduleValidateBeforeCall(String workspace, String repoSlug, PipelineSchedulePostRequestBody pipelineSchedulePostRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling createRepositoryPipelineSchedule(Async)");
        }

        // verify the required parameter 'repoSlug' is set
        if (repoSlug == null) {
            throw new ApiException("Missing the required parameter 'repoSlug' when calling createRepositoryPipelineSchedule(Async)");
        }

        // verify the required parameter 'pipelineSchedulePostRequestBody' is set
        if (pipelineSchedulePostRequestBody == null) {
            throw new ApiException("Missing the required parameter 'pipelineSchedulePostRequestBody' when calling createRepositoryPipelineSchedule(Async)");
        }

        return createRepositoryPipelineScheduleCall(workspace, repoSlug, pipelineSchedulePostRequestBody, _callback);

    }

    /**
     * Create a schedule
     * Create a schedule for the given repository.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param pipelineSchedulePostRequestBody The schedule to create. (required)
     * @return PipelineSchedule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created schedule. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> There were errors validating the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The maximum limit of schedules for this repository was reached. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account or repository was not found. </td><td>  -  </td></tr>
     </table>
     */
    public PipelineSchedule createRepositoryPipelineSchedule(String workspace, String repoSlug, PipelineSchedulePostRequestBody pipelineSchedulePostRequestBody) throws ApiException {
        ApiResponse<PipelineSchedule> localVarResp = createRepositoryPipelineScheduleWithHttpInfo(workspace, repoSlug, pipelineSchedulePostRequestBody);
        return localVarResp.getData();
    }

    /**
     * Create a schedule
     * Create a schedule for the given repository.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param pipelineSchedulePostRequestBody The schedule to create. (required)
     * @return ApiResponse&lt;PipelineSchedule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created schedule. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> There were errors validating the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The maximum limit of schedules for this repository was reached. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account or repository was not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PipelineSchedule> createRepositoryPipelineScheduleWithHttpInfo(String workspace, String repoSlug, PipelineSchedulePostRequestBody pipelineSchedulePostRequestBody) throws ApiException {
        okhttp3.Call localVarCall = createRepositoryPipelineScheduleValidateBeforeCall(workspace, repoSlug, pipelineSchedulePostRequestBody, null);
        Type localVarReturnType = new TypeToken<PipelineSchedule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a schedule (asynchronously)
     * Create a schedule for the given repository.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param pipelineSchedulePostRequestBody The schedule to create. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created schedule. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> There were errors validating the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The maximum limit of schedules for this repository was reached. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account or repository was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRepositoryPipelineScheduleAsync(String workspace, String repoSlug, PipelineSchedulePostRequestBody pipelineSchedulePostRequestBody, final ApiCallback<PipelineSchedule> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRepositoryPipelineScheduleValidateBeforeCall(workspace, repoSlug, pipelineSchedulePostRequestBody, _callback);
        Type localVarReturnType = new TypeToken<PipelineSchedule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createRepositoryPipelineVariable
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param pipelineVariable The variable to create. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The variable was created. </td><td>  * Location - The location of the project. This header is only provided when the project key is updated. <br>  </td></tr>
        <tr><td> 404 </td><td> The account or repository does not exist. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A variable with the provided key already exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRepositoryPipelineVariableCall(String workspace, String repoSlug, PipelineVariable pipelineVariable, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pipelineVariable;

        // create path and map variables
        String localVarPath = "/repositories/{workspace}/{repo_slug}/pipelines_config/variables"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "repo_slug" + "}", localVarApiClient.escapeString(repoSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRepositoryPipelineVariableValidateBeforeCall(String workspace, String repoSlug, PipelineVariable pipelineVariable, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling createRepositoryPipelineVariable(Async)");
        }

        // verify the required parameter 'repoSlug' is set
        if (repoSlug == null) {
            throw new ApiException("Missing the required parameter 'repoSlug' when calling createRepositoryPipelineVariable(Async)");
        }

        // verify the required parameter 'pipelineVariable' is set
        if (pipelineVariable == null) {
            throw new ApiException("Missing the required parameter 'pipelineVariable' when calling createRepositoryPipelineVariable(Async)");
        }

        return createRepositoryPipelineVariableCall(workspace, repoSlug, pipelineVariable, _callback);

    }

    /**
     * Create a variable for a repository
     * Create a repository level variable.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param pipelineVariable The variable to create. (required)
     * @return PipelineVariable
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The variable was created. </td><td>  * Location - The location of the project. This header is only provided when the project key is updated. <br>  </td></tr>
        <tr><td> 404 </td><td> The account or repository does not exist. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A variable with the provided key already exists. </td><td>  -  </td></tr>
     </table>
     */
    public PipelineVariable createRepositoryPipelineVariable(String workspace, String repoSlug, PipelineVariable pipelineVariable) throws ApiException {
        ApiResponse<PipelineVariable> localVarResp = createRepositoryPipelineVariableWithHttpInfo(workspace, repoSlug, pipelineVariable);
        return localVarResp.getData();
    }

    /**
     * Create a variable for a repository
     * Create a repository level variable.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param pipelineVariable The variable to create. (required)
     * @return ApiResponse&lt;PipelineVariable&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The variable was created. </td><td>  * Location - The location of the project. This header is only provided when the project key is updated. <br>  </td></tr>
        <tr><td> 404 </td><td> The account or repository does not exist. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A variable with the provided key already exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PipelineVariable> createRepositoryPipelineVariableWithHttpInfo(String workspace, String repoSlug, PipelineVariable pipelineVariable) throws ApiException {
        okhttp3.Call localVarCall = createRepositoryPipelineVariableValidateBeforeCall(workspace, repoSlug, pipelineVariable, null);
        Type localVarReturnType = new TypeToken<PipelineVariable>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a variable for a repository (asynchronously)
     * Create a repository level variable.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param pipelineVariable The variable to create. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The variable was created. </td><td>  * Location - The location of the project. This header is only provided when the project key is updated. <br>  </td></tr>
        <tr><td> 404 </td><td> The account or repository does not exist. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A variable with the provided key already exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRepositoryPipelineVariableAsync(String workspace, String repoSlug, PipelineVariable pipelineVariable, final ApiCallback<PipelineVariable> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRepositoryPipelineVariableValidateBeforeCall(workspace, repoSlug, pipelineVariable, _callback);
        Type localVarReturnType = new TypeToken<PipelineVariable>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteDeploymentVariable
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param environmentUuid The environment. (required)
     * @param variableUuid The UUID of the variable to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The variable was deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account, repository, environment or variable with given UUID was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDeploymentVariableCall(String workspace, String repoSlug, String environmentUuid, String variableUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories/{workspace}/{repo_slug}/deployments_config/environments/{environment_uuid}/variables/{variable_uuid}"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "repo_slug" + "}", localVarApiClient.escapeString(repoSlug.toString()))
            .replace("{" + "environment_uuid" + "}", localVarApiClient.escapeString(environmentUuid.toString()))
            .replace("{" + "variable_uuid" + "}", localVarApiClient.escapeString(variableUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDeploymentVariableValidateBeforeCall(String workspace, String repoSlug, String environmentUuid, String variableUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling deleteDeploymentVariable(Async)");
        }

        // verify the required parameter 'repoSlug' is set
        if (repoSlug == null) {
            throw new ApiException("Missing the required parameter 'repoSlug' when calling deleteDeploymentVariable(Async)");
        }

        // verify the required parameter 'environmentUuid' is set
        if (environmentUuid == null) {
            throw new ApiException("Missing the required parameter 'environmentUuid' when calling deleteDeploymentVariable(Async)");
        }

        // verify the required parameter 'variableUuid' is set
        if (variableUuid == null) {
            throw new ApiException("Missing the required parameter 'variableUuid' when calling deleteDeploymentVariable(Async)");
        }

        return deleteDeploymentVariableCall(workspace, repoSlug, environmentUuid, variableUuid, _callback);

    }

    /**
     * Delete a variable for an environment
     * Delete a deployment environment level variable.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param environmentUuid The environment. (required)
     * @param variableUuid The UUID of the variable to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The variable was deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account, repository, environment or variable with given UUID was not found. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteDeploymentVariable(String workspace, String repoSlug, String environmentUuid, String variableUuid) throws ApiException {
        deleteDeploymentVariableWithHttpInfo(workspace, repoSlug, environmentUuid, variableUuid);
    }

    /**
     * Delete a variable for an environment
     * Delete a deployment environment level variable.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param environmentUuid The environment. (required)
     * @param variableUuid The UUID of the variable to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The variable was deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account, repository, environment or variable with given UUID was not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteDeploymentVariableWithHttpInfo(String workspace, String repoSlug, String environmentUuid, String variableUuid) throws ApiException {
        okhttp3.Call localVarCall = deleteDeploymentVariableValidateBeforeCall(workspace, repoSlug, environmentUuid, variableUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a variable for an environment (asynchronously)
     * Delete a deployment environment level variable.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param environmentUuid The environment. (required)
     * @param variableUuid The UUID of the variable to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The variable was deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account, repository, environment or variable with given UUID was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDeploymentVariableAsync(String workspace, String repoSlug, String environmentUuid, String variableUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDeploymentVariableValidateBeforeCall(workspace, repoSlug, environmentUuid, variableUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletePipelineVariableForTeam
     * @param username The account. (required)
     * @param variableUuid The UUID of the variable to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The variable was deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account or the variable with the provided UUID does not exist. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deletePipelineVariableForTeamCall(String username, String variableUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{username}/pipelines_config/variables/{variable_uuid}"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()))
            .replace("{" + "variable_uuid" + "}", localVarApiClient.escapeString(variableUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePipelineVariableForTeamValidateBeforeCall(String username, String variableUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling deletePipelineVariableForTeam(Async)");
        }

        // verify the required parameter 'variableUuid' is set
        if (variableUuid == null) {
            throw new ApiException("Missing the required parameter 'variableUuid' when calling deletePipelineVariableForTeam(Async)");
        }

        return deletePipelineVariableForTeamCall(username, variableUuid, _callback);

    }

    /**
     * Delete a variable for a team
     * Delete a team level variable. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
     * @param username The account. (required)
     * @param variableUuid The UUID of the variable to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The variable was deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account or the variable with the provided UUID does not exist. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void deletePipelineVariableForTeam(String username, String variableUuid) throws ApiException {
        deletePipelineVariableForTeamWithHttpInfo(username, variableUuid);
    }

    /**
     * Delete a variable for a team
     * Delete a team level variable. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
     * @param username The account. (required)
     * @param variableUuid The UUID of the variable to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The variable was deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account or the variable with the provided UUID does not exist. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> deletePipelineVariableForTeamWithHttpInfo(String username, String variableUuid) throws ApiException {
        okhttp3.Call localVarCall = deletePipelineVariableForTeamValidateBeforeCall(username, variableUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a variable for a team (asynchronously)
     * Delete a team level variable. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
     * @param username The account. (required)
     * @param variableUuid The UUID of the variable to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The variable was deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account or the variable with the provided UUID does not exist. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deletePipelineVariableForTeamAsync(String username, String variableUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePipelineVariableForTeamValidateBeforeCall(username, variableUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletePipelineVariableForUser
     * @param selectedUser Either the UUID of the account surrounded by curly-braces, for example &#x60;{account UUID}&#x60;, OR an Atlassian Account ID. (required)
     * @param variableUuid The UUID of the variable to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The variable was deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account or the variable with the provided UUID does not exist. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deletePipelineVariableForUserCall(String selectedUser, String variableUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{selected_user}/pipelines_config/variables/{variable_uuid}"
            .replace("{" + "selected_user" + "}", localVarApiClient.escapeString(selectedUser.toString()))
            .replace("{" + "variable_uuid" + "}", localVarApiClient.escapeString(variableUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePipelineVariableForUserValidateBeforeCall(String selectedUser, String variableUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'selectedUser' is set
        if (selectedUser == null) {
            throw new ApiException("Missing the required parameter 'selectedUser' when calling deletePipelineVariableForUser(Async)");
        }

        // verify the required parameter 'variableUuid' is set
        if (variableUuid == null) {
            throw new ApiException("Missing the required parameter 'variableUuid' when calling deletePipelineVariableForUser(Async)");
        }

        return deletePipelineVariableForUserCall(selectedUser, variableUuid, _callback);

    }

    /**
     * Delete a variable for a user
     * Delete an account level variable. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
     * @param selectedUser Either the UUID of the account surrounded by curly-braces, for example &#x60;{account UUID}&#x60;, OR an Atlassian Account ID. (required)
     * @param variableUuid The UUID of the variable to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The variable was deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account or the variable with the provided UUID does not exist. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void deletePipelineVariableForUser(String selectedUser, String variableUuid) throws ApiException {
        deletePipelineVariableForUserWithHttpInfo(selectedUser, variableUuid);
    }

    /**
     * Delete a variable for a user
     * Delete an account level variable. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
     * @param selectedUser Either the UUID of the account surrounded by curly-braces, for example &#x60;{account UUID}&#x60;, OR an Atlassian Account ID. (required)
     * @param variableUuid The UUID of the variable to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The variable was deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account or the variable with the provided UUID does not exist. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> deletePipelineVariableForUserWithHttpInfo(String selectedUser, String variableUuid) throws ApiException {
        okhttp3.Call localVarCall = deletePipelineVariableForUserValidateBeforeCall(selectedUser, variableUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a variable for a user (asynchronously)
     * Delete an account level variable. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
     * @param selectedUser Either the UUID of the account surrounded by curly-braces, for example &#x60;{account UUID}&#x60;, OR an Atlassian Account ID. (required)
     * @param variableUuid The UUID of the variable to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The variable was deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account or the variable with the provided UUID does not exist. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deletePipelineVariableForUserAsync(String selectedUser, String variableUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePipelineVariableForUserValidateBeforeCall(selectedUser, variableUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletePipelineVariableForWorkspace
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param variableUuid The UUID of the variable to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The variable was deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The workspace or the variable with the provided UUID does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePipelineVariableForWorkspaceCall(String workspace, String variableUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workspaces/{workspace}/pipelines-config/variables/{variable_uuid}"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "variable_uuid" + "}", localVarApiClient.escapeString(variableUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePipelineVariableForWorkspaceValidateBeforeCall(String workspace, String variableUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling deletePipelineVariableForWorkspace(Async)");
        }

        // verify the required parameter 'variableUuid' is set
        if (variableUuid == null) {
            throw new ApiException("Missing the required parameter 'variableUuid' when calling deletePipelineVariableForWorkspace(Async)");
        }

        return deletePipelineVariableForWorkspaceCall(workspace, variableUuid, _callback);

    }

    /**
     * Delete a variable for a workspace
     * Delete a workspace level variable.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param variableUuid The UUID of the variable to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The variable was deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The workspace or the variable with the provided UUID does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public void deletePipelineVariableForWorkspace(String workspace, String variableUuid) throws ApiException {
        deletePipelineVariableForWorkspaceWithHttpInfo(workspace, variableUuid);
    }

    /**
     * Delete a variable for a workspace
     * Delete a workspace level variable.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param variableUuid The UUID of the variable to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The variable was deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The workspace or the variable with the provided UUID does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deletePipelineVariableForWorkspaceWithHttpInfo(String workspace, String variableUuid) throws ApiException {
        okhttp3.Call localVarCall = deletePipelineVariableForWorkspaceValidateBeforeCall(workspace, variableUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a variable for a workspace (asynchronously)
     * Delete a workspace level variable.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param variableUuid The UUID of the variable to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The variable was deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The workspace or the variable with the provided UUID does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePipelineVariableForWorkspaceAsync(String workspace, String variableUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePipelineVariableForWorkspaceValidateBeforeCall(workspace, variableUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteRepositoryPipelineCache
     * @param workspace The account. (required)
     * @param repoSlug The repository. (required)
     * @param cacheUuid The UUID of the cache to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The cache was deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The workspace, repository or cache_uuid with given UUID was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRepositoryPipelineCacheCall(String workspace, String repoSlug, String cacheUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories/{workspace}/{repo_slug}/pipelines-config/caches/{cache_uuid}"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "repo_slug" + "}", localVarApiClient.escapeString(repoSlug.toString()))
            .replace("{" + "cache_uuid" + "}", localVarApiClient.escapeString(cacheUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRepositoryPipelineCacheValidateBeforeCall(String workspace, String repoSlug, String cacheUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling deleteRepositoryPipelineCache(Async)");
        }

        // verify the required parameter 'repoSlug' is set
        if (repoSlug == null) {
            throw new ApiException("Missing the required parameter 'repoSlug' when calling deleteRepositoryPipelineCache(Async)");
        }

        // verify the required parameter 'cacheUuid' is set
        if (cacheUuid == null) {
            throw new ApiException("Missing the required parameter 'cacheUuid' when calling deleteRepositoryPipelineCache(Async)");
        }

        return deleteRepositoryPipelineCacheCall(workspace, repoSlug, cacheUuid, _callback);

    }

    /**
     * Delete a cache
     * Delete a repository cache.
     * @param workspace The account. (required)
     * @param repoSlug The repository. (required)
     * @param cacheUuid The UUID of the cache to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The cache was deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The workspace, repository or cache_uuid with given UUID was not found. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteRepositoryPipelineCache(String workspace, String repoSlug, String cacheUuid) throws ApiException {
        deleteRepositoryPipelineCacheWithHttpInfo(workspace, repoSlug, cacheUuid);
    }

    /**
     * Delete a cache
     * Delete a repository cache.
     * @param workspace The account. (required)
     * @param repoSlug The repository. (required)
     * @param cacheUuid The UUID of the cache to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The cache was deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The workspace, repository or cache_uuid with given UUID was not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteRepositoryPipelineCacheWithHttpInfo(String workspace, String repoSlug, String cacheUuid) throws ApiException {
        okhttp3.Call localVarCall = deleteRepositoryPipelineCacheValidateBeforeCall(workspace, repoSlug, cacheUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a cache (asynchronously)
     * Delete a repository cache.
     * @param workspace The account. (required)
     * @param repoSlug The repository. (required)
     * @param cacheUuid The UUID of the cache to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The cache was deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The workspace, repository or cache_uuid with given UUID was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRepositoryPipelineCacheAsync(String workspace, String repoSlug, String cacheUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRepositoryPipelineCacheValidateBeforeCall(workspace, repoSlug, cacheUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteRepositoryPipelineCaches
     * @param workspace The account. (required)
     * @param repoSlug The repository. (required)
     * @param name The cache name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The caches were deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The workspace, repository or cache name was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRepositoryPipelineCachesCall(String workspace, String repoSlug, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories/{workspace}/{repo_slug}/pipelines-config/caches"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "repo_slug" + "}", localVarApiClient.escapeString(repoSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRepositoryPipelineCachesValidateBeforeCall(String workspace, String repoSlug, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling deleteRepositoryPipelineCaches(Async)");
        }

        // verify the required parameter 'repoSlug' is set
        if (repoSlug == null) {
            throw new ApiException("Missing the required parameter 'repoSlug' when calling deleteRepositoryPipelineCaches(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteRepositoryPipelineCaches(Async)");
        }

        return deleteRepositoryPipelineCachesCall(workspace, repoSlug, name, _callback);

    }

    /**
     * Delete caches
     * Delete repository cache versions by name.
     * @param workspace The account. (required)
     * @param repoSlug The repository. (required)
     * @param name The cache name. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The caches were deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The workspace, repository or cache name was not found. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteRepositoryPipelineCaches(String workspace, String repoSlug, String name) throws ApiException {
        deleteRepositoryPipelineCachesWithHttpInfo(workspace, repoSlug, name);
    }

    /**
     * Delete caches
     * Delete repository cache versions by name.
     * @param workspace The account. (required)
     * @param repoSlug The repository. (required)
     * @param name The cache name. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The caches were deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The workspace, repository or cache name was not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteRepositoryPipelineCachesWithHttpInfo(String workspace, String repoSlug, String name) throws ApiException {
        okhttp3.Call localVarCall = deleteRepositoryPipelineCachesValidateBeforeCall(workspace, repoSlug, name, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete caches (asynchronously)
     * Delete repository cache versions by name.
     * @param workspace The account. (required)
     * @param repoSlug The repository. (required)
     * @param name The cache name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The caches were deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The workspace, repository or cache name was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRepositoryPipelineCachesAsync(String workspace, String repoSlug, String name, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRepositoryPipelineCachesValidateBeforeCall(workspace, repoSlug, name, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteRepositoryPipelineKeyPair
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The SSH key pair was deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account, repository or SSH key pair was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRepositoryPipelineKeyPairCall(String workspace, String repoSlug, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories/{workspace}/{repo_slug}/pipelines_config/ssh/key_pair"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "repo_slug" + "}", localVarApiClient.escapeString(repoSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRepositoryPipelineKeyPairValidateBeforeCall(String workspace, String repoSlug, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling deleteRepositoryPipelineKeyPair(Async)");
        }

        // verify the required parameter 'repoSlug' is set
        if (repoSlug == null) {
            throw new ApiException("Missing the required parameter 'repoSlug' when calling deleteRepositoryPipelineKeyPair(Async)");
        }

        return deleteRepositoryPipelineKeyPairCall(workspace, repoSlug, _callback);

    }

    /**
     * Delete SSH key pair
     * Delete the repository SSH key pair.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The SSH key pair was deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account, repository or SSH key pair was not found. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteRepositoryPipelineKeyPair(String workspace, String repoSlug) throws ApiException {
        deleteRepositoryPipelineKeyPairWithHttpInfo(workspace, repoSlug);
    }

    /**
     * Delete SSH key pair
     * Delete the repository SSH key pair.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The SSH key pair was deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account, repository or SSH key pair was not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteRepositoryPipelineKeyPairWithHttpInfo(String workspace, String repoSlug) throws ApiException {
        okhttp3.Call localVarCall = deleteRepositoryPipelineKeyPairValidateBeforeCall(workspace, repoSlug, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete SSH key pair (asynchronously)
     * Delete the repository SSH key pair.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The SSH key pair was deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account, repository or SSH key pair was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRepositoryPipelineKeyPairAsync(String workspace, String repoSlug, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRepositoryPipelineKeyPairValidateBeforeCall(workspace, repoSlug, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteRepositoryPipelineKnownHost
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param knownHostUuid The UUID of the known host to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The known host was deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account, repository or known host with given UUID was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRepositoryPipelineKnownHostCall(String workspace, String repoSlug, String knownHostUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories/{workspace}/{repo_slug}/pipelines_config/ssh/known_hosts/{known_host_uuid}"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "repo_slug" + "}", localVarApiClient.escapeString(repoSlug.toString()))
            .replace("{" + "known_host_uuid" + "}", localVarApiClient.escapeString(knownHostUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRepositoryPipelineKnownHostValidateBeforeCall(String workspace, String repoSlug, String knownHostUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling deleteRepositoryPipelineKnownHost(Async)");
        }

        // verify the required parameter 'repoSlug' is set
        if (repoSlug == null) {
            throw new ApiException("Missing the required parameter 'repoSlug' when calling deleteRepositoryPipelineKnownHost(Async)");
        }

        // verify the required parameter 'knownHostUuid' is set
        if (knownHostUuid == null) {
            throw new ApiException("Missing the required parameter 'knownHostUuid' when calling deleteRepositoryPipelineKnownHost(Async)");
        }

        return deleteRepositoryPipelineKnownHostCall(workspace, repoSlug, knownHostUuid, _callback);

    }

    /**
     * Delete a known host
     * Delete a repository level known host.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param knownHostUuid The UUID of the known host to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The known host was deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account, repository or known host with given UUID was not found. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteRepositoryPipelineKnownHost(String workspace, String repoSlug, String knownHostUuid) throws ApiException {
        deleteRepositoryPipelineKnownHostWithHttpInfo(workspace, repoSlug, knownHostUuid);
    }

    /**
     * Delete a known host
     * Delete a repository level known host.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param knownHostUuid The UUID of the known host to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The known host was deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account, repository or known host with given UUID was not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteRepositoryPipelineKnownHostWithHttpInfo(String workspace, String repoSlug, String knownHostUuid) throws ApiException {
        okhttp3.Call localVarCall = deleteRepositoryPipelineKnownHostValidateBeforeCall(workspace, repoSlug, knownHostUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a known host (asynchronously)
     * Delete a repository level known host.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param knownHostUuid The UUID of the known host to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The known host was deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account, repository or known host with given UUID was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRepositoryPipelineKnownHostAsync(String workspace, String repoSlug, String knownHostUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRepositoryPipelineKnownHostValidateBeforeCall(workspace, repoSlug, knownHostUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteRepositoryPipelineSchedule
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param scheduleUuid The uuid of the schedule. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The schedule was deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account, repository or schedule was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRepositoryPipelineScheduleCall(String workspace, String repoSlug, String scheduleUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories/{workspace}/{repo_slug}/pipelines_config/schedules/{schedule_uuid}"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "repo_slug" + "}", localVarApiClient.escapeString(repoSlug.toString()))
            .replace("{" + "schedule_uuid" + "}", localVarApiClient.escapeString(scheduleUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRepositoryPipelineScheduleValidateBeforeCall(String workspace, String repoSlug, String scheduleUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling deleteRepositoryPipelineSchedule(Async)");
        }

        // verify the required parameter 'repoSlug' is set
        if (repoSlug == null) {
            throw new ApiException("Missing the required parameter 'repoSlug' when calling deleteRepositoryPipelineSchedule(Async)");
        }

        // verify the required parameter 'scheduleUuid' is set
        if (scheduleUuid == null) {
            throw new ApiException("Missing the required parameter 'scheduleUuid' when calling deleteRepositoryPipelineSchedule(Async)");
        }

        return deleteRepositoryPipelineScheduleCall(workspace, repoSlug, scheduleUuid, _callback);

    }

    /**
     * Delete a schedule
     * Delete a schedule.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param scheduleUuid The uuid of the schedule. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The schedule was deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account, repository or schedule was not found. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteRepositoryPipelineSchedule(String workspace, String repoSlug, String scheduleUuid) throws ApiException {
        deleteRepositoryPipelineScheduleWithHttpInfo(workspace, repoSlug, scheduleUuid);
    }

    /**
     * Delete a schedule
     * Delete a schedule.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param scheduleUuid The uuid of the schedule. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The schedule was deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account, repository or schedule was not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteRepositoryPipelineScheduleWithHttpInfo(String workspace, String repoSlug, String scheduleUuid) throws ApiException {
        okhttp3.Call localVarCall = deleteRepositoryPipelineScheduleValidateBeforeCall(workspace, repoSlug, scheduleUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a schedule (asynchronously)
     * Delete a schedule.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param scheduleUuid The uuid of the schedule. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The schedule was deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account, repository or schedule was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRepositoryPipelineScheduleAsync(String workspace, String repoSlug, String scheduleUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRepositoryPipelineScheduleValidateBeforeCall(workspace, repoSlug, scheduleUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteRepositoryPipelineVariable
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param variableUuid The UUID of the variable to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The variable was deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account, repository or variable with given UUID was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRepositoryPipelineVariableCall(String workspace, String repoSlug, String variableUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories/{workspace}/{repo_slug}/pipelines_config/variables/{variable_uuid}"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "repo_slug" + "}", localVarApiClient.escapeString(repoSlug.toString()))
            .replace("{" + "variable_uuid" + "}", localVarApiClient.escapeString(variableUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRepositoryPipelineVariableValidateBeforeCall(String workspace, String repoSlug, String variableUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling deleteRepositoryPipelineVariable(Async)");
        }

        // verify the required parameter 'repoSlug' is set
        if (repoSlug == null) {
            throw new ApiException("Missing the required parameter 'repoSlug' when calling deleteRepositoryPipelineVariable(Async)");
        }

        // verify the required parameter 'variableUuid' is set
        if (variableUuid == null) {
            throw new ApiException("Missing the required parameter 'variableUuid' when calling deleteRepositoryPipelineVariable(Async)");
        }

        return deleteRepositoryPipelineVariableCall(workspace, repoSlug, variableUuid, _callback);

    }

    /**
     * Delete a variable for a repository
     * Delete a repository level variable.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param variableUuid The UUID of the variable to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The variable was deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account, repository or variable with given UUID was not found. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteRepositoryPipelineVariable(String workspace, String repoSlug, String variableUuid) throws ApiException {
        deleteRepositoryPipelineVariableWithHttpInfo(workspace, repoSlug, variableUuid);
    }

    /**
     * Delete a variable for a repository
     * Delete a repository level variable.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param variableUuid The UUID of the variable to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The variable was deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account, repository or variable with given UUID was not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteRepositoryPipelineVariableWithHttpInfo(String workspace, String repoSlug, String variableUuid) throws ApiException {
        okhttp3.Call localVarCall = deleteRepositoryPipelineVariableValidateBeforeCall(workspace, repoSlug, variableUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a variable for a repository (asynchronously)
     * Delete a repository level variable.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param variableUuid The UUID of the variable to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The variable was deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account, repository or variable with given UUID was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRepositoryPipelineVariableAsync(String workspace, String repoSlug, String variableUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRepositoryPipelineVariableValidateBeforeCall(workspace, repoSlug, variableUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDeploymentVariables
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param environmentUuid The environment. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved deployment variables. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeploymentVariablesCall(String workspace, String repoSlug, String environmentUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories/{workspace}/{repo_slug}/deployments_config/environments/{environment_uuid}/variables"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "repo_slug" + "}", localVarApiClient.escapeString(repoSlug.toString()))
            .replace("{" + "environment_uuid" + "}", localVarApiClient.escapeString(environmentUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDeploymentVariablesValidateBeforeCall(String workspace, String repoSlug, String environmentUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling getDeploymentVariables(Async)");
        }

        // verify the required parameter 'repoSlug' is set
        if (repoSlug == null) {
            throw new ApiException("Missing the required parameter 'repoSlug' when calling getDeploymentVariables(Async)");
        }

        // verify the required parameter 'environmentUuid' is set
        if (environmentUuid == null) {
            throw new ApiException("Missing the required parameter 'environmentUuid' when calling getDeploymentVariables(Async)");
        }

        return getDeploymentVariablesCall(workspace, repoSlug, environmentUuid, _callback);

    }

    /**
     * List variables for an environment
     * Find deployment environment level variables.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param environmentUuid The environment. (required)
     * @return PaginatedDeploymentVariable
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved deployment variables. </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedDeploymentVariable getDeploymentVariables(String workspace, String repoSlug, String environmentUuid) throws ApiException {
        ApiResponse<PaginatedDeploymentVariable> localVarResp = getDeploymentVariablesWithHttpInfo(workspace, repoSlug, environmentUuid);
        return localVarResp.getData();
    }

    /**
     * List variables for an environment
     * Find deployment environment level variables.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param environmentUuid The environment. (required)
     * @return ApiResponse&lt;PaginatedDeploymentVariable&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved deployment variables. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedDeploymentVariable> getDeploymentVariablesWithHttpInfo(String workspace, String repoSlug, String environmentUuid) throws ApiException {
        okhttp3.Call localVarCall = getDeploymentVariablesValidateBeforeCall(workspace, repoSlug, environmentUuid, null);
        Type localVarReturnType = new TypeToken<PaginatedDeploymentVariable>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List variables for an environment (asynchronously)
     * Find deployment environment level variables.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param environmentUuid The environment. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved deployment variables. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeploymentVariablesAsync(String workspace, String repoSlug, String environmentUuid, final ApiCallback<PaginatedDeploymentVariable> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDeploymentVariablesValidateBeforeCall(workspace, repoSlug, environmentUuid, _callback);
        Type localVarReturnType = new TypeToken<PaginatedDeploymentVariable>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOIDCConfiguration
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The OpenID configuration </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The workspace was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOIDCConfigurationCall(String workspace, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workspaces/{workspace}/pipelines-config/identity/oidc/.well-known/openid-configuration"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOIDCConfigurationValidateBeforeCall(String workspace, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling getOIDCConfiguration(Async)");
        }

        return getOIDCConfigurationCall(workspace, _callback);

    }

    /**
     * Get OpenID configuration for OIDC in Pipelines
     * This is part of OpenID Connect for Pipelines, see https://support.atlassian.com/bitbucket-cloud/docs/integrate-pipelines-with-resource-servers-using-oidc/
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The OpenID configuration </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The workspace was not found. </td><td>  -  </td></tr>
     </table>
     */
    public void getOIDCConfiguration(String workspace) throws ApiException {
        getOIDCConfigurationWithHttpInfo(workspace);
    }

    /**
     * Get OpenID configuration for OIDC in Pipelines
     * This is part of OpenID Connect for Pipelines, see https://support.atlassian.com/bitbucket-cloud/docs/integrate-pipelines-with-resource-servers-using-oidc/
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The OpenID configuration </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The workspace was not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getOIDCConfigurationWithHttpInfo(String workspace) throws ApiException {
        okhttp3.Call localVarCall = getOIDCConfigurationValidateBeforeCall(workspace, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get OpenID configuration for OIDC in Pipelines (asynchronously)
     * This is part of OpenID Connect for Pipelines, see https://support.atlassian.com/bitbucket-cloud/docs/integrate-pipelines-with-resource-servers-using-oidc/
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The OpenID configuration </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The workspace was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOIDCConfigurationAsync(String workspace, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOIDCConfigurationValidateBeforeCall(workspace, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOIDCKeys
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The keys in JSON web key format </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The workspace was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOIDCKeysCall(String workspace, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workspaces/{workspace}/pipelines-config/identity/oidc/keys.json"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOIDCKeysValidateBeforeCall(String workspace, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling getOIDCKeys(Async)");
        }

        return getOIDCKeysCall(workspace, _callback);

    }

    /**
     * Get keys for OIDC in Pipelines
     * This is part of OpenID Connect for Pipelines, see https://support.atlassian.com/bitbucket-cloud/docs/integrate-pipelines-with-resource-servers-using-oidc/
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The keys in JSON web key format </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The workspace was not found. </td><td>  -  </td></tr>
     </table>
     */
    public void getOIDCKeys(String workspace) throws ApiException {
        getOIDCKeysWithHttpInfo(workspace);
    }

    /**
     * Get keys for OIDC in Pipelines
     * This is part of OpenID Connect for Pipelines, see https://support.atlassian.com/bitbucket-cloud/docs/integrate-pipelines-with-resource-servers-using-oidc/
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The keys in JSON web key format </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The workspace was not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getOIDCKeysWithHttpInfo(String workspace) throws ApiException {
        okhttp3.Call localVarCall = getOIDCKeysValidateBeforeCall(workspace, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get keys for OIDC in Pipelines (asynchronously)
     * This is part of OpenID Connect for Pipelines, see https://support.atlassian.com/bitbucket-cloud/docs/integrate-pipelines-with-resource-servers-using-oidc/
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The keys in JSON web key format </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The workspace was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOIDCKeysAsync(String workspace, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOIDCKeysValidateBeforeCall(workspace, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPipelineContainerLog
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param pipelineUuid The UUID of the pipeline. (required)
     * @param stepUuid The UUID of the step. (required)
     * @param logUuid For the main build container specify the step UUID; for a service container specify the service container UUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The raw log file for the build container or service container. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No account, repository, pipeline, step or log exist for the provided path. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPipelineContainerLogCall(String workspace, String repoSlug, String pipelineUuid, String stepUuid, String logUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories/{workspace}/{repo_slug}/pipelines/{pipeline_uuid}/steps/{step_uuid}/logs/{log_uuid}"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "repo_slug" + "}", localVarApiClient.escapeString(repoSlug.toString()))
            .replace("{" + "pipeline_uuid" + "}", localVarApiClient.escapeString(pipelineUuid.toString()))
            .replace("{" + "step_uuid" + "}", localVarApiClient.escapeString(stepUuid.toString()))
            .replace("{" + "log_uuid" + "}", localVarApiClient.escapeString(logUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPipelineContainerLogValidateBeforeCall(String workspace, String repoSlug, String pipelineUuid, String stepUuid, String logUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling getPipelineContainerLog(Async)");
        }

        // verify the required parameter 'repoSlug' is set
        if (repoSlug == null) {
            throw new ApiException("Missing the required parameter 'repoSlug' when calling getPipelineContainerLog(Async)");
        }

        // verify the required parameter 'pipelineUuid' is set
        if (pipelineUuid == null) {
            throw new ApiException("Missing the required parameter 'pipelineUuid' when calling getPipelineContainerLog(Async)");
        }

        // verify the required parameter 'stepUuid' is set
        if (stepUuid == null) {
            throw new ApiException("Missing the required parameter 'stepUuid' when calling getPipelineContainerLog(Async)");
        }

        // verify the required parameter 'logUuid' is set
        if (logUuid == null) {
            throw new ApiException("Missing the required parameter 'logUuid' when calling getPipelineContainerLog(Async)");
        }

        return getPipelineContainerLogCall(workspace, repoSlug, pipelineUuid, stepUuid, logUuid, _callback);

    }

    /**
     * Get the logs for the build container or a service container for a given step of a pipeline.
     * Retrieve the log file for a build container or service container.  This endpoint supports (and encourages!) the use of [HTTP Range requests](https://tools.ietf.org/html/rfc7233) to deal with potentially very large log files.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param pipelineUuid The UUID of the pipeline. (required)
     * @param stepUuid The UUID of the step. (required)
     * @param logUuid For the main build container specify the step UUID; for a service container specify the service container UUID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The raw log file for the build container or service container. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No account, repository, pipeline, step or log exist for the provided path. </td><td>  -  </td></tr>
     </table>
     */
    public void getPipelineContainerLog(String workspace, String repoSlug, String pipelineUuid, String stepUuid, String logUuid) throws ApiException {
        getPipelineContainerLogWithHttpInfo(workspace, repoSlug, pipelineUuid, stepUuid, logUuid);
    }

    /**
     * Get the logs for the build container or a service container for a given step of a pipeline.
     * Retrieve the log file for a build container or service container.  This endpoint supports (and encourages!) the use of [HTTP Range requests](https://tools.ietf.org/html/rfc7233) to deal with potentially very large log files.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param pipelineUuid The UUID of the pipeline. (required)
     * @param stepUuid The UUID of the step. (required)
     * @param logUuid For the main build container specify the step UUID; for a service container specify the service container UUID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The raw log file for the build container or service container. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No account, repository, pipeline, step or log exist for the provided path. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getPipelineContainerLogWithHttpInfo(String workspace, String repoSlug, String pipelineUuid, String stepUuid, String logUuid) throws ApiException {
        okhttp3.Call localVarCall = getPipelineContainerLogValidateBeforeCall(workspace, repoSlug, pipelineUuid, stepUuid, logUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get the logs for the build container or a service container for a given step of a pipeline. (asynchronously)
     * Retrieve the log file for a build container or service container.  This endpoint supports (and encourages!) the use of [HTTP Range requests](https://tools.ietf.org/html/rfc7233) to deal with potentially very large log files.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param pipelineUuid The UUID of the pipeline. (required)
     * @param stepUuid The UUID of the step. (required)
     * @param logUuid For the main build container specify the step UUID; for a service container specify the service container UUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The raw log file for the build container or service container. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No account, repository, pipeline, step or log exist for the provided path. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPipelineContainerLogAsync(String workspace, String repoSlug, String pipelineUuid, String stepUuid, String logUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPipelineContainerLogValidateBeforeCall(workspace, repoSlug, pipelineUuid, stepUuid, logUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPipelineForRepository
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param pipelineUuid The pipeline UUID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The pipeline. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No account, repository or pipeline with the UUID provided exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPipelineForRepositoryCall(String workspace, String repoSlug, String pipelineUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories/{workspace}/{repo_slug}/pipelines/{pipeline_uuid}"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "repo_slug" + "}", localVarApiClient.escapeString(repoSlug.toString()))
            .replace("{" + "pipeline_uuid" + "}", localVarApiClient.escapeString(pipelineUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPipelineForRepositoryValidateBeforeCall(String workspace, String repoSlug, String pipelineUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling getPipelineForRepository(Async)");
        }

        // verify the required parameter 'repoSlug' is set
        if (repoSlug == null) {
            throw new ApiException("Missing the required parameter 'repoSlug' when calling getPipelineForRepository(Async)");
        }

        // verify the required parameter 'pipelineUuid' is set
        if (pipelineUuid == null) {
            throw new ApiException("Missing the required parameter 'pipelineUuid' when calling getPipelineForRepository(Async)");
        }

        return getPipelineForRepositoryCall(workspace, repoSlug, pipelineUuid, _callback);

    }

    /**
     * Get a pipeline
     * Retrieve a specified pipeline
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param pipelineUuid The pipeline UUID. (required)
     * @return Pipeline
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The pipeline. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No account, repository or pipeline with the UUID provided exists. </td><td>  -  </td></tr>
     </table>
     */
    public Pipeline getPipelineForRepository(String workspace, String repoSlug, String pipelineUuid) throws ApiException {
        ApiResponse<Pipeline> localVarResp = getPipelineForRepositoryWithHttpInfo(workspace, repoSlug, pipelineUuid);
        return localVarResp.getData();
    }

    /**
     * Get a pipeline
     * Retrieve a specified pipeline
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param pipelineUuid The pipeline UUID. (required)
     * @return ApiResponse&lt;Pipeline&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The pipeline. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No account, repository or pipeline with the UUID provided exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Pipeline> getPipelineForRepositoryWithHttpInfo(String workspace, String repoSlug, String pipelineUuid) throws ApiException {
        okhttp3.Call localVarCall = getPipelineForRepositoryValidateBeforeCall(workspace, repoSlug, pipelineUuid, null);
        Type localVarReturnType = new TypeToken<Pipeline>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a pipeline (asynchronously)
     * Retrieve a specified pipeline
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param pipelineUuid The pipeline UUID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The pipeline. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No account, repository or pipeline with the UUID provided exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPipelineForRepositoryAsync(String workspace, String repoSlug, String pipelineUuid, final ApiCallback<Pipeline> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPipelineForRepositoryValidateBeforeCall(workspace, repoSlug, pipelineUuid, _callback);
        Type localVarReturnType = new TypeToken<Pipeline>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPipelineStepForRepository
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param pipelineUuid The UUID of the pipeline. (required)
     * @param stepUuid The UUID of the step. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The step. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No account, repository, pipeline or step with the UUID provided exists for the pipeline with the UUID provided. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPipelineStepForRepositoryCall(String workspace, String repoSlug, String pipelineUuid, String stepUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories/{workspace}/{repo_slug}/pipelines/{pipeline_uuid}/steps/{step_uuid}"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "repo_slug" + "}", localVarApiClient.escapeString(repoSlug.toString()))
            .replace("{" + "pipeline_uuid" + "}", localVarApiClient.escapeString(pipelineUuid.toString()))
            .replace("{" + "step_uuid" + "}", localVarApiClient.escapeString(stepUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPipelineStepForRepositoryValidateBeforeCall(String workspace, String repoSlug, String pipelineUuid, String stepUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling getPipelineStepForRepository(Async)");
        }

        // verify the required parameter 'repoSlug' is set
        if (repoSlug == null) {
            throw new ApiException("Missing the required parameter 'repoSlug' when calling getPipelineStepForRepository(Async)");
        }

        // verify the required parameter 'pipelineUuid' is set
        if (pipelineUuid == null) {
            throw new ApiException("Missing the required parameter 'pipelineUuid' when calling getPipelineStepForRepository(Async)");
        }

        // verify the required parameter 'stepUuid' is set
        if (stepUuid == null) {
            throw new ApiException("Missing the required parameter 'stepUuid' when calling getPipelineStepForRepository(Async)");
        }

        return getPipelineStepForRepositoryCall(workspace, repoSlug, pipelineUuid, stepUuid, _callback);

    }

    /**
     * Get a step of a pipeline
     * Retrieve a given step of a pipeline.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param pipelineUuid The UUID of the pipeline. (required)
     * @param stepUuid The UUID of the step. (required)
     * @return PipelineStep
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The step. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No account, repository, pipeline or step with the UUID provided exists for the pipeline with the UUID provided. </td><td>  -  </td></tr>
     </table>
     */
    public PipelineStep getPipelineStepForRepository(String workspace, String repoSlug, String pipelineUuid, String stepUuid) throws ApiException {
        ApiResponse<PipelineStep> localVarResp = getPipelineStepForRepositoryWithHttpInfo(workspace, repoSlug, pipelineUuid, stepUuid);
        return localVarResp.getData();
    }

    /**
     * Get a step of a pipeline
     * Retrieve a given step of a pipeline.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param pipelineUuid The UUID of the pipeline. (required)
     * @param stepUuid The UUID of the step. (required)
     * @return ApiResponse&lt;PipelineStep&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The step. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No account, repository, pipeline or step with the UUID provided exists for the pipeline with the UUID provided. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PipelineStep> getPipelineStepForRepositoryWithHttpInfo(String workspace, String repoSlug, String pipelineUuid, String stepUuid) throws ApiException {
        okhttp3.Call localVarCall = getPipelineStepForRepositoryValidateBeforeCall(workspace, repoSlug, pipelineUuid, stepUuid, null);
        Type localVarReturnType = new TypeToken<PipelineStep>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a step of a pipeline (asynchronously)
     * Retrieve a given step of a pipeline.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param pipelineUuid The UUID of the pipeline. (required)
     * @param stepUuid The UUID of the step. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The step. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No account, repository, pipeline or step with the UUID provided exists for the pipeline with the UUID provided. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPipelineStepForRepositoryAsync(String workspace, String repoSlug, String pipelineUuid, String stepUuid, final ApiCallback<PipelineStep> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPipelineStepForRepositoryValidateBeforeCall(workspace, repoSlug, pipelineUuid, stepUuid, _callback);
        Type localVarReturnType = new TypeToken<PipelineStep>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPipelineStepLogForRepository
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param pipelineUuid The UUID of the pipeline. (required)
     * @param stepUuid The UUID of the step. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The raw log file for this pipeline step. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> The log has the same etag as the provided If-None-Match header. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A pipeline with the given UUID does not exist, a step with the given UUID does not exist in the pipeline or a log file does not exist for the given step. </td><td>  -  </td></tr>
        <tr><td> 416 </td><td> The requested range does not exist for requests that specified the [HTTP Range header](https://tools.ietf.org/html/rfc7233#section-3.1). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPipelineStepLogForRepositoryCall(String workspace, String repoSlug, String pipelineUuid, String stepUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories/{workspace}/{repo_slug}/pipelines/{pipeline_uuid}/steps/{step_uuid}/log"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "repo_slug" + "}", localVarApiClient.escapeString(repoSlug.toString()))
            .replace("{" + "pipeline_uuid" + "}", localVarApiClient.escapeString(pipelineUuid.toString()))
            .replace("{" + "step_uuid" + "}", localVarApiClient.escapeString(stepUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPipelineStepLogForRepositoryValidateBeforeCall(String workspace, String repoSlug, String pipelineUuid, String stepUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling getPipelineStepLogForRepository(Async)");
        }

        // verify the required parameter 'repoSlug' is set
        if (repoSlug == null) {
            throw new ApiException("Missing the required parameter 'repoSlug' when calling getPipelineStepLogForRepository(Async)");
        }

        // verify the required parameter 'pipelineUuid' is set
        if (pipelineUuid == null) {
            throw new ApiException("Missing the required parameter 'pipelineUuid' when calling getPipelineStepLogForRepository(Async)");
        }

        // verify the required parameter 'stepUuid' is set
        if (stepUuid == null) {
            throw new ApiException("Missing the required parameter 'stepUuid' when calling getPipelineStepLogForRepository(Async)");
        }

        return getPipelineStepLogForRepositoryCall(workspace, repoSlug, pipelineUuid, stepUuid, _callback);

    }

    /**
     * Get log file for a step
     * Retrieve the log file for a given step of a pipeline.  This endpoint supports (and encourages!) the use of [HTTP Range requests](https://tools.ietf.org/html/rfc7233) to deal with potentially very large log files.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param pipelineUuid The UUID of the pipeline. (required)
     * @param stepUuid The UUID of the step. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The raw log file for this pipeline step. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> The log has the same etag as the provided If-None-Match header. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A pipeline with the given UUID does not exist, a step with the given UUID does not exist in the pipeline or a log file does not exist for the given step. </td><td>  -  </td></tr>
        <tr><td> 416 </td><td> The requested range does not exist for requests that specified the [HTTP Range header](https://tools.ietf.org/html/rfc7233#section-3.1). </td><td>  -  </td></tr>
     </table>
     */
    public void getPipelineStepLogForRepository(String workspace, String repoSlug, String pipelineUuid, String stepUuid) throws ApiException {
        getPipelineStepLogForRepositoryWithHttpInfo(workspace, repoSlug, pipelineUuid, stepUuid);
    }

    /**
     * Get log file for a step
     * Retrieve the log file for a given step of a pipeline.  This endpoint supports (and encourages!) the use of [HTTP Range requests](https://tools.ietf.org/html/rfc7233) to deal with potentially very large log files.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param pipelineUuid The UUID of the pipeline. (required)
     * @param stepUuid The UUID of the step. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The raw log file for this pipeline step. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> The log has the same etag as the provided If-None-Match header. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A pipeline with the given UUID does not exist, a step with the given UUID does not exist in the pipeline or a log file does not exist for the given step. </td><td>  -  </td></tr>
        <tr><td> 416 </td><td> The requested range does not exist for requests that specified the [HTTP Range header](https://tools.ietf.org/html/rfc7233#section-3.1). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getPipelineStepLogForRepositoryWithHttpInfo(String workspace, String repoSlug, String pipelineUuid, String stepUuid) throws ApiException {
        okhttp3.Call localVarCall = getPipelineStepLogForRepositoryValidateBeforeCall(workspace, repoSlug, pipelineUuid, stepUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get log file for a step (asynchronously)
     * Retrieve the log file for a given step of a pipeline.  This endpoint supports (and encourages!) the use of [HTTP Range requests](https://tools.ietf.org/html/rfc7233) to deal with potentially very large log files.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param pipelineUuid The UUID of the pipeline. (required)
     * @param stepUuid The UUID of the step. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The raw log file for this pipeline step. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> The log has the same etag as the provided If-None-Match header. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A pipeline with the given UUID does not exist, a step with the given UUID does not exist in the pipeline or a log file does not exist for the given step. </td><td>  -  </td></tr>
        <tr><td> 416 </td><td> The requested range does not exist for requests that specified the [HTTP Range header](https://tools.ietf.org/html/rfc7233#section-3.1). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPipelineStepLogForRepositoryAsync(String workspace, String repoSlug, String pipelineUuid, String stepUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPipelineStepLogForRepositoryValidateBeforeCall(workspace, repoSlug, pipelineUuid, stepUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPipelineStepsForRepository
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param pipelineUuid The UUID of the pipeline. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The steps. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPipelineStepsForRepositoryCall(String workspace, String repoSlug, String pipelineUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories/{workspace}/{repo_slug}/pipelines/{pipeline_uuid}/steps"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "repo_slug" + "}", localVarApiClient.escapeString(repoSlug.toString()))
            .replace("{" + "pipeline_uuid" + "}", localVarApiClient.escapeString(pipelineUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPipelineStepsForRepositoryValidateBeforeCall(String workspace, String repoSlug, String pipelineUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling getPipelineStepsForRepository(Async)");
        }

        // verify the required parameter 'repoSlug' is set
        if (repoSlug == null) {
            throw new ApiException("Missing the required parameter 'repoSlug' when calling getPipelineStepsForRepository(Async)");
        }

        // verify the required parameter 'pipelineUuid' is set
        if (pipelineUuid == null) {
            throw new ApiException("Missing the required parameter 'pipelineUuid' when calling getPipelineStepsForRepository(Async)");
        }

        return getPipelineStepsForRepositoryCall(workspace, repoSlug, pipelineUuid, _callback);

    }

    /**
     * List steps for a pipeline
     * Find steps for the given pipeline.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param pipelineUuid The UUID of the pipeline. (required)
     * @return PaginatedPipelineSteps
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The steps. </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedPipelineSteps getPipelineStepsForRepository(String workspace, String repoSlug, String pipelineUuid) throws ApiException {
        ApiResponse<PaginatedPipelineSteps> localVarResp = getPipelineStepsForRepositoryWithHttpInfo(workspace, repoSlug, pipelineUuid);
        return localVarResp.getData();
    }

    /**
     * List steps for a pipeline
     * Find steps for the given pipeline.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param pipelineUuid The UUID of the pipeline. (required)
     * @return ApiResponse&lt;PaginatedPipelineSteps&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The steps. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedPipelineSteps> getPipelineStepsForRepositoryWithHttpInfo(String workspace, String repoSlug, String pipelineUuid) throws ApiException {
        okhttp3.Call localVarCall = getPipelineStepsForRepositoryValidateBeforeCall(workspace, repoSlug, pipelineUuid, null);
        Type localVarReturnType = new TypeToken<PaginatedPipelineSteps>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List steps for a pipeline (asynchronously)
     * Find steps for the given pipeline.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param pipelineUuid The UUID of the pipeline. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The steps. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPipelineStepsForRepositoryAsync(String workspace, String repoSlug, String pipelineUuid, final ApiCallback<PaginatedPipelineSteps> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPipelineStepsForRepositoryValidateBeforeCall(workspace, repoSlug, pipelineUuid, _callback);
        Type localVarReturnType = new TypeToken<PaginatedPipelineSteps>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPipelineTestReportTestCaseReasons
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param pipelineUuid The UUID of the pipeline. (required)
     * @param stepUuid The UUID of the step. (required)
     * @param testCaseUuid The UUID of the test case. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Test case reasons (output). </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No account, repository, pipeline, step or test case with the UUID provided exists for the pipeline with the UUID provided. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPipelineTestReportTestCaseReasonsCall(String workspace, String repoSlug, String pipelineUuid, String stepUuid, String testCaseUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories/{workspace}/{repo_slug}/pipelines/{pipeline_uuid}/steps/{step_uuid}/test_reports/test_cases/{test_case_uuid}/test_case_reasons"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "repo_slug" + "}", localVarApiClient.escapeString(repoSlug.toString()))
            .replace("{" + "pipeline_uuid" + "}", localVarApiClient.escapeString(pipelineUuid.toString()))
            .replace("{" + "step_uuid" + "}", localVarApiClient.escapeString(stepUuid.toString()))
            .replace("{" + "test_case_uuid" + "}", localVarApiClient.escapeString(testCaseUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPipelineTestReportTestCaseReasonsValidateBeforeCall(String workspace, String repoSlug, String pipelineUuid, String stepUuid, String testCaseUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling getPipelineTestReportTestCaseReasons(Async)");
        }

        // verify the required parameter 'repoSlug' is set
        if (repoSlug == null) {
            throw new ApiException("Missing the required parameter 'repoSlug' when calling getPipelineTestReportTestCaseReasons(Async)");
        }

        // verify the required parameter 'pipelineUuid' is set
        if (pipelineUuid == null) {
            throw new ApiException("Missing the required parameter 'pipelineUuid' when calling getPipelineTestReportTestCaseReasons(Async)");
        }

        // verify the required parameter 'stepUuid' is set
        if (stepUuid == null) {
            throw new ApiException("Missing the required parameter 'stepUuid' when calling getPipelineTestReportTestCaseReasons(Async)");
        }

        // verify the required parameter 'testCaseUuid' is set
        if (testCaseUuid == null) {
            throw new ApiException("Missing the required parameter 'testCaseUuid' when calling getPipelineTestReportTestCaseReasons(Async)");
        }

        return getPipelineTestReportTestCaseReasonsCall(workspace, repoSlug, pipelineUuid, stepUuid, testCaseUuid, _callback);

    }

    /**
     * Get test case reasons (output) for a given test case in a step of a pipeline.
     * 
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param pipelineUuid The UUID of the pipeline. (required)
     * @param stepUuid The UUID of the step. (required)
     * @param testCaseUuid The UUID of the test case. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Test case reasons (output). </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No account, repository, pipeline, step or test case with the UUID provided exists for the pipeline with the UUID provided. </td><td>  -  </td></tr>
     </table>
     */
    public void getPipelineTestReportTestCaseReasons(String workspace, String repoSlug, String pipelineUuid, String stepUuid, String testCaseUuid) throws ApiException {
        getPipelineTestReportTestCaseReasonsWithHttpInfo(workspace, repoSlug, pipelineUuid, stepUuid, testCaseUuid);
    }

    /**
     * Get test case reasons (output) for a given test case in a step of a pipeline.
     * 
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param pipelineUuid The UUID of the pipeline. (required)
     * @param stepUuid The UUID of the step. (required)
     * @param testCaseUuid The UUID of the test case. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Test case reasons (output). </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No account, repository, pipeline, step or test case with the UUID provided exists for the pipeline with the UUID provided. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getPipelineTestReportTestCaseReasonsWithHttpInfo(String workspace, String repoSlug, String pipelineUuid, String stepUuid, String testCaseUuid) throws ApiException {
        okhttp3.Call localVarCall = getPipelineTestReportTestCaseReasonsValidateBeforeCall(workspace, repoSlug, pipelineUuid, stepUuid, testCaseUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get test case reasons (output) for a given test case in a step of a pipeline. (asynchronously)
     * 
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param pipelineUuid The UUID of the pipeline. (required)
     * @param stepUuid The UUID of the step. (required)
     * @param testCaseUuid The UUID of the test case. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Test case reasons (output). </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No account, repository, pipeline, step or test case with the UUID provided exists for the pipeline with the UUID provided. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPipelineTestReportTestCaseReasonsAsync(String workspace, String repoSlug, String pipelineUuid, String stepUuid, String testCaseUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPipelineTestReportTestCaseReasonsValidateBeforeCall(workspace, repoSlug, pipelineUuid, stepUuid, testCaseUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPipelineTestReportTestCases
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param pipelineUuid The UUID of the pipeline. (required)
     * @param stepUuid The UUID of the step. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Test cases for this pipeline step. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No account, repository, pipeline, step or test reports exist for the provided path. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPipelineTestReportTestCasesCall(String workspace, String repoSlug, String pipelineUuid, String stepUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories/{workspace}/{repo_slug}/pipelines/{pipeline_uuid}/steps/{step_uuid}/test_reports/test_cases"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "repo_slug" + "}", localVarApiClient.escapeString(repoSlug.toString()))
            .replace("{" + "pipeline_uuid" + "}", localVarApiClient.escapeString(pipelineUuid.toString()))
            .replace("{" + "step_uuid" + "}", localVarApiClient.escapeString(stepUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPipelineTestReportTestCasesValidateBeforeCall(String workspace, String repoSlug, String pipelineUuid, String stepUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling getPipelineTestReportTestCases(Async)");
        }

        // verify the required parameter 'repoSlug' is set
        if (repoSlug == null) {
            throw new ApiException("Missing the required parameter 'repoSlug' when calling getPipelineTestReportTestCases(Async)");
        }

        // verify the required parameter 'pipelineUuid' is set
        if (pipelineUuid == null) {
            throw new ApiException("Missing the required parameter 'pipelineUuid' when calling getPipelineTestReportTestCases(Async)");
        }

        // verify the required parameter 'stepUuid' is set
        if (stepUuid == null) {
            throw new ApiException("Missing the required parameter 'stepUuid' when calling getPipelineTestReportTestCases(Async)");
        }

        return getPipelineTestReportTestCasesCall(workspace, repoSlug, pipelineUuid, stepUuid, _callback);

    }

    /**
     * Get test cases for a given step of a pipeline.
     * 
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param pipelineUuid The UUID of the pipeline. (required)
     * @param stepUuid The UUID of the step. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Test cases for this pipeline step. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No account, repository, pipeline, step or test reports exist for the provided path. </td><td>  -  </td></tr>
     </table>
     */
    public void getPipelineTestReportTestCases(String workspace, String repoSlug, String pipelineUuid, String stepUuid) throws ApiException {
        getPipelineTestReportTestCasesWithHttpInfo(workspace, repoSlug, pipelineUuid, stepUuid);
    }

    /**
     * Get test cases for a given step of a pipeline.
     * 
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param pipelineUuid The UUID of the pipeline. (required)
     * @param stepUuid The UUID of the step. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Test cases for this pipeline step. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No account, repository, pipeline, step or test reports exist for the provided path. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getPipelineTestReportTestCasesWithHttpInfo(String workspace, String repoSlug, String pipelineUuid, String stepUuid) throws ApiException {
        okhttp3.Call localVarCall = getPipelineTestReportTestCasesValidateBeforeCall(workspace, repoSlug, pipelineUuid, stepUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get test cases for a given step of a pipeline. (asynchronously)
     * 
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param pipelineUuid The UUID of the pipeline. (required)
     * @param stepUuid The UUID of the step. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Test cases for this pipeline step. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No account, repository, pipeline, step or test reports exist for the provided path. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPipelineTestReportTestCasesAsync(String workspace, String repoSlug, String pipelineUuid, String stepUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPipelineTestReportTestCasesValidateBeforeCall(workspace, repoSlug, pipelineUuid, stepUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPipelineTestReports
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param pipelineUuid The UUID of the pipeline. (required)
     * @param stepUuid The UUID of the step. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A summary of test reports for this pipeline step. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No account, repository, pipeline, step or test reports exist for the provided path. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPipelineTestReportsCall(String workspace, String repoSlug, String pipelineUuid, String stepUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories/{workspace}/{repo_slug}/pipelines/{pipeline_uuid}/steps/{step_uuid}/test_reports"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "repo_slug" + "}", localVarApiClient.escapeString(repoSlug.toString()))
            .replace("{" + "pipeline_uuid" + "}", localVarApiClient.escapeString(pipelineUuid.toString()))
            .replace("{" + "step_uuid" + "}", localVarApiClient.escapeString(stepUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPipelineTestReportsValidateBeforeCall(String workspace, String repoSlug, String pipelineUuid, String stepUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling getPipelineTestReports(Async)");
        }

        // verify the required parameter 'repoSlug' is set
        if (repoSlug == null) {
            throw new ApiException("Missing the required parameter 'repoSlug' when calling getPipelineTestReports(Async)");
        }

        // verify the required parameter 'pipelineUuid' is set
        if (pipelineUuid == null) {
            throw new ApiException("Missing the required parameter 'pipelineUuid' when calling getPipelineTestReports(Async)");
        }

        // verify the required parameter 'stepUuid' is set
        if (stepUuid == null) {
            throw new ApiException("Missing the required parameter 'stepUuid' when calling getPipelineTestReports(Async)");
        }

        return getPipelineTestReportsCall(workspace, repoSlug, pipelineUuid, stepUuid, _callback);

    }

    /**
     * Get a summary of test reports for a given step of a pipeline.
     * 
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param pipelineUuid The UUID of the pipeline. (required)
     * @param stepUuid The UUID of the step. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A summary of test reports for this pipeline step. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No account, repository, pipeline, step or test reports exist for the provided path. </td><td>  -  </td></tr>
     </table>
     */
    public void getPipelineTestReports(String workspace, String repoSlug, String pipelineUuid, String stepUuid) throws ApiException {
        getPipelineTestReportsWithHttpInfo(workspace, repoSlug, pipelineUuid, stepUuid);
    }

    /**
     * Get a summary of test reports for a given step of a pipeline.
     * 
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param pipelineUuid The UUID of the pipeline. (required)
     * @param stepUuid The UUID of the step. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A summary of test reports for this pipeline step. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No account, repository, pipeline, step or test reports exist for the provided path. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getPipelineTestReportsWithHttpInfo(String workspace, String repoSlug, String pipelineUuid, String stepUuid) throws ApiException {
        okhttp3.Call localVarCall = getPipelineTestReportsValidateBeforeCall(workspace, repoSlug, pipelineUuid, stepUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get a summary of test reports for a given step of a pipeline. (asynchronously)
     * 
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param pipelineUuid The UUID of the pipeline. (required)
     * @param stepUuid The UUID of the step. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A summary of test reports for this pipeline step. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No account, repository, pipeline, step or test reports exist for the provided path. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPipelineTestReportsAsync(String workspace, String repoSlug, String pipelineUuid, String stepUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPipelineTestReportsValidateBeforeCall(workspace, repoSlug, pipelineUuid, stepUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPipelineVariableForTeam
     * @param username The account. (required)
     * @param variableUuid The UUID of the variable to retrieve. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The variable. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account or variable with the given UUID was not found. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getPipelineVariableForTeamCall(String username, String variableUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{username}/pipelines_config/variables/{variable_uuid}"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()))
            .replace("{" + "variable_uuid" + "}", localVarApiClient.escapeString(variableUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPipelineVariableForTeamValidateBeforeCall(String username, String variableUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling getPipelineVariableForTeam(Async)");
        }

        // verify the required parameter 'variableUuid' is set
        if (variableUuid == null) {
            throw new ApiException("Missing the required parameter 'variableUuid' when calling getPipelineVariableForTeam(Async)");
        }

        return getPipelineVariableForTeamCall(username, variableUuid, _callback);

    }

    /**
     * Get a variable for a team
     * Retrieve a team level variable. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
     * @param username The account. (required)
     * @param variableUuid The UUID of the variable to retrieve. (required)
     * @return PipelineVariable
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The variable. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account or variable with the given UUID was not found. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public PipelineVariable getPipelineVariableForTeam(String username, String variableUuid) throws ApiException {
        ApiResponse<PipelineVariable> localVarResp = getPipelineVariableForTeamWithHttpInfo(username, variableUuid);
        return localVarResp.getData();
    }

    /**
     * Get a variable for a team
     * Retrieve a team level variable. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
     * @param username The account. (required)
     * @param variableUuid The UUID of the variable to retrieve. (required)
     * @return ApiResponse&lt;PipelineVariable&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The variable. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account or variable with the given UUID was not found. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<PipelineVariable> getPipelineVariableForTeamWithHttpInfo(String username, String variableUuid) throws ApiException {
        okhttp3.Call localVarCall = getPipelineVariableForTeamValidateBeforeCall(username, variableUuid, null);
        Type localVarReturnType = new TypeToken<PipelineVariable>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a variable for a team (asynchronously)
     * Retrieve a team level variable. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
     * @param username The account. (required)
     * @param variableUuid The UUID of the variable to retrieve. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The variable. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account or variable with the given UUID was not found. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getPipelineVariableForTeamAsync(String username, String variableUuid, final ApiCallback<PipelineVariable> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPipelineVariableForTeamValidateBeforeCall(username, variableUuid, _callback);
        Type localVarReturnType = new TypeToken<PipelineVariable>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPipelineVariableForUser
     * @param selectedUser Either the UUID of the account surrounded by curly-braces, for example &#x60;{account UUID}&#x60;, OR an Atlassian Account ID. (required)
     * @param variableUuid The UUID of the variable to retrieve. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The variable. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account or variable with the given UUID was not found. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getPipelineVariableForUserCall(String selectedUser, String variableUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{selected_user}/pipelines_config/variables/{variable_uuid}"
            .replace("{" + "selected_user" + "}", localVarApiClient.escapeString(selectedUser.toString()))
            .replace("{" + "variable_uuid" + "}", localVarApiClient.escapeString(variableUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPipelineVariableForUserValidateBeforeCall(String selectedUser, String variableUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'selectedUser' is set
        if (selectedUser == null) {
            throw new ApiException("Missing the required parameter 'selectedUser' when calling getPipelineVariableForUser(Async)");
        }

        // verify the required parameter 'variableUuid' is set
        if (variableUuid == null) {
            throw new ApiException("Missing the required parameter 'variableUuid' when calling getPipelineVariableForUser(Async)");
        }

        return getPipelineVariableForUserCall(selectedUser, variableUuid, _callback);

    }

    /**
     * Get a variable for a user
     * Retrieve a user level variable. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
     * @param selectedUser Either the UUID of the account surrounded by curly-braces, for example &#x60;{account UUID}&#x60;, OR an Atlassian Account ID. (required)
     * @param variableUuid The UUID of the variable to retrieve. (required)
     * @return PipelineVariable
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The variable. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account or variable with the given UUID was not found. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public PipelineVariable getPipelineVariableForUser(String selectedUser, String variableUuid) throws ApiException {
        ApiResponse<PipelineVariable> localVarResp = getPipelineVariableForUserWithHttpInfo(selectedUser, variableUuid);
        return localVarResp.getData();
    }

    /**
     * Get a variable for a user
     * Retrieve a user level variable. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
     * @param selectedUser Either the UUID of the account surrounded by curly-braces, for example &#x60;{account UUID}&#x60;, OR an Atlassian Account ID. (required)
     * @param variableUuid The UUID of the variable to retrieve. (required)
     * @return ApiResponse&lt;PipelineVariable&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The variable. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account or variable with the given UUID was not found. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<PipelineVariable> getPipelineVariableForUserWithHttpInfo(String selectedUser, String variableUuid) throws ApiException {
        okhttp3.Call localVarCall = getPipelineVariableForUserValidateBeforeCall(selectedUser, variableUuid, null);
        Type localVarReturnType = new TypeToken<PipelineVariable>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a variable for a user (asynchronously)
     * Retrieve a user level variable. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
     * @param selectedUser Either the UUID of the account surrounded by curly-braces, for example &#x60;{account UUID}&#x60;, OR an Atlassian Account ID. (required)
     * @param variableUuid The UUID of the variable to retrieve. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The variable. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account or variable with the given UUID was not found. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getPipelineVariableForUserAsync(String selectedUser, String variableUuid, final ApiCallback<PipelineVariable> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPipelineVariableForUserValidateBeforeCall(selectedUser, variableUuid, _callback);
        Type localVarReturnType = new TypeToken<PipelineVariable>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPipelineVariableForWorkspace
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param variableUuid The UUID of the variable to retrieve. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The variable. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The workspace or variable with the given UUID was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPipelineVariableForWorkspaceCall(String workspace, String variableUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workspaces/{workspace}/pipelines-config/variables/{variable_uuid}"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "variable_uuid" + "}", localVarApiClient.escapeString(variableUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPipelineVariableForWorkspaceValidateBeforeCall(String workspace, String variableUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling getPipelineVariableForWorkspace(Async)");
        }

        // verify the required parameter 'variableUuid' is set
        if (variableUuid == null) {
            throw new ApiException("Missing the required parameter 'variableUuid' when calling getPipelineVariableForWorkspace(Async)");
        }

        return getPipelineVariableForWorkspaceCall(workspace, variableUuid, _callback);

    }

    /**
     * Get variable for a workspace
     * Retrieve a workspace level variable.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param variableUuid The UUID of the variable to retrieve. (required)
     * @return PipelineVariable
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The variable. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The workspace or variable with the given UUID was not found. </td><td>  -  </td></tr>
     </table>
     */
    public PipelineVariable getPipelineVariableForWorkspace(String workspace, String variableUuid) throws ApiException {
        ApiResponse<PipelineVariable> localVarResp = getPipelineVariableForWorkspaceWithHttpInfo(workspace, variableUuid);
        return localVarResp.getData();
    }

    /**
     * Get variable for a workspace
     * Retrieve a workspace level variable.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param variableUuid The UUID of the variable to retrieve. (required)
     * @return ApiResponse&lt;PipelineVariable&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The variable. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The workspace or variable with the given UUID was not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PipelineVariable> getPipelineVariableForWorkspaceWithHttpInfo(String workspace, String variableUuid) throws ApiException {
        okhttp3.Call localVarCall = getPipelineVariableForWorkspaceValidateBeforeCall(workspace, variableUuid, null);
        Type localVarReturnType = new TypeToken<PipelineVariable>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get variable for a workspace (asynchronously)
     * Retrieve a workspace level variable.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param variableUuid The UUID of the variable to retrieve. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The variable. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The workspace or variable with the given UUID was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPipelineVariableForWorkspaceAsync(String workspace, String variableUuid, final ApiCallback<PipelineVariable> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPipelineVariableForWorkspaceValidateBeforeCall(workspace, variableUuid, _callback);
        Type localVarReturnType = new TypeToken<PipelineVariable>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPipelineVariablesForTeam
     * @param username The account. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The found account level variables. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getPipelineVariablesForTeamCall(String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{username}/pipelines_config/variables"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPipelineVariablesForTeamValidateBeforeCall(String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling getPipelineVariablesForTeam(Async)");
        }

        return getPipelineVariablesForTeamCall(username, _callback);

    }

    /**
     * List variables for an account
     * Find account level variables. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
     * @param username The account. (required)
     * @return PaginatedPipelineVariables
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The found account level variables. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public PaginatedPipelineVariables getPipelineVariablesForTeam(String username) throws ApiException {
        ApiResponse<PaginatedPipelineVariables> localVarResp = getPipelineVariablesForTeamWithHttpInfo(username);
        return localVarResp.getData();
    }

    /**
     * List variables for an account
     * Find account level variables. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
     * @param username The account. (required)
     * @return ApiResponse&lt;PaginatedPipelineVariables&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The found account level variables. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<PaginatedPipelineVariables> getPipelineVariablesForTeamWithHttpInfo(String username) throws ApiException {
        okhttp3.Call localVarCall = getPipelineVariablesForTeamValidateBeforeCall(username, null);
        Type localVarReturnType = new TypeToken<PaginatedPipelineVariables>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List variables for an account (asynchronously)
     * Find account level variables. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
     * @param username The account. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The found account level variables. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getPipelineVariablesForTeamAsync(String username, final ApiCallback<PaginatedPipelineVariables> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPipelineVariablesForTeamValidateBeforeCall(username, _callback);
        Type localVarReturnType = new TypeToken<PaginatedPipelineVariables>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPipelineVariablesForUser
     * @param selectedUser Either the UUID of the account surrounded by curly-braces, for example &#x60;{account UUID}&#x60;, OR an Atlassian Account ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The found user level variables. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getPipelineVariablesForUserCall(String selectedUser, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{selected_user}/pipelines_config/variables"
            .replace("{" + "selected_user" + "}", localVarApiClient.escapeString(selectedUser.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPipelineVariablesForUserValidateBeforeCall(String selectedUser, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'selectedUser' is set
        if (selectedUser == null) {
            throw new ApiException("Missing the required parameter 'selectedUser' when calling getPipelineVariablesForUser(Async)");
        }

        return getPipelineVariablesForUserCall(selectedUser, _callback);

    }

    /**
     * List variables for a user
     * Find user level variables. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
     * @param selectedUser Either the UUID of the account surrounded by curly-braces, for example &#x60;{account UUID}&#x60;, OR an Atlassian Account ID. (required)
     * @return PaginatedPipelineVariables
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The found user level variables. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public PaginatedPipelineVariables getPipelineVariablesForUser(String selectedUser) throws ApiException {
        ApiResponse<PaginatedPipelineVariables> localVarResp = getPipelineVariablesForUserWithHttpInfo(selectedUser);
        return localVarResp.getData();
    }

    /**
     * List variables for a user
     * Find user level variables. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
     * @param selectedUser Either the UUID of the account surrounded by curly-braces, for example &#x60;{account UUID}&#x60;, OR an Atlassian Account ID. (required)
     * @return ApiResponse&lt;PaginatedPipelineVariables&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The found user level variables. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<PaginatedPipelineVariables> getPipelineVariablesForUserWithHttpInfo(String selectedUser) throws ApiException {
        okhttp3.Call localVarCall = getPipelineVariablesForUserValidateBeforeCall(selectedUser, null);
        Type localVarReturnType = new TypeToken<PaginatedPipelineVariables>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List variables for a user (asynchronously)
     * Find user level variables. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
     * @param selectedUser Either the UUID of the account surrounded by curly-braces, for example &#x60;{account UUID}&#x60;, OR an Atlassian Account ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The found user level variables. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getPipelineVariablesForUserAsync(String selectedUser, final ApiCallback<PaginatedPipelineVariables> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPipelineVariablesForUserValidateBeforeCall(selectedUser, _callback);
        Type localVarReturnType = new TypeToken<PaginatedPipelineVariables>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPipelineVariablesForWorkspace
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The found workspace level variables. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPipelineVariablesForWorkspaceCall(String workspace, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workspaces/{workspace}/pipelines-config/variables"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPipelineVariablesForWorkspaceValidateBeforeCall(String workspace, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling getPipelineVariablesForWorkspace(Async)");
        }

        return getPipelineVariablesForWorkspaceCall(workspace, _callback);

    }

    /**
     * List variables for a workspace
     * Find workspace level variables.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @return PaginatedPipelineVariables
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The found workspace level variables. </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedPipelineVariables getPipelineVariablesForWorkspace(String workspace) throws ApiException {
        ApiResponse<PaginatedPipelineVariables> localVarResp = getPipelineVariablesForWorkspaceWithHttpInfo(workspace);
        return localVarResp.getData();
    }

    /**
     * List variables for a workspace
     * Find workspace level variables.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @return ApiResponse&lt;PaginatedPipelineVariables&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The found workspace level variables. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedPipelineVariables> getPipelineVariablesForWorkspaceWithHttpInfo(String workspace) throws ApiException {
        okhttp3.Call localVarCall = getPipelineVariablesForWorkspaceValidateBeforeCall(workspace, null);
        Type localVarReturnType = new TypeToken<PaginatedPipelineVariables>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List variables for a workspace (asynchronously)
     * Find workspace level variables.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The found workspace level variables. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPipelineVariablesForWorkspaceAsync(String workspace, final ApiCallback<PaginatedPipelineVariables> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPipelineVariablesForWorkspaceValidateBeforeCall(workspace, _callback);
        Type localVarReturnType = new TypeToken<PaginatedPipelineVariables>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPipelinesForRepository
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The matching pipelines. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPipelinesForRepositoryCall(String workspace, String repoSlug, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories/{workspace}/{repo_slug}/pipelines"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "repo_slug" + "}", localVarApiClient.escapeString(repoSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPipelinesForRepositoryValidateBeforeCall(String workspace, String repoSlug, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling getPipelinesForRepository(Async)");
        }

        // verify the required parameter 'repoSlug' is set
        if (repoSlug == null) {
            throw new ApiException("Missing the required parameter 'repoSlug' when calling getPipelinesForRepository(Async)");
        }

        return getPipelinesForRepositoryCall(workspace, repoSlug, _callback);

    }

    /**
     * List pipelines
     * Find pipelines
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @return PaginatedPipelines
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The matching pipelines. </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedPipelines getPipelinesForRepository(String workspace, String repoSlug) throws ApiException {
        ApiResponse<PaginatedPipelines> localVarResp = getPipelinesForRepositoryWithHttpInfo(workspace, repoSlug);
        return localVarResp.getData();
    }

    /**
     * List pipelines
     * Find pipelines
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @return ApiResponse&lt;PaginatedPipelines&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The matching pipelines. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedPipelines> getPipelinesForRepositoryWithHttpInfo(String workspace, String repoSlug) throws ApiException {
        okhttp3.Call localVarCall = getPipelinesForRepositoryValidateBeforeCall(workspace, repoSlug, null);
        Type localVarReturnType = new TypeToken<PaginatedPipelines>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List pipelines (asynchronously)
     * Find pipelines
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The matching pipelines. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPipelinesForRepositoryAsync(String workspace, String repoSlug, final ApiCallback<PaginatedPipelines> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPipelinesForRepositoryValidateBeforeCall(workspace, repoSlug, _callback);
        Type localVarReturnType = new TypeToken<PaginatedPipelines>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRepositoryPipelineCacheContentURI
     * @param workspace The account. (required)
     * @param repoSlug The repository. (required)
     * @param cacheUuid The UUID of the cache. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The cache content uri. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The workspace, repository or cache_uuid with given UUID was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRepositoryPipelineCacheContentURICall(String workspace, String repoSlug, String cacheUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories/{workspace}/{repo_slug}/pipelines-config/caches/{cache_uuid}/content-uri"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "repo_slug" + "}", localVarApiClient.escapeString(repoSlug.toString()))
            .replace("{" + "cache_uuid" + "}", localVarApiClient.escapeString(cacheUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRepositoryPipelineCacheContentURIValidateBeforeCall(String workspace, String repoSlug, String cacheUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling getRepositoryPipelineCacheContentURI(Async)");
        }

        // verify the required parameter 'repoSlug' is set
        if (repoSlug == null) {
            throw new ApiException("Missing the required parameter 'repoSlug' when calling getRepositoryPipelineCacheContentURI(Async)");
        }

        // verify the required parameter 'cacheUuid' is set
        if (cacheUuid == null) {
            throw new ApiException("Missing the required parameter 'cacheUuid' when calling getRepositoryPipelineCacheContentURI(Async)");
        }

        return getRepositoryPipelineCacheContentURICall(workspace, repoSlug, cacheUuid, _callback);

    }

    /**
     * Get cache content URI
     * Retrieve the URI of the content of the specified cache.
     * @param workspace The account. (required)
     * @param repoSlug The repository. (required)
     * @param cacheUuid The UUID of the cache. (required)
     * @return PipelineCacheContentUri
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The cache content uri. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The workspace, repository or cache_uuid with given UUID was not found. </td><td>  -  </td></tr>
     </table>
     */
    public PipelineCacheContentUri getRepositoryPipelineCacheContentURI(String workspace, String repoSlug, String cacheUuid) throws ApiException {
        ApiResponse<PipelineCacheContentUri> localVarResp = getRepositoryPipelineCacheContentURIWithHttpInfo(workspace, repoSlug, cacheUuid);
        return localVarResp.getData();
    }

    /**
     * Get cache content URI
     * Retrieve the URI of the content of the specified cache.
     * @param workspace The account. (required)
     * @param repoSlug The repository. (required)
     * @param cacheUuid The UUID of the cache. (required)
     * @return ApiResponse&lt;PipelineCacheContentUri&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The cache content uri. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The workspace, repository or cache_uuid with given UUID was not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PipelineCacheContentUri> getRepositoryPipelineCacheContentURIWithHttpInfo(String workspace, String repoSlug, String cacheUuid) throws ApiException {
        okhttp3.Call localVarCall = getRepositoryPipelineCacheContentURIValidateBeforeCall(workspace, repoSlug, cacheUuid, null);
        Type localVarReturnType = new TypeToken<PipelineCacheContentUri>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get cache content URI (asynchronously)
     * Retrieve the URI of the content of the specified cache.
     * @param workspace The account. (required)
     * @param repoSlug The repository. (required)
     * @param cacheUuid The UUID of the cache. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The cache content uri. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The workspace, repository or cache_uuid with given UUID was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRepositoryPipelineCacheContentURIAsync(String workspace, String repoSlug, String cacheUuid, final ApiCallback<PipelineCacheContentUri> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRepositoryPipelineCacheContentURIValidateBeforeCall(workspace, repoSlug, cacheUuid, _callback);
        Type localVarReturnType = new TypeToken<PipelineCacheContentUri>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRepositoryPipelineCaches
     * @param workspace The account. (required)
     * @param repoSlug The repository. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of caches for the given repository. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account or repository was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRepositoryPipelineCachesCall(String workspace, String repoSlug, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories/{workspace}/{repo_slug}/pipelines-config/caches"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "repo_slug" + "}", localVarApiClient.escapeString(repoSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRepositoryPipelineCachesValidateBeforeCall(String workspace, String repoSlug, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling getRepositoryPipelineCaches(Async)");
        }

        // verify the required parameter 'repoSlug' is set
        if (repoSlug == null) {
            throw new ApiException("Missing the required parameter 'repoSlug' when calling getRepositoryPipelineCaches(Async)");
        }

        return getRepositoryPipelineCachesCall(workspace, repoSlug, _callback);

    }

    /**
     * List caches
     * Retrieve the repository pipelines caches.
     * @param workspace The account. (required)
     * @param repoSlug The repository. (required)
     * @return PaginatedPipelineCaches
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of caches for the given repository. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account or repository was not found. </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedPipelineCaches getRepositoryPipelineCaches(String workspace, String repoSlug) throws ApiException {
        ApiResponse<PaginatedPipelineCaches> localVarResp = getRepositoryPipelineCachesWithHttpInfo(workspace, repoSlug);
        return localVarResp.getData();
    }

    /**
     * List caches
     * Retrieve the repository pipelines caches.
     * @param workspace The account. (required)
     * @param repoSlug The repository. (required)
     * @return ApiResponse&lt;PaginatedPipelineCaches&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of caches for the given repository. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account or repository was not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedPipelineCaches> getRepositoryPipelineCachesWithHttpInfo(String workspace, String repoSlug) throws ApiException {
        okhttp3.Call localVarCall = getRepositoryPipelineCachesValidateBeforeCall(workspace, repoSlug, null);
        Type localVarReturnType = new TypeToken<PaginatedPipelineCaches>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List caches (asynchronously)
     * Retrieve the repository pipelines caches.
     * @param workspace The account. (required)
     * @param repoSlug The repository. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of caches for the given repository. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account or repository was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRepositoryPipelineCachesAsync(String workspace, String repoSlug, final ApiCallback<PaginatedPipelineCaches> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRepositoryPipelineCachesValidateBeforeCall(workspace, repoSlug, _callback);
        Type localVarReturnType = new TypeToken<PaginatedPipelineCaches>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRepositoryPipelineConfig
     * @param workspace The account. (required)
     * @param repoSlug The repository. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The repository pipelines configuration. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRepositoryPipelineConfigCall(String workspace, String repoSlug, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories/{workspace}/{repo_slug}/pipelines_config"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "repo_slug" + "}", localVarApiClient.escapeString(repoSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRepositoryPipelineConfigValidateBeforeCall(String workspace, String repoSlug, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling getRepositoryPipelineConfig(Async)");
        }

        // verify the required parameter 'repoSlug' is set
        if (repoSlug == null) {
            throw new ApiException("Missing the required parameter 'repoSlug' when calling getRepositoryPipelineConfig(Async)");
        }

        return getRepositoryPipelineConfigCall(workspace, repoSlug, _callback);

    }

    /**
     * Get configuration
     * Retrieve the repository pipelines configuration.
     * @param workspace The account. (required)
     * @param repoSlug The repository. (required)
     * @return PipelinesConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The repository pipelines configuration. </td><td>  -  </td></tr>
     </table>
     */
    public PipelinesConfig getRepositoryPipelineConfig(String workspace, String repoSlug) throws ApiException {
        ApiResponse<PipelinesConfig> localVarResp = getRepositoryPipelineConfigWithHttpInfo(workspace, repoSlug);
        return localVarResp.getData();
    }

    /**
     * Get configuration
     * Retrieve the repository pipelines configuration.
     * @param workspace The account. (required)
     * @param repoSlug The repository. (required)
     * @return ApiResponse&lt;PipelinesConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The repository pipelines configuration. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PipelinesConfig> getRepositoryPipelineConfigWithHttpInfo(String workspace, String repoSlug) throws ApiException {
        okhttp3.Call localVarCall = getRepositoryPipelineConfigValidateBeforeCall(workspace, repoSlug, null);
        Type localVarReturnType = new TypeToken<PipelinesConfig>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get configuration (asynchronously)
     * Retrieve the repository pipelines configuration.
     * @param workspace The account. (required)
     * @param repoSlug The repository. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The repository pipelines configuration. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRepositoryPipelineConfigAsync(String workspace, String repoSlug, final ApiCallback<PipelinesConfig> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRepositoryPipelineConfigValidateBeforeCall(workspace, repoSlug, _callback);
        Type localVarReturnType = new TypeToken<PipelinesConfig>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRepositoryPipelineKnownHost
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param knownHostUuid The UUID of the known host to retrieve. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The known host. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account, repository or known host with the specified UUID was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRepositoryPipelineKnownHostCall(String workspace, String repoSlug, String knownHostUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories/{workspace}/{repo_slug}/pipelines_config/ssh/known_hosts/{known_host_uuid}"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "repo_slug" + "}", localVarApiClient.escapeString(repoSlug.toString()))
            .replace("{" + "known_host_uuid" + "}", localVarApiClient.escapeString(knownHostUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRepositoryPipelineKnownHostValidateBeforeCall(String workspace, String repoSlug, String knownHostUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling getRepositoryPipelineKnownHost(Async)");
        }

        // verify the required parameter 'repoSlug' is set
        if (repoSlug == null) {
            throw new ApiException("Missing the required parameter 'repoSlug' when calling getRepositoryPipelineKnownHost(Async)");
        }

        // verify the required parameter 'knownHostUuid' is set
        if (knownHostUuid == null) {
            throw new ApiException("Missing the required parameter 'knownHostUuid' when calling getRepositoryPipelineKnownHost(Async)");
        }

        return getRepositoryPipelineKnownHostCall(workspace, repoSlug, knownHostUuid, _callback);

    }

    /**
     * Get a known host
     * Retrieve a repository level known host.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param knownHostUuid The UUID of the known host to retrieve. (required)
     * @return PipelineKnownHost
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The known host. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account, repository or known host with the specified UUID was not found. </td><td>  -  </td></tr>
     </table>
     */
    public PipelineKnownHost getRepositoryPipelineKnownHost(String workspace, String repoSlug, String knownHostUuid) throws ApiException {
        ApiResponse<PipelineKnownHost> localVarResp = getRepositoryPipelineKnownHostWithHttpInfo(workspace, repoSlug, knownHostUuid);
        return localVarResp.getData();
    }

    /**
     * Get a known host
     * Retrieve a repository level known host.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param knownHostUuid The UUID of the known host to retrieve. (required)
     * @return ApiResponse&lt;PipelineKnownHost&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The known host. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account, repository or known host with the specified UUID was not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PipelineKnownHost> getRepositoryPipelineKnownHostWithHttpInfo(String workspace, String repoSlug, String knownHostUuid) throws ApiException {
        okhttp3.Call localVarCall = getRepositoryPipelineKnownHostValidateBeforeCall(workspace, repoSlug, knownHostUuid, null);
        Type localVarReturnType = new TypeToken<PipelineKnownHost>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a known host (asynchronously)
     * Retrieve a repository level known host.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param knownHostUuid The UUID of the known host to retrieve. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The known host. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account, repository or known host with the specified UUID was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRepositoryPipelineKnownHostAsync(String workspace, String repoSlug, String knownHostUuid, final ApiCallback<PipelineKnownHost> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRepositoryPipelineKnownHostValidateBeforeCall(workspace, repoSlug, knownHostUuid, _callback);
        Type localVarReturnType = new TypeToken<PipelineKnownHost>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRepositoryPipelineKnownHosts
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved known hosts. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRepositoryPipelineKnownHostsCall(String workspace, String repoSlug, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories/{workspace}/{repo_slug}/pipelines_config/ssh/known_hosts"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "repo_slug" + "}", localVarApiClient.escapeString(repoSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRepositoryPipelineKnownHostsValidateBeforeCall(String workspace, String repoSlug, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling getRepositoryPipelineKnownHosts(Async)");
        }

        // verify the required parameter 'repoSlug' is set
        if (repoSlug == null) {
            throw new ApiException("Missing the required parameter 'repoSlug' when calling getRepositoryPipelineKnownHosts(Async)");
        }

        return getRepositoryPipelineKnownHostsCall(workspace, repoSlug, _callback);

    }

    /**
     * List known hosts
     * Find repository level known hosts.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @return PaginatedPipelineKnownHosts
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved known hosts. </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedPipelineKnownHosts getRepositoryPipelineKnownHosts(String workspace, String repoSlug) throws ApiException {
        ApiResponse<PaginatedPipelineKnownHosts> localVarResp = getRepositoryPipelineKnownHostsWithHttpInfo(workspace, repoSlug);
        return localVarResp.getData();
    }

    /**
     * List known hosts
     * Find repository level known hosts.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @return ApiResponse&lt;PaginatedPipelineKnownHosts&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved known hosts. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedPipelineKnownHosts> getRepositoryPipelineKnownHostsWithHttpInfo(String workspace, String repoSlug) throws ApiException {
        okhttp3.Call localVarCall = getRepositoryPipelineKnownHostsValidateBeforeCall(workspace, repoSlug, null);
        Type localVarReturnType = new TypeToken<PaginatedPipelineKnownHosts>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List known hosts (asynchronously)
     * Find repository level known hosts.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved known hosts. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRepositoryPipelineKnownHostsAsync(String workspace, String repoSlug, final ApiCallback<PaginatedPipelineKnownHosts> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRepositoryPipelineKnownHostsValidateBeforeCall(workspace, repoSlug, _callback);
        Type localVarReturnType = new TypeToken<PaginatedPipelineKnownHosts>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRepositoryPipelineSchedule
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param scheduleUuid The uuid of the schedule. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested schedule. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account, repository or schedule was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRepositoryPipelineScheduleCall(String workspace, String repoSlug, String scheduleUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories/{workspace}/{repo_slug}/pipelines_config/schedules/{schedule_uuid}"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "repo_slug" + "}", localVarApiClient.escapeString(repoSlug.toString()))
            .replace("{" + "schedule_uuid" + "}", localVarApiClient.escapeString(scheduleUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRepositoryPipelineScheduleValidateBeforeCall(String workspace, String repoSlug, String scheduleUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling getRepositoryPipelineSchedule(Async)");
        }

        // verify the required parameter 'repoSlug' is set
        if (repoSlug == null) {
            throw new ApiException("Missing the required parameter 'repoSlug' when calling getRepositoryPipelineSchedule(Async)");
        }

        // verify the required parameter 'scheduleUuid' is set
        if (scheduleUuid == null) {
            throw new ApiException("Missing the required parameter 'scheduleUuid' when calling getRepositoryPipelineSchedule(Async)");
        }

        return getRepositoryPipelineScheduleCall(workspace, repoSlug, scheduleUuid, _callback);

    }

    /**
     * Get a schedule
     * Retrieve a schedule by its UUID.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param scheduleUuid The uuid of the schedule. (required)
     * @return PipelineSchedule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested schedule. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account, repository or schedule was not found. </td><td>  -  </td></tr>
     </table>
     */
    public PipelineSchedule getRepositoryPipelineSchedule(String workspace, String repoSlug, String scheduleUuid) throws ApiException {
        ApiResponse<PipelineSchedule> localVarResp = getRepositoryPipelineScheduleWithHttpInfo(workspace, repoSlug, scheduleUuid);
        return localVarResp.getData();
    }

    /**
     * Get a schedule
     * Retrieve a schedule by its UUID.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param scheduleUuid The uuid of the schedule. (required)
     * @return ApiResponse&lt;PipelineSchedule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested schedule. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account, repository or schedule was not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PipelineSchedule> getRepositoryPipelineScheduleWithHttpInfo(String workspace, String repoSlug, String scheduleUuid) throws ApiException {
        okhttp3.Call localVarCall = getRepositoryPipelineScheduleValidateBeforeCall(workspace, repoSlug, scheduleUuid, null);
        Type localVarReturnType = new TypeToken<PipelineSchedule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a schedule (asynchronously)
     * Retrieve a schedule by its UUID.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param scheduleUuid The uuid of the schedule. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested schedule. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account, repository or schedule was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRepositoryPipelineScheduleAsync(String workspace, String repoSlug, String scheduleUuid, final ApiCallback<PipelineSchedule> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRepositoryPipelineScheduleValidateBeforeCall(workspace, repoSlug, scheduleUuid, _callback);
        Type localVarReturnType = new TypeToken<PipelineSchedule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRepositoryPipelineScheduleExecutions
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param scheduleUuid The uuid of the schedule. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of executions of a schedule. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account or repository was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRepositoryPipelineScheduleExecutionsCall(String workspace, String repoSlug, String scheduleUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories/{workspace}/{repo_slug}/pipelines_config/schedules/{schedule_uuid}/executions"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "repo_slug" + "}", localVarApiClient.escapeString(repoSlug.toString()))
            .replace("{" + "schedule_uuid" + "}", localVarApiClient.escapeString(scheduleUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRepositoryPipelineScheduleExecutionsValidateBeforeCall(String workspace, String repoSlug, String scheduleUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling getRepositoryPipelineScheduleExecutions(Async)");
        }

        // verify the required parameter 'repoSlug' is set
        if (repoSlug == null) {
            throw new ApiException("Missing the required parameter 'repoSlug' when calling getRepositoryPipelineScheduleExecutions(Async)");
        }

        // verify the required parameter 'scheduleUuid' is set
        if (scheduleUuid == null) {
            throw new ApiException("Missing the required parameter 'scheduleUuid' when calling getRepositoryPipelineScheduleExecutions(Async)");
        }

        return getRepositoryPipelineScheduleExecutionsCall(workspace, repoSlug, scheduleUuid, _callback);

    }

    /**
     * List executions of a schedule
     * Retrieve the executions of a given schedule.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param scheduleUuid The uuid of the schedule. (required)
     * @return PaginatedPipelineScheduleExecutions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of executions of a schedule. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account or repository was not found. </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedPipelineScheduleExecutions getRepositoryPipelineScheduleExecutions(String workspace, String repoSlug, String scheduleUuid) throws ApiException {
        ApiResponse<PaginatedPipelineScheduleExecutions> localVarResp = getRepositoryPipelineScheduleExecutionsWithHttpInfo(workspace, repoSlug, scheduleUuid);
        return localVarResp.getData();
    }

    /**
     * List executions of a schedule
     * Retrieve the executions of a given schedule.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param scheduleUuid The uuid of the schedule. (required)
     * @return ApiResponse&lt;PaginatedPipelineScheduleExecutions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of executions of a schedule. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account or repository was not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedPipelineScheduleExecutions> getRepositoryPipelineScheduleExecutionsWithHttpInfo(String workspace, String repoSlug, String scheduleUuid) throws ApiException {
        okhttp3.Call localVarCall = getRepositoryPipelineScheduleExecutionsValidateBeforeCall(workspace, repoSlug, scheduleUuid, null);
        Type localVarReturnType = new TypeToken<PaginatedPipelineScheduleExecutions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List executions of a schedule (asynchronously)
     * Retrieve the executions of a given schedule.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param scheduleUuid The uuid of the schedule. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of executions of a schedule. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account or repository was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRepositoryPipelineScheduleExecutionsAsync(String workspace, String repoSlug, String scheduleUuid, final ApiCallback<PaginatedPipelineScheduleExecutions> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRepositoryPipelineScheduleExecutionsValidateBeforeCall(workspace, repoSlug, scheduleUuid, _callback);
        Type localVarReturnType = new TypeToken<PaginatedPipelineScheduleExecutions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRepositoryPipelineSchedules
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of schedules. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account or repository was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRepositoryPipelineSchedulesCall(String workspace, String repoSlug, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories/{workspace}/{repo_slug}/pipelines_config/schedules"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "repo_slug" + "}", localVarApiClient.escapeString(repoSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRepositoryPipelineSchedulesValidateBeforeCall(String workspace, String repoSlug, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling getRepositoryPipelineSchedules(Async)");
        }

        // verify the required parameter 'repoSlug' is set
        if (repoSlug == null) {
            throw new ApiException("Missing the required parameter 'repoSlug' when calling getRepositoryPipelineSchedules(Async)");
        }

        return getRepositoryPipelineSchedulesCall(workspace, repoSlug, _callback);

    }

    /**
     * List schedules
     * Retrieve the configured schedules for the given repository.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @return PaginatedPipelineSchedules
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of schedules. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account or repository was not found. </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedPipelineSchedules getRepositoryPipelineSchedules(String workspace, String repoSlug) throws ApiException {
        ApiResponse<PaginatedPipelineSchedules> localVarResp = getRepositoryPipelineSchedulesWithHttpInfo(workspace, repoSlug);
        return localVarResp.getData();
    }

    /**
     * List schedules
     * Retrieve the configured schedules for the given repository.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @return ApiResponse&lt;PaginatedPipelineSchedules&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of schedules. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account or repository was not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedPipelineSchedules> getRepositoryPipelineSchedulesWithHttpInfo(String workspace, String repoSlug) throws ApiException {
        okhttp3.Call localVarCall = getRepositoryPipelineSchedulesValidateBeforeCall(workspace, repoSlug, null);
        Type localVarReturnType = new TypeToken<PaginatedPipelineSchedules>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List schedules (asynchronously)
     * Retrieve the configured schedules for the given repository.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of schedules. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account or repository was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRepositoryPipelineSchedulesAsync(String workspace, String repoSlug, final ApiCallback<PaginatedPipelineSchedules> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRepositoryPipelineSchedulesValidateBeforeCall(workspace, repoSlug, _callback);
        Type localVarReturnType = new TypeToken<PaginatedPipelineSchedules>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRepositoryPipelineSshKeyPair
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SSH key pair. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account, repository or SSH key pair was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRepositoryPipelineSshKeyPairCall(String workspace, String repoSlug, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories/{workspace}/{repo_slug}/pipelines_config/ssh/key_pair"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "repo_slug" + "}", localVarApiClient.escapeString(repoSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRepositoryPipelineSshKeyPairValidateBeforeCall(String workspace, String repoSlug, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling getRepositoryPipelineSshKeyPair(Async)");
        }

        // verify the required parameter 'repoSlug' is set
        if (repoSlug == null) {
            throw new ApiException("Missing the required parameter 'repoSlug' when calling getRepositoryPipelineSshKeyPair(Async)");
        }

        return getRepositoryPipelineSshKeyPairCall(workspace, repoSlug, _callback);

    }

    /**
     * Get SSH key pair
     * Retrieve the repository SSH key pair excluding the SSH private key. The private key is a write only field and will never be exposed in the logs or the REST API.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @return PipelineSshKeyPair
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SSH key pair. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account, repository or SSH key pair was not found. </td><td>  -  </td></tr>
     </table>
     */
    public PipelineSshKeyPair getRepositoryPipelineSshKeyPair(String workspace, String repoSlug) throws ApiException {
        ApiResponse<PipelineSshKeyPair> localVarResp = getRepositoryPipelineSshKeyPairWithHttpInfo(workspace, repoSlug);
        return localVarResp.getData();
    }

    /**
     * Get SSH key pair
     * Retrieve the repository SSH key pair excluding the SSH private key. The private key is a write only field and will never be exposed in the logs or the REST API.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @return ApiResponse&lt;PipelineSshKeyPair&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SSH key pair. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account, repository or SSH key pair was not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PipelineSshKeyPair> getRepositoryPipelineSshKeyPairWithHttpInfo(String workspace, String repoSlug) throws ApiException {
        okhttp3.Call localVarCall = getRepositoryPipelineSshKeyPairValidateBeforeCall(workspace, repoSlug, null);
        Type localVarReturnType = new TypeToken<PipelineSshKeyPair>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get SSH key pair (asynchronously)
     * Retrieve the repository SSH key pair excluding the SSH private key. The private key is a write only field and will never be exposed in the logs or the REST API.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SSH key pair. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account, repository or SSH key pair was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRepositoryPipelineSshKeyPairAsync(String workspace, String repoSlug, final ApiCallback<PipelineSshKeyPair> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRepositoryPipelineSshKeyPairValidateBeforeCall(workspace, repoSlug, _callback);
        Type localVarReturnType = new TypeToken<PipelineSshKeyPair>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRepositoryPipelineVariable
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param variableUuid The UUID of the variable to retrieve. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The variable. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account, repository or variable with the specified UUID was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRepositoryPipelineVariableCall(String workspace, String repoSlug, String variableUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories/{workspace}/{repo_slug}/pipelines_config/variables/{variable_uuid}"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "repo_slug" + "}", localVarApiClient.escapeString(repoSlug.toString()))
            .replace("{" + "variable_uuid" + "}", localVarApiClient.escapeString(variableUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRepositoryPipelineVariableValidateBeforeCall(String workspace, String repoSlug, String variableUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling getRepositoryPipelineVariable(Async)");
        }

        // verify the required parameter 'repoSlug' is set
        if (repoSlug == null) {
            throw new ApiException("Missing the required parameter 'repoSlug' when calling getRepositoryPipelineVariable(Async)");
        }

        // verify the required parameter 'variableUuid' is set
        if (variableUuid == null) {
            throw new ApiException("Missing the required parameter 'variableUuid' when calling getRepositoryPipelineVariable(Async)");
        }

        return getRepositoryPipelineVariableCall(workspace, repoSlug, variableUuid, _callback);

    }

    /**
     * Get a variable for a repository
     * Retrieve a repository level variable.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param variableUuid The UUID of the variable to retrieve. (required)
     * @return PipelineVariable
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The variable. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account, repository or variable with the specified UUID was not found. </td><td>  -  </td></tr>
     </table>
     */
    public PipelineVariable getRepositoryPipelineVariable(String workspace, String repoSlug, String variableUuid) throws ApiException {
        ApiResponse<PipelineVariable> localVarResp = getRepositoryPipelineVariableWithHttpInfo(workspace, repoSlug, variableUuid);
        return localVarResp.getData();
    }

    /**
     * Get a variable for a repository
     * Retrieve a repository level variable.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param variableUuid The UUID of the variable to retrieve. (required)
     * @return ApiResponse&lt;PipelineVariable&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The variable. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account, repository or variable with the specified UUID was not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PipelineVariable> getRepositoryPipelineVariableWithHttpInfo(String workspace, String repoSlug, String variableUuid) throws ApiException {
        okhttp3.Call localVarCall = getRepositoryPipelineVariableValidateBeforeCall(workspace, repoSlug, variableUuid, null);
        Type localVarReturnType = new TypeToken<PipelineVariable>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a variable for a repository (asynchronously)
     * Retrieve a repository level variable.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param variableUuid The UUID of the variable to retrieve. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The variable. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account, repository or variable with the specified UUID was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRepositoryPipelineVariableAsync(String workspace, String repoSlug, String variableUuid, final ApiCallback<PipelineVariable> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRepositoryPipelineVariableValidateBeforeCall(workspace, repoSlug, variableUuid, _callback);
        Type localVarReturnType = new TypeToken<PipelineVariable>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRepositoryPipelineVariables
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved variables. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRepositoryPipelineVariablesCall(String workspace, String repoSlug, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories/{workspace}/{repo_slug}/pipelines_config/variables"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "repo_slug" + "}", localVarApiClient.escapeString(repoSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRepositoryPipelineVariablesValidateBeforeCall(String workspace, String repoSlug, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling getRepositoryPipelineVariables(Async)");
        }

        // verify the required parameter 'repoSlug' is set
        if (repoSlug == null) {
            throw new ApiException("Missing the required parameter 'repoSlug' when calling getRepositoryPipelineVariables(Async)");
        }

        return getRepositoryPipelineVariablesCall(workspace, repoSlug, _callback);

    }

    /**
     * List variables for a repository
     * Find repository level variables.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @return PaginatedPipelineVariables
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved variables. </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedPipelineVariables getRepositoryPipelineVariables(String workspace, String repoSlug) throws ApiException {
        ApiResponse<PaginatedPipelineVariables> localVarResp = getRepositoryPipelineVariablesWithHttpInfo(workspace, repoSlug);
        return localVarResp.getData();
    }

    /**
     * List variables for a repository
     * Find repository level variables.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @return ApiResponse&lt;PaginatedPipelineVariables&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved variables. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedPipelineVariables> getRepositoryPipelineVariablesWithHttpInfo(String workspace, String repoSlug) throws ApiException {
        okhttp3.Call localVarCall = getRepositoryPipelineVariablesValidateBeforeCall(workspace, repoSlug, null);
        Type localVarReturnType = new TypeToken<PaginatedPipelineVariables>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List variables for a repository (asynchronously)
     * Find repository level variables.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved variables. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRepositoryPipelineVariablesAsync(String workspace, String repoSlug, final ApiCallback<PaginatedPipelineVariables> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRepositoryPipelineVariablesValidateBeforeCall(workspace, repoSlug, _callback);
        Type localVarReturnType = new TypeToken<PaginatedPipelineVariables>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stopPipeline
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param pipelineUuid The UUID of the pipeline. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The pipeline has been signaled to stop. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified pipeline has already completed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the account, repository or pipeline with the given UUID does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stopPipelineCall(String workspace, String repoSlug, String pipelineUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories/{workspace}/{repo_slug}/pipelines/{pipeline_uuid}/stopPipeline"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "repo_slug" + "}", localVarApiClient.escapeString(repoSlug.toString()))
            .replace("{" + "pipeline_uuid" + "}", localVarApiClient.escapeString(pipelineUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stopPipelineValidateBeforeCall(String workspace, String repoSlug, String pipelineUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling stopPipeline(Async)");
        }

        // verify the required parameter 'repoSlug' is set
        if (repoSlug == null) {
            throw new ApiException("Missing the required parameter 'repoSlug' when calling stopPipeline(Async)");
        }

        // verify the required parameter 'pipelineUuid' is set
        if (pipelineUuid == null) {
            throw new ApiException("Missing the required parameter 'pipelineUuid' when calling stopPipeline(Async)");
        }

        return stopPipelineCall(workspace, repoSlug, pipelineUuid, _callback);

    }

    /**
     * Stop a pipeline
     * Signal the stop of a pipeline and all of its steps that not have completed yet.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param pipelineUuid The UUID of the pipeline. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The pipeline has been signaled to stop. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified pipeline has already completed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the account, repository or pipeline with the given UUID does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public void stopPipeline(String workspace, String repoSlug, String pipelineUuid) throws ApiException {
        stopPipelineWithHttpInfo(workspace, repoSlug, pipelineUuid);
    }

    /**
     * Stop a pipeline
     * Signal the stop of a pipeline and all of its steps that not have completed yet.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param pipelineUuid The UUID of the pipeline. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The pipeline has been signaled to stop. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified pipeline has already completed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the account, repository or pipeline with the given UUID does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> stopPipelineWithHttpInfo(String workspace, String repoSlug, String pipelineUuid) throws ApiException {
        okhttp3.Call localVarCall = stopPipelineValidateBeforeCall(workspace, repoSlug, pipelineUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Stop a pipeline (asynchronously)
     * Signal the stop of a pipeline and all of its steps that not have completed yet.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param pipelineUuid The UUID of the pipeline. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The pipeline has been signaled to stop. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified pipeline has already completed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the account, repository or pipeline with the given UUID does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stopPipelineAsync(String workspace, String repoSlug, String pipelineUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = stopPipelineValidateBeforeCall(workspace, repoSlug, pipelineUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDeploymentVariable
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param environmentUuid The environment. (required)
     * @param variableUuid The UUID of the variable to update. (required)
     * @param deploymentVariable The updated deployment variable. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deployment variable was updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account, repository, environment or variable with the given UUID was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDeploymentVariableCall(String workspace, String repoSlug, String environmentUuid, String variableUuid, DeploymentVariable deploymentVariable, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deploymentVariable;

        // create path and map variables
        String localVarPath = "/repositories/{workspace}/{repo_slug}/deployments_config/environments/{environment_uuid}/variables/{variable_uuid}"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "repo_slug" + "}", localVarApiClient.escapeString(repoSlug.toString()))
            .replace("{" + "environment_uuid" + "}", localVarApiClient.escapeString(environmentUuid.toString()))
            .replace("{" + "variable_uuid" + "}", localVarApiClient.escapeString(variableUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDeploymentVariableValidateBeforeCall(String workspace, String repoSlug, String environmentUuid, String variableUuid, DeploymentVariable deploymentVariable, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling updateDeploymentVariable(Async)");
        }

        // verify the required parameter 'repoSlug' is set
        if (repoSlug == null) {
            throw new ApiException("Missing the required parameter 'repoSlug' when calling updateDeploymentVariable(Async)");
        }

        // verify the required parameter 'environmentUuid' is set
        if (environmentUuid == null) {
            throw new ApiException("Missing the required parameter 'environmentUuid' when calling updateDeploymentVariable(Async)");
        }

        // verify the required parameter 'variableUuid' is set
        if (variableUuid == null) {
            throw new ApiException("Missing the required parameter 'variableUuid' when calling updateDeploymentVariable(Async)");
        }

        // verify the required parameter 'deploymentVariable' is set
        if (deploymentVariable == null) {
            throw new ApiException("Missing the required parameter 'deploymentVariable' when calling updateDeploymentVariable(Async)");
        }

        return updateDeploymentVariableCall(workspace, repoSlug, environmentUuid, variableUuid, deploymentVariable, _callback);

    }

    /**
     * Update a variable for an environment
     * Update a deployment environment level variable.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param environmentUuid The environment. (required)
     * @param variableUuid The UUID of the variable to update. (required)
     * @param deploymentVariable The updated deployment variable. (required)
     * @return DeploymentVariable
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deployment variable was updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account, repository, environment or variable with the given UUID was not found. </td><td>  -  </td></tr>
     </table>
     */
    public DeploymentVariable updateDeploymentVariable(String workspace, String repoSlug, String environmentUuid, String variableUuid, DeploymentVariable deploymentVariable) throws ApiException {
        ApiResponse<DeploymentVariable> localVarResp = updateDeploymentVariableWithHttpInfo(workspace, repoSlug, environmentUuid, variableUuid, deploymentVariable);
        return localVarResp.getData();
    }

    /**
     * Update a variable for an environment
     * Update a deployment environment level variable.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param environmentUuid The environment. (required)
     * @param variableUuid The UUID of the variable to update. (required)
     * @param deploymentVariable The updated deployment variable. (required)
     * @return ApiResponse&lt;DeploymentVariable&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deployment variable was updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account, repository, environment or variable with the given UUID was not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeploymentVariable> updateDeploymentVariableWithHttpInfo(String workspace, String repoSlug, String environmentUuid, String variableUuid, DeploymentVariable deploymentVariable) throws ApiException {
        okhttp3.Call localVarCall = updateDeploymentVariableValidateBeforeCall(workspace, repoSlug, environmentUuid, variableUuid, deploymentVariable, null);
        Type localVarReturnType = new TypeToken<DeploymentVariable>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a variable for an environment (asynchronously)
     * Update a deployment environment level variable.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param environmentUuid The environment. (required)
     * @param variableUuid The UUID of the variable to update. (required)
     * @param deploymentVariable The updated deployment variable. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deployment variable was updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account, repository, environment or variable with the given UUID was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDeploymentVariableAsync(String workspace, String repoSlug, String environmentUuid, String variableUuid, DeploymentVariable deploymentVariable, final ApiCallback<DeploymentVariable> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDeploymentVariableValidateBeforeCall(workspace, repoSlug, environmentUuid, variableUuid, deploymentVariable, _callback);
        Type localVarReturnType = new TypeToken<DeploymentVariable>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePipelineVariableForTeam
     * @param username The account. (required)
     * @param variableUuid The UUID of the variable. (required)
     * @param pipelineVariable The updated variable. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The variable was updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account or the variable was not found. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call updatePipelineVariableForTeamCall(String username, String variableUuid, PipelineVariable pipelineVariable, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pipelineVariable;

        // create path and map variables
        String localVarPath = "/teams/{username}/pipelines_config/variables/{variable_uuid}"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()))
            .replace("{" + "variable_uuid" + "}", localVarApiClient.escapeString(variableUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePipelineVariableForTeamValidateBeforeCall(String username, String variableUuid, PipelineVariable pipelineVariable, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling updatePipelineVariableForTeam(Async)");
        }

        // verify the required parameter 'variableUuid' is set
        if (variableUuid == null) {
            throw new ApiException("Missing the required parameter 'variableUuid' when calling updatePipelineVariableForTeam(Async)");
        }

        // verify the required parameter 'pipelineVariable' is set
        if (pipelineVariable == null) {
            throw new ApiException("Missing the required parameter 'pipelineVariable' when calling updatePipelineVariableForTeam(Async)");
        }

        return updatePipelineVariableForTeamCall(username, variableUuid, pipelineVariable, _callback);

    }

    /**
     * Update a variable for a team
     * Update a team level variable. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
     * @param username The account. (required)
     * @param variableUuid The UUID of the variable. (required)
     * @param pipelineVariable The updated variable. (required)
     * @return PipelineVariable
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The variable was updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account or the variable was not found. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public PipelineVariable updatePipelineVariableForTeam(String username, String variableUuid, PipelineVariable pipelineVariable) throws ApiException {
        ApiResponse<PipelineVariable> localVarResp = updatePipelineVariableForTeamWithHttpInfo(username, variableUuid, pipelineVariable);
        return localVarResp.getData();
    }

    /**
     * Update a variable for a team
     * Update a team level variable. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
     * @param username The account. (required)
     * @param variableUuid The UUID of the variable. (required)
     * @param pipelineVariable The updated variable. (required)
     * @return ApiResponse&lt;PipelineVariable&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The variable was updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account or the variable was not found. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<PipelineVariable> updatePipelineVariableForTeamWithHttpInfo(String username, String variableUuid, PipelineVariable pipelineVariable) throws ApiException {
        okhttp3.Call localVarCall = updatePipelineVariableForTeamValidateBeforeCall(username, variableUuid, pipelineVariable, null);
        Type localVarReturnType = new TypeToken<PipelineVariable>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a variable for a team (asynchronously)
     * Update a team level variable. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
     * @param username The account. (required)
     * @param variableUuid The UUID of the variable. (required)
     * @param pipelineVariable The updated variable. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The variable was updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account or the variable was not found. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call updatePipelineVariableForTeamAsync(String username, String variableUuid, PipelineVariable pipelineVariable, final ApiCallback<PipelineVariable> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePipelineVariableForTeamValidateBeforeCall(username, variableUuid, pipelineVariable, _callback);
        Type localVarReturnType = new TypeToken<PipelineVariable>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePipelineVariableForUser
     * @param selectedUser Either the UUID of the account surrounded by curly-braces, for example &#x60;{account UUID}&#x60;, OR an Atlassian Account ID. (required)
     * @param variableUuid The UUID of the variable. (required)
     * @param pipelineVariable The updated variable. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The variable was updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account or the variable was not found. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call updatePipelineVariableForUserCall(String selectedUser, String variableUuid, PipelineVariable pipelineVariable, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pipelineVariable;

        // create path and map variables
        String localVarPath = "/users/{selected_user}/pipelines_config/variables/{variable_uuid}"
            .replace("{" + "selected_user" + "}", localVarApiClient.escapeString(selectedUser.toString()))
            .replace("{" + "variable_uuid" + "}", localVarApiClient.escapeString(variableUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePipelineVariableForUserValidateBeforeCall(String selectedUser, String variableUuid, PipelineVariable pipelineVariable, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'selectedUser' is set
        if (selectedUser == null) {
            throw new ApiException("Missing the required parameter 'selectedUser' when calling updatePipelineVariableForUser(Async)");
        }

        // verify the required parameter 'variableUuid' is set
        if (variableUuid == null) {
            throw new ApiException("Missing the required parameter 'variableUuid' when calling updatePipelineVariableForUser(Async)");
        }

        // verify the required parameter 'pipelineVariable' is set
        if (pipelineVariable == null) {
            throw new ApiException("Missing the required parameter 'pipelineVariable' when calling updatePipelineVariableForUser(Async)");
        }

        return updatePipelineVariableForUserCall(selectedUser, variableUuid, pipelineVariable, _callback);

    }

    /**
     * Update a variable for a user
     * Update a user level variable. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
     * @param selectedUser Either the UUID of the account surrounded by curly-braces, for example &#x60;{account UUID}&#x60;, OR an Atlassian Account ID. (required)
     * @param variableUuid The UUID of the variable. (required)
     * @param pipelineVariable The updated variable. (required)
     * @return PipelineVariable
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The variable was updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account or the variable was not found. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public PipelineVariable updatePipelineVariableForUser(String selectedUser, String variableUuid, PipelineVariable pipelineVariable) throws ApiException {
        ApiResponse<PipelineVariable> localVarResp = updatePipelineVariableForUserWithHttpInfo(selectedUser, variableUuid, pipelineVariable);
        return localVarResp.getData();
    }

    /**
     * Update a variable for a user
     * Update a user level variable. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
     * @param selectedUser Either the UUID of the account surrounded by curly-braces, for example &#x60;{account UUID}&#x60;, OR an Atlassian Account ID. (required)
     * @param variableUuid The UUID of the variable. (required)
     * @param pipelineVariable The updated variable. (required)
     * @return ApiResponse&lt;PipelineVariable&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The variable was updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account or the variable was not found. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<PipelineVariable> updatePipelineVariableForUserWithHttpInfo(String selectedUser, String variableUuid, PipelineVariable pipelineVariable) throws ApiException {
        okhttp3.Call localVarCall = updatePipelineVariableForUserValidateBeforeCall(selectedUser, variableUuid, pipelineVariable, null);
        Type localVarReturnType = new TypeToken<PipelineVariable>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a variable for a user (asynchronously)
     * Update a user level variable. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
     * @param selectedUser Either the UUID of the account surrounded by curly-braces, for example &#x60;{account UUID}&#x60;, OR an Atlassian Account ID. (required)
     * @param variableUuid The UUID of the variable. (required)
     * @param pipelineVariable The updated variable. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The variable was updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account or the variable was not found. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call updatePipelineVariableForUserAsync(String selectedUser, String variableUuid, PipelineVariable pipelineVariable, final ApiCallback<PipelineVariable> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePipelineVariableForUserValidateBeforeCall(selectedUser, variableUuid, pipelineVariable, _callback);
        Type localVarReturnType = new TypeToken<PipelineVariable>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePipelineVariableForWorkspace
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param variableUuid The UUID of the variable. (required)
     * @param pipelineVariable The updated variable. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The variable was updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The workspace or the variable was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePipelineVariableForWorkspaceCall(String workspace, String variableUuid, PipelineVariable pipelineVariable, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pipelineVariable;

        // create path and map variables
        String localVarPath = "/workspaces/{workspace}/pipelines-config/variables/{variable_uuid}"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "variable_uuid" + "}", localVarApiClient.escapeString(variableUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePipelineVariableForWorkspaceValidateBeforeCall(String workspace, String variableUuid, PipelineVariable pipelineVariable, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling updatePipelineVariableForWorkspace(Async)");
        }

        // verify the required parameter 'variableUuid' is set
        if (variableUuid == null) {
            throw new ApiException("Missing the required parameter 'variableUuid' when calling updatePipelineVariableForWorkspace(Async)");
        }

        // verify the required parameter 'pipelineVariable' is set
        if (pipelineVariable == null) {
            throw new ApiException("Missing the required parameter 'pipelineVariable' when calling updatePipelineVariableForWorkspace(Async)");
        }

        return updatePipelineVariableForWorkspaceCall(workspace, variableUuid, pipelineVariable, _callback);

    }

    /**
     * Update variable for a workspace
     * Update a workspace level variable.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param variableUuid The UUID of the variable. (required)
     * @param pipelineVariable The updated variable. (required)
     * @return PipelineVariable
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The variable was updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The workspace or the variable was not found. </td><td>  -  </td></tr>
     </table>
     */
    public PipelineVariable updatePipelineVariableForWorkspace(String workspace, String variableUuid, PipelineVariable pipelineVariable) throws ApiException {
        ApiResponse<PipelineVariable> localVarResp = updatePipelineVariableForWorkspaceWithHttpInfo(workspace, variableUuid, pipelineVariable);
        return localVarResp.getData();
    }

    /**
     * Update variable for a workspace
     * Update a workspace level variable.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param variableUuid The UUID of the variable. (required)
     * @param pipelineVariable The updated variable. (required)
     * @return ApiResponse&lt;PipelineVariable&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The variable was updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The workspace or the variable was not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PipelineVariable> updatePipelineVariableForWorkspaceWithHttpInfo(String workspace, String variableUuid, PipelineVariable pipelineVariable) throws ApiException {
        okhttp3.Call localVarCall = updatePipelineVariableForWorkspaceValidateBeforeCall(workspace, variableUuid, pipelineVariable, null);
        Type localVarReturnType = new TypeToken<PipelineVariable>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update variable for a workspace (asynchronously)
     * Update a workspace level variable.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param variableUuid The UUID of the variable. (required)
     * @param pipelineVariable The updated variable. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The variable was updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The workspace or the variable was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePipelineVariableForWorkspaceAsync(String workspace, String variableUuid, PipelineVariable pipelineVariable, final ApiCallback<PipelineVariable> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePipelineVariableForWorkspaceValidateBeforeCall(workspace, variableUuid, pipelineVariable, _callback);
        Type localVarReturnType = new TypeToken<PipelineVariable>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateRepositoryBuildNumber
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param pipelineBuildNumber The build number to update. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The build number has been configured. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The update failed because the next number was invalid (it should be higher than the current number). </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account or repository was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRepositoryBuildNumberCall(String workspace, String repoSlug, PipelineBuildNumber pipelineBuildNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pipelineBuildNumber;

        // create path and map variables
        String localVarPath = "/repositories/{workspace}/{repo_slug}/pipelines_config/build_number"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "repo_slug" + "}", localVarApiClient.escapeString(repoSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRepositoryBuildNumberValidateBeforeCall(String workspace, String repoSlug, PipelineBuildNumber pipelineBuildNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling updateRepositoryBuildNumber(Async)");
        }

        // verify the required parameter 'repoSlug' is set
        if (repoSlug == null) {
            throw new ApiException("Missing the required parameter 'repoSlug' when calling updateRepositoryBuildNumber(Async)");
        }

        // verify the required parameter 'pipelineBuildNumber' is set
        if (pipelineBuildNumber == null) {
            throw new ApiException("Missing the required parameter 'pipelineBuildNumber' when calling updateRepositoryBuildNumber(Async)");
        }

        return updateRepositoryBuildNumberCall(workspace, repoSlug, pipelineBuildNumber, _callback);

    }

    /**
     * Update the next build number
     * Update the next build number that should be assigned to a pipeline. The next build number that will be configured has to be strictly higher than the current latest build number for this repository.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param pipelineBuildNumber The build number to update. (required)
     * @return PipelineBuildNumber
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The build number has been configured. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The update failed because the next number was invalid (it should be higher than the current number). </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account or repository was not found. </td><td>  -  </td></tr>
     </table>
     */
    public PipelineBuildNumber updateRepositoryBuildNumber(String workspace, String repoSlug, PipelineBuildNumber pipelineBuildNumber) throws ApiException {
        ApiResponse<PipelineBuildNumber> localVarResp = updateRepositoryBuildNumberWithHttpInfo(workspace, repoSlug, pipelineBuildNumber);
        return localVarResp.getData();
    }

    /**
     * Update the next build number
     * Update the next build number that should be assigned to a pipeline. The next build number that will be configured has to be strictly higher than the current latest build number for this repository.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param pipelineBuildNumber The build number to update. (required)
     * @return ApiResponse&lt;PipelineBuildNumber&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The build number has been configured. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The update failed because the next number was invalid (it should be higher than the current number). </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account or repository was not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PipelineBuildNumber> updateRepositoryBuildNumberWithHttpInfo(String workspace, String repoSlug, PipelineBuildNumber pipelineBuildNumber) throws ApiException {
        okhttp3.Call localVarCall = updateRepositoryBuildNumberValidateBeforeCall(workspace, repoSlug, pipelineBuildNumber, null);
        Type localVarReturnType = new TypeToken<PipelineBuildNumber>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the next build number (asynchronously)
     * Update the next build number that should be assigned to a pipeline. The next build number that will be configured has to be strictly higher than the current latest build number for this repository.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param pipelineBuildNumber The build number to update. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The build number has been configured. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The update failed because the next number was invalid (it should be higher than the current number). </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account or repository was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRepositoryBuildNumberAsync(String workspace, String repoSlug, PipelineBuildNumber pipelineBuildNumber, final ApiCallback<PipelineBuildNumber> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRepositoryBuildNumberValidateBeforeCall(workspace, repoSlug, pipelineBuildNumber, _callback);
        Type localVarReturnType = new TypeToken<PipelineBuildNumber>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateRepositoryPipelineConfig
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param pipelinesConfig The updated repository pipelines configuration. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The repository pipelines configuration was updated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRepositoryPipelineConfigCall(String workspace, String repoSlug, PipelinesConfig pipelinesConfig, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pipelinesConfig;

        // create path and map variables
        String localVarPath = "/repositories/{workspace}/{repo_slug}/pipelines_config"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "repo_slug" + "}", localVarApiClient.escapeString(repoSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRepositoryPipelineConfigValidateBeforeCall(String workspace, String repoSlug, PipelinesConfig pipelinesConfig, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling updateRepositoryPipelineConfig(Async)");
        }

        // verify the required parameter 'repoSlug' is set
        if (repoSlug == null) {
            throw new ApiException("Missing the required parameter 'repoSlug' when calling updateRepositoryPipelineConfig(Async)");
        }

        // verify the required parameter 'pipelinesConfig' is set
        if (pipelinesConfig == null) {
            throw new ApiException("Missing the required parameter 'pipelinesConfig' when calling updateRepositoryPipelineConfig(Async)");
        }

        return updateRepositoryPipelineConfigCall(workspace, repoSlug, pipelinesConfig, _callback);

    }

    /**
     * Update configuration
     * Update the pipelines configuration for a repository.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param pipelinesConfig The updated repository pipelines configuration. (required)
     * @return PipelinesConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The repository pipelines configuration was updated. </td><td>  -  </td></tr>
     </table>
     */
    public PipelinesConfig updateRepositoryPipelineConfig(String workspace, String repoSlug, PipelinesConfig pipelinesConfig) throws ApiException {
        ApiResponse<PipelinesConfig> localVarResp = updateRepositoryPipelineConfigWithHttpInfo(workspace, repoSlug, pipelinesConfig);
        return localVarResp.getData();
    }

    /**
     * Update configuration
     * Update the pipelines configuration for a repository.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param pipelinesConfig The updated repository pipelines configuration. (required)
     * @return ApiResponse&lt;PipelinesConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The repository pipelines configuration was updated. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PipelinesConfig> updateRepositoryPipelineConfigWithHttpInfo(String workspace, String repoSlug, PipelinesConfig pipelinesConfig) throws ApiException {
        okhttp3.Call localVarCall = updateRepositoryPipelineConfigValidateBeforeCall(workspace, repoSlug, pipelinesConfig, null);
        Type localVarReturnType = new TypeToken<PipelinesConfig>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update configuration (asynchronously)
     * Update the pipelines configuration for a repository.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param pipelinesConfig The updated repository pipelines configuration. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The repository pipelines configuration was updated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRepositoryPipelineConfigAsync(String workspace, String repoSlug, PipelinesConfig pipelinesConfig, final ApiCallback<PipelinesConfig> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRepositoryPipelineConfigValidateBeforeCall(workspace, repoSlug, pipelinesConfig, _callback);
        Type localVarReturnType = new TypeToken<PipelinesConfig>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateRepositoryPipelineKeyPair
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param pipelineSshKeyPair The created or updated SSH key pair. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SSH key pair was created or updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account, repository or SSH key pair was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRepositoryPipelineKeyPairCall(String workspace, String repoSlug, PipelineSshKeyPair pipelineSshKeyPair, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pipelineSshKeyPair;

        // create path and map variables
        String localVarPath = "/repositories/{workspace}/{repo_slug}/pipelines_config/ssh/key_pair"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "repo_slug" + "}", localVarApiClient.escapeString(repoSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRepositoryPipelineKeyPairValidateBeforeCall(String workspace, String repoSlug, PipelineSshKeyPair pipelineSshKeyPair, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling updateRepositoryPipelineKeyPair(Async)");
        }

        // verify the required parameter 'repoSlug' is set
        if (repoSlug == null) {
            throw new ApiException("Missing the required parameter 'repoSlug' when calling updateRepositoryPipelineKeyPair(Async)");
        }

        // verify the required parameter 'pipelineSshKeyPair' is set
        if (pipelineSshKeyPair == null) {
            throw new ApiException("Missing the required parameter 'pipelineSshKeyPair' when calling updateRepositoryPipelineKeyPair(Async)");
        }

        return updateRepositoryPipelineKeyPairCall(workspace, repoSlug, pipelineSshKeyPair, _callback);

    }

    /**
     * Update SSH key pair
     * Create or update the repository SSH key pair. The private key will be set as a default SSH identity in your build container.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param pipelineSshKeyPair The created or updated SSH key pair. (required)
     * @return PipelineSshKeyPair
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SSH key pair was created or updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account, repository or SSH key pair was not found. </td><td>  -  </td></tr>
     </table>
     */
    public PipelineSshKeyPair updateRepositoryPipelineKeyPair(String workspace, String repoSlug, PipelineSshKeyPair pipelineSshKeyPair) throws ApiException {
        ApiResponse<PipelineSshKeyPair> localVarResp = updateRepositoryPipelineKeyPairWithHttpInfo(workspace, repoSlug, pipelineSshKeyPair);
        return localVarResp.getData();
    }

    /**
     * Update SSH key pair
     * Create or update the repository SSH key pair. The private key will be set as a default SSH identity in your build container.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param pipelineSshKeyPair The created or updated SSH key pair. (required)
     * @return ApiResponse&lt;PipelineSshKeyPair&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SSH key pair was created or updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account, repository or SSH key pair was not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PipelineSshKeyPair> updateRepositoryPipelineKeyPairWithHttpInfo(String workspace, String repoSlug, PipelineSshKeyPair pipelineSshKeyPair) throws ApiException {
        okhttp3.Call localVarCall = updateRepositoryPipelineKeyPairValidateBeforeCall(workspace, repoSlug, pipelineSshKeyPair, null);
        Type localVarReturnType = new TypeToken<PipelineSshKeyPair>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update SSH key pair (asynchronously)
     * Create or update the repository SSH key pair. The private key will be set as a default SSH identity in your build container.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param pipelineSshKeyPair The created or updated SSH key pair. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The SSH key pair was created or updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account, repository or SSH key pair was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRepositoryPipelineKeyPairAsync(String workspace, String repoSlug, PipelineSshKeyPair pipelineSshKeyPair, final ApiCallback<PipelineSshKeyPair> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRepositoryPipelineKeyPairValidateBeforeCall(workspace, repoSlug, pipelineSshKeyPair, _callback);
        Type localVarReturnType = new TypeToken<PipelineSshKeyPair>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateRepositoryPipelineKnownHost
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param knownHostUuid The UUID of the known host to update. (required)
     * @param pipelineKnownHost The updated known host. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The known host was updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account, repository or known host with the given UUID was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRepositoryPipelineKnownHostCall(String workspace, String repoSlug, String knownHostUuid, PipelineKnownHost pipelineKnownHost, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pipelineKnownHost;

        // create path and map variables
        String localVarPath = "/repositories/{workspace}/{repo_slug}/pipelines_config/ssh/known_hosts/{known_host_uuid}"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "repo_slug" + "}", localVarApiClient.escapeString(repoSlug.toString()))
            .replace("{" + "known_host_uuid" + "}", localVarApiClient.escapeString(knownHostUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRepositoryPipelineKnownHostValidateBeforeCall(String workspace, String repoSlug, String knownHostUuid, PipelineKnownHost pipelineKnownHost, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling updateRepositoryPipelineKnownHost(Async)");
        }

        // verify the required parameter 'repoSlug' is set
        if (repoSlug == null) {
            throw new ApiException("Missing the required parameter 'repoSlug' when calling updateRepositoryPipelineKnownHost(Async)");
        }

        // verify the required parameter 'knownHostUuid' is set
        if (knownHostUuid == null) {
            throw new ApiException("Missing the required parameter 'knownHostUuid' when calling updateRepositoryPipelineKnownHost(Async)");
        }

        // verify the required parameter 'pipelineKnownHost' is set
        if (pipelineKnownHost == null) {
            throw new ApiException("Missing the required parameter 'pipelineKnownHost' when calling updateRepositoryPipelineKnownHost(Async)");
        }

        return updateRepositoryPipelineKnownHostCall(workspace, repoSlug, knownHostUuid, pipelineKnownHost, _callback);

    }

    /**
     * Update a known host
     * Update a repository level known host.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param knownHostUuid The UUID of the known host to update. (required)
     * @param pipelineKnownHost The updated known host. (required)
     * @return PipelineKnownHost
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The known host was updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account, repository or known host with the given UUID was not found. </td><td>  -  </td></tr>
     </table>
     */
    public PipelineKnownHost updateRepositoryPipelineKnownHost(String workspace, String repoSlug, String knownHostUuid, PipelineKnownHost pipelineKnownHost) throws ApiException {
        ApiResponse<PipelineKnownHost> localVarResp = updateRepositoryPipelineKnownHostWithHttpInfo(workspace, repoSlug, knownHostUuid, pipelineKnownHost);
        return localVarResp.getData();
    }

    /**
     * Update a known host
     * Update a repository level known host.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param knownHostUuid The UUID of the known host to update. (required)
     * @param pipelineKnownHost The updated known host. (required)
     * @return ApiResponse&lt;PipelineKnownHost&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The known host was updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account, repository or known host with the given UUID was not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PipelineKnownHost> updateRepositoryPipelineKnownHostWithHttpInfo(String workspace, String repoSlug, String knownHostUuid, PipelineKnownHost pipelineKnownHost) throws ApiException {
        okhttp3.Call localVarCall = updateRepositoryPipelineKnownHostValidateBeforeCall(workspace, repoSlug, knownHostUuid, pipelineKnownHost, null);
        Type localVarReturnType = new TypeToken<PipelineKnownHost>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a known host (asynchronously)
     * Update a repository level known host.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param knownHostUuid The UUID of the known host to update. (required)
     * @param pipelineKnownHost The updated known host. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The known host was updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account, repository or known host with the given UUID was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRepositoryPipelineKnownHostAsync(String workspace, String repoSlug, String knownHostUuid, PipelineKnownHost pipelineKnownHost, final ApiCallback<PipelineKnownHost> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRepositoryPipelineKnownHostValidateBeforeCall(workspace, repoSlug, knownHostUuid, pipelineKnownHost, _callback);
        Type localVarReturnType = new TypeToken<PipelineKnownHost>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateRepositoryPipelineSchedule
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param scheduleUuid The uuid of the schedule. (required)
     * @param pipelineSchedulePutRequestBody The schedule to update. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The schedule is updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account, repository or schedule was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRepositoryPipelineScheduleCall(String workspace, String repoSlug, String scheduleUuid, PipelineSchedulePutRequestBody pipelineSchedulePutRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pipelineSchedulePutRequestBody;

        // create path and map variables
        String localVarPath = "/repositories/{workspace}/{repo_slug}/pipelines_config/schedules/{schedule_uuid}"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "repo_slug" + "}", localVarApiClient.escapeString(repoSlug.toString()))
            .replace("{" + "schedule_uuid" + "}", localVarApiClient.escapeString(scheduleUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRepositoryPipelineScheduleValidateBeforeCall(String workspace, String repoSlug, String scheduleUuid, PipelineSchedulePutRequestBody pipelineSchedulePutRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling updateRepositoryPipelineSchedule(Async)");
        }

        // verify the required parameter 'repoSlug' is set
        if (repoSlug == null) {
            throw new ApiException("Missing the required parameter 'repoSlug' when calling updateRepositoryPipelineSchedule(Async)");
        }

        // verify the required parameter 'scheduleUuid' is set
        if (scheduleUuid == null) {
            throw new ApiException("Missing the required parameter 'scheduleUuid' when calling updateRepositoryPipelineSchedule(Async)");
        }

        // verify the required parameter 'pipelineSchedulePutRequestBody' is set
        if (pipelineSchedulePutRequestBody == null) {
            throw new ApiException("Missing the required parameter 'pipelineSchedulePutRequestBody' when calling updateRepositoryPipelineSchedule(Async)");
        }

        return updateRepositoryPipelineScheduleCall(workspace, repoSlug, scheduleUuid, pipelineSchedulePutRequestBody, _callback);

    }

    /**
     * Update a schedule
     * Update a schedule.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param scheduleUuid The uuid of the schedule. (required)
     * @param pipelineSchedulePutRequestBody The schedule to update. (required)
     * @return PipelineSchedule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The schedule is updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account, repository or schedule was not found. </td><td>  -  </td></tr>
     </table>
     */
    public PipelineSchedule updateRepositoryPipelineSchedule(String workspace, String repoSlug, String scheduleUuid, PipelineSchedulePutRequestBody pipelineSchedulePutRequestBody) throws ApiException {
        ApiResponse<PipelineSchedule> localVarResp = updateRepositoryPipelineScheduleWithHttpInfo(workspace, repoSlug, scheduleUuid, pipelineSchedulePutRequestBody);
        return localVarResp.getData();
    }

    /**
     * Update a schedule
     * Update a schedule.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param scheduleUuid The uuid of the schedule. (required)
     * @param pipelineSchedulePutRequestBody The schedule to update. (required)
     * @return ApiResponse&lt;PipelineSchedule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The schedule is updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account, repository or schedule was not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PipelineSchedule> updateRepositoryPipelineScheduleWithHttpInfo(String workspace, String repoSlug, String scheduleUuid, PipelineSchedulePutRequestBody pipelineSchedulePutRequestBody) throws ApiException {
        okhttp3.Call localVarCall = updateRepositoryPipelineScheduleValidateBeforeCall(workspace, repoSlug, scheduleUuid, pipelineSchedulePutRequestBody, null);
        Type localVarReturnType = new TypeToken<PipelineSchedule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a schedule (asynchronously)
     * Update a schedule.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param scheduleUuid The uuid of the schedule. (required)
     * @param pipelineSchedulePutRequestBody The schedule to update. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The schedule is updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account, repository or schedule was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRepositoryPipelineScheduleAsync(String workspace, String repoSlug, String scheduleUuid, PipelineSchedulePutRequestBody pipelineSchedulePutRequestBody, final ApiCallback<PipelineSchedule> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRepositoryPipelineScheduleValidateBeforeCall(workspace, repoSlug, scheduleUuid, pipelineSchedulePutRequestBody, _callback);
        Type localVarReturnType = new TypeToken<PipelineSchedule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateRepositoryPipelineVariable
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param variableUuid The UUID of the variable to update. (required)
     * @param pipelineVariable The updated variable (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The variable was updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account, repository or variable with the given UUID was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRepositoryPipelineVariableCall(String workspace, String repoSlug, String variableUuid, PipelineVariable pipelineVariable, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pipelineVariable;

        // create path and map variables
        String localVarPath = "/repositories/{workspace}/{repo_slug}/pipelines_config/variables/{variable_uuid}"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "repo_slug" + "}", localVarApiClient.escapeString(repoSlug.toString()))
            .replace("{" + "variable_uuid" + "}", localVarApiClient.escapeString(variableUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRepositoryPipelineVariableValidateBeforeCall(String workspace, String repoSlug, String variableUuid, PipelineVariable pipelineVariable, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling updateRepositoryPipelineVariable(Async)");
        }

        // verify the required parameter 'repoSlug' is set
        if (repoSlug == null) {
            throw new ApiException("Missing the required parameter 'repoSlug' when calling updateRepositoryPipelineVariable(Async)");
        }

        // verify the required parameter 'variableUuid' is set
        if (variableUuid == null) {
            throw new ApiException("Missing the required parameter 'variableUuid' when calling updateRepositoryPipelineVariable(Async)");
        }

        // verify the required parameter 'pipelineVariable' is set
        if (pipelineVariable == null) {
            throw new ApiException("Missing the required parameter 'pipelineVariable' when calling updateRepositoryPipelineVariable(Async)");
        }

        return updateRepositoryPipelineVariableCall(workspace, repoSlug, variableUuid, pipelineVariable, _callback);

    }

    /**
     * Update a variable for a repository
     * Update a repository level variable.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param variableUuid The UUID of the variable to update. (required)
     * @param pipelineVariable The updated variable (required)
     * @return PipelineVariable
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The variable was updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account, repository or variable with the given UUID was not found. </td><td>  -  </td></tr>
     </table>
     */
    public PipelineVariable updateRepositoryPipelineVariable(String workspace, String repoSlug, String variableUuid, PipelineVariable pipelineVariable) throws ApiException {
        ApiResponse<PipelineVariable> localVarResp = updateRepositoryPipelineVariableWithHttpInfo(workspace, repoSlug, variableUuid, pipelineVariable);
        return localVarResp.getData();
    }

    /**
     * Update a variable for a repository
     * Update a repository level variable.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param variableUuid The UUID of the variable to update. (required)
     * @param pipelineVariable The updated variable (required)
     * @return ApiResponse&lt;PipelineVariable&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The variable was updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account, repository or variable with the given UUID was not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PipelineVariable> updateRepositoryPipelineVariableWithHttpInfo(String workspace, String repoSlug, String variableUuid, PipelineVariable pipelineVariable) throws ApiException {
        okhttp3.Call localVarCall = updateRepositoryPipelineVariableValidateBeforeCall(workspace, repoSlug, variableUuid, pipelineVariable, null);
        Type localVarReturnType = new TypeToken<PipelineVariable>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a variable for a repository (asynchronously)
     * Update a repository level variable.
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example &#x60;{workspace UUID}&#x60;. (required)
     * @param repoSlug The repository. (required)
     * @param variableUuid The UUID of the variable to update. (required)
     * @param pipelineVariable The updated variable (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The variable was updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The account, repository or variable with the given UUID was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRepositoryPipelineVariableAsync(String workspace, String repoSlug, String variableUuid, PipelineVariable pipelineVariable, final ApiCallback<PipelineVariable> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRepositoryPipelineVariableValidateBeforeCall(workspace, repoSlug, variableUuid, pipelineVariable, _callback);
        Type localVarReturnType = new TypeToken<PipelineVariable>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
