/*
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Base type for most resource objects. It defines the common &#x60;type&#x60; element that identifies an object&#39;s type. It also identifies the element as Swagger&#39;s &#x60;discriminator&#x60;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:00:39.758646-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ModelObject {
  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  protected String type;

  public ModelObject() {
    this.type = this.getClass().getSimpleName();
  }

  public ModelObject type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ModelObject instance itself
   */
  public ModelObject putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelObject _object = (ModelObject) o;
    return Objects.equals(this.type, _object.type)&&
        Objects.equals(this.additionalProperties, _object.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelObject {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ModelObject
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModelObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModelObject is not found in the empty JSON string", ModelObject.openapiRequiredFields.toString()));
        }
      }

      String discriminatorValue = jsonElement.getAsJsonObject().get("type").getAsString();
      switch (discriminatorValue) {
        case "account":
          Account.validateJsonElement(jsonElement);
          break;
        case "app_user":
          AppUser.validateJsonElement(jsonElement);
          break;
        case "author":
          Author.validateJsonElement(jsonElement);
          break;
        case "base_commit":
          BaseCommit.validateJsonElement(jsonElement);
          break;
        case "branching_model":
          BranchingModel.validateJsonElement(jsonElement);
          break;
        case "branching_model_settings":
          BranchingModelSettings.validateJsonElement(jsonElement);
          break;
        case "branchrestriction":
          Branchrestriction.validateJsonElement(jsonElement);
          break;
        case "comment":
          Comment.validateJsonElement(jsonElement);
          break;
        case "commit":
          Commit.validateJsonElement(jsonElement);
          break;
        case "commit_comment":
          CommitComment.validateJsonElement(jsonElement);
          break;
        case "commitstatus":
          Commitstatus.validateJsonElement(jsonElement);
          break;
        case "component":
          Component.validateJsonElement(jsonElement);
          break;
        case "ddev_report":
          DdevReport.validateJsonElement(jsonElement);
          break;
        case "deploy_key":
          DeployKey.validateJsonElement(jsonElement);
          break;
        case "deployment":
          Deployment.validateJsonElement(jsonElement);
          break;
        case "deployment_environment":
          DeploymentEnvironment.validateJsonElement(jsonElement);
          break;
        case "deployment_environment_lock":
          DeploymentEnvironmentLock.validateJsonElement(jsonElement);
          break;
        case "deployment_release":
          DeploymentRelease.validateJsonElement(jsonElement);
          break;
        case "deployment_state":
          DeploymentState.validateJsonElement(jsonElement);
          break;
        case "deployment_state_completed":
          DeploymentStateCompleted.validateJsonElement(jsonElement);
          break;
        case "deployment_state_completed_status":
          DeploymentStateCompletedStatus.validateJsonElement(jsonElement);
          break;
        case "deployment_state_completed_status_failed":
          DeploymentStateCompletedStatusFailed.validateJsonElement(jsonElement);
          break;
        case "deployment_state_completed_status_stopped":
          DeploymentStateCompletedStatusStopped.validateJsonElement(jsonElement);
          break;
        case "deployment_state_completed_status_successful":
          DeploymentStateCompletedStatusSuccessful.validateJsonElement(jsonElement);
          break;
        case "deployment_state_in_progress":
          DeploymentStateInProgress.validateJsonElement(jsonElement);
          break;
        case "deployment_state_undeployed":
          DeploymentStateUndeployed.validateJsonElement(jsonElement);
          break;
        case "deployment_variable":
          DeploymentVariable.validateJsonElement(jsonElement);
          break;
        case "deployments_ddev_deployment_environment":
          DeploymentsDdevDeploymentEnvironment.validateJsonElement(jsonElement);
          break;
        case "deployments_ddev_deployment_environment_lock":
          DeploymentsDdevDeploymentEnvironmentLock.validateJsonElement(jsonElement);
          break;
        case "deployments_stg_west_deployment_environment":
          DeploymentsStgWestDeploymentEnvironment.validateJsonElement(jsonElement);
          break;
        case "deployments_stg_west_deployment_environment_lock":
          DeploymentsStgWestDeploymentEnvironmentLock.validateJsonElement(jsonElement);
          break;
        case "effective_repo_branching_model":
          EffectiveRepoBranchingModel.validateJsonElement(jsonElement);
          break;
        case "group":
          Group.validateJsonElement(jsonElement);
          break;
        case "issue":
          Issue.validateJsonElement(jsonElement);
          break;
        case "issue_attachment":
          IssueAttachment.validateJsonElement(jsonElement);
          break;
        case "issue_comment":
          IssueComment.validateJsonElement(jsonElement);
          break;
        case "jira_project":
          JiraProject.validateJsonElement(jsonElement);
          break;
        case "jira_site":
          JiraSite.validateJsonElement(jsonElement);
          break;
        case "milestone":
          Milestone.validateJsonElement(jsonElement);
          break;
        case "participant":
          Participant.validateJsonElement(jsonElement);
          break;
        case "pipeline":
          Pipeline.validateJsonElement(jsonElement);
          break;
        case "pipeline_build_number":
          PipelineBuildNumber.validateJsonElement(jsonElement);
          break;
        case "pipeline_cache":
          PipelineCache.validateJsonElement(jsonElement);
          break;
        case "pipeline_commit_target":
          PipelineCommitTarget.validateJsonElement(jsonElement);
          break;
        case "pipeline_error":
          PipelineError.validateJsonElement(jsonElement);
          break;
        case "pipeline_known_host":
          PipelineKnownHost.validateJsonElement(jsonElement);
          break;
        case "pipeline_ref_target":
          PipelineRefTarget.validateJsonElement(jsonElement);
          break;
        case "pipeline_schedule":
          PipelineSchedule.validateJsonElement(jsonElement);
          break;
        case "pipeline_schedule_execution":
          PipelineScheduleExecution.validateJsonElement(jsonElement);
          break;
        case "pipeline_schedule_execution_errored":
          PipelineScheduleExecutionErrored.validateJsonElement(jsonElement);
          break;
        case "pipeline_schedule_execution_executed":
          PipelineScheduleExecutionExecuted.validateJsonElement(jsonElement);
          break;
        case "pipeline_schedule_post_request_body":
          PipelineSchedulePostRequestBody.validateJsonElement(jsonElement);
          break;
        case "pipeline_schedule_put_request_body":
          PipelineSchedulePutRequestBody.validateJsonElement(jsonElement);
          break;
        case "pipeline_selector":
          PipelineSelector.validateJsonElement(jsonElement);
          break;
        case "pipeline_ssh_key_pair":
          PipelineSshKeyPair.validateJsonElement(jsonElement);
          break;
        case "pipeline_ssh_public_key":
          PipelineSshPublicKey.validateJsonElement(jsonElement);
          break;
        case "pipeline_state":
          PipelineState.validateJsonElement(jsonElement);
          break;
        case "pipeline_state_completed":
          PipelineStateCompleted.validateJsonElement(jsonElement);
          break;
        case "pipeline_state_completed_error":
          PipelineStateCompletedError.validateJsonElement(jsonElement);
          break;
        case "pipeline_state_completed_expired":
          PipelineStateCompletedExpired.validateJsonElement(jsonElement);
          break;
        case "pipeline_state_completed_failed":
          PipelineStateCompletedFailed.validateJsonElement(jsonElement);
          break;
        case "pipeline_state_completed_result":
          PipelineStateCompletedResult.validateJsonElement(jsonElement);
          break;
        case "pipeline_state_completed_stopped":
          PipelineStateCompletedStopped.validateJsonElement(jsonElement);
          break;
        case "pipeline_state_completed_successful":
          PipelineStateCompletedSuccessful.validateJsonElement(jsonElement);
          break;
        case "pipeline_state_in_progress":
          PipelineStateInProgress.validateJsonElement(jsonElement);
          break;
        case "pipeline_state_in_progress_paused":
          PipelineStateInProgressPaused.validateJsonElement(jsonElement);
          break;
        case "pipeline_state_in_progress_running":
          PipelineStateInProgressRunning.validateJsonElement(jsonElement);
          break;
        case "pipeline_state_in_progress_stage":
          PipelineStateInProgressStage.validateJsonElement(jsonElement);
          break;
        case "pipeline_state_pending":
          PipelineStatePending.validateJsonElement(jsonElement);
          break;
        case "pipeline_step":
          PipelineStep.validateJsonElement(jsonElement);
          break;
        case "pipeline_step_error":
          PipelineStepError.validateJsonElement(jsonElement);
          break;
        case "pipeline_step_state":
          PipelineStepState.validateJsonElement(jsonElement);
          break;
        case "pipeline_step_state_completed":
          PipelineStepStateCompleted.validateJsonElement(jsonElement);
          break;
        case "pipeline_step_state_completed_error":
          PipelineStepStateCompletedError.validateJsonElement(jsonElement);
          break;
        case "pipeline_step_state_completed_expired":
          PipelineStepStateCompletedExpired.validateJsonElement(jsonElement);
          break;
        case "pipeline_step_state_completed_failed":
          PipelineStepStateCompletedFailed.validateJsonElement(jsonElement);
          break;
        case "pipeline_step_state_completed_not_run":
          PipelineStepStateCompletedNotRun.validateJsonElement(jsonElement);
          break;
        case "pipeline_step_state_completed_result":
          PipelineStepStateCompletedResult.validateJsonElement(jsonElement);
          break;
        case "pipeline_step_state_completed_stopped":
          PipelineStepStateCompletedStopped.validateJsonElement(jsonElement);
          break;
        case "pipeline_step_state_completed_successful":
          PipelineStepStateCompletedSuccessful.validateJsonElement(jsonElement);
          break;
        case "pipeline_step_state_in_progress":
          PipelineStepStateInProgress.validateJsonElement(jsonElement);
          break;
        case "pipeline_step_state_pending":
          PipelineStepStatePending.validateJsonElement(jsonElement);
          break;
        case "pipeline_step_state_ready":
          PipelineStepStateReady.validateJsonElement(jsonElement);
          break;
        case "pipeline_target":
          PipelineTarget.validateJsonElement(jsonElement);
          break;
        case "pipeline_trigger":
          PipelineTrigger.validateJsonElement(jsonElement);
          break;
        case "pipeline_trigger_manual":
          PipelineTriggerManual.validateJsonElement(jsonElement);
          break;
        case "pipeline_trigger_push":
          PipelineTriggerPush.validateJsonElement(jsonElement);
          break;
        case "pipeline_variable":
          PipelineVariable.validateJsonElement(jsonElement);
          break;
        case "pipelines_config":
          PipelinesConfig.validateJsonElement(jsonElement);
          break;
        case "pipelines_ddev_pipeline_step":
          PipelinesDdevPipelineStep.validateJsonElement(jsonElement);
          break;
        case "pipelines_stg_west_pipeline_step":
          PipelinesStgWestPipelineStep.validateJsonElement(jsonElement);
          break;
        case "project":
          Project.validateJsonElement(jsonElement);
          break;
        case "project_branching_model":
          ProjectBranchingModel.validateJsonElement(jsonElement);
          break;
        case "project_deploy_key":
          ProjectDeployKey.validateJsonElement(jsonElement);
          break;
        case "pullrequest":
          Pullrequest.validateJsonElement(jsonElement);
          break;
        case "pullrequest_comment":
          PullrequestComment.validateJsonElement(jsonElement);
          break;
        case "report":
          Report.validateJsonElement(jsonElement);
          break;
        case "report_annotation":
          ReportAnnotation.validateJsonElement(jsonElement);
          break;
        case "repository":
          Repository.validateJsonElement(jsonElement);
          break;
        case "snippet":
          Snippet.validateJsonElement(jsonElement);
          break;
        case "snippet_comment":
          SnippetComment.validateJsonElement(jsonElement);
          break;
        case "snippet_commit":
          SnippetCommit.validateJsonElement(jsonElement);
          break;
        case "ssh_account_key":
          SshAccountKey.validateJsonElement(jsonElement);
          break;
        case "ssh_key":
          SshKey.validateJsonElement(jsonElement);
          break;
        case "stg_west_report":
          StgWestReport.validateJsonElement(jsonElement);
          break;
        case "team":
          Team.validateJsonElement(jsonElement);
          break;
        case "user":
          User.validateJsonElement(jsonElement);
          break;
        case "version":
          Version.validateJsonElement(jsonElement);
          break;
        case "webhook_subscription":
          WebhookSubscription.validateJsonElement(jsonElement);
          break;
        case "workspace":
          Workspace.validateJsonElement(jsonElement);
          break;
        case "workspace_membership":
          WorkspaceMembership.validateJsonElement(jsonElement);
          break;
        default:
          throw new IllegalArgumentException(String.format("The value of the `type` field `%s` does not match any key defined in the discriminator's mapping.", discriminatorValue));
      }
  }


  /**
   * Create an instance of ModelObject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ModelObject
   * @throws IOException if the JSON string is invalid with respect to ModelObject
   */
  public static ModelObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModelObject.class);
  }

  /**
   * Convert an instance of ModelObject to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

