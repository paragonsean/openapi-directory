/*
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.Account;
import org.openapitools.client.model.BaseCommitSummary;
import org.openapitools.client.model.ModelObject;
import org.openapitools.client.model.Participant;
import org.openapitools.client.model.PullRequestCommit;
import org.openapitools.client.model.PullRequestLinks;
import org.openapitools.client.model.PullrequestEndpoint;
import org.openapitools.client.model.RenderedPullRequestMarkup;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Pullrequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:00:39.758646-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Pullrequest extends ModelObject {
  public static final String SERIALIZED_NAME_AUTHOR = "author";
  @SerializedName(SERIALIZED_NAME_AUTHOR)
  private Account author;

  public static final String SERIALIZED_NAME_CLOSE_SOURCE_BRANCH = "close_source_branch";
  @SerializedName(SERIALIZED_NAME_CLOSE_SOURCE_BRANCH)
  private Boolean closeSourceBranch;

  public static final String SERIALIZED_NAME_CLOSED_BY = "closed_by";
  @SerializedName(SERIALIZED_NAME_CLOSED_BY)
  private Account closedBy;

  public static final String SERIALIZED_NAME_COMMENT_COUNT = "comment_count";
  @SerializedName(SERIALIZED_NAME_COMMENT_COUNT)
  private Integer commentCount;

  public static final String SERIALIZED_NAME_CREATED_ON = "created_on";
  @SerializedName(SERIALIZED_NAME_CREATED_ON)
  private OffsetDateTime createdOn;

  public static final String SERIALIZED_NAME_DESTINATION = "destination";
  @SerializedName(SERIALIZED_NAME_DESTINATION)
  private PullrequestEndpoint destination;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private PullRequestLinks links;

  public static final String SERIALIZED_NAME_MERGE_COMMIT = "merge_commit";
  @SerializedName(SERIALIZED_NAME_MERGE_COMMIT)
  private PullRequestCommit mergeCommit;

  public static final String SERIALIZED_NAME_PARTICIPANTS = "participants";
  @SerializedName(SERIALIZED_NAME_PARTICIPANTS)
  private List<Participant> participants = new ArrayList<>();

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private String reason;

  public static final String SERIALIZED_NAME_RENDERED = "rendered";
  @SerializedName(SERIALIZED_NAME_RENDERED)
  private RenderedPullRequestMarkup rendered;

  public static final String SERIALIZED_NAME_REVIEWERS = "reviewers";
  @SerializedName(SERIALIZED_NAME_REVIEWERS)
  private List<Account> reviewers = new ArrayList<>();

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private PullrequestEndpoint source;

  /**
   * The pull request&#39;s current status.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    OPEN("OPEN"),
    
    MERGED("MERGED"),
    
    DECLINED("DECLINED"),
    
    SUPERSEDED("SUPERSEDED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_SUMMARY = "summary";
  @SerializedName(SERIALIZED_NAME_SUMMARY)
  private BaseCommitSummary summary;

  public static final String SERIALIZED_NAME_TASK_COUNT = "task_count";
  @SerializedName(SERIALIZED_NAME_TASK_COUNT)
  private Integer taskCount;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_UPDATED_ON = "updated_on";
  @SerializedName(SERIALIZED_NAME_UPDATED_ON)
  private OffsetDateTime updatedOn;

  public Pullrequest() {
    this.type = this.getClass().getSimpleName();
  }

  public Pullrequest author(Account author) {
    this.author = author;
    return this;
  }

  /**
   * Get author
   * @return author
   */
  @javax.annotation.Nullable
  public Account getAuthor() {
    return author;
  }

  public void setAuthor(Account author) {
    this.author = author;
  }


  public Pullrequest closeSourceBranch(Boolean closeSourceBranch) {
    this.closeSourceBranch = closeSourceBranch;
    return this;
  }

  /**
   * A boolean flag indicating if merging the pull request closes the source branch.
   * @return closeSourceBranch
   */
  @javax.annotation.Nullable
  public Boolean getCloseSourceBranch() {
    return closeSourceBranch;
  }

  public void setCloseSourceBranch(Boolean closeSourceBranch) {
    this.closeSourceBranch = closeSourceBranch;
  }


  public Pullrequest closedBy(Account closedBy) {
    this.closedBy = closedBy;
    return this;
  }

  /**
   * Get closedBy
   * @return closedBy
   */
  @javax.annotation.Nullable
  public Account getClosedBy() {
    return closedBy;
  }

  public void setClosedBy(Account closedBy) {
    this.closedBy = closedBy;
  }


  public Pullrequest commentCount(Integer commentCount) {
    this.commentCount = commentCount;
    return this;
  }

  /**
   * The number of comments for a specific pull request.
   * minimum: 0
   * @return commentCount
   */
  @javax.annotation.Nullable
  public Integer getCommentCount() {
    return commentCount;
  }

  public void setCommentCount(Integer commentCount) {
    this.commentCount = commentCount;
  }


  public Pullrequest createdOn(OffsetDateTime createdOn) {
    this.createdOn = createdOn;
    return this;
  }

  /**
   * The ISO8601 timestamp the request was created.
   * @return createdOn
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedOn() {
    return createdOn;
  }

  public void setCreatedOn(OffsetDateTime createdOn) {
    this.createdOn = createdOn;
  }


  public Pullrequest destination(PullrequestEndpoint destination) {
    this.destination = destination;
    return this;
  }

  /**
   * Get destination
   * @return destination
   */
  @javax.annotation.Nullable
  public PullrequestEndpoint getDestination() {
    return destination;
  }

  public void setDestination(PullrequestEndpoint destination) {
    this.destination = destination;
  }


  public Pullrequest id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * The pull request&#39;s unique ID. Note that pull request IDs are only unique within their associated repository.
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public Pullrequest links(PullRequestLinks links) {
    this.links = links;
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @javax.annotation.Nullable
  public PullRequestLinks getLinks() {
    return links;
  }

  public void setLinks(PullRequestLinks links) {
    this.links = links;
  }


  public Pullrequest mergeCommit(PullRequestCommit mergeCommit) {
    this.mergeCommit = mergeCommit;
    return this;
  }

  /**
   * Get mergeCommit
   * @return mergeCommit
   */
  @javax.annotation.Nullable
  public PullRequestCommit getMergeCommit() {
    return mergeCommit;
  }

  public void setMergeCommit(PullRequestCommit mergeCommit) {
    this.mergeCommit = mergeCommit;
  }


  public Pullrequest participants(List<Participant> participants) {
    this.participants = participants;
    return this;
  }

  public Pullrequest addParticipantsItem(Participant participantsItem) {
    if (this.participants == null) {
      this.participants = new ArrayList<>();
    }
    this.participants.add(participantsItem);
    return this;
  }

  /**
   *         The list of users that are collaborating on this pull request.         Collaborators are user that:          * are added to the pull request as a reviewer (part of the reviewers           list)         * are not explicit reviewers, but have commented on the pull request         * are not explicit reviewers, but have approved the pull request          Each user is wrapped in an object that indicates the user&#39;s role and         whether they have approved the pull request. For performance reasons,         the API only returns this list when an API requests a pull request by         id.         
   * @return participants
   */
  @javax.annotation.Nullable
  public List<Participant> getParticipants() {
    return participants;
  }

  public void setParticipants(List<Participant> participants) {
    this.participants = participants;
  }


  public Pullrequest reason(String reason) {
    this.reason = reason;
    return this;
  }

  /**
   * Explains why a pull request was declined. This field is only applicable to pull requests in rejected state.
   * @return reason
   */
  @javax.annotation.Nullable
  public String getReason() {
    return reason;
  }

  public void setReason(String reason) {
    this.reason = reason;
  }


  public Pullrequest rendered(RenderedPullRequestMarkup rendered) {
    this.rendered = rendered;
    return this;
  }

  /**
   * Get rendered
   * @return rendered
   */
  @javax.annotation.Nullable
  public RenderedPullRequestMarkup getRendered() {
    return rendered;
  }

  public void setRendered(RenderedPullRequestMarkup rendered) {
    this.rendered = rendered;
  }


  public Pullrequest reviewers(List<Account> reviewers) {
    this.reviewers = reviewers;
    return this;
  }

  public Pullrequest addReviewersItem(Account reviewersItem) {
    if (this.reviewers == null) {
      this.reviewers = new ArrayList<>();
    }
    this.reviewers.add(reviewersItem);
    return this;
  }

  /**
   * The list of users that were added as reviewers on this pull request when it was created. For performance reasons, the API only includes this list on a pull request&#39;s &#x60;self&#x60; URL.
   * @return reviewers
   */
  @javax.annotation.Nullable
  public List<Account> getReviewers() {
    return reviewers;
  }

  public void setReviewers(List<Account> reviewers) {
    this.reviewers = reviewers;
  }


  public Pullrequest source(PullrequestEndpoint source) {
    this.source = source;
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nullable
  public PullrequestEndpoint getSource() {
    return source;
  }

  public void setSource(PullrequestEndpoint source) {
    this.source = source;
  }


  public Pullrequest state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * The pull request&#39;s current status.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  public Pullrequest summary(BaseCommitSummary summary) {
    this.summary = summary;
    return this;
  }

  /**
   * Get summary
   * @return summary
   */
  @javax.annotation.Nullable
  public BaseCommitSummary getSummary() {
    return summary;
  }

  public void setSummary(BaseCommitSummary summary) {
    this.summary = summary;
  }


  public Pullrequest taskCount(Integer taskCount) {
    this.taskCount = taskCount;
    return this;
  }

  /**
   * The number of open tasks for a specific pull request.
   * minimum: 0
   * @return taskCount
   */
  @javax.annotation.Nullable
  public Integer getTaskCount() {
    return taskCount;
  }

  public void setTaskCount(Integer taskCount) {
    this.taskCount = taskCount;
  }


  public Pullrequest title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Title of the pull request.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public Pullrequest updatedOn(OffsetDateTime updatedOn) {
    this.updatedOn = updatedOn;
    return this;
  }

  /**
   * The ISO8601 timestamp the request was last updated.
   * @return updatedOn
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedOn() {
    return updatedOn;
  }

  public void setUpdatedOn(OffsetDateTime updatedOn) {
    this.updatedOn = updatedOn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Pullrequest pullrequest = (Pullrequest) o;
    return Objects.equals(this.author, pullrequest.author) &&
        Objects.equals(this.closeSourceBranch, pullrequest.closeSourceBranch) &&
        Objects.equals(this.closedBy, pullrequest.closedBy) &&
        Objects.equals(this.commentCount, pullrequest.commentCount) &&
        Objects.equals(this.createdOn, pullrequest.createdOn) &&
        Objects.equals(this.destination, pullrequest.destination) &&
        Objects.equals(this.id, pullrequest.id) &&
        Objects.equals(this.links, pullrequest.links) &&
        Objects.equals(this.mergeCommit, pullrequest.mergeCommit) &&
        Objects.equals(this.participants, pullrequest.participants) &&
        Objects.equals(this.reason, pullrequest.reason) &&
        Objects.equals(this.rendered, pullrequest.rendered) &&
        Objects.equals(this.reviewers, pullrequest.reviewers) &&
        Objects.equals(this.source, pullrequest.source) &&
        Objects.equals(this.state, pullrequest.state) &&
        Objects.equals(this.summary, pullrequest.summary) &&
        Objects.equals(this.taskCount, pullrequest.taskCount) &&
        Objects.equals(this.title, pullrequest.title) &&
        Objects.equals(this.updatedOn, pullrequest.updatedOn) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(author, closeSourceBranch, closedBy, commentCount, createdOn, destination, id, links, mergeCommit, participants, reason, rendered, reviewers, source, state, summary, taskCount, title, updatedOn, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Pullrequest {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    author: ").append(toIndentedString(author)).append("\n");
    sb.append("    closeSourceBranch: ").append(toIndentedString(closeSourceBranch)).append("\n");
    sb.append("    closedBy: ").append(toIndentedString(closedBy)).append("\n");
    sb.append("    commentCount: ").append(toIndentedString(commentCount)).append("\n");
    sb.append("    createdOn: ").append(toIndentedString(createdOn)).append("\n");
    sb.append("    destination: ").append(toIndentedString(destination)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    mergeCommit: ").append(toIndentedString(mergeCommit)).append("\n");
    sb.append("    participants: ").append(toIndentedString(participants)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    rendered: ").append(toIndentedString(rendered)).append("\n");
    sb.append("    reviewers: ").append(toIndentedString(reviewers)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    summary: ").append(toIndentedString(summary)).append("\n");
    sb.append("    taskCount: ").append(toIndentedString(taskCount)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    updatedOn: ").append(toIndentedString(updatedOn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("author");
    openapiFields.add("close_source_branch");
    openapiFields.add("closed_by");
    openapiFields.add("comment_count");
    openapiFields.add("created_on");
    openapiFields.add("destination");
    openapiFields.add("id");
    openapiFields.add("links");
    openapiFields.add("merge_commit");
    openapiFields.add("participants");
    openapiFields.add("reason");
    openapiFields.add("rendered");
    openapiFields.add("reviewers");
    openapiFields.add("source");
    openapiFields.add("state");
    openapiFields.add("summary");
    openapiFields.add("task_count");
    openapiFields.add("title");
    openapiFields.add("updated_on");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Pullrequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Pullrequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Pullrequest is not found in the empty JSON string", Pullrequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Pullrequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Pullrequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Pullrequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Pullrequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Pullrequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Pullrequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Pullrequest.class));

       return (TypeAdapter<T>) new TypeAdapter<Pullrequest>() {
           @Override
           public void write(JsonWriter out, Pullrequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Pullrequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Pullrequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Pullrequest
   * @throws IOException if the JSON string is invalid with respect to Pullrequest
   */
  public static Pullrequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Pullrequest.class);
  }

  /**
   * Convert an instance of Pullrequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

