/*
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Branch;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.PaginatedBranches;
import org.openapitools.client.model.PaginatedRefs;
import org.openapitools.client.model.PaginatedTags;
import org.openapitools.client.model.Tag;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RefsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RefsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RefsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for repositoriesWorkspaceRepoSlugRefsBranchesGet
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @param q  Query string to narrow down the response as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering). (optional)
     * @param sort  Field by which the results should be sorted as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering). The &#x60;name&#x60; field is handled specially for branches in that, if specified as the sort field, it uses a natural sort order instead of the default lexicographical sort order. For example, it will return [&#39;branch1&#39;, &#39;branch2&#39;, &#39;branch10&#39;] instead of [&#39;branch1&#39;, &#39;branch10&#39;, &#39;branch2&#39;]. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A paginated list of branches matching any filter criteria that were provided. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If the repository is private and the authenticated user does not have access to it.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified repository does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repositoriesWorkspaceRepoSlugRefsBranchesGetCall(String repoSlug, String workspace, String q, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories/{workspace}/{repo_slug}/refs/branches"
            .replace("{" + "repo_slug" + "}", localVarApiClient.escapeString(repoSlug.toString()))
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "oauth2", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repositoriesWorkspaceRepoSlugRefsBranchesGetValidateBeforeCall(String repoSlug, String workspace, String q, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'repoSlug' is set
        if (repoSlug == null) {
            throw new ApiException("Missing the required parameter 'repoSlug' when calling repositoriesWorkspaceRepoSlugRefsBranchesGet(Async)");
        }

        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling repositoriesWorkspaceRepoSlugRefsBranchesGet(Async)");
        }

        return repositoriesWorkspaceRepoSlugRefsBranchesGetCall(repoSlug, workspace, q, sort, _callback);

    }

    /**
     * List open branches
     * Returns a list of all open branches within the specified repository.         Results will be in the order the source control manager returns them.          &#x60;&#x60;&#x60;         $ curl -s https://api.bitbucket.org/2.0/repositories/atlassian/aui/refs/branches?pagelen&#x3D;1 | jq .         {           \&quot;pagelen\&quot;: 1,           \&quot;size\&quot;: 187,           \&quot;values\&quot;: [             {               \&quot;name\&quot;: \&quot;issue-9.3/AUI-5343-assistive-class\&quot;,               \&quot;links\&quot;: {                 \&quot;commits\&quot;: {                   \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui/commits/issue-9.3/AUI-5343-assistive-class\&quot;                 },                 \&quot;self\&quot;: {                   \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui/refs/branches/issue-9.3/AUI-5343-assistive-class\&quot;                 },                 \&quot;html\&quot;: {                   \&quot;href\&quot;: \&quot;https://bitbucket.org/atlassian/aui/branch/issue-9.3/AUI-5343-assistive-class\&quot;                 }               },               \&quot;default_merge_strategy\&quot;: \&quot;squash\&quot;,               \&quot;merge_strategies\&quot;: [                 \&quot;merge_commit\&quot;,                 \&quot;squash\&quot;,                 \&quot;fast_forward\&quot;               ],               \&quot;type\&quot;: \&quot;branch\&quot;,               \&quot;target\&quot;: {                 \&quot;hash\&quot;: \&quot;e5d1cde9069fcb9f0af90403a4de2150c125a148\&quot;,                 \&quot;repository\&quot;: {                   \&quot;links\&quot;: {                     \&quot;self\&quot;: {                       \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui\&quot;                     },                     \&quot;html\&quot;: {                       \&quot;href\&quot;: \&quot;https://bitbucket.org/atlassian/aui\&quot;                     },                     \&quot;avatar\&quot;: {                       \&quot;href\&quot;: \&quot;https://bytebucket.org/ravatar/%7B585074de-7b60-4fd1-81ed-e0bc7fafbda5%7D?ts&#x3D;86317\&quot;                     }                   },                   \&quot;type\&quot;: \&quot;repository\&quot;,                   \&quot;name\&quot;: \&quot;aui\&quot;,                   \&quot;full_name\&quot;: \&quot;atlassian/aui\&quot;,                   \&quot;uuid\&quot;: \&quot;{585074de-7b60-4fd1-81ed-e0bc7fafbda5}\&quot;                 },                 \&quot;links\&quot;: {                   \&quot;self\&quot;: {                     \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui/commit/e5d1cde9069fcb9f0af90403a4de2150c125a148\&quot;                   },                   \&quot;comments\&quot;: {                     \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui/commit/e5d1cde9069fcb9f0af90403a4de2150c125a148/comments\&quot;                   },                   \&quot;patch\&quot;: {                     \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui/patch/e5d1cde9069fcb9f0af90403a4de2150c125a148\&quot;                   },                   \&quot;html\&quot;: {                     \&quot;href\&quot;: \&quot;https://bitbucket.org/atlassian/aui/commits/e5d1cde9069fcb9f0af90403a4de2150c125a148\&quot;                   },                   \&quot;diff\&quot;: {                     \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui/diff/e5d1cde9069fcb9f0af90403a4de2150c125a148\&quot;                   },                   \&quot;approve\&quot;: {                     \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui/commit/e5d1cde9069fcb9f0af90403a4de2150c125a148/approve\&quot;                   },                   \&quot;statuses\&quot;: {                     \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui/commit/e5d1cde9069fcb9f0af90403a4de2150c125a148/statuses\&quot;                   }                 },                 \&quot;author\&quot;: {                   \&quot;raw\&quot;: \&quot;Marcin Konopka &lt;mkonopka@atlassian.com&gt;\&quot;,                   \&quot;type\&quot;: \&quot;author\&quot;,                   \&quot;user\&quot;: {                     \&quot;display_name\&quot;: \&quot;Marcin Konopka\&quot;,                     \&quot;uuid\&quot;: \&quot;{47cc24f4-2a05-4420-88fe-0417535a110a}\&quot;,                     \&quot;links\&quot;: {                       \&quot;self\&quot;: {                         \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/users/%7B47cc24f4-2a05-4420-88fe-0417535a110a%7D\&quot;                       },                       \&quot;html\&quot;: {                         \&quot;href\&quot;: \&quot;https://bitbucket.org/%7B47cc24f4-2a05-4420-88fe-0417535a110a%7D/\&quot;                       },                       \&quot;avatar\&quot;: {                         \&quot;href\&quot;: \&quot;https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/initials/MK-1.png\&quot;                       }                     },                     \&quot;nickname\&quot;: \&quot;Marcin Konopka\&quot;,                     \&quot;type\&quot;: \&quot;user\&quot;,                     \&quot;account_id\&quot;: \&quot;60113d2b47a9540069f4de03\&quot;                   }                 },                 \&quot;parents\&quot;: [                   {                     \&quot;hash\&quot;: \&quot;87f7fc92b00464ae47b13ef65c91884e4ac9be51\&quot;,                     \&quot;type\&quot;: \&quot;commit\&quot;,                     \&quot;links\&quot;: {                       \&quot;self\&quot;: {                         \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui/commit/87f7fc92b00464ae47b13ef65c91884e4ac9be51\&quot;                       },                       \&quot;html\&quot;: {                         \&quot;href\&quot;: \&quot;https://bitbucket.org/atlassian/aui/commits/87f7fc92b00464ae47b13ef65c91884e4ac9be51\&quot;                       }                     }                   }                 ],                 \&quot;date\&quot;: \&quot;2021-04-13T13:44:49+00:00\&quot;,                 \&quot;message\&quot;: \&quot;wip \&quot;,                 \&quot;type\&quot;: \&quot;commit\&quot;               }             }           ],           \&quot;page\&quot;: 1,           \&quot;next\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui/refs/branches?pagelen&#x3D;1&amp;page&#x3D;2\&quot;         }         &#x60;&#x60;&#x60;          Branches support [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering)         that can be used to search for specific branches. For instance, to find         all branches that have \&quot;stab\&quot; in their name:          &#x60;&#x60;&#x60;         curl -s https://api.bitbucket.org/2.0/repositories/atlassian/aui/refs/branches -G --data-urlencode &#39;q&#x3D;name ~ \&quot;stab\&quot;&#39;         &#x60;&#x60;&#x60;          By default, results will be in the order the underlying source control system returns them and identical to         the ordering one sees when running \&quot;$ git branch --list\&quot;. Note that this follows simple         lexical ordering of the ref names.          This can be undesirable as it does apply any natural sorting semantics, meaning for instance that tags are         sorted [\&quot;v10\&quot;, \&quot;v11\&quot;, \&quot;v9\&quot;] instead of [\&quot;v9\&quot;, \&quot;v10\&quot;, \&quot;v11\&quot;].          Sorting can be changed using the ?q&#x3D; query parameter. When using ?q&#x3D;name to explicitly sort on ref name,         Bitbucket will apply natural sorting and interpret numerical values as numbers instead of strings.
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @param q  Query string to narrow down the response as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering). (optional)
     * @param sort  Field by which the results should be sorted as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering). The &#x60;name&#x60; field is handled specially for branches in that, if specified as the sort field, it uses a natural sort order instead of the default lexicographical sort order. For example, it will return [&#39;branch1&#39;, &#39;branch2&#39;, &#39;branch10&#39;] instead of [&#39;branch1&#39;, &#39;branch10&#39;, &#39;branch2&#39;]. (optional)
     * @return PaginatedBranches
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A paginated list of branches matching any filter criteria that were provided. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If the repository is private and the authenticated user does not have access to it.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified repository does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedBranches repositoriesWorkspaceRepoSlugRefsBranchesGet(String repoSlug, String workspace, String q, String sort) throws ApiException {
        ApiResponse<PaginatedBranches> localVarResp = repositoriesWorkspaceRepoSlugRefsBranchesGetWithHttpInfo(repoSlug, workspace, q, sort);
        return localVarResp.getData();
    }

    /**
     * List open branches
     * Returns a list of all open branches within the specified repository.         Results will be in the order the source control manager returns them.          &#x60;&#x60;&#x60;         $ curl -s https://api.bitbucket.org/2.0/repositories/atlassian/aui/refs/branches?pagelen&#x3D;1 | jq .         {           \&quot;pagelen\&quot;: 1,           \&quot;size\&quot;: 187,           \&quot;values\&quot;: [             {               \&quot;name\&quot;: \&quot;issue-9.3/AUI-5343-assistive-class\&quot;,               \&quot;links\&quot;: {                 \&quot;commits\&quot;: {                   \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui/commits/issue-9.3/AUI-5343-assistive-class\&quot;                 },                 \&quot;self\&quot;: {                   \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui/refs/branches/issue-9.3/AUI-5343-assistive-class\&quot;                 },                 \&quot;html\&quot;: {                   \&quot;href\&quot;: \&quot;https://bitbucket.org/atlassian/aui/branch/issue-9.3/AUI-5343-assistive-class\&quot;                 }               },               \&quot;default_merge_strategy\&quot;: \&quot;squash\&quot;,               \&quot;merge_strategies\&quot;: [                 \&quot;merge_commit\&quot;,                 \&quot;squash\&quot;,                 \&quot;fast_forward\&quot;               ],               \&quot;type\&quot;: \&quot;branch\&quot;,               \&quot;target\&quot;: {                 \&quot;hash\&quot;: \&quot;e5d1cde9069fcb9f0af90403a4de2150c125a148\&quot;,                 \&quot;repository\&quot;: {                   \&quot;links\&quot;: {                     \&quot;self\&quot;: {                       \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui\&quot;                     },                     \&quot;html\&quot;: {                       \&quot;href\&quot;: \&quot;https://bitbucket.org/atlassian/aui\&quot;                     },                     \&quot;avatar\&quot;: {                       \&quot;href\&quot;: \&quot;https://bytebucket.org/ravatar/%7B585074de-7b60-4fd1-81ed-e0bc7fafbda5%7D?ts&#x3D;86317\&quot;                     }                   },                   \&quot;type\&quot;: \&quot;repository\&quot;,                   \&quot;name\&quot;: \&quot;aui\&quot;,                   \&quot;full_name\&quot;: \&quot;atlassian/aui\&quot;,                   \&quot;uuid\&quot;: \&quot;{585074de-7b60-4fd1-81ed-e0bc7fafbda5}\&quot;                 },                 \&quot;links\&quot;: {                   \&quot;self\&quot;: {                     \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui/commit/e5d1cde9069fcb9f0af90403a4de2150c125a148\&quot;                   },                   \&quot;comments\&quot;: {                     \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui/commit/e5d1cde9069fcb9f0af90403a4de2150c125a148/comments\&quot;                   },                   \&quot;patch\&quot;: {                     \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui/patch/e5d1cde9069fcb9f0af90403a4de2150c125a148\&quot;                   },                   \&quot;html\&quot;: {                     \&quot;href\&quot;: \&quot;https://bitbucket.org/atlassian/aui/commits/e5d1cde9069fcb9f0af90403a4de2150c125a148\&quot;                   },                   \&quot;diff\&quot;: {                     \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui/diff/e5d1cde9069fcb9f0af90403a4de2150c125a148\&quot;                   },                   \&quot;approve\&quot;: {                     \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui/commit/e5d1cde9069fcb9f0af90403a4de2150c125a148/approve\&quot;                   },                   \&quot;statuses\&quot;: {                     \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui/commit/e5d1cde9069fcb9f0af90403a4de2150c125a148/statuses\&quot;                   }                 },                 \&quot;author\&quot;: {                   \&quot;raw\&quot;: \&quot;Marcin Konopka &lt;mkonopka@atlassian.com&gt;\&quot;,                   \&quot;type\&quot;: \&quot;author\&quot;,                   \&quot;user\&quot;: {                     \&quot;display_name\&quot;: \&quot;Marcin Konopka\&quot;,                     \&quot;uuid\&quot;: \&quot;{47cc24f4-2a05-4420-88fe-0417535a110a}\&quot;,                     \&quot;links\&quot;: {                       \&quot;self\&quot;: {                         \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/users/%7B47cc24f4-2a05-4420-88fe-0417535a110a%7D\&quot;                       },                       \&quot;html\&quot;: {                         \&quot;href\&quot;: \&quot;https://bitbucket.org/%7B47cc24f4-2a05-4420-88fe-0417535a110a%7D/\&quot;                       },                       \&quot;avatar\&quot;: {                         \&quot;href\&quot;: \&quot;https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/initials/MK-1.png\&quot;                       }                     },                     \&quot;nickname\&quot;: \&quot;Marcin Konopka\&quot;,                     \&quot;type\&quot;: \&quot;user\&quot;,                     \&quot;account_id\&quot;: \&quot;60113d2b47a9540069f4de03\&quot;                   }                 },                 \&quot;parents\&quot;: [                   {                     \&quot;hash\&quot;: \&quot;87f7fc92b00464ae47b13ef65c91884e4ac9be51\&quot;,                     \&quot;type\&quot;: \&quot;commit\&quot;,                     \&quot;links\&quot;: {                       \&quot;self\&quot;: {                         \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui/commit/87f7fc92b00464ae47b13ef65c91884e4ac9be51\&quot;                       },                       \&quot;html\&quot;: {                         \&quot;href\&quot;: \&quot;https://bitbucket.org/atlassian/aui/commits/87f7fc92b00464ae47b13ef65c91884e4ac9be51\&quot;                       }                     }                   }                 ],                 \&quot;date\&quot;: \&quot;2021-04-13T13:44:49+00:00\&quot;,                 \&quot;message\&quot;: \&quot;wip \&quot;,                 \&quot;type\&quot;: \&quot;commit\&quot;               }             }           ],           \&quot;page\&quot;: 1,           \&quot;next\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui/refs/branches?pagelen&#x3D;1&amp;page&#x3D;2\&quot;         }         &#x60;&#x60;&#x60;          Branches support [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering)         that can be used to search for specific branches. For instance, to find         all branches that have \&quot;stab\&quot; in their name:          &#x60;&#x60;&#x60;         curl -s https://api.bitbucket.org/2.0/repositories/atlassian/aui/refs/branches -G --data-urlencode &#39;q&#x3D;name ~ \&quot;stab\&quot;&#39;         &#x60;&#x60;&#x60;          By default, results will be in the order the underlying source control system returns them and identical to         the ordering one sees when running \&quot;$ git branch --list\&quot;. Note that this follows simple         lexical ordering of the ref names.          This can be undesirable as it does apply any natural sorting semantics, meaning for instance that tags are         sorted [\&quot;v10\&quot;, \&quot;v11\&quot;, \&quot;v9\&quot;] instead of [\&quot;v9\&quot;, \&quot;v10\&quot;, \&quot;v11\&quot;].          Sorting can be changed using the ?q&#x3D; query parameter. When using ?q&#x3D;name to explicitly sort on ref name,         Bitbucket will apply natural sorting and interpret numerical values as numbers instead of strings.
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @param q  Query string to narrow down the response as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering). (optional)
     * @param sort  Field by which the results should be sorted as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering). The &#x60;name&#x60; field is handled specially for branches in that, if specified as the sort field, it uses a natural sort order instead of the default lexicographical sort order. For example, it will return [&#39;branch1&#39;, &#39;branch2&#39;, &#39;branch10&#39;] instead of [&#39;branch1&#39;, &#39;branch10&#39;, &#39;branch2&#39;]. (optional)
     * @return ApiResponse&lt;PaginatedBranches&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A paginated list of branches matching any filter criteria that were provided. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If the repository is private and the authenticated user does not have access to it.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified repository does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedBranches> repositoriesWorkspaceRepoSlugRefsBranchesGetWithHttpInfo(String repoSlug, String workspace, String q, String sort) throws ApiException {
        okhttp3.Call localVarCall = repositoriesWorkspaceRepoSlugRefsBranchesGetValidateBeforeCall(repoSlug, workspace, q, sort, null);
        Type localVarReturnType = new TypeToken<PaginatedBranches>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List open branches (asynchronously)
     * Returns a list of all open branches within the specified repository.         Results will be in the order the source control manager returns them.          &#x60;&#x60;&#x60;         $ curl -s https://api.bitbucket.org/2.0/repositories/atlassian/aui/refs/branches?pagelen&#x3D;1 | jq .         {           \&quot;pagelen\&quot;: 1,           \&quot;size\&quot;: 187,           \&quot;values\&quot;: [             {               \&quot;name\&quot;: \&quot;issue-9.3/AUI-5343-assistive-class\&quot;,               \&quot;links\&quot;: {                 \&quot;commits\&quot;: {                   \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui/commits/issue-9.3/AUI-5343-assistive-class\&quot;                 },                 \&quot;self\&quot;: {                   \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui/refs/branches/issue-9.3/AUI-5343-assistive-class\&quot;                 },                 \&quot;html\&quot;: {                   \&quot;href\&quot;: \&quot;https://bitbucket.org/atlassian/aui/branch/issue-9.3/AUI-5343-assistive-class\&quot;                 }               },               \&quot;default_merge_strategy\&quot;: \&quot;squash\&quot;,               \&quot;merge_strategies\&quot;: [                 \&quot;merge_commit\&quot;,                 \&quot;squash\&quot;,                 \&quot;fast_forward\&quot;               ],               \&quot;type\&quot;: \&quot;branch\&quot;,               \&quot;target\&quot;: {                 \&quot;hash\&quot;: \&quot;e5d1cde9069fcb9f0af90403a4de2150c125a148\&quot;,                 \&quot;repository\&quot;: {                   \&quot;links\&quot;: {                     \&quot;self\&quot;: {                       \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui\&quot;                     },                     \&quot;html\&quot;: {                       \&quot;href\&quot;: \&quot;https://bitbucket.org/atlassian/aui\&quot;                     },                     \&quot;avatar\&quot;: {                       \&quot;href\&quot;: \&quot;https://bytebucket.org/ravatar/%7B585074de-7b60-4fd1-81ed-e0bc7fafbda5%7D?ts&#x3D;86317\&quot;                     }                   },                   \&quot;type\&quot;: \&quot;repository\&quot;,                   \&quot;name\&quot;: \&quot;aui\&quot;,                   \&quot;full_name\&quot;: \&quot;atlassian/aui\&quot;,                   \&quot;uuid\&quot;: \&quot;{585074de-7b60-4fd1-81ed-e0bc7fafbda5}\&quot;                 },                 \&quot;links\&quot;: {                   \&quot;self\&quot;: {                     \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui/commit/e5d1cde9069fcb9f0af90403a4de2150c125a148\&quot;                   },                   \&quot;comments\&quot;: {                     \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui/commit/e5d1cde9069fcb9f0af90403a4de2150c125a148/comments\&quot;                   },                   \&quot;patch\&quot;: {                     \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui/patch/e5d1cde9069fcb9f0af90403a4de2150c125a148\&quot;                   },                   \&quot;html\&quot;: {                     \&quot;href\&quot;: \&quot;https://bitbucket.org/atlassian/aui/commits/e5d1cde9069fcb9f0af90403a4de2150c125a148\&quot;                   },                   \&quot;diff\&quot;: {                     \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui/diff/e5d1cde9069fcb9f0af90403a4de2150c125a148\&quot;                   },                   \&quot;approve\&quot;: {                     \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui/commit/e5d1cde9069fcb9f0af90403a4de2150c125a148/approve\&quot;                   },                   \&quot;statuses\&quot;: {                     \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui/commit/e5d1cde9069fcb9f0af90403a4de2150c125a148/statuses\&quot;                   }                 },                 \&quot;author\&quot;: {                   \&quot;raw\&quot;: \&quot;Marcin Konopka &lt;mkonopka@atlassian.com&gt;\&quot;,                   \&quot;type\&quot;: \&quot;author\&quot;,                   \&quot;user\&quot;: {                     \&quot;display_name\&quot;: \&quot;Marcin Konopka\&quot;,                     \&quot;uuid\&quot;: \&quot;{47cc24f4-2a05-4420-88fe-0417535a110a}\&quot;,                     \&quot;links\&quot;: {                       \&quot;self\&quot;: {                         \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/users/%7B47cc24f4-2a05-4420-88fe-0417535a110a%7D\&quot;                       },                       \&quot;html\&quot;: {                         \&quot;href\&quot;: \&quot;https://bitbucket.org/%7B47cc24f4-2a05-4420-88fe-0417535a110a%7D/\&quot;                       },                       \&quot;avatar\&quot;: {                         \&quot;href\&quot;: \&quot;https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/initials/MK-1.png\&quot;                       }                     },                     \&quot;nickname\&quot;: \&quot;Marcin Konopka\&quot;,                     \&quot;type\&quot;: \&quot;user\&quot;,                     \&quot;account_id\&quot;: \&quot;60113d2b47a9540069f4de03\&quot;                   }                 },                 \&quot;parents\&quot;: [                   {                     \&quot;hash\&quot;: \&quot;87f7fc92b00464ae47b13ef65c91884e4ac9be51\&quot;,                     \&quot;type\&quot;: \&quot;commit\&quot;,                     \&quot;links\&quot;: {                       \&quot;self\&quot;: {                         \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui/commit/87f7fc92b00464ae47b13ef65c91884e4ac9be51\&quot;                       },                       \&quot;html\&quot;: {                         \&quot;href\&quot;: \&quot;https://bitbucket.org/atlassian/aui/commits/87f7fc92b00464ae47b13ef65c91884e4ac9be51\&quot;                       }                     }                   }                 ],                 \&quot;date\&quot;: \&quot;2021-04-13T13:44:49+00:00\&quot;,                 \&quot;message\&quot;: \&quot;wip \&quot;,                 \&quot;type\&quot;: \&quot;commit\&quot;               }             }           ],           \&quot;page\&quot;: 1,           \&quot;next\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui/refs/branches?pagelen&#x3D;1&amp;page&#x3D;2\&quot;         }         &#x60;&#x60;&#x60;          Branches support [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering)         that can be used to search for specific branches. For instance, to find         all branches that have \&quot;stab\&quot; in their name:          &#x60;&#x60;&#x60;         curl -s https://api.bitbucket.org/2.0/repositories/atlassian/aui/refs/branches -G --data-urlencode &#39;q&#x3D;name ~ \&quot;stab\&quot;&#39;         &#x60;&#x60;&#x60;          By default, results will be in the order the underlying source control system returns them and identical to         the ordering one sees when running \&quot;$ git branch --list\&quot;. Note that this follows simple         lexical ordering of the ref names.          This can be undesirable as it does apply any natural sorting semantics, meaning for instance that tags are         sorted [\&quot;v10\&quot;, \&quot;v11\&quot;, \&quot;v9\&quot;] instead of [\&quot;v9\&quot;, \&quot;v10\&quot;, \&quot;v11\&quot;].          Sorting can be changed using the ?q&#x3D; query parameter. When using ?q&#x3D;name to explicitly sort on ref name,         Bitbucket will apply natural sorting and interpret numerical values as numbers instead of strings.
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @param q  Query string to narrow down the response as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering). (optional)
     * @param sort  Field by which the results should be sorted as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering). The &#x60;name&#x60; field is handled specially for branches in that, if specified as the sort field, it uses a natural sort order instead of the default lexicographical sort order. For example, it will return [&#39;branch1&#39;, &#39;branch2&#39;, &#39;branch10&#39;] instead of [&#39;branch1&#39;, &#39;branch10&#39;, &#39;branch2&#39;]. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A paginated list of branches matching any filter criteria that were provided. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If the repository is private and the authenticated user does not have access to it.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified repository does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repositoriesWorkspaceRepoSlugRefsBranchesGetAsync(String repoSlug, String workspace, String q, String sort, final ApiCallback<PaginatedBranches> _callback) throws ApiException {

        okhttp3.Call localVarCall = repositoriesWorkspaceRepoSlugRefsBranchesGetValidateBeforeCall(repoSlug, workspace, q, sort, _callback);
        Type localVarReturnType = new TypeToken<PaginatedBranches>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repositoriesWorkspaceRepoSlugRefsBranchesNameDelete
     * @param name The name of the branch. (required)
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Indicates that the specified branch was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If the repository is private and the authenticated user does not have access to it.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified repository or branch does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repositoriesWorkspaceRepoSlugRefsBranchesNameDeleteCall(String name, String repoSlug, String workspace, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories/{workspace}/{repo_slug}/refs/branches/{name}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "repo_slug" + "}", localVarApiClient.escapeString(repoSlug.toString()))
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "oauth2", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repositoriesWorkspaceRepoSlugRefsBranchesNameDeleteValidateBeforeCall(String name, String repoSlug, String workspace, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling repositoriesWorkspaceRepoSlugRefsBranchesNameDelete(Async)");
        }

        // verify the required parameter 'repoSlug' is set
        if (repoSlug == null) {
            throw new ApiException("Missing the required parameter 'repoSlug' when calling repositoriesWorkspaceRepoSlugRefsBranchesNameDelete(Async)");
        }

        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling repositoriesWorkspaceRepoSlugRefsBranchesNameDelete(Async)");
        }

        return repositoriesWorkspaceRepoSlugRefsBranchesNameDeleteCall(name, repoSlug, workspace, _callback);

    }

    /**
     * Delete a branch
     * Delete a branch in the specified repository.  The main branch is not allowed to be deleted and will return a 400 response.  The branch name should not include any prefixes (e.g. refs/heads).
     * @param name The name of the branch. (required)
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Indicates that the specified branch was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If the repository is private and the authenticated user does not have access to it.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified repository or branch does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public void repositoriesWorkspaceRepoSlugRefsBranchesNameDelete(String name, String repoSlug, String workspace) throws ApiException {
        repositoriesWorkspaceRepoSlugRefsBranchesNameDeleteWithHttpInfo(name, repoSlug, workspace);
    }

    /**
     * Delete a branch
     * Delete a branch in the specified repository.  The main branch is not allowed to be deleted and will return a 400 response.  The branch name should not include any prefixes (e.g. refs/heads).
     * @param name The name of the branch. (required)
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Indicates that the specified branch was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If the repository is private and the authenticated user does not have access to it.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified repository or branch does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> repositoriesWorkspaceRepoSlugRefsBranchesNameDeleteWithHttpInfo(String name, String repoSlug, String workspace) throws ApiException {
        okhttp3.Call localVarCall = repositoriesWorkspaceRepoSlugRefsBranchesNameDeleteValidateBeforeCall(name, repoSlug, workspace, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a branch (asynchronously)
     * Delete a branch in the specified repository.  The main branch is not allowed to be deleted and will return a 400 response.  The branch name should not include any prefixes (e.g. refs/heads).
     * @param name The name of the branch. (required)
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Indicates that the specified branch was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If the repository is private and the authenticated user does not have access to it.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified repository or branch does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repositoriesWorkspaceRepoSlugRefsBranchesNameDeleteAsync(String name, String repoSlug, String workspace, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = repositoriesWorkspaceRepoSlugRefsBranchesNameDeleteValidateBeforeCall(name, repoSlug, workspace, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for repositoriesWorkspaceRepoSlugRefsBranchesNameGet
     * @param name The name of the branch. (required)
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The branch object. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If the repository is private and the authenticated user does not have access to it.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified repository or branch does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repositoriesWorkspaceRepoSlugRefsBranchesNameGetCall(String name, String repoSlug, String workspace, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories/{workspace}/{repo_slug}/refs/branches/{name}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "repo_slug" + "}", localVarApiClient.escapeString(repoSlug.toString()))
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "oauth2", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repositoriesWorkspaceRepoSlugRefsBranchesNameGetValidateBeforeCall(String name, String repoSlug, String workspace, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling repositoriesWorkspaceRepoSlugRefsBranchesNameGet(Async)");
        }

        // verify the required parameter 'repoSlug' is set
        if (repoSlug == null) {
            throw new ApiException("Missing the required parameter 'repoSlug' when calling repositoriesWorkspaceRepoSlugRefsBranchesNameGet(Async)");
        }

        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling repositoriesWorkspaceRepoSlugRefsBranchesNameGet(Async)");
        }

        return repositoriesWorkspaceRepoSlugRefsBranchesNameGetCall(name, repoSlug, workspace, _callback);

    }

    /**
     * Get a branch
     * Returns a branch object within the specified repository.          &#x60;&#x60;&#x60;         $ curl -s https://api.bitbucket.org/2.0/repositories/atlassian/aui/refs/branches/master | jq .         {           \&quot;name\&quot;: \&quot;master\&quot;,           \&quot;links\&quot;: {             \&quot;commits\&quot;: {               \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui/commits/master\&quot;             },             \&quot;self\&quot;: {               \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui/refs/branches/master\&quot;             },             \&quot;html\&quot;: {               \&quot;href\&quot;: \&quot;https://bitbucket.org/atlassian/aui/branch/master\&quot;             }           },           \&quot;default_merge_strategy\&quot;: \&quot;squash\&quot;,           \&quot;merge_strategies\&quot;: [             \&quot;merge_commit\&quot;,             \&quot;squash\&quot;,             \&quot;fast_forward\&quot;           ],           \&quot;type\&quot;: \&quot;branch\&quot;,           \&quot;target\&quot;: {             \&quot;hash\&quot;: \&quot;e7d158ff7ed5538c28f94cd97a9ad569680fc94e\&quot;,             \&quot;repository\&quot;: {               \&quot;links\&quot;: {                 \&quot;self\&quot;: {                   \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui\&quot;                 },                 \&quot;html\&quot;: {                   \&quot;href\&quot;: \&quot;https://bitbucket.org/atlassian/aui\&quot;                 },                 \&quot;avatar\&quot;: {                   \&quot;href\&quot;: \&quot;https://bytebucket.org/ravatar/%7B585074de-7b60-4fd1-81ed-e0bc7fafbda5%7D?ts&#x3D;86317\&quot;                 }               },               \&quot;type\&quot;: \&quot;repository\&quot;,               \&quot;name\&quot;: \&quot;aui\&quot;,               \&quot;full_name\&quot;: \&quot;atlassian/aui\&quot;,               \&quot;uuid\&quot;: \&quot;{585074de-7b60-4fd1-81ed-e0bc7fafbda5}\&quot;             },             \&quot;links\&quot;: {               \&quot;self\&quot;: {                 \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui/commit/e7d158ff7ed5538c28f94cd97a9ad569680fc94e\&quot;               },               \&quot;comments\&quot;: {                 \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui/commit/e7d158ff7ed5538c28f94cd97a9ad569680fc94e/comments\&quot;               },               \&quot;patch\&quot;: {                 \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui/patch/e7d158ff7ed5538c28f94cd97a9ad569680fc94e\&quot;               },               \&quot;html\&quot;: {                 \&quot;href\&quot;: \&quot;https://bitbucket.org/atlassian/aui/commits/e7d158ff7ed5538c28f94cd97a9ad569680fc94e\&quot;               },               \&quot;diff\&quot;: {                 \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui/diff/e7d158ff7ed5538c28f94cd97a9ad569680fc94e\&quot;               },               \&quot;approve\&quot;: {                 \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui/commit/e7d158ff7ed5538c28f94cd97a9ad569680fc94e/approve\&quot;               },               \&quot;statuses\&quot;: {                 \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui/commit/e7d158ff7ed5538c28f94cd97a9ad569680fc94e/statuses\&quot;               }             },             \&quot;author\&quot;: {               \&quot;raw\&quot;: \&quot;psre-renovate-bot &lt;psre-renovate-bot@atlassian.com&gt;\&quot;,               \&quot;type\&quot;: \&quot;author\&quot;,               \&quot;user\&quot;: {                 \&quot;display_name\&quot;: \&quot;psre-renovate-bot\&quot;,                 \&quot;uuid\&quot;: \&quot;{250a442a-3ab3-4fcb-87c3-3c8f3df65ec7}\&quot;,                 \&quot;links\&quot;: {                   \&quot;self\&quot;: {                     \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/users/%7B250a442a-3ab3-4fcb-87c3-3c8f3df65ec7%7D\&quot;                   },                   \&quot;html\&quot;: {                     \&quot;href\&quot;: \&quot;https://bitbucket.org/%7B250a442a-3ab3-4fcb-87c3-3c8f3df65ec7%7D/\&quot;                   },                   \&quot;avatar\&quot;: {                     \&quot;href\&quot;: \&quot;https://secure.gravatar.com/avatar/6972ee037c9f36360170a86f544071a2?d&#x3D;https%3A%2F%2Favatar-management--avatars.us-west-2.prod.public.atl-paas.net%2Finitials%2FP-3.png\&quot;                   }                 },                 \&quot;nickname\&quot;: \&quot;Renovate Bot\&quot;,                 \&quot;type\&quot;: \&quot;user\&quot;,                 \&quot;account_id\&quot;: \&quot;5d5355e8c6b9320d9ea5b28d\&quot;               }             },             \&quot;parents\&quot;: [               {                 \&quot;hash\&quot;: \&quot;eab868a309e75733de80969a7bed1ec6d4651e06\&quot;,                 \&quot;type\&quot;: \&quot;commit\&quot;,                 \&quot;links\&quot;: {                   \&quot;self\&quot;: {                     \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui/commit/eab868a309e75733de80969a7bed1ec6d4651e06\&quot;                   },                   \&quot;html\&quot;: {                     \&quot;href\&quot;: \&quot;https://bitbucket.org/atlassian/aui/commits/eab868a309e75733de80969a7bed1ec6d4651e06\&quot;                   }                 }               }             ],             \&quot;date\&quot;: \&quot;2021-04-12T06:44:38+00:00\&quot;,             \&quot;message\&quot;: \&quot;Merged in issue/NONE-renovate-master-babel-monorepo (pull request #2883)  chore(deps): update babel monorepo to v7.13.15 (master)  Approved-by: Chris \&quot;Daz\&quot; Darroch \&quot;,             \&quot;type\&quot;: \&quot;commit\&quot;           }         }         &#x60;&#x60;&#x60;          This call requires authentication. Private repositories require the         caller to authenticate with an account that has appropriate         authorization.          For Git, the branch name should not include any prefixes (e.g.         refs/heads).
     * @param name The name of the branch. (required)
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @return Branch
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The branch object. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If the repository is private and the authenticated user does not have access to it.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified repository or branch does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public Branch repositoriesWorkspaceRepoSlugRefsBranchesNameGet(String name, String repoSlug, String workspace) throws ApiException {
        ApiResponse<Branch> localVarResp = repositoriesWorkspaceRepoSlugRefsBranchesNameGetWithHttpInfo(name, repoSlug, workspace);
        return localVarResp.getData();
    }

    /**
     * Get a branch
     * Returns a branch object within the specified repository.          &#x60;&#x60;&#x60;         $ curl -s https://api.bitbucket.org/2.0/repositories/atlassian/aui/refs/branches/master | jq .         {           \&quot;name\&quot;: \&quot;master\&quot;,           \&quot;links\&quot;: {             \&quot;commits\&quot;: {               \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui/commits/master\&quot;             },             \&quot;self\&quot;: {               \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui/refs/branches/master\&quot;             },             \&quot;html\&quot;: {               \&quot;href\&quot;: \&quot;https://bitbucket.org/atlassian/aui/branch/master\&quot;             }           },           \&quot;default_merge_strategy\&quot;: \&quot;squash\&quot;,           \&quot;merge_strategies\&quot;: [             \&quot;merge_commit\&quot;,             \&quot;squash\&quot;,             \&quot;fast_forward\&quot;           ],           \&quot;type\&quot;: \&quot;branch\&quot;,           \&quot;target\&quot;: {             \&quot;hash\&quot;: \&quot;e7d158ff7ed5538c28f94cd97a9ad569680fc94e\&quot;,             \&quot;repository\&quot;: {               \&quot;links\&quot;: {                 \&quot;self\&quot;: {                   \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui\&quot;                 },                 \&quot;html\&quot;: {                   \&quot;href\&quot;: \&quot;https://bitbucket.org/atlassian/aui\&quot;                 },                 \&quot;avatar\&quot;: {                   \&quot;href\&quot;: \&quot;https://bytebucket.org/ravatar/%7B585074de-7b60-4fd1-81ed-e0bc7fafbda5%7D?ts&#x3D;86317\&quot;                 }               },               \&quot;type\&quot;: \&quot;repository\&quot;,               \&quot;name\&quot;: \&quot;aui\&quot;,               \&quot;full_name\&quot;: \&quot;atlassian/aui\&quot;,               \&quot;uuid\&quot;: \&quot;{585074de-7b60-4fd1-81ed-e0bc7fafbda5}\&quot;             },             \&quot;links\&quot;: {               \&quot;self\&quot;: {                 \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui/commit/e7d158ff7ed5538c28f94cd97a9ad569680fc94e\&quot;               },               \&quot;comments\&quot;: {                 \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui/commit/e7d158ff7ed5538c28f94cd97a9ad569680fc94e/comments\&quot;               },               \&quot;patch\&quot;: {                 \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui/patch/e7d158ff7ed5538c28f94cd97a9ad569680fc94e\&quot;               },               \&quot;html\&quot;: {                 \&quot;href\&quot;: \&quot;https://bitbucket.org/atlassian/aui/commits/e7d158ff7ed5538c28f94cd97a9ad569680fc94e\&quot;               },               \&quot;diff\&quot;: {                 \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui/diff/e7d158ff7ed5538c28f94cd97a9ad569680fc94e\&quot;               },               \&quot;approve\&quot;: {                 \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui/commit/e7d158ff7ed5538c28f94cd97a9ad569680fc94e/approve\&quot;               },               \&quot;statuses\&quot;: {                 \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui/commit/e7d158ff7ed5538c28f94cd97a9ad569680fc94e/statuses\&quot;               }             },             \&quot;author\&quot;: {               \&quot;raw\&quot;: \&quot;psre-renovate-bot &lt;psre-renovate-bot@atlassian.com&gt;\&quot;,               \&quot;type\&quot;: \&quot;author\&quot;,               \&quot;user\&quot;: {                 \&quot;display_name\&quot;: \&quot;psre-renovate-bot\&quot;,                 \&quot;uuid\&quot;: \&quot;{250a442a-3ab3-4fcb-87c3-3c8f3df65ec7}\&quot;,                 \&quot;links\&quot;: {                   \&quot;self\&quot;: {                     \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/users/%7B250a442a-3ab3-4fcb-87c3-3c8f3df65ec7%7D\&quot;                   },                   \&quot;html\&quot;: {                     \&quot;href\&quot;: \&quot;https://bitbucket.org/%7B250a442a-3ab3-4fcb-87c3-3c8f3df65ec7%7D/\&quot;                   },                   \&quot;avatar\&quot;: {                     \&quot;href\&quot;: \&quot;https://secure.gravatar.com/avatar/6972ee037c9f36360170a86f544071a2?d&#x3D;https%3A%2F%2Favatar-management--avatars.us-west-2.prod.public.atl-paas.net%2Finitials%2FP-3.png\&quot;                   }                 },                 \&quot;nickname\&quot;: \&quot;Renovate Bot\&quot;,                 \&quot;type\&quot;: \&quot;user\&quot;,                 \&quot;account_id\&quot;: \&quot;5d5355e8c6b9320d9ea5b28d\&quot;               }             },             \&quot;parents\&quot;: [               {                 \&quot;hash\&quot;: \&quot;eab868a309e75733de80969a7bed1ec6d4651e06\&quot;,                 \&quot;type\&quot;: \&quot;commit\&quot;,                 \&quot;links\&quot;: {                   \&quot;self\&quot;: {                     \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui/commit/eab868a309e75733de80969a7bed1ec6d4651e06\&quot;                   },                   \&quot;html\&quot;: {                     \&quot;href\&quot;: \&quot;https://bitbucket.org/atlassian/aui/commits/eab868a309e75733de80969a7bed1ec6d4651e06\&quot;                   }                 }               }             ],             \&quot;date\&quot;: \&quot;2021-04-12T06:44:38+00:00\&quot;,             \&quot;message\&quot;: \&quot;Merged in issue/NONE-renovate-master-babel-monorepo (pull request #2883)  chore(deps): update babel monorepo to v7.13.15 (master)  Approved-by: Chris \&quot;Daz\&quot; Darroch \&quot;,             \&quot;type\&quot;: \&quot;commit\&quot;           }         }         &#x60;&#x60;&#x60;          This call requires authentication. Private repositories require the         caller to authenticate with an account that has appropriate         authorization.          For Git, the branch name should not include any prefixes (e.g.         refs/heads).
     * @param name The name of the branch. (required)
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @return ApiResponse&lt;Branch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The branch object. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If the repository is private and the authenticated user does not have access to it.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified repository or branch does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Branch> repositoriesWorkspaceRepoSlugRefsBranchesNameGetWithHttpInfo(String name, String repoSlug, String workspace) throws ApiException {
        okhttp3.Call localVarCall = repositoriesWorkspaceRepoSlugRefsBranchesNameGetValidateBeforeCall(name, repoSlug, workspace, null);
        Type localVarReturnType = new TypeToken<Branch>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a branch (asynchronously)
     * Returns a branch object within the specified repository.          &#x60;&#x60;&#x60;         $ curl -s https://api.bitbucket.org/2.0/repositories/atlassian/aui/refs/branches/master | jq .         {           \&quot;name\&quot;: \&quot;master\&quot;,           \&quot;links\&quot;: {             \&quot;commits\&quot;: {               \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui/commits/master\&quot;             },             \&quot;self\&quot;: {               \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui/refs/branches/master\&quot;             },             \&quot;html\&quot;: {               \&quot;href\&quot;: \&quot;https://bitbucket.org/atlassian/aui/branch/master\&quot;             }           },           \&quot;default_merge_strategy\&quot;: \&quot;squash\&quot;,           \&quot;merge_strategies\&quot;: [             \&quot;merge_commit\&quot;,             \&quot;squash\&quot;,             \&quot;fast_forward\&quot;           ],           \&quot;type\&quot;: \&quot;branch\&quot;,           \&quot;target\&quot;: {             \&quot;hash\&quot;: \&quot;e7d158ff7ed5538c28f94cd97a9ad569680fc94e\&quot;,             \&quot;repository\&quot;: {               \&quot;links\&quot;: {                 \&quot;self\&quot;: {                   \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui\&quot;                 },                 \&quot;html\&quot;: {                   \&quot;href\&quot;: \&quot;https://bitbucket.org/atlassian/aui\&quot;                 },                 \&quot;avatar\&quot;: {                   \&quot;href\&quot;: \&quot;https://bytebucket.org/ravatar/%7B585074de-7b60-4fd1-81ed-e0bc7fafbda5%7D?ts&#x3D;86317\&quot;                 }               },               \&quot;type\&quot;: \&quot;repository\&quot;,               \&quot;name\&quot;: \&quot;aui\&quot;,               \&quot;full_name\&quot;: \&quot;atlassian/aui\&quot;,               \&quot;uuid\&quot;: \&quot;{585074de-7b60-4fd1-81ed-e0bc7fafbda5}\&quot;             },             \&quot;links\&quot;: {               \&quot;self\&quot;: {                 \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui/commit/e7d158ff7ed5538c28f94cd97a9ad569680fc94e\&quot;               },               \&quot;comments\&quot;: {                 \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui/commit/e7d158ff7ed5538c28f94cd97a9ad569680fc94e/comments\&quot;               },               \&quot;patch\&quot;: {                 \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui/patch/e7d158ff7ed5538c28f94cd97a9ad569680fc94e\&quot;               },               \&quot;html\&quot;: {                 \&quot;href\&quot;: \&quot;https://bitbucket.org/atlassian/aui/commits/e7d158ff7ed5538c28f94cd97a9ad569680fc94e\&quot;               },               \&quot;diff\&quot;: {                 \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui/diff/e7d158ff7ed5538c28f94cd97a9ad569680fc94e\&quot;               },               \&quot;approve\&quot;: {                 \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui/commit/e7d158ff7ed5538c28f94cd97a9ad569680fc94e/approve\&quot;               },               \&quot;statuses\&quot;: {                 \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui/commit/e7d158ff7ed5538c28f94cd97a9ad569680fc94e/statuses\&quot;               }             },             \&quot;author\&quot;: {               \&quot;raw\&quot;: \&quot;psre-renovate-bot &lt;psre-renovate-bot@atlassian.com&gt;\&quot;,               \&quot;type\&quot;: \&quot;author\&quot;,               \&quot;user\&quot;: {                 \&quot;display_name\&quot;: \&quot;psre-renovate-bot\&quot;,                 \&quot;uuid\&quot;: \&quot;{250a442a-3ab3-4fcb-87c3-3c8f3df65ec7}\&quot;,                 \&quot;links\&quot;: {                   \&quot;self\&quot;: {                     \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/users/%7B250a442a-3ab3-4fcb-87c3-3c8f3df65ec7%7D\&quot;                   },                   \&quot;html\&quot;: {                     \&quot;href\&quot;: \&quot;https://bitbucket.org/%7B250a442a-3ab3-4fcb-87c3-3c8f3df65ec7%7D/\&quot;                   },                   \&quot;avatar\&quot;: {                     \&quot;href\&quot;: \&quot;https://secure.gravatar.com/avatar/6972ee037c9f36360170a86f544071a2?d&#x3D;https%3A%2F%2Favatar-management--avatars.us-west-2.prod.public.atl-paas.net%2Finitials%2FP-3.png\&quot;                   }                 },                 \&quot;nickname\&quot;: \&quot;Renovate Bot\&quot;,                 \&quot;type\&quot;: \&quot;user\&quot;,                 \&quot;account_id\&quot;: \&quot;5d5355e8c6b9320d9ea5b28d\&quot;               }             },             \&quot;parents\&quot;: [               {                 \&quot;hash\&quot;: \&quot;eab868a309e75733de80969a7bed1ec6d4651e06\&quot;,                 \&quot;type\&quot;: \&quot;commit\&quot;,                 \&quot;links\&quot;: {                   \&quot;self\&quot;: {                     \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/atlassian/aui/commit/eab868a309e75733de80969a7bed1ec6d4651e06\&quot;                   },                   \&quot;html\&quot;: {                     \&quot;href\&quot;: \&quot;https://bitbucket.org/atlassian/aui/commits/eab868a309e75733de80969a7bed1ec6d4651e06\&quot;                   }                 }               }             ],             \&quot;date\&quot;: \&quot;2021-04-12T06:44:38+00:00\&quot;,             \&quot;message\&quot;: \&quot;Merged in issue/NONE-renovate-master-babel-monorepo (pull request #2883)  chore(deps): update babel monorepo to v7.13.15 (master)  Approved-by: Chris \&quot;Daz\&quot; Darroch \&quot;,             \&quot;type\&quot;: \&quot;commit\&quot;           }         }         &#x60;&#x60;&#x60;          This call requires authentication. Private repositories require the         caller to authenticate with an account that has appropriate         authorization.          For Git, the branch name should not include any prefixes (e.g.         refs/heads).
     * @param name The name of the branch. (required)
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The branch object. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If the repository is private and the authenticated user does not have access to it.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified repository or branch does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repositoriesWorkspaceRepoSlugRefsBranchesNameGetAsync(String name, String repoSlug, String workspace, final ApiCallback<Branch> _callback) throws ApiException {

        okhttp3.Call localVarCall = repositoriesWorkspaceRepoSlugRefsBranchesNameGetValidateBeforeCall(name, repoSlug, workspace, _callback);
        Type localVarReturnType = new TypeToken<Branch>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repositoriesWorkspaceRepoSlugRefsBranchesPost
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The newly created branch object. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If the repository is private and the authenticated user does not have access to it.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified repository or branch does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repositoriesWorkspaceRepoSlugRefsBranchesPostCall(String repoSlug, String workspace, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories/{workspace}/{repo_slug}/refs/branches"
            .replace("{" + "repo_slug" + "}", localVarApiClient.escapeString(repoSlug.toString()))
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "oauth2", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repositoriesWorkspaceRepoSlugRefsBranchesPostValidateBeforeCall(String repoSlug, String workspace, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'repoSlug' is set
        if (repoSlug == null) {
            throw new ApiException("Missing the required parameter 'repoSlug' when calling repositoriesWorkspaceRepoSlugRefsBranchesPost(Async)");
        }

        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling repositoriesWorkspaceRepoSlugRefsBranchesPost(Async)");
        }

        return repositoriesWorkspaceRepoSlugRefsBranchesPostCall(repoSlug, workspace, _callback);

    }

    /**
     * Create a branch
     * Creates a new branch in the specified repository.  The payload of the POST should consist of a JSON document that contains the name of the tag and the target hash.  &#x60;&#x60;&#x60; curl https://api.bitbucket.org/2.0/repositories/seanfarley/hg/refs/branches \\ -s -u seanfarley -X POST -H \&quot;Content-Type: application/json\&quot; \\ -d &#39;{     \&quot;name\&quot; : \&quot;smf/create-feature\&quot;,     \&quot;target\&quot; : {         \&quot;hash\&quot; : \&quot;default\&quot;,     } }&#39; &#x60;&#x60;&#x60;  This call requires authentication. Private repositories require the caller to authenticate with an account that has appropriate authorization.  The branch name should not include any prefixes (e.g. refs/heads). This endpoint does support using short hash prefixes for the commit hash, but it may return a 400 response if the provided prefix is ambiguous. Using a full commit hash is the preferred approach.
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @return Branch
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The newly created branch object. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If the repository is private and the authenticated user does not have access to it.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified repository or branch does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public Branch repositoriesWorkspaceRepoSlugRefsBranchesPost(String repoSlug, String workspace) throws ApiException {
        ApiResponse<Branch> localVarResp = repositoriesWorkspaceRepoSlugRefsBranchesPostWithHttpInfo(repoSlug, workspace);
        return localVarResp.getData();
    }

    /**
     * Create a branch
     * Creates a new branch in the specified repository.  The payload of the POST should consist of a JSON document that contains the name of the tag and the target hash.  &#x60;&#x60;&#x60; curl https://api.bitbucket.org/2.0/repositories/seanfarley/hg/refs/branches \\ -s -u seanfarley -X POST -H \&quot;Content-Type: application/json\&quot; \\ -d &#39;{     \&quot;name\&quot; : \&quot;smf/create-feature\&quot;,     \&quot;target\&quot; : {         \&quot;hash\&quot; : \&quot;default\&quot;,     } }&#39; &#x60;&#x60;&#x60;  This call requires authentication. Private repositories require the caller to authenticate with an account that has appropriate authorization.  The branch name should not include any prefixes (e.g. refs/heads). This endpoint does support using short hash prefixes for the commit hash, but it may return a 400 response if the provided prefix is ambiguous. Using a full commit hash is the preferred approach.
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @return ApiResponse&lt;Branch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The newly created branch object. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If the repository is private and the authenticated user does not have access to it.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified repository or branch does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Branch> repositoriesWorkspaceRepoSlugRefsBranchesPostWithHttpInfo(String repoSlug, String workspace) throws ApiException {
        okhttp3.Call localVarCall = repositoriesWorkspaceRepoSlugRefsBranchesPostValidateBeforeCall(repoSlug, workspace, null);
        Type localVarReturnType = new TypeToken<Branch>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a branch (asynchronously)
     * Creates a new branch in the specified repository.  The payload of the POST should consist of a JSON document that contains the name of the tag and the target hash.  &#x60;&#x60;&#x60; curl https://api.bitbucket.org/2.0/repositories/seanfarley/hg/refs/branches \\ -s -u seanfarley -X POST -H \&quot;Content-Type: application/json\&quot; \\ -d &#39;{     \&quot;name\&quot; : \&quot;smf/create-feature\&quot;,     \&quot;target\&quot; : {         \&quot;hash\&quot; : \&quot;default\&quot;,     } }&#39; &#x60;&#x60;&#x60;  This call requires authentication. Private repositories require the caller to authenticate with an account that has appropriate authorization.  The branch name should not include any prefixes (e.g. refs/heads). This endpoint does support using short hash prefixes for the commit hash, but it may return a 400 response if the provided prefix is ambiguous. Using a full commit hash is the preferred approach.
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The newly created branch object. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If the repository is private and the authenticated user does not have access to it.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified repository or branch does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repositoriesWorkspaceRepoSlugRefsBranchesPostAsync(String repoSlug, String workspace, final ApiCallback<Branch> _callback) throws ApiException {

        okhttp3.Call localVarCall = repositoriesWorkspaceRepoSlugRefsBranchesPostValidateBeforeCall(repoSlug, workspace, _callback);
        Type localVarReturnType = new TypeToken<Branch>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repositoriesWorkspaceRepoSlugRefsGet
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @param q  Query string to narrow down the response as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering). (optional)
     * @param sort  Field by which the results should be sorted as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering). The &#x60;name&#x60; field is handled specially for refs in that, if specified as the sort field, it uses a natural sort order instead of the default lexicographical sort order. For example, it will return [&#39;1.1&#39;, &#39;1.2&#39;, &#39;1.10&#39;] instead of [&#39;1.1&#39;, &#39;1.10&#39;, &#39;1.2&#39;]. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A paginated list of refs matching any filter criteria that were provided. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If the repository is private and the authenticated user does not have access to it.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified repository does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repositoriesWorkspaceRepoSlugRefsGetCall(String repoSlug, String workspace, String q, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories/{workspace}/{repo_slug}/refs"
            .replace("{" + "repo_slug" + "}", localVarApiClient.escapeString(repoSlug.toString()))
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "oauth2", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repositoriesWorkspaceRepoSlugRefsGetValidateBeforeCall(String repoSlug, String workspace, String q, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'repoSlug' is set
        if (repoSlug == null) {
            throw new ApiException("Missing the required parameter 'repoSlug' when calling repositoriesWorkspaceRepoSlugRefsGet(Async)");
        }

        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling repositoriesWorkspaceRepoSlugRefsGet(Async)");
        }

        return repositoriesWorkspaceRepoSlugRefsGetCall(repoSlug, workspace, q, sort, _callback);

    }

    /**
     * List branches and tags
     * Returns the branches and tags in the repository.  By default, results will be in the order the underlying source control system returns them and identical to the ordering one sees when running \&quot;$ git show-ref\&quot;. Note that this follows simple lexical ordering of the ref names.  This can be undesirable as it does apply any natural sorting semantics, meaning for instance that refs are sorted [\&quot;branch1\&quot;, \&quot;branch10\&quot;, \&quot;branch2\&quot;, \&quot;v10\&quot;, \&quot;v11\&quot;, \&quot;v9\&quot;] instead of [\&quot;branch1\&quot;, \&quot;branch2\&quot;, \&quot;branch10\&quot;, \&quot;v9\&quot;, \&quot;v10\&quot;, \&quot;v11\&quot;].  Sorting can be changed using the ?sort&#x3D; query parameter. When using ?sort&#x3D;name to explicitly sort on ref name, Bitbucket will apply natural sorting and interpret numerical values as numbers instead of strings.
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @param q  Query string to narrow down the response as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering). (optional)
     * @param sort  Field by which the results should be sorted as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering). The &#x60;name&#x60; field is handled specially for refs in that, if specified as the sort field, it uses a natural sort order instead of the default lexicographical sort order. For example, it will return [&#39;1.1&#39;, &#39;1.2&#39;, &#39;1.10&#39;] instead of [&#39;1.1&#39;, &#39;1.10&#39;, &#39;1.2&#39;]. (optional)
     * @return PaginatedRefs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A paginated list of refs matching any filter criteria that were provided. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If the repository is private and the authenticated user does not have access to it.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified repository does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedRefs repositoriesWorkspaceRepoSlugRefsGet(String repoSlug, String workspace, String q, String sort) throws ApiException {
        ApiResponse<PaginatedRefs> localVarResp = repositoriesWorkspaceRepoSlugRefsGetWithHttpInfo(repoSlug, workspace, q, sort);
        return localVarResp.getData();
    }

    /**
     * List branches and tags
     * Returns the branches and tags in the repository.  By default, results will be in the order the underlying source control system returns them and identical to the ordering one sees when running \&quot;$ git show-ref\&quot;. Note that this follows simple lexical ordering of the ref names.  This can be undesirable as it does apply any natural sorting semantics, meaning for instance that refs are sorted [\&quot;branch1\&quot;, \&quot;branch10\&quot;, \&quot;branch2\&quot;, \&quot;v10\&quot;, \&quot;v11\&quot;, \&quot;v9\&quot;] instead of [\&quot;branch1\&quot;, \&quot;branch2\&quot;, \&quot;branch10\&quot;, \&quot;v9\&quot;, \&quot;v10\&quot;, \&quot;v11\&quot;].  Sorting can be changed using the ?sort&#x3D; query parameter. When using ?sort&#x3D;name to explicitly sort on ref name, Bitbucket will apply natural sorting and interpret numerical values as numbers instead of strings.
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @param q  Query string to narrow down the response as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering). (optional)
     * @param sort  Field by which the results should be sorted as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering). The &#x60;name&#x60; field is handled specially for refs in that, if specified as the sort field, it uses a natural sort order instead of the default lexicographical sort order. For example, it will return [&#39;1.1&#39;, &#39;1.2&#39;, &#39;1.10&#39;] instead of [&#39;1.1&#39;, &#39;1.10&#39;, &#39;1.2&#39;]. (optional)
     * @return ApiResponse&lt;PaginatedRefs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A paginated list of refs matching any filter criteria that were provided. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If the repository is private and the authenticated user does not have access to it.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified repository does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedRefs> repositoriesWorkspaceRepoSlugRefsGetWithHttpInfo(String repoSlug, String workspace, String q, String sort) throws ApiException {
        okhttp3.Call localVarCall = repositoriesWorkspaceRepoSlugRefsGetValidateBeforeCall(repoSlug, workspace, q, sort, null);
        Type localVarReturnType = new TypeToken<PaginatedRefs>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List branches and tags (asynchronously)
     * Returns the branches and tags in the repository.  By default, results will be in the order the underlying source control system returns them and identical to the ordering one sees when running \&quot;$ git show-ref\&quot;. Note that this follows simple lexical ordering of the ref names.  This can be undesirable as it does apply any natural sorting semantics, meaning for instance that refs are sorted [\&quot;branch1\&quot;, \&quot;branch10\&quot;, \&quot;branch2\&quot;, \&quot;v10\&quot;, \&quot;v11\&quot;, \&quot;v9\&quot;] instead of [\&quot;branch1\&quot;, \&quot;branch2\&quot;, \&quot;branch10\&quot;, \&quot;v9\&quot;, \&quot;v10\&quot;, \&quot;v11\&quot;].  Sorting can be changed using the ?sort&#x3D; query parameter. When using ?sort&#x3D;name to explicitly sort on ref name, Bitbucket will apply natural sorting and interpret numerical values as numbers instead of strings.
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @param q  Query string to narrow down the response as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering). (optional)
     * @param sort  Field by which the results should be sorted as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering). The &#x60;name&#x60; field is handled specially for refs in that, if specified as the sort field, it uses a natural sort order instead of the default lexicographical sort order. For example, it will return [&#39;1.1&#39;, &#39;1.2&#39;, &#39;1.10&#39;] instead of [&#39;1.1&#39;, &#39;1.10&#39;, &#39;1.2&#39;]. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A paginated list of refs matching any filter criteria that were provided. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If the repository is private and the authenticated user does not have access to it.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified repository does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repositoriesWorkspaceRepoSlugRefsGetAsync(String repoSlug, String workspace, String q, String sort, final ApiCallback<PaginatedRefs> _callback) throws ApiException {

        okhttp3.Call localVarCall = repositoriesWorkspaceRepoSlugRefsGetValidateBeforeCall(repoSlug, workspace, q, sort, _callback);
        Type localVarReturnType = new TypeToken<PaginatedRefs>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repositoriesWorkspaceRepoSlugRefsTagsGet
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @param q  Query string to narrow down the response as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering). (optional)
     * @param sort  Field by which the results should be sorted as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering). The &#x60;name&#x60; field is handled specially for tags in that, if specified as the sort field, it uses a natural sort order instead of the default lexicographical sort order. For example, it will return [&#39;1.1&#39;, &#39;1.2&#39;, &#39;1.10&#39;] instead of [&#39;1.1&#39;, &#39;1.10&#39;, &#39;1.2&#39;]. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A paginated list of tags matching any filter criteria that were provided. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If the repository is private and the authenticated user does not have access to it.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified repository does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repositoriesWorkspaceRepoSlugRefsTagsGetCall(String repoSlug, String workspace, String q, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories/{workspace}/{repo_slug}/refs/tags"
            .replace("{" + "repo_slug" + "}", localVarApiClient.escapeString(repoSlug.toString()))
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "oauth2", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repositoriesWorkspaceRepoSlugRefsTagsGetValidateBeforeCall(String repoSlug, String workspace, String q, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'repoSlug' is set
        if (repoSlug == null) {
            throw new ApiException("Missing the required parameter 'repoSlug' when calling repositoriesWorkspaceRepoSlugRefsTagsGet(Async)");
        }

        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling repositoriesWorkspaceRepoSlugRefsTagsGet(Async)");
        }

        return repositoriesWorkspaceRepoSlugRefsTagsGetCall(repoSlug, workspace, q, sort, _callback);

    }

    /**
     * List tags
     * Returns the tags in the repository.  By default, results will be in the order the underlying source control system returns them and identical to the ordering one sees when running \&quot;$ git tag --list\&quot;. Note that this follows simple lexical ordering of the ref names.  This can be undesirable as it does apply any natural sorting semantics, meaning for instance that tags are sorted [\&quot;v10\&quot;, \&quot;v11\&quot;, \&quot;v9\&quot;] instead of [\&quot;v9\&quot;, \&quot;v10\&quot;, \&quot;v11\&quot;].  Sorting can be changed using the ?sort&#x3D; query parameter. When using ?sort&#x3D;name to explicitly sort on ref name, Bitbucket will apply natural sorting and interpret numerical values as numbers instead of strings.
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @param q  Query string to narrow down the response as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering). (optional)
     * @param sort  Field by which the results should be sorted as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering). The &#x60;name&#x60; field is handled specially for tags in that, if specified as the sort field, it uses a natural sort order instead of the default lexicographical sort order. For example, it will return [&#39;1.1&#39;, &#39;1.2&#39;, &#39;1.10&#39;] instead of [&#39;1.1&#39;, &#39;1.10&#39;, &#39;1.2&#39;]. (optional)
     * @return PaginatedTags
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A paginated list of tags matching any filter criteria that were provided. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If the repository is private and the authenticated user does not have access to it.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified repository does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedTags repositoriesWorkspaceRepoSlugRefsTagsGet(String repoSlug, String workspace, String q, String sort) throws ApiException {
        ApiResponse<PaginatedTags> localVarResp = repositoriesWorkspaceRepoSlugRefsTagsGetWithHttpInfo(repoSlug, workspace, q, sort);
        return localVarResp.getData();
    }

    /**
     * List tags
     * Returns the tags in the repository.  By default, results will be in the order the underlying source control system returns them and identical to the ordering one sees when running \&quot;$ git tag --list\&quot;. Note that this follows simple lexical ordering of the ref names.  This can be undesirable as it does apply any natural sorting semantics, meaning for instance that tags are sorted [\&quot;v10\&quot;, \&quot;v11\&quot;, \&quot;v9\&quot;] instead of [\&quot;v9\&quot;, \&quot;v10\&quot;, \&quot;v11\&quot;].  Sorting can be changed using the ?sort&#x3D; query parameter. When using ?sort&#x3D;name to explicitly sort on ref name, Bitbucket will apply natural sorting and interpret numerical values as numbers instead of strings.
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @param q  Query string to narrow down the response as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering). (optional)
     * @param sort  Field by which the results should be sorted as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering). The &#x60;name&#x60; field is handled specially for tags in that, if specified as the sort field, it uses a natural sort order instead of the default lexicographical sort order. For example, it will return [&#39;1.1&#39;, &#39;1.2&#39;, &#39;1.10&#39;] instead of [&#39;1.1&#39;, &#39;1.10&#39;, &#39;1.2&#39;]. (optional)
     * @return ApiResponse&lt;PaginatedTags&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A paginated list of tags matching any filter criteria that were provided. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If the repository is private and the authenticated user does not have access to it.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified repository does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedTags> repositoriesWorkspaceRepoSlugRefsTagsGetWithHttpInfo(String repoSlug, String workspace, String q, String sort) throws ApiException {
        okhttp3.Call localVarCall = repositoriesWorkspaceRepoSlugRefsTagsGetValidateBeforeCall(repoSlug, workspace, q, sort, null);
        Type localVarReturnType = new TypeToken<PaginatedTags>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List tags (asynchronously)
     * Returns the tags in the repository.  By default, results will be in the order the underlying source control system returns them and identical to the ordering one sees when running \&quot;$ git tag --list\&quot;. Note that this follows simple lexical ordering of the ref names.  This can be undesirable as it does apply any natural sorting semantics, meaning for instance that tags are sorted [\&quot;v10\&quot;, \&quot;v11\&quot;, \&quot;v9\&quot;] instead of [\&quot;v9\&quot;, \&quot;v10\&quot;, \&quot;v11\&quot;].  Sorting can be changed using the ?sort&#x3D; query parameter. When using ?sort&#x3D;name to explicitly sort on ref name, Bitbucket will apply natural sorting and interpret numerical values as numbers instead of strings.
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @param q  Query string to narrow down the response as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering). (optional)
     * @param sort  Field by which the results should be sorted as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering). The &#x60;name&#x60; field is handled specially for tags in that, if specified as the sort field, it uses a natural sort order instead of the default lexicographical sort order. For example, it will return [&#39;1.1&#39;, &#39;1.2&#39;, &#39;1.10&#39;] instead of [&#39;1.1&#39;, &#39;1.10&#39;, &#39;1.2&#39;]. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A paginated list of tags matching any filter criteria that were provided. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If the repository is private and the authenticated user does not have access to it.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified repository does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repositoriesWorkspaceRepoSlugRefsTagsGetAsync(String repoSlug, String workspace, String q, String sort, final ApiCallback<PaginatedTags> _callback) throws ApiException {

        okhttp3.Call localVarCall = repositoriesWorkspaceRepoSlugRefsTagsGetValidateBeforeCall(repoSlug, workspace, q, sort, _callback);
        Type localVarReturnType = new TypeToken<PaginatedTags>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repositoriesWorkspaceRepoSlugRefsTagsNameDelete
     * @param name The name of the tag. (required)
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Indicates the specified tag was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If the repository is private and the authenticated user does not have access to it.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified repository or tag does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repositoriesWorkspaceRepoSlugRefsTagsNameDeleteCall(String name, String repoSlug, String workspace, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories/{workspace}/{repo_slug}/refs/tags/{name}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "repo_slug" + "}", localVarApiClient.escapeString(repoSlug.toString()))
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "oauth2", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repositoriesWorkspaceRepoSlugRefsTagsNameDeleteValidateBeforeCall(String name, String repoSlug, String workspace, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling repositoriesWorkspaceRepoSlugRefsTagsNameDelete(Async)");
        }

        // verify the required parameter 'repoSlug' is set
        if (repoSlug == null) {
            throw new ApiException("Missing the required parameter 'repoSlug' when calling repositoriesWorkspaceRepoSlugRefsTagsNameDelete(Async)");
        }

        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling repositoriesWorkspaceRepoSlugRefsTagsNameDelete(Async)");
        }

        return repositoriesWorkspaceRepoSlugRefsTagsNameDeleteCall(name, repoSlug, workspace, _callback);

    }

    /**
     * Delete a tag
     * Delete a tag in the specified repository.  The tag name should not include any prefixes (e.g. refs/tags).
     * @param name The name of the tag. (required)
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Indicates the specified tag was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If the repository is private and the authenticated user does not have access to it.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified repository or tag does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public void repositoriesWorkspaceRepoSlugRefsTagsNameDelete(String name, String repoSlug, String workspace) throws ApiException {
        repositoriesWorkspaceRepoSlugRefsTagsNameDeleteWithHttpInfo(name, repoSlug, workspace);
    }

    /**
     * Delete a tag
     * Delete a tag in the specified repository.  The tag name should not include any prefixes (e.g. refs/tags).
     * @param name The name of the tag. (required)
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Indicates the specified tag was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If the repository is private and the authenticated user does not have access to it.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified repository or tag does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> repositoriesWorkspaceRepoSlugRefsTagsNameDeleteWithHttpInfo(String name, String repoSlug, String workspace) throws ApiException {
        okhttp3.Call localVarCall = repositoriesWorkspaceRepoSlugRefsTagsNameDeleteValidateBeforeCall(name, repoSlug, workspace, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a tag (asynchronously)
     * Delete a tag in the specified repository.  The tag name should not include any prefixes (e.g. refs/tags).
     * @param name The name of the tag. (required)
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Indicates the specified tag was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If the repository is private and the authenticated user does not have access to it.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified repository or tag does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repositoriesWorkspaceRepoSlugRefsTagsNameDeleteAsync(String name, String repoSlug, String workspace, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = repositoriesWorkspaceRepoSlugRefsTagsNameDeleteValidateBeforeCall(name, repoSlug, workspace, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for repositoriesWorkspaceRepoSlugRefsTagsNameGet
     * @param name The name of the tag. (required)
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The tag object. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If the repository is private and the authenticated user does not have access to it.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified repository or tag does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repositoriesWorkspaceRepoSlugRefsTagsNameGetCall(String name, String repoSlug, String workspace, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories/{workspace}/{repo_slug}/refs/tags/{name}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "repo_slug" + "}", localVarApiClient.escapeString(repoSlug.toString()))
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "oauth2", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repositoriesWorkspaceRepoSlugRefsTagsNameGetValidateBeforeCall(String name, String repoSlug, String workspace, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling repositoriesWorkspaceRepoSlugRefsTagsNameGet(Async)");
        }

        // verify the required parameter 'repoSlug' is set
        if (repoSlug == null) {
            throw new ApiException("Missing the required parameter 'repoSlug' when calling repositoriesWorkspaceRepoSlugRefsTagsNameGet(Async)");
        }

        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling repositoriesWorkspaceRepoSlugRefsTagsNameGet(Async)");
        }

        return repositoriesWorkspaceRepoSlugRefsTagsNameGetCall(name, repoSlug, workspace, _callback);

    }

    /**
     * Get a tag
     * Returns the specified tag.  &#x60;&#x60;&#x60; $ curl -s https://api.bitbucket.org/2.0/repositories/seanfarley/hg/refs/tags/3.8 -G | jq . {   \&quot;name\&quot;: \&quot;3.8\&quot;,   \&quot;links\&quot;: {     \&quot;commits\&quot;: {       \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/seanfarley/hg/commits/3.8\&quot;     },     \&quot;self\&quot;: {       \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/seanfarley/hg/refs/tags/3.8\&quot;     },     \&quot;html\&quot;: {       \&quot;href\&quot;: \&quot;https://bitbucket.org/seanfarley/hg/commits/tag/3.8\&quot;     }   },   \&quot;tagger\&quot;: {     \&quot;raw\&quot;: \&quot;Matt Mackall &lt;mpm@selenic.com&gt;\&quot;,     \&quot;type\&quot;: \&quot;author\&quot;,     \&quot;user\&quot;: {       \&quot;username\&quot;: \&quot;mpmselenic\&quot;,       \&quot;nickname\&quot;: \&quot;mpmselenic\&quot;,       \&quot;display_name\&quot;: \&quot;Matt Mackall\&quot;,       \&quot;type\&quot;: \&quot;user\&quot;,       \&quot;uuid\&quot;: \&quot;{a4934530-db4c-419c-a478-9ab4964c2ee7}\&quot;,       \&quot;links\&quot;: {         \&quot;self\&quot;: {           \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/users/mpmselenic\&quot;         },         \&quot;html\&quot;: {           \&quot;href\&quot;: \&quot;https://bitbucket.org/mpmselenic/\&quot;         },         \&quot;avatar\&quot;: {           \&quot;href\&quot;: \&quot;https://bitbucket.org/account/mpmselenic/avatar/32/\&quot;         }       }     }   },   \&quot;date\&quot;: \&quot;2016-05-01T18:52:25+00:00\&quot;,   \&quot;message\&quot;: \&quot;Added tag 3.8 for changeset f85de28eae32\&quot;,   \&quot;type\&quot;: \&quot;tag\&quot;,   \&quot;target\&quot;: {     \&quot;hash\&quot;: \&quot;f85de28eae32e7d3064b1a1321309071bbaaa069\&quot;,     \&quot;repository\&quot;: {       \&quot;links\&quot;: {         \&quot;self\&quot;: {           \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/seanfarley/hg\&quot;         },         \&quot;html\&quot;: {           \&quot;href\&quot;: \&quot;https://bitbucket.org/seanfarley/hg\&quot;         },         \&quot;avatar\&quot;: {           \&quot;href\&quot;: \&quot;https://bitbucket.org/seanfarley/hg/avatar/32/\&quot;         }       },       \&quot;type\&quot;: \&quot;repository\&quot;,       \&quot;name\&quot;: \&quot;hg\&quot;,       \&quot;full_name\&quot;: \&quot;seanfarley/hg\&quot;,       \&quot;uuid\&quot;: \&quot;{c75687fb-e99d-4579-9087-190dbd406d30}\&quot;     },     \&quot;links\&quot;: {       \&quot;self\&quot;: {         \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/seanfarley/hg/commit/f85de28eae32e7d3064b1a1321309071bbaaa069\&quot;       },       \&quot;comments\&quot;: {         \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/seanfarley/hg/commit/f85de28eae32e7d3064b1a1321309071bbaaa069/comments\&quot;       },       \&quot;patch\&quot;: {         \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/seanfarley/hg/patch/f85de28eae32e7d3064b1a1321309071bbaaa069\&quot;       },       \&quot;html\&quot;: {         \&quot;href\&quot;: \&quot;https://bitbucket.org/seanfarley/hg/commits/f85de28eae32e7d3064b1a1321309071bbaaa069\&quot;       },       \&quot;diff\&quot;: {         \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/seanfarley/hg/diff/f85de28eae32e7d3064b1a1321309071bbaaa069\&quot;       },       \&quot;approve\&quot;: {         \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/seanfarley/hg/commit/f85de28eae32e7d3064b1a1321309071bbaaa069/approve\&quot;       },       \&quot;statuses\&quot;: {         \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/seanfarley/hg/commit/f85de28eae32e7d3064b1a1321309071bbaaa069/statuses\&quot;       }     },     \&quot;author\&quot;: {       \&quot;raw\&quot;: \&quot;Sean Farley &lt;sean@farley.io&gt;\&quot;,       \&quot;type\&quot;: \&quot;author\&quot;,       \&quot;user\&quot;: {         \&quot;username\&quot;: \&quot;seanfarley\&quot;,         \&quot;nickname\&quot;: \&quot;seanfarley\&quot;,         \&quot;display_name\&quot;: \&quot;Sean Farley\&quot;,         \&quot;type\&quot;: \&quot;user\&quot;,         \&quot;uuid\&quot;: \&quot;{a295f8a8-5876-4d43-89b5-3ad8c6c3c51d}\&quot;,         \&quot;links\&quot;: {           \&quot;self\&quot;: {             \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/users/seanfarley\&quot;           },           \&quot;html\&quot;: {             \&quot;href\&quot;: \&quot;https://bitbucket.org/seanfarley/\&quot;           },           \&quot;avatar\&quot;: {             \&quot;href\&quot;: \&quot;https://bitbucket.org/account/seanfarley/avatar/32/\&quot;           }         }       }     },     \&quot;parents\&quot;: [       {         \&quot;hash\&quot;: \&quot;9a98d0e5b07fc60887f9d3d34d9ac7d536f470d2\&quot;,         \&quot;type\&quot;: \&quot;commit\&quot;,         \&quot;links\&quot;: {           \&quot;self\&quot;: {             \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/seanfarley/hg/commit/9a98d0e5b07fc60887f9d3d34d9ac7d536f470d2\&quot;           },           \&quot;html\&quot;: {             \&quot;href\&quot;: \&quot;https://bitbucket.org/seanfarley/hg/commits/9a98d0e5b07fc60887f9d3d34d9ac7d536f470d2\&quot;           }         }       }     ],     \&quot;date\&quot;: \&quot;2016-05-01T04:21:17+00:00\&quot;,     \&quot;message\&quot;: \&quot;debian: alphabetize build deps\&quot;,     \&quot;type\&quot;: \&quot;commit\&quot;   } } &#x60;&#x60;&#x60;
     * @param name The name of the tag. (required)
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @return Tag
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The tag object. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If the repository is private and the authenticated user does not have access to it.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified repository or tag does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public Tag repositoriesWorkspaceRepoSlugRefsTagsNameGet(String name, String repoSlug, String workspace) throws ApiException {
        ApiResponse<Tag> localVarResp = repositoriesWorkspaceRepoSlugRefsTagsNameGetWithHttpInfo(name, repoSlug, workspace);
        return localVarResp.getData();
    }

    /**
     * Get a tag
     * Returns the specified tag.  &#x60;&#x60;&#x60; $ curl -s https://api.bitbucket.org/2.0/repositories/seanfarley/hg/refs/tags/3.8 -G | jq . {   \&quot;name\&quot;: \&quot;3.8\&quot;,   \&quot;links\&quot;: {     \&quot;commits\&quot;: {       \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/seanfarley/hg/commits/3.8\&quot;     },     \&quot;self\&quot;: {       \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/seanfarley/hg/refs/tags/3.8\&quot;     },     \&quot;html\&quot;: {       \&quot;href\&quot;: \&quot;https://bitbucket.org/seanfarley/hg/commits/tag/3.8\&quot;     }   },   \&quot;tagger\&quot;: {     \&quot;raw\&quot;: \&quot;Matt Mackall &lt;mpm@selenic.com&gt;\&quot;,     \&quot;type\&quot;: \&quot;author\&quot;,     \&quot;user\&quot;: {       \&quot;username\&quot;: \&quot;mpmselenic\&quot;,       \&quot;nickname\&quot;: \&quot;mpmselenic\&quot;,       \&quot;display_name\&quot;: \&quot;Matt Mackall\&quot;,       \&quot;type\&quot;: \&quot;user\&quot;,       \&quot;uuid\&quot;: \&quot;{a4934530-db4c-419c-a478-9ab4964c2ee7}\&quot;,       \&quot;links\&quot;: {         \&quot;self\&quot;: {           \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/users/mpmselenic\&quot;         },         \&quot;html\&quot;: {           \&quot;href\&quot;: \&quot;https://bitbucket.org/mpmselenic/\&quot;         },         \&quot;avatar\&quot;: {           \&quot;href\&quot;: \&quot;https://bitbucket.org/account/mpmselenic/avatar/32/\&quot;         }       }     }   },   \&quot;date\&quot;: \&quot;2016-05-01T18:52:25+00:00\&quot;,   \&quot;message\&quot;: \&quot;Added tag 3.8 for changeset f85de28eae32\&quot;,   \&quot;type\&quot;: \&quot;tag\&quot;,   \&quot;target\&quot;: {     \&quot;hash\&quot;: \&quot;f85de28eae32e7d3064b1a1321309071bbaaa069\&quot;,     \&quot;repository\&quot;: {       \&quot;links\&quot;: {         \&quot;self\&quot;: {           \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/seanfarley/hg\&quot;         },         \&quot;html\&quot;: {           \&quot;href\&quot;: \&quot;https://bitbucket.org/seanfarley/hg\&quot;         },         \&quot;avatar\&quot;: {           \&quot;href\&quot;: \&quot;https://bitbucket.org/seanfarley/hg/avatar/32/\&quot;         }       },       \&quot;type\&quot;: \&quot;repository\&quot;,       \&quot;name\&quot;: \&quot;hg\&quot;,       \&quot;full_name\&quot;: \&quot;seanfarley/hg\&quot;,       \&quot;uuid\&quot;: \&quot;{c75687fb-e99d-4579-9087-190dbd406d30}\&quot;     },     \&quot;links\&quot;: {       \&quot;self\&quot;: {         \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/seanfarley/hg/commit/f85de28eae32e7d3064b1a1321309071bbaaa069\&quot;       },       \&quot;comments\&quot;: {         \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/seanfarley/hg/commit/f85de28eae32e7d3064b1a1321309071bbaaa069/comments\&quot;       },       \&quot;patch\&quot;: {         \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/seanfarley/hg/patch/f85de28eae32e7d3064b1a1321309071bbaaa069\&quot;       },       \&quot;html\&quot;: {         \&quot;href\&quot;: \&quot;https://bitbucket.org/seanfarley/hg/commits/f85de28eae32e7d3064b1a1321309071bbaaa069\&quot;       },       \&quot;diff\&quot;: {         \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/seanfarley/hg/diff/f85de28eae32e7d3064b1a1321309071bbaaa069\&quot;       },       \&quot;approve\&quot;: {         \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/seanfarley/hg/commit/f85de28eae32e7d3064b1a1321309071bbaaa069/approve\&quot;       },       \&quot;statuses\&quot;: {         \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/seanfarley/hg/commit/f85de28eae32e7d3064b1a1321309071bbaaa069/statuses\&quot;       }     },     \&quot;author\&quot;: {       \&quot;raw\&quot;: \&quot;Sean Farley &lt;sean@farley.io&gt;\&quot;,       \&quot;type\&quot;: \&quot;author\&quot;,       \&quot;user\&quot;: {         \&quot;username\&quot;: \&quot;seanfarley\&quot;,         \&quot;nickname\&quot;: \&quot;seanfarley\&quot;,         \&quot;display_name\&quot;: \&quot;Sean Farley\&quot;,         \&quot;type\&quot;: \&quot;user\&quot;,         \&quot;uuid\&quot;: \&quot;{a295f8a8-5876-4d43-89b5-3ad8c6c3c51d}\&quot;,         \&quot;links\&quot;: {           \&quot;self\&quot;: {             \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/users/seanfarley\&quot;           },           \&quot;html\&quot;: {             \&quot;href\&quot;: \&quot;https://bitbucket.org/seanfarley/\&quot;           },           \&quot;avatar\&quot;: {             \&quot;href\&quot;: \&quot;https://bitbucket.org/account/seanfarley/avatar/32/\&quot;           }         }       }     },     \&quot;parents\&quot;: [       {         \&quot;hash\&quot;: \&quot;9a98d0e5b07fc60887f9d3d34d9ac7d536f470d2\&quot;,         \&quot;type\&quot;: \&quot;commit\&quot;,         \&quot;links\&quot;: {           \&quot;self\&quot;: {             \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/seanfarley/hg/commit/9a98d0e5b07fc60887f9d3d34d9ac7d536f470d2\&quot;           },           \&quot;html\&quot;: {             \&quot;href\&quot;: \&quot;https://bitbucket.org/seanfarley/hg/commits/9a98d0e5b07fc60887f9d3d34d9ac7d536f470d2\&quot;           }         }       }     ],     \&quot;date\&quot;: \&quot;2016-05-01T04:21:17+00:00\&quot;,     \&quot;message\&quot;: \&quot;debian: alphabetize build deps\&quot;,     \&quot;type\&quot;: \&quot;commit\&quot;   } } &#x60;&#x60;&#x60;
     * @param name The name of the tag. (required)
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @return ApiResponse&lt;Tag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The tag object. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If the repository is private and the authenticated user does not have access to it.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified repository or tag does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Tag> repositoriesWorkspaceRepoSlugRefsTagsNameGetWithHttpInfo(String name, String repoSlug, String workspace) throws ApiException {
        okhttp3.Call localVarCall = repositoriesWorkspaceRepoSlugRefsTagsNameGetValidateBeforeCall(name, repoSlug, workspace, null);
        Type localVarReturnType = new TypeToken<Tag>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a tag (asynchronously)
     * Returns the specified tag.  &#x60;&#x60;&#x60; $ curl -s https://api.bitbucket.org/2.0/repositories/seanfarley/hg/refs/tags/3.8 -G | jq . {   \&quot;name\&quot;: \&quot;3.8\&quot;,   \&quot;links\&quot;: {     \&quot;commits\&quot;: {       \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/seanfarley/hg/commits/3.8\&quot;     },     \&quot;self\&quot;: {       \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/seanfarley/hg/refs/tags/3.8\&quot;     },     \&quot;html\&quot;: {       \&quot;href\&quot;: \&quot;https://bitbucket.org/seanfarley/hg/commits/tag/3.8\&quot;     }   },   \&quot;tagger\&quot;: {     \&quot;raw\&quot;: \&quot;Matt Mackall &lt;mpm@selenic.com&gt;\&quot;,     \&quot;type\&quot;: \&quot;author\&quot;,     \&quot;user\&quot;: {       \&quot;username\&quot;: \&quot;mpmselenic\&quot;,       \&quot;nickname\&quot;: \&quot;mpmselenic\&quot;,       \&quot;display_name\&quot;: \&quot;Matt Mackall\&quot;,       \&quot;type\&quot;: \&quot;user\&quot;,       \&quot;uuid\&quot;: \&quot;{a4934530-db4c-419c-a478-9ab4964c2ee7}\&quot;,       \&quot;links\&quot;: {         \&quot;self\&quot;: {           \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/users/mpmselenic\&quot;         },         \&quot;html\&quot;: {           \&quot;href\&quot;: \&quot;https://bitbucket.org/mpmselenic/\&quot;         },         \&quot;avatar\&quot;: {           \&quot;href\&quot;: \&quot;https://bitbucket.org/account/mpmselenic/avatar/32/\&quot;         }       }     }   },   \&quot;date\&quot;: \&quot;2016-05-01T18:52:25+00:00\&quot;,   \&quot;message\&quot;: \&quot;Added tag 3.8 for changeset f85de28eae32\&quot;,   \&quot;type\&quot;: \&quot;tag\&quot;,   \&quot;target\&quot;: {     \&quot;hash\&quot;: \&quot;f85de28eae32e7d3064b1a1321309071bbaaa069\&quot;,     \&quot;repository\&quot;: {       \&quot;links\&quot;: {         \&quot;self\&quot;: {           \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/seanfarley/hg\&quot;         },         \&quot;html\&quot;: {           \&quot;href\&quot;: \&quot;https://bitbucket.org/seanfarley/hg\&quot;         },         \&quot;avatar\&quot;: {           \&quot;href\&quot;: \&quot;https://bitbucket.org/seanfarley/hg/avatar/32/\&quot;         }       },       \&quot;type\&quot;: \&quot;repository\&quot;,       \&quot;name\&quot;: \&quot;hg\&quot;,       \&quot;full_name\&quot;: \&quot;seanfarley/hg\&quot;,       \&quot;uuid\&quot;: \&quot;{c75687fb-e99d-4579-9087-190dbd406d30}\&quot;     },     \&quot;links\&quot;: {       \&quot;self\&quot;: {         \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/seanfarley/hg/commit/f85de28eae32e7d3064b1a1321309071bbaaa069\&quot;       },       \&quot;comments\&quot;: {         \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/seanfarley/hg/commit/f85de28eae32e7d3064b1a1321309071bbaaa069/comments\&quot;       },       \&quot;patch\&quot;: {         \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/seanfarley/hg/patch/f85de28eae32e7d3064b1a1321309071bbaaa069\&quot;       },       \&quot;html\&quot;: {         \&quot;href\&quot;: \&quot;https://bitbucket.org/seanfarley/hg/commits/f85de28eae32e7d3064b1a1321309071bbaaa069\&quot;       },       \&quot;diff\&quot;: {         \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/seanfarley/hg/diff/f85de28eae32e7d3064b1a1321309071bbaaa069\&quot;       },       \&quot;approve\&quot;: {         \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/seanfarley/hg/commit/f85de28eae32e7d3064b1a1321309071bbaaa069/approve\&quot;       },       \&quot;statuses\&quot;: {         \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/seanfarley/hg/commit/f85de28eae32e7d3064b1a1321309071bbaaa069/statuses\&quot;       }     },     \&quot;author\&quot;: {       \&quot;raw\&quot;: \&quot;Sean Farley &lt;sean@farley.io&gt;\&quot;,       \&quot;type\&quot;: \&quot;author\&quot;,       \&quot;user\&quot;: {         \&quot;username\&quot;: \&quot;seanfarley\&quot;,         \&quot;nickname\&quot;: \&quot;seanfarley\&quot;,         \&quot;display_name\&quot;: \&quot;Sean Farley\&quot;,         \&quot;type\&quot;: \&quot;user\&quot;,         \&quot;uuid\&quot;: \&quot;{a295f8a8-5876-4d43-89b5-3ad8c6c3c51d}\&quot;,         \&quot;links\&quot;: {           \&quot;self\&quot;: {             \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/users/seanfarley\&quot;           },           \&quot;html\&quot;: {             \&quot;href\&quot;: \&quot;https://bitbucket.org/seanfarley/\&quot;           },           \&quot;avatar\&quot;: {             \&quot;href\&quot;: \&quot;https://bitbucket.org/account/seanfarley/avatar/32/\&quot;           }         }       }     },     \&quot;parents\&quot;: [       {         \&quot;hash\&quot;: \&quot;9a98d0e5b07fc60887f9d3d34d9ac7d536f470d2\&quot;,         \&quot;type\&quot;: \&quot;commit\&quot;,         \&quot;links\&quot;: {           \&quot;self\&quot;: {             \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/seanfarley/hg/commit/9a98d0e5b07fc60887f9d3d34d9ac7d536f470d2\&quot;           },           \&quot;html\&quot;: {             \&quot;href\&quot;: \&quot;https://bitbucket.org/seanfarley/hg/commits/9a98d0e5b07fc60887f9d3d34d9ac7d536f470d2\&quot;           }         }       }     ],     \&quot;date\&quot;: \&quot;2016-05-01T04:21:17+00:00\&quot;,     \&quot;message\&quot;: \&quot;debian: alphabetize build deps\&quot;,     \&quot;type\&quot;: \&quot;commit\&quot;   } } &#x60;&#x60;&#x60;
     * @param name The name of the tag. (required)
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The tag object. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If the repository is private and the authenticated user does not have access to it.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified repository or tag does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repositoriesWorkspaceRepoSlugRefsTagsNameGetAsync(String name, String repoSlug, String workspace, final ApiCallback<Tag> _callback) throws ApiException {

        okhttp3.Call localVarCall = repositoriesWorkspaceRepoSlugRefsTagsNameGetValidateBeforeCall(name, repoSlug, workspace, _callback);
        Type localVarReturnType = new TypeToken<Tag>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repositoriesWorkspaceRepoSlugRefsTagsPost
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @param tag  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The newly created tag. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the target hash is missing, ambiguous, or invalid, or if the name is not provided. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repositoriesWorkspaceRepoSlugRefsTagsPostCall(String repoSlug, String workspace, Tag tag, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tag;

        // create path and map variables
        String localVarPath = "/repositories/{workspace}/{repo_slug}/refs/tags"
            .replace("{" + "repo_slug" + "}", localVarApiClient.escapeString(repoSlug.toString()))
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "oauth2", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repositoriesWorkspaceRepoSlugRefsTagsPostValidateBeforeCall(String repoSlug, String workspace, Tag tag, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'repoSlug' is set
        if (repoSlug == null) {
            throw new ApiException("Missing the required parameter 'repoSlug' when calling repositoriesWorkspaceRepoSlugRefsTagsPost(Async)");
        }

        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling repositoriesWorkspaceRepoSlugRefsTagsPost(Async)");
        }

        // verify the required parameter 'tag' is set
        if (tag == null) {
            throw new ApiException("Missing the required parameter 'tag' when calling repositoriesWorkspaceRepoSlugRefsTagsPost(Async)");
        }

        return repositoriesWorkspaceRepoSlugRefsTagsPostCall(repoSlug, workspace, tag, _callback);

    }

    /**
     * Create a tag
     * Creates a new tag in the specified repository.  The payload of the POST should consist of a JSON document that contains the name of the tag and the target hash.  &#x60;&#x60;&#x60; curl https://api.bitbucket.org/2.0/repositories/jdoe/myrepo/refs/tags \\ -s -u jdoe -X POST -H \&quot;Content-Type: application/json\&quot; \\ -d &#39;{     \&quot;name\&quot; : \&quot;new-tag-name\&quot;,     \&quot;target\&quot; : {         \&quot;hash\&quot; : \&quot;a1b2c3d4e5f6\&quot;,     } }&#39; &#x60;&#x60;&#x60;  This endpoint does support using short hash prefixes for the commit hash, but it may return a 400 response if the provided prefix is ambiguous. Using a full commit hash is the preferred approach.
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @param tag  (required)
     * @return Tag
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The newly created tag. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the target hash is missing, ambiguous, or invalid, or if the name is not provided. </td><td>  -  </td></tr>
     </table>
     */
    public Tag repositoriesWorkspaceRepoSlugRefsTagsPost(String repoSlug, String workspace, Tag tag) throws ApiException {
        ApiResponse<Tag> localVarResp = repositoriesWorkspaceRepoSlugRefsTagsPostWithHttpInfo(repoSlug, workspace, tag);
        return localVarResp.getData();
    }

    /**
     * Create a tag
     * Creates a new tag in the specified repository.  The payload of the POST should consist of a JSON document that contains the name of the tag and the target hash.  &#x60;&#x60;&#x60; curl https://api.bitbucket.org/2.0/repositories/jdoe/myrepo/refs/tags \\ -s -u jdoe -X POST -H \&quot;Content-Type: application/json\&quot; \\ -d &#39;{     \&quot;name\&quot; : \&quot;new-tag-name\&quot;,     \&quot;target\&quot; : {         \&quot;hash\&quot; : \&quot;a1b2c3d4e5f6\&quot;,     } }&#39; &#x60;&#x60;&#x60;  This endpoint does support using short hash prefixes for the commit hash, but it may return a 400 response if the provided prefix is ambiguous. Using a full commit hash is the preferred approach.
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @param tag  (required)
     * @return ApiResponse&lt;Tag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The newly created tag. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the target hash is missing, ambiguous, or invalid, or if the name is not provided. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Tag> repositoriesWorkspaceRepoSlugRefsTagsPostWithHttpInfo(String repoSlug, String workspace, Tag tag) throws ApiException {
        okhttp3.Call localVarCall = repositoriesWorkspaceRepoSlugRefsTagsPostValidateBeforeCall(repoSlug, workspace, tag, null);
        Type localVarReturnType = new TypeToken<Tag>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a tag (asynchronously)
     * Creates a new tag in the specified repository.  The payload of the POST should consist of a JSON document that contains the name of the tag and the target hash.  &#x60;&#x60;&#x60; curl https://api.bitbucket.org/2.0/repositories/jdoe/myrepo/refs/tags \\ -s -u jdoe -X POST -H \&quot;Content-Type: application/json\&quot; \\ -d &#39;{     \&quot;name\&quot; : \&quot;new-tag-name\&quot;,     \&quot;target\&quot; : {         \&quot;hash\&quot; : \&quot;a1b2c3d4e5f6\&quot;,     } }&#39; &#x60;&#x60;&#x60;  This endpoint does support using short hash prefixes for the commit hash, but it may return a 400 response if the provided prefix is ambiguous. Using a full commit hash is the preferred approach.
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @param tag  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The newly created tag. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the target hash is missing, ambiguous, or invalid, or if the name is not provided. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repositoriesWorkspaceRepoSlugRefsTagsPostAsync(String repoSlug, String workspace, Tag tag, final ApiCallback<Tag> _callback) throws ApiException {

        okhttp3.Call localVarCall = repositoriesWorkspaceRepoSlugRefsTagsPostValidateBeforeCall(repoSlug, workspace, tag, _callback);
        Type localVarReturnType = new TypeToken<Tag>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
