/*
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Link;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PullRequestLinks
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:00:39.758646-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PullRequestLinks {
  public static final String SERIALIZED_NAME_ACTIVITY = "activity";
  @SerializedName(SERIALIZED_NAME_ACTIVITY)
  private Link activity;

  public static final String SERIALIZED_NAME_APPROVE = "approve";
  @SerializedName(SERIALIZED_NAME_APPROVE)
  private Link approve;

  public static final String SERIALIZED_NAME_COMMENTS = "comments";
  @SerializedName(SERIALIZED_NAME_COMMENTS)
  private Link comments;

  public static final String SERIALIZED_NAME_COMMITS = "commits";
  @SerializedName(SERIALIZED_NAME_COMMITS)
  private Link commits;

  public static final String SERIALIZED_NAME_DECLINE = "decline";
  @SerializedName(SERIALIZED_NAME_DECLINE)
  private Link decline;

  public static final String SERIALIZED_NAME_DIFF = "diff";
  @SerializedName(SERIALIZED_NAME_DIFF)
  private Link diff;

  public static final String SERIALIZED_NAME_DIFFSTAT = "diffstat";
  @SerializedName(SERIALIZED_NAME_DIFFSTAT)
  private Link diffstat;

  public static final String SERIALIZED_NAME_HTML = "html";
  @SerializedName(SERIALIZED_NAME_HTML)
  private Link html;

  public static final String SERIALIZED_NAME_MERGE = "merge";
  @SerializedName(SERIALIZED_NAME_MERGE)
  private Link merge;

  public static final String SERIALIZED_NAME_SELF = "self";
  @SerializedName(SERIALIZED_NAME_SELF)
  private Link self;

  public PullRequestLinks() {
  }

  public PullRequestLinks activity(Link activity) {
    this.activity = activity;
    return this;
  }

  /**
   * Get activity
   * @return activity
   */
  @javax.annotation.Nullable
  public Link getActivity() {
    return activity;
  }

  public void setActivity(Link activity) {
    this.activity = activity;
  }


  public PullRequestLinks approve(Link approve) {
    this.approve = approve;
    return this;
  }

  /**
   * Get approve
   * @return approve
   */
  @javax.annotation.Nullable
  public Link getApprove() {
    return approve;
  }

  public void setApprove(Link approve) {
    this.approve = approve;
  }


  public PullRequestLinks comments(Link comments) {
    this.comments = comments;
    return this;
  }

  /**
   * Get comments
   * @return comments
   */
  @javax.annotation.Nullable
  public Link getComments() {
    return comments;
  }

  public void setComments(Link comments) {
    this.comments = comments;
  }


  public PullRequestLinks commits(Link commits) {
    this.commits = commits;
    return this;
  }

  /**
   * Get commits
   * @return commits
   */
  @javax.annotation.Nullable
  public Link getCommits() {
    return commits;
  }

  public void setCommits(Link commits) {
    this.commits = commits;
  }


  public PullRequestLinks decline(Link decline) {
    this.decline = decline;
    return this;
  }

  /**
   * Get decline
   * @return decline
   */
  @javax.annotation.Nullable
  public Link getDecline() {
    return decline;
  }

  public void setDecline(Link decline) {
    this.decline = decline;
  }


  public PullRequestLinks diff(Link diff) {
    this.diff = diff;
    return this;
  }

  /**
   * Get diff
   * @return diff
   */
  @javax.annotation.Nullable
  public Link getDiff() {
    return diff;
  }

  public void setDiff(Link diff) {
    this.diff = diff;
  }


  public PullRequestLinks diffstat(Link diffstat) {
    this.diffstat = diffstat;
    return this;
  }

  /**
   * Get diffstat
   * @return diffstat
   */
  @javax.annotation.Nullable
  public Link getDiffstat() {
    return diffstat;
  }

  public void setDiffstat(Link diffstat) {
    this.diffstat = diffstat;
  }


  public PullRequestLinks html(Link html) {
    this.html = html;
    return this;
  }

  /**
   * Get html
   * @return html
   */
  @javax.annotation.Nullable
  public Link getHtml() {
    return html;
  }

  public void setHtml(Link html) {
    this.html = html;
  }


  public PullRequestLinks merge(Link merge) {
    this.merge = merge;
    return this;
  }

  /**
   * Get merge
   * @return merge
   */
  @javax.annotation.Nullable
  public Link getMerge() {
    return merge;
  }

  public void setMerge(Link merge) {
    this.merge = merge;
  }


  public PullRequestLinks self(Link self) {
    this.self = self;
    return this;
  }

  /**
   * Get self
   * @return self
   */
  @javax.annotation.Nullable
  public Link getSelf() {
    return self;
  }

  public void setSelf(Link self) {
    this.self = self;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PullRequestLinks pullRequestLinks = (PullRequestLinks) o;
    return Objects.equals(this.activity, pullRequestLinks.activity) &&
        Objects.equals(this.approve, pullRequestLinks.approve) &&
        Objects.equals(this.comments, pullRequestLinks.comments) &&
        Objects.equals(this.commits, pullRequestLinks.commits) &&
        Objects.equals(this.decline, pullRequestLinks.decline) &&
        Objects.equals(this.diff, pullRequestLinks.diff) &&
        Objects.equals(this.diffstat, pullRequestLinks.diffstat) &&
        Objects.equals(this.html, pullRequestLinks.html) &&
        Objects.equals(this.merge, pullRequestLinks.merge) &&
        Objects.equals(this.self, pullRequestLinks.self);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activity, approve, comments, commits, decline, diff, diffstat, html, merge, self);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PullRequestLinks {\n");
    sb.append("    activity: ").append(toIndentedString(activity)).append("\n");
    sb.append("    approve: ").append(toIndentedString(approve)).append("\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    commits: ").append(toIndentedString(commits)).append("\n");
    sb.append("    decline: ").append(toIndentedString(decline)).append("\n");
    sb.append("    diff: ").append(toIndentedString(diff)).append("\n");
    sb.append("    diffstat: ").append(toIndentedString(diffstat)).append("\n");
    sb.append("    html: ").append(toIndentedString(html)).append("\n");
    sb.append("    merge: ").append(toIndentedString(merge)).append("\n");
    sb.append("    self: ").append(toIndentedString(self)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activity");
    openapiFields.add("approve");
    openapiFields.add("comments");
    openapiFields.add("commits");
    openapiFields.add("decline");
    openapiFields.add("diff");
    openapiFields.add("diffstat");
    openapiFields.add("html");
    openapiFields.add("merge");
    openapiFields.add("self");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PullRequestLinks
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PullRequestLinks.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PullRequestLinks is not found in the empty JSON string", PullRequestLinks.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PullRequestLinks.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PullRequestLinks` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `activity`
      if (jsonObj.get("activity") != null && !jsonObj.get("activity").isJsonNull()) {
        Link.validateJsonElement(jsonObj.get("activity"));
      }
      // validate the optional field `approve`
      if (jsonObj.get("approve") != null && !jsonObj.get("approve").isJsonNull()) {
        Link.validateJsonElement(jsonObj.get("approve"));
      }
      // validate the optional field `comments`
      if (jsonObj.get("comments") != null && !jsonObj.get("comments").isJsonNull()) {
        Link.validateJsonElement(jsonObj.get("comments"));
      }
      // validate the optional field `commits`
      if (jsonObj.get("commits") != null && !jsonObj.get("commits").isJsonNull()) {
        Link.validateJsonElement(jsonObj.get("commits"));
      }
      // validate the optional field `decline`
      if (jsonObj.get("decline") != null && !jsonObj.get("decline").isJsonNull()) {
        Link.validateJsonElement(jsonObj.get("decline"));
      }
      // validate the optional field `diff`
      if (jsonObj.get("diff") != null && !jsonObj.get("diff").isJsonNull()) {
        Link.validateJsonElement(jsonObj.get("diff"));
      }
      // validate the optional field `diffstat`
      if (jsonObj.get("diffstat") != null && !jsonObj.get("diffstat").isJsonNull()) {
        Link.validateJsonElement(jsonObj.get("diffstat"));
      }
      // validate the optional field `html`
      if (jsonObj.get("html") != null && !jsonObj.get("html").isJsonNull()) {
        Link.validateJsonElement(jsonObj.get("html"));
      }
      // validate the optional field `merge`
      if (jsonObj.get("merge") != null && !jsonObj.get("merge").isJsonNull()) {
        Link.validateJsonElement(jsonObj.get("merge"));
      }
      // validate the optional field `self`
      if (jsonObj.get("self") != null && !jsonObj.get("self").isJsonNull()) {
        Link.validateJsonElement(jsonObj.get("self"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PullRequestLinks.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PullRequestLinks' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PullRequestLinks> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PullRequestLinks.class));

       return (TypeAdapter<T>) new TypeAdapter<PullRequestLinks>() {
           @Override
           public void write(JsonWriter out, PullRequestLinks value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PullRequestLinks read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PullRequestLinks given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PullRequestLinks
   * @throws IOException if the JSON string is invalid with respect to PullRequestLinks
   */
  public static PullRequestLinks fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PullRequestLinks.class);
  }

  /**
   * Convert an instance of PullRequestLinks to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

