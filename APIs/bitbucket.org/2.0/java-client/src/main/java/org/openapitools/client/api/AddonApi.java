/*
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Error;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AddonApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AddonApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AddonApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addonDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request has succeeded. The application has been deleted for the user. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Improper authentication. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addonDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/addon";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "oauth2", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addonDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return addonDeleteCall(_callback);

    }

    /**
     * Delete an app
     * Deletes the application for the user.  This endpoint is intended to be used by Bitbucket Connect apps and only supports JWT authentication -- that is how Bitbucket identifies the particular installation of the app. Developers with applications registered in the \&quot;Develop Apps\&quot; section of Bitbucket Marketplace need not use this endpoint as updates for those applications can be sent out via the UI of that section.  &#x60;&#x60;&#x60; $ curl -X DELETE https://api.bitbucket.org/2.0/addon \\   -H \&quot;Authorization: JWT &lt;JWT Token&gt;\&quot; &#x60;&#x60;&#x60;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request has succeeded. The application has been deleted for the user. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Improper authentication. </td><td>  -  </td></tr>
     </table>
     */
    public void addonDelete() throws ApiException {
        addonDeleteWithHttpInfo();
    }

    /**
     * Delete an app
     * Deletes the application for the user.  This endpoint is intended to be used by Bitbucket Connect apps and only supports JWT authentication -- that is how Bitbucket identifies the particular installation of the app. Developers with applications registered in the \&quot;Develop Apps\&quot; section of Bitbucket Marketplace need not use this endpoint as updates for those applications can be sent out via the UI of that section.  &#x60;&#x60;&#x60; $ curl -X DELETE https://api.bitbucket.org/2.0/addon \\   -H \&quot;Authorization: JWT &lt;JWT Token&gt;\&quot; &#x60;&#x60;&#x60;
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request has succeeded. The application has been deleted for the user. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Improper authentication. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addonDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = addonDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an app (asynchronously)
     * Deletes the application for the user.  This endpoint is intended to be used by Bitbucket Connect apps and only supports JWT authentication -- that is how Bitbucket identifies the particular installation of the app. Developers with applications registered in the \&quot;Develop Apps\&quot; section of Bitbucket Marketplace need not use this endpoint as updates for those applications can be sent out via the UI of that section.  &#x60;&#x60;&#x60; $ curl -X DELETE https://api.bitbucket.org/2.0/addon \\   -H \&quot;Authorization: JWT &lt;JWT Token&gt;\&quot; &#x60;&#x60;&#x60;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request has succeeded. The application has been deleted for the user. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Improper authentication. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addonDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addonDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for addonLinkersGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication must use app JWT </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addonLinkersGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/addon/linkers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "oauth2", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addonLinkersGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return addonLinkersGetCall(_callback);

    }

    /**
     * List linkers for an app
     * Gets a list of all [linkers](/cloud/bitbucket/modules/linker/) for the authenticated application.
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication must use app JWT </td><td>  -  </td></tr>
     </table>
     */
    public void addonLinkersGet() throws ApiException {
        addonLinkersGetWithHttpInfo();
    }

    /**
     * List linkers for an app
     * Gets a list of all [linkers](/cloud/bitbucket/modules/linker/) for the authenticated application.
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication must use app JWT </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addonLinkersGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = addonLinkersGetValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * List linkers for an app (asynchronously)
     * Gets a list of all [linkers](/cloud/bitbucket/modules/linker/) for the authenticated application.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication must use app JWT </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addonLinkersGetAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addonLinkersGetValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for addonLinkersLinkerKeyGet
     * @param linkerKey The unique key of a [linker module](/cloud/bitbucket/modules/linker/) as defined in an application descriptor. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication must use app JWT </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The linker does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addonLinkersLinkerKeyGetCall(String linkerKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/addon/linkers/{linker_key}"
            .replace("{" + "linker_key" + "}", localVarApiClient.escapeString(linkerKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "oauth2", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addonLinkersLinkerKeyGetValidateBeforeCall(String linkerKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'linkerKey' is set
        if (linkerKey == null) {
            throw new ApiException("Missing the required parameter 'linkerKey' when calling addonLinkersLinkerKeyGet(Async)");
        }

        return addonLinkersLinkerKeyGetCall(linkerKey, _callback);

    }

    /**
     * Get a linker for an app
     * Gets a [linker](/cloud/bitbucket/modules/linker/) specified by &#x60;linker_key&#x60; for the authenticated application.
     * @param linkerKey The unique key of a [linker module](/cloud/bitbucket/modules/linker/) as defined in an application descriptor. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication must use app JWT </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The linker does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public void addonLinkersLinkerKeyGet(String linkerKey) throws ApiException {
        addonLinkersLinkerKeyGetWithHttpInfo(linkerKey);
    }

    /**
     * Get a linker for an app
     * Gets a [linker](/cloud/bitbucket/modules/linker/) specified by &#x60;linker_key&#x60; for the authenticated application.
     * @param linkerKey The unique key of a [linker module](/cloud/bitbucket/modules/linker/) as defined in an application descriptor. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication must use app JWT </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The linker does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addonLinkersLinkerKeyGetWithHttpInfo(String linkerKey) throws ApiException {
        okhttp3.Call localVarCall = addonLinkersLinkerKeyGetValidateBeforeCall(linkerKey, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get a linker for an app (asynchronously)
     * Gets a [linker](/cloud/bitbucket/modules/linker/) specified by &#x60;linker_key&#x60; for the authenticated application.
     * @param linkerKey The unique key of a [linker module](/cloud/bitbucket/modules/linker/) as defined in an application descriptor. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication must use app JWT </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The linker does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addonLinkersLinkerKeyGetAsync(String linkerKey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addonLinkersLinkerKeyGetValidateBeforeCall(linkerKey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for addonLinkersLinkerKeyValuesDelete
     * @param linkerKey The unique key of a [linker module](/cloud/bitbucket/modules/linker/) as defined in an application descriptor. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully deleted the linker values. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication must use app JWT </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The linker does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addonLinkersLinkerKeyValuesDeleteCall(String linkerKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/addon/linkers/{linker_key}/values"
            .replace("{" + "linker_key" + "}", localVarApiClient.escapeString(linkerKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "oauth2", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addonLinkersLinkerKeyValuesDeleteValidateBeforeCall(String linkerKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'linkerKey' is set
        if (linkerKey == null) {
            throw new ApiException("Missing the required parameter 'linkerKey' when calling addonLinkersLinkerKeyValuesDelete(Async)");
        }

        return addonLinkersLinkerKeyValuesDeleteCall(linkerKey, _callback);

    }

    /**
     * Delete all linker values
     * Delete all [linker](/cloud/bitbucket/modules/linker/) values for the specified linker of the authenticated application.
     * @param linkerKey The unique key of a [linker module](/cloud/bitbucket/modules/linker/) as defined in an application descriptor. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully deleted the linker values. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication must use app JWT </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The linker does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public void addonLinkersLinkerKeyValuesDelete(String linkerKey) throws ApiException {
        addonLinkersLinkerKeyValuesDeleteWithHttpInfo(linkerKey);
    }

    /**
     * Delete all linker values
     * Delete all [linker](/cloud/bitbucket/modules/linker/) values for the specified linker of the authenticated application.
     * @param linkerKey The unique key of a [linker module](/cloud/bitbucket/modules/linker/) as defined in an application descriptor. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully deleted the linker values. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication must use app JWT </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The linker does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addonLinkersLinkerKeyValuesDeleteWithHttpInfo(String linkerKey) throws ApiException {
        okhttp3.Call localVarCall = addonLinkersLinkerKeyValuesDeleteValidateBeforeCall(linkerKey, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete all linker values (asynchronously)
     * Delete all [linker](/cloud/bitbucket/modules/linker/) values for the specified linker of the authenticated application.
     * @param linkerKey The unique key of a [linker module](/cloud/bitbucket/modules/linker/) as defined in an application descriptor. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully deleted the linker values. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication must use app JWT </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The linker does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addonLinkersLinkerKeyValuesDeleteAsync(String linkerKey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addonLinkersLinkerKeyValuesDeleteValidateBeforeCall(linkerKey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for addonLinkersLinkerKeyValuesGet
     * @param linkerKey The unique key of a [linker module](/cloud/bitbucket/modules/linker/) as defined in an application descriptor. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication must use app JWT </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The linker does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addonLinkersLinkerKeyValuesGetCall(String linkerKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/addon/linkers/{linker_key}/values"
            .replace("{" + "linker_key" + "}", localVarApiClient.escapeString(linkerKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "oauth2", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addonLinkersLinkerKeyValuesGetValidateBeforeCall(String linkerKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'linkerKey' is set
        if (linkerKey == null) {
            throw new ApiException("Missing the required parameter 'linkerKey' when calling addonLinkersLinkerKeyValuesGet(Async)");
        }

        return addonLinkersLinkerKeyValuesGetCall(linkerKey, _callback);

    }

    /**
     * List linker values for a linker
     * Gets a list of all [linker](/cloud/bitbucket/modules/linker/) values for the specified linker of the authenticated application.  A linker value lets applications supply values to modify its regular expression.  The base regular expression must use a Bitbucket-specific match group &#x60;(?K)&#x60; which will be translated to &#x60;([\\w\\-]+)&#x60;. A value must match this pattern.  [Read more about linker values](/cloud/bitbucket/modules/linker/#usingthebitbucketapitosupplyvalues)
     * @param linkerKey The unique key of a [linker module](/cloud/bitbucket/modules/linker/) as defined in an application descriptor. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication must use app JWT </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The linker does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public void addonLinkersLinkerKeyValuesGet(String linkerKey) throws ApiException {
        addonLinkersLinkerKeyValuesGetWithHttpInfo(linkerKey);
    }

    /**
     * List linker values for a linker
     * Gets a list of all [linker](/cloud/bitbucket/modules/linker/) values for the specified linker of the authenticated application.  A linker value lets applications supply values to modify its regular expression.  The base regular expression must use a Bitbucket-specific match group &#x60;(?K)&#x60; which will be translated to &#x60;([\\w\\-]+)&#x60;. A value must match this pattern.  [Read more about linker values](/cloud/bitbucket/modules/linker/#usingthebitbucketapitosupplyvalues)
     * @param linkerKey The unique key of a [linker module](/cloud/bitbucket/modules/linker/) as defined in an application descriptor. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication must use app JWT </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The linker does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addonLinkersLinkerKeyValuesGetWithHttpInfo(String linkerKey) throws ApiException {
        okhttp3.Call localVarCall = addonLinkersLinkerKeyValuesGetValidateBeforeCall(linkerKey, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * List linker values for a linker (asynchronously)
     * Gets a list of all [linker](/cloud/bitbucket/modules/linker/) values for the specified linker of the authenticated application.  A linker value lets applications supply values to modify its regular expression.  The base regular expression must use a Bitbucket-specific match group &#x60;(?K)&#x60; which will be translated to &#x60;([\\w\\-]+)&#x60;. A value must match this pattern.  [Read more about linker values](/cloud/bitbucket/modules/linker/#usingthebitbucketapitosupplyvalues)
     * @param linkerKey The unique key of a [linker module](/cloud/bitbucket/modules/linker/) as defined in an application descriptor. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication must use app JWT </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The linker does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addonLinkersLinkerKeyValuesGetAsync(String linkerKey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addonLinkersLinkerKeyValuesGetValidateBeforeCall(linkerKey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for addonLinkersLinkerKeyValuesPost
     * @param linkerKey The unique key of a [linker module](/cloud/bitbucket/modules/linker/) as defined in an application descriptor. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created the linker value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication must use app JWT </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The linker does not exist. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The linker already has the value being added. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addonLinkersLinkerKeyValuesPostCall(String linkerKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/addon/linkers/{linker_key}/values"
            .replace("{" + "linker_key" + "}", localVarApiClient.escapeString(linkerKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "oauth2", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addonLinkersLinkerKeyValuesPostValidateBeforeCall(String linkerKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'linkerKey' is set
        if (linkerKey == null) {
            throw new ApiException("Missing the required parameter 'linkerKey' when calling addonLinkersLinkerKeyValuesPost(Async)");
        }

        return addonLinkersLinkerKeyValuesPostCall(linkerKey, _callback);

    }

    /**
     * Create a linker value
     * Creates a [linker](/cloud/bitbucket/modules/linker/) value for the specified linker of authenticated application.  A linker value lets applications supply values to modify its regular expression.  The base regular expression must use a Bitbucket-specific match group &#x60;(?K)&#x60; which will be translated to &#x60;([\\w\\-]+)&#x60;. A value must match this pattern.  [Read more about linker values](/cloud/bitbucket/modules/linker/#usingthebitbucketapitosupplyvalues)
     * @param linkerKey The unique key of a [linker module](/cloud/bitbucket/modules/linker/) as defined in an application descriptor. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created the linker value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication must use app JWT </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The linker does not exist. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The linker already has the value being added. </td><td>  -  </td></tr>
     </table>
     */
    public void addonLinkersLinkerKeyValuesPost(String linkerKey) throws ApiException {
        addonLinkersLinkerKeyValuesPostWithHttpInfo(linkerKey);
    }

    /**
     * Create a linker value
     * Creates a [linker](/cloud/bitbucket/modules/linker/) value for the specified linker of authenticated application.  A linker value lets applications supply values to modify its regular expression.  The base regular expression must use a Bitbucket-specific match group &#x60;(?K)&#x60; which will be translated to &#x60;([\\w\\-]+)&#x60;. A value must match this pattern.  [Read more about linker values](/cloud/bitbucket/modules/linker/#usingthebitbucketapitosupplyvalues)
     * @param linkerKey The unique key of a [linker module](/cloud/bitbucket/modules/linker/) as defined in an application descriptor. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created the linker value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication must use app JWT </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The linker does not exist. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The linker already has the value being added. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addonLinkersLinkerKeyValuesPostWithHttpInfo(String linkerKey) throws ApiException {
        okhttp3.Call localVarCall = addonLinkersLinkerKeyValuesPostValidateBeforeCall(linkerKey, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a linker value (asynchronously)
     * Creates a [linker](/cloud/bitbucket/modules/linker/) value for the specified linker of authenticated application.  A linker value lets applications supply values to modify its regular expression.  The base regular expression must use a Bitbucket-specific match group &#x60;(?K)&#x60; which will be translated to &#x60;([\\w\\-]+)&#x60;. A value must match this pattern.  [Read more about linker values](/cloud/bitbucket/modules/linker/#usingthebitbucketapitosupplyvalues)
     * @param linkerKey The unique key of a [linker module](/cloud/bitbucket/modules/linker/) as defined in an application descriptor. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created the linker value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication must use app JWT </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The linker does not exist. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The linker already has the value being added. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addonLinkersLinkerKeyValuesPostAsync(String linkerKey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addonLinkersLinkerKeyValuesPostValidateBeforeCall(linkerKey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for addonLinkersLinkerKeyValuesPut
     * @param linkerKey The unique key of a [linker module](/cloud/bitbucket/modules/linker/) as defined in an application descriptor. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully updated the linker values. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication must use app JWT </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The linker does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addonLinkersLinkerKeyValuesPutCall(String linkerKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/addon/linkers/{linker_key}/values"
            .replace("{" + "linker_key" + "}", localVarApiClient.escapeString(linkerKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "oauth2", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addonLinkersLinkerKeyValuesPutValidateBeforeCall(String linkerKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'linkerKey' is set
        if (linkerKey == null) {
            throw new ApiException("Missing the required parameter 'linkerKey' when calling addonLinkersLinkerKeyValuesPut(Async)");
        }

        return addonLinkersLinkerKeyValuesPutCall(linkerKey, _callback);

    }

    /**
     * Update a linker value
     * Bulk update [linker](/cloud/bitbucket/modules/linker/) values for the specified linker of the authenticated application.  A linker value lets applications supply values to modify its regular expression.  The base regular expression must use a Bitbucket-specific match group &#x60;(?K)&#x60; which will be translated to &#x60;([\\w\\-]+)&#x60;. A value must match this pattern.  [Read more about linker values](/cloud/bitbucket/modules/linker/#usingthebitbucketapitosupplyvalues)
     * @param linkerKey The unique key of a [linker module](/cloud/bitbucket/modules/linker/) as defined in an application descriptor. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully updated the linker values. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication must use app JWT </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The linker does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public void addonLinkersLinkerKeyValuesPut(String linkerKey) throws ApiException {
        addonLinkersLinkerKeyValuesPutWithHttpInfo(linkerKey);
    }

    /**
     * Update a linker value
     * Bulk update [linker](/cloud/bitbucket/modules/linker/) values for the specified linker of the authenticated application.  A linker value lets applications supply values to modify its regular expression.  The base regular expression must use a Bitbucket-specific match group &#x60;(?K)&#x60; which will be translated to &#x60;([\\w\\-]+)&#x60;. A value must match this pattern.  [Read more about linker values](/cloud/bitbucket/modules/linker/#usingthebitbucketapitosupplyvalues)
     * @param linkerKey The unique key of a [linker module](/cloud/bitbucket/modules/linker/) as defined in an application descriptor. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully updated the linker values. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication must use app JWT </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The linker does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addonLinkersLinkerKeyValuesPutWithHttpInfo(String linkerKey) throws ApiException {
        okhttp3.Call localVarCall = addonLinkersLinkerKeyValuesPutValidateBeforeCall(linkerKey, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update a linker value (asynchronously)
     * Bulk update [linker](/cloud/bitbucket/modules/linker/) values for the specified linker of the authenticated application.  A linker value lets applications supply values to modify its regular expression.  The base regular expression must use a Bitbucket-specific match group &#x60;(?K)&#x60; which will be translated to &#x60;([\\w\\-]+)&#x60;. A value must match this pattern.  [Read more about linker values](/cloud/bitbucket/modules/linker/#usingthebitbucketapitosupplyvalues)
     * @param linkerKey The unique key of a [linker module](/cloud/bitbucket/modules/linker/) as defined in an application descriptor. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully updated the linker values. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication must use app JWT </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The linker does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addonLinkersLinkerKeyValuesPutAsync(String linkerKey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addonLinkersLinkerKeyValuesPutValidateBeforeCall(linkerKey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for addonLinkersLinkerKeyValuesValueIdDelete
     * @param linkerKey The unique key of a [linker module](/cloud/bitbucket/modules/linker/) as defined in an application descriptor. (required)
     * @param valueId The numeric ID of the linker value. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully deleted the linker value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication must use app JWT </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The linker value does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addonLinkersLinkerKeyValuesValueIdDeleteCall(String linkerKey, Integer valueId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/addon/linkers/{linker_key}/values/{value_id}"
            .replace("{" + "linker_key" + "}", localVarApiClient.escapeString(linkerKey.toString()))
            .replace("{" + "value_id" + "}", localVarApiClient.escapeString(valueId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "oauth2", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addonLinkersLinkerKeyValuesValueIdDeleteValidateBeforeCall(String linkerKey, Integer valueId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'linkerKey' is set
        if (linkerKey == null) {
            throw new ApiException("Missing the required parameter 'linkerKey' when calling addonLinkersLinkerKeyValuesValueIdDelete(Async)");
        }

        // verify the required parameter 'valueId' is set
        if (valueId == null) {
            throw new ApiException("Missing the required parameter 'valueId' when calling addonLinkersLinkerKeyValuesValueIdDelete(Async)");
        }

        return addonLinkersLinkerKeyValuesValueIdDeleteCall(linkerKey, valueId, _callback);

    }

    /**
     * Delete a linker value
     * Delete a single [linker](/cloud/bitbucket/modules/linker/) value of the authenticated application.
     * @param linkerKey The unique key of a [linker module](/cloud/bitbucket/modules/linker/) as defined in an application descriptor. (required)
     * @param valueId The numeric ID of the linker value. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully deleted the linker value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication must use app JWT </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The linker value does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public void addonLinkersLinkerKeyValuesValueIdDelete(String linkerKey, Integer valueId) throws ApiException {
        addonLinkersLinkerKeyValuesValueIdDeleteWithHttpInfo(linkerKey, valueId);
    }

    /**
     * Delete a linker value
     * Delete a single [linker](/cloud/bitbucket/modules/linker/) value of the authenticated application.
     * @param linkerKey The unique key of a [linker module](/cloud/bitbucket/modules/linker/) as defined in an application descriptor. (required)
     * @param valueId The numeric ID of the linker value. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully deleted the linker value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication must use app JWT </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The linker value does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addonLinkersLinkerKeyValuesValueIdDeleteWithHttpInfo(String linkerKey, Integer valueId) throws ApiException {
        okhttp3.Call localVarCall = addonLinkersLinkerKeyValuesValueIdDeleteValidateBeforeCall(linkerKey, valueId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a linker value (asynchronously)
     * Delete a single [linker](/cloud/bitbucket/modules/linker/) value of the authenticated application.
     * @param linkerKey The unique key of a [linker module](/cloud/bitbucket/modules/linker/) as defined in an application descriptor. (required)
     * @param valueId The numeric ID of the linker value. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully deleted the linker value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication must use app JWT </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The linker value does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addonLinkersLinkerKeyValuesValueIdDeleteAsync(String linkerKey, Integer valueId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addonLinkersLinkerKeyValuesValueIdDeleteValidateBeforeCall(linkerKey, valueId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for addonLinkersLinkerKeyValuesValueIdGet
     * @param linkerKey The unique key of a [linker module](/cloud/bitbucket/modules/linker/) as defined in an application descriptor. (required)
     * @param valueId The numeric ID of the linker value. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication must use app JWT </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The linker value does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addonLinkersLinkerKeyValuesValueIdGetCall(String linkerKey, Integer valueId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/addon/linkers/{linker_key}/values/{value_id}"
            .replace("{" + "linker_key" + "}", localVarApiClient.escapeString(linkerKey.toString()))
            .replace("{" + "value_id" + "}", localVarApiClient.escapeString(valueId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "oauth2", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addonLinkersLinkerKeyValuesValueIdGetValidateBeforeCall(String linkerKey, Integer valueId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'linkerKey' is set
        if (linkerKey == null) {
            throw new ApiException("Missing the required parameter 'linkerKey' when calling addonLinkersLinkerKeyValuesValueIdGet(Async)");
        }

        // verify the required parameter 'valueId' is set
        if (valueId == null) {
            throw new ApiException("Missing the required parameter 'valueId' when calling addonLinkersLinkerKeyValuesValueIdGet(Async)");
        }

        return addonLinkersLinkerKeyValuesValueIdGetCall(linkerKey, valueId, _callback);

    }

    /**
     * Get a linker value
     * Get a single [linker](/cloud/bitbucket/modules/linker/) value of the authenticated application.
     * @param linkerKey The unique key of a [linker module](/cloud/bitbucket/modules/linker/) as defined in an application descriptor. (required)
     * @param valueId The numeric ID of the linker value. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication must use app JWT </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The linker value does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public void addonLinkersLinkerKeyValuesValueIdGet(String linkerKey, Integer valueId) throws ApiException {
        addonLinkersLinkerKeyValuesValueIdGetWithHttpInfo(linkerKey, valueId);
    }

    /**
     * Get a linker value
     * Get a single [linker](/cloud/bitbucket/modules/linker/) value of the authenticated application.
     * @param linkerKey The unique key of a [linker module](/cloud/bitbucket/modules/linker/) as defined in an application descriptor. (required)
     * @param valueId The numeric ID of the linker value. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication must use app JWT </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The linker value does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addonLinkersLinkerKeyValuesValueIdGetWithHttpInfo(String linkerKey, Integer valueId) throws ApiException {
        okhttp3.Call localVarCall = addonLinkersLinkerKeyValuesValueIdGetValidateBeforeCall(linkerKey, valueId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get a linker value (asynchronously)
     * Get a single [linker](/cloud/bitbucket/modules/linker/) value of the authenticated application.
     * @param linkerKey The unique key of a [linker module](/cloud/bitbucket/modules/linker/) as defined in an application descriptor. (required)
     * @param valueId The numeric ID of the linker value. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication must use app JWT </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The linker value does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addonLinkersLinkerKeyValuesValueIdGetAsync(String linkerKey, Integer valueId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addonLinkersLinkerKeyValuesValueIdGetValidateBeforeCall(linkerKey, valueId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for addonPut
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request has succeeded. The installation has been updated to the new descriptor. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Scopes have increased or decreased to none. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Improper authentication. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addonPutCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/addon";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "oauth2", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addonPutValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return addonPutCall(_callback);

    }

    /**
     * Update an installed app
     * Updates the application installation for the user.  This endpoint is intended to be used by Bitbucket Connect apps and only supports JWT authentication -- that is how Bitbucket identifies the particular installation of the app. Developers with applications registered in the \&quot;Develop Apps\&quot; section of Bitbucket need not use this endpoint as updates for those applications can be sent out via the UI of that section.  Passing an empty body will update the installation using the existing descriptor URL.  &#x60;&#x60;&#x60; $ curl -X PUT https://api.bitbucket.org/2.0/addon \\   -H \&quot;Authorization: JWT &lt;JWT Token&gt;\&quot; \\   --header \&quot;Content-Type: application/json\&quot; \\   --data &#39;{}&#39; &#x60;&#x60;&#x60;  The new &#x60;descriptor&#x60; for the installation can be also provided in the body directly.  &#x60;&#x60;&#x60; $ curl -X PUT https://api.bitbucket.org/2.0/addon \\   -H \&quot;Authorization: JWT &lt;JWT Token&gt;\&quot; \\   --header \&quot;Content-Type: application/json\&quot; \\   --data &#39;{\&quot;descriptor\&quot;: $NEW_DESCRIPTOR}&#39; &#x60;&#x60;&#x60;  In both these modes the URL of the descriptor cannot be changed. To change the descriptor location and upgrade an installation the request must be made exclusively with a &#x60;descriptor_url&#x60;.   &#x60;&#x60;&#x60; $ curl -X PUT https://api.bitbucket.org/2.0/addon \\   -H \&quot;Authorization: JWT &lt;JWT Token&gt;\&quot; \\   --header \&quot;Content-Type: application/json\&quot; \\   --data &#39;{\&quot;descriptor_url\&quot;: $NEW_URL}&#39; &#x60;&#x60;&#x60;  The &#x60;descriptor_url&#x60; must exactly match the marketplace registration that Atlassian has for the application. Contact your Atlassian developer advocate to update this registration. Once the registration has been updated you may call this resource for each installation.  Note that the scopes of the application cannot be increased in the new descriptor nor reduced to none.
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request has succeeded. The installation has been updated to the new descriptor. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Scopes have increased or decreased to none. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Improper authentication. </td><td>  -  </td></tr>
     </table>
     */
    public void addonPut() throws ApiException {
        addonPutWithHttpInfo();
    }

    /**
     * Update an installed app
     * Updates the application installation for the user.  This endpoint is intended to be used by Bitbucket Connect apps and only supports JWT authentication -- that is how Bitbucket identifies the particular installation of the app. Developers with applications registered in the \&quot;Develop Apps\&quot; section of Bitbucket need not use this endpoint as updates for those applications can be sent out via the UI of that section.  Passing an empty body will update the installation using the existing descriptor URL.  &#x60;&#x60;&#x60; $ curl -X PUT https://api.bitbucket.org/2.0/addon \\   -H \&quot;Authorization: JWT &lt;JWT Token&gt;\&quot; \\   --header \&quot;Content-Type: application/json\&quot; \\   --data &#39;{}&#39; &#x60;&#x60;&#x60;  The new &#x60;descriptor&#x60; for the installation can be also provided in the body directly.  &#x60;&#x60;&#x60; $ curl -X PUT https://api.bitbucket.org/2.0/addon \\   -H \&quot;Authorization: JWT &lt;JWT Token&gt;\&quot; \\   --header \&quot;Content-Type: application/json\&quot; \\   --data &#39;{\&quot;descriptor\&quot;: $NEW_DESCRIPTOR}&#39; &#x60;&#x60;&#x60;  In both these modes the URL of the descriptor cannot be changed. To change the descriptor location and upgrade an installation the request must be made exclusively with a &#x60;descriptor_url&#x60;.   &#x60;&#x60;&#x60; $ curl -X PUT https://api.bitbucket.org/2.0/addon \\   -H \&quot;Authorization: JWT &lt;JWT Token&gt;\&quot; \\   --header \&quot;Content-Type: application/json\&quot; \\   --data &#39;{\&quot;descriptor_url\&quot;: $NEW_URL}&#39; &#x60;&#x60;&#x60;  The &#x60;descriptor_url&#x60; must exactly match the marketplace registration that Atlassian has for the application. Contact your Atlassian developer advocate to update this registration. Once the registration has been updated you may call this resource for each installation.  Note that the scopes of the application cannot be increased in the new descriptor nor reduced to none.
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request has succeeded. The installation has been updated to the new descriptor. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Scopes have increased or decreased to none. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Improper authentication. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addonPutWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = addonPutValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update an installed app (asynchronously)
     * Updates the application installation for the user.  This endpoint is intended to be used by Bitbucket Connect apps and only supports JWT authentication -- that is how Bitbucket identifies the particular installation of the app. Developers with applications registered in the \&quot;Develop Apps\&quot; section of Bitbucket need not use this endpoint as updates for those applications can be sent out via the UI of that section.  Passing an empty body will update the installation using the existing descriptor URL.  &#x60;&#x60;&#x60; $ curl -X PUT https://api.bitbucket.org/2.0/addon \\   -H \&quot;Authorization: JWT &lt;JWT Token&gt;\&quot; \\   --header \&quot;Content-Type: application/json\&quot; \\   --data &#39;{}&#39; &#x60;&#x60;&#x60;  The new &#x60;descriptor&#x60; for the installation can be also provided in the body directly.  &#x60;&#x60;&#x60; $ curl -X PUT https://api.bitbucket.org/2.0/addon \\   -H \&quot;Authorization: JWT &lt;JWT Token&gt;\&quot; \\   --header \&quot;Content-Type: application/json\&quot; \\   --data &#39;{\&quot;descriptor\&quot;: $NEW_DESCRIPTOR}&#39; &#x60;&#x60;&#x60;  In both these modes the URL of the descriptor cannot be changed. To change the descriptor location and upgrade an installation the request must be made exclusively with a &#x60;descriptor_url&#x60;.   &#x60;&#x60;&#x60; $ curl -X PUT https://api.bitbucket.org/2.0/addon \\   -H \&quot;Authorization: JWT &lt;JWT Token&gt;\&quot; \\   --header \&quot;Content-Type: application/json\&quot; \\   --data &#39;{\&quot;descriptor_url\&quot;: $NEW_URL}&#39; &#x60;&#x60;&#x60;  The &#x60;descriptor_url&#x60; must exactly match the marketplace registration that Atlassian has for the application. Contact your Atlassian developer advocate to update this registration. Once the registration has been updated you may call this resource for each installation.  Note that the scopes of the application cannot be increased in the new descriptor nor reduced to none.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Request has succeeded. The installation has been updated to the new descriptor. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Scopes have increased or decreased to none. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> No authorization. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Improper authentication. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addonPutAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addonPutValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
