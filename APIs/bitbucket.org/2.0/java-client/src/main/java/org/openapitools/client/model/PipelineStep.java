/*
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ModelObject;
import org.openapitools.client.model.PipelineCommand;
import org.openapitools.client.model.PipelineImage;
import org.openapitools.client.model.PipelineStepState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PipelineStep
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:00:39.758646-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PipelineStep extends ModelObject {
  public static final String SERIALIZED_NAME_COMPLETED_ON = "completed_on";
  @SerializedName(SERIALIZED_NAME_COMPLETED_ON)
  private OffsetDateTime completedOn;

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private PipelineImage image;

  public static final String SERIALIZED_NAME_SCRIPT_COMMANDS = "script_commands";
  @SerializedName(SERIALIZED_NAME_SCRIPT_COMMANDS)
  private List<PipelineCommand> scriptCommands = new ArrayList<>();

  public static final String SERIALIZED_NAME_SETUP_COMMANDS = "setup_commands";
  @SerializedName(SERIALIZED_NAME_SETUP_COMMANDS)
  private List<PipelineCommand> setupCommands = new ArrayList<>();

  public static final String SERIALIZED_NAME_STARTED_ON = "started_on";
  @SerializedName(SERIALIZED_NAME_STARTED_ON)
  private OffsetDateTime startedOn;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private PipelineStepState state;

  public static final String SERIALIZED_NAME_UUID = "uuid";
  @SerializedName(SERIALIZED_NAME_UUID)
  private String uuid;

  public PipelineStep() {
    this.type = this.getClass().getSimpleName();
  }

  public PipelineStep completedOn(OffsetDateTime completedOn) {
    this.completedOn = completedOn;
    return this;
  }

  /**
   * The timestamp when the step execution was completed. This is not set if the step is still in progress.
   * @return completedOn
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCompletedOn() {
    return completedOn;
  }

  public void setCompletedOn(OffsetDateTime completedOn) {
    this.completedOn = completedOn;
  }


  public PipelineStep image(PipelineImage image) {
    this.image = image;
    return this;
  }

  /**
   * Get image
   * @return image
   */
  @javax.annotation.Nullable
  public PipelineImage getImage() {
    return image;
  }

  public void setImage(PipelineImage image) {
    this.image = image;
  }


  public PipelineStep scriptCommands(List<PipelineCommand> scriptCommands) {
    this.scriptCommands = scriptCommands;
    return this;
  }

  public PipelineStep addScriptCommandsItem(PipelineCommand scriptCommandsItem) {
    if (this.scriptCommands == null) {
      this.scriptCommands = new ArrayList<>();
    }
    this.scriptCommands.add(scriptCommandsItem);
    return this;
  }

  /**
   * The list of build commands. These commands are executed in the build container.
   * @return scriptCommands
   */
  @javax.annotation.Nullable
  public List<PipelineCommand> getScriptCommands() {
    return scriptCommands;
  }

  public void setScriptCommands(List<PipelineCommand> scriptCommands) {
    this.scriptCommands = scriptCommands;
  }


  public PipelineStep setupCommands(List<PipelineCommand> setupCommands) {
    this.setupCommands = setupCommands;
    return this;
  }

  public PipelineStep addSetupCommandsItem(PipelineCommand setupCommandsItem) {
    if (this.setupCommands == null) {
      this.setupCommands = new ArrayList<>();
    }
    this.setupCommands.add(setupCommandsItem);
    return this;
  }

  /**
   * The list of commands that are executed as part of the setup phase of the build. These commands are executed outside the build container.
   * @return setupCommands
   */
  @javax.annotation.Nullable
  public List<PipelineCommand> getSetupCommands() {
    return setupCommands;
  }

  public void setSetupCommands(List<PipelineCommand> setupCommands) {
    this.setupCommands = setupCommands;
  }


  public PipelineStep startedOn(OffsetDateTime startedOn) {
    this.startedOn = startedOn;
    return this;
  }

  /**
   * The timestamp when the step execution was started. This is not set when the step hasn&#39;t executed yet.
   * @return startedOn
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartedOn() {
    return startedOn;
  }

  public void setStartedOn(OffsetDateTime startedOn) {
    this.startedOn = startedOn;
  }


  public PipelineStep state(PipelineStepState state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public PipelineStepState getState() {
    return state;
  }

  public void setState(PipelineStepState state) {
    this.state = state;
  }


  public PipelineStep uuid(String uuid) {
    this.uuid = uuid;
    return this;
  }

  /**
   * The UUID identifying the step.
   * @return uuid
   */
  @javax.annotation.Nullable
  public String getUuid() {
    return uuid;
  }

  public void setUuid(String uuid) {
    this.uuid = uuid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PipelineStep pipelineStep = (PipelineStep) o;
    return Objects.equals(this.completedOn, pipelineStep.completedOn) &&
        Objects.equals(this.image, pipelineStep.image) &&
        Objects.equals(this.scriptCommands, pipelineStep.scriptCommands) &&
        Objects.equals(this.setupCommands, pipelineStep.setupCommands) &&
        Objects.equals(this.startedOn, pipelineStep.startedOn) &&
        Objects.equals(this.state, pipelineStep.state) &&
        Objects.equals(this.uuid, pipelineStep.uuid) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(completedOn, image, scriptCommands, setupCommands, startedOn, state, uuid, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PipelineStep {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    completedOn: ").append(toIndentedString(completedOn)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    scriptCommands: ").append(toIndentedString(scriptCommands)).append("\n");
    sb.append("    setupCommands: ").append(toIndentedString(setupCommands)).append("\n");
    sb.append("    startedOn: ").append(toIndentedString(startedOn)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("completed_on");
    openapiFields.add("image");
    openapiFields.add("script_commands");
    openapiFields.add("setup_commands");
    openapiFields.add("started_on");
    openapiFields.add("state");
    openapiFields.add("uuid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PipelineStep
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PipelineStep.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PipelineStep is not found in the empty JSON string", PipelineStep.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PipelineStep.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PipelineStep` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PipelineStep.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PipelineStep.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PipelineStep' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PipelineStep> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PipelineStep.class));

       return (TypeAdapter<T>) new TypeAdapter<PipelineStep>() {
           @Override
           public void write(JsonWriter out, PipelineStep value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PipelineStep read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PipelineStep given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PipelineStep
   * @throws IOException if the JSON string is invalid with respect to PipelineStep
   */
  public static PipelineStep fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PipelineStep.class);
  }

  /**
   * Convert an instance of PipelineStep to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

