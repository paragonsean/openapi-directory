/*
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.Account;
import org.openapitools.client.model.ModelObject;
import org.openapitools.client.model.PipelineState;
import org.openapitools.client.model.PipelineTarget;
import org.openapitools.client.model.PipelineTrigger;
import org.openapitools.client.model.Repository;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Pipeline
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:00:39.758646-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Pipeline extends ModelObject {
  public static final String SERIALIZED_NAME_BUILD_NUMBER = "build_number";
  @SerializedName(SERIALIZED_NAME_BUILD_NUMBER)
  private Integer buildNumber;

  public static final String SERIALIZED_NAME_BUILD_SECONDS_USED = "build_seconds_used";
  @SerializedName(SERIALIZED_NAME_BUILD_SECONDS_USED)
  private Integer buildSecondsUsed;

  public static final String SERIALIZED_NAME_COMPLETED_ON = "completed_on";
  @SerializedName(SERIALIZED_NAME_COMPLETED_ON)
  private OffsetDateTime completedOn;

  public static final String SERIALIZED_NAME_CREATED_ON = "created_on";
  @SerializedName(SERIALIZED_NAME_CREATED_ON)
  private OffsetDateTime createdOn;

  public static final String SERIALIZED_NAME_CREATOR = "creator";
  @SerializedName(SERIALIZED_NAME_CREATOR)
  private Account creator;

  public static final String SERIALIZED_NAME_REPOSITORY = "repository";
  @SerializedName(SERIALIZED_NAME_REPOSITORY)
  private Repository repository;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private PipelineState state;

  public static final String SERIALIZED_NAME_TARGET = "target";
  @SerializedName(SERIALIZED_NAME_TARGET)
  private PipelineTarget target;

  public static final String SERIALIZED_NAME_TRIGGER = "trigger";
  @SerializedName(SERIALIZED_NAME_TRIGGER)
  private PipelineTrigger trigger;

  public static final String SERIALIZED_NAME_UUID = "uuid";
  @SerializedName(SERIALIZED_NAME_UUID)
  private String uuid;

  public Pipeline() {
    this.type = this.getClass().getSimpleName();
  }

  public Pipeline buildNumber(Integer buildNumber) {
    this.buildNumber = buildNumber;
    return this;
  }

  /**
   * The build number of the pipeline.
   * @return buildNumber
   */
  @javax.annotation.Nullable
  public Integer getBuildNumber() {
    return buildNumber;
  }

  public void setBuildNumber(Integer buildNumber) {
    this.buildNumber = buildNumber;
  }


  public Pipeline buildSecondsUsed(Integer buildSecondsUsed) {
    this.buildSecondsUsed = buildSecondsUsed;
    return this;
  }

  /**
   * The number of build seconds used by this pipeline.
   * @return buildSecondsUsed
   */
  @javax.annotation.Nullable
  public Integer getBuildSecondsUsed() {
    return buildSecondsUsed;
  }

  public void setBuildSecondsUsed(Integer buildSecondsUsed) {
    this.buildSecondsUsed = buildSecondsUsed;
  }


  public Pipeline completedOn(OffsetDateTime completedOn) {
    this.completedOn = completedOn;
    return this;
  }

  /**
   * The timestamp when the Pipeline was completed. This is not set if the pipeline is still in progress.
   * @return completedOn
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCompletedOn() {
    return completedOn;
  }

  public void setCompletedOn(OffsetDateTime completedOn) {
    this.completedOn = completedOn;
  }


  public Pipeline createdOn(OffsetDateTime createdOn) {
    this.createdOn = createdOn;
    return this;
  }

  /**
   * The timestamp when the pipeline was created.
   * @return createdOn
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedOn() {
    return createdOn;
  }

  public void setCreatedOn(OffsetDateTime createdOn) {
    this.createdOn = createdOn;
  }


  public Pipeline creator(Account creator) {
    this.creator = creator;
    return this;
  }

  /**
   * Get creator
   * @return creator
   */
  @javax.annotation.Nullable
  public Account getCreator() {
    return creator;
  }

  public void setCreator(Account creator) {
    this.creator = creator;
  }


  public Pipeline repository(Repository repository) {
    this.repository = repository;
    return this;
  }

  /**
   * Get repository
   * @return repository
   */
  @javax.annotation.Nullable
  public Repository getRepository() {
    return repository;
  }

  public void setRepository(Repository repository) {
    this.repository = repository;
  }


  public Pipeline state(PipelineState state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public PipelineState getState() {
    return state;
  }

  public void setState(PipelineState state) {
    this.state = state;
  }


  public Pipeline target(PipelineTarget target) {
    this.target = target;
    return this;
  }

  /**
   * Get target
   * @return target
   */
  @javax.annotation.Nullable
  public PipelineTarget getTarget() {
    return target;
  }

  public void setTarget(PipelineTarget target) {
    this.target = target;
  }


  public Pipeline trigger(PipelineTrigger trigger) {
    this.trigger = trigger;
    return this;
  }

  /**
   * Get trigger
   * @return trigger
   */
  @javax.annotation.Nullable
  public PipelineTrigger getTrigger() {
    return trigger;
  }

  public void setTrigger(PipelineTrigger trigger) {
    this.trigger = trigger;
  }


  public Pipeline uuid(String uuid) {
    this.uuid = uuid;
    return this;
  }

  /**
   * The UUID identifying the pipeline.
   * @return uuid
   */
  @javax.annotation.Nullable
  public String getUuid() {
    return uuid;
  }

  public void setUuid(String uuid) {
    this.uuid = uuid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Pipeline pipeline = (Pipeline) o;
    return Objects.equals(this.buildNumber, pipeline.buildNumber) &&
        Objects.equals(this.buildSecondsUsed, pipeline.buildSecondsUsed) &&
        Objects.equals(this.completedOn, pipeline.completedOn) &&
        Objects.equals(this.createdOn, pipeline.createdOn) &&
        Objects.equals(this.creator, pipeline.creator) &&
        Objects.equals(this.repository, pipeline.repository) &&
        Objects.equals(this.state, pipeline.state) &&
        Objects.equals(this.target, pipeline.target) &&
        Objects.equals(this.trigger, pipeline.trigger) &&
        Objects.equals(this.uuid, pipeline.uuid) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(buildNumber, buildSecondsUsed, completedOn, createdOn, creator, repository, state, target, trigger, uuid, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Pipeline {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    buildNumber: ").append(toIndentedString(buildNumber)).append("\n");
    sb.append("    buildSecondsUsed: ").append(toIndentedString(buildSecondsUsed)).append("\n");
    sb.append("    completedOn: ").append(toIndentedString(completedOn)).append("\n");
    sb.append("    createdOn: ").append(toIndentedString(createdOn)).append("\n");
    sb.append("    creator: ").append(toIndentedString(creator)).append("\n");
    sb.append("    repository: ").append(toIndentedString(repository)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("    trigger: ").append(toIndentedString(trigger)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("build_number");
    openapiFields.add("build_seconds_used");
    openapiFields.add("completed_on");
    openapiFields.add("created_on");
    openapiFields.add("creator");
    openapiFields.add("repository");
    openapiFields.add("state");
    openapiFields.add("target");
    openapiFields.add("trigger");
    openapiFields.add("uuid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Pipeline
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Pipeline.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Pipeline is not found in the empty JSON string", Pipeline.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Pipeline.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Pipeline` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Pipeline.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Pipeline.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Pipeline' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Pipeline> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Pipeline.class));

       return (TypeAdapter<T>) new TypeAdapter<Pipeline>() {
           @Override
           public void write(JsonWriter out, Pipeline value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Pipeline read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Pipeline given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Pipeline
   * @throws IOException if the JSON string is invalid with respect to Pipeline
   */
  public static Pipeline fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Pipeline.class);
  }

  /**
   * Convert an instance of Pipeline to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

