/*
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Error;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DownloadsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DownloadsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DownloadsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for repositoriesWorkspaceRepoSlugDownloadsFilenameDelete
     * @param filename Name of the file. (required)
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The specified download artifact was deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not authorized to write to the repository. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified download does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repositoriesWorkspaceRepoSlugDownloadsFilenameDeleteCall(String filename, String repoSlug, String workspace, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories/{workspace}/{repo_slug}/downloads/{filename}"
            .replace("{" + "filename" + "}", localVarApiClient.escapeString(filename.toString()))
            .replace("{" + "repo_slug" + "}", localVarApiClient.escapeString(repoSlug.toString()))
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "oauth2", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repositoriesWorkspaceRepoSlugDownloadsFilenameDeleteValidateBeforeCall(String filename, String repoSlug, String workspace, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'filename' is set
        if (filename == null) {
            throw new ApiException("Missing the required parameter 'filename' when calling repositoriesWorkspaceRepoSlugDownloadsFilenameDelete(Async)");
        }

        // verify the required parameter 'repoSlug' is set
        if (repoSlug == null) {
            throw new ApiException("Missing the required parameter 'repoSlug' when calling repositoriesWorkspaceRepoSlugDownloadsFilenameDelete(Async)");
        }

        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling repositoriesWorkspaceRepoSlugDownloadsFilenameDelete(Async)");
        }

        return repositoriesWorkspaceRepoSlugDownloadsFilenameDeleteCall(filename, repoSlug, workspace, _callback);

    }

    /**
     * Delete a download artifact
     * Deletes the specified download artifact from the repository.
     * @param filename Name of the file. (required)
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The specified download artifact was deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not authorized to write to the repository. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified download does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public void repositoriesWorkspaceRepoSlugDownloadsFilenameDelete(String filename, String repoSlug, String workspace) throws ApiException {
        repositoriesWorkspaceRepoSlugDownloadsFilenameDeleteWithHttpInfo(filename, repoSlug, workspace);
    }

    /**
     * Delete a download artifact
     * Deletes the specified download artifact from the repository.
     * @param filename Name of the file. (required)
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The specified download artifact was deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not authorized to write to the repository. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified download does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> repositoriesWorkspaceRepoSlugDownloadsFilenameDeleteWithHttpInfo(String filename, String repoSlug, String workspace) throws ApiException {
        okhttp3.Call localVarCall = repositoriesWorkspaceRepoSlugDownloadsFilenameDeleteValidateBeforeCall(filename, repoSlug, workspace, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a download artifact (asynchronously)
     * Deletes the specified download artifact from the repository.
     * @param filename Name of the file. (required)
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The specified download artifact was deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not authorized to write to the repository. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified download does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repositoriesWorkspaceRepoSlugDownloadsFilenameDeleteAsync(String filename, String repoSlug, String workspace, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = repositoriesWorkspaceRepoSlugDownloadsFilenameDeleteValidateBeforeCall(filename, repoSlug, workspace, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for repositoriesWorkspaceRepoSlugDownloadsFilenameGet
     * @param filename Name of the file. (required)
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Redirects to the url of the specified download artifact. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not authorized to read from the repository. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified download artifact does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repositoriesWorkspaceRepoSlugDownloadsFilenameGetCall(String filename, String repoSlug, String workspace, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories/{workspace}/{repo_slug}/downloads/{filename}"
            .replace("{" + "filename" + "}", localVarApiClient.escapeString(filename.toString()))
            .replace("{" + "repo_slug" + "}", localVarApiClient.escapeString(repoSlug.toString()))
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "oauth2", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repositoriesWorkspaceRepoSlugDownloadsFilenameGetValidateBeforeCall(String filename, String repoSlug, String workspace, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'filename' is set
        if (filename == null) {
            throw new ApiException("Missing the required parameter 'filename' when calling repositoriesWorkspaceRepoSlugDownloadsFilenameGet(Async)");
        }

        // verify the required parameter 'repoSlug' is set
        if (repoSlug == null) {
            throw new ApiException("Missing the required parameter 'repoSlug' when calling repositoriesWorkspaceRepoSlugDownloadsFilenameGet(Async)");
        }

        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling repositoriesWorkspaceRepoSlugDownloadsFilenameGet(Async)");
        }

        return repositoriesWorkspaceRepoSlugDownloadsFilenameGetCall(filename, repoSlug, workspace, _callback);

    }

    /**
     * Get a download artifact link
     * Return a redirect to the contents of a download artifact.  This endpoint returns the actual file contents and not the artifact&#39;s metadata.      $ curl -s -L https://api.bitbucket.org/2.0/repositories/evzijst/git-tests/downloads/hello.txt     Hello World
     * @param filename Name of the file. (required)
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Redirects to the url of the specified download artifact. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not authorized to read from the repository. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified download artifact does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public void repositoriesWorkspaceRepoSlugDownloadsFilenameGet(String filename, String repoSlug, String workspace) throws ApiException {
        repositoriesWorkspaceRepoSlugDownloadsFilenameGetWithHttpInfo(filename, repoSlug, workspace);
    }

    /**
     * Get a download artifact link
     * Return a redirect to the contents of a download artifact.  This endpoint returns the actual file contents and not the artifact&#39;s metadata.      $ curl -s -L https://api.bitbucket.org/2.0/repositories/evzijst/git-tests/downloads/hello.txt     Hello World
     * @param filename Name of the file. (required)
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Redirects to the url of the specified download artifact. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not authorized to read from the repository. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified download artifact does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> repositoriesWorkspaceRepoSlugDownloadsFilenameGetWithHttpInfo(String filename, String repoSlug, String workspace) throws ApiException {
        okhttp3.Call localVarCall = repositoriesWorkspaceRepoSlugDownloadsFilenameGetValidateBeforeCall(filename, repoSlug, workspace, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get a download artifact link (asynchronously)
     * Return a redirect to the contents of a download artifact.  This endpoint returns the actual file contents and not the artifact&#39;s metadata.      $ curl -s -L https://api.bitbucket.org/2.0/repositories/evzijst/git-tests/downloads/hello.txt     Hello World
     * @param filename Name of the file. (required)
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Redirects to the url of the specified download artifact. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not authorized to read from the repository. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified download artifact does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repositoriesWorkspaceRepoSlugDownloadsFilenameGetAsync(String filename, String repoSlug, String workspace, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = repositoriesWorkspaceRepoSlugDownloadsFilenameGetValidateBeforeCall(filename, repoSlug, workspace, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for repositoriesWorkspaceRepoSlugDownloadsGet
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a paginated list of the downloads associated with the repository. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not authorized to read from the repository. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repositoriesWorkspaceRepoSlugDownloadsGetCall(String repoSlug, String workspace, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories/{workspace}/{repo_slug}/downloads"
            .replace("{" + "repo_slug" + "}", localVarApiClient.escapeString(repoSlug.toString()))
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "oauth2", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repositoriesWorkspaceRepoSlugDownloadsGetValidateBeforeCall(String repoSlug, String workspace, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'repoSlug' is set
        if (repoSlug == null) {
            throw new ApiException("Missing the required parameter 'repoSlug' when calling repositoriesWorkspaceRepoSlugDownloadsGet(Async)");
        }

        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling repositoriesWorkspaceRepoSlugDownloadsGet(Async)");
        }

        return repositoriesWorkspaceRepoSlugDownloadsGetCall(repoSlug, workspace, _callback);

    }

    /**
     * List download artifacts
     * Returns a list of download links associated with the repository.
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a paginated list of the downloads associated with the repository. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not authorized to read from the repository. </td><td>  -  </td></tr>
     </table>
     */
    public void repositoriesWorkspaceRepoSlugDownloadsGet(String repoSlug, String workspace) throws ApiException {
        repositoriesWorkspaceRepoSlugDownloadsGetWithHttpInfo(repoSlug, workspace);
    }

    /**
     * List download artifacts
     * Returns a list of download links associated with the repository.
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a paginated list of the downloads associated with the repository. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not authorized to read from the repository. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> repositoriesWorkspaceRepoSlugDownloadsGetWithHttpInfo(String repoSlug, String workspace) throws ApiException {
        okhttp3.Call localVarCall = repositoriesWorkspaceRepoSlugDownloadsGetValidateBeforeCall(repoSlug, workspace, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * List download artifacts (asynchronously)
     * Returns a list of download links associated with the repository.
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a paginated list of the downloads associated with the repository. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not authorized to read from the repository. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repositoriesWorkspaceRepoSlugDownloadsGetAsync(String repoSlug, String workspace, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = repositoriesWorkspaceRepoSlugDownloadsGetValidateBeforeCall(repoSlug, workspace, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for repositoriesWorkspaceRepoSlugDownloadsPost
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The artifact was uploaded sucessfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not authorized to write to the repository. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Unsupported Content-Type. Use multiplart/form-data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repositoriesWorkspaceRepoSlugDownloadsPostCall(String repoSlug, String workspace, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories/{workspace}/{repo_slug}/downloads"
            .replace("{" + "repo_slug" + "}", localVarApiClient.escapeString(repoSlug.toString()))
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "oauth2", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repositoriesWorkspaceRepoSlugDownloadsPostValidateBeforeCall(String repoSlug, String workspace, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'repoSlug' is set
        if (repoSlug == null) {
            throw new ApiException("Missing the required parameter 'repoSlug' when calling repositoriesWorkspaceRepoSlugDownloadsPost(Async)");
        }

        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling repositoriesWorkspaceRepoSlugDownloadsPost(Async)");
        }

        return repositoriesWorkspaceRepoSlugDownloadsPostCall(repoSlug, workspace, _callback);

    }

    /**
     * Upload a download artifact
     * Upload new download artifacts.  To upload files, perform a &#x60;multipart/form-data&#x60; POST containing one or more &#x60;files&#x60; fields:      $ echo Hello World &gt; hello.txt     $ curl -s -u evzijst -X POST https://api.bitbucket.org/2.0/repositories/evzijst/git-tests/downloads -F files&#x3D;@hello.txt  When a file is uploaded with the same name as an existing artifact, then the existing file will be replaced.
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The artifact was uploaded sucessfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not authorized to write to the repository. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Unsupported Content-Type. Use multiplart/form-data. </td><td>  -  </td></tr>
     </table>
     */
    public void repositoriesWorkspaceRepoSlugDownloadsPost(String repoSlug, String workspace) throws ApiException {
        repositoriesWorkspaceRepoSlugDownloadsPostWithHttpInfo(repoSlug, workspace);
    }

    /**
     * Upload a download artifact
     * Upload new download artifacts.  To upload files, perform a &#x60;multipart/form-data&#x60; POST containing one or more &#x60;files&#x60; fields:      $ echo Hello World &gt; hello.txt     $ curl -s -u evzijst -X POST https://api.bitbucket.org/2.0/repositories/evzijst/git-tests/downloads -F files&#x3D;@hello.txt  When a file is uploaded with the same name as an existing artifact, then the existing file will be replaced.
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The artifact was uploaded sucessfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not authorized to write to the repository. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Unsupported Content-Type. Use multiplart/form-data. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> repositoriesWorkspaceRepoSlugDownloadsPostWithHttpInfo(String repoSlug, String workspace) throws ApiException {
        okhttp3.Call localVarCall = repositoriesWorkspaceRepoSlugDownloadsPostValidateBeforeCall(repoSlug, workspace, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Upload a download artifact (asynchronously)
     * Upload new download artifacts.  To upload files, perform a &#x60;multipart/form-data&#x60; POST containing one or more &#x60;files&#x60; fields:      $ echo Hello World &gt; hello.txt     $ curl -s -u evzijst -X POST https://api.bitbucket.org/2.0/repositories/evzijst/git-tests/downloads -F files&#x3D;@hello.txt  When a file is uploaded with the same name as an existing artifact, then the existing file will be replaced.
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The artifact was uploaded sucessfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not authorized to write to the repository. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Unsupported Content-Type. Use multiplart/form-data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repositoriesWorkspaceRepoSlugDownloadsPostAsync(String repoSlug, String workspace, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = repositoriesWorkspaceRepoSlugDownloadsPostValidateBeforeCall(repoSlug, workspace, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
