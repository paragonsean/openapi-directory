/*
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.internal.bind.util.ISO8601Utils;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonElement;
import io.gsonfire.GsonFireBuilder;
import io.gsonfire.TypeSelector;

import okio.ByteString;

import java.io.IOException;
import java.io.StringReader;
import java.lang.reflect.Type;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.Locale;
import java.util.Map;
import java.util.HashMap;

/*
 * A JSON utility class
 *
 * NOTE: in the future, this class may be converted to static, which may break
 *       backward-compatibility
 */
public class JSON {
    private static Gson gson;
    private static boolean isLenientOnJson = false;
    private static DateTypeAdapter dateTypeAdapter = new DateTypeAdapter();
    private static SqlDateTypeAdapter sqlDateTypeAdapter = new SqlDateTypeAdapter();
    private static OffsetDateTimeTypeAdapter offsetDateTimeTypeAdapter = new OffsetDateTimeTypeAdapter();
    private static LocalDateTypeAdapter localDateTypeAdapter = new LocalDateTypeAdapter();
    private static ByteArrayAdapter byteArrayAdapter = new ByteArrayAdapter();

    @SuppressWarnings("unchecked")
    public static GsonBuilder createGson() {
        GsonFireBuilder fireBuilder = new GsonFireBuilder()
                .registerTypeSelector(org.openapitools.client.model.Account.class, new TypeSelector<org.openapitools.client.model.Account>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.Account> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("app_user", org.openapitools.client.model.AppUser.class);
                        classByDiscriminatorValue.put("team", org.openapitools.client.model.Team.class);
                        classByDiscriminatorValue.put("user", org.openapitools.client.model.User.class);
                        classByDiscriminatorValue.put("account", org.openapitools.client.model.Account.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.AppUser.class, new TypeSelector<org.openapitools.client.model.AppUser>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.AppUser> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("app_user", org.openapitools.client.model.AppUser.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.Author.class, new TypeSelector<org.openapitools.client.model.Author>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.Author> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("author", org.openapitools.client.model.Author.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.BaseCommit.class, new TypeSelector<org.openapitools.client.model.BaseCommit>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.BaseCommit> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("commit", org.openapitools.client.model.Commit.class);
                        classByDiscriminatorValue.put("snippet_commit", org.openapitools.client.model.SnippetCommit.class);
                        classByDiscriminatorValue.put("base_commit", org.openapitools.client.model.BaseCommit.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.BranchingModel.class, new TypeSelector<org.openapitools.client.model.BranchingModel>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.BranchingModel> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("branching_model", org.openapitools.client.model.BranchingModel.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.BranchingModelSettings.class, new TypeSelector<org.openapitools.client.model.BranchingModelSettings>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.BranchingModelSettings> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("branching_model_settings", org.openapitools.client.model.BranchingModelSettings.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.Branchrestriction.class, new TypeSelector<org.openapitools.client.model.Branchrestriction>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.Branchrestriction> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("branchrestriction", org.openapitools.client.model.Branchrestriction.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.Comment.class, new TypeSelector<org.openapitools.client.model.Comment>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.Comment> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("commit_comment", org.openapitools.client.model.CommitComment.class);
                        classByDiscriminatorValue.put("issue_comment", org.openapitools.client.model.IssueComment.class);
                        classByDiscriminatorValue.put("pullrequest_comment", org.openapitools.client.model.PullrequestComment.class);
                        classByDiscriminatorValue.put("comment", org.openapitools.client.model.Comment.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.Commit.class, new TypeSelector<org.openapitools.client.model.Commit>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.Commit> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("commit", org.openapitools.client.model.Commit.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.CommitComment.class, new TypeSelector<org.openapitools.client.model.CommitComment>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.CommitComment> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("commit_comment", org.openapitools.client.model.CommitComment.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.Commitstatus.class, new TypeSelector<org.openapitools.client.model.Commitstatus>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.Commitstatus> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("commitstatus", org.openapitools.client.model.Commitstatus.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.Component.class, new TypeSelector<org.openapitools.client.model.Component>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.Component> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("component", org.openapitools.client.model.Component.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.DdevReport.class, new TypeSelector<org.openapitools.client.model.DdevReport>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.DdevReport> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("ddev_report", org.openapitools.client.model.DdevReport.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.DeployKey.class, new TypeSelector<org.openapitools.client.model.DeployKey>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.DeployKey> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("deploy_key", org.openapitools.client.model.DeployKey.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.Deployment.class, new TypeSelector<org.openapitools.client.model.Deployment>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.Deployment> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("deployment", org.openapitools.client.model.Deployment.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.DeploymentEnvironment.class, new TypeSelector<org.openapitools.client.model.DeploymentEnvironment>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.DeploymentEnvironment> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("deployment_environment", org.openapitools.client.model.DeploymentEnvironment.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.DeploymentEnvironmentLock.class, new TypeSelector<org.openapitools.client.model.DeploymentEnvironmentLock>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.DeploymentEnvironmentLock> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("deployment_environment_lock", org.openapitools.client.model.DeploymentEnvironmentLock.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.DeploymentRelease.class, new TypeSelector<org.openapitools.client.model.DeploymentRelease>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.DeploymentRelease> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("deployment_release", org.openapitools.client.model.DeploymentRelease.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.DeploymentState.class, new TypeSelector<org.openapitools.client.model.DeploymentState>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.DeploymentState> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("deployment_state_completed", org.openapitools.client.model.DeploymentStateCompleted.class);
                        classByDiscriminatorValue.put("deployment_state_in_progress", org.openapitools.client.model.DeploymentStateInProgress.class);
                        classByDiscriminatorValue.put("deployment_state_undeployed", org.openapitools.client.model.DeploymentStateUndeployed.class);
                        classByDiscriminatorValue.put("deployment_state", org.openapitools.client.model.DeploymentState.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.DeploymentStateCompleted.class, new TypeSelector<org.openapitools.client.model.DeploymentStateCompleted>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.DeploymentStateCompleted> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("deployment_state_completed", org.openapitools.client.model.DeploymentStateCompleted.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.DeploymentStateCompletedStatus.class, new TypeSelector<org.openapitools.client.model.DeploymentStateCompletedStatus>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.DeploymentStateCompletedStatus> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("deployment_state_completed_status_failed", org.openapitools.client.model.DeploymentStateCompletedStatusFailed.class);
                        classByDiscriminatorValue.put("deployment_state_completed_status_stopped", org.openapitools.client.model.DeploymentStateCompletedStatusStopped.class);
                        classByDiscriminatorValue.put("deployment_state_completed_status_successful", org.openapitools.client.model.DeploymentStateCompletedStatusSuccessful.class);
                        classByDiscriminatorValue.put("deployment_state_completed_status", org.openapitools.client.model.DeploymentStateCompletedStatus.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.DeploymentStateCompletedStatusFailed.class, new TypeSelector<org.openapitools.client.model.DeploymentStateCompletedStatusFailed>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.DeploymentStateCompletedStatusFailed> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("deployment_state_completed_status_failed", org.openapitools.client.model.DeploymentStateCompletedStatusFailed.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.DeploymentStateCompletedStatusStopped.class, new TypeSelector<org.openapitools.client.model.DeploymentStateCompletedStatusStopped>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.DeploymentStateCompletedStatusStopped> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("deployment_state_completed_status_stopped", org.openapitools.client.model.DeploymentStateCompletedStatusStopped.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.DeploymentStateCompletedStatusSuccessful.class, new TypeSelector<org.openapitools.client.model.DeploymentStateCompletedStatusSuccessful>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.DeploymentStateCompletedStatusSuccessful> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("deployment_state_completed_status_successful", org.openapitools.client.model.DeploymentStateCompletedStatusSuccessful.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.DeploymentStateInProgress.class, new TypeSelector<org.openapitools.client.model.DeploymentStateInProgress>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.DeploymentStateInProgress> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("deployment_state_in_progress", org.openapitools.client.model.DeploymentStateInProgress.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.DeploymentStateUndeployed.class, new TypeSelector<org.openapitools.client.model.DeploymentStateUndeployed>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.DeploymentStateUndeployed> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("deployment_state_undeployed", org.openapitools.client.model.DeploymentStateUndeployed.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.DeploymentVariable.class, new TypeSelector<org.openapitools.client.model.DeploymentVariable>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.DeploymentVariable> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("deployment_variable", org.openapitools.client.model.DeploymentVariable.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.DeploymentsDdevDeploymentEnvironment.class, new TypeSelector<org.openapitools.client.model.DeploymentsDdevDeploymentEnvironment>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.DeploymentsDdevDeploymentEnvironment> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("deployments_ddev_deployment_environment", org.openapitools.client.model.DeploymentsDdevDeploymentEnvironment.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.DeploymentsDdevDeploymentEnvironmentLock.class, new TypeSelector<org.openapitools.client.model.DeploymentsDdevDeploymentEnvironmentLock>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.DeploymentsDdevDeploymentEnvironmentLock> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("deployments_ddev_deployment_environment_lock", org.openapitools.client.model.DeploymentsDdevDeploymentEnvironmentLock.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.DeploymentsStgWestDeploymentEnvironment.class, new TypeSelector<org.openapitools.client.model.DeploymentsStgWestDeploymentEnvironment>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.DeploymentsStgWestDeploymentEnvironment> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("deployments_stg_west_deployment_environment", org.openapitools.client.model.DeploymentsStgWestDeploymentEnvironment.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.DeploymentsStgWestDeploymentEnvironmentLock.class, new TypeSelector<org.openapitools.client.model.DeploymentsStgWestDeploymentEnvironmentLock>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.DeploymentsStgWestDeploymentEnvironmentLock> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("deployments_stg_west_deployment_environment_lock", org.openapitools.client.model.DeploymentsStgWestDeploymentEnvironmentLock.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.EffectiveRepoBranchingModel.class, new TypeSelector<org.openapitools.client.model.EffectiveRepoBranchingModel>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.EffectiveRepoBranchingModel> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("effective_repo_branching_model", org.openapitools.client.model.EffectiveRepoBranchingModel.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.Group.class, new TypeSelector<org.openapitools.client.model.Group>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.Group> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("group", org.openapitools.client.model.Group.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.Issue.class, new TypeSelector<org.openapitools.client.model.Issue>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.Issue> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("issue", org.openapitools.client.model.Issue.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.IssueAttachment.class, new TypeSelector<org.openapitools.client.model.IssueAttachment>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.IssueAttachment> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("issue_attachment", org.openapitools.client.model.IssueAttachment.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.IssueComment.class, new TypeSelector<org.openapitools.client.model.IssueComment>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.IssueComment> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("issue_comment", org.openapitools.client.model.IssueComment.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.JiraProject.class, new TypeSelector<org.openapitools.client.model.JiraProject>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.JiraProject> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("jira_project", org.openapitools.client.model.JiraProject.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.JiraSite.class, new TypeSelector<org.openapitools.client.model.JiraSite>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.JiraSite> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("jira_site", org.openapitools.client.model.JiraSite.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.Milestone.class, new TypeSelector<org.openapitools.client.model.Milestone>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.Milestone> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("milestone", org.openapitools.client.model.Milestone.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.ModelObject.class, new TypeSelector<org.openapitools.client.model.ModelObject>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.ModelObject> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("account", org.openapitools.client.model.Account.class);
                        classByDiscriminatorValue.put("app_user", org.openapitools.client.model.AppUser.class);
                        classByDiscriminatorValue.put("author", org.openapitools.client.model.Author.class);
                        classByDiscriminatorValue.put("base_commit", org.openapitools.client.model.BaseCommit.class);
                        classByDiscriminatorValue.put("branching_model", org.openapitools.client.model.BranchingModel.class);
                        classByDiscriminatorValue.put("branching_model_settings", org.openapitools.client.model.BranchingModelSettings.class);
                        classByDiscriminatorValue.put("branchrestriction", org.openapitools.client.model.Branchrestriction.class);
                        classByDiscriminatorValue.put("comment", org.openapitools.client.model.Comment.class);
                        classByDiscriminatorValue.put("commit", org.openapitools.client.model.Commit.class);
                        classByDiscriminatorValue.put("commit_comment", org.openapitools.client.model.CommitComment.class);
                        classByDiscriminatorValue.put("commitstatus", org.openapitools.client.model.Commitstatus.class);
                        classByDiscriminatorValue.put("component", org.openapitools.client.model.Component.class);
                        classByDiscriminatorValue.put("ddev_report", org.openapitools.client.model.DdevReport.class);
                        classByDiscriminatorValue.put("deploy_key", org.openapitools.client.model.DeployKey.class);
                        classByDiscriminatorValue.put("deployment", org.openapitools.client.model.Deployment.class);
                        classByDiscriminatorValue.put("deployment_environment", org.openapitools.client.model.DeploymentEnvironment.class);
                        classByDiscriminatorValue.put("deployment_environment_lock", org.openapitools.client.model.DeploymentEnvironmentLock.class);
                        classByDiscriminatorValue.put("deployment_release", org.openapitools.client.model.DeploymentRelease.class);
                        classByDiscriminatorValue.put("deployment_state", org.openapitools.client.model.DeploymentState.class);
                        classByDiscriminatorValue.put("deployment_state_completed", org.openapitools.client.model.DeploymentStateCompleted.class);
                        classByDiscriminatorValue.put("deployment_state_completed_status", org.openapitools.client.model.DeploymentStateCompletedStatus.class);
                        classByDiscriminatorValue.put("deployment_state_completed_status_failed", org.openapitools.client.model.DeploymentStateCompletedStatusFailed.class);
                        classByDiscriminatorValue.put("deployment_state_completed_status_stopped", org.openapitools.client.model.DeploymentStateCompletedStatusStopped.class);
                        classByDiscriminatorValue.put("deployment_state_completed_status_successful", org.openapitools.client.model.DeploymentStateCompletedStatusSuccessful.class);
                        classByDiscriminatorValue.put("deployment_state_in_progress", org.openapitools.client.model.DeploymentStateInProgress.class);
                        classByDiscriminatorValue.put("deployment_state_undeployed", org.openapitools.client.model.DeploymentStateUndeployed.class);
                        classByDiscriminatorValue.put("deployment_variable", org.openapitools.client.model.DeploymentVariable.class);
                        classByDiscriminatorValue.put("deployments_ddev_deployment_environment", org.openapitools.client.model.DeploymentsDdevDeploymentEnvironment.class);
                        classByDiscriminatorValue.put("deployments_ddev_deployment_environment_lock", org.openapitools.client.model.DeploymentsDdevDeploymentEnvironmentLock.class);
                        classByDiscriminatorValue.put("deployments_stg_west_deployment_environment", org.openapitools.client.model.DeploymentsStgWestDeploymentEnvironment.class);
                        classByDiscriminatorValue.put("deployments_stg_west_deployment_environment_lock", org.openapitools.client.model.DeploymentsStgWestDeploymentEnvironmentLock.class);
                        classByDiscriminatorValue.put("effective_repo_branching_model", org.openapitools.client.model.EffectiveRepoBranchingModel.class);
                        classByDiscriminatorValue.put("group", org.openapitools.client.model.Group.class);
                        classByDiscriminatorValue.put("issue", org.openapitools.client.model.Issue.class);
                        classByDiscriminatorValue.put("issue_attachment", org.openapitools.client.model.IssueAttachment.class);
                        classByDiscriminatorValue.put("issue_comment", org.openapitools.client.model.IssueComment.class);
                        classByDiscriminatorValue.put("jira_project", org.openapitools.client.model.JiraProject.class);
                        classByDiscriminatorValue.put("jira_site", org.openapitools.client.model.JiraSite.class);
                        classByDiscriminatorValue.put("milestone", org.openapitools.client.model.Milestone.class);
                        classByDiscriminatorValue.put("participant", org.openapitools.client.model.Participant.class);
                        classByDiscriminatorValue.put("pipeline", org.openapitools.client.model.Pipeline.class);
                        classByDiscriminatorValue.put("pipeline_build_number", org.openapitools.client.model.PipelineBuildNumber.class);
                        classByDiscriminatorValue.put("pipeline_cache", org.openapitools.client.model.PipelineCache.class);
                        classByDiscriminatorValue.put("pipeline_commit_target", org.openapitools.client.model.PipelineCommitTarget.class);
                        classByDiscriminatorValue.put("pipeline_error", org.openapitools.client.model.PipelineError.class);
                        classByDiscriminatorValue.put("pipeline_known_host", org.openapitools.client.model.PipelineKnownHost.class);
                        classByDiscriminatorValue.put("pipeline_ref_target", org.openapitools.client.model.PipelineRefTarget.class);
                        classByDiscriminatorValue.put("pipeline_schedule", org.openapitools.client.model.PipelineSchedule.class);
                        classByDiscriminatorValue.put("pipeline_schedule_execution", org.openapitools.client.model.PipelineScheduleExecution.class);
                        classByDiscriminatorValue.put("pipeline_schedule_execution_errored", org.openapitools.client.model.PipelineScheduleExecutionErrored.class);
                        classByDiscriminatorValue.put("pipeline_schedule_execution_executed", org.openapitools.client.model.PipelineScheduleExecutionExecuted.class);
                        classByDiscriminatorValue.put("pipeline_schedule_post_request_body", org.openapitools.client.model.PipelineSchedulePostRequestBody.class);
                        classByDiscriminatorValue.put("pipeline_schedule_put_request_body", org.openapitools.client.model.PipelineSchedulePutRequestBody.class);
                        classByDiscriminatorValue.put("pipeline_selector", org.openapitools.client.model.PipelineSelector.class);
                        classByDiscriminatorValue.put("pipeline_ssh_key_pair", org.openapitools.client.model.PipelineSshKeyPair.class);
                        classByDiscriminatorValue.put("pipeline_ssh_public_key", org.openapitools.client.model.PipelineSshPublicKey.class);
                        classByDiscriminatorValue.put("pipeline_state", org.openapitools.client.model.PipelineState.class);
                        classByDiscriminatorValue.put("pipeline_state_completed", org.openapitools.client.model.PipelineStateCompleted.class);
                        classByDiscriminatorValue.put("pipeline_state_completed_error", org.openapitools.client.model.PipelineStateCompletedError.class);
                        classByDiscriminatorValue.put("pipeline_state_completed_expired", org.openapitools.client.model.PipelineStateCompletedExpired.class);
                        classByDiscriminatorValue.put("pipeline_state_completed_failed", org.openapitools.client.model.PipelineStateCompletedFailed.class);
                        classByDiscriminatorValue.put("pipeline_state_completed_result", org.openapitools.client.model.PipelineStateCompletedResult.class);
                        classByDiscriminatorValue.put("pipeline_state_completed_stopped", org.openapitools.client.model.PipelineStateCompletedStopped.class);
                        classByDiscriminatorValue.put("pipeline_state_completed_successful", org.openapitools.client.model.PipelineStateCompletedSuccessful.class);
                        classByDiscriminatorValue.put("pipeline_state_in_progress", org.openapitools.client.model.PipelineStateInProgress.class);
                        classByDiscriminatorValue.put("pipeline_state_in_progress_paused", org.openapitools.client.model.PipelineStateInProgressPaused.class);
                        classByDiscriminatorValue.put("pipeline_state_in_progress_running", org.openapitools.client.model.PipelineStateInProgressRunning.class);
                        classByDiscriminatorValue.put("pipeline_state_in_progress_stage", org.openapitools.client.model.PipelineStateInProgressStage.class);
                        classByDiscriminatorValue.put("pipeline_state_pending", org.openapitools.client.model.PipelineStatePending.class);
                        classByDiscriminatorValue.put("pipeline_step", org.openapitools.client.model.PipelineStep.class);
                        classByDiscriminatorValue.put("pipeline_step_error", org.openapitools.client.model.PipelineStepError.class);
                        classByDiscriminatorValue.put("pipeline_step_state", org.openapitools.client.model.PipelineStepState.class);
                        classByDiscriminatorValue.put("pipeline_step_state_completed", org.openapitools.client.model.PipelineStepStateCompleted.class);
                        classByDiscriminatorValue.put("pipeline_step_state_completed_error", org.openapitools.client.model.PipelineStepStateCompletedError.class);
                        classByDiscriminatorValue.put("pipeline_step_state_completed_expired", org.openapitools.client.model.PipelineStepStateCompletedExpired.class);
                        classByDiscriminatorValue.put("pipeline_step_state_completed_failed", org.openapitools.client.model.PipelineStepStateCompletedFailed.class);
                        classByDiscriminatorValue.put("pipeline_step_state_completed_not_run", org.openapitools.client.model.PipelineStepStateCompletedNotRun.class);
                        classByDiscriminatorValue.put("pipeline_step_state_completed_result", org.openapitools.client.model.PipelineStepStateCompletedResult.class);
                        classByDiscriminatorValue.put("pipeline_step_state_completed_stopped", org.openapitools.client.model.PipelineStepStateCompletedStopped.class);
                        classByDiscriminatorValue.put("pipeline_step_state_completed_successful", org.openapitools.client.model.PipelineStepStateCompletedSuccessful.class);
                        classByDiscriminatorValue.put("pipeline_step_state_in_progress", org.openapitools.client.model.PipelineStepStateInProgress.class);
                        classByDiscriminatorValue.put("pipeline_step_state_pending", org.openapitools.client.model.PipelineStepStatePending.class);
                        classByDiscriminatorValue.put("pipeline_step_state_ready", org.openapitools.client.model.PipelineStepStateReady.class);
                        classByDiscriminatorValue.put("pipeline_target", org.openapitools.client.model.PipelineTarget.class);
                        classByDiscriminatorValue.put("pipeline_trigger", org.openapitools.client.model.PipelineTrigger.class);
                        classByDiscriminatorValue.put("pipeline_trigger_manual", org.openapitools.client.model.PipelineTriggerManual.class);
                        classByDiscriminatorValue.put("pipeline_trigger_push", org.openapitools.client.model.PipelineTriggerPush.class);
                        classByDiscriminatorValue.put("pipeline_variable", org.openapitools.client.model.PipelineVariable.class);
                        classByDiscriminatorValue.put("pipelines_config", org.openapitools.client.model.PipelinesConfig.class);
                        classByDiscriminatorValue.put("pipelines_ddev_pipeline_step", org.openapitools.client.model.PipelinesDdevPipelineStep.class);
                        classByDiscriminatorValue.put("pipelines_stg_west_pipeline_step", org.openapitools.client.model.PipelinesStgWestPipelineStep.class);
                        classByDiscriminatorValue.put("project", org.openapitools.client.model.Project.class);
                        classByDiscriminatorValue.put("project_branching_model", org.openapitools.client.model.ProjectBranchingModel.class);
                        classByDiscriminatorValue.put("project_deploy_key", org.openapitools.client.model.ProjectDeployKey.class);
                        classByDiscriminatorValue.put("pullrequest", org.openapitools.client.model.Pullrequest.class);
                        classByDiscriminatorValue.put("pullrequest_comment", org.openapitools.client.model.PullrequestComment.class);
                        classByDiscriminatorValue.put("report", org.openapitools.client.model.Report.class);
                        classByDiscriminatorValue.put("report_annotation", org.openapitools.client.model.ReportAnnotation.class);
                        classByDiscriminatorValue.put("repository", org.openapitools.client.model.Repository.class);
                        classByDiscriminatorValue.put("snippet", org.openapitools.client.model.Snippet.class);
                        classByDiscriminatorValue.put("snippet_comment", org.openapitools.client.model.SnippetComment.class);
                        classByDiscriminatorValue.put("snippet_commit", org.openapitools.client.model.SnippetCommit.class);
                        classByDiscriminatorValue.put("ssh_account_key", org.openapitools.client.model.SshAccountKey.class);
                        classByDiscriminatorValue.put("ssh_key", org.openapitools.client.model.SshKey.class);
                        classByDiscriminatorValue.put("stg_west_report", org.openapitools.client.model.StgWestReport.class);
                        classByDiscriminatorValue.put("team", org.openapitools.client.model.Team.class);
                        classByDiscriminatorValue.put("user", org.openapitools.client.model.User.class);
                        classByDiscriminatorValue.put("version", org.openapitools.client.model.Version.class);
                        classByDiscriminatorValue.put("webhook_subscription", org.openapitools.client.model.WebhookSubscription.class);
                        classByDiscriminatorValue.put("workspace", org.openapitools.client.model.Workspace.class);
                        classByDiscriminatorValue.put("workspace_membership", org.openapitools.client.model.WorkspaceMembership.class);
                        classByDiscriminatorValue.put("_object", org.openapitools.client.model.ModelObject.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.Participant.class, new TypeSelector<org.openapitools.client.model.Participant>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.Participant> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("participant", org.openapitools.client.model.Participant.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.Pipeline.class, new TypeSelector<org.openapitools.client.model.Pipeline>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.Pipeline> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("pipeline", org.openapitools.client.model.Pipeline.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.PipelineBuildNumber.class, new TypeSelector<org.openapitools.client.model.PipelineBuildNumber>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.PipelineBuildNumber> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("pipeline_build_number", org.openapitools.client.model.PipelineBuildNumber.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.PipelineCache.class, new TypeSelector<org.openapitools.client.model.PipelineCache>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.PipelineCache> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("pipeline_cache", org.openapitools.client.model.PipelineCache.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.PipelineCommitTarget.class, new TypeSelector<org.openapitools.client.model.PipelineCommitTarget>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.PipelineCommitTarget> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("pipeline_commit_target", org.openapitools.client.model.PipelineCommitTarget.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.PipelineError.class, new TypeSelector<org.openapitools.client.model.PipelineError>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.PipelineError> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("pipeline_error", org.openapitools.client.model.PipelineError.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.PipelineKnownHost.class, new TypeSelector<org.openapitools.client.model.PipelineKnownHost>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.PipelineKnownHost> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("pipeline_known_host", org.openapitools.client.model.PipelineKnownHost.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.PipelineRefTarget.class, new TypeSelector<org.openapitools.client.model.PipelineRefTarget>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.PipelineRefTarget> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("pipeline_ref_target", org.openapitools.client.model.PipelineRefTarget.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.PipelineSchedule.class, new TypeSelector<org.openapitools.client.model.PipelineSchedule>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.PipelineSchedule> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("pipeline_schedule", org.openapitools.client.model.PipelineSchedule.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.PipelineScheduleExecution.class, new TypeSelector<org.openapitools.client.model.PipelineScheduleExecution>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.PipelineScheduleExecution> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("pipeline_schedule_execution_errored", org.openapitools.client.model.PipelineScheduleExecutionErrored.class);
                        classByDiscriminatorValue.put("pipeline_schedule_execution_executed", org.openapitools.client.model.PipelineScheduleExecutionExecuted.class);
                        classByDiscriminatorValue.put("pipeline_schedule_execution", org.openapitools.client.model.PipelineScheduleExecution.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.PipelineScheduleExecutionErrored.class, new TypeSelector<org.openapitools.client.model.PipelineScheduleExecutionErrored>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.PipelineScheduleExecutionErrored> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("pipeline_schedule_execution_errored", org.openapitools.client.model.PipelineScheduleExecutionErrored.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.PipelineScheduleExecutionExecuted.class, new TypeSelector<org.openapitools.client.model.PipelineScheduleExecutionExecuted>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.PipelineScheduleExecutionExecuted> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("pipeline_schedule_execution_executed", org.openapitools.client.model.PipelineScheduleExecutionExecuted.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.PipelineSchedulePostRequestBody.class, new TypeSelector<org.openapitools.client.model.PipelineSchedulePostRequestBody>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.PipelineSchedulePostRequestBody> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("pipeline_schedule_post_request_body", org.openapitools.client.model.PipelineSchedulePostRequestBody.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.PipelineSchedulePutRequestBody.class, new TypeSelector<org.openapitools.client.model.PipelineSchedulePutRequestBody>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.PipelineSchedulePutRequestBody> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("pipeline_schedule_put_request_body", org.openapitools.client.model.PipelineSchedulePutRequestBody.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.PipelineSelector.class, new TypeSelector<org.openapitools.client.model.PipelineSelector>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.PipelineSelector> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("pipeline_selector", org.openapitools.client.model.PipelineSelector.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.PipelineSshKeyPair.class, new TypeSelector<org.openapitools.client.model.PipelineSshKeyPair>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.PipelineSshKeyPair> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("pipeline_ssh_key_pair", org.openapitools.client.model.PipelineSshKeyPair.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.PipelineSshPublicKey.class, new TypeSelector<org.openapitools.client.model.PipelineSshPublicKey>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.PipelineSshPublicKey> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("pipeline_ssh_public_key", org.openapitools.client.model.PipelineSshPublicKey.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.PipelineState.class, new TypeSelector<org.openapitools.client.model.PipelineState>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.PipelineState> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("pipeline_state_completed", org.openapitools.client.model.PipelineStateCompleted.class);
                        classByDiscriminatorValue.put("pipeline_state_in_progress", org.openapitools.client.model.PipelineStateInProgress.class);
                        classByDiscriminatorValue.put("pipeline_state_pending", org.openapitools.client.model.PipelineStatePending.class);
                        classByDiscriminatorValue.put("pipeline_state", org.openapitools.client.model.PipelineState.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.PipelineStateCompleted.class, new TypeSelector<org.openapitools.client.model.PipelineStateCompleted>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.PipelineStateCompleted> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("pipeline_state_completed", org.openapitools.client.model.PipelineStateCompleted.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.PipelineStateCompletedError.class, new TypeSelector<org.openapitools.client.model.PipelineStateCompletedError>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.PipelineStateCompletedError> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("pipeline_state_completed_error", org.openapitools.client.model.PipelineStateCompletedError.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.PipelineStateCompletedExpired.class, new TypeSelector<org.openapitools.client.model.PipelineStateCompletedExpired>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.PipelineStateCompletedExpired> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("pipeline_state_completed_expired", org.openapitools.client.model.PipelineStateCompletedExpired.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.PipelineStateCompletedFailed.class, new TypeSelector<org.openapitools.client.model.PipelineStateCompletedFailed>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.PipelineStateCompletedFailed> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("pipeline_state_completed_failed", org.openapitools.client.model.PipelineStateCompletedFailed.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.PipelineStateCompletedResult.class, new TypeSelector<org.openapitools.client.model.PipelineStateCompletedResult>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.PipelineStateCompletedResult> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("pipeline_state_completed_error", org.openapitools.client.model.PipelineStateCompletedError.class);
                        classByDiscriminatorValue.put("pipeline_state_completed_expired", org.openapitools.client.model.PipelineStateCompletedExpired.class);
                        classByDiscriminatorValue.put("pipeline_state_completed_failed", org.openapitools.client.model.PipelineStateCompletedFailed.class);
                        classByDiscriminatorValue.put("pipeline_state_completed_stopped", org.openapitools.client.model.PipelineStateCompletedStopped.class);
                        classByDiscriminatorValue.put("pipeline_state_completed_successful", org.openapitools.client.model.PipelineStateCompletedSuccessful.class);
                        classByDiscriminatorValue.put("pipeline_state_completed_result", org.openapitools.client.model.PipelineStateCompletedResult.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.PipelineStateCompletedStopped.class, new TypeSelector<org.openapitools.client.model.PipelineStateCompletedStopped>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.PipelineStateCompletedStopped> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("pipeline_state_completed_stopped", org.openapitools.client.model.PipelineStateCompletedStopped.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.PipelineStateCompletedSuccessful.class, new TypeSelector<org.openapitools.client.model.PipelineStateCompletedSuccessful>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.PipelineStateCompletedSuccessful> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("pipeline_state_completed_successful", org.openapitools.client.model.PipelineStateCompletedSuccessful.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.PipelineStateInProgress.class, new TypeSelector<org.openapitools.client.model.PipelineStateInProgress>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.PipelineStateInProgress> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("pipeline_state_in_progress", org.openapitools.client.model.PipelineStateInProgress.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.PipelineStateInProgressPaused.class, new TypeSelector<org.openapitools.client.model.PipelineStateInProgressPaused>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.PipelineStateInProgressPaused> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("pipeline_state_in_progress_paused", org.openapitools.client.model.PipelineStateInProgressPaused.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.PipelineStateInProgressRunning.class, new TypeSelector<org.openapitools.client.model.PipelineStateInProgressRunning>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.PipelineStateInProgressRunning> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("pipeline_state_in_progress_running", org.openapitools.client.model.PipelineStateInProgressRunning.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.PipelineStateInProgressStage.class, new TypeSelector<org.openapitools.client.model.PipelineStateInProgressStage>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.PipelineStateInProgressStage> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("pipeline_state_in_progress_paused", org.openapitools.client.model.PipelineStateInProgressPaused.class);
                        classByDiscriminatorValue.put("pipeline_state_in_progress_running", org.openapitools.client.model.PipelineStateInProgressRunning.class);
                        classByDiscriminatorValue.put("pipeline_state_in_progress_stage", org.openapitools.client.model.PipelineStateInProgressStage.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.PipelineStatePending.class, new TypeSelector<org.openapitools.client.model.PipelineStatePending>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.PipelineStatePending> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("pipeline_state_pending", org.openapitools.client.model.PipelineStatePending.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.PipelineStep.class, new TypeSelector<org.openapitools.client.model.PipelineStep>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.PipelineStep> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("pipeline_step", org.openapitools.client.model.PipelineStep.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.PipelineStepError.class, new TypeSelector<org.openapitools.client.model.PipelineStepError>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.PipelineStepError> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("pipeline_step_error", org.openapitools.client.model.PipelineStepError.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.PipelineStepState.class, new TypeSelector<org.openapitools.client.model.PipelineStepState>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.PipelineStepState> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("pipeline_step_state_completed", org.openapitools.client.model.PipelineStepStateCompleted.class);
                        classByDiscriminatorValue.put("pipeline_step_state_in_progress", org.openapitools.client.model.PipelineStepStateInProgress.class);
                        classByDiscriminatorValue.put("pipeline_step_state_pending", org.openapitools.client.model.PipelineStepStatePending.class);
                        classByDiscriminatorValue.put("pipeline_step_state_ready", org.openapitools.client.model.PipelineStepStateReady.class);
                        classByDiscriminatorValue.put("pipeline_step_state", org.openapitools.client.model.PipelineStepState.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.PipelineStepStateCompleted.class, new TypeSelector<org.openapitools.client.model.PipelineStepStateCompleted>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.PipelineStepStateCompleted> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("pipeline_step_state_completed", org.openapitools.client.model.PipelineStepStateCompleted.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.PipelineStepStateCompletedError.class, new TypeSelector<org.openapitools.client.model.PipelineStepStateCompletedError>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.PipelineStepStateCompletedError> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("pipeline_step_state_completed_error", org.openapitools.client.model.PipelineStepStateCompletedError.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.PipelineStepStateCompletedExpired.class, new TypeSelector<org.openapitools.client.model.PipelineStepStateCompletedExpired>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.PipelineStepStateCompletedExpired> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("pipeline_step_state_completed_expired", org.openapitools.client.model.PipelineStepStateCompletedExpired.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.PipelineStepStateCompletedFailed.class, new TypeSelector<org.openapitools.client.model.PipelineStepStateCompletedFailed>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.PipelineStepStateCompletedFailed> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("pipeline_step_state_completed_failed", org.openapitools.client.model.PipelineStepStateCompletedFailed.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.PipelineStepStateCompletedNotRun.class, new TypeSelector<org.openapitools.client.model.PipelineStepStateCompletedNotRun>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.PipelineStepStateCompletedNotRun> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("pipeline_step_state_completed_not_run", org.openapitools.client.model.PipelineStepStateCompletedNotRun.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.PipelineStepStateCompletedResult.class, new TypeSelector<org.openapitools.client.model.PipelineStepStateCompletedResult>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.PipelineStepStateCompletedResult> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("pipeline_step_state_completed_error", org.openapitools.client.model.PipelineStepStateCompletedError.class);
                        classByDiscriminatorValue.put("pipeline_step_state_completed_expired", org.openapitools.client.model.PipelineStepStateCompletedExpired.class);
                        classByDiscriminatorValue.put("pipeline_step_state_completed_failed", org.openapitools.client.model.PipelineStepStateCompletedFailed.class);
                        classByDiscriminatorValue.put("pipeline_step_state_completed_not_run", org.openapitools.client.model.PipelineStepStateCompletedNotRun.class);
                        classByDiscriminatorValue.put("pipeline_step_state_completed_stopped", org.openapitools.client.model.PipelineStepStateCompletedStopped.class);
                        classByDiscriminatorValue.put("pipeline_step_state_completed_successful", org.openapitools.client.model.PipelineStepStateCompletedSuccessful.class);
                        classByDiscriminatorValue.put("pipeline_step_state_completed_result", org.openapitools.client.model.PipelineStepStateCompletedResult.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.PipelineStepStateCompletedStopped.class, new TypeSelector<org.openapitools.client.model.PipelineStepStateCompletedStopped>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.PipelineStepStateCompletedStopped> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("pipeline_step_state_completed_stopped", org.openapitools.client.model.PipelineStepStateCompletedStopped.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.PipelineStepStateCompletedSuccessful.class, new TypeSelector<org.openapitools.client.model.PipelineStepStateCompletedSuccessful>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.PipelineStepStateCompletedSuccessful> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("pipeline_step_state_completed_successful", org.openapitools.client.model.PipelineStepStateCompletedSuccessful.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.PipelineStepStateInProgress.class, new TypeSelector<org.openapitools.client.model.PipelineStepStateInProgress>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.PipelineStepStateInProgress> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("pipeline_step_state_in_progress", org.openapitools.client.model.PipelineStepStateInProgress.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.PipelineStepStatePending.class, new TypeSelector<org.openapitools.client.model.PipelineStepStatePending>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.PipelineStepStatePending> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("pipeline_step_state_pending", org.openapitools.client.model.PipelineStepStatePending.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.PipelineStepStateReady.class, new TypeSelector<org.openapitools.client.model.PipelineStepStateReady>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.PipelineStepStateReady> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("pipeline_step_state_ready", org.openapitools.client.model.PipelineStepStateReady.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.PipelineTarget.class, new TypeSelector<org.openapitools.client.model.PipelineTarget>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.PipelineTarget> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("pipeline_commit_target", org.openapitools.client.model.PipelineCommitTarget.class);
                        classByDiscriminatorValue.put("pipeline_ref_target", org.openapitools.client.model.PipelineRefTarget.class);
                        classByDiscriminatorValue.put("pipeline_target", org.openapitools.client.model.PipelineTarget.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.PipelineTrigger.class, new TypeSelector<org.openapitools.client.model.PipelineTrigger>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.PipelineTrigger> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("pipeline_trigger_manual", org.openapitools.client.model.PipelineTriggerManual.class);
                        classByDiscriminatorValue.put("pipeline_trigger_push", org.openapitools.client.model.PipelineTriggerPush.class);
                        classByDiscriminatorValue.put("pipeline_trigger", org.openapitools.client.model.PipelineTrigger.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.PipelineTriggerManual.class, new TypeSelector<org.openapitools.client.model.PipelineTriggerManual>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.PipelineTriggerManual> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("pipeline_trigger_manual", org.openapitools.client.model.PipelineTriggerManual.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.PipelineTriggerPush.class, new TypeSelector<org.openapitools.client.model.PipelineTriggerPush>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.PipelineTriggerPush> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("pipeline_trigger_push", org.openapitools.client.model.PipelineTriggerPush.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.PipelineVariable.class, new TypeSelector<org.openapitools.client.model.PipelineVariable>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.PipelineVariable> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("pipeline_variable", org.openapitools.client.model.PipelineVariable.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.PipelinesConfig.class, new TypeSelector<org.openapitools.client.model.PipelinesConfig>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.PipelinesConfig> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("pipelines_config", org.openapitools.client.model.PipelinesConfig.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.PipelinesDdevPipelineStep.class, new TypeSelector<org.openapitools.client.model.PipelinesDdevPipelineStep>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.PipelinesDdevPipelineStep> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("pipelines_ddev_pipeline_step", org.openapitools.client.model.PipelinesDdevPipelineStep.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.PipelinesStgWestPipelineStep.class, new TypeSelector<org.openapitools.client.model.PipelinesStgWestPipelineStep>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.PipelinesStgWestPipelineStep> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("pipelines_stg_west_pipeline_step", org.openapitools.client.model.PipelinesStgWestPipelineStep.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.Project.class, new TypeSelector<org.openapitools.client.model.Project>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.Project> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("project", org.openapitools.client.model.Project.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.ProjectBranchingModel.class, new TypeSelector<org.openapitools.client.model.ProjectBranchingModel>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.ProjectBranchingModel> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("project_branching_model", org.openapitools.client.model.ProjectBranchingModel.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.ProjectDeployKey.class, new TypeSelector<org.openapitools.client.model.ProjectDeployKey>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.ProjectDeployKey> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("project_deploy_key", org.openapitools.client.model.ProjectDeployKey.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.Pullrequest.class, new TypeSelector<org.openapitools.client.model.Pullrequest>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.Pullrequest> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("pullrequest", org.openapitools.client.model.Pullrequest.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.PullrequestComment.class, new TypeSelector<org.openapitools.client.model.PullrequestComment>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.PullrequestComment> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("pullrequest_comment", org.openapitools.client.model.PullrequestComment.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.Report.class, new TypeSelector<org.openapitools.client.model.Report>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.Report> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("report", org.openapitools.client.model.Report.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.ReportAnnotation.class, new TypeSelector<org.openapitools.client.model.ReportAnnotation>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.ReportAnnotation> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("report_annotation", org.openapitools.client.model.ReportAnnotation.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.Repository.class, new TypeSelector<org.openapitools.client.model.Repository>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.Repository> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("repository", org.openapitools.client.model.Repository.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.Snippet.class, new TypeSelector<org.openapitools.client.model.Snippet>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.Snippet> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("snippet", org.openapitools.client.model.Snippet.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.SnippetComment.class, new TypeSelector<org.openapitools.client.model.SnippetComment>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.SnippetComment> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("snippet_comment", org.openapitools.client.model.SnippetComment.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.SnippetCommit.class, new TypeSelector<org.openapitools.client.model.SnippetCommit>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.SnippetCommit> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("snippet_commit", org.openapitools.client.model.SnippetCommit.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.SshAccountKey.class, new TypeSelector<org.openapitools.client.model.SshAccountKey>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.SshAccountKey> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("ssh_account_key", org.openapitools.client.model.SshAccountKey.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.SshKey.class, new TypeSelector<org.openapitools.client.model.SshKey>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.SshKey> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("ssh_account_key", org.openapitools.client.model.SshAccountKey.class);
                        classByDiscriminatorValue.put("ssh_key", org.openapitools.client.model.SshKey.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.StgWestReport.class, new TypeSelector<org.openapitools.client.model.StgWestReport>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.StgWestReport> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("stg_west_report", org.openapitools.client.model.StgWestReport.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.Team.class, new TypeSelector<org.openapitools.client.model.Team>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.Team> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("team", org.openapitools.client.model.Team.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.User.class, new TypeSelector<org.openapitools.client.model.User>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.User> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("user", org.openapitools.client.model.User.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.Version.class, new TypeSelector<org.openapitools.client.model.Version>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.Version> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("version", org.openapitools.client.model.Version.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.WebhookSubscription.class, new TypeSelector<org.openapitools.client.model.WebhookSubscription>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.WebhookSubscription> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("webhook_subscription", org.openapitools.client.model.WebhookSubscription.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.Workspace.class, new TypeSelector<org.openapitools.client.model.Workspace>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.Workspace> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("workspace", org.openapitools.client.model.Workspace.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.WorkspaceMembership.class, new TypeSelector<org.openapitools.client.model.WorkspaceMembership>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.WorkspaceMembership> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("workspace_membership", org.openapitools.client.model.WorkspaceMembership.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
        ;
        GsonBuilder builder = fireBuilder.createGsonBuilder();
        return builder;
    }

    private static String getDiscriminatorValue(JsonElement readElement, String discriminatorField) {
        JsonElement element = readElement.getAsJsonObject().get(discriminatorField);
        if (null == element) {
            throw new IllegalArgumentException("missing discriminator field: <" + discriminatorField + ">");
        }
        return element.getAsString();
    }

    /**
     * Returns the Java class that implements the OpenAPI schema for the specified discriminator value.
     *
     * @param classByDiscriminatorValue The map of discriminator values to Java classes.
     * @param discriminatorValue The value of the OpenAPI discriminator in the input data.
     * @return The Java class that implements the OpenAPI schema
     */
    private static Class getClassByDiscriminator(Map classByDiscriminatorValue, String discriminatorValue) {
        Class clazz = (Class) classByDiscriminatorValue.get(discriminatorValue);
        if (null == clazz) {
            throw new IllegalArgumentException("cannot determine model class of name: <" + discriminatorValue + ">");
        }
        return clazz;
    }

    static {
        GsonBuilder gsonBuilder = createGson();
        gsonBuilder.registerTypeAdapter(Date.class, dateTypeAdapter);
        gsonBuilder.registerTypeAdapter(java.sql.Date.class, sqlDateTypeAdapter);
        gsonBuilder.registerTypeAdapter(OffsetDateTime.class, offsetDateTimeTypeAdapter);
        gsonBuilder.registerTypeAdapter(LocalDate.class, localDateTypeAdapter);
        gsonBuilder.registerTypeAdapter(byte[].class, byteArrayAdapter);
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.AccountLinks.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.AppUser.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.ApplicationProperty.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.Author.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.BaseCommitSummary.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.Branch.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.BranchingModel.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.BranchingModelBranchTypes.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.BranchingModelDevelopment.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.BranchingModelSettings.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.BranchingModelSettingsBranchTypes.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.BranchingModelSettingsDevelopment.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.BranchingModelSettingsLinks.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.BranchingModelSettingsProduction.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.Branchrestriction.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.CommentInline.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.CommentLinks.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.CommentResolution.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.Commit.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.CommitComment.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.CommitFile.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.CommitStatusLinks.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.Commitstatus.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.Component.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.DdevReport.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.DefaultReviewerAndType.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.DeployKey.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.Deployment.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.DeploymentEnvironment.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.DeploymentEnvironmentLock.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.DeploymentRelease.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.DeploymentStateCompleted.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.DeploymentStateCompletedStatusFailed.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.DeploymentStateCompletedStatusStopped.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.DeploymentStateCompletedStatusSuccessful.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.DeploymentStateInProgress.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.DeploymentStateUndeployed.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.DeploymentVariable.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.DeploymentsDdevDeploymentEnvironment.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.DeploymentsDdevDeploymentEnvironmentLock.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.DeploymentsDdevPaginatedEnvironments.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.DeploymentsStgWestDeploymentEnvironment.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.DeploymentsStgWestDeploymentEnvironmentLock.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.DeploymentsStgWestPaginatedEnvironments.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.Diffstat.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.EffectiveRepoBranchingModel.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.Error.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.ErrorError.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.ExportOptions.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.Group.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.GroupLinks.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.HookEvent.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.Issue.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.IssueAttachment.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.IssueChange.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.IssueChangeChanges.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.IssueChangeChangesAssignee.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.IssueChangeLinks.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.IssueChangeMessage.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.IssueComment.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.IssueJobStatus.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.IssueLinks.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.JiraProject.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.JiraSite.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.Link.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.Link1.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.Milestone.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.Page.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PaginatedAccounts.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PaginatedAnnotations.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PaginatedBranches.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PaginatedBranchrestrictions.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PaginatedChangeset.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PaginatedCommitComments.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PaginatedCommitstatuses.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PaginatedComponents.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PaginatedDefaultReviewerAndType.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PaginatedDeployKeys.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PaginatedDeploymentVariable.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PaginatedDeployments.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PaginatedDiffstats.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PaginatedEnvironments.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PaginatedFiles.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PaginatedHookEvents.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PaginatedIssueAttachments.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PaginatedIssueComments.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PaginatedIssues.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PaginatedLogEntries.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PaginatedMilestones.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PaginatedPipelineCaches.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PaginatedPipelineKnownHosts.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PaginatedPipelineScheduleExecutions.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PaginatedPipelineSchedules.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PaginatedPipelineSteps.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PaginatedPipelineVariables.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PaginatedPipelines.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PaginatedProjectDeployKeys.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PaginatedProjects.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PaginatedPullrequestComments.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PaginatedPullrequests.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PaginatedRefs.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PaginatedReports.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PaginatedRepositories.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PaginatedRepositoryGroupPermissions.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PaginatedRepositoryPermissions.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PaginatedRepositoryUserPermissions.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PaginatedSnippetComments.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PaginatedSnippetCommit.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PaginatedSnippets.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PaginatedSshUserKeys.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PaginatedTags.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PaginatedTreeentries.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PaginatedVersions.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PaginatedWebhookSubscriptions.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PaginatedWorkspaceMemberships.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PaginatedWorkspaces.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.Participant.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.Pipeline.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PipelineBuildNumber.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PipelineCache.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PipelineCacheContentUri.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PipelineCommand.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PipelineCommitTarget.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PipelineError.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PipelineImage.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PipelineKnownHost.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PipelineRefTarget.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PipelineSchedule.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PipelineScheduleExecutionErrored.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PipelineScheduleExecutionExecuted.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PipelineSchedulePostRequestBody.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PipelineSchedulePutRequestBody.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PipelineSelector.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PipelineSshKeyPair.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PipelineSshPublicKey.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PipelineStateCompleted.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PipelineStateCompletedError.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PipelineStateCompletedExpired.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PipelineStateCompletedFailed.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PipelineStateCompletedStopped.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PipelineStateCompletedSuccessful.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PipelineStateInProgress.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PipelineStateInProgressPaused.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PipelineStateInProgressRunning.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PipelineStatePending.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PipelineStep.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PipelineStepError.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PipelineStepStateCompleted.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PipelineStepStateCompletedError.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PipelineStepStateCompletedExpired.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PipelineStepStateCompletedFailed.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PipelineStepStateCompletedNotRun.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PipelineStepStateCompletedStopped.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PipelineStepStateCompletedSuccessful.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PipelineStepStateInProgress.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PipelineStepStatePending.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PipelineStepStateReady.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PipelineTriggerManual.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PipelineTriggerPush.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PipelineVariable.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PipelinesConfig.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PipelinesDdevPipelineStep.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PipelinesStgWestPipelineStep.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.Project.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.ProjectBranchingModel.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.ProjectBranchingModelDevelopment.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.ProjectDeployKey.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.ProjectLinks.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PullRequestBranch.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PullRequestCommit.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PullRequestCommit1.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PullRequestLinks.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.Pullrequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PullrequestComment.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PullrequestEndpoint.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PullrequestMergeParameters.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.Ref.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.RefLinks.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.RenderedPullRequestMarkup.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.Report.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.ReportAnnotation.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.ReportData.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.Repository.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.RepositoryGroupPermission.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.RepositoryGroupPermissionLinks.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.RepositoryInheritanceState.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.RepositoryLinks.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.RepositoryPermission.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.RepositoryUserPermission.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.RequestBodyForPipelineSchedulePOSTRequestTarget.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.SearchCodeSearchResult.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.SearchContentMatch.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.SearchLine.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.SearchResultPage.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.SearchSegment.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.Snippet.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.SnippetComment.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.SnippetCommit.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.SnippetCommitLinks.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.SshAccountKey.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.StgWestReport.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.SubjectTypes.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.SubjectTypesRepository.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.Tag.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.Team.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.TeamLinks.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.Treeentry.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.User.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.UserLinks.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.Version.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.WebhookSubscription.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.Workspace.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.WorkspaceLinks.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.WorkspaceMembership.CustomTypeAdapterFactory());
        gson = gsonBuilder.create();
    }

    /**
     * Get Gson.
     *
     * @return Gson
     */
    public static Gson getGson() {
        return gson;
    }

    /**
     * Set Gson.
     *
     * @param gson Gson
     */
    public static void setGson(Gson gson) {
        JSON.gson = gson;
    }

    public static void setLenientOnJson(boolean lenientOnJson) {
        isLenientOnJson = lenientOnJson;
    }

    /**
     * Serialize the given Java object into JSON string.
     *
     * @param obj Object
     * @return String representation of the JSON
     */
    public static String serialize(Object obj) {
        return gson.toJson(obj);
    }

    /**
     * Deserialize the given JSON string to Java object.
     *
     * @param <T>        Type
     * @param body       The JSON string
     * @param returnType The type to deserialize into
     * @return The deserialized Java object
     */
    @SuppressWarnings("unchecked")
    public static <T> T deserialize(String body, Type returnType) {
        try {
            if (isLenientOnJson) {
                JsonReader jsonReader = new JsonReader(new StringReader(body));
                // see https://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/stream/JsonReader.html#setLenient(boolean)
                jsonReader.setLenient(true);
                return gson.fromJson(jsonReader, returnType);
            } else {
                return gson.fromJson(body, returnType);
            }
        } catch (JsonParseException e) {
            // Fallback processing when failed to parse JSON form response body:
            // return the response body string directly for the String return type;
            if (returnType.equals(String.class)) {
                return (T) body;
            } else {
                throw (e);
            }
        }
    }

    /**
     * Gson TypeAdapter for Byte Array type
     */
    public static class ByteArrayAdapter extends TypeAdapter<byte[]> {

        @Override
        public void write(JsonWriter out, byte[] value) throws IOException {
            if (value == null) {
                out.nullValue();
            } else {
                out.value(ByteString.of(value).base64());
            }
        }

        @Override
        public byte[] read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String bytesAsBase64 = in.nextString();
                    ByteString byteString = ByteString.decodeBase64(bytesAsBase64);
                    return byteString.toByteArray();
            }
        }
    }

    /**
     * Gson TypeAdapter for JSR310 OffsetDateTime type
     */
    public static class OffsetDateTimeTypeAdapter extends TypeAdapter<OffsetDateTime> {

        private DateTimeFormatter formatter;

        public OffsetDateTimeTypeAdapter() {
            this(DateTimeFormatter.ISO_OFFSET_DATE_TIME);
        }

        public OffsetDateTimeTypeAdapter(DateTimeFormatter formatter) {
            this.formatter = formatter;
        }

        public void setFormat(DateTimeFormatter dateFormat) {
            this.formatter = dateFormat;
        }

        @Override
        public void write(JsonWriter out, OffsetDateTime date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                out.value(formatter.format(date));
            }
        }

        @Override
        public OffsetDateTime read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    if (date.endsWith("+0000")) {
                        date = date.substring(0, date.length()-5) + "Z";
                    }
                    return OffsetDateTime.parse(date, formatter);
            }
        }
    }

    /**
     * Gson TypeAdapter for JSR310 LocalDate type
     */
    public static class LocalDateTypeAdapter extends TypeAdapter<LocalDate> {

        private DateTimeFormatter formatter;

        public LocalDateTypeAdapter() {
            this(DateTimeFormatter.ISO_LOCAL_DATE);
        }

        public LocalDateTypeAdapter(DateTimeFormatter formatter) {
            this.formatter = formatter;
        }

        public void setFormat(DateTimeFormatter dateFormat) {
            this.formatter = dateFormat;
        }

        @Override
        public void write(JsonWriter out, LocalDate date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                out.value(formatter.format(date));
            }
        }

        @Override
        public LocalDate read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    return LocalDate.parse(date, formatter);
            }
        }
    }

    public static void setOffsetDateTimeFormat(DateTimeFormatter dateFormat) {
        offsetDateTimeTypeAdapter.setFormat(dateFormat);
    }

    public static void setLocalDateFormat(DateTimeFormatter dateFormat) {
        localDateTypeAdapter.setFormat(dateFormat);
    }

    /**
     * Gson TypeAdapter for java.sql.Date type
     * If the dateFormat is null, a simple "yyyy-MM-dd" format will be used
     * (more efficient than SimpleDateFormat).
     */
    public static class SqlDateTypeAdapter extends TypeAdapter<java.sql.Date> {

        private DateFormat dateFormat;

        public SqlDateTypeAdapter() {}

        public SqlDateTypeAdapter(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        public void setFormat(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        @Override
        public void write(JsonWriter out, java.sql.Date date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                String value;
                if (dateFormat != null) {
                    value = dateFormat.format(date);
                } else {
                    value = date.toString();
                }
                out.value(value);
            }
        }

        @Override
        public java.sql.Date read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    try {
                        if (dateFormat != null) {
                            return new java.sql.Date(dateFormat.parse(date).getTime());
                        }
                        return new java.sql.Date(ISO8601Utils.parse(date, new ParsePosition(0)).getTime());
                    } catch (ParseException e) {
                        throw new JsonParseException(e);
                    }
            }
        }
    }

    /**
     * Gson TypeAdapter for java.util.Date type
     * If the dateFormat is null, ISO8601Utils will be used.
     */
    public static class DateTypeAdapter extends TypeAdapter<Date> {

        private DateFormat dateFormat;

        public DateTypeAdapter() {}

        public DateTypeAdapter(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        public void setFormat(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        @Override
        public void write(JsonWriter out, Date date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                String value;
                if (dateFormat != null) {
                    value = dateFormat.format(date);
                } else {
                    value = ISO8601Utils.format(date, true);
                }
                out.value(value);
            }
        }

        @Override
        public Date read(JsonReader in) throws IOException {
            try {
                switch (in.peek()) {
                    case NULL:
                        in.nextNull();
                        return null;
                    default:
                        String date = in.nextString();
                        try {
                            if (dateFormat != null) {
                                return dateFormat.parse(date);
                            }
                            return ISO8601Utils.parse(date, new ParsePosition(0));
                        } catch (ParseException e) {
                            throw new JsonParseException(e);
                        }
                }
            } catch (IllegalArgumentException e) {
                throw new JsonParseException(e);
            }
        }
    }

    public static void setDateFormat(DateFormat dateFormat) {
        dateTypeAdapter.setFormat(dateFormat);
    }

    public static void setSqlDateFormat(DateFormat dateFormat) {
        sqlDateTypeAdapter.setFormat(dateFormat);
    }
}
