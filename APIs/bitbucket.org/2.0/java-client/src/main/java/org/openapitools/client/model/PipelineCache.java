/*
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.ModelObject;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PipelineCache
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:00:39.758646-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PipelineCache extends ModelObject {
  public static final String SERIALIZED_NAME_CREATED_ON = "created_on";
  @SerializedName(SERIALIZED_NAME_CREATED_ON)
  private OffsetDateTime createdOn;

  public static final String SERIALIZED_NAME_FILE_SIZE_BYTES = "file_size_bytes";
  @SerializedName(SERIALIZED_NAME_FILE_SIZE_BYTES)
  private Integer fileSizeBytes;

  public static final String SERIALIZED_NAME_KEY_HASH = "key_hash";
  @SerializedName(SERIALIZED_NAME_KEY_HASH)
  private String keyHash;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_PIPELINE_UUID = "pipeline_uuid";
  @SerializedName(SERIALIZED_NAME_PIPELINE_UUID)
  private String pipelineUuid;

  public static final String SERIALIZED_NAME_STEP_UUID = "step_uuid";
  @SerializedName(SERIALIZED_NAME_STEP_UUID)
  private String stepUuid;

  public static final String SERIALIZED_NAME_UUID = "uuid";
  @SerializedName(SERIALIZED_NAME_UUID)
  private String uuid;

  public PipelineCache() {
    this.type = this.getClass().getSimpleName();
  }

  public PipelineCache createdOn(OffsetDateTime createdOn) {
    this.createdOn = createdOn;
    return this;
  }

  /**
   * The timestamp when the cache was created.
   * @return createdOn
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedOn() {
    return createdOn;
  }

  public void setCreatedOn(OffsetDateTime createdOn) {
    this.createdOn = createdOn;
  }


  public PipelineCache fileSizeBytes(Integer fileSizeBytes) {
    this.fileSizeBytes = fileSizeBytes;
    return this;
  }

  /**
   * The size of the file containing the archive of the cache.
   * @return fileSizeBytes
   */
  @javax.annotation.Nullable
  public Integer getFileSizeBytes() {
    return fileSizeBytes;
  }

  public void setFileSizeBytes(Integer fileSizeBytes) {
    this.fileSizeBytes = fileSizeBytes;
  }


  public PipelineCache keyHash(String keyHash) {
    this.keyHash = keyHash;
    return this;
  }

  /**
   * The key hash of the cache version.
   * @return keyHash
   */
  @javax.annotation.Nullable
  public String getKeyHash() {
    return keyHash;
  }

  public void setKeyHash(String keyHash) {
    this.keyHash = keyHash;
  }


  public PipelineCache name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the cache.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public PipelineCache path(String path) {
    this.path = path;
    return this;
  }

  /**
   * The path where the cache contents were retrieved from.
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public PipelineCache pipelineUuid(String pipelineUuid) {
    this.pipelineUuid = pipelineUuid;
    return this;
  }

  /**
   * The UUID of the pipeline that created the cache.
   * @return pipelineUuid
   */
  @javax.annotation.Nullable
  public String getPipelineUuid() {
    return pipelineUuid;
  }

  public void setPipelineUuid(String pipelineUuid) {
    this.pipelineUuid = pipelineUuid;
  }


  public PipelineCache stepUuid(String stepUuid) {
    this.stepUuid = stepUuid;
    return this;
  }

  /**
   * The uuid of the step that created the cache.
   * @return stepUuid
   */
  @javax.annotation.Nullable
  public String getStepUuid() {
    return stepUuid;
  }

  public void setStepUuid(String stepUuid) {
    this.stepUuid = stepUuid;
  }


  public PipelineCache uuid(String uuid) {
    this.uuid = uuid;
    return this;
  }

  /**
   * The UUID identifying the pipeline cache.
   * @return uuid
   */
  @javax.annotation.Nullable
  public String getUuid() {
    return uuid;
  }

  public void setUuid(String uuid) {
    this.uuid = uuid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PipelineCache pipelineCache = (PipelineCache) o;
    return Objects.equals(this.createdOn, pipelineCache.createdOn) &&
        Objects.equals(this.fileSizeBytes, pipelineCache.fileSizeBytes) &&
        Objects.equals(this.keyHash, pipelineCache.keyHash) &&
        Objects.equals(this.name, pipelineCache.name) &&
        Objects.equals(this.path, pipelineCache.path) &&
        Objects.equals(this.pipelineUuid, pipelineCache.pipelineUuid) &&
        Objects.equals(this.stepUuid, pipelineCache.stepUuid) &&
        Objects.equals(this.uuid, pipelineCache.uuid) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdOn, fileSizeBytes, keyHash, name, path, pipelineUuid, stepUuid, uuid, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PipelineCache {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    createdOn: ").append(toIndentedString(createdOn)).append("\n");
    sb.append("    fileSizeBytes: ").append(toIndentedString(fileSizeBytes)).append("\n");
    sb.append("    keyHash: ").append(toIndentedString(keyHash)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    pipelineUuid: ").append(toIndentedString(pipelineUuid)).append("\n");
    sb.append("    stepUuid: ").append(toIndentedString(stepUuid)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("created_on");
    openapiFields.add("file_size_bytes");
    openapiFields.add("key_hash");
    openapiFields.add("name");
    openapiFields.add("path");
    openapiFields.add("pipeline_uuid");
    openapiFields.add("step_uuid");
    openapiFields.add("uuid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PipelineCache
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PipelineCache.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PipelineCache is not found in the empty JSON string", PipelineCache.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PipelineCache.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PipelineCache` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PipelineCache.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PipelineCache.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PipelineCache' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PipelineCache> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PipelineCache.class));

       return (TypeAdapter<T>) new TypeAdapter<PipelineCache>() {
           @Override
           public void write(JsonWriter out, PipelineCache value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PipelineCache read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PipelineCache given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PipelineCache
   * @throws IOException if the JSON string is invalid with respect to PipelineCache
   */
  public static PipelineCache fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PipelineCache.class);
  }

  /**
   * Convert an instance of PipelineCache to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

