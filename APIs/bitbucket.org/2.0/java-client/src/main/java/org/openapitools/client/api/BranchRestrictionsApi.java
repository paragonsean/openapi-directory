/*
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Branchrestriction;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.PaginatedBranchrestrictions;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BranchRestrictionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BranchRestrictionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BranchRestrictionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for repositoriesWorkspaceRepoSlugBranchRestrictionsGet
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @param kind Branch restrictions of this type (optional)
     * @param pattern Branch restrictions applied to branches of this pattern (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A paginated list of branch restrictions </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If the request was not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If the authenticated user does not have admin access to the repository </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the repository does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repositoriesWorkspaceRepoSlugBranchRestrictionsGetCall(String repoSlug, String workspace, String kind, String pattern, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories/{workspace}/{repo_slug}/branch-restrictions"
            .replace("{" + "repo_slug" + "}", localVarApiClient.escapeString(repoSlug.toString()))
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (kind != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("kind", kind));
        }

        if (pattern != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pattern", pattern));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "oauth2", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repositoriesWorkspaceRepoSlugBranchRestrictionsGetValidateBeforeCall(String repoSlug, String workspace, String kind, String pattern, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'repoSlug' is set
        if (repoSlug == null) {
            throw new ApiException("Missing the required parameter 'repoSlug' when calling repositoriesWorkspaceRepoSlugBranchRestrictionsGet(Async)");
        }

        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling repositoriesWorkspaceRepoSlugBranchRestrictionsGet(Async)");
        }

        return repositoriesWorkspaceRepoSlugBranchRestrictionsGetCall(repoSlug, workspace, kind, pattern, _callback);

    }

    /**
     * List branch restrictions
     * Returns a paginated list of all branch restrictions on the repository.
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @param kind Branch restrictions of this type (optional)
     * @param pattern Branch restrictions applied to branches of this pattern (optional)
     * @return PaginatedBranchrestrictions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A paginated list of branch restrictions </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If the request was not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If the authenticated user does not have admin access to the repository </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the repository does not exist </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedBranchrestrictions repositoriesWorkspaceRepoSlugBranchRestrictionsGet(String repoSlug, String workspace, String kind, String pattern) throws ApiException {
        ApiResponse<PaginatedBranchrestrictions> localVarResp = repositoriesWorkspaceRepoSlugBranchRestrictionsGetWithHttpInfo(repoSlug, workspace, kind, pattern);
        return localVarResp.getData();
    }

    /**
     * List branch restrictions
     * Returns a paginated list of all branch restrictions on the repository.
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @param kind Branch restrictions of this type (optional)
     * @param pattern Branch restrictions applied to branches of this pattern (optional)
     * @return ApiResponse&lt;PaginatedBranchrestrictions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A paginated list of branch restrictions </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If the request was not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If the authenticated user does not have admin access to the repository </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the repository does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedBranchrestrictions> repositoriesWorkspaceRepoSlugBranchRestrictionsGetWithHttpInfo(String repoSlug, String workspace, String kind, String pattern) throws ApiException {
        okhttp3.Call localVarCall = repositoriesWorkspaceRepoSlugBranchRestrictionsGetValidateBeforeCall(repoSlug, workspace, kind, pattern, null);
        Type localVarReturnType = new TypeToken<PaginatedBranchrestrictions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List branch restrictions (asynchronously)
     * Returns a paginated list of all branch restrictions on the repository.
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @param kind Branch restrictions of this type (optional)
     * @param pattern Branch restrictions applied to branches of this pattern (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A paginated list of branch restrictions </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If the request was not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If the authenticated user does not have admin access to the repository </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the repository does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repositoriesWorkspaceRepoSlugBranchRestrictionsGetAsync(String repoSlug, String workspace, String kind, String pattern, final ApiCallback<PaginatedBranchrestrictions> _callback) throws ApiException {

        okhttp3.Call localVarCall = repositoriesWorkspaceRepoSlugBranchRestrictionsGetValidateBeforeCall(repoSlug, workspace, kind, pattern, _callback);
        Type localVarReturnType = new TypeToken<PaginatedBranchrestrictions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repositoriesWorkspaceRepoSlugBranchRestrictionsIdDelete
     * @param id The restriction rule&#39;s id (required)
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If the request was not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If the authenticated user does not have admin access to the repository </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the repository or branch restriction id does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repositoriesWorkspaceRepoSlugBranchRestrictionsIdDeleteCall(String id, String repoSlug, String workspace, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories/{workspace}/{repo_slug}/branch-restrictions/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "repo_slug" + "}", localVarApiClient.escapeString(repoSlug.toString()))
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "oauth2", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repositoriesWorkspaceRepoSlugBranchRestrictionsIdDeleteValidateBeforeCall(String id, String repoSlug, String workspace, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling repositoriesWorkspaceRepoSlugBranchRestrictionsIdDelete(Async)");
        }

        // verify the required parameter 'repoSlug' is set
        if (repoSlug == null) {
            throw new ApiException("Missing the required parameter 'repoSlug' when calling repositoriesWorkspaceRepoSlugBranchRestrictionsIdDelete(Async)");
        }

        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling repositoriesWorkspaceRepoSlugBranchRestrictionsIdDelete(Async)");
        }

        return repositoriesWorkspaceRepoSlugBranchRestrictionsIdDeleteCall(id, repoSlug, workspace, _callback);

    }

    /**
     * Delete a branch restriction rule
     * Deletes an existing branch restriction rule.
     * @param id The restriction rule&#39;s id (required)
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If the request was not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If the authenticated user does not have admin access to the repository </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the repository or branch restriction id does not exist </td><td>  -  </td></tr>
     </table>
     */
    public void repositoriesWorkspaceRepoSlugBranchRestrictionsIdDelete(String id, String repoSlug, String workspace) throws ApiException {
        repositoriesWorkspaceRepoSlugBranchRestrictionsIdDeleteWithHttpInfo(id, repoSlug, workspace);
    }

    /**
     * Delete a branch restriction rule
     * Deletes an existing branch restriction rule.
     * @param id The restriction rule&#39;s id (required)
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If the request was not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If the authenticated user does not have admin access to the repository </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the repository or branch restriction id does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> repositoriesWorkspaceRepoSlugBranchRestrictionsIdDeleteWithHttpInfo(String id, String repoSlug, String workspace) throws ApiException {
        okhttp3.Call localVarCall = repositoriesWorkspaceRepoSlugBranchRestrictionsIdDeleteValidateBeforeCall(id, repoSlug, workspace, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a branch restriction rule (asynchronously)
     * Deletes an existing branch restriction rule.
     * @param id The restriction rule&#39;s id (required)
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If the request was not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If the authenticated user does not have admin access to the repository </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the repository or branch restriction id does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repositoriesWorkspaceRepoSlugBranchRestrictionsIdDeleteAsync(String id, String repoSlug, String workspace, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = repositoriesWorkspaceRepoSlugBranchRestrictionsIdDeleteValidateBeforeCall(id, repoSlug, workspace, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for repositoriesWorkspaceRepoSlugBranchRestrictionsIdGet
     * @param id The restriction rule&#39;s id (required)
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The branch restriction rule </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If the request was not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If the authenticated user does not have admin access to the repository </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the repository or branch restriction id does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repositoriesWorkspaceRepoSlugBranchRestrictionsIdGetCall(String id, String repoSlug, String workspace, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories/{workspace}/{repo_slug}/branch-restrictions/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "repo_slug" + "}", localVarApiClient.escapeString(repoSlug.toString()))
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "oauth2", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repositoriesWorkspaceRepoSlugBranchRestrictionsIdGetValidateBeforeCall(String id, String repoSlug, String workspace, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling repositoriesWorkspaceRepoSlugBranchRestrictionsIdGet(Async)");
        }

        // verify the required parameter 'repoSlug' is set
        if (repoSlug == null) {
            throw new ApiException("Missing the required parameter 'repoSlug' when calling repositoriesWorkspaceRepoSlugBranchRestrictionsIdGet(Async)");
        }

        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling repositoriesWorkspaceRepoSlugBranchRestrictionsIdGet(Async)");
        }

        return repositoriesWorkspaceRepoSlugBranchRestrictionsIdGetCall(id, repoSlug, workspace, _callback);

    }

    /**
     * Get a branch restriction rule
     * Returns a specific branch restriction rule.
     * @param id The restriction rule&#39;s id (required)
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @return Branchrestriction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The branch restriction rule </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If the request was not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If the authenticated user does not have admin access to the repository </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the repository or branch restriction id does not exist </td><td>  -  </td></tr>
     </table>
     */
    public Branchrestriction repositoriesWorkspaceRepoSlugBranchRestrictionsIdGet(String id, String repoSlug, String workspace) throws ApiException {
        ApiResponse<Branchrestriction> localVarResp = repositoriesWorkspaceRepoSlugBranchRestrictionsIdGetWithHttpInfo(id, repoSlug, workspace);
        return localVarResp.getData();
    }

    /**
     * Get a branch restriction rule
     * Returns a specific branch restriction rule.
     * @param id The restriction rule&#39;s id (required)
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @return ApiResponse&lt;Branchrestriction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The branch restriction rule </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If the request was not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If the authenticated user does not have admin access to the repository </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the repository or branch restriction id does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Branchrestriction> repositoriesWorkspaceRepoSlugBranchRestrictionsIdGetWithHttpInfo(String id, String repoSlug, String workspace) throws ApiException {
        okhttp3.Call localVarCall = repositoriesWorkspaceRepoSlugBranchRestrictionsIdGetValidateBeforeCall(id, repoSlug, workspace, null);
        Type localVarReturnType = new TypeToken<Branchrestriction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a branch restriction rule (asynchronously)
     * Returns a specific branch restriction rule.
     * @param id The restriction rule&#39;s id (required)
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The branch restriction rule </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If the request was not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If the authenticated user does not have admin access to the repository </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the repository or branch restriction id does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repositoriesWorkspaceRepoSlugBranchRestrictionsIdGetAsync(String id, String repoSlug, String workspace, final ApiCallback<Branchrestriction> _callback) throws ApiException {

        okhttp3.Call localVarCall = repositoriesWorkspaceRepoSlugBranchRestrictionsIdGetValidateBeforeCall(id, repoSlug, workspace, _callback);
        Type localVarReturnType = new TypeToken<Branchrestriction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repositoriesWorkspaceRepoSlugBranchRestrictionsIdPut
     * @param id The restriction rule&#39;s id (required)
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @param branchrestriction The new version of the existing rule (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated branch restriction rule </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If the request was not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If the authenticated user does not have admin access to the repository </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the repository or branch restriction id does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repositoriesWorkspaceRepoSlugBranchRestrictionsIdPutCall(String id, String repoSlug, String workspace, Branchrestriction branchrestriction, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = branchrestriction;

        // create path and map variables
        String localVarPath = "/repositories/{workspace}/{repo_slug}/branch-restrictions/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "repo_slug" + "}", localVarApiClient.escapeString(repoSlug.toString()))
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "oauth2", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repositoriesWorkspaceRepoSlugBranchRestrictionsIdPutValidateBeforeCall(String id, String repoSlug, String workspace, Branchrestriction branchrestriction, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling repositoriesWorkspaceRepoSlugBranchRestrictionsIdPut(Async)");
        }

        // verify the required parameter 'repoSlug' is set
        if (repoSlug == null) {
            throw new ApiException("Missing the required parameter 'repoSlug' when calling repositoriesWorkspaceRepoSlugBranchRestrictionsIdPut(Async)");
        }

        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling repositoriesWorkspaceRepoSlugBranchRestrictionsIdPut(Async)");
        }

        // verify the required parameter 'branchrestriction' is set
        if (branchrestriction == null) {
            throw new ApiException("Missing the required parameter 'branchrestriction' when calling repositoriesWorkspaceRepoSlugBranchRestrictionsIdPut(Async)");
        }

        return repositoriesWorkspaceRepoSlugBranchRestrictionsIdPutCall(id, repoSlug, workspace, branchrestriction, _callback);

    }

    /**
     * Update a branch restriction rule
     * Updates an existing branch restriction rule.  Fields not present in the request body are ignored.  See [&#x60;POST&#x60;](/cloud/bitbucket/rest/api-group-branch-restrictions/#api-repositories-workspace-repo-slug-branch-restrictions-post) for details.
     * @param id The restriction rule&#39;s id (required)
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @param branchrestriction The new version of the existing rule (required)
     * @return Branchrestriction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated branch restriction rule </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If the request was not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If the authenticated user does not have admin access to the repository </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the repository or branch restriction id does not exist </td><td>  -  </td></tr>
     </table>
     */
    public Branchrestriction repositoriesWorkspaceRepoSlugBranchRestrictionsIdPut(String id, String repoSlug, String workspace, Branchrestriction branchrestriction) throws ApiException {
        ApiResponse<Branchrestriction> localVarResp = repositoriesWorkspaceRepoSlugBranchRestrictionsIdPutWithHttpInfo(id, repoSlug, workspace, branchrestriction);
        return localVarResp.getData();
    }

    /**
     * Update a branch restriction rule
     * Updates an existing branch restriction rule.  Fields not present in the request body are ignored.  See [&#x60;POST&#x60;](/cloud/bitbucket/rest/api-group-branch-restrictions/#api-repositories-workspace-repo-slug-branch-restrictions-post) for details.
     * @param id The restriction rule&#39;s id (required)
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @param branchrestriction The new version of the existing rule (required)
     * @return ApiResponse&lt;Branchrestriction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated branch restriction rule </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If the request was not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If the authenticated user does not have admin access to the repository </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the repository or branch restriction id does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Branchrestriction> repositoriesWorkspaceRepoSlugBranchRestrictionsIdPutWithHttpInfo(String id, String repoSlug, String workspace, Branchrestriction branchrestriction) throws ApiException {
        okhttp3.Call localVarCall = repositoriesWorkspaceRepoSlugBranchRestrictionsIdPutValidateBeforeCall(id, repoSlug, workspace, branchrestriction, null);
        Type localVarReturnType = new TypeToken<Branchrestriction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a branch restriction rule (asynchronously)
     * Updates an existing branch restriction rule.  Fields not present in the request body are ignored.  See [&#x60;POST&#x60;](/cloud/bitbucket/rest/api-group-branch-restrictions/#api-repositories-workspace-repo-slug-branch-restrictions-post) for details.
     * @param id The restriction rule&#39;s id (required)
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @param branchrestriction The new version of the existing rule (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated branch restriction rule </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If the request was not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If the authenticated user does not have admin access to the repository </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the repository or branch restriction id does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repositoriesWorkspaceRepoSlugBranchRestrictionsIdPutAsync(String id, String repoSlug, String workspace, Branchrestriction branchrestriction, final ApiCallback<Branchrestriction> _callback) throws ApiException {

        okhttp3.Call localVarCall = repositoriesWorkspaceRepoSlugBranchRestrictionsIdPutValidateBeforeCall(id, repoSlug, workspace, branchrestriction, _callback);
        Type localVarReturnType = new TypeToken<Branchrestriction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repositoriesWorkspaceRepoSlugBranchRestrictionsPost
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @param branchrestriction The new rule (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A paginated list of branch restrictions </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If the request was not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If the authenticated user does not have admin access to the repository </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the repository does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repositoriesWorkspaceRepoSlugBranchRestrictionsPostCall(String repoSlug, String workspace, Branchrestriction branchrestriction, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = branchrestriction;

        // create path and map variables
        String localVarPath = "/repositories/{workspace}/{repo_slug}/branch-restrictions"
            .replace("{" + "repo_slug" + "}", localVarApiClient.escapeString(repoSlug.toString()))
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "oauth2", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repositoriesWorkspaceRepoSlugBranchRestrictionsPostValidateBeforeCall(String repoSlug, String workspace, Branchrestriction branchrestriction, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'repoSlug' is set
        if (repoSlug == null) {
            throw new ApiException("Missing the required parameter 'repoSlug' when calling repositoriesWorkspaceRepoSlugBranchRestrictionsPost(Async)");
        }

        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling repositoriesWorkspaceRepoSlugBranchRestrictionsPost(Async)");
        }

        // verify the required parameter 'branchrestriction' is set
        if (branchrestriction == null) {
            throw new ApiException("Missing the required parameter 'branchrestriction' when calling repositoriesWorkspaceRepoSlugBranchRestrictionsPost(Async)");
        }

        return repositoriesWorkspaceRepoSlugBranchRestrictionsPostCall(repoSlug, workspace, branchrestriction, _callback);

    }

    /**
     * Create a branch restriction rule
     * Creates a new branch restriction rule for a repository.  &#x60;kind&#x60; describes what will be restricted. Allowed values include: &#x60;push&#x60;, &#x60;force&#x60;, &#x60;delete&#x60; and &#x60;restrict_merges&#x60;.  Different kinds of branch restrictions have different requirements:  * &#x60;push&#x60; and &#x60;restrict_merges&#x60; require &#x60;users&#x60; and &#x60;groups&#x60; to be   specified. Empty lists are allowed, in which case permission is   denied for everybody.  The restriction applies to all branches that match. There are two ways to match a branch. It is configured in &#x60;branch_match_kind&#x60;:  1. &#x60;glob&#x60;: Matches a branch against the &#x60;pattern&#x60;. A &#x60;&#39;*&#39;&#x60; in    &#x60;pattern&#x60; will expand to match zero or more characters, and every    other character matches itself. For example, &#x60;&#39;foo*&#39;&#x60; will match    &#x60;&#39;foo&#39;&#x60; and &#x60;&#39;foobar&#39;&#x60;, but not &#x60;&#39;barfoo&#39;&#x60;. &#x60;&#39;*&#39;&#x60; will match all    branches. 2. &#x60;branching_model&#x60;: Matches a branch against the repository&#39;s    branching model. The &#x60;branch_type&#x60; controls the type of branch    to match. Allowed values include: &#x60;production&#x60;, &#x60;development&#x60;,    &#x60;bugfix&#x60;, &#x60;release&#x60;, &#x60;feature&#x60; and &#x60;hotfix&#x60;.  The combination of &#x60;kind&#x60; and match must be unique. This means that two &#x60;glob&#x60; restrictions in a repository cannot have the same &#x60;kind&#x60; and &#x60;pattern&#x60;. Additionally, two &#x60;branching_model&#x60; restrictions in a repository cannot have the same &#x60;kind&#x60; and &#x60;branch_type&#x60;.  &#x60;users&#x60; and &#x60;groups&#x60; are lists of users and groups that are except from the restriction. They can only be configured in &#x60;push&#x60; and &#x60;restrict_merges&#x60; restrictions. The &#x60;push&#x60; restriction stops a user pushing to matching branches unless that user is in &#x60;users&#x60; or is a member of a group in &#x60;groups&#x60;. The &#x60;restrict_merges&#x60; stops a user merging pull requests to matching branches unless that user is in &#x60;users&#x60; or is a member of a group in &#x60;groups&#x60;. Adding new users or groups to an existing restriction should be done via &#x60;PUT&#x60;.  Note that branch restrictions with overlapping matchers is allowed, but the resulting behavior may be surprising.
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @param branchrestriction The new rule (required)
     * @return Branchrestriction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A paginated list of branch restrictions </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If the request was not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If the authenticated user does not have admin access to the repository </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the repository does not exist </td><td>  -  </td></tr>
     </table>
     */
    public Branchrestriction repositoriesWorkspaceRepoSlugBranchRestrictionsPost(String repoSlug, String workspace, Branchrestriction branchrestriction) throws ApiException {
        ApiResponse<Branchrestriction> localVarResp = repositoriesWorkspaceRepoSlugBranchRestrictionsPostWithHttpInfo(repoSlug, workspace, branchrestriction);
        return localVarResp.getData();
    }

    /**
     * Create a branch restriction rule
     * Creates a new branch restriction rule for a repository.  &#x60;kind&#x60; describes what will be restricted. Allowed values include: &#x60;push&#x60;, &#x60;force&#x60;, &#x60;delete&#x60; and &#x60;restrict_merges&#x60;.  Different kinds of branch restrictions have different requirements:  * &#x60;push&#x60; and &#x60;restrict_merges&#x60; require &#x60;users&#x60; and &#x60;groups&#x60; to be   specified. Empty lists are allowed, in which case permission is   denied for everybody.  The restriction applies to all branches that match. There are two ways to match a branch. It is configured in &#x60;branch_match_kind&#x60;:  1. &#x60;glob&#x60;: Matches a branch against the &#x60;pattern&#x60;. A &#x60;&#39;*&#39;&#x60; in    &#x60;pattern&#x60; will expand to match zero or more characters, and every    other character matches itself. For example, &#x60;&#39;foo*&#39;&#x60; will match    &#x60;&#39;foo&#39;&#x60; and &#x60;&#39;foobar&#39;&#x60;, but not &#x60;&#39;barfoo&#39;&#x60;. &#x60;&#39;*&#39;&#x60; will match all    branches. 2. &#x60;branching_model&#x60;: Matches a branch against the repository&#39;s    branching model. The &#x60;branch_type&#x60; controls the type of branch    to match. Allowed values include: &#x60;production&#x60;, &#x60;development&#x60;,    &#x60;bugfix&#x60;, &#x60;release&#x60;, &#x60;feature&#x60; and &#x60;hotfix&#x60;.  The combination of &#x60;kind&#x60; and match must be unique. This means that two &#x60;glob&#x60; restrictions in a repository cannot have the same &#x60;kind&#x60; and &#x60;pattern&#x60;. Additionally, two &#x60;branching_model&#x60; restrictions in a repository cannot have the same &#x60;kind&#x60; and &#x60;branch_type&#x60;.  &#x60;users&#x60; and &#x60;groups&#x60; are lists of users and groups that are except from the restriction. They can only be configured in &#x60;push&#x60; and &#x60;restrict_merges&#x60; restrictions. The &#x60;push&#x60; restriction stops a user pushing to matching branches unless that user is in &#x60;users&#x60; or is a member of a group in &#x60;groups&#x60;. The &#x60;restrict_merges&#x60; stops a user merging pull requests to matching branches unless that user is in &#x60;users&#x60; or is a member of a group in &#x60;groups&#x60;. Adding new users or groups to an existing restriction should be done via &#x60;PUT&#x60;.  Note that branch restrictions with overlapping matchers is allowed, but the resulting behavior may be surprising.
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @param branchrestriction The new rule (required)
     * @return ApiResponse&lt;Branchrestriction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A paginated list of branch restrictions </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If the request was not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If the authenticated user does not have admin access to the repository </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the repository does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Branchrestriction> repositoriesWorkspaceRepoSlugBranchRestrictionsPostWithHttpInfo(String repoSlug, String workspace, Branchrestriction branchrestriction) throws ApiException {
        okhttp3.Call localVarCall = repositoriesWorkspaceRepoSlugBranchRestrictionsPostValidateBeforeCall(repoSlug, workspace, branchrestriction, null);
        Type localVarReturnType = new TypeToken<Branchrestriction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a branch restriction rule (asynchronously)
     * Creates a new branch restriction rule for a repository.  &#x60;kind&#x60; describes what will be restricted. Allowed values include: &#x60;push&#x60;, &#x60;force&#x60;, &#x60;delete&#x60; and &#x60;restrict_merges&#x60;.  Different kinds of branch restrictions have different requirements:  * &#x60;push&#x60; and &#x60;restrict_merges&#x60; require &#x60;users&#x60; and &#x60;groups&#x60; to be   specified. Empty lists are allowed, in which case permission is   denied for everybody.  The restriction applies to all branches that match. There are two ways to match a branch. It is configured in &#x60;branch_match_kind&#x60;:  1. &#x60;glob&#x60;: Matches a branch against the &#x60;pattern&#x60;. A &#x60;&#39;*&#39;&#x60; in    &#x60;pattern&#x60; will expand to match zero or more characters, and every    other character matches itself. For example, &#x60;&#39;foo*&#39;&#x60; will match    &#x60;&#39;foo&#39;&#x60; and &#x60;&#39;foobar&#39;&#x60;, but not &#x60;&#39;barfoo&#39;&#x60;. &#x60;&#39;*&#39;&#x60; will match all    branches. 2. &#x60;branching_model&#x60;: Matches a branch against the repository&#39;s    branching model. The &#x60;branch_type&#x60; controls the type of branch    to match. Allowed values include: &#x60;production&#x60;, &#x60;development&#x60;,    &#x60;bugfix&#x60;, &#x60;release&#x60;, &#x60;feature&#x60; and &#x60;hotfix&#x60;.  The combination of &#x60;kind&#x60; and match must be unique. This means that two &#x60;glob&#x60; restrictions in a repository cannot have the same &#x60;kind&#x60; and &#x60;pattern&#x60;. Additionally, two &#x60;branching_model&#x60; restrictions in a repository cannot have the same &#x60;kind&#x60; and &#x60;branch_type&#x60;.  &#x60;users&#x60; and &#x60;groups&#x60; are lists of users and groups that are except from the restriction. They can only be configured in &#x60;push&#x60; and &#x60;restrict_merges&#x60; restrictions. The &#x60;push&#x60; restriction stops a user pushing to matching branches unless that user is in &#x60;users&#x60; or is a member of a group in &#x60;groups&#x60;. The &#x60;restrict_merges&#x60; stops a user merging pull requests to matching branches unless that user is in &#x60;users&#x60; or is a member of a group in &#x60;groups&#x60;. Adding new users or groups to an existing restriction should be done via &#x60;PUT&#x60;.  Note that branch restrictions with overlapping matchers is allowed, but the resulting behavior may be surprising.
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @param branchrestriction The new rule (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A paginated list of branch restrictions </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If the request was not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If the authenticated user does not have admin access to the repository </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the repository does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repositoriesWorkspaceRepoSlugBranchRestrictionsPostAsync(String repoSlug, String workspace, Branchrestriction branchrestriction, final ApiCallback<Branchrestriction> _callback) throws ApiException {

        okhttp3.Call localVarCall = repositoriesWorkspaceRepoSlugBranchRestrictionsPostValidateBeforeCall(repoSlug, workspace, branchrestriction, _callback);
        Type localVarReturnType = new TypeToken<Branchrestriction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
