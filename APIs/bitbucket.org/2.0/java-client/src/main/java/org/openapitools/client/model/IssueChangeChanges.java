/*
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.IssueChangeChangesAssignee;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IssueChangeChanges
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:00:39.758646-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IssueChangeChanges {
  public static final String SERIALIZED_NAME_ASSIGNEE = "assignee";
  @SerializedName(SERIALIZED_NAME_ASSIGNEE)
  private IssueChangeChangesAssignee assignee;

  public static final String SERIALIZED_NAME_COMPONENT = "component";
  @SerializedName(SERIALIZED_NAME_COMPONENT)
  private IssueChangeChangesAssignee component;

  public static final String SERIALIZED_NAME_CONTENT = "content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private IssueChangeChangesAssignee content;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private IssueChangeChangesAssignee kind;

  public static final String SERIALIZED_NAME_MILESTONE = "milestone";
  @SerializedName(SERIALIZED_NAME_MILESTONE)
  private IssueChangeChangesAssignee milestone;

  public static final String SERIALIZED_NAME_PRIORITY = "priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private IssueChangeChangesAssignee priority;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private IssueChangeChangesAssignee state;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private IssueChangeChangesAssignee title;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private IssueChangeChangesAssignee version;

  public IssueChangeChanges() {
  }

  public IssueChangeChanges assignee(IssueChangeChangesAssignee assignee) {
    this.assignee = assignee;
    return this;
  }

  /**
   * Get assignee
   * @return assignee
   */
  @javax.annotation.Nullable
  public IssueChangeChangesAssignee getAssignee() {
    return assignee;
  }

  public void setAssignee(IssueChangeChangesAssignee assignee) {
    this.assignee = assignee;
  }


  public IssueChangeChanges component(IssueChangeChangesAssignee component) {
    this.component = component;
    return this;
  }

  /**
   * Get component
   * @return component
   */
  @javax.annotation.Nullable
  public IssueChangeChangesAssignee getComponent() {
    return component;
  }

  public void setComponent(IssueChangeChangesAssignee component) {
    this.component = component;
  }


  public IssueChangeChanges content(IssueChangeChangesAssignee content) {
    this.content = content;
    return this;
  }

  /**
   * Get content
   * @return content
   */
  @javax.annotation.Nullable
  public IssueChangeChangesAssignee getContent() {
    return content;
  }

  public void setContent(IssueChangeChangesAssignee content) {
    this.content = content;
  }


  public IssueChangeChanges kind(IssueChangeChangesAssignee kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Get kind
   * @return kind
   */
  @javax.annotation.Nullable
  public IssueChangeChangesAssignee getKind() {
    return kind;
  }

  public void setKind(IssueChangeChangesAssignee kind) {
    this.kind = kind;
  }


  public IssueChangeChanges milestone(IssueChangeChangesAssignee milestone) {
    this.milestone = milestone;
    return this;
  }

  /**
   * Get milestone
   * @return milestone
   */
  @javax.annotation.Nullable
  public IssueChangeChangesAssignee getMilestone() {
    return milestone;
  }

  public void setMilestone(IssueChangeChangesAssignee milestone) {
    this.milestone = milestone;
  }


  public IssueChangeChanges priority(IssueChangeChangesAssignee priority) {
    this.priority = priority;
    return this;
  }

  /**
   * Get priority
   * @return priority
   */
  @javax.annotation.Nullable
  public IssueChangeChangesAssignee getPriority() {
    return priority;
  }

  public void setPriority(IssueChangeChangesAssignee priority) {
    this.priority = priority;
  }


  public IssueChangeChanges state(IssueChangeChangesAssignee state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public IssueChangeChangesAssignee getState() {
    return state;
  }

  public void setState(IssueChangeChangesAssignee state) {
    this.state = state;
  }


  public IssueChangeChanges title(IssueChangeChangesAssignee title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public IssueChangeChangesAssignee getTitle() {
    return title;
  }

  public void setTitle(IssueChangeChangesAssignee title) {
    this.title = title;
  }


  public IssueChangeChanges version(IssueChangeChangesAssignee version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nullable
  public IssueChangeChangesAssignee getVersion() {
    return version;
  }

  public void setVersion(IssueChangeChangesAssignee version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IssueChangeChanges issueChangeChanges = (IssueChangeChanges) o;
    return Objects.equals(this.assignee, issueChangeChanges.assignee) &&
        Objects.equals(this.component, issueChangeChanges.component) &&
        Objects.equals(this.content, issueChangeChanges.content) &&
        Objects.equals(this.kind, issueChangeChanges.kind) &&
        Objects.equals(this.milestone, issueChangeChanges.milestone) &&
        Objects.equals(this.priority, issueChangeChanges.priority) &&
        Objects.equals(this.state, issueChangeChanges.state) &&
        Objects.equals(this.title, issueChangeChanges.title) &&
        Objects.equals(this.version, issueChangeChanges.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assignee, component, content, kind, milestone, priority, state, title, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IssueChangeChanges {\n");
    sb.append("    assignee: ").append(toIndentedString(assignee)).append("\n");
    sb.append("    component: ").append(toIndentedString(component)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    milestone: ").append(toIndentedString(milestone)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("assignee");
    openapiFields.add("component");
    openapiFields.add("content");
    openapiFields.add("kind");
    openapiFields.add("milestone");
    openapiFields.add("priority");
    openapiFields.add("state");
    openapiFields.add("title");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IssueChangeChanges
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IssueChangeChanges.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IssueChangeChanges is not found in the empty JSON string", IssueChangeChanges.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IssueChangeChanges.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IssueChangeChanges` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `assignee`
      if (jsonObj.get("assignee") != null && !jsonObj.get("assignee").isJsonNull()) {
        IssueChangeChangesAssignee.validateJsonElement(jsonObj.get("assignee"));
      }
      // validate the optional field `component`
      if (jsonObj.get("component") != null && !jsonObj.get("component").isJsonNull()) {
        IssueChangeChangesAssignee.validateJsonElement(jsonObj.get("component"));
      }
      // validate the optional field `content`
      if (jsonObj.get("content") != null && !jsonObj.get("content").isJsonNull()) {
        IssueChangeChangesAssignee.validateJsonElement(jsonObj.get("content"));
      }
      // validate the optional field `kind`
      if (jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) {
        IssueChangeChangesAssignee.validateJsonElement(jsonObj.get("kind"));
      }
      // validate the optional field `milestone`
      if (jsonObj.get("milestone") != null && !jsonObj.get("milestone").isJsonNull()) {
        IssueChangeChangesAssignee.validateJsonElement(jsonObj.get("milestone"));
      }
      // validate the optional field `priority`
      if (jsonObj.get("priority") != null && !jsonObj.get("priority").isJsonNull()) {
        IssueChangeChangesAssignee.validateJsonElement(jsonObj.get("priority"));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        IssueChangeChangesAssignee.validateJsonElement(jsonObj.get("state"));
      }
      // validate the optional field `title`
      if (jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) {
        IssueChangeChangesAssignee.validateJsonElement(jsonObj.get("title"));
      }
      // validate the optional field `version`
      if (jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) {
        IssueChangeChangesAssignee.validateJsonElement(jsonObj.get("version"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IssueChangeChanges.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IssueChangeChanges' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IssueChangeChanges> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IssueChangeChanges.class));

       return (TypeAdapter<T>) new TypeAdapter<IssueChangeChanges>() {
           @Override
           public void write(JsonWriter out, IssueChangeChanges value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IssueChangeChanges read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IssueChangeChanges given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IssueChangeChanges
   * @throws IOException if the JSON string is invalid with respect to IssueChangeChanges
   */
  public static IssueChangeChanges fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IssueChangeChanges.class);
  }

  /**
   * Convert an instance of IssueChangeChanges to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

