/**
 * Lucidtech API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-03-23T15:40:40Z
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeploymentEnvironment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeploymentEnvironment::OAIDeploymentEnvironment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeploymentEnvironment::OAIDeploymentEnvironment() {
    this->initializeModel();
}

OAIDeploymentEnvironment::~OAIDeploymentEnvironment() {}

void OAIDeploymentEnvironment::initializeModel() {

    m_deployment_environment_id_isSet = false;
    m_deployment_environment_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_model_deployment_units_isSet = false;
    m_model_deployment_units_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_organization_id_isSet = false;
    m_organization_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIDeploymentEnvironment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeploymentEnvironment::fromJsonObject(QJsonObject json) {

    m_deployment_environment_id_isValid = ::OpenAPI::fromJsonValue(m_deployment_environment_id, json[QString("deploymentEnvironmentId")]);
    m_deployment_environment_id_isSet = !json[QString("deploymentEnvironmentId")].isNull() && m_deployment_environment_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_model_deployment_units_isValid = ::OpenAPI::fromJsonValue(m_model_deployment_units, json[QString("modelDeploymentUnits")]);
    m_model_deployment_units_isSet = !json[QString("modelDeploymentUnits")].isNull() && m_model_deployment_units_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_organization_id_isValid = ::OpenAPI::fromJsonValue(m_organization_id, json[QString("organizationId")]);
    m_organization_id_isSet = !json[QString("organizationId")].isNull() && m_organization_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIDeploymentEnvironment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeploymentEnvironment::asJsonObject() const {
    QJsonObject obj;
    if (m_deployment_environment_id_isSet) {
        obj.insert(QString("deploymentEnvironmentId"), ::OpenAPI::toJsonValue(m_deployment_environment_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_model_deployment_units_isSet) {
        obj.insert(QString("modelDeploymentUnits"), ::OpenAPI::toJsonValue(m_model_deployment_units));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_organization_id_isSet) {
        obj.insert(QString("organizationId"), ::OpenAPI::toJsonValue(m_organization_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIDeploymentEnvironment::getDeploymentEnvironmentId() const {
    return m_deployment_environment_id;
}
void OAIDeploymentEnvironment::setDeploymentEnvironmentId(const QString &deployment_environment_id) {
    m_deployment_environment_id = deployment_environment_id;
    m_deployment_environment_id_isSet = true;
}

bool OAIDeploymentEnvironment::is_deployment_environment_id_Set() const{
    return m_deployment_environment_id_isSet;
}

bool OAIDeploymentEnvironment::is_deployment_environment_id_Valid() const{
    return m_deployment_environment_id_isValid;
}

QString OAIDeploymentEnvironment::getDescription() const {
    return m_description;
}
void OAIDeploymentEnvironment::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDeploymentEnvironment::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDeploymentEnvironment::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAIDeploymentEnvironment::getModelDeploymentUnits() const {
    return m_model_deployment_units;
}
void OAIDeploymentEnvironment::setModelDeploymentUnits(const qint32 &model_deployment_units) {
    m_model_deployment_units = model_deployment_units;
    m_model_deployment_units_isSet = true;
}

bool OAIDeploymentEnvironment::is_model_deployment_units_Set() const{
    return m_model_deployment_units_isSet;
}

bool OAIDeploymentEnvironment::is_model_deployment_units_Valid() const{
    return m_model_deployment_units_isValid;
}

QString OAIDeploymentEnvironment::getName() const {
    return m_name;
}
void OAIDeploymentEnvironment::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDeploymentEnvironment::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDeploymentEnvironment::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDeploymentEnvironment::getOrganizationId() const {
    return m_organization_id;
}
void OAIDeploymentEnvironment::setOrganizationId(const QString &organization_id) {
    m_organization_id = organization_id;
    m_organization_id_isSet = true;
}

bool OAIDeploymentEnvironment::is_organization_id_Set() const{
    return m_organization_id_isSet;
}

bool OAIDeploymentEnvironment::is_organization_id_Valid() const{
    return m_organization_id_isValid;
}

QString OAIDeploymentEnvironment::getStatus() const {
    return m_status;
}
void OAIDeploymentEnvironment::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDeploymentEnvironment::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDeploymentEnvironment::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIDeploymentEnvironment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deployment_environment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_deployment_units_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeploymentEnvironment::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_deployment_environment_id_isValid && m_description_isValid && m_model_deployment_units_isValid && m_name_isValid && m_organization_id_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
