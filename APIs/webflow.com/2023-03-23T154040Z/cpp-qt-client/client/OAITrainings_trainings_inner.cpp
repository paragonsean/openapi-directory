/**
 * Lucidtech API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-03-23T15:40:40Z
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITrainings_trainings_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITrainings_trainings_inner::OAITrainings_trainings_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITrainings_trainings_inner::OAITrainings_trainings_inner() {
    this->initializeModel();
}

OAITrainings_trainings_inner::~OAITrainings_trainings_inner() {}

void OAITrainings_trainings_inner::initializeModel() {

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_data_bundle_ids_isSet = false;
    m_data_bundle_ids_isValid = false;

    m_data_scientist_assistance_isSet = false;
    m_data_scientist_assistance_isValid = false;

    m_deployment_environment_id_isSet = false;
    m_deployment_environment_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_evaluation_isSet = false;
    m_evaluation_isValid = false;

    m_gpu_hours_isSet = false;
    m_gpu_hours_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_model_id_isSet = false;
    m_model_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_training_id_isSet = false;
    m_training_id_isValid = false;

    m_updated_by_isSet = false;
    m_updated_by_isValid = false;

    m_updated_time_isSet = false;
    m_updated_time_isValid = false;

    m_warm_start_config_isSet = false;
    m_warm_start_config_isValid = false;
}

void OAITrainings_trainings_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITrainings_trainings_inner::fromJsonObject(QJsonObject json) {

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("createdBy")]);
    m_created_by_isSet = !json[QString("createdBy")].isNull() && m_created_by_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("createdTime")]);
    m_created_time_isSet = !json[QString("createdTime")].isNull() && m_created_time_isValid;

    m_data_bundle_ids_isValid = ::OpenAPI::fromJsonValue(m_data_bundle_ids, json[QString("dataBundleIds")]);
    m_data_bundle_ids_isSet = !json[QString("dataBundleIds")].isNull() && m_data_bundle_ids_isValid;

    m_data_scientist_assistance_isValid = ::OpenAPI::fromJsonValue(m_data_scientist_assistance, json[QString("dataScientistAssistance")]);
    m_data_scientist_assistance_isSet = !json[QString("dataScientistAssistance")].isNull() && m_data_scientist_assistance_isValid;

    m_deployment_environment_id_isValid = ::OpenAPI::fromJsonValue(m_deployment_environment_id, json[QString("deploymentEnvironmentId")]);
    m_deployment_environment_id_isSet = !json[QString("deploymentEnvironmentId")].isNull() && m_deployment_environment_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_evaluation_isValid = ::OpenAPI::fromJsonValue(m_evaluation, json[QString("evaluation")]);
    m_evaluation_isSet = !json[QString("evaluation")].isNull() && m_evaluation_isValid;

    m_gpu_hours_isValid = ::OpenAPI::fromJsonValue(m_gpu_hours, json[QString("gpuHours")]);
    m_gpu_hours_isSet = !json[QString("gpuHours")].isNull() && m_gpu_hours_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("instanceType")]);
    m_instance_type_isSet = !json[QString("instanceType")].isNull() && m_instance_type_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_model_id_isValid = ::OpenAPI::fromJsonValue(m_model_id, json[QString("modelId")]);
    m_model_id_isSet = !json[QString("modelId")].isNull() && m_model_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_training_id_isValid = ::OpenAPI::fromJsonValue(m_training_id, json[QString("trainingId")]);
    m_training_id_isSet = !json[QString("trainingId")].isNull() && m_training_id_isValid;

    m_updated_by_isValid = ::OpenAPI::fromJsonValue(m_updated_by, json[QString("updatedBy")]);
    m_updated_by_isSet = !json[QString("updatedBy")].isNull() && m_updated_by_isValid;

    m_updated_time_isValid = ::OpenAPI::fromJsonValue(m_updated_time, json[QString("updatedTime")]);
    m_updated_time_isSet = !json[QString("updatedTime")].isNull() && m_updated_time_isValid;

    m_warm_start_config_isValid = ::OpenAPI::fromJsonValue(m_warm_start_config, json[QString("warmStartConfig")]);
    m_warm_start_config_isSet = !json[QString("warmStartConfig")].isNull() && m_warm_start_config_isValid;
}

QString OAITrainings_trainings_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITrainings_trainings_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_created_by_isSet) {
        obj.insert(QString("createdBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("createdTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_data_bundle_ids.size() > 0) {
        obj.insert(QString("dataBundleIds"), ::OpenAPI::toJsonValue(m_data_bundle_ids));
    }
    if (m_data_scientist_assistance_isSet) {
        obj.insert(QString("dataScientistAssistance"), ::OpenAPI::toJsonValue(m_data_scientist_assistance));
    }
    if (m_deployment_environment_id_isSet) {
        obj.insert(QString("deploymentEnvironmentId"), ::OpenAPI::toJsonValue(m_deployment_environment_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_evaluation_isSet) {
        obj.insert(QString("evaluation"), ::OpenAPI::toJsonValue(m_evaluation));
    }
    if (m_gpu_hours_isSet) {
        obj.insert(QString("gpuHours"), ::OpenAPI::toJsonValue(m_gpu_hours));
    }
    if (m_instance_type_isSet) {
        obj.insert(QString("instanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    if (m_metadata_isSet) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_model_id_isSet) {
        obj.insert(QString("modelId"), ::OpenAPI::toJsonValue(m_model_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_training_id_isSet) {
        obj.insert(QString("trainingId"), ::OpenAPI::toJsonValue(m_training_id));
    }
    if (m_updated_by_isSet) {
        obj.insert(QString("updatedBy"), ::OpenAPI::toJsonValue(m_updated_by));
    }
    if (m_updated_time_isSet) {
        obj.insert(QString("updatedTime"), ::OpenAPI::toJsonValue(m_updated_time));
    }
    if (m_warm_start_config.isSet()) {
        obj.insert(QString("warmStartConfig"), ::OpenAPI::toJsonValue(m_warm_start_config));
    }
    return obj;
}

QString OAITrainings_trainings_inner::getCreatedBy() const {
    return m_created_by;
}
void OAITrainings_trainings_inner::setCreatedBy(const QString &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAITrainings_trainings_inner::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAITrainings_trainings_inner::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QString OAITrainings_trainings_inner::getCreatedTime() const {
    return m_created_time;
}
void OAITrainings_trainings_inner::setCreatedTime(const QString &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAITrainings_trainings_inner::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAITrainings_trainings_inner::is_created_time_Valid() const{
    return m_created_time_isValid;
}

QList<QString> OAITrainings_trainings_inner::getDataBundleIds() const {
    return m_data_bundle_ids;
}
void OAITrainings_trainings_inner::setDataBundleIds(const QList<QString> &data_bundle_ids) {
    m_data_bundle_ids = data_bundle_ids;
    m_data_bundle_ids_isSet = true;
}

bool OAITrainings_trainings_inner::is_data_bundle_ids_Set() const{
    return m_data_bundle_ids_isSet;
}

bool OAITrainings_trainings_inner::is_data_bundle_ids_Valid() const{
    return m_data_bundle_ids_isValid;
}

bool OAITrainings_trainings_inner::isDataScientistAssistance() const {
    return m_data_scientist_assistance;
}
void OAITrainings_trainings_inner::setDataScientistAssistance(const bool &data_scientist_assistance) {
    m_data_scientist_assistance = data_scientist_assistance;
    m_data_scientist_assistance_isSet = true;
}

bool OAITrainings_trainings_inner::is_data_scientist_assistance_Set() const{
    return m_data_scientist_assistance_isSet;
}

bool OAITrainings_trainings_inner::is_data_scientist_assistance_Valid() const{
    return m_data_scientist_assistance_isValid;
}

QString OAITrainings_trainings_inner::getDeploymentEnvironmentId() const {
    return m_deployment_environment_id;
}
void OAITrainings_trainings_inner::setDeploymentEnvironmentId(const QString &deployment_environment_id) {
    m_deployment_environment_id = deployment_environment_id;
    m_deployment_environment_id_isSet = true;
}

bool OAITrainings_trainings_inner::is_deployment_environment_id_Set() const{
    return m_deployment_environment_id_isSet;
}

bool OAITrainings_trainings_inner::is_deployment_environment_id_Valid() const{
    return m_deployment_environment_id_isValid;
}

QString OAITrainings_trainings_inner::getDescription() const {
    return m_description;
}
void OAITrainings_trainings_inner::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAITrainings_trainings_inner::is_description_Set() const{
    return m_description_isSet;
}

bool OAITrainings_trainings_inner::is_description_Valid() const{
    return m_description_isValid;
}

OAIObject OAITrainings_trainings_inner::getEvaluation() const {
    return m_evaluation;
}
void OAITrainings_trainings_inner::setEvaluation(const OAIObject &evaluation) {
    m_evaluation = evaluation;
    m_evaluation_isSet = true;
}

bool OAITrainings_trainings_inner::is_evaluation_Set() const{
    return m_evaluation_isSet;
}

bool OAITrainings_trainings_inner::is_evaluation_Valid() const{
    return m_evaluation_isValid;
}

double OAITrainings_trainings_inner::getGpuHours() const {
    return m_gpu_hours;
}
void OAITrainings_trainings_inner::setGpuHours(const double &gpu_hours) {
    m_gpu_hours = gpu_hours;
    m_gpu_hours_isSet = true;
}

bool OAITrainings_trainings_inner::is_gpu_hours_Set() const{
    return m_gpu_hours_isSet;
}

bool OAITrainings_trainings_inner::is_gpu_hours_Valid() const{
    return m_gpu_hours_isValid;
}

QString OAITrainings_trainings_inner::getInstanceType() const {
    return m_instance_type;
}
void OAITrainings_trainings_inner::setInstanceType(const QString &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAITrainings_trainings_inner::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAITrainings_trainings_inner::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

OAIObject OAITrainings_trainings_inner::getMetadata() const {
    return m_metadata;
}
void OAITrainings_trainings_inner::setMetadata(const OAIObject &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAITrainings_trainings_inner::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAITrainings_trainings_inner::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAITrainings_trainings_inner::getModelId() const {
    return m_model_id;
}
void OAITrainings_trainings_inner::setModelId(const QString &model_id) {
    m_model_id = model_id;
    m_model_id_isSet = true;
}

bool OAITrainings_trainings_inner::is_model_id_Set() const{
    return m_model_id_isSet;
}

bool OAITrainings_trainings_inner::is_model_id_Valid() const{
    return m_model_id_isValid;
}

QString OAITrainings_trainings_inner::getName() const {
    return m_name;
}
void OAITrainings_trainings_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITrainings_trainings_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAITrainings_trainings_inner::is_name_Valid() const{
    return m_name_isValid;
}

QString OAITrainings_trainings_inner::getStatus() const {
    return m_status;
}
void OAITrainings_trainings_inner::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAITrainings_trainings_inner::is_status_Set() const{
    return m_status_isSet;
}

bool OAITrainings_trainings_inner::is_status_Valid() const{
    return m_status_isValid;
}

QString OAITrainings_trainings_inner::getTrainingId() const {
    return m_training_id;
}
void OAITrainings_trainings_inner::setTrainingId(const QString &training_id) {
    m_training_id = training_id;
    m_training_id_isSet = true;
}

bool OAITrainings_trainings_inner::is_training_id_Set() const{
    return m_training_id_isSet;
}

bool OAITrainings_trainings_inner::is_training_id_Valid() const{
    return m_training_id_isValid;
}

QString OAITrainings_trainings_inner::getUpdatedBy() const {
    return m_updated_by;
}
void OAITrainings_trainings_inner::setUpdatedBy(const QString &updated_by) {
    m_updated_by = updated_by;
    m_updated_by_isSet = true;
}

bool OAITrainings_trainings_inner::is_updated_by_Set() const{
    return m_updated_by_isSet;
}

bool OAITrainings_trainings_inner::is_updated_by_Valid() const{
    return m_updated_by_isValid;
}

QString OAITrainings_trainings_inner::getUpdatedTime() const {
    return m_updated_time;
}
void OAITrainings_trainings_inner::setUpdatedTime(const QString &updated_time) {
    m_updated_time = updated_time;
    m_updated_time_isSet = true;
}

bool OAITrainings_trainings_inner::is_updated_time_Set() const{
    return m_updated_time_isSet;
}

bool OAITrainings_trainings_inner::is_updated_time_Valid() const{
    return m_updated_time_isValid;
}

OAITraining_warmStartConfig OAITrainings_trainings_inner::getWarmStartConfig() const {
    return m_warm_start_config;
}
void OAITrainings_trainings_inner::setWarmStartConfig(const OAITraining_warmStartConfig &warm_start_config) {
    m_warm_start_config = warm_start_config;
    m_warm_start_config_isSet = true;
}

bool OAITrainings_trainings_inner::is_warm_start_config_Set() const{
    return m_warm_start_config_isSet;
}

bool OAITrainings_trainings_inner::is_warm_start_config_Valid() const{
    return m_warm_start_config_isValid;
}

bool OAITrainings_trainings_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_bundle_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_scientist_assistance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployment_environment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_evaluation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gpu_hours_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_training_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warm_start_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITrainings_trainings_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_created_by_isValid && m_created_time_isValid && m_data_bundle_ids_isValid && m_description_isValid && m_evaluation_isValid && m_gpu_hours_isValid && m_instance_type_isValid && m_metadata_isValid && m_model_id_isValid && m_name_isValid && m_status_isValid && m_training_id_isValid && m_updated_by_isValid && m_updated_time_isValid && true;
}

} // namespace OpenAPI
