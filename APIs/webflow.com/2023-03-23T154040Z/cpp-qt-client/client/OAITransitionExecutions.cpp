/**
 * Lucidtech API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-03-23T15:40:40Z
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransitionExecutions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransitionExecutions::OAITransitionExecutions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransitionExecutions::OAITransitionExecutions() {
    this->initializeModel();
}

OAITransitionExecutions::~OAITransitionExecutions() {}

void OAITransitionExecutions::initializeModel() {

    m_executions_isSet = false;
    m_executions_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_transition_id_isSet = false;
    m_transition_id_isValid = false;
}

void OAITransitionExecutions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransitionExecutions::fromJsonObject(QJsonObject json) {

    m_executions_isValid = ::OpenAPI::fromJsonValue(m_executions, json[QString("executions")]);
    m_executions_isSet = !json[QString("executions")].isNull() && m_executions_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_transition_id_isValid = ::OpenAPI::fromJsonValue(m_transition_id, json[QString("transitionId")]);
    m_transition_id_isSet = !json[QString("transitionId")].isNull() && m_transition_id_isValid;
}

QString OAITransitionExecutions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransitionExecutions::asJsonObject() const {
    QJsonObject obj;
    if (m_executions.size() > 0) {
        obj.insert(QString("executions"), ::OpenAPI::toJsonValue(m_executions));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_status.size() > 0) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_transition_id.isSet()) {
        obj.insert(QString("transitionId"), ::OpenAPI::toJsonValue(m_transition_id));
    }
    return obj;
}

QList<OAITransitionExecutions_executions_inner> OAITransitionExecutions::getExecutions() const {
    return m_executions;
}
void OAITransitionExecutions::setExecutions(const QList<OAITransitionExecutions_executions_inner> &executions) {
    m_executions = executions;
    m_executions_isSet = true;
}

bool OAITransitionExecutions::is_executions_Set() const{
    return m_executions_isSet;
}

bool OAITransitionExecutions::is_executions_Valid() const{
    return m_executions_isValid;
}

QString OAITransitionExecutions::getNextToken() const {
    return m_next_token;
}
void OAITransitionExecutions::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAITransitionExecutions::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAITransitionExecutions::is_next_token_Valid() const{
    return m_next_token_isValid;
}

QList<QString> OAITransitionExecutions::getStatus() const {
    return m_status;
}
void OAITransitionExecutions::setStatus(const QList<QString> &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAITransitionExecutions::is_status_Set() const{
    return m_status_isSet;
}

bool OAITransitionExecutions::is_status_Valid() const{
    return m_status_isValid;
}

OAILogs_transitionId OAITransitionExecutions::getTransitionId() const {
    return m_transition_id;
}
void OAITransitionExecutions::setTransitionId(const OAILogs_transitionId &transition_id) {
    m_transition_id = transition_id;
    m_transition_id_isSet = true;
}

bool OAITransitionExecutions::is_transition_id_Set() const{
    return m_transition_id_isSet;
}

bool OAITransitionExecutions::is_transition_id_Valid() const{
    return m_transition_id_isValid;
}

bool OAITransitionExecutions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_executions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_transition_id.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransitionExecutions::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_executions_isValid && m_next_token_isValid && m_transition_id_isValid && true;
}

} // namespace OpenAPI
