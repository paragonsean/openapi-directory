/**
 * Lucidtech API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-03-23T15:40:40Z
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPatchTransitionId_parameters_anyOf.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPatchTransitionId_parameters_anyOf::OAIPatchTransitionId_parameters_anyOf(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPatchTransitionId_parameters_anyOf::OAIPatchTransitionId_parameters_anyOf() {
    this->initializeModel();
}

OAIPatchTransitionId_parameters_anyOf::~OAIPatchTransitionId_parameters_anyOf() {}

void OAIPatchTransitionId_parameters_anyOf::initializeModel() {

    m_cpu_isSet = false;
    m_cpu_isValid = false;

    m_environment_isSet = false;
    m_environment_isValid = false;

    m_environment_secrets_isSet = false;
    m_environment_secrets_isValid = false;

    m_image_url_isSet = false;
    m_image_url_isValid = false;

    m_memory_isSet = false;
    m_memory_isValid = false;

    m_secret_id_isSet = false;
    m_secret_id_isValid = false;
}

void OAIPatchTransitionId_parameters_anyOf::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPatchTransitionId_parameters_anyOf::fromJsonObject(QJsonObject json) {

    m_cpu_isValid = ::OpenAPI::fromJsonValue(m_cpu, json[QString("cpu")]);
    m_cpu_isSet = !json[QString("cpu")].isNull() && m_cpu_isValid;

    m_environment_isValid = ::OpenAPI::fromJsonValue(m_environment, json[QString("environment")]);
    m_environment_isSet = !json[QString("environment")].isNull() && m_environment_isValid;

    m_environment_secrets_isValid = ::OpenAPI::fromJsonValue(m_environment_secrets, json[QString("environmentSecrets")]);
    m_environment_secrets_isSet = !json[QString("environmentSecrets")].isNull() && m_environment_secrets_isValid;

    m_image_url_isValid = ::OpenAPI::fromJsonValue(m_image_url, json[QString("imageUrl")]);
    m_image_url_isSet = !json[QString("imageUrl")].isNull() && m_image_url_isValid;

    m_memory_isValid = ::OpenAPI::fromJsonValue(m_memory, json[QString("memory")]);
    m_memory_isSet = !json[QString("memory")].isNull() && m_memory_isValid;

    m_secret_id_isValid = ::OpenAPI::fromJsonValue(m_secret_id, json[QString("secretId")]);
    m_secret_id_isSet = !json[QString("secretId")].isNull() && m_secret_id_isValid;
}

QString OAIPatchTransitionId_parameters_anyOf::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPatchTransitionId_parameters_anyOf::asJsonObject() const {
    QJsonObject obj;
    if (m_cpu_isSet) {
        obj.insert(QString("cpu"), ::OpenAPI::toJsonValue(m_cpu));
    }
    if (m_environment.size() > 0) {
        obj.insert(QString("environment"), ::OpenAPI::toJsonValue(m_environment));
    }
    if (m_environment_secrets.size() > 0) {
        obj.insert(QString("environmentSecrets"), ::OpenAPI::toJsonValue(m_environment_secrets));
    }
    if (m_image_url_isSet) {
        obj.insert(QString("imageUrl"), ::OpenAPI::toJsonValue(m_image_url));
    }
    if (m_memory_isSet) {
        obj.insert(QString("memory"), ::OpenAPI::toJsonValue(m_memory));
    }
    if (m_secret_id_isSet) {
        obj.insert(QString("secretId"), ::OpenAPI::toJsonValue(m_secret_id));
    }
    return obj;
}

qint32 OAIPatchTransitionId_parameters_anyOf::getCpu() const {
    return m_cpu;
}
void OAIPatchTransitionId_parameters_anyOf::setCpu(const qint32 &cpu) {
    m_cpu = cpu;
    m_cpu_isSet = true;
}

bool OAIPatchTransitionId_parameters_anyOf::is_cpu_Set() const{
    return m_cpu_isSet;
}

bool OAIPatchTransitionId_parameters_anyOf::is_cpu_Valid() const{
    return m_cpu_isValid;
}

QMap<QString, QString> OAIPatchTransitionId_parameters_anyOf::getEnvironment() const {
    return m_environment;
}
void OAIPatchTransitionId_parameters_anyOf::setEnvironment(const QMap<QString, QString> &environment) {
    m_environment = environment;
    m_environment_isSet = true;
}

bool OAIPatchTransitionId_parameters_anyOf::is_environment_Set() const{
    return m_environment_isSet;
}

bool OAIPatchTransitionId_parameters_anyOf::is_environment_Valid() const{
    return m_environment_isValid;
}

QList<QString> OAIPatchTransitionId_parameters_anyOf::getEnvironmentSecrets() const {
    return m_environment_secrets;
}
void OAIPatchTransitionId_parameters_anyOf::setEnvironmentSecrets(const QList<QString> &environment_secrets) {
    m_environment_secrets = environment_secrets;
    m_environment_secrets_isSet = true;
}

bool OAIPatchTransitionId_parameters_anyOf::is_environment_secrets_Set() const{
    return m_environment_secrets_isSet;
}

bool OAIPatchTransitionId_parameters_anyOf::is_environment_secrets_Valid() const{
    return m_environment_secrets_isValid;
}

QString OAIPatchTransitionId_parameters_anyOf::getImageUrl() const {
    return m_image_url;
}
void OAIPatchTransitionId_parameters_anyOf::setImageUrl(const QString &image_url) {
    m_image_url = image_url;
    m_image_url_isSet = true;
}

bool OAIPatchTransitionId_parameters_anyOf::is_image_url_Set() const{
    return m_image_url_isSet;
}

bool OAIPatchTransitionId_parameters_anyOf::is_image_url_Valid() const{
    return m_image_url_isValid;
}

qint32 OAIPatchTransitionId_parameters_anyOf::getMemory() const {
    return m_memory;
}
void OAIPatchTransitionId_parameters_anyOf::setMemory(const qint32 &memory) {
    m_memory = memory;
    m_memory_isSet = true;
}

bool OAIPatchTransitionId_parameters_anyOf::is_memory_Set() const{
    return m_memory_isSet;
}

bool OAIPatchTransitionId_parameters_anyOf::is_memory_Valid() const{
    return m_memory_isValid;
}

QString OAIPatchTransitionId_parameters_anyOf::getSecretId() const {
    return m_secret_id;
}
void OAIPatchTransitionId_parameters_anyOf::setSecretId(const QString &secret_id) {
    m_secret_id = secret_id;
    m_secret_id_isSet = true;
}

bool OAIPatchTransitionId_parameters_anyOf::is_secret_id_Set() const{
    return m_secret_id_isSet;
}

bool OAIPatchTransitionId_parameters_anyOf::is_secret_id_Valid() const{
    return m_secret_id_isValid;
}

bool OAIPatchTransitionId_parameters_anyOf::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cpu_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_secrets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPatchTransitionId_parameters_anyOf::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
