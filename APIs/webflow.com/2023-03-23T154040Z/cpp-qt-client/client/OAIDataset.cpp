/**
 * Lucidtech API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-03-23T15:40:40Z
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataset.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataset::OAIDataset(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataset::OAIDataset() {
    this->initializeModel();
}

OAIDataset::~OAIDataset() {}

void OAIDataset::initializeModel() {

    m_contains_personally_identifiable_information_isSet = false;
    m_contains_personally_identifiable_information_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_dataset_id_isSet = false;
    m_dataset_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_ground_truth_summary_isSet = false;
    m_ground_truth_summary_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_number_of_documents_isSet = false;
    m_number_of_documents_isValid = false;

    m_retention_in_days_isSet = false;
    m_retention_in_days_isValid = false;

    m_storage_location_isSet = false;
    m_storage_location_isValid = false;

    m_updated_by_isSet = false;
    m_updated_by_isValid = false;

    m_updated_time_isSet = false;
    m_updated_time_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIDataset::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataset::fromJsonObject(QJsonObject json) {

    m_contains_personally_identifiable_information_isValid = ::OpenAPI::fromJsonValue(m_contains_personally_identifiable_information, json[QString("containsPersonallyIdentifiableInformation")]);
    m_contains_personally_identifiable_information_isSet = !json[QString("containsPersonallyIdentifiableInformation")].isNull() && m_contains_personally_identifiable_information_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("createdBy")]);
    m_created_by_isSet = !json[QString("createdBy")].isNull() && m_created_by_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("createdTime")]);
    m_created_time_isSet = !json[QString("createdTime")].isNull() && m_created_time_isValid;

    m_dataset_id_isValid = ::OpenAPI::fromJsonValue(m_dataset_id, json[QString("datasetId")]);
    m_dataset_id_isSet = !json[QString("datasetId")].isNull() && m_dataset_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_ground_truth_summary_isValid = ::OpenAPI::fromJsonValue(m_ground_truth_summary, json[QString("groundTruthSummary")]);
    m_ground_truth_summary_isSet = !json[QString("groundTruthSummary")].isNull() && m_ground_truth_summary_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_number_of_documents_isValid = ::OpenAPI::fromJsonValue(m_number_of_documents, json[QString("numberOfDocuments")]);
    m_number_of_documents_isSet = !json[QString("numberOfDocuments")].isNull() && m_number_of_documents_isValid;

    m_retention_in_days_isValid = ::OpenAPI::fromJsonValue(m_retention_in_days, json[QString("retentionInDays")]);
    m_retention_in_days_isSet = !json[QString("retentionInDays")].isNull() && m_retention_in_days_isValid;

    m_storage_location_isValid = ::OpenAPI::fromJsonValue(m_storage_location, json[QString("storageLocation")]);
    m_storage_location_isSet = !json[QString("storageLocation")].isNull() && m_storage_location_isValid;

    m_updated_by_isValid = ::OpenAPI::fromJsonValue(m_updated_by, json[QString("updatedBy")]);
    m_updated_by_isSet = !json[QString("updatedBy")].isNull() && m_updated_by_isValid;

    m_updated_time_isValid = ::OpenAPI::fromJsonValue(m_updated_time, json[QString("updatedTime")]);
    m_updated_time_isSet = !json[QString("updatedTime")].isNull() && m_updated_time_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIDataset::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataset::asJsonObject() const {
    QJsonObject obj;
    if (m_contains_personally_identifiable_information_isSet) {
        obj.insert(QString("containsPersonallyIdentifiableInformation"), ::OpenAPI::toJsonValue(m_contains_personally_identifiable_information));
    }
    if (m_created_by_isSet) {
        obj.insert(QString("createdBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("createdTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_dataset_id_isSet) {
        obj.insert(QString("datasetId"), ::OpenAPI::toJsonValue(m_dataset_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_ground_truth_summary_isSet) {
        obj.insert(QString("groundTruthSummary"), ::OpenAPI::toJsonValue(m_ground_truth_summary));
    }
    if (m_metadata_isSet) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_number_of_documents_isSet) {
        obj.insert(QString("numberOfDocuments"), ::OpenAPI::toJsonValue(m_number_of_documents));
    }
    if (m_retention_in_days_isSet) {
        obj.insert(QString("retentionInDays"), ::OpenAPI::toJsonValue(m_retention_in_days));
    }
    if (m_storage_location_isSet) {
        obj.insert(QString("storageLocation"), ::OpenAPI::toJsonValue(m_storage_location));
    }
    if (m_updated_by_isSet) {
        obj.insert(QString("updatedBy"), ::OpenAPI::toJsonValue(m_updated_by));
    }
    if (m_updated_time_isSet) {
        obj.insert(QString("updatedTime"), ::OpenAPI::toJsonValue(m_updated_time));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

bool OAIDataset::isContainsPersonallyIdentifiableInformation() const {
    return m_contains_personally_identifiable_information;
}
void OAIDataset::setContainsPersonallyIdentifiableInformation(const bool &contains_personally_identifiable_information) {
    m_contains_personally_identifiable_information = contains_personally_identifiable_information;
    m_contains_personally_identifiable_information_isSet = true;
}

bool OAIDataset::is_contains_personally_identifiable_information_Set() const{
    return m_contains_personally_identifiable_information_isSet;
}

bool OAIDataset::is_contains_personally_identifiable_information_Valid() const{
    return m_contains_personally_identifiable_information_isValid;
}

QString OAIDataset::getCreatedBy() const {
    return m_created_by;
}
void OAIDataset::setCreatedBy(const QString &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIDataset::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIDataset::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QString OAIDataset::getCreatedTime() const {
    return m_created_time;
}
void OAIDataset::setCreatedTime(const QString &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIDataset::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIDataset::is_created_time_Valid() const{
    return m_created_time_isValid;
}

QString OAIDataset::getDatasetId() const {
    return m_dataset_id;
}
void OAIDataset::setDatasetId(const QString &dataset_id) {
    m_dataset_id = dataset_id;
    m_dataset_id_isSet = true;
}

bool OAIDataset::is_dataset_id_Set() const{
    return m_dataset_id_isSet;
}

bool OAIDataset::is_dataset_id_Valid() const{
    return m_dataset_id_isValid;
}

QString OAIDataset::getDescription() const {
    return m_description;
}
void OAIDataset::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDataset::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDataset::is_description_Valid() const{
    return m_description_isValid;
}

OAIObject OAIDataset::getGroundTruthSummary() const {
    return m_ground_truth_summary;
}
void OAIDataset::setGroundTruthSummary(const OAIObject &ground_truth_summary) {
    m_ground_truth_summary = ground_truth_summary;
    m_ground_truth_summary_isSet = true;
}

bool OAIDataset::is_ground_truth_summary_Set() const{
    return m_ground_truth_summary_isSet;
}

bool OAIDataset::is_ground_truth_summary_Valid() const{
    return m_ground_truth_summary_isValid;
}

OAIObject OAIDataset::getMetadata() const {
    return m_metadata;
}
void OAIDataset::setMetadata(const OAIObject &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIDataset::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIDataset::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIDataset::getName() const {
    return m_name;
}
void OAIDataset::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDataset::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDataset::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIDataset::getNumberOfDocuments() const {
    return m_number_of_documents;
}
void OAIDataset::setNumberOfDocuments(const qint32 &number_of_documents) {
    m_number_of_documents = number_of_documents;
    m_number_of_documents_isSet = true;
}

bool OAIDataset::is_number_of_documents_Set() const{
    return m_number_of_documents_isSet;
}

bool OAIDataset::is_number_of_documents_Valid() const{
    return m_number_of_documents_isValid;
}

qint32 OAIDataset::getRetentionInDays() const {
    return m_retention_in_days;
}
void OAIDataset::setRetentionInDays(const qint32 &retention_in_days) {
    m_retention_in_days = retention_in_days;
    m_retention_in_days_isSet = true;
}

bool OAIDataset::is_retention_in_days_Set() const{
    return m_retention_in_days_isSet;
}

bool OAIDataset::is_retention_in_days_Valid() const{
    return m_retention_in_days_isValid;
}

QString OAIDataset::getStorageLocation() const {
    return m_storage_location;
}
void OAIDataset::setStorageLocation(const QString &storage_location) {
    m_storage_location = storage_location;
    m_storage_location_isSet = true;
}

bool OAIDataset::is_storage_location_Set() const{
    return m_storage_location_isSet;
}

bool OAIDataset::is_storage_location_Valid() const{
    return m_storage_location_isValid;
}

QString OAIDataset::getUpdatedBy() const {
    return m_updated_by;
}
void OAIDataset::setUpdatedBy(const QString &updated_by) {
    m_updated_by = updated_by;
    m_updated_by_isSet = true;
}

bool OAIDataset::is_updated_by_Set() const{
    return m_updated_by_isSet;
}

bool OAIDataset::is_updated_by_Valid() const{
    return m_updated_by_isValid;
}

QString OAIDataset::getUpdatedTime() const {
    return m_updated_time;
}
void OAIDataset::setUpdatedTime(const QString &updated_time) {
    m_updated_time = updated_time;
    m_updated_time_isSet = true;
}

bool OAIDataset::is_updated_time_Set() const{
    return m_updated_time_isSet;
}

bool OAIDataset::is_updated_time_Valid() const{
    return m_updated_time_isValid;
}

qint32 OAIDataset::getVersion() const {
    return m_version;
}
void OAIDataset::setVersion(const qint32 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIDataset::is_version_Set() const{
    return m_version_isSet;
}

bool OAIDataset::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIDataset::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contains_personally_identifiable_information_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataset_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ground_truth_summary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_documents_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retention_in_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataset::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_contains_personally_identifiable_information_isValid && m_created_by_isValid && m_created_time_isValid && m_dataset_id_isValid && m_description_isValid && m_ground_truth_summary_isValid && m_metadata_isValid && m_number_of_documents_isValid && m_retention_in_days_isValid && m_storage_location_isValid && m_updated_by_isValid && m_updated_time_isValid && m_version_isValid && true;
}

} // namespace OpenAPI
