/**
 * Lucidtech API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-03-23T15:40:40Z
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILogs.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILogs::OAILogs(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILogs::OAILogs() {
    this->initializeModel();
}

OAILogs::~OAILogs() {}

void OAILogs::initializeModel() {

    m_logs_isSet = false;
    m_logs_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_order_isSet = false;
    m_order_isValid = false;

    m_transition_execution_id_isSet = false;
    m_transition_execution_id_isValid = false;

    m_transition_id_isSet = false;
    m_transition_id_isValid = false;

    m_workflow_execution_id_isSet = false;
    m_workflow_execution_id_isValid = false;

    m_workflow_id_isSet = false;
    m_workflow_id_isValid = false;
}

void OAILogs::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILogs::fromJsonObject(QJsonObject json) {

    m_logs_isValid = ::OpenAPI::fromJsonValue(m_logs, json[QString("logs")]);
    m_logs_isSet = !json[QString("logs")].isNull() && m_logs_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;

    m_order_isValid = ::OpenAPI::fromJsonValue(m_order, json[QString("order")]);
    m_order_isSet = !json[QString("order")].isNull() && m_order_isValid;

    m_transition_execution_id_isValid = ::OpenAPI::fromJsonValue(m_transition_execution_id, json[QString("transitionExecutionId")]);
    m_transition_execution_id_isSet = !json[QString("transitionExecutionId")].isNull() && m_transition_execution_id_isValid;

    m_transition_id_isValid = ::OpenAPI::fromJsonValue(m_transition_id, json[QString("transitionId")]);
    m_transition_id_isSet = !json[QString("transitionId")].isNull() && m_transition_id_isValid;

    m_workflow_execution_id_isValid = ::OpenAPI::fromJsonValue(m_workflow_execution_id, json[QString("workflowExecutionId")]);
    m_workflow_execution_id_isSet = !json[QString("workflowExecutionId")].isNull() && m_workflow_execution_id_isValid;

    m_workflow_id_isValid = ::OpenAPI::fromJsonValue(m_workflow_id, json[QString("workflowId")]);
    m_workflow_id_isSet = !json[QString("workflowId")].isNull() && m_workflow_id_isValid;
}

QString OAILogs::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILogs::asJsonObject() const {
    QJsonObject obj;
    if (m_logs.size() > 0) {
        obj.insert(QString("logs"), ::OpenAPI::toJsonValue(m_logs));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_order_isSet) {
        obj.insert(QString("order"), ::OpenAPI::toJsonValue(m_order));
    }
    if (m_transition_execution_id_isSet) {
        obj.insert(QString("transitionExecutionId"), ::OpenAPI::toJsonValue(m_transition_execution_id));
    }
    if (m_transition_id.isSet()) {
        obj.insert(QString("transitionId"), ::OpenAPI::toJsonValue(m_transition_id));
    }
    if (m_workflow_execution_id_isSet) {
        obj.insert(QString("workflowExecutionId"), ::OpenAPI::toJsonValue(m_workflow_execution_id));
    }
    if (m_workflow_id_isSet) {
        obj.insert(QString("workflowId"), ::OpenAPI::toJsonValue(m_workflow_id));
    }
    return obj;
}

QList<OAILogs_logs_inner> OAILogs::getLogs() const {
    return m_logs;
}
void OAILogs::setLogs(const QList<OAILogs_logs_inner> &logs) {
    m_logs = logs;
    m_logs_isSet = true;
}

bool OAILogs::is_logs_Set() const{
    return m_logs_isSet;
}

bool OAILogs::is_logs_Valid() const{
    return m_logs_isValid;
}

QString OAILogs::getNextToken() const {
    return m_next_token;
}
void OAILogs::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAILogs::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAILogs::is_next_token_Valid() const{
    return m_next_token_isValid;
}

QString OAILogs::getOrder() const {
    return m_order;
}
void OAILogs::setOrder(const QString &order) {
    m_order = order;
    m_order_isSet = true;
}

bool OAILogs::is_order_Set() const{
    return m_order_isSet;
}

bool OAILogs::is_order_Valid() const{
    return m_order_isValid;
}

QString OAILogs::getTransitionExecutionId() const {
    return m_transition_execution_id;
}
void OAILogs::setTransitionExecutionId(const QString &transition_execution_id) {
    m_transition_execution_id = transition_execution_id;
    m_transition_execution_id_isSet = true;
}

bool OAILogs::is_transition_execution_id_Set() const{
    return m_transition_execution_id_isSet;
}

bool OAILogs::is_transition_execution_id_Valid() const{
    return m_transition_execution_id_isValid;
}

OAILogs_transitionId OAILogs::getTransitionId() const {
    return m_transition_id;
}
void OAILogs::setTransitionId(const OAILogs_transitionId &transition_id) {
    m_transition_id = transition_id;
    m_transition_id_isSet = true;
}

bool OAILogs::is_transition_id_Set() const{
    return m_transition_id_isSet;
}

bool OAILogs::is_transition_id_Valid() const{
    return m_transition_id_isValid;
}

QString OAILogs::getWorkflowExecutionId() const {
    return m_workflow_execution_id;
}
void OAILogs::setWorkflowExecutionId(const QString &workflow_execution_id) {
    m_workflow_execution_id = workflow_execution_id;
    m_workflow_execution_id_isSet = true;
}

bool OAILogs::is_workflow_execution_id_Set() const{
    return m_workflow_execution_id_isSet;
}

bool OAILogs::is_workflow_execution_id_Valid() const{
    return m_workflow_execution_id_isValid;
}

QString OAILogs::getWorkflowId() const {
    return m_workflow_id;
}
void OAILogs::setWorkflowId(const QString &workflow_id) {
    m_workflow_id = workflow_id;
    m_workflow_id_isSet = true;
}

bool OAILogs::is_workflow_id_Set() const{
    return m_workflow_id_isSet;
}

bool OAILogs::is_workflow_id_Valid() const{
    return m_workflow_id_isValid;
}

bool OAILogs::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_logs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transition_execution_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transition_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_workflow_execution_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workflow_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILogs::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_logs_isValid && m_next_token_isValid && true;
}

} // namespace OpenAPI
