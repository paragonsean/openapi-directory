/**
 * Lucidtech API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-03-23T15:40:40Z
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIModel::OAIModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIModel::OAIModel() {
    this->initializeModel();
}

OAIModel::~OAIModel() {}

void OAIModel::initializeModel() {

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_field_config_isSet = false;
    m_field_config_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_model_id_isSet = false;
    m_model_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_number_of_data_bundles_isSet = false;
    m_number_of_data_bundles_isValid = false;

    m_number_of_running_trainings_isSet = false;
    m_number_of_running_trainings_isValid = false;

    m_organization_id_isSet = false;
    m_organization_id_isValid = false;

    m_postprocess_config_isSet = false;
    m_postprocess_config_isValid = false;

    m_preprocess_config_isSet = false;
    m_preprocess_config_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_training_id_isSet = false;
    m_training_id_isValid = false;

    m_updated_by_isSet = false;
    m_updated_by_isValid = false;

    m_updated_time_isSet = false;
    m_updated_time_isValid = false;
}

void OAIModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIModel::fromJsonObject(QJsonObject json) {

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("createdBy")]);
    m_created_by_isSet = !json[QString("createdBy")].isNull() && m_created_by_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("createdTime")]);
    m_created_time_isSet = !json[QString("createdTime")].isNull() && m_created_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_field_config_isValid = ::OpenAPI::fromJsonValue(m_field_config, json[QString("fieldConfig")]);
    m_field_config_isSet = !json[QString("fieldConfig")].isNull() && m_field_config_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_model_id_isValid = ::OpenAPI::fromJsonValue(m_model_id, json[QString("modelId")]);
    m_model_id_isSet = !json[QString("modelId")].isNull() && m_model_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_number_of_data_bundles_isValid = ::OpenAPI::fromJsonValue(m_number_of_data_bundles, json[QString("numberOfDataBundles")]);
    m_number_of_data_bundles_isSet = !json[QString("numberOfDataBundles")].isNull() && m_number_of_data_bundles_isValid;

    m_number_of_running_trainings_isValid = ::OpenAPI::fromJsonValue(m_number_of_running_trainings, json[QString("numberOfRunningTrainings")]);
    m_number_of_running_trainings_isSet = !json[QString("numberOfRunningTrainings")].isNull() && m_number_of_running_trainings_isValid;

    m_organization_id_isValid = ::OpenAPI::fromJsonValue(m_organization_id, json[QString("organizationId")]);
    m_organization_id_isSet = !json[QString("organizationId")].isNull() && m_organization_id_isValid;

    m_postprocess_config_isValid = ::OpenAPI::fromJsonValue(m_postprocess_config, json[QString("postprocessConfig")]);
    m_postprocess_config_isSet = !json[QString("postprocessConfig")].isNull() && m_postprocess_config_isValid;

    m_preprocess_config_isValid = ::OpenAPI::fromJsonValue(m_preprocess_config, json[QString("preprocessConfig")]);
    m_preprocess_config_isSet = !json[QString("preprocessConfig")].isNull() && m_preprocess_config_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_training_id_isValid = ::OpenAPI::fromJsonValue(m_training_id, json[QString("trainingId")]);
    m_training_id_isSet = !json[QString("trainingId")].isNull() && m_training_id_isValid;

    m_updated_by_isValid = ::OpenAPI::fromJsonValue(m_updated_by, json[QString("updatedBy")]);
    m_updated_by_isSet = !json[QString("updatedBy")].isNull() && m_updated_by_isValid;

    m_updated_time_isValid = ::OpenAPI::fromJsonValue(m_updated_time, json[QString("updatedTime")]);
    m_updated_time_isSet = !json[QString("updatedTime")].isNull() && m_updated_time_isValid;
}

QString OAIModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIModel::asJsonObject() const {
    QJsonObject obj;
    if (m_created_by_isSet) {
        obj.insert(QString("createdBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("createdTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_field_config.size() > 0) {
        obj.insert(QString("fieldConfig"), ::OpenAPI::toJsonValue(m_field_config));
    }
    if (m_metadata_isSet) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_model_id_isSet) {
        obj.insert(QString("modelId"), ::OpenAPI::toJsonValue(m_model_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_number_of_data_bundles_isSet) {
        obj.insert(QString("numberOfDataBundles"), ::OpenAPI::toJsonValue(m_number_of_data_bundles));
    }
    if (m_number_of_running_trainings_isSet) {
        obj.insert(QString("numberOfRunningTrainings"), ::OpenAPI::toJsonValue(m_number_of_running_trainings));
    }
    if (m_organization_id_isSet) {
        obj.insert(QString("organizationId"), ::OpenAPI::toJsonValue(m_organization_id));
    }
    if (m_postprocess_config.isSet()) {
        obj.insert(QString("postprocessConfig"), ::OpenAPI::toJsonValue(m_postprocess_config));
    }
    if (m_preprocess_config.isSet()) {
        obj.insert(QString("preprocessConfig"), ::OpenAPI::toJsonValue(m_preprocess_config));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_training_id_isSet) {
        obj.insert(QString("trainingId"), ::OpenAPI::toJsonValue(m_training_id));
    }
    if (m_updated_by_isSet) {
        obj.insert(QString("updatedBy"), ::OpenAPI::toJsonValue(m_updated_by));
    }
    if (m_updated_time_isSet) {
        obj.insert(QString("updatedTime"), ::OpenAPI::toJsonValue(m_updated_time));
    }
    return obj;
}

QString OAIModel::getCreatedBy() const {
    return m_created_by;
}
void OAIModel::setCreatedBy(const QString &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIModel::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIModel::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QString OAIModel::getCreatedTime() const {
    return m_created_time;
}
void OAIModel::setCreatedTime(const QString &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIModel::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIModel::is_created_time_Valid() const{
    return m_created_time_isValid;
}

QString OAIModel::getDescription() const {
    return m_description;
}
void OAIModel::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIModel::is_description_Set() const{
    return m_description_isSet;
}

bool OAIModel::is_description_Valid() const{
    return m_description_isValid;
}

QMap<QString, OAIModel_fieldConfig_value> OAIModel::getFieldConfig() const {
    return m_field_config;
}
void OAIModel::setFieldConfig(const QMap<QString, OAIModel_fieldConfig_value> &field_config) {
    m_field_config = field_config;
    m_field_config_isSet = true;
}

bool OAIModel::is_field_config_Set() const{
    return m_field_config_isSet;
}

bool OAIModel::is_field_config_Valid() const{
    return m_field_config_isValid;
}

OAIObject OAIModel::getMetadata() const {
    return m_metadata;
}
void OAIModel::setMetadata(const OAIObject &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIModel::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIModel::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIModel::getModelId() const {
    return m_model_id;
}
void OAIModel::setModelId(const QString &model_id) {
    m_model_id = model_id;
    m_model_id_isSet = true;
}

bool OAIModel::is_model_id_Set() const{
    return m_model_id_isSet;
}

bool OAIModel::is_model_id_Valid() const{
    return m_model_id_isValid;
}

QString OAIModel::getName() const {
    return m_name;
}
void OAIModel::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIModel::is_name_Set() const{
    return m_name_isSet;
}

bool OAIModel::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIModel::getNumberOfDataBundles() const {
    return m_number_of_data_bundles;
}
void OAIModel::setNumberOfDataBundles(const qint32 &number_of_data_bundles) {
    m_number_of_data_bundles = number_of_data_bundles;
    m_number_of_data_bundles_isSet = true;
}

bool OAIModel::is_number_of_data_bundles_Set() const{
    return m_number_of_data_bundles_isSet;
}

bool OAIModel::is_number_of_data_bundles_Valid() const{
    return m_number_of_data_bundles_isValid;
}

qint32 OAIModel::getNumberOfRunningTrainings() const {
    return m_number_of_running_trainings;
}
void OAIModel::setNumberOfRunningTrainings(const qint32 &number_of_running_trainings) {
    m_number_of_running_trainings = number_of_running_trainings;
    m_number_of_running_trainings_isSet = true;
}

bool OAIModel::is_number_of_running_trainings_Set() const{
    return m_number_of_running_trainings_isSet;
}

bool OAIModel::is_number_of_running_trainings_Valid() const{
    return m_number_of_running_trainings_isValid;
}

QString OAIModel::getOrganizationId() const {
    return m_organization_id;
}
void OAIModel::setOrganizationId(const QString &organization_id) {
    m_organization_id = organization_id;
    m_organization_id_isSet = true;
}

bool OAIModel::is_organization_id_Set() const{
    return m_organization_id_isSet;
}

bool OAIModel::is_organization_id_Valid() const{
    return m_organization_id_isValid;
}

OAIModel_postprocessConfig OAIModel::getPostprocessConfig() const {
    return m_postprocess_config;
}
void OAIModel::setPostprocessConfig(const OAIModel_postprocessConfig &postprocess_config) {
    m_postprocess_config = postprocess_config;
    m_postprocess_config_isSet = true;
}

bool OAIModel::is_postprocess_config_Set() const{
    return m_postprocess_config_isSet;
}

bool OAIModel::is_postprocess_config_Valid() const{
    return m_postprocess_config_isValid;
}

OAIModel_preprocessConfig OAIModel::getPreprocessConfig() const {
    return m_preprocess_config;
}
void OAIModel::setPreprocessConfig(const OAIModel_preprocessConfig &preprocess_config) {
    m_preprocess_config = preprocess_config;
    m_preprocess_config_isSet = true;
}

bool OAIModel::is_preprocess_config_Set() const{
    return m_preprocess_config_isSet;
}

bool OAIModel::is_preprocess_config_Valid() const{
    return m_preprocess_config_isValid;
}

QString OAIModel::getStatus() const {
    return m_status;
}
void OAIModel::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIModel::is_status_Set() const{
    return m_status_isSet;
}

bool OAIModel::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIModel::getTrainingId() const {
    return m_training_id;
}
void OAIModel::setTrainingId(const QString &training_id) {
    m_training_id = training_id;
    m_training_id_isSet = true;
}

bool OAIModel::is_training_id_Set() const{
    return m_training_id_isSet;
}

bool OAIModel::is_training_id_Valid() const{
    return m_training_id_isValid;
}

QString OAIModel::getUpdatedBy() const {
    return m_updated_by;
}
void OAIModel::setUpdatedBy(const QString &updated_by) {
    m_updated_by = updated_by;
    m_updated_by_isSet = true;
}

bool OAIModel::is_updated_by_Set() const{
    return m_updated_by_isSet;
}

bool OAIModel::is_updated_by_Valid() const{
    return m_updated_by_isValid;
}

QString OAIModel::getUpdatedTime() const {
    return m_updated_time;
}
void OAIModel::setUpdatedTime(const QString &updated_time) {
    m_updated_time = updated_time;
    m_updated_time_isSet = true;
}

bool OAIModel::is_updated_time_Set() const{
    return m_updated_time_isSet;
}

bool OAIModel::is_updated_time_Valid() const{
    return m_updated_time_isValid;
}

bool OAIModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_config.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_data_bundles_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_running_trainings_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postprocess_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_preprocess_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_training_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_created_by_isValid && m_created_time_isValid && m_description_isValid && m_field_config_isValid && m_metadata_isValid && m_model_id_isValid && m_name_isValid && m_number_of_data_bundles_isValid && m_number_of_running_trainings_isValid && m_organization_id_isValid && m_preprocess_config_isValid && m_status_isValid && m_training_id_isValid && m_updated_by_isValid && m_updated_time_isValid && true;
}

} // namespace OpenAPI
