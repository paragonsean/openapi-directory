/**
 * Lucidtech API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-03-23T15:40:40Z
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransitionExecution.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransitionExecution::OAITransitionExecution(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransitionExecution::OAITransitionExecution() {
    this->initializeModel();
}

OAITransitionExecution::~OAITransitionExecution() {}

void OAITransitionExecution::initializeModel() {

    m_completed_by_isSet = false;
    m_completed_by_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_execution_id_isSet = false;
    m_execution_id_isValid = false;

    m_input_isSet = false;
    m_input_isValid = false;

    m_log_id_isSet = false;
    m_log_id_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_transition_id_isSet = false;
    m_transition_id_isValid = false;
}

void OAITransitionExecution::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransitionExecution::fromJsonObject(QJsonObject json) {

    m_completed_by_isValid = ::OpenAPI::fromJsonValue(m_completed_by, json[QString("completedBy")]);
    m_completed_by_isSet = !json[QString("completedBy")].isNull() && m_completed_by_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_execution_id_isValid = ::OpenAPI::fromJsonValue(m_execution_id, json[QString("executionId")]);
    m_execution_id_isSet = !json[QString("executionId")].isNull() && m_execution_id_isValid;

    m_input_isValid = ::OpenAPI::fromJsonValue(m_input, json[QString("input")]);
    m_input_isSet = !json[QString("input")].isNull() && m_input_isValid;

    m_log_id_isValid = ::OpenAPI::fromJsonValue(m_log_id, json[QString("logId")]);
    m_log_id_isSet = !json[QString("logId")].isNull() && m_log_id_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_transition_id_isValid = ::OpenAPI::fromJsonValue(m_transition_id, json[QString("transitionId")]);
    m_transition_id_isSet = !json[QString("transitionId")].isNull() && m_transition_id_isValid;
}

QString OAITransitionExecution::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransitionExecution::asJsonObject() const {
    QJsonObject obj;
    if (m_completed_by_isSet) {
        obj.insert(QString("completedBy"), ::OpenAPI::toJsonValue(m_completed_by));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_execution_id_isSet) {
        obj.insert(QString("executionId"), ::OpenAPI::toJsonValue(m_execution_id));
    }
    if (m_input_isSet) {
        obj.insert(QString("input"), ::OpenAPI::toJsonValue(m_input));
    }
    if (m_log_id_isSet) {
        obj.insert(QString("logId"), ::OpenAPI::toJsonValue(m_log_id));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_transition_id.isSet()) {
        obj.insert(QString("transitionId"), ::OpenAPI::toJsonValue(m_transition_id));
    }
    return obj;
}

QString OAITransitionExecution::getCompletedBy() const {
    return m_completed_by;
}
void OAITransitionExecution::setCompletedBy(const QString &completed_by) {
    m_completed_by = completed_by;
    m_completed_by_isSet = true;
}

bool OAITransitionExecution::is_completed_by_Set() const{
    return m_completed_by_isSet;
}

bool OAITransitionExecution::is_completed_by_Valid() const{
    return m_completed_by_isValid;
}

QString OAITransitionExecution::getEndTime() const {
    return m_end_time;
}
void OAITransitionExecution::setEndTime(const QString &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAITransitionExecution::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAITransitionExecution::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAITransitionExecution::getExecutionId() const {
    return m_execution_id;
}
void OAITransitionExecution::setExecutionId(const QString &execution_id) {
    m_execution_id = execution_id;
    m_execution_id_isSet = true;
}

bool OAITransitionExecution::is_execution_id_Set() const{
    return m_execution_id_isSet;
}

bool OAITransitionExecution::is_execution_id_Valid() const{
    return m_execution_id_isValid;
}

OAIObject OAITransitionExecution::getInput() const {
    return m_input;
}
void OAITransitionExecution::setInput(const OAIObject &input) {
    m_input = input;
    m_input_isSet = true;
}

bool OAITransitionExecution::is_input_Set() const{
    return m_input_isSet;
}

bool OAITransitionExecution::is_input_Valid() const{
    return m_input_isValid;
}

QString OAITransitionExecution::getLogId() const {
    return m_log_id;
}
void OAITransitionExecution::setLogId(const QString &log_id) {
    m_log_id = log_id;
    m_log_id_isSet = true;
}

bool OAITransitionExecution::is_log_id_Set() const{
    return m_log_id_isSet;
}

bool OAITransitionExecution::is_log_id_Valid() const{
    return m_log_id_isValid;
}

QString OAITransitionExecution::getStartTime() const {
    return m_start_time;
}
void OAITransitionExecution::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAITransitionExecution::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAITransitionExecution::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAITransitionExecution::getStatus() const {
    return m_status;
}
void OAITransitionExecution::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAITransitionExecution::is_status_Set() const{
    return m_status_isSet;
}

bool OAITransitionExecution::is_status_Valid() const{
    return m_status_isValid;
}

OAILogs_transitionId OAITransitionExecution::getTransitionId() const {
    return m_transition_id;
}
void OAITransitionExecution::setTransitionId(const OAILogs_transitionId &transition_id) {
    m_transition_id = transition_id;
    m_transition_id_isSet = true;
}

bool OAITransitionExecution::is_transition_id_Set() const{
    return m_transition_id_isSet;
}

bool OAITransitionExecution::is_transition_id_Valid() const{
    return m_transition_id_isValid;
}

bool OAITransitionExecution::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_completed_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transition_id.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransitionExecution::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_completed_by_isValid && m_execution_id_isValid && m_input_isValid && m_status_isValid && m_transition_id_isValid && true;
}

} // namespace OpenAPI
