/**
 * Lucidtech API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-03-23T15:40:40Z
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlans_plans_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlans_plans_inner::OAIPlans_plans_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlans_plans_inner::OAIPlans_plans_inner() {
    this->initializeModel();
}

OAIPlans_plans_inner::~OAIPlans_plans_inner() {}

void OAIPlans_plans_inner::initializeModel() {

    m_active_models_isSet = false;
    m_active_models_isValid = false;

    m_available_isSet = false;
    m_available_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_field_predictions_isSet = false;
    m_field_predictions_isValid = false;

    m_gpu_hours_isSet = false;
    m_gpu_hours_isValid = false;

    m_latest_isSet = false;
    m_latest_isValid = false;

    m_license_isSet = false;
    m_license_isValid = false;

    m_model_deployment_units_isSet = false;
    m_model_deployment_units_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_organization_id_isSet = false;
    m_organization_id_isValid = false;

    m_plan_id_isSet = false;
    m_plan_id_isValid = false;
}

void OAIPlans_plans_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlans_plans_inner::fromJsonObject(QJsonObject json) {

    m_active_models_isValid = ::OpenAPI::fromJsonValue(m_active_models, json[QString("activeModels")]);
    m_active_models_isSet = !json[QString("activeModels")].isNull() && m_active_models_isValid;

    m_available_isValid = ::OpenAPI::fromJsonValue(m_available, json[QString("available")]);
    m_available_isSet = !json[QString("available")].isNull() && m_available_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_field_predictions_isValid = ::OpenAPI::fromJsonValue(m_field_predictions, json[QString("fieldPredictions")]);
    m_field_predictions_isSet = !json[QString("fieldPredictions")].isNull() && m_field_predictions_isValid;

    m_gpu_hours_isValid = ::OpenAPI::fromJsonValue(m_gpu_hours, json[QString("gpuHours")]);
    m_gpu_hours_isSet = !json[QString("gpuHours")].isNull() && m_gpu_hours_isValid;

    m_latest_isValid = ::OpenAPI::fromJsonValue(m_latest, json[QString("latest")]);
    m_latest_isSet = !json[QString("latest")].isNull() && m_latest_isValid;

    m_license_isValid = ::OpenAPI::fromJsonValue(m_license, json[QString("license")]);
    m_license_isSet = !json[QString("license")].isNull() && m_license_isValid;

    m_model_deployment_units_isValid = ::OpenAPI::fromJsonValue(m_model_deployment_units, json[QString("modelDeploymentUnits")]);
    m_model_deployment_units_isSet = !json[QString("modelDeploymentUnits")].isNull() && m_model_deployment_units_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_organization_id_isValid = ::OpenAPI::fromJsonValue(m_organization_id, json[QString("organizationId")]);
    m_organization_id_isSet = !json[QString("organizationId")].isNull() && m_organization_id_isValid;

    m_plan_id_isValid = ::OpenAPI::fromJsonValue(m_plan_id, json[QString("planId")]);
    m_plan_id_isSet = !json[QString("planId")].isNull() && m_plan_id_isValid;
}

QString OAIPlans_plans_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlans_plans_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_active_models_isSet) {
        obj.insert(QString("activeModels"), ::OpenAPI::toJsonValue(m_active_models));
    }
    if (m_available_isSet) {
        obj.insert(QString("available"), ::OpenAPI::toJsonValue(m_available));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_field_predictions_isSet) {
        obj.insert(QString("fieldPredictions"), ::OpenAPI::toJsonValue(m_field_predictions));
    }
    if (m_gpu_hours_isSet) {
        obj.insert(QString("gpuHours"), ::OpenAPI::toJsonValue(m_gpu_hours));
    }
    if (m_latest_isSet) {
        obj.insert(QString("latest"), ::OpenAPI::toJsonValue(m_latest));
    }
    if (m_license_isSet) {
        obj.insert(QString("license"), ::OpenAPI::toJsonValue(m_license));
    }
    if (m_model_deployment_units_isSet) {
        obj.insert(QString("modelDeploymentUnits"), ::OpenAPI::toJsonValue(m_model_deployment_units));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_organization_id_isSet) {
        obj.insert(QString("organizationId"), ::OpenAPI::toJsonValue(m_organization_id));
    }
    if (m_plan_id_isSet) {
        obj.insert(QString("planId"), ::OpenAPI::toJsonValue(m_plan_id));
    }
    return obj;
}

OAIObject OAIPlans_plans_inner::getActiveModels() const {
    return m_active_models;
}
void OAIPlans_plans_inner::setActiveModels(const OAIObject &active_models) {
    m_active_models = active_models;
    m_active_models_isSet = true;
}

bool OAIPlans_plans_inner::is_active_models_Set() const{
    return m_active_models_isSet;
}

bool OAIPlans_plans_inner::is_active_models_Valid() const{
    return m_active_models_isValid;
}

bool OAIPlans_plans_inner::isAvailable() const {
    return m_available;
}
void OAIPlans_plans_inner::setAvailable(const bool &available) {
    m_available = available;
    m_available_isSet = true;
}

bool OAIPlans_plans_inner::is_available_Set() const{
    return m_available_isSet;
}

bool OAIPlans_plans_inner::is_available_Valid() const{
    return m_available_isValid;
}

QString OAIPlans_plans_inner::getCurrency() const {
    return m_currency;
}
void OAIPlans_plans_inner::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIPlans_plans_inner::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIPlans_plans_inner::is_currency_Valid() const{
    return m_currency_isValid;
}

QString OAIPlans_plans_inner::getDescription() const {
    return m_description;
}
void OAIPlans_plans_inner::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPlans_plans_inner::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPlans_plans_inner::is_description_Valid() const{
    return m_description_isValid;
}

OAIObject OAIPlans_plans_inner::getFieldPredictions() const {
    return m_field_predictions;
}
void OAIPlans_plans_inner::setFieldPredictions(const OAIObject &field_predictions) {
    m_field_predictions = field_predictions;
    m_field_predictions_isSet = true;
}

bool OAIPlans_plans_inner::is_field_predictions_Set() const{
    return m_field_predictions_isSet;
}

bool OAIPlans_plans_inner::is_field_predictions_Valid() const{
    return m_field_predictions_isValid;
}

OAIObject OAIPlans_plans_inner::getGpuHours() const {
    return m_gpu_hours;
}
void OAIPlans_plans_inner::setGpuHours(const OAIObject &gpu_hours) {
    m_gpu_hours = gpu_hours;
    m_gpu_hours_isSet = true;
}

bool OAIPlans_plans_inner::is_gpu_hours_Set() const{
    return m_gpu_hours_isSet;
}

bool OAIPlans_plans_inner::is_gpu_hours_Valid() const{
    return m_gpu_hours_isValid;
}

qint32 OAIPlans_plans_inner::getLatest() const {
    return m_latest;
}
void OAIPlans_plans_inner::setLatest(const qint32 &latest) {
    m_latest = latest;
    m_latest_isSet = true;
}

bool OAIPlans_plans_inner::is_latest_Set() const{
    return m_latest_isSet;
}

bool OAIPlans_plans_inner::is_latest_Valid() const{
    return m_latest_isValid;
}

OAIObject OAIPlans_plans_inner::getLicense() const {
    return m_license;
}
void OAIPlans_plans_inner::setLicense(const OAIObject &license) {
    m_license = license;
    m_license_isSet = true;
}

bool OAIPlans_plans_inner::is_license_Set() const{
    return m_license_isSet;
}

bool OAIPlans_plans_inner::is_license_Valid() const{
    return m_license_isValid;
}

OAIObject OAIPlans_plans_inner::getModelDeploymentUnits() const {
    return m_model_deployment_units;
}
void OAIPlans_plans_inner::setModelDeploymentUnits(const OAIObject &model_deployment_units) {
    m_model_deployment_units = model_deployment_units;
    m_model_deployment_units_isSet = true;
}

bool OAIPlans_plans_inner::is_model_deployment_units_Set() const{
    return m_model_deployment_units_isSet;
}

bool OAIPlans_plans_inner::is_model_deployment_units_Valid() const{
    return m_model_deployment_units_isValid;
}

QString OAIPlans_plans_inner::getName() const {
    return m_name;
}
void OAIPlans_plans_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPlans_plans_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPlans_plans_inner::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIPlans_plans_inner::getOrganizationId() const {
    return m_organization_id;
}
void OAIPlans_plans_inner::setOrganizationId(const QString &organization_id) {
    m_organization_id = organization_id;
    m_organization_id_isSet = true;
}

bool OAIPlans_plans_inner::is_organization_id_Set() const{
    return m_organization_id_isSet;
}

bool OAIPlans_plans_inner::is_organization_id_Valid() const{
    return m_organization_id_isValid;
}

QString OAIPlans_plans_inner::getPlanId() const {
    return m_plan_id;
}
void OAIPlans_plans_inner::setPlanId(const QString &plan_id) {
    m_plan_id = plan_id;
    m_plan_id_isSet = true;
}

bool OAIPlans_plans_inner::is_plan_id_Set() const{
    return m_plan_id_isSet;
}

bool OAIPlans_plans_inner::is_plan_id_Valid() const{
    return m_plan_id_isValid;
}

bool OAIPlans_plans_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_models_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_predictions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gpu_hours_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_deployment_units_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlans_plans_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_available_isValid && m_currency_isValid && m_latest_isValid && m_name_isValid && m_organization_id_isValid && m_plan_id_isValid && true;
}

} // namespace OpenAPI
