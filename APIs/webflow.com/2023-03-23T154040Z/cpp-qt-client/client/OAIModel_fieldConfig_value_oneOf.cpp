/**
 * Lucidtech API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-03-23T15:40:40Z
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIModel_fieldConfig_value_oneOf.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIModel_fieldConfig_value_oneOf::OAIModel_fieldConfig_value_oneOf(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIModel_fieldConfig_value_oneOf::OAIModel_fieldConfig_value_oneOf() {
    this->initializeModel();
}

OAIModel_fieldConfig_value_oneOf::~OAIModel_fieldConfig_value_oneOf() {}

void OAIModel_fieldConfig_value_oneOf::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_r_enum_isSet = false;
    m_r_enum_isValid = false;

    m_max_length_isSet = false;
    m_max_length_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIModel_fieldConfig_value_oneOf::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIModel_fieldConfig_value_oneOf::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_r_enum_isValid = ::OpenAPI::fromJsonValue(m_r_enum, json[QString("enum")]);
    m_r_enum_isSet = !json[QString("enum")].isNull() && m_r_enum_isValid;

    m_max_length_isValid = ::OpenAPI::fromJsonValue(m_max_length, json[QString("maxLength")]);
    m_max_length_isSet = !json[QString("maxLength")].isNull() && m_max_length_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIModel_fieldConfig_value_oneOf::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIModel_fieldConfig_value_oneOf::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_r_enum.size() > 0) {
        obj.insert(QString("enum"), ::OpenAPI::toJsonValue(m_r_enum));
    }
    if (m_max_length_isSet) {
        obj.insert(QString("maxLength"), ::OpenAPI::toJsonValue(m_max_length));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIModel_fieldConfig_value_oneOf::getDescription() const {
    return m_description;
}
void OAIModel_fieldConfig_value_oneOf::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIModel_fieldConfig_value_oneOf::is_description_Set() const{
    return m_description_isSet;
}

bool OAIModel_fieldConfig_value_oneOf::is_description_Valid() const{
    return m_description_isValid;
}

QSet<QString> OAIModel_fieldConfig_value_oneOf::getREnum() const {
    return m_r_enum;
}
void OAIModel_fieldConfig_value_oneOf::setREnum(const QSet<QString> &r_enum) {
    m_r_enum = r_enum;
    m_r_enum_isSet = true;
}

bool OAIModel_fieldConfig_value_oneOf::is_r_enum_Set() const{
    return m_r_enum_isSet;
}

bool OAIModel_fieldConfig_value_oneOf::is_r_enum_Valid() const{
    return m_r_enum_isValid;
}

qint32 OAIModel_fieldConfig_value_oneOf::getMaxLength() const {
    return m_max_length;
}
void OAIModel_fieldConfig_value_oneOf::setMaxLength(const qint32 &max_length) {
    m_max_length = max_length;
    m_max_length_isSet = true;
}

bool OAIModel_fieldConfig_value_oneOf::is_max_length_Set() const{
    return m_max_length_isSet;
}

bool OAIModel_fieldConfig_value_oneOf::is_max_length_Valid() const{
    return m_max_length_isValid;
}

QString OAIModel_fieldConfig_value_oneOf::getType() const {
    return m_type;
}
void OAIModel_fieldConfig_value_oneOf::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIModel_fieldConfig_value_oneOf::is_type_Set() const{
    return m_type_isSet;
}

bool OAIModel_fieldConfig_value_oneOf::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIModel_fieldConfig_value_oneOf::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_enum.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIModel_fieldConfig_value_oneOf::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
