/**
 * Lucidtech API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-03-23T15:40:40Z
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkflowExecutions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkflowExecutions::OAIWorkflowExecutions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkflowExecutions::OAIWorkflowExecutions() {
    this->initializeModel();
}

OAIWorkflowExecutions::~OAIWorkflowExecutions() {}

void OAIWorkflowExecutions::initializeModel() {

    m_executions_isSet = false;
    m_executions_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_order_isSet = false;
    m_order_isValid = false;

    m_sort_by_isSet = false;
    m_sort_by_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_workflow_id_isSet = false;
    m_workflow_id_isValid = false;
}

void OAIWorkflowExecutions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkflowExecutions::fromJsonObject(QJsonObject json) {

    m_executions_isValid = ::OpenAPI::fromJsonValue(m_executions, json[QString("executions")]);
    m_executions_isSet = !json[QString("executions")].isNull() && m_executions_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;

    m_order_isValid = ::OpenAPI::fromJsonValue(m_order, json[QString("order")]);
    m_order_isSet = !json[QString("order")].isNull() && m_order_isValid;

    m_sort_by_isValid = ::OpenAPI::fromJsonValue(m_sort_by, json[QString("sortBy")]);
    m_sort_by_isSet = !json[QString("sortBy")].isNull() && m_sort_by_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_workflow_id_isValid = ::OpenAPI::fromJsonValue(m_workflow_id, json[QString("workflowId")]);
    m_workflow_id_isSet = !json[QString("workflowId")].isNull() && m_workflow_id_isValid;
}

QString OAIWorkflowExecutions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkflowExecutions::asJsonObject() const {
    QJsonObject obj;
    if (m_executions.size() > 0) {
        obj.insert(QString("executions"), ::OpenAPI::toJsonValue(m_executions));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_order_isSet) {
        obj.insert(QString("order"), ::OpenAPI::toJsonValue(m_order));
    }
    if (m_sort_by_isSet) {
        obj.insert(QString("sortBy"), ::OpenAPI::toJsonValue(m_sort_by));
    }
    if (m_status.size() > 0) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_workflow_id_isSet) {
        obj.insert(QString("workflowId"), ::OpenAPI::toJsonValue(m_workflow_id));
    }
    return obj;
}

QList<OAIWorkflowExecutions_executions_inner> OAIWorkflowExecutions::getExecutions() const {
    return m_executions;
}
void OAIWorkflowExecutions::setExecutions(const QList<OAIWorkflowExecutions_executions_inner> &executions) {
    m_executions = executions;
    m_executions_isSet = true;
}

bool OAIWorkflowExecutions::is_executions_Set() const{
    return m_executions_isSet;
}

bool OAIWorkflowExecutions::is_executions_Valid() const{
    return m_executions_isValid;
}

QString OAIWorkflowExecutions::getNextToken() const {
    return m_next_token;
}
void OAIWorkflowExecutions::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIWorkflowExecutions::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIWorkflowExecutions::is_next_token_Valid() const{
    return m_next_token_isValid;
}

QString OAIWorkflowExecutions::getOrder() const {
    return m_order;
}
void OAIWorkflowExecutions::setOrder(const QString &order) {
    m_order = order;
    m_order_isSet = true;
}

bool OAIWorkflowExecutions::is_order_Set() const{
    return m_order_isSet;
}

bool OAIWorkflowExecutions::is_order_Valid() const{
    return m_order_isValid;
}

QString OAIWorkflowExecutions::getSortBy() const {
    return m_sort_by;
}
void OAIWorkflowExecutions::setSortBy(const QString &sort_by) {
    m_sort_by = sort_by;
    m_sort_by_isSet = true;
}

bool OAIWorkflowExecutions::is_sort_by_Set() const{
    return m_sort_by_isSet;
}

bool OAIWorkflowExecutions::is_sort_by_Valid() const{
    return m_sort_by_isValid;
}

QList<QString> OAIWorkflowExecutions::getStatus() const {
    return m_status;
}
void OAIWorkflowExecutions::setStatus(const QList<QString> &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIWorkflowExecutions::is_status_Set() const{
    return m_status_isSet;
}

bool OAIWorkflowExecutions::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIWorkflowExecutions::getWorkflowId() const {
    return m_workflow_id;
}
void OAIWorkflowExecutions::setWorkflowId(const QString &workflow_id) {
    m_workflow_id = workflow_id;
    m_workflow_id_isSet = true;
}

bool OAIWorkflowExecutions::is_workflow_id_Set() const{
    return m_workflow_id_isSet;
}

bool OAIWorkflowExecutions::is_workflow_id_Valid() const{
    return m_workflow_id_isValid;
}

bool OAIWorkflowExecutions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_executions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_workflow_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkflowExecutions::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_executions_isValid && m_next_token_isValid && m_workflow_id_isValid && true;
}

} // namespace OpenAPI
