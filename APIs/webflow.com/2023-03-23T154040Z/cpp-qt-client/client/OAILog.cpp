/**
 * Lucidtech API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-03-23T15:40:40Z
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILog.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILog::OAILog(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILog::OAILog() {
    this->initializeModel();
}

OAILog::~OAILog() {}

void OAILog::initializeModel() {

    m_events_isSet = false;
    m_events_isValid = false;

    m_log_id_isSet = false;
    m_log_id_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_transition_execution_id_isSet = false;
    m_transition_execution_id_isValid = false;

    m_transition_id_isSet = false;
    m_transition_id_isValid = false;

    m_workflow_execution_id_isSet = false;
    m_workflow_execution_id_isValid = false;

    m_workflow_id_isSet = false;
    m_workflow_id_isValid = false;
}

void OAILog::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILog::fromJsonObject(QJsonObject json) {

    m_events_isValid = ::OpenAPI::fromJsonValue(m_events, json[QString("events")]);
    m_events_isSet = !json[QString("events")].isNull() && m_events_isValid;

    m_log_id_isValid = ::OpenAPI::fromJsonValue(m_log_id, json[QString("logId")]);
    m_log_id_isSet = !json[QString("logId")].isNull() && m_log_id_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_transition_execution_id_isValid = ::OpenAPI::fromJsonValue(m_transition_execution_id, json[QString("transitionExecutionId")]);
    m_transition_execution_id_isSet = !json[QString("transitionExecutionId")].isNull() && m_transition_execution_id_isValid;

    m_transition_id_isValid = ::OpenAPI::fromJsonValue(m_transition_id, json[QString("transitionId")]);
    m_transition_id_isSet = !json[QString("transitionId")].isNull() && m_transition_id_isValid;

    m_workflow_execution_id_isValid = ::OpenAPI::fromJsonValue(m_workflow_execution_id, json[QString("workflowExecutionId")]);
    m_workflow_execution_id_isSet = !json[QString("workflowExecutionId")].isNull() && m_workflow_execution_id_isValid;

    m_workflow_id_isValid = ::OpenAPI::fromJsonValue(m_workflow_id, json[QString("workflowId")]);
    m_workflow_id_isSet = !json[QString("workflowId")].isNull() && m_workflow_id_isValid;
}

QString OAILog::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILog::asJsonObject() const {
    QJsonObject obj;
    if (m_events.size() > 0) {
        obj.insert(QString("events"), ::OpenAPI::toJsonValue(m_events));
    }
    if (m_log_id_isSet) {
        obj.insert(QString("logId"), ::OpenAPI::toJsonValue(m_log_id));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_transition_execution_id_isSet) {
        obj.insert(QString("transitionExecutionId"), ::OpenAPI::toJsonValue(m_transition_execution_id));
    }
    if (m_transition_id.isSet()) {
        obj.insert(QString("transitionId"), ::OpenAPI::toJsonValue(m_transition_id));
    }
    if (m_workflow_execution_id_isSet) {
        obj.insert(QString("workflowExecutionId"), ::OpenAPI::toJsonValue(m_workflow_execution_id));
    }
    if (m_workflow_id_isSet) {
        obj.insert(QString("workflowId"), ::OpenAPI::toJsonValue(m_workflow_id));
    }
    return obj;
}

QList<OAIObject> OAILog::getEvents() const {
    return m_events;
}
void OAILog::setEvents(const QList<OAIObject> &events) {
    m_events = events;
    m_events_isSet = true;
}

bool OAILog::is_events_Set() const{
    return m_events_isSet;
}

bool OAILog::is_events_Valid() const{
    return m_events_isValid;
}

QString OAILog::getLogId() const {
    return m_log_id;
}
void OAILog::setLogId(const QString &log_id) {
    m_log_id = log_id;
    m_log_id_isSet = true;
}

bool OAILog::is_log_id_Set() const{
    return m_log_id_isSet;
}

bool OAILog::is_log_id_Valid() const{
    return m_log_id_isValid;
}

QString OAILog::getStartTime() const {
    return m_start_time;
}
void OAILog::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAILog::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAILog::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAILog::getTransitionExecutionId() const {
    return m_transition_execution_id;
}
void OAILog::setTransitionExecutionId(const QString &transition_execution_id) {
    m_transition_execution_id = transition_execution_id;
    m_transition_execution_id_isSet = true;
}

bool OAILog::is_transition_execution_id_Set() const{
    return m_transition_execution_id_isSet;
}

bool OAILog::is_transition_execution_id_Valid() const{
    return m_transition_execution_id_isValid;
}

OAILog_transitionId OAILog::getTransitionId() const {
    return m_transition_id;
}
void OAILog::setTransitionId(const OAILog_transitionId &transition_id) {
    m_transition_id = transition_id;
    m_transition_id_isSet = true;
}

bool OAILog::is_transition_id_Set() const{
    return m_transition_id_isSet;
}

bool OAILog::is_transition_id_Valid() const{
    return m_transition_id_isValid;
}

QString OAILog::getWorkflowExecutionId() const {
    return m_workflow_execution_id;
}
void OAILog::setWorkflowExecutionId(const QString &workflow_execution_id) {
    m_workflow_execution_id = workflow_execution_id;
    m_workflow_execution_id_isSet = true;
}

bool OAILog::is_workflow_execution_id_Set() const{
    return m_workflow_execution_id_isSet;
}

bool OAILog::is_workflow_execution_id_Valid() const{
    return m_workflow_execution_id_isValid;
}

QString OAILog::getWorkflowId() const {
    return m_workflow_id;
}
void OAILog::setWorkflowId(const QString &workflow_id) {
    m_workflow_id = workflow_id;
    m_workflow_id_isSet = true;
}

bool OAILog::is_workflow_id_Set() const{
    return m_workflow_id_isSet;
}

bool OAILog::is_workflow_id_Valid() const{
    return m_workflow_id_isValid;
}

bool OAILog::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_events.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transition_execution_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transition_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_workflow_execution_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workflow_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILog::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_log_id_isValid && m_start_time_isValid && m_transition_execution_id_isValid && m_transition_id_isValid && m_workflow_execution_id_isValid && m_workflow_id_isValid && true;
}

} // namespace OpenAPI
