/**
 * Lucidtech API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-03-23T15:40:40Z
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPrediction_predictions_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPrediction_predictions_inner::OAIPrediction_predictions_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPrediction_predictions_inner::OAIPrediction_predictions_inner() {
    this->initializeModel();
}

OAIPrediction_predictions_inner::~OAIPrediction_predictions_inner() {}

void OAIPrediction_predictions_inner::initializeModel() {

    m_confidence_isSet = false;
    m_confidence_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_page_isSet = false;
    m_page_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIPrediction_predictions_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPrediction_predictions_inner::fromJsonObject(QJsonObject json) {

    m_confidence_isValid = ::OpenAPI::fromJsonValue(m_confidence, json[QString("confidence")]);
    m_confidence_isSet = !json[QString("confidence")].isNull() && m_confidence_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_page_isValid = ::OpenAPI::fromJsonValue(m_page, json[QString("page")]);
    m_page_isSet = !json[QString("page")].isNull() && m_page_isValid;

    if(json["value"].isArray()){
        auto arr = json["value"].toArray();
        m_value_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QList<OAIPrediction_predictions_inner_anyOf> item;
                m_value_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_value_isSet = !jval.isNull() && m_value_isValid;
                m_value.push_back(item);
            }
        }
    }
}

QString OAIPrediction_predictions_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPrediction_predictions_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_confidence_isSet) {
        obj.insert(QString("confidence"), ::OpenAPI::toJsonValue(m_confidence));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_location.size() > 0) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_page_isSet) {
        obj.insert(QString("page"), ::OpenAPI::toJsonValue(m_page));
    }
    if (m_value.size() > 0) {
        
        obj.insert(QString("value"), toJsonValue(m_value));
    }
    return obj;
}

double OAIPrediction_predictions_inner::getConfidence() const {
    return m_confidence;
}
void OAIPrediction_predictions_inner::setConfidence(const double &confidence) {
    m_confidence = confidence;
    m_confidence_isSet = true;
}

bool OAIPrediction_predictions_inner::is_confidence_Set() const{
    return m_confidence_isSet;
}

bool OAIPrediction_predictions_inner::is_confidence_Valid() const{
    return m_confidence_isValid;
}

QString OAIPrediction_predictions_inner::getLabel() const {
    return m_label;
}
void OAIPrediction_predictions_inner::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIPrediction_predictions_inner::is_label_Set() const{
    return m_label_isSet;
}

bool OAIPrediction_predictions_inner::is_label_Valid() const{
    return m_label_isValid;
}

QList<double> OAIPrediction_predictions_inner::getLocation() const {
    return m_location;
}
void OAIPrediction_predictions_inner::setLocation(const QList<double> &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIPrediction_predictions_inner::is_location_Set() const{
    return m_location_isSet;
}

bool OAIPrediction_predictions_inner::is_location_Valid() const{
    return m_location_isValid;
}

qint32 OAIPrediction_predictions_inner::getPage() const {
    return m_page;
}
void OAIPrediction_predictions_inner::setPage(const qint32 &page) {
    m_page = page;
    m_page_isSet = true;
}

bool OAIPrediction_predictions_inner::is_page_Set() const{
    return m_page_isSet;
}

bool OAIPrediction_predictions_inner::is_page_Valid() const{
    return m_page_isValid;
}

QList<QList<OAIPrediction_predictions_inner_anyOf>> OAIPrediction_predictions_inner::getValue() const {
    return m_value;
}
void OAIPrediction_predictions_inner::setValue(const QList<QList<OAIPrediction_predictions_inner_anyOf>> &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIPrediction_predictions_inner::is_value_Set() const{
    return m_value_isSet;
}

bool OAIPrediction_predictions_inner::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIPrediction_predictions_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_confidence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPrediction_predictions_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_confidence_isValid && m_label_isValid && m_value_isValid && true;
}

} // namespace OpenAPI
