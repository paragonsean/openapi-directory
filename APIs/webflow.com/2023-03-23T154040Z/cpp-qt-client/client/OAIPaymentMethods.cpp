/**
 * Lucidtech API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-03-23T15:40:40Z
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaymentMethods.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaymentMethods::OAIPaymentMethods(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaymentMethods::OAIPaymentMethods() {
    this->initializeModel();
}

OAIPaymentMethods::~OAIPaymentMethods() {}

void OAIPaymentMethods::initializeModel() {

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_payment_methods_isSet = false;
    m_payment_methods_isValid = false;
}

void OAIPaymentMethods::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPaymentMethods::fromJsonObject(QJsonObject json) {

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;

    m_payment_methods_isValid = ::OpenAPI::fromJsonValue(m_payment_methods, json[QString("paymentMethods")]);
    m_payment_methods_isSet = !json[QString("paymentMethods")].isNull() && m_payment_methods_isValid;
}

QString OAIPaymentMethods::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPaymentMethods::asJsonObject() const {
    QJsonObject obj;
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_payment_methods.size() > 0) {
        obj.insert(QString("paymentMethods"), ::OpenAPI::toJsonValue(m_payment_methods));
    }
    return obj;
}

QString OAIPaymentMethods::getNextToken() const {
    return m_next_token;
}
void OAIPaymentMethods::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIPaymentMethods::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIPaymentMethods::is_next_token_Valid() const{
    return m_next_token_isValid;
}

QList<OAIPaymentMethods_paymentMethods_inner> OAIPaymentMethods::getPaymentMethods() const {
    return m_payment_methods;
}
void OAIPaymentMethods::setPaymentMethods(const QList<OAIPaymentMethods_paymentMethods_inner> &payment_methods) {
    m_payment_methods = payment_methods;
    m_payment_methods_isSet = true;
}

bool OAIPaymentMethods::is_payment_methods_Set() const{
    return m_payment_methods_isSet;
}

bool OAIPaymentMethods::is_payment_methods_Valid() const{
    return m_payment_methods_isValid;
}

bool OAIPaymentMethods::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_methods.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPaymentMethods::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_next_token_isValid && m_payment_methods_isValid && true;
}

} // namespace OpenAPI
