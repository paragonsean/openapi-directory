/**
 * Lucidtech API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-03-23T15:40:40Z
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkflow.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkflow::OAIWorkflow(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkflow::OAIWorkflow() {
    this->initializeModel();
}

OAIWorkflow::~OAIWorkflow() {}

void OAIWorkflow::initializeModel() {

    m_completed_config_isSet = false;
    m_completed_config_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_error_config_isSet = false;
    m_error_config_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_number_of_running_executions_isSet = false;
    m_number_of_running_executions_isValid = false;

    m_updated_by_isSet = false;
    m_updated_by_isValid = false;

    m_updated_time_isSet = false;
    m_updated_time_isValid = false;

    m_workflow_id_isSet = false;
    m_workflow_id_isValid = false;
}

void OAIWorkflow::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkflow::fromJsonObject(QJsonObject json) {

    m_completed_config_isValid = ::OpenAPI::fromJsonValue(m_completed_config, json[QString("completedConfig")]);
    m_completed_config_isSet = !json[QString("completedConfig")].isNull() && m_completed_config_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("createdBy")]);
    m_created_by_isSet = !json[QString("createdBy")].isNull() && m_created_by_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("createdTime")]);
    m_created_time_isSet = !json[QString("createdTime")].isNull() && m_created_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_error_config_isValid = ::OpenAPI::fromJsonValue(m_error_config, json[QString("errorConfig")]);
    m_error_config_isSet = !json[QString("errorConfig")].isNull() && m_error_config_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_number_of_running_executions_isValid = ::OpenAPI::fromJsonValue(m_number_of_running_executions, json[QString("numberOfRunningExecutions")]);
    m_number_of_running_executions_isSet = !json[QString("numberOfRunningExecutions")].isNull() && m_number_of_running_executions_isValid;

    m_updated_by_isValid = ::OpenAPI::fromJsonValue(m_updated_by, json[QString("updatedBy")]);
    m_updated_by_isSet = !json[QString("updatedBy")].isNull() && m_updated_by_isValid;

    m_updated_time_isValid = ::OpenAPI::fromJsonValue(m_updated_time, json[QString("updatedTime")]);
    m_updated_time_isSet = !json[QString("updatedTime")].isNull() && m_updated_time_isValid;

    m_workflow_id_isValid = ::OpenAPI::fromJsonValue(m_workflow_id, json[QString("workflowId")]);
    m_workflow_id_isSet = !json[QString("workflowId")].isNull() && m_workflow_id_isValid;
}

QString OAIWorkflow::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkflow::asJsonObject() const {
    QJsonObject obj;
    if (m_completed_config.isSet()) {
        obj.insert(QString("completedConfig"), ::OpenAPI::toJsonValue(m_completed_config));
    }
    if (m_created_by_isSet) {
        obj.insert(QString("createdBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("createdTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_error_config.isSet()) {
        obj.insert(QString("errorConfig"), ::OpenAPI::toJsonValue(m_error_config));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_number_of_running_executions_isSet) {
        obj.insert(QString("numberOfRunningExecutions"), ::OpenAPI::toJsonValue(m_number_of_running_executions));
    }
    if (m_updated_by_isSet) {
        obj.insert(QString("updatedBy"), ::OpenAPI::toJsonValue(m_updated_by));
    }
    if (m_updated_time_isSet) {
        obj.insert(QString("updatedTime"), ::OpenAPI::toJsonValue(m_updated_time));
    }
    if (m_workflow_id_isSet) {
        obj.insert(QString("workflowId"), ::OpenAPI::toJsonValue(m_workflow_id));
    }
    return obj;
}

OAIWorkflow_completedConfig OAIWorkflow::getCompletedConfig() const {
    return m_completed_config;
}
void OAIWorkflow::setCompletedConfig(const OAIWorkflow_completedConfig &completed_config) {
    m_completed_config = completed_config;
    m_completed_config_isSet = true;
}

bool OAIWorkflow::is_completed_config_Set() const{
    return m_completed_config_isSet;
}

bool OAIWorkflow::is_completed_config_Valid() const{
    return m_completed_config_isValid;
}

QString OAIWorkflow::getCreatedBy() const {
    return m_created_by;
}
void OAIWorkflow::setCreatedBy(const QString &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIWorkflow::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIWorkflow::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QString OAIWorkflow::getCreatedTime() const {
    return m_created_time;
}
void OAIWorkflow::setCreatedTime(const QString &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIWorkflow::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIWorkflow::is_created_time_Valid() const{
    return m_created_time_isValid;
}

QString OAIWorkflow::getDescription() const {
    return m_description;
}
void OAIWorkflow::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIWorkflow::is_description_Set() const{
    return m_description_isSet;
}

bool OAIWorkflow::is_description_Valid() const{
    return m_description_isValid;
}

OAIWorkflow_errorConfig OAIWorkflow::getErrorConfig() const {
    return m_error_config;
}
void OAIWorkflow::setErrorConfig(const OAIWorkflow_errorConfig &error_config) {
    m_error_config = error_config;
    m_error_config_isSet = true;
}

bool OAIWorkflow::is_error_config_Set() const{
    return m_error_config_isSet;
}

bool OAIWorkflow::is_error_config_Valid() const{
    return m_error_config_isValid;
}

QString OAIWorkflow::getName() const {
    return m_name;
}
void OAIWorkflow::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIWorkflow::is_name_Set() const{
    return m_name_isSet;
}

bool OAIWorkflow::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIWorkflow::getNumberOfRunningExecutions() const {
    return m_number_of_running_executions;
}
void OAIWorkflow::setNumberOfRunningExecutions(const qint32 &number_of_running_executions) {
    m_number_of_running_executions = number_of_running_executions;
    m_number_of_running_executions_isSet = true;
}

bool OAIWorkflow::is_number_of_running_executions_Set() const{
    return m_number_of_running_executions_isSet;
}

bool OAIWorkflow::is_number_of_running_executions_Valid() const{
    return m_number_of_running_executions_isValid;
}

QString OAIWorkflow::getUpdatedBy() const {
    return m_updated_by;
}
void OAIWorkflow::setUpdatedBy(const QString &updated_by) {
    m_updated_by = updated_by;
    m_updated_by_isSet = true;
}

bool OAIWorkflow::is_updated_by_Set() const{
    return m_updated_by_isSet;
}

bool OAIWorkflow::is_updated_by_Valid() const{
    return m_updated_by_isValid;
}

QString OAIWorkflow::getUpdatedTime() const {
    return m_updated_time;
}
void OAIWorkflow::setUpdatedTime(const QString &updated_time) {
    m_updated_time = updated_time;
    m_updated_time_isSet = true;
}

bool OAIWorkflow::is_updated_time_Set() const{
    return m_updated_time_isSet;
}

bool OAIWorkflow::is_updated_time_Valid() const{
    return m_updated_time_isValid;
}

QString OAIWorkflow::getWorkflowId() const {
    return m_workflow_id;
}
void OAIWorkflow::setWorkflowId(const QString &workflow_id) {
    m_workflow_id = workflow_id;
    m_workflow_id_isSet = true;
}

bool OAIWorkflow::is_workflow_id_Set() const{
    return m_workflow_id_isSet;
}

bool OAIWorkflow::is_workflow_id_Valid() const{
    return m_workflow_id_isValid;
}

bool OAIWorkflow::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_completed_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_running_executions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workflow_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkflow::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_completed_config_isValid && m_created_by_isValid && m_created_time_isValid && m_description_isValid && m_error_config_isValid && m_name_isValid && m_number_of_running_executions_isValid && m_updated_by_isValid && m_updated_time_isValid && m_workflow_id_isValid && true;
}

} // namespace OpenAPI
