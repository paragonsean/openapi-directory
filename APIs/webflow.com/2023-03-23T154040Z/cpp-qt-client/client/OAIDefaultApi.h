/**
 * Lucidtech API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-03-23T15:40:40Z
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAppClient.h"
#include "OAIAppClients.h"
#include "OAIAsset.h"
#include "OAIAssets.h"
#include "OAIDataBundle.h"
#include "OAIDataBundles.h"
#include "OAIDataset.h"
#include "OAIDatasets.h"
#include "OAIDeploymentEnvironment.h"
#include "OAIDeploymentEnvironments.h"
#include "OAIDocument.h"
#include "OAIDocuments.h"
#include "OAIError.h"
#include "OAILog.h"
#include "OAILogs.h"
#include "OAIModel.h"
#include "OAIModels.h"
#include "OAIObject.h"
#include "OAIOrganization.h"
#include "OAIOrganizations.h"
#include "OAIPatchAppClientId.h"
#include "OAIPatchAssetId.h"
#include "OAIPatchDataBundleId.h"
#include "OAIPatchDatasetId.h"
#include "OAIPatchDocumentId.h"
#include "OAIPatchModelId.h"
#include "OAIPatchOrganizationId.h"
#include "OAIPatchPaymentMethodId.h"
#include "OAIPatchSecretId.h"
#include "OAIPatchTrainingId.h"
#include "OAIPatchTransistionExecutionId.h"
#include "OAIPatchTransitionId.h"
#include "OAIPatchUserId.h"
#include "OAIPatchWorkflowExecutionId.h"
#include "OAIPatchWorkflowId.h"
#include "OAIPaymentMethod.h"
#include "OAIPaymentMethods.h"
#include "OAIPlan.h"
#include "OAIPlans.h"
#include "OAIPostAppClients.h"
#include "OAIPostAssets.h"
#include "OAIPostDataBundles.h"
#include "OAIPostDatasets.h"
#include "OAIPostDocuments.h"
#include "OAIPostModels.h"
#include "OAIPostOrganizations.h"
#include "OAIPostPaymentMethods.h"
#include "OAIPostPredictions.h"
#include "OAIPostSecrets.h"
#include "OAIPostTrainings.h"
#include "OAIPostTransitions.h"
#include "OAIPostUsers.h"
#include "OAIPostWorkflowExecutions.h"
#include "OAIPostWorkflows.h"
#include "OAIPrediction.h"
#include "OAIPredictions.h"
#include "OAIProfile.h"
#include "OAISecret.h"
#include "OAISecrets.h"
#include "OAITraining.h"
#include "OAITrainings.h"
#include "OAITransition.h"
#include "OAITransitionExecution.h"
#include "OAITransitionExecutions.h"
#include "OAITransitions.h"
#include "OAIUser.h"
#include "OAIUsers.h"
#include "OAIWorkflow.h"
#include "OAIWorkflowExecution.h"
#include "OAIWorkflowExecutions.h"
#include "OAIWorkflows.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  app_client_id QString [required]
    */
    virtual void appClientsAppClientIdDelete(const QString &app_client_id);

    /**
    * @param[in]  app_client_id QString [required]
    * @param[in]  body OAIObject [required]
    */
    virtual void appClientsAppClientIdOptions(const QString &app_client_id, const OAIObject &body);

    /**
    * @param[in]  app_client_id QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  oai_patch_app_client_id OAIPatchAppClientId [required]
    */
    virtual void appClientsAppClientIdPatch(const QString &app_client_id, const QString &content_type, const OAIPatchAppClientId &oai_patch_app_client_id);

    /**
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results QString [optional]
    */
    virtual void appClientsGet(const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  body OAIObject [required]
    */
    virtual void appClientsOptions(const OAIObject &body);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  oai_post_app_clients OAIPostAppClients [required]
    */
    virtual void appClientsPost(const QString &content_type, const OAIPostAppClients &oai_post_app_clients);

    /**
    * @param[in]  asset_id QString [required]
    */
    virtual void assetsAssetIdDelete(const QString &asset_id);

    /**
    * @param[in]  asset_id QString [required]
    */
    virtual void assetsAssetIdGet(const QString &asset_id);

    /**
    * @param[in]  asset_id QString [required]
    * @param[in]  body OAIObject [required]
    */
    virtual void assetsAssetIdOptions(const QString &asset_id, const OAIObject &body);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  asset_id QString [required]
    * @param[in]  oai_patch_asset_id OAIPatchAssetId [required]
    */
    virtual void assetsAssetIdPatch(const QString &content_type, const QString &asset_id, const OAIPatchAssetId &oai_patch_asset_id);

    /**
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results QString [optional]
    */
    virtual void assetsGet(const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  body OAIObject [required]
    */
    virtual void assetsOptions(const OAIObject &body);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  oai_post_assets OAIPostAssets [required]
    */
    virtual void assetsPost(const QString &content_type, const OAIPostAssets &oai_post_assets);

    /**
    * @param[in]  dataset_id QString [required]
    */
    virtual void datasetsDatasetIdDelete(const QString &dataset_id);

    /**
    * @param[in]  dataset_id QString [required]
    */
    virtual void datasetsDatasetIdGet(const QString &dataset_id);

    /**
    * @param[in]  dataset_id QString [required]
    * @param[in]  body OAIObject [required]
    */
    virtual void datasetsDatasetIdOptions(const QString &dataset_id, const OAIObject &body);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  dataset_id QString [required]
    * @param[in]  oai_patch_dataset_id OAIPatchDatasetId [required]
    */
    virtual void datasetsDatasetIdPatch(const QString &content_type, const QString &dataset_id, const OAIPatchDatasetId &oai_patch_dataset_id);

    /**
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results QString [optional]
    */
    virtual void datasetsGet(const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  body OAIObject [required]
    */
    virtual void datasetsOptions(const OAIObject &body);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  oai_post_datasets OAIPostDatasets [required]
    */
    virtual void datasetsPost(const QString &content_type, const OAIPostDatasets &oai_post_datasets);

    /**
    * @param[in]  deployment_environment_id QString [required]
    */
    virtual void deploymentEnvironmentsDeploymentEnvironmentIdGet(const QString &deployment_environment_id);

    /**
    * @param[in]  deployment_environment_id QString [required]
    * @param[in]  body OAIObject [required]
    */
    virtual void deploymentEnvironmentsDeploymentEnvironmentIdOptions(const QString &deployment_environment_id, const OAIObject &body);

    /**
    * @param[in]  owner QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results QString [optional]
    */
    virtual void deploymentEnvironmentsGet(const ::OpenAPI::OptionalParam<QString> &owner = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  body OAIObject [required]
    */
    virtual void deploymentEnvironmentsOptions(const OAIObject &body);

    /**
    * @param[in]  consent_id QString [optional]
    * @param[in]  dataset_id QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results QString [optional]
    */
    virtual void documentsDelete(const ::OpenAPI::OptionalParam<QString> &consent_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dataset_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  document_id QString [required]
    */
    virtual void documentsDocumentIdDelete(const QString &document_id);

    /**
    * @param[in]  document_id QString [required]
    */
    virtual void documentsDocumentIdGet(const QString &document_id);

    /**
    * @param[in]  document_id QString [required]
    * @param[in]  body OAIObject [required]
    */
    virtual void documentsDocumentIdOptions(const QString &document_id, const OAIObject &body);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  document_id QString [required]
    * @param[in]  oai_patch_document_id OAIPatchDocumentId [required]
    */
    virtual void documentsDocumentIdPatch(const QString &content_type, const QString &document_id, const OAIPatchDocumentId &oai_patch_document_id);

    /**
    * @param[in]  dataset_id QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  order QString [optional]
    * @param[in]  document_id QString [optional]
    * @param[in]  consent_id QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  sort_by QString [optional]
    */
    virtual void documentsGet(const ::OpenAPI::OptionalParam<QString> &dataset_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &document_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &consent_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_by = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  body OAIObject [required]
    */
    virtual void documentsOptions(const OAIObject &body);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  oai_post_documents OAIPostDocuments [required]
    */
    virtual void documentsPost(const QString &content_type, const OAIPostDocuments &oai_post_documents);

    /**
    * @param[in]  workflow_id QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  order QString [optional]
    * @param[in]  transition_execution_id QString [optional]
    * @param[in]  transition_id QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  workflow_execution_id QString [optional]
    */
    virtual void logsGet(const ::OpenAPI::OptionalParam<QString> &workflow_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &transition_execution_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &transition_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &workflow_execution_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  log_id QString [required]
    */
    virtual void logsLogIdGet(const QString &log_id);

    /**
    * @param[in]  log_id QString [required]
    * @param[in]  body OAIObject [required]
    */
    virtual void logsLogIdOptions(const QString &log_id, const OAIObject &body);

    /**
    * @param[in]  body OAIObject [required]
    */
    virtual void logsOptions(const OAIObject &body);

    /**
    * @param[in]  owner QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results QString [optional]
    */
    virtual void modelsGet(const ::OpenAPI::OptionalParam<QString> &owner = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  data_bundle_id QString [required]
    * @param[in]  model_id QString [required]
    */
    virtual void modelsModelIdDataBundlesDataBundleIdDelete(const QString &data_bundle_id, const QString &model_id);

    /**
    * @param[in]  data_bundle_id QString [required]
    * @param[in]  model_id QString [required]
    * @param[in]  body OAIObject [required]
    */
    virtual void modelsModelIdDataBundlesDataBundleIdOptions(const QString &data_bundle_id, const QString &model_id, const OAIObject &body);

    /**
    * @param[in]  data_bundle_id QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  model_id QString [required]
    * @param[in]  oai_patch_data_bundle_id OAIPatchDataBundleId [required]
    */
    virtual void modelsModelIdDataBundlesDataBundleIdPatch(const QString &data_bundle_id, const QString &content_type, const QString &model_id, const OAIPatchDataBundleId &oai_patch_data_bundle_id);

    /**
    * @param[in]  model_id QString [required]
    * @param[in]  status QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results QString [optional]
    */
    virtual void modelsModelIdDataBundlesGet(const QString &model_id, const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  model_id QString [required]
    * @param[in]  body OAIObject [required]
    */
    virtual void modelsModelIdDataBundlesOptions(const QString &model_id, const OAIObject &body);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  model_id QString [required]
    * @param[in]  oai_post_data_bundles OAIPostDataBundles [required]
    */
    virtual void modelsModelIdDataBundlesPost(const QString &content_type, const QString &model_id, const OAIPostDataBundles &oai_post_data_bundles);

    /**
    * @param[in]  model_id QString [required]
    */
    virtual void modelsModelIdDelete(const QString &model_id);

    /**
    * @param[in]  model_id QString [required]
    */
    virtual void modelsModelIdGet(const QString &model_id);

    /**
    * @param[in]  model_id QString [required]
    * @param[in]  body OAIObject [required]
    */
    virtual void modelsModelIdOptions(const QString &model_id, const OAIObject &body);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  model_id QString [required]
    * @param[in]  oai_patch_model_id OAIPatchModelId [required]
    */
    virtual void modelsModelIdPatch(const QString &content_type, const QString &model_id, const OAIPatchModelId &oai_patch_model_id);

    /**
    * @param[in]  model_id QString [required]
    * @param[in]  status QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results QString [optional]
    */
    virtual void modelsModelIdTrainingsGet(const QString &model_id, const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  model_id QString [required]
    * @param[in]  body OAIObject [required]
    */
    virtual void modelsModelIdTrainingsOptions(const QString &model_id, const OAIObject &body);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  model_id QString [required]
    * @param[in]  oai_post_trainings OAIPostTrainings [required]
    */
    virtual void modelsModelIdTrainingsPost(const QString &content_type, const QString &model_id, const OAIPostTrainings &oai_post_trainings);

    /**
    * @param[in]  model_id QString [required]
    * @param[in]  training_id QString [required]
    * @param[in]  body OAIObject [required]
    */
    virtual void modelsModelIdTrainingsTrainingIdOptions(const QString &model_id, const QString &training_id, const OAIObject &body);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  model_id QString [required]
    * @param[in]  training_id QString [required]
    * @param[in]  oai_patch_training_id OAIPatchTrainingId [required]
    */
    virtual void modelsModelIdTrainingsTrainingIdPatch(const QString &content_type, const QString &model_id, const QString &training_id, const OAIPatchTrainingId &oai_patch_training_id);

    /**
    * @param[in]  body OAIObject [required]
    */
    virtual void modelsOptions(const OAIObject &body);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  oai_post_models OAIPostModels [required]
    */
    virtual void modelsPost(const QString &content_type, const OAIPostModels &oai_post_models);

    /**
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results QString [optional]
    */
    virtual void organizationsGet(const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  body OAIObject [required]
    */
    virtual void organizationsOptions(const OAIObject &body);

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void organizationsOrganizationIdGet(const QString &organization_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  body OAIObject [required]
    */
    virtual void organizationsOrganizationIdOptions(const QString &organization_id, const OAIObject &body);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_patch_organization_id OAIPatchOrganizationId [required]
    */
    virtual void organizationsOrganizationIdPatch(const QString &content_type, const QString &organization_id, const OAIPatchOrganizationId &oai_patch_organization_id);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  oai_post_organizations OAIPostOrganizations [required]
    */
    virtual void organizationsPost(const QString &content_type, const OAIPostOrganizations &oai_post_organizations);

    /**
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results QString [optional]
    */
    virtual void paymentMethodsGet(const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  body OAIObject [required]
    */
    virtual void paymentMethodsOptions(const OAIObject &body);

    /**
    * @param[in]  payment_method_id QString [required]
    */
    virtual void paymentMethodsPaymentMethodIdDelete(const QString &payment_method_id);

    /**
    * @param[in]  payment_method_id QString [required]
    */
    virtual void paymentMethodsPaymentMethodIdGet(const QString &payment_method_id);

    /**
    * @param[in]  payment_method_id QString [required]
    * @param[in]  body OAIObject [required]
    */
    virtual void paymentMethodsPaymentMethodIdOptions(const QString &payment_method_id, const OAIObject &body);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  payment_method_id QString [required]
    * @param[in]  oai_patch_payment_method_id OAIPatchPaymentMethodId [required]
    */
    virtual void paymentMethodsPaymentMethodIdPatch(const QString &content_type, const QString &payment_method_id, const OAIPatchPaymentMethodId &oai_patch_payment_method_id);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  oai_post_payment_methods OAIPostPaymentMethods [required]
    */
    virtual void paymentMethodsPost(const QString &content_type, const OAIPostPaymentMethods &oai_post_payment_methods);

    /**
    * @param[in]  owner QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results QString [optional]
    */
    virtual void plansGet(const ::OpenAPI::OptionalParam<QString> &owner = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  body OAIObject [required]
    */
    virtual void plansOptions(const OAIObject &body);

    /**
    * @param[in]  plan_id QString [required]
    */
    virtual void plansPlanIdGet(const QString &plan_id);

    /**
    * @param[in]  plan_id QString [required]
    * @param[in]  body OAIObject [required]
    */
    virtual void plansPlanIdOptions(const QString &plan_id, const OAIObject &body);

    /**
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  sort_by QString [optional]
    * @param[in]  order QString [optional]
    */
    virtual void predictionsGet(const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  body OAIObject [required]
    */
    virtual void predictionsOptions(const OAIObject &body);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  oai_post_predictions OAIPostPredictions [required]
    */
    virtual void predictionsPost(const QString &content_type, const OAIPostPredictions &oai_post_predictions);

    /**
    * @param[in]  profile_id QString [required]
    */
    virtual void profilesProfileIdGet(const QString &profile_id);

    /**
    * @param[in]  profile_id QString [required]
    * @param[in]  body OAIObject [required]
    */
    virtual void profilesProfileIdOptions(const QString &profile_id, const OAIObject &body);

    /**
    * @param[in]  profile_id QString [required]
    */
    virtual void profilesProfileIdPatch(const QString &profile_id);

    /**
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results QString [optional]
    */
    virtual void secretsGet(const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  body OAIObject [required]
    */
    virtual void secretsOptions(const OAIObject &body);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  oai_post_secrets OAIPostSecrets [required]
    */
    virtual void secretsPost(const QString &content_type, const OAIPostSecrets &oai_post_secrets);

    /**
    * @param[in]  secret_id QString [required]
    */
    virtual void secretsSecretIdDelete(const QString &secret_id);

    /**
    * @param[in]  secret_id QString [required]
    * @param[in]  body OAIObject [required]
    */
    virtual void secretsSecretIdOptions(const QString &secret_id, const OAIObject &body);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  secret_id QString [required]
    * @param[in]  oai_patch_secret_id OAIPatchSecretId [required]
    */
    virtual void secretsSecretIdPatch(const QString &content_type, const QString &secret_id, const OAIPatchSecretId &oai_patch_secret_id);

    /**
    * @param[in]  transition_type QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results QString [optional]
    */
    virtual void transitionsGet(const ::OpenAPI::OptionalParam<QString> &transition_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  body OAIObject [required]
    */
    virtual void transitionsOptions(const OAIObject &body);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  oai_post_transitions OAIPostTransitions [required]
    */
    virtual void transitionsPost(const QString &content_type, const OAIPostTransitions &oai_post_transitions);

    /**
    * @param[in]  transition_id QString [required]
    */
    virtual void transitionsTransitionIdDelete(const QString &transition_id);

    /**
    * @param[in]  transition_id QString [required]
    * @param[in]  execution_id QString [required]
    */
    virtual void transitionsTransitionIdExecutionsExecutionIdGet(const QString &transition_id, const QString &execution_id);

    /**
    * @param[in]  transition_id QString [required]
    * @param[in]  execution_id QString [required]
    * @param[in]  body OAIObject [required]
    */
    virtual void transitionsTransitionIdExecutionsExecutionIdHeartbeatsOptions(const QString &transition_id, const QString &execution_id, const OAIObject &body);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  transition_id QString [required]
    * @param[in]  execution_id QString [required]
    * @param[in]  body OAIObject [required]
    */
    virtual void transitionsTransitionIdExecutionsExecutionIdHeartbeatsPost(const QString &content_type, const QString &transition_id, const QString &execution_id, const OAIObject &body);

    /**
    * @param[in]  transition_id QString [required]
    * @param[in]  execution_id QString [required]
    * @param[in]  body OAIObject [required]
    */
    virtual void transitionsTransitionIdExecutionsExecutionIdOptions(const QString &transition_id, const QString &execution_id, const OAIObject &body);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  transition_id QString [required]
    * @param[in]  execution_id QString [required]
    * @param[in]  oai_patch_transistion_execution_id OAIPatchTransistionExecutionId [required]
    */
    virtual void transitionsTransitionIdExecutionsExecutionIdPatch(const QString &content_type, const QString &transition_id, const QString &execution_id, const OAIPatchTransistionExecutionId &oai_patch_transistion_execution_id);

    /**
    * @param[in]  transition_id QString [required]
    * @param[in]  next_token QString [optional]
    * @param[in]  order QString [optional]
    * @param[in]  execution_id QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  sort_by QString [optional]
    */
    virtual void transitionsTransitionIdExecutionsGet(const QString &transition_id, const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &execution_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_by = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  transition_id QString [required]
    * @param[in]  body OAIObject [required]
    */
    virtual void transitionsTransitionIdExecutionsOptions(const QString &transition_id, const OAIObject &body);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  transition_id QString [required]
    * @param[in]  body OAIObject [required]
    */
    virtual void transitionsTransitionIdExecutionsPost(const QString &content_type, const QString &transition_id, const OAIObject &body);

    /**
    * @param[in]  transition_id QString [required]
    */
    virtual void transitionsTransitionIdGet(const QString &transition_id);

    /**
    * @param[in]  transition_id QString [required]
    * @param[in]  body OAIObject [required]
    */
    virtual void transitionsTransitionIdOptions(const QString &transition_id, const OAIObject &body);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  transition_id QString [required]
    * @param[in]  oai_patch_transition_id OAIPatchTransitionId [required]
    */
    virtual void transitionsTransitionIdPatch(const QString &content_type, const QString &transition_id, const OAIPatchTransitionId &oai_patch_transition_id);

    /**
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results QString [optional]
    */
    virtual void usersGet(const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  body OAIObject [required]
    */
    virtual void usersOptions(const OAIObject &body);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  oai_post_users OAIPostUsers [required]
    */
    virtual void usersPost(const QString &content_type, const OAIPostUsers &oai_post_users);

    /**
    * @param[in]  user_id QString [required]
    */
    virtual void usersUserIdDelete(const QString &user_id);

    /**
    * @param[in]  user_id QString [required]
    */
    virtual void usersUserIdGet(const QString &user_id);

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  body OAIObject [required]
    */
    virtual void usersUserIdOptions(const QString &user_id, const OAIObject &body);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  user_id QString [required]
    * @param[in]  oai_patch_user_id OAIPatchUserId [required]
    */
    virtual void usersUserIdPatch(const QString &content_type, const QString &user_id, const OAIPatchUserId &oai_patch_user_id);

    /**
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results QString [optional]
    */
    virtual void workflowsGet(const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  body OAIObject [required]
    */
    virtual void workflowsOptions(const OAIObject &body);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  oai_post_workflows OAIPostWorkflows [required]
    */
    virtual void workflowsPost(const QString &content_type, const OAIPostWorkflows &oai_post_workflows);

    /**
    * @param[in]  workflow_id QString [required]
    */
    virtual void workflowsWorkflowIdDelete(const QString &workflow_id);

    /**
    * @param[in]  execution_id QString [required]
    * @param[in]  workflow_id QString [required]
    */
    virtual void workflowsWorkflowIdExecutionsExecutionIdDelete(const QString &execution_id, const QString &workflow_id);

    /**
    * @param[in]  execution_id QString [required]
    * @param[in]  workflow_id QString [required]
    */
    virtual void workflowsWorkflowIdExecutionsExecutionIdGet(const QString &execution_id, const QString &workflow_id);

    /**
    * @param[in]  execution_id QString [required]
    * @param[in]  workflow_id QString [required]
    * @param[in]  body OAIObject [required]
    */
    virtual void workflowsWorkflowIdExecutionsExecutionIdOptions(const QString &execution_id, const QString &workflow_id, const OAIObject &body);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  execution_id QString [required]
    * @param[in]  workflow_id QString [required]
    * @param[in]  oai_patch_workflow_execution_id OAIPatchWorkflowExecutionId [required]
    */
    virtual void workflowsWorkflowIdExecutionsExecutionIdPatch(const QString &content_type, const QString &execution_id, const QString &workflow_id, const OAIPatchWorkflowExecutionId &oai_patch_workflow_execution_id);

    /**
    * @param[in]  workflow_id QString [required]
    * @param[in]  from_start_time QString [optional]
    * @param[in]  to_start_time QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  order QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  sort_by QString [optional]
    */
    virtual void workflowsWorkflowIdExecutionsGet(const QString &workflow_id, const ::OpenAPI::OptionalParam<QString> &from_start_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &to_start_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_by = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  workflow_id QString [required]
    * @param[in]  body OAIObject [required]
    */
    virtual void workflowsWorkflowIdExecutionsOptions(const QString &workflow_id, const OAIObject &body);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  workflow_id QString [required]
    * @param[in]  oai_post_workflow_executions OAIPostWorkflowExecutions [required]
    */
    virtual void workflowsWorkflowIdExecutionsPost(const QString &content_type, const QString &workflow_id, const OAIPostWorkflowExecutions &oai_post_workflow_executions);

    /**
    * @param[in]  workflow_id QString [required]
    */
    virtual void workflowsWorkflowIdGet(const QString &workflow_id);

    /**
    * @param[in]  workflow_id QString [required]
    * @param[in]  body OAIObject [required]
    */
    virtual void workflowsWorkflowIdOptions(const QString &workflow_id, const OAIObject &body);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  workflow_id QString [required]
    * @param[in]  oai_patch_workflow_id OAIPatchWorkflowId [required]
    */
    virtual void workflowsWorkflowIdPatch(const QString &content_type, const QString &workflow_id, const OAIPatchWorkflowId &oai_patch_workflow_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void appClientsAppClientIdDeleteCallback(OAIHttpRequestWorker *worker);
    void appClientsAppClientIdOptionsCallback(OAIHttpRequestWorker *worker);
    void appClientsAppClientIdPatchCallback(OAIHttpRequestWorker *worker);
    void appClientsGetCallback(OAIHttpRequestWorker *worker);
    void appClientsOptionsCallback(OAIHttpRequestWorker *worker);
    void appClientsPostCallback(OAIHttpRequestWorker *worker);
    void assetsAssetIdDeleteCallback(OAIHttpRequestWorker *worker);
    void assetsAssetIdGetCallback(OAIHttpRequestWorker *worker);
    void assetsAssetIdOptionsCallback(OAIHttpRequestWorker *worker);
    void assetsAssetIdPatchCallback(OAIHttpRequestWorker *worker);
    void assetsGetCallback(OAIHttpRequestWorker *worker);
    void assetsOptionsCallback(OAIHttpRequestWorker *worker);
    void assetsPostCallback(OAIHttpRequestWorker *worker);
    void datasetsDatasetIdDeleteCallback(OAIHttpRequestWorker *worker);
    void datasetsDatasetIdGetCallback(OAIHttpRequestWorker *worker);
    void datasetsDatasetIdOptionsCallback(OAIHttpRequestWorker *worker);
    void datasetsDatasetIdPatchCallback(OAIHttpRequestWorker *worker);
    void datasetsGetCallback(OAIHttpRequestWorker *worker);
    void datasetsOptionsCallback(OAIHttpRequestWorker *worker);
    void datasetsPostCallback(OAIHttpRequestWorker *worker);
    void deploymentEnvironmentsDeploymentEnvironmentIdGetCallback(OAIHttpRequestWorker *worker);
    void deploymentEnvironmentsDeploymentEnvironmentIdOptionsCallback(OAIHttpRequestWorker *worker);
    void deploymentEnvironmentsGetCallback(OAIHttpRequestWorker *worker);
    void deploymentEnvironmentsOptionsCallback(OAIHttpRequestWorker *worker);
    void documentsDeleteCallback(OAIHttpRequestWorker *worker);
    void documentsDocumentIdDeleteCallback(OAIHttpRequestWorker *worker);
    void documentsDocumentIdGetCallback(OAIHttpRequestWorker *worker);
    void documentsDocumentIdOptionsCallback(OAIHttpRequestWorker *worker);
    void documentsDocumentIdPatchCallback(OAIHttpRequestWorker *worker);
    void documentsGetCallback(OAIHttpRequestWorker *worker);
    void documentsOptionsCallback(OAIHttpRequestWorker *worker);
    void documentsPostCallback(OAIHttpRequestWorker *worker);
    void logsGetCallback(OAIHttpRequestWorker *worker);
    void logsLogIdGetCallback(OAIHttpRequestWorker *worker);
    void logsLogIdOptionsCallback(OAIHttpRequestWorker *worker);
    void logsOptionsCallback(OAIHttpRequestWorker *worker);
    void modelsGetCallback(OAIHttpRequestWorker *worker);
    void modelsModelIdDataBundlesDataBundleIdDeleteCallback(OAIHttpRequestWorker *worker);
    void modelsModelIdDataBundlesDataBundleIdOptionsCallback(OAIHttpRequestWorker *worker);
    void modelsModelIdDataBundlesDataBundleIdPatchCallback(OAIHttpRequestWorker *worker);
    void modelsModelIdDataBundlesGetCallback(OAIHttpRequestWorker *worker);
    void modelsModelIdDataBundlesOptionsCallback(OAIHttpRequestWorker *worker);
    void modelsModelIdDataBundlesPostCallback(OAIHttpRequestWorker *worker);
    void modelsModelIdDeleteCallback(OAIHttpRequestWorker *worker);
    void modelsModelIdGetCallback(OAIHttpRequestWorker *worker);
    void modelsModelIdOptionsCallback(OAIHttpRequestWorker *worker);
    void modelsModelIdPatchCallback(OAIHttpRequestWorker *worker);
    void modelsModelIdTrainingsGetCallback(OAIHttpRequestWorker *worker);
    void modelsModelIdTrainingsOptionsCallback(OAIHttpRequestWorker *worker);
    void modelsModelIdTrainingsPostCallback(OAIHttpRequestWorker *worker);
    void modelsModelIdTrainingsTrainingIdOptionsCallback(OAIHttpRequestWorker *worker);
    void modelsModelIdTrainingsTrainingIdPatchCallback(OAIHttpRequestWorker *worker);
    void modelsOptionsCallback(OAIHttpRequestWorker *worker);
    void modelsPostCallback(OAIHttpRequestWorker *worker);
    void organizationsGetCallback(OAIHttpRequestWorker *worker);
    void organizationsOptionsCallback(OAIHttpRequestWorker *worker);
    void organizationsOrganizationIdGetCallback(OAIHttpRequestWorker *worker);
    void organizationsOrganizationIdOptionsCallback(OAIHttpRequestWorker *worker);
    void organizationsOrganizationIdPatchCallback(OAIHttpRequestWorker *worker);
    void organizationsPostCallback(OAIHttpRequestWorker *worker);
    void paymentMethodsGetCallback(OAIHttpRequestWorker *worker);
    void paymentMethodsOptionsCallback(OAIHttpRequestWorker *worker);
    void paymentMethodsPaymentMethodIdDeleteCallback(OAIHttpRequestWorker *worker);
    void paymentMethodsPaymentMethodIdGetCallback(OAIHttpRequestWorker *worker);
    void paymentMethodsPaymentMethodIdOptionsCallback(OAIHttpRequestWorker *worker);
    void paymentMethodsPaymentMethodIdPatchCallback(OAIHttpRequestWorker *worker);
    void paymentMethodsPostCallback(OAIHttpRequestWorker *worker);
    void plansGetCallback(OAIHttpRequestWorker *worker);
    void plansOptionsCallback(OAIHttpRequestWorker *worker);
    void plansPlanIdGetCallback(OAIHttpRequestWorker *worker);
    void plansPlanIdOptionsCallback(OAIHttpRequestWorker *worker);
    void predictionsGetCallback(OAIHttpRequestWorker *worker);
    void predictionsOptionsCallback(OAIHttpRequestWorker *worker);
    void predictionsPostCallback(OAIHttpRequestWorker *worker);
    void profilesProfileIdGetCallback(OAIHttpRequestWorker *worker);
    void profilesProfileIdOptionsCallback(OAIHttpRequestWorker *worker);
    void profilesProfileIdPatchCallback(OAIHttpRequestWorker *worker);
    void secretsGetCallback(OAIHttpRequestWorker *worker);
    void secretsOptionsCallback(OAIHttpRequestWorker *worker);
    void secretsPostCallback(OAIHttpRequestWorker *worker);
    void secretsSecretIdDeleteCallback(OAIHttpRequestWorker *worker);
    void secretsSecretIdOptionsCallback(OAIHttpRequestWorker *worker);
    void secretsSecretIdPatchCallback(OAIHttpRequestWorker *worker);
    void transitionsGetCallback(OAIHttpRequestWorker *worker);
    void transitionsOptionsCallback(OAIHttpRequestWorker *worker);
    void transitionsPostCallback(OAIHttpRequestWorker *worker);
    void transitionsTransitionIdDeleteCallback(OAIHttpRequestWorker *worker);
    void transitionsTransitionIdExecutionsExecutionIdGetCallback(OAIHttpRequestWorker *worker);
    void transitionsTransitionIdExecutionsExecutionIdHeartbeatsOptionsCallback(OAIHttpRequestWorker *worker);
    void transitionsTransitionIdExecutionsExecutionIdHeartbeatsPostCallback(OAIHttpRequestWorker *worker);
    void transitionsTransitionIdExecutionsExecutionIdOptionsCallback(OAIHttpRequestWorker *worker);
    void transitionsTransitionIdExecutionsExecutionIdPatchCallback(OAIHttpRequestWorker *worker);
    void transitionsTransitionIdExecutionsGetCallback(OAIHttpRequestWorker *worker);
    void transitionsTransitionIdExecutionsOptionsCallback(OAIHttpRequestWorker *worker);
    void transitionsTransitionIdExecutionsPostCallback(OAIHttpRequestWorker *worker);
    void transitionsTransitionIdGetCallback(OAIHttpRequestWorker *worker);
    void transitionsTransitionIdOptionsCallback(OAIHttpRequestWorker *worker);
    void transitionsTransitionIdPatchCallback(OAIHttpRequestWorker *worker);
    void usersGetCallback(OAIHttpRequestWorker *worker);
    void usersOptionsCallback(OAIHttpRequestWorker *worker);
    void usersPostCallback(OAIHttpRequestWorker *worker);
    void usersUserIdDeleteCallback(OAIHttpRequestWorker *worker);
    void usersUserIdGetCallback(OAIHttpRequestWorker *worker);
    void usersUserIdOptionsCallback(OAIHttpRequestWorker *worker);
    void usersUserIdPatchCallback(OAIHttpRequestWorker *worker);
    void workflowsGetCallback(OAIHttpRequestWorker *worker);
    void workflowsOptionsCallback(OAIHttpRequestWorker *worker);
    void workflowsPostCallback(OAIHttpRequestWorker *worker);
    void workflowsWorkflowIdDeleteCallback(OAIHttpRequestWorker *worker);
    void workflowsWorkflowIdExecutionsExecutionIdDeleteCallback(OAIHttpRequestWorker *worker);
    void workflowsWorkflowIdExecutionsExecutionIdGetCallback(OAIHttpRequestWorker *worker);
    void workflowsWorkflowIdExecutionsExecutionIdOptionsCallback(OAIHttpRequestWorker *worker);
    void workflowsWorkflowIdExecutionsExecutionIdPatchCallback(OAIHttpRequestWorker *worker);
    void workflowsWorkflowIdExecutionsGetCallback(OAIHttpRequestWorker *worker);
    void workflowsWorkflowIdExecutionsOptionsCallback(OAIHttpRequestWorker *worker);
    void workflowsWorkflowIdExecutionsPostCallback(OAIHttpRequestWorker *worker);
    void workflowsWorkflowIdGetCallback(OAIHttpRequestWorker *worker);
    void workflowsWorkflowIdOptionsCallback(OAIHttpRequestWorker *worker);
    void workflowsWorkflowIdPatchCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void appClientsAppClientIdDeleteSignal(OAIAppClient summary);
    void appClientsAppClientIdOptionsSignal(OAIObject summary);
    void appClientsAppClientIdPatchSignal(OAIAppClient summary);
    void appClientsGetSignal(OAIAppClients summary);
    void appClientsOptionsSignal(OAIObject summary);
    void appClientsPostSignal(OAIAppClient summary);
    void assetsAssetIdDeleteSignal(OAIAsset summary);
    void assetsAssetIdGetSignal(OAIAsset summary);
    void assetsAssetIdOptionsSignal(OAIObject summary);
    void assetsAssetIdPatchSignal(OAIAsset summary);
    void assetsGetSignal(OAIAssets summary);
    void assetsOptionsSignal(OAIObject summary);
    void assetsPostSignal(OAIAsset summary);
    void datasetsDatasetIdDeleteSignal(OAIDataset summary);
    void datasetsDatasetIdGetSignal(OAIDataset summary);
    void datasetsDatasetIdOptionsSignal(OAIObject summary);
    void datasetsDatasetIdPatchSignal(OAIDataset summary);
    void datasetsGetSignal(OAIDatasets summary);
    void datasetsOptionsSignal(OAIObject summary);
    void datasetsPostSignal(OAIDataset summary);
    void deploymentEnvironmentsDeploymentEnvironmentIdGetSignal(OAIDeploymentEnvironment summary);
    void deploymentEnvironmentsDeploymentEnvironmentIdOptionsSignal(OAIObject summary);
    void deploymentEnvironmentsGetSignal(OAIDeploymentEnvironments summary);
    void deploymentEnvironmentsOptionsSignal(OAIObject summary);
    void documentsDeleteSignal(OAIDocuments summary);
    void documentsDocumentIdDeleteSignal(OAIDocument summary);
    void documentsDocumentIdGetSignal(OAIDocument summary);
    void documentsDocumentIdOptionsSignal(OAIObject summary);
    void documentsDocumentIdPatchSignal(OAIDocument summary);
    void documentsGetSignal(OAIDocuments summary);
    void documentsOptionsSignal(OAIObject summary);
    void documentsPostSignal(OAIDocument summary);
    void logsGetSignal(OAILogs summary);
    void logsLogIdGetSignal(OAILog summary);
    void logsLogIdOptionsSignal(OAIObject summary);
    void logsOptionsSignal(OAIObject summary);
    void modelsGetSignal(OAIModels summary);
    void modelsModelIdDataBundlesDataBundleIdDeleteSignal(OAIDataBundle summary);
    void modelsModelIdDataBundlesDataBundleIdOptionsSignal(OAIObject summary);
    void modelsModelIdDataBundlesDataBundleIdPatchSignal(OAIDataBundle summary);
    void modelsModelIdDataBundlesGetSignal(OAIDataBundles summary);
    void modelsModelIdDataBundlesOptionsSignal(OAIObject summary);
    void modelsModelIdDataBundlesPostSignal(OAIDataBundle summary);
    void modelsModelIdDeleteSignal(OAIModel summary);
    void modelsModelIdGetSignal(OAIModel summary);
    void modelsModelIdOptionsSignal(OAIObject summary);
    void modelsModelIdPatchSignal(OAIModel summary);
    void modelsModelIdTrainingsGetSignal(OAITrainings summary);
    void modelsModelIdTrainingsOptionsSignal(OAIObject summary);
    void modelsModelIdTrainingsPostSignal(OAITraining summary);
    void modelsModelIdTrainingsTrainingIdOptionsSignal(OAIObject summary);
    void modelsModelIdTrainingsTrainingIdPatchSignal(OAITraining summary);
    void modelsOptionsSignal(OAIObject summary);
    void modelsPostSignal(OAIModel summary);
    void organizationsGetSignal(OAIOrganizations summary);
    void organizationsOptionsSignal(OAIObject summary);
    void organizationsOrganizationIdGetSignal(OAIOrganization summary);
    void organizationsOrganizationIdOptionsSignal(OAIObject summary);
    void organizationsOrganizationIdPatchSignal(OAIOrganization summary);
    void organizationsPostSignal(OAIOrganization summary);
    void paymentMethodsGetSignal(OAIPaymentMethods summary);
    void paymentMethodsOptionsSignal(OAIObject summary);
    void paymentMethodsPaymentMethodIdDeleteSignal(OAIPaymentMethod summary);
    void paymentMethodsPaymentMethodIdGetSignal(OAIPaymentMethod summary);
    void paymentMethodsPaymentMethodIdOptionsSignal(OAIObject summary);
    void paymentMethodsPaymentMethodIdPatchSignal(OAIPaymentMethod summary);
    void paymentMethodsPostSignal(OAIPaymentMethod summary);
    void plansGetSignal(OAIPlans summary);
    void plansOptionsSignal(OAIObject summary);
    void plansPlanIdGetSignal(OAIPlan summary);
    void plansPlanIdOptionsSignal(OAIObject summary);
    void predictionsGetSignal(OAIPredictions summary);
    void predictionsOptionsSignal(OAIObject summary);
    void predictionsPostSignal(OAIPrediction summary);
    void profilesProfileIdGetSignal(OAIProfile summary);
    void profilesProfileIdOptionsSignal(OAIObject summary);
    void profilesProfileIdPatchSignal(OAIProfile summary);
    void secretsGetSignal(OAISecrets summary);
    void secretsOptionsSignal(OAIObject summary);
    void secretsPostSignal(OAISecret summary);
    void secretsSecretIdDeleteSignal(OAISecret summary);
    void secretsSecretIdOptionsSignal(OAIObject summary);
    void secretsSecretIdPatchSignal(OAISecret summary);
    void transitionsGetSignal(OAITransitions summary);
    void transitionsOptionsSignal(OAIObject summary);
    void transitionsPostSignal(OAITransition summary);
    void transitionsTransitionIdDeleteSignal(OAITransition summary);
    void transitionsTransitionIdExecutionsExecutionIdGetSignal(OAITransitionExecution summary);
    void transitionsTransitionIdExecutionsExecutionIdHeartbeatsOptionsSignal(OAIObject summary);
    void transitionsTransitionIdExecutionsExecutionIdHeartbeatsPostSignal(OAIObject summary);
    void transitionsTransitionIdExecutionsExecutionIdOptionsSignal(OAIObject summary);
    void transitionsTransitionIdExecutionsExecutionIdPatchSignal(OAITransitionExecution summary);
    void transitionsTransitionIdExecutionsGetSignal(OAITransitionExecutions summary);
    void transitionsTransitionIdExecutionsOptionsSignal(OAIObject summary);
    void transitionsTransitionIdExecutionsPostSignal(OAITransitionExecution summary);
    void transitionsTransitionIdGetSignal(OAITransition summary);
    void transitionsTransitionIdOptionsSignal(OAIObject summary);
    void transitionsTransitionIdPatchSignal(OAITransition summary);
    void usersGetSignal(OAIUsers summary);
    void usersOptionsSignal(OAIObject summary);
    void usersPostSignal(OAIUser summary);
    void usersUserIdDeleteSignal(OAIUser summary);
    void usersUserIdGetSignal(OAIUser summary);
    void usersUserIdOptionsSignal(OAIObject summary);
    void usersUserIdPatchSignal(OAIUser summary);
    void workflowsGetSignal(OAIWorkflows summary);
    void workflowsOptionsSignal(OAIObject summary);
    void workflowsPostSignal(OAIWorkflow summary);
    void workflowsWorkflowIdDeleteSignal(OAIWorkflow summary);
    void workflowsWorkflowIdExecutionsExecutionIdDeleteSignal(OAIWorkflowExecution summary);
    void workflowsWorkflowIdExecutionsExecutionIdGetSignal(OAIWorkflowExecution summary);
    void workflowsWorkflowIdExecutionsExecutionIdOptionsSignal(OAIObject summary);
    void workflowsWorkflowIdExecutionsExecutionIdPatchSignal(OAIWorkflowExecution summary);
    void workflowsWorkflowIdExecutionsGetSignal(OAIWorkflowExecutions summary);
    void workflowsWorkflowIdExecutionsOptionsSignal(OAIObject summary);
    void workflowsWorkflowIdExecutionsPostSignal(OAIWorkflowExecution summary);
    void workflowsWorkflowIdGetSignal(OAIWorkflow summary);
    void workflowsWorkflowIdOptionsSignal(OAIObject summary);
    void workflowsWorkflowIdPatchSignal(OAIWorkflow summary);


    void appClientsAppClientIdDeleteSignalFull(OAIHttpRequestWorker *worker, OAIAppClient summary);
    void appClientsAppClientIdOptionsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void appClientsAppClientIdPatchSignalFull(OAIHttpRequestWorker *worker, OAIAppClient summary);
    void appClientsGetSignalFull(OAIHttpRequestWorker *worker, OAIAppClients summary);
    void appClientsOptionsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void appClientsPostSignalFull(OAIHttpRequestWorker *worker, OAIAppClient summary);
    void assetsAssetIdDeleteSignalFull(OAIHttpRequestWorker *worker, OAIAsset summary);
    void assetsAssetIdGetSignalFull(OAIHttpRequestWorker *worker, OAIAsset summary);
    void assetsAssetIdOptionsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void assetsAssetIdPatchSignalFull(OAIHttpRequestWorker *worker, OAIAsset summary);
    void assetsGetSignalFull(OAIHttpRequestWorker *worker, OAIAssets summary);
    void assetsOptionsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void assetsPostSignalFull(OAIHttpRequestWorker *worker, OAIAsset summary);
    void datasetsDatasetIdDeleteSignalFull(OAIHttpRequestWorker *worker, OAIDataset summary);
    void datasetsDatasetIdGetSignalFull(OAIHttpRequestWorker *worker, OAIDataset summary);
    void datasetsDatasetIdOptionsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void datasetsDatasetIdPatchSignalFull(OAIHttpRequestWorker *worker, OAIDataset summary);
    void datasetsGetSignalFull(OAIHttpRequestWorker *worker, OAIDatasets summary);
    void datasetsOptionsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void datasetsPostSignalFull(OAIHttpRequestWorker *worker, OAIDataset summary);
    void deploymentEnvironmentsDeploymentEnvironmentIdGetSignalFull(OAIHttpRequestWorker *worker, OAIDeploymentEnvironment summary);
    void deploymentEnvironmentsDeploymentEnvironmentIdOptionsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void deploymentEnvironmentsGetSignalFull(OAIHttpRequestWorker *worker, OAIDeploymentEnvironments summary);
    void deploymentEnvironmentsOptionsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void documentsDeleteSignalFull(OAIHttpRequestWorker *worker, OAIDocuments summary);
    void documentsDocumentIdDeleteSignalFull(OAIHttpRequestWorker *worker, OAIDocument summary);
    void documentsDocumentIdGetSignalFull(OAIHttpRequestWorker *worker, OAIDocument summary);
    void documentsDocumentIdOptionsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void documentsDocumentIdPatchSignalFull(OAIHttpRequestWorker *worker, OAIDocument summary);
    void documentsGetSignalFull(OAIHttpRequestWorker *worker, OAIDocuments summary);
    void documentsOptionsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void documentsPostSignalFull(OAIHttpRequestWorker *worker, OAIDocument summary);
    void logsGetSignalFull(OAIHttpRequestWorker *worker, OAILogs summary);
    void logsLogIdGetSignalFull(OAIHttpRequestWorker *worker, OAILog summary);
    void logsLogIdOptionsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void logsOptionsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void modelsGetSignalFull(OAIHttpRequestWorker *worker, OAIModels summary);
    void modelsModelIdDataBundlesDataBundleIdDeleteSignalFull(OAIHttpRequestWorker *worker, OAIDataBundle summary);
    void modelsModelIdDataBundlesDataBundleIdOptionsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void modelsModelIdDataBundlesDataBundleIdPatchSignalFull(OAIHttpRequestWorker *worker, OAIDataBundle summary);
    void modelsModelIdDataBundlesGetSignalFull(OAIHttpRequestWorker *worker, OAIDataBundles summary);
    void modelsModelIdDataBundlesOptionsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void modelsModelIdDataBundlesPostSignalFull(OAIHttpRequestWorker *worker, OAIDataBundle summary);
    void modelsModelIdDeleteSignalFull(OAIHttpRequestWorker *worker, OAIModel summary);
    void modelsModelIdGetSignalFull(OAIHttpRequestWorker *worker, OAIModel summary);
    void modelsModelIdOptionsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void modelsModelIdPatchSignalFull(OAIHttpRequestWorker *worker, OAIModel summary);
    void modelsModelIdTrainingsGetSignalFull(OAIHttpRequestWorker *worker, OAITrainings summary);
    void modelsModelIdTrainingsOptionsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void modelsModelIdTrainingsPostSignalFull(OAIHttpRequestWorker *worker, OAITraining summary);
    void modelsModelIdTrainingsTrainingIdOptionsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void modelsModelIdTrainingsTrainingIdPatchSignalFull(OAIHttpRequestWorker *worker, OAITraining summary);
    void modelsOptionsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void modelsPostSignalFull(OAIHttpRequestWorker *worker, OAIModel summary);
    void organizationsGetSignalFull(OAIHttpRequestWorker *worker, OAIOrganizations summary);
    void organizationsOptionsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void organizationsOrganizationIdGetSignalFull(OAIHttpRequestWorker *worker, OAIOrganization summary);
    void organizationsOrganizationIdOptionsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void organizationsOrganizationIdPatchSignalFull(OAIHttpRequestWorker *worker, OAIOrganization summary);
    void organizationsPostSignalFull(OAIHttpRequestWorker *worker, OAIOrganization summary);
    void paymentMethodsGetSignalFull(OAIHttpRequestWorker *worker, OAIPaymentMethods summary);
    void paymentMethodsOptionsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void paymentMethodsPaymentMethodIdDeleteSignalFull(OAIHttpRequestWorker *worker, OAIPaymentMethod summary);
    void paymentMethodsPaymentMethodIdGetSignalFull(OAIHttpRequestWorker *worker, OAIPaymentMethod summary);
    void paymentMethodsPaymentMethodIdOptionsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void paymentMethodsPaymentMethodIdPatchSignalFull(OAIHttpRequestWorker *worker, OAIPaymentMethod summary);
    void paymentMethodsPostSignalFull(OAIHttpRequestWorker *worker, OAIPaymentMethod summary);
    void plansGetSignalFull(OAIHttpRequestWorker *worker, OAIPlans summary);
    void plansOptionsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void plansPlanIdGetSignalFull(OAIHttpRequestWorker *worker, OAIPlan summary);
    void plansPlanIdOptionsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void predictionsGetSignalFull(OAIHttpRequestWorker *worker, OAIPredictions summary);
    void predictionsOptionsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void predictionsPostSignalFull(OAIHttpRequestWorker *worker, OAIPrediction summary);
    void profilesProfileIdGetSignalFull(OAIHttpRequestWorker *worker, OAIProfile summary);
    void profilesProfileIdOptionsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void profilesProfileIdPatchSignalFull(OAIHttpRequestWorker *worker, OAIProfile summary);
    void secretsGetSignalFull(OAIHttpRequestWorker *worker, OAISecrets summary);
    void secretsOptionsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void secretsPostSignalFull(OAIHttpRequestWorker *worker, OAISecret summary);
    void secretsSecretIdDeleteSignalFull(OAIHttpRequestWorker *worker, OAISecret summary);
    void secretsSecretIdOptionsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void secretsSecretIdPatchSignalFull(OAIHttpRequestWorker *worker, OAISecret summary);
    void transitionsGetSignalFull(OAIHttpRequestWorker *worker, OAITransitions summary);
    void transitionsOptionsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void transitionsPostSignalFull(OAIHttpRequestWorker *worker, OAITransition summary);
    void transitionsTransitionIdDeleteSignalFull(OAIHttpRequestWorker *worker, OAITransition summary);
    void transitionsTransitionIdExecutionsExecutionIdGetSignalFull(OAIHttpRequestWorker *worker, OAITransitionExecution summary);
    void transitionsTransitionIdExecutionsExecutionIdHeartbeatsOptionsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void transitionsTransitionIdExecutionsExecutionIdHeartbeatsPostSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void transitionsTransitionIdExecutionsExecutionIdOptionsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void transitionsTransitionIdExecutionsExecutionIdPatchSignalFull(OAIHttpRequestWorker *worker, OAITransitionExecution summary);
    void transitionsTransitionIdExecutionsGetSignalFull(OAIHttpRequestWorker *worker, OAITransitionExecutions summary);
    void transitionsTransitionIdExecutionsOptionsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void transitionsTransitionIdExecutionsPostSignalFull(OAIHttpRequestWorker *worker, OAITransitionExecution summary);
    void transitionsTransitionIdGetSignalFull(OAIHttpRequestWorker *worker, OAITransition summary);
    void transitionsTransitionIdOptionsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void transitionsTransitionIdPatchSignalFull(OAIHttpRequestWorker *worker, OAITransition summary);
    void usersGetSignalFull(OAIHttpRequestWorker *worker, OAIUsers summary);
    void usersOptionsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void usersPostSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void usersUserIdDeleteSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void usersUserIdGetSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void usersUserIdOptionsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void usersUserIdPatchSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void workflowsGetSignalFull(OAIHttpRequestWorker *worker, OAIWorkflows summary);
    void workflowsOptionsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void workflowsPostSignalFull(OAIHttpRequestWorker *worker, OAIWorkflow summary);
    void workflowsWorkflowIdDeleteSignalFull(OAIHttpRequestWorker *worker, OAIWorkflow summary);
    void workflowsWorkflowIdExecutionsExecutionIdDeleteSignalFull(OAIHttpRequestWorker *worker, OAIWorkflowExecution summary);
    void workflowsWorkflowIdExecutionsExecutionIdGetSignalFull(OAIHttpRequestWorker *worker, OAIWorkflowExecution summary);
    void workflowsWorkflowIdExecutionsExecutionIdOptionsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void workflowsWorkflowIdExecutionsExecutionIdPatchSignalFull(OAIHttpRequestWorker *worker, OAIWorkflowExecution summary);
    void workflowsWorkflowIdExecutionsGetSignalFull(OAIHttpRequestWorker *worker, OAIWorkflowExecutions summary);
    void workflowsWorkflowIdExecutionsOptionsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void workflowsWorkflowIdExecutionsPostSignalFull(OAIHttpRequestWorker *worker, OAIWorkflowExecution summary);
    void workflowsWorkflowIdGetSignalFull(OAIHttpRequestWorker *worker, OAIWorkflow summary);
    void workflowsWorkflowIdOptionsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void workflowsWorkflowIdPatchSignalFull(OAIHttpRequestWorker *worker, OAIWorkflow summary);

    Q_DECL_DEPRECATED_X("Use appClientsAppClientIdDeleteSignalError() instead")
    void appClientsAppClientIdDeleteSignalE(OAIAppClient summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appClientsAppClientIdDeleteSignalError(OAIAppClient summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appClientsAppClientIdOptionsSignalError() instead")
    void appClientsAppClientIdOptionsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appClientsAppClientIdOptionsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appClientsAppClientIdPatchSignalError() instead")
    void appClientsAppClientIdPatchSignalE(OAIAppClient summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appClientsAppClientIdPatchSignalError(OAIAppClient summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appClientsGetSignalError() instead")
    void appClientsGetSignalE(OAIAppClients summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appClientsGetSignalError(OAIAppClients summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appClientsOptionsSignalError() instead")
    void appClientsOptionsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appClientsOptionsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appClientsPostSignalError() instead")
    void appClientsPostSignalE(OAIAppClient summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appClientsPostSignalError(OAIAppClient summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetsAssetIdDeleteSignalError() instead")
    void assetsAssetIdDeleteSignalE(OAIAsset summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assetsAssetIdDeleteSignalError(OAIAsset summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetsAssetIdGetSignalError() instead")
    void assetsAssetIdGetSignalE(OAIAsset summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assetsAssetIdGetSignalError(OAIAsset summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetsAssetIdOptionsSignalError() instead")
    void assetsAssetIdOptionsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assetsAssetIdOptionsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetsAssetIdPatchSignalError() instead")
    void assetsAssetIdPatchSignalE(OAIAsset summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assetsAssetIdPatchSignalError(OAIAsset summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetsGetSignalError() instead")
    void assetsGetSignalE(OAIAssets summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assetsGetSignalError(OAIAssets summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetsOptionsSignalError() instead")
    void assetsOptionsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assetsOptionsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetsPostSignalError() instead")
    void assetsPostSignalE(OAIAsset summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assetsPostSignalError(OAIAsset summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datasetsDatasetIdDeleteSignalError() instead")
    void datasetsDatasetIdDeleteSignalE(OAIDataset summary, QNetworkReply::NetworkError error_type, QString error_str);
    void datasetsDatasetIdDeleteSignalError(OAIDataset summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datasetsDatasetIdGetSignalError() instead")
    void datasetsDatasetIdGetSignalE(OAIDataset summary, QNetworkReply::NetworkError error_type, QString error_str);
    void datasetsDatasetIdGetSignalError(OAIDataset summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datasetsDatasetIdOptionsSignalError() instead")
    void datasetsDatasetIdOptionsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void datasetsDatasetIdOptionsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datasetsDatasetIdPatchSignalError() instead")
    void datasetsDatasetIdPatchSignalE(OAIDataset summary, QNetworkReply::NetworkError error_type, QString error_str);
    void datasetsDatasetIdPatchSignalError(OAIDataset summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datasetsGetSignalError() instead")
    void datasetsGetSignalE(OAIDatasets summary, QNetworkReply::NetworkError error_type, QString error_str);
    void datasetsGetSignalError(OAIDatasets summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datasetsOptionsSignalError() instead")
    void datasetsOptionsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void datasetsOptionsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datasetsPostSignalError() instead")
    void datasetsPostSignalE(OAIDataset summary, QNetworkReply::NetworkError error_type, QString error_str);
    void datasetsPostSignalError(OAIDataset summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deploymentEnvironmentsDeploymentEnvironmentIdGetSignalError() instead")
    void deploymentEnvironmentsDeploymentEnvironmentIdGetSignalE(OAIDeploymentEnvironment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deploymentEnvironmentsDeploymentEnvironmentIdGetSignalError(OAIDeploymentEnvironment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deploymentEnvironmentsDeploymentEnvironmentIdOptionsSignalError() instead")
    void deploymentEnvironmentsDeploymentEnvironmentIdOptionsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deploymentEnvironmentsDeploymentEnvironmentIdOptionsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deploymentEnvironmentsGetSignalError() instead")
    void deploymentEnvironmentsGetSignalE(OAIDeploymentEnvironments summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deploymentEnvironmentsGetSignalError(OAIDeploymentEnvironments summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deploymentEnvironmentsOptionsSignalError() instead")
    void deploymentEnvironmentsOptionsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deploymentEnvironmentsOptionsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use documentsDeleteSignalError() instead")
    void documentsDeleteSignalE(OAIDocuments summary, QNetworkReply::NetworkError error_type, QString error_str);
    void documentsDeleteSignalError(OAIDocuments summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use documentsDocumentIdDeleteSignalError() instead")
    void documentsDocumentIdDeleteSignalE(OAIDocument summary, QNetworkReply::NetworkError error_type, QString error_str);
    void documentsDocumentIdDeleteSignalError(OAIDocument summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use documentsDocumentIdGetSignalError() instead")
    void documentsDocumentIdGetSignalE(OAIDocument summary, QNetworkReply::NetworkError error_type, QString error_str);
    void documentsDocumentIdGetSignalError(OAIDocument summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use documentsDocumentIdOptionsSignalError() instead")
    void documentsDocumentIdOptionsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void documentsDocumentIdOptionsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use documentsDocumentIdPatchSignalError() instead")
    void documentsDocumentIdPatchSignalE(OAIDocument summary, QNetworkReply::NetworkError error_type, QString error_str);
    void documentsDocumentIdPatchSignalError(OAIDocument summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use documentsGetSignalError() instead")
    void documentsGetSignalE(OAIDocuments summary, QNetworkReply::NetworkError error_type, QString error_str);
    void documentsGetSignalError(OAIDocuments summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use documentsOptionsSignalError() instead")
    void documentsOptionsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void documentsOptionsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use documentsPostSignalError() instead")
    void documentsPostSignalE(OAIDocument summary, QNetworkReply::NetworkError error_type, QString error_str);
    void documentsPostSignalError(OAIDocument summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use logsGetSignalError() instead")
    void logsGetSignalE(OAILogs summary, QNetworkReply::NetworkError error_type, QString error_str);
    void logsGetSignalError(OAILogs summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use logsLogIdGetSignalError() instead")
    void logsLogIdGetSignalE(OAILog summary, QNetworkReply::NetworkError error_type, QString error_str);
    void logsLogIdGetSignalError(OAILog summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use logsLogIdOptionsSignalError() instead")
    void logsLogIdOptionsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void logsLogIdOptionsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use logsOptionsSignalError() instead")
    void logsOptionsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void logsOptionsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelsGetSignalError() instead")
    void modelsGetSignalE(OAIModels summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelsGetSignalError(OAIModels summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelsModelIdDataBundlesDataBundleIdDeleteSignalError() instead")
    void modelsModelIdDataBundlesDataBundleIdDeleteSignalE(OAIDataBundle summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelsModelIdDataBundlesDataBundleIdDeleteSignalError(OAIDataBundle summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelsModelIdDataBundlesDataBundleIdOptionsSignalError() instead")
    void modelsModelIdDataBundlesDataBundleIdOptionsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelsModelIdDataBundlesDataBundleIdOptionsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelsModelIdDataBundlesDataBundleIdPatchSignalError() instead")
    void modelsModelIdDataBundlesDataBundleIdPatchSignalE(OAIDataBundle summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelsModelIdDataBundlesDataBundleIdPatchSignalError(OAIDataBundle summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelsModelIdDataBundlesGetSignalError() instead")
    void modelsModelIdDataBundlesGetSignalE(OAIDataBundles summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelsModelIdDataBundlesGetSignalError(OAIDataBundles summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelsModelIdDataBundlesOptionsSignalError() instead")
    void modelsModelIdDataBundlesOptionsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelsModelIdDataBundlesOptionsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelsModelIdDataBundlesPostSignalError() instead")
    void modelsModelIdDataBundlesPostSignalE(OAIDataBundle summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelsModelIdDataBundlesPostSignalError(OAIDataBundle summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelsModelIdDeleteSignalError() instead")
    void modelsModelIdDeleteSignalE(OAIModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelsModelIdDeleteSignalError(OAIModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelsModelIdGetSignalError() instead")
    void modelsModelIdGetSignalE(OAIModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelsModelIdGetSignalError(OAIModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelsModelIdOptionsSignalError() instead")
    void modelsModelIdOptionsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelsModelIdOptionsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelsModelIdPatchSignalError() instead")
    void modelsModelIdPatchSignalE(OAIModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelsModelIdPatchSignalError(OAIModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelsModelIdTrainingsGetSignalError() instead")
    void modelsModelIdTrainingsGetSignalE(OAITrainings summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelsModelIdTrainingsGetSignalError(OAITrainings summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelsModelIdTrainingsOptionsSignalError() instead")
    void modelsModelIdTrainingsOptionsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelsModelIdTrainingsOptionsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelsModelIdTrainingsPostSignalError() instead")
    void modelsModelIdTrainingsPostSignalE(OAITraining summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelsModelIdTrainingsPostSignalError(OAITraining summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelsModelIdTrainingsTrainingIdOptionsSignalError() instead")
    void modelsModelIdTrainingsTrainingIdOptionsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelsModelIdTrainingsTrainingIdOptionsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelsModelIdTrainingsTrainingIdPatchSignalError() instead")
    void modelsModelIdTrainingsTrainingIdPatchSignalE(OAITraining summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelsModelIdTrainingsTrainingIdPatchSignalError(OAITraining summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelsOptionsSignalError() instead")
    void modelsOptionsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelsOptionsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelsPostSignalError() instead")
    void modelsPostSignalE(OAIModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelsPostSignalError(OAIModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organizationsGetSignalError() instead")
    void organizationsGetSignalE(OAIOrganizations summary, QNetworkReply::NetworkError error_type, QString error_str);
    void organizationsGetSignalError(OAIOrganizations summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organizationsOptionsSignalError() instead")
    void organizationsOptionsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void organizationsOptionsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organizationsOrganizationIdGetSignalError() instead")
    void organizationsOrganizationIdGetSignalE(OAIOrganization summary, QNetworkReply::NetworkError error_type, QString error_str);
    void organizationsOrganizationIdGetSignalError(OAIOrganization summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organizationsOrganizationIdOptionsSignalError() instead")
    void organizationsOrganizationIdOptionsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void organizationsOrganizationIdOptionsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organizationsOrganizationIdPatchSignalError() instead")
    void organizationsOrganizationIdPatchSignalE(OAIOrganization summary, QNetworkReply::NetworkError error_type, QString error_str);
    void organizationsOrganizationIdPatchSignalError(OAIOrganization summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organizationsPostSignalError() instead")
    void organizationsPostSignalE(OAIOrganization summary, QNetworkReply::NetworkError error_type, QString error_str);
    void organizationsPostSignalError(OAIOrganization summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentMethodsGetSignalError() instead")
    void paymentMethodsGetSignalE(OAIPaymentMethods summary, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentMethodsGetSignalError(OAIPaymentMethods summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentMethodsOptionsSignalError() instead")
    void paymentMethodsOptionsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentMethodsOptionsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentMethodsPaymentMethodIdDeleteSignalError() instead")
    void paymentMethodsPaymentMethodIdDeleteSignalE(OAIPaymentMethod summary, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentMethodsPaymentMethodIdDeleteSignalError(OAIPaymentMethod summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentMethodsPaymentMethodIdGetSignalError() instead")
    void paymentMethodsPaymentMethodIdGetSignalE(OAIPaymentMethod summary, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentMethodsPaymentMethodIdGetSignalError(OAIPaymentMethod summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentMethodsPaymentMethodIdOptionsSignalError() instead")
    void paymentMethodsPaymentMethodIdOptionsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentMethodsPaymentMethodIdOptionsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentMethodsPaymentMethodIdPatchSignalError() instead")
    void paymentMethodsPaymentMethodIdPatchSignalE(OAIPaymentMethod summary, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentMethodsPaymentMethodIdPatchSignalError(OAIPaymentMethod summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentMethodsPostSignalError() instead")
    void paymentMethodsPostSignalE(OAIPaymentMethod summary, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentMethodsPostSignalError(OAIPaymentMethod summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use plansGetSignalError() instead")
    void plansGetSignalE(OAIPlans summary, QNetworkReply::NetworkError error_type, QString error_str);
    void plansGetSignalError(OAIPlans summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use plansOptionsSignalError() instead")
    void plansOptionsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void plansOptionsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use plansPlanIdGetSignalError() instead")
    void plansPlanIdGetSignalE(OAIPlan summary, QNetworkReply::NetworkError error_type, QString error_str);
    void plansPlanIdGetSignalError(OAIPlan summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use plansPlanIdOptionsSignalError() instead")
    void plansPlanIdOptionsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void plansPlanIdOptionsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use predictionsGetSignalError() instead")
    void predictionsGetSignalE(OAIPredictions summary, QNetworkReply::NetworkError error_type, QString error_str);
    void predictionsGetSignalError(OAIPredictions summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use predictionsOptionsSignalError() instead")
    void predictionsOptionsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void predictionsOptionsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use predictionsPostSignalError() instead")
    void predictionsPostSignalE(OAIPrediction summary, QNetworkReply::NetworkError error_type, QString error_str);
    void predictionsPostSignalError(OAIPrediction summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use profilesProfileIdGetSignalError() instead")
    void profilesProfileIdGetSignalE(OAIProfile summary, QNetworkReply::NetworkError error_type, QString error_str);
    void profilesProfileIdGetSignalError(OAIProfile summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use profilesProfileIdOptionsSignalError() instead")
    void profilesProfileIdOptionsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void profilesProfileIdOptionsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use profilesProfileIdPatchSignalError() instead")
    void profilesProfileIdPatchSignalE(OAIProfile summary, QNetworkReply::NetworkError error_type, QString error_str);
    void profilesProfileIdPatchSignalError(OAIProfile summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use secretsGetSignalError() instead")
    void secretsGetSignalE(OAISecrets summary, QNetworkReply::NetworkError error_type, QString error_str);
    void secretsGetSignalError(OAISecrets summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use secretsOptionsSignalError() instead")
    void secretsOptionsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void secretsOptionsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use secretsPostSignalError() instead")
    void secretsPostSignalE(OAISecret summary, QNetworkReply::NetworkError error_type, QString error_str);
    void secretsPostSignalError(OAISecret summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use secretsSecretIdDeleteSignalError() instead")
    void secretsSecretIdDeleteSignalE(OAISecret summary, QNetworkReply::NetworkError error_type, QString error_str);
    void secretsSecretIdDeleteSignalError(OAISecret summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use secretsSecretIdOptionsSignalError() instead")
    void secretsSecretIdOptionsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void secretsSecretIdOptionsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use secretsSecretIdPatchSignalError() instead")
    void secretsSecretIdPatchSignalE(OAISecret summary, QNetworkReply::NetworkError error_type, QString error_str);
    void secretsSecretIdPatchSignalError(OAISecret summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transitionsGetSignalError() instead")
    void transitionsGetSignalE(OAITransitions summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transitionsGetSignalError(OAITransitions summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transitionsOptionsSignalError() instead")
    void transitionsOptionsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transitionsOptionsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transitionsPostSignalError() instead")
    void transitionsPostSignalE(OAITransition summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transitionsPostSignalError(OAITransition summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transitionsTransitionIdDeleteSignalError() instead")
    void transitionsTransitionIdDeleteSignalE(OAITransition summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transitionsTransitionIdDeleteSignalError(OAITransition summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transitionsTransitionIdExecutionsExecutionIdGetSignalError() instead")
    void transitionsTransitionIdExecutionsExecutionIdGetSignalE(OAITransitionExecution summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transitionsTransitionIdExecutionsExecutionIdGetSignalError(OAITransitionExecution summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transitionsTransitionIdExecutionsExecutionIdHeartbeatsOptionsSignalError() instead")
    void transitionsTransitionIdExecutionsExecutionIdHeartbeatsOptionsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transitionsTransitionIdExecutionsExecutionIdHeartbeatsOptionsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transitionsTransitionIdExecutionsExecutionIdHeartbeatsPostSignalError() instead")
    void transitionsTransitionIdExecutionsExecutionIdHeartbeatsPostSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transitionsTransitionIdExecutionsExecutionIdHeartbeatsPostSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transitionsTransitionIdExecutionsExecutionIdOptionsSignalError() instead")
    void transitionsTransitionIdExecutionsExecutionIdOptionsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transitionsTransitionIdExecutionsExecutionIdOptionsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transitionsTransitionIdExecutionsExecutionIdPatchSignalError() instead")
    void transitionsTransitionIdExecutionsExecutionIdPatchSignalE(OAITransitionExecution summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transitionsTransitionIdExecutionsExecutionIdPatchSignalError(OAITransitionExecution summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transitionsTransitionIdExecutionsGetSignalError() instead")
    void transitionsTransitionIdExecutionsGetSignalE(OAITransitionExecutions summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transitionsTransitionIdExecutionsGetSignalError(OAITransitionExecutions summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transitionsTransitionIdExecutionsOptionsSignalError() instead")
    void transitionsTransitionIdExecutionsOptionsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transitionsTransitionIdExecutionsOptionsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transitionsTransitionIdExecutionsPostSignalError() instead")
    void transitionsTransitionIdExecutionsPostSignalE(OAITransitionExecution summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transitionsTransitionIdExecutionsPostSignalError(OAITransitionExecution summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transitionsTransitionIdGetSignalError() instead")
    void transitionsTransitionIdGetSignalE(OAITransition summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transitionsTransitionIdGetSignalError(OAITransition summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transitionsTransitionIdOptionsSignalError() instead")
    void transitionsTransitionIdOptionsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transitionsTransitionIdOptionsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transitionsTransitionIdPatchSignalError() instead")
    void transitionsTransitionIdPatchSignalE(OAITransition summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transitionsTransitionIdPatchSignalError(OAITransition summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersGetSignalError() instead")
    void usersGetSignalE(OAIUsers summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersGetSignalError(OAIUsers summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersOptionsSignalError() instead")
    void usersOptionsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersOptionsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersPostSignalError() instead")
    void usersPostSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersPostSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUserIdDeleteSignalError() instead")
    void usersUserIdDeleteSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersUserIdDeleteSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUserIdGetSignalError() instead")
    void usersUserIdGetSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersUserIdGetSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUserIdOptionsSignalError() instead")
    void usersUserIdOptionsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersUserIdOptionsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUserIdPatchSignalError() instead")
    void usersUserIdPatchSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersUserIdPatchSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workflowsGetSignalError() instead")
    void workflowsGetSignalE(OAIWorkflows summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workflowsGetSignalError(OAIWorkflows summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workflowsOptionsSignalError() instead")
    void workflowsOptionsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workflowsOptionsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workflowsPostSignalError() instead")
    void workflowsPostSignalE(OAIWorkflow summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workflowsPostSignalError(OAIWorkflow summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workflowsWorkflowIdDeleteSignalError() instead")
    void workflowsWorkflowIdDeleteSignalE(OAIWorkflow summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workflowsWorkflowIdDeleteSignalError(OAIWorkflow summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workflowsWorkflowIdExecutionsExecutionIdDeleteSignalError() instead")
    void workflowsWorkflowIdExecutionsExecutionIdDeleteSignalE(OAIWorkflowExecution summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workflowsWorkflowIdExecutionsExecutionIdDeleteSignalError(OAIWorkflowExecution summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workflowsWorkflowIdExecutionsExecutionIdGetSignalError() instead")
    void workflowsWorkflowIdExecutionsExecutionIdGetSignalE(OAIWorkflowExecution summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workflowsWorkflowIdExecutionsExecutionIdGetSignalError(OAIWorkflowExecution summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workflowsWorkflowIdExecutionsExecutionIdOptionsSignalError() instead")
    void workflowsWorkflowIdExecutionsExecutionIdOptionsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workflowsWorkflowIdExecutionsExecutionIdOptionsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workflowsWorkflowIdExecutionsExecutionIdPatchSignalError() instead")
    void workflowsWorkflowIdExecutionsExecutionIdPatchSignalE(OAIWorkflowExecution summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workflowsWorkflowIdExecutionsExecutionIdPatchSignalError(OAIWorkflowExecution summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workflowsWorkflowIdExecutionsGetSignalError() instead")
    void workflowsWorkflowIdExecutionsGetSignalE(OAIWorkflowExecutions summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workflowsWorkflowIdExecutionsGetSignalError(OAIWorkflowExecutions summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workflowsWorkflowIdExecutionsOptionsSignalError() instead")
    void workflowsWorkflowIdExecutionsOptionsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workflowsWorkflowIdExecutionsOptionsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workflowsWorkflowIdExecutionsPostSignalError() instead")
    void workflowsWorkflowIdExecutionsPostSignalE(OAIWorkflowExecution summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workflowsWorkflowIdExecutionsPostSignalError(OAIWorkflowExecution summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workflowsWorkflowIdGetSignalError() instead")
    void workflowsWorkflowIdGetSignalE(OAIWorkflow summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workflowsWorkflowIdGetSignalError(OAIWorkflow summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workflowsWorkflowIdOptionsSignalError() instead")
    void workflowsWorkflowIdOptionsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workflowsWorkflowIdOptionsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workflowsWorkflowIdPatchSignalError() instead")
    void workflowsWorkflowIdPatchSignalE(OAIWorkflow summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workflowsWorkflowIdPatchSignalError(OAIWorkflow summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use appClientsAppClientIdDeleteSignalErrorFull() instead")
    void appClientsAppClientIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appClientsAppClientIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appClientsAppClientIdOptionsSignalErrorFull() instead")
    void appClientsAppClientIdOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appClientsAppClientIdOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appClientsAppClientIdPatchSignalErrorFull() instead")
    void appClientsAppClientIdPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appClientsAppClientIdPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appClientsGetSignalErrorFull() instead")
    void appClientsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appClientsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appClientsOptionsSignalErrorFull() instead")
    void appClientsOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appClientsOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appClientsPostSignalErrorFull() instead")
    void appClientsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appClientsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetsAssetIdDeleteSignalErrorFull() instead")
    void assetsAssetIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetsAssetIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetsAssetIdGetSignalErrorFull() instead")
    void assetsAssetIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetsAssetIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetsAssetIdOptionsSignalErrorFull() instead")
    void assetsAssetIdOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetsAssetIdOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetsAssetIdPatchSignalErrorFull() instead")
    void assetsAssetIdPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetsAssetIdPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetsGetSignalErrorFull() instead")
    void assetsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetsOptionsSignalErrorFull() instead")
    void assetsOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetsOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetsPostSignalErrorFull() instead")
    void assetsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datasetsDatasetIdDeleteSignalErrorFull() instead")
    void datasetsDatasetIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void datasetsDatasetIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datasetsDatasetIdGetSignalErrorFull() instead")
    void datasetsDatasetIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void datasetsDatasetIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datasetsDatasetIdOptionsSignalErrorFull() instead")
    void datasetsDatasetIdOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void datasetsDatasetIdOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datasetsDatasetIdPatchSignalErrorFull() instead")
    void datasetsDatasetIdPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void datasetsDatasetIdPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datasetsGetSignalErrorFull() instead")
    void datasetsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void datasetsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datasetsOptionsSignalErrorFull() instead")
    void datasetsOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void datasetsOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datasetsPostSignalErrorFull() instead")
    void datasetsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void datasetsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deploymentEnvironmentsDeploymentEnvironmentIdGetSignalErrorFull() instead")
    void deploymentEnvironmentsDeploymentEnvironmentIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deploymentEnvironmentsDeploymentEnvironmentIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deploymentEnvironmentsDeploymentEnvironmentIdOptionsSignalErrorFull() instead")
    void deploymentEnvironmentsDeploymentEnvironmentIdOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deploymentEnvironmentsDeploymentEnvironmentIdOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deploymentEnvironmentsGetSignalErrorFull() instead")
    void deploymentEnvironmentsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deploymentEnvironmentsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deploymentEnvironmentsOptionsSignalErrorFull() instead")
    void deploymentEnvironmentsOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deploymentEnvironmentsOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use documentsDeleteSignalErrorFull() instead")
    void documentsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void documentsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use documentsDocumentIdDeleteSignalErrorFull() instead")
    void documentsDocumentIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void documentsDocumentIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use documentsDocumentIdGetSignalErrorFull() instead")
    void documentsDocumentIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void documentsDocumentIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use documentsDocumentIdOptionsSignalErrorFull() instead")
    void documentsDocumentIdOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void documentsDocumentIdOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use documentsDocumentIdPatchSignalErrorFull() instead")
    void documentsDocumentIdPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void documentsDocumentIdPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use documentsGetSignalErrorFull() instead")
    void documentsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void documentsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use documentsOptionsSignalErrorFull() instead")
    void documentsOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void documentsOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use documentsPostSignalErrorFull() instead")
    void documentsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void documentsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use logsGetSignalErrorFull() instead")
    void logsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void logsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use logsLogIdGetSignalErrorFull() instead")
    void logsLogIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void logsLogIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use logsLogIdOptionsSignalErrorFull() instead")
    void logsLogIdOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void logsLogIdOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use logsOptionsSignalErrorFull() instead")
    void logsOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void logsOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelsGetSignalErrorFull() instead")
    void modelsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelsModelIdDataBundlesDataBundleIdDeleteSignalErrorFull() instead")
    void modelsModelIdDataBundlesDataBundleIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelsModelIdDataBundlesDataBundleIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelsModelIdDataBundlesDataBundleIdOptionsSignalErrorFull() instead")
    void modelsModelIdDataBundlesDataBundleIdOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelsModelIdDataBundlesDataBundleIdOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelsModelIdDataBundlesDataBundleIdPatchSignalErrorFull() instead")
    void modelsModelIdDataBundlesDataBundleIdPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelsModelIdDataBundlesDataBundleIdPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelsModelIdDataBundlesGetSignalErrorFull() instead")
    void modelsModelIdDataBundlesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelsModelIdDataBundlesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelsModelIdDataBundlesOptionsSignalErrorFull() instead")
    void modelsModelIdDataBundlesOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelsModelIdDataBundlesOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelsModelIdDataBundlesPostSignalErrorFull() instead")
    void modelsModelIdDataBundlesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelsModelIdDataBundlesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelsModelIdDeleteSignalErrorFull() instead")
    void modelsModelIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelsModelIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelsModelIdGetSignalErrorFull() instead")
    void modelsModelIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelsModelIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelsModelIdOptionsSignalErrorFull() instead")
    void modelsModelIdOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelsModelIdOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelsModelIdPatchSignalErrorFull() instead")
    void modelsModelIdPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelsModelIdPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelsModelIdTrainingsGetSignalErrorFull() instead")
    void modelsModelIdTrainingsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelsModelIdTrainingsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelsModelIdTrainingsOptionsSignalErrorFull() instead")
    void modelsModelIdTrainingsOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelsModelIdTrainingsOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelsModelIdTrainingsPostSignalErrorFull() instead")
    void modelsModelIdTrainingsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelsModelIdTrainingsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelsModelIdTrainingsTrainingIdOptionsSignalErrorFull() instead")
    void modelsModelIdTrainingsTrainingIdOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelsModelIdTrainingsTrainingIdOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelsModelIdTrainingsTrainingIdPatchSignalErrorFull() instead")
    void modelsModelIdTrainingsTrainingIdPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelsModelIdTrainingsTrainingIdPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelsOptionsSignalErrorFull() instead")
    void modelsOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelsOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelsPostSignalErrorFull() instead")
    void modelsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organizationsGetSignalErrorFull() instead")
    void organizationsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organizationsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organizationsOptionsSignalErrorFull() instead")
    void organizationsOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organizationsOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organizationsOrganizationIdGetSignalErrorFull() instead")
    void organizationsOrganizationIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organizationsOrganizationIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organizationsOrganizationIdOptionsSignalErrorFull() instead")
    void organizationsOrganizationIdOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organizationsOrganizationIdOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organizationsOrganizationIdPatchSignalErrorFull() instead")
    void organizationsOrganizationIdPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organizationsOrganizationIdPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organizationsPostSignalErrorFull() instead")
    void organizationsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organizationsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentMethodsGetSignalErrorFull() instead")
    void paymentMethodsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentMethodsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentMethodsOptionsSignalErrorFull() instead")
    void paymentMethodsOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentMethodsOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentMethodsPaymentMethodIdDeleteSignalErrorFull() instead")
    void paymentMethodsPaymentMethodIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentMethodsPaymentMethodIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentMethodsPaymentMethodIdGetSignalErrorFull() instead")
    void paymentMethodsPaymentMethodIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentMethodsPaymentMethodIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentMethodsPaymentMethodIdOptionsSignalErrorFull() instead")
    void paymentMethodsPaymentMethodIdOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentMethodsPaymentMethodIdOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentMethodsPaymentMethodIdPatchSignalErrorFull() instead")
    void paymentMethodsPaymentMethodIdPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentMethodsPaymentMethodIdPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentMethodsPostSignalErrorFull() instead")
    void paymentMethodsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentMethodsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use plansGetSignalErrorFull() instead")
    void plansGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void plansGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use plansOptionsSignalErrorFull() instead")
    void plansOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void plansOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use plansPlanIdGetSignalErrorFull() instead")
    void plansPlanIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void plansPlanIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use plansPlanIdOptionsSignalErrorFull() instead")
    void plansPlanIdOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void plansPlanIdOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use predictionsGetSignalErrorFull() instead")
    void predictionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void predictionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use predictionsOptionsSignalErrorFull() instead")
    void predictionsOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void predictionsOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use predictionsPostSignalErrorFull() instead")
    void predictionsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void predictionsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use profilesProfileIdGetSignalErrorFull() instead")
    void profilesProfileIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void profilesProfileIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use profilesProfileIdOptionsSignalErrorFull() instead")
    void profilesProfileIdOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void profilesProfileIdOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use profilesProfileIdPatchSignalErrorFull() instead")
    void profilesProfileIdPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void profilesProfileIdPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use secretsGetSignalErrorFull() instead")
    void secretsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void secretsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use secretsOptionsSignalErrorFull() instead")
    void secretsOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void secretsOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use secretsPostSignalErrorFull() instead")
    void secretsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void secretsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use secretsSecretIdDeleteSignalErrorFull() instead")
    void secretsSecretIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void secretsSecretIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use secretsSecretIdOptionsSignalErrorFull() instead")
    void secretsSecretIdOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void secretsSecretIdOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use secretsSecretIdPatchSignalErrorFull() instead")
    void secretsSecretIdPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void secretsSecretIdPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transitionsGetSignalErrorFull() instead")
    void transitionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transitionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transitionsOptionsSignalErrorFull() instead")
    void transitionsOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transitionsOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transitionsPostSignalErrorFull() instead")
    void transitionsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transitionsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transitionsTransitionIdDeleteSignalErrorFull() instead")
    void transitionsTransitionIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transitionsTransitionIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transitionsTransitionIdExecutionsExecutionIdGetSignalErrorFull() instead")
    void transitionsTransitionIdExecutionsExecutionIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transitionsTransitionIdExecutionsExecutionIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transitionsTransitionIdExecutionsExecutionIdHeartbeatsOptionsSignalErrorFull() instead")
    void transitionsTransitionIdExecutionsExecutionIdHeartbeatsOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transitionsTransitionIdExecutionsExecutionIdHeartbeatsOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transitionsTransitionIdExecutionsExecutionIdHeartbeatsPostSignalErrorFull() instead")
    void transitionsTransitionIdExecutionsExecutionIdHeartbeatsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transitionsTransitionIdExecutionsExecutionIdHeartbeatsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transitionsTransitionIdExecutionsExecutionIdOptionsSignalErrorFull() instead")
    void transitionsTransitionIdExecutionsExecutionIdOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transitionsTransitionIdExecutionsExecutionIdOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transitionsTransitionIdExecutionsExecutionIdPatchSignalErrorFull() instead")
    void transitionsTransitionIdExecutionsExecutionIdPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transitionsTransitionIdExecutionsExecutionIdPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transitionsTransitionIdExecutionsGetSignalErrorFull() instead")
    void transitionsTransitionIdExecutionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transitionsTransitionIdExecutionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transitionsTransitionIdExecutionsOptionsSignalErrorFull() instead")
    void transitionsTransitionIdExecutionsOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transitionsTransitionIdExecutionsOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transitionsTransitionIdExecutionsPostSignalErrorFull() instead")
    void transitionsTransitionIdExecutionsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transitionsTransitionIdExecutionsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transitionsTransitionIdGetSignalErrorFull() instead")
    void transitionsTransitionIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transitionsTransitionIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transitionsTransitionIdOptionsSignalErrorFull() instead")
    void transitionsTransitionIdOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transitionsTransitionIdOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transitionsTransitionIdPatchSignalErrorFull() instead")
    void transitionsTransitionIdPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transitionsTransitionIdPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersGetSignalErrorFull() instead")
    void usersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersOptionsSignalErrorFull() instead")
    void usersOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersPostSignalErrorFull() instead")
    void usersPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUserIdDeleteSignalErrorFull() instead")
    void usersUserIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersUserIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUserIdGetSignalErrorFull() instead")
    void usersUserIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersUserIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUserIdOptionsSignalErrorFull() instead")
    void usersUserIdOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersUserIdOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUserIdPatchSignalErrorFull() instead")
    void usersUserIdPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersUserIdPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workflowsGetSignalErrorFull() instead")
    void workflowsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workflowsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workflowsOptionsSignalErrorFull() instead")
    void workflowsOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workflowsOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workflowsPostSignalErrorFull() instead")
    void workflowsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workflowsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workflowsWorkflowIdDeleteSignalErrorFull() instead")
    void workflowsWorkflowIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workflowsWorkflowIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workflowsWorkflowIdExecutionsExecutionIdDeleteSignalErrorFull() instead")
    void workflowsWorkflowIdExecutionsExecutionIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workflowsWorkflowIdExecutionsExecutionIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workflowsWorkflowIdExecutionsExecutionIdGetSignalErrorFull() instead")
    void workflowsWorkflowIdExecutionsExecutionIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workflowsWorkflowIdExecutionsExecutionIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workflowsWorkflowIdExecutionsExecutionIdOptionsSignalErrorFull() instead")
    void workflowsWorkflowIdExecutionsExecutionIdOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workflowsWorkflowIdExecutionsExecutionIdOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workflowsWorkflowIdExecutionsExecutionIdPatchSignalErrorFull() instead")
    void workflowsWorkflowIdExecutionsExecutionIdPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workflowsWorkflowIdExecutionsExecutionIdPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workflowsWorkflowIdExecutionsGetSignalErrorFull() instead")
    void workflowsWorkflowIdExecutionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workflowsWorkflowIdExecutionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workflowsWorkflowIdExecutionsOptionsSignalErrorFull() instead")
    void workflowsWorkflowIdExecutionsOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workflowsWorkflowIdExecutionsOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workflowsWorkflowIdExecutionsPostSignalErrorFull() instead")
    void workflowsWorkflowIdExecutionsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workflowsWorkflowIdExecutionsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workflowsWorkflowIdGetSignalErrorFull() instead")
    void workflowsWorkflowIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workflowsWorkflowIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workflowsWorkflowIdOptionsSignalErrorFull() instead")
    void workflowsWorkflowIdOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workflowsWorkflowIdOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workflowsWorkflowIdPatchSignalErrorFull() instead")
    void workflowsWorkflowIdPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workflowsWorkflowIdPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
