/**
 * Lucidtech API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-03-23T15:40:40Z
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPatchAppClientId.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPatchAppClientId::OAIPatchAppClientId(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPatchAppClientId::OAIPatchAppClientId() {
    this->initializeModel();
}

OAIPatchAppClientId::~OAIPatchAppClientId() {}

void OAIPatchAppClientId::initializeModel() {

    m_default_login_url_isSet = false;
    m_default_login_url_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_login_urls_isSet = false;
    m_login_urls_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIPatchAppClientId::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPatchAppClientId::fromJsonObject(QJsonObject json) {

    m_default_login_url_isValid = ::OpenAPI::fromJsonValue(m_default_login_url, json[QString("defaultLoginUrl")]);
    m_default_login_url_isSet = !json[QString("defaultLoginUrl")].isNull() && m_default_login_url_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_login_urls_isValid = ::OpenAPI::fromJsonValue(m_login_urls, json[QString("loginUrls")]);
    m_login_urls_isSet = !json[QString("loginUrls")].isNull() && m_login_urls_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIPatchAppClientId::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPatchAppClientId::asJsonObject() const {
    QJsonObject obj;
    if (m_default_login_url_isSet) {
        obj.insert(QString("defaultLoginUrl"), ::OpenAPI::toJsonValue(m_default_login_url));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_login_urls.size() > 0) {
        obj.insert(QString("loginUrls"), ::OpenAPI::toJsonValue(m_login_urls));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAIPatchAppClientId::getDefaultLoginUrl() const {
    return m_default_login_url;
}
void OAIPatchAppClientId::setDefaultLoginUrl(const QString &default_login_url) {
    m_default_login_url = default_login_url;
    m_default_login_url_isSet = true;
}

bool OAIPatchAppClientId::is_default_login_url_Set() const{
    return m_default_login_url_isSet;
}

bool OAIPatchAppClientId::is_default_login_url_Valid() const{
    return m_default_login_url_isValid;
}

QString OAIPatchAppClientId::getDescription() const {
    return m_description;
}
void OAIPatchAppClientId::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPatchAppClientId::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPatchAppClientId::is_description_Valid() const{
    return m_description_isValid;
}

QList<QString> OAIPatchAppClientId::getLoginUrls() const {
    return m_login_urls;
}
void OAIPatchAppClientId::setLoginUrls(const QList<QString> &login_urls) {
    m_login_urls = login_urls;
    m_login_urls_isSet = true;
}

bool OAIPatchAppClientId::is_login_urls_Set() const{
    return m_login_urls_isSet;
}

bool OAIPatchAppClientId::is_login_urls_Valid() const{
    return m_login_urls_isValid;
}

QString OAIPatchAppClientId::getName() const {
    return m_name;
}
void OAIPatchAppClientId::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPatchAppClientId::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPatchAppClientId::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIPatchAppClientId::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_default_login_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_login_urls.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPatchAppClientId::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
