/**
 * Lucidtech API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-03-23T15:40:40Z
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPatchDocumentId.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPatchDocumentId::OAIPatchDocumentId(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPatchDocumentId::OAIPatchDocumentId() {
    this->initializeModel();
}

OAIPatchDocumentId::~OAIPatchDocumentId() {}

void OAIPatchDocumentId::initializeModel() {

    m_dataset_id_isSet = false;
    m_dataset_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_ground_truth_isSet = false;
    m_ground_truth_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_retention_in_days_isSet = false;
    m_retention_in_days_isValid = false;
}

void OAIPatchDocumentId::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPatchDocumentId::fromJsonObject(QJsonObject json) {

    m_dataset_id_isValid = ::OpenAPI::fromJsonValue(m_dataset_id, json[QString("datasetId")]);
    m_dataset_id_isSet = !json[QString("datasetId")].isNull() && m_dataset_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_ground_truth_isValid = ::OpenAPI::fromJsonValue(m_ground_truth, json[QString("groundTruth")]);
    m_ground_truth_isSet = !json[QString("groundTruth")].isNull() && m_ground_truth_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_retention_in_days_isValid = ::OpenAPI::fromJsonValue(m_retention_in_days, json[QString("retentionInDays")]);
    m_retention_in_days_isSet = !json[QString("retentionInDays")].isNull() && m_retention_in_days_isValid;
}

QString OAIPatchDocumentId::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPatchDocumentId::asJsonObject() const {
    QJsonObject obj;
    if (m_dataset_id_isSet) {
        obj.insert(QString("datasetId"), ::OpenAPI::toJsonValue(m_dataset_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_ground_truth.size() > 0) {
        obj.insert(QString("groundTruth"), ::OpenAPI::toJsonValue(m_ground_truth));
    }
    if (m_metadata_isSet) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_retention_in_days_isSet) {
        obj.insert(QString("retentionInDays"), ::OpenAPI::toJsonValue(m_retention_in_days));
    }
    return obj;
}

QString OAIPatchDocumentId::getDatasetId() const {
    return m_dataset_id;
}
void OAIPatchDocumentId::setDatasetId(const QString &dataset_id) {
    m_dataset_id = dataset_id;
    m_dataset_id_isSet = true;
}

bool OAIPatchDocumentId::is_dataset_id_Set() const{
    return m_dataset_id_isSet;
}

bool OAIPatchDocumentId::is_dataset_id_Valid() const{
    return m_dataset_id_isValid;
}

QString OAIPatchDocumentId::getDescription() const {
    return m_description;
}
void OAIPatchDocumentId::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPatchDocumentId::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPatchDocumentId::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAIDocument_groundTruth_inner> OAIPatchDocumentId::getGroundTruth() const {
    return m_ground_truth;
}
void OAIPatchDocumentId::setGroundTruth(const QList<OAIDocument_groundTruth_inner> &ground_truth) {
    m_ground_truth = ground_truth;
    m_ground_truth_isSet = true;
}

bool OAIPatchDocumentId::is_ground_truth_Set() const{
    return m_ground_truth_isSet;
}

bool OAIPatchDocumentId::is_ground_truth_Valid() const{
    return m_ground_truth_isValid;
}

OAIObject OAIPatchDocumentId::getMetadata() const {
    return m_metadata;
}
void OAIPatchDocumentId::setMetadata(const OAIObject &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIPatchDocumentId::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIPatchDocumentId::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIPatchDocumentId::getName() const {
    return m_name;
}
void OAIPatchDocumentId::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPatchDocumentId::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPatchDocumentId::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIPatchDocumentId::getRetentionInDays() const {
    return m_retention_in_days;
}
void OAIPatchDocumentId::setRetentionInDays(const qint32 &retention_in_days) {
    m_retention_in_days = retention_in_days;
    m_retention_in_days_isSet = true;
}

bool OAIPatchDocumentId::is_retention_in_days_Set() const{
    return m_retention_in_days_isSet;
}

bool OAIPatchDocumentId::is_retention_in_days_Valid() const{
    return m_retention_in_days_isValid;
}

bool OAIPatchDocumentId::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dataset_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ground_truth.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retention_in_days_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPatchDocumentId::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
