/**
 * Lucidtech API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-03-23T15:40:40Z
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPostWorkflows_specification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPostWorkflows_specification::OAIPostWorkflows_specification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPostWorkflows_specification::OAIPostWorkflows_specification() {
    this->initializeModel();
}

OAIPostWorkflows_specification::~OAIPostWorkflows_specification() {}

void OAIPostWorkflows_specification::initializeModel() {

    m_definition_isSet = false;
    m_definition_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIPostWorkflows_specification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPostWorkflows_specification::fromJsonObject(QJsonObject json) {

    m_definition_isValid = ::OpenAPI::fromJsonValue(m_definition, json[QString("definition")]);
    m_definition_isSet = !json[QString("definition")].isNull() && m_definition_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIPostWorkflows_specification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPostWorkflows_specification::asJsonObject() const {
    QJsonObject obj;
    if (m_definition_isSet) {
        obj.insert(QString("definition"), ::OpenAPI::toJsonValue(m_definition));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

OAIObject OAIPostWorkflows_specification::getDefinition() const {
    return m_definition;
}
void OAIPostWorkflows_specification::setDefinition(const OAIObject &definition) {
    m_definition = definition;
    m_definition_isSet = true;
}

bool OAIPostWorkflows_specification::is_definition_Set() const{
    return m_definition_isSet;
}

bool OAIPostWorkflows_specification::is_definition_Valid() const{
    return m_definition_isValid;
}

QString OAIPostWorkflows_specification::getLanguage() const {
    return m_language;
}
void OAIPostWorkflows_specification::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIPostWorkflows_specification::is_language_Set() const{
    return m_language_isSet;
}

bool OAIPostWorkflows_specification::is_language_Valid() const{
    return m_language_isValid;
}

QString OAIPostWorkflows_specification::getVersion() const {
    return m_version;
}
void OAIPostWorkflows_specification::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIPostWorkflows_specification::is_version_Set() const{
    return m_version_isSet;
}

bool OAIPostWorkflows_specification::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIPostWorkflows_specification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_definition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPostWorkflows_specification::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_definition_isValid && true;
}

} // namespace OpenAPI
