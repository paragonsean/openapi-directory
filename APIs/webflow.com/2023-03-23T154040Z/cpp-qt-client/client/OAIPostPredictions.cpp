/**
 * Lucidtech API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-03-23T15:40:40Z
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPostPredictions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPostPredictions::OAIPostPredictions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPostPredictions::OAIPostPredictions() {
    this->initializeModel();
}

OAIPostPredictions::~OAIPostPredictions() {}

void OAIPostPredictions::initializeModel() {

    m_auto_rotate_isSet = false;
    m_auto_rotate_isValid = false;

    m_document_id_isSet = false;
    m_document_id_isValid = false;

    m_image_quality_isSet = false;
    m_image_quality_isValid = false;

    m_max_pages_isSet = false;
    m_max_pages_isValid = false;

    m_model_id_isSet = false;
    m_model_id_isValid = false;

    m_postprocess_config_isSet = false;
    m_postprocess_config_isValid = false;

    m_rotation_isSet = false;
    m_rotation_isValid = false;

    m_training_id_isSet = false;
    m_training_id_isValid = false;
}

void OAIPostPredictions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPostPredictions::fromJsonObject(QJsonObject json) {

    m_auto_rotate_isValid = ::OpenAPI::fromJsonValue(m_auto_rotate, json[QString("autoRotate")]);
    m_auto_rotate_isSet = !json[QString("autoRotate")].isNull() && m_auto_rotate_isValid;

    m_document_id_isValid = ::OpenAPI::fromJsonValue(m_document_id, json[QString("documentId")]);
    m_document_id_isSet = !json[QString("documentId")].isNull() && m_document_id_isValid;

    m_image_quality_isValid = ::OpenAPI::fromJsonValue(m_image_quality, json[QString("imageQuality")]);
    m_image_quality_isSet = !json[QString("imageQuality")].isNull() && m_image_quality_isValid;

    m_max_pages_isValid = ::OpenAPI::fromJsonValue(m_max_pages, json[QString("maxPages")]);
    m_max_pages_isSet = !json[QString("maxPages")].isNull() && m_max_pages_isValid;

    m_model_id_isValid = ::OpenAPI::fromJsonValue(m_model_id, json[QString("modelId")]);
    m_model_id_isSet = !json[QString("modelId")].isNull() && m_model_id_isValid;

    m_postprocess_config_isValid = ::OpenAPI::fromJsonValue(m_postprocess_config, json[QString("postprocessConfig")]);
    m_postprocess_config_isSet = !json[QString("postprocessConfig")].isNull() && m_postprocess_config_isValid;

    m_rotation_isValid = ::OpenAPI::fromJsonValue(m_rotation, json[QString("rotation")]);
    m_rotation_isSet = !json[QString("rotation")].isNull() && m_rotation_isValid;

    m_training_id_isValid = ::OpenAPI::fromJsonValue(m_training_id, json[QString("trainingId")]);
    m_training_id_isSet = !json[QString("trainingId")].isNull() && m_training_id_isValid;
}

QString OAIPostPredictions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPostPredictions::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_rotate_isSet) {
        obj.insert(QString("autoRotate"), ::OpenAPI::toJsonValue(m_auto_rotate));
    }
    if (m_document_id_isSet) {
        obj.insert(QString("documentId"), ::OpenAPI::toJsonValue(m_document_id));
    }
    if (m_image_quality_isSet) {
        obj.insert(QString("imageQuality"), ::OpenAPI::toJsonValue(m_image_quality));
    }
    if (m_max_pages_isSet) {
        obj.insert(QString("maxPages"), ::OpenAPI::toJsonValue(m_max_pages));
    }
    if (m_model_id_isSet) {
        obj.insert(QString("modelId"), ::OpenAPI::toJsonValue(m_model_id));
    }
    if (m_postprocess_config.isSet()) {
        obj.insert(QString("postprocessConfig"), ::OpenAPI::toJsonValue(m_postprocess_config));
    }
    if (m_rotation_isSet) {
        obj.insert(QString("rotation"), ::OpenAPI::toJsonValue(m_rotation));
    }
    if (m_training_id_isSet) {
        obj.insert(QString("trainingId"), ::OpenAPI::toJsonValue(m_training_id));
    }
    return obj;
}

bool OAIPostPredictions::isAutoRotate() const {
    return m_auto_rotate;
}
void OAIPostPredictions::setAutoRotate(const bool &auto_rotate) {
    m_auto_rotate = auto_rotate;
    m_auto_rotate_isSet = true;
}

bool OAIPostPredictions::is_auto_rotate_Set() const{
    return m_auto_rotate_isSet;
}

bool OAIPostPredictions::is_auto_rotate_Valid() const{
    return m_auto_rotate_isValid;
}

QString OAIPostPredictions::getDocumentId() const {
    return m_document_id;
}
void OAIPostPredictions::setDocumentId(const QString &document_id) {
    m_document_id = document_id;
    m_document_id_isSet = true;
}

bool OAIPostPredictions::is_document_id_Set() const{
    return m_document_id_isSet;
}

bool OAIPostPredictions::is_document_id_Valid() const{
    return m_document_id_isValid;
}

QString OAIPostPredictions::getImageQuality() const {
    return m_image_quality;
}
void OAIPostPredictions::setImageQuality(const QString &image_quality) {
    m_image_quality = image_quality;
    m_image_quality_isSet = true;
}

bool OAIPostPredictions::is_image_quality_Set() const{
    return m_image_quality_isSet;
}

bool OAIPostPredictions::is_image_quality_Valid() const{
    return m_image_quality_isValid;
}

qint32 OAIPostPredictions::getMaxPages() const {
    return m_max_pages;
}
void OAIPostPredictions::setMaxPages(const qint32 &max_pages) {
    m_max_pages = max_pages;
    m_max_pages_isSet = true;
}

bool OAIPostPredictions::is_max_pages_Set() const{
    return m_max_pages_isSet;
}

bool OAIPostPredictions::is_max_pages_Valid() const{
    return m_max_pages_isValid;
}

QString OAIPostPredictions::getModelId() const {
    return m_model_id;
}
void OAIPostPredictions::setModelId(const QString &model_id) {
    m_model_id = model_id;
    m_model_id_isSet = true;
}

bool OAIPostPredictions::is_model_id_Set() const{
    return m_model_id_isSet;
}

bool OAIPostPredictions::is_model_id_Valid() const{
    return m_model_id_isValid;
}

OAIModel_postprocessConfig OAIPostPredictions::getPostprocessConfig() const {
    return m_postprocess_config;
}
void OAIPostPredictions::setPostprocessConfig(const OAIModel_postprocessConfig &postprocess_config) {
    m_postprocess_config = postprocess_config;
    m_postprocess_config_isSet = true;
}

bool OAIPostPredictions::is_postprocess_config_Set() const{
    return m_postprocess_config_isSet;
}

bool OAIPostPredictions::is_postprocess_config_Valid() const{
    return m_postprocess_config_isValid;
}

qint32 OAIPostPredictions::getRotation() const {
    return m_rotation;
}
void OAIPostPredictions::setRotation(const qint32 &rotation) {
    m_rotation = rotation;
    m_rotation_isSet = true;
}

bool OAIPostPredictions::is_rotation_Set() const{
    return m_rotation_isSet;
}

bool OAIPostPredictions::is_rotation_Valid() const{
    return m_rotation_isValid;
}

QString OAIPostPredictions::getTrainingId() const {
    return m_training_id;
}
void OAIPostPredictions::setTrainingId(const QString &training_id) {
    m_training_id = training_id;
    m_training_id_isSet = true;
}

bool OAIPostPredictions::is_training_id_Set() const{
    return m_training_id_isSet;
}

bool OAIPostPredictions::is_training_id_Valid() const{
    return m_training_id_isValid;
}

bool OAIPostPredictions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_rotate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_quality_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_pages_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postprocess_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rotation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_training_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPostPredictions::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_document_id_isValid && m_model_id_isValid && true;
}

} // namespace OpenAPI
