/**
 * Lucidtech API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-03-23T15:40:40Z
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPostTrainings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPostTrainings::OAIPostTrainings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPostTrainings::OAIPostTrainings() {
    this->initializeModel();
}

OAIPostTrainings::~OAIPostTrainings() {}

void OAIPostTrainings::initializeModel() {

    m_data_bundle_ids_isSet = false;
    m_data_bundle_ids_isValid = false;

    m_data_scientist_assistance_isSet = false;
    m_data_scientist_assistance_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_warm_start_config_isSet = false;
    m_warm_start_config_isValid = false;
}

void OAIPostTrainings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPostTrainings::fromJsonObject(QJsonObject json) {

    m_data_bundle_ids_isValid = ::OpenAPI::fromJsonValue(m_data_bundle_ids, json[QString("dataBundleIds")]);
    m_data_bundle_ids_isSet = !json[QString("dataBundleIds")].isNull() && m_data_bundle_ids_isValid;

    m_data_scientist_assistance_isValid = ::OpenAPI::fromJsonValue(m_data_scientist_assistance, json[QString("dataScientistAssistance")]);
    m_data_scientist_assistance_isSet = !json[QString("dataScientistAssistance")].isNull() && m_data_scientist_assistance_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("instanceType")]);
    m_instance_type_isSet = !json[QString("instanceType")].isNull() && m_instance_type_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_warm_start_config_isValid = ::OpenAPI::fromJsonValue(m_warm_start_config, json[QString("warmStartConfig")]);
    m_warm_start_config_isSet = !json[QString("warmStartConfig")].isNull() && m_warm_start_config_isValid;
}

QString OAIPostTrainings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPostTrainings::asJsonObject() const {
    QJsonObject obj;
    if (m_data_bundle_ids.size() > 0) {
        obj.insert(QString("dataBundleIds"), ::OpenAPI::toJsonValue(m_data_bundle_ids));
    }
    if (m_data_scientist_assistance_isSet) {
        obj.insert(QString("dataScientistAssistance"), ::OpenAPI::toJsonValue(m_data_scientist_assistance));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_instance_type_isSet) {
        obj.insert(QString("instanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    if (m_metadata_isSet) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_warm_start_config.isSet()) {
        obj.insert(QString("warmStartConfig"), ::OpenAPI::toJsonValue(m_warm_start_config));
    }
    return obj;
}

QList<QString> OAIPostTrainings::getDataBundleIds() const {
    return m_data_bundle_ids;
}
void OAIPostTrainings::setDataBundleIds(const QList<QString> &data_bundle_ids) {
    m_data_bundle_ids = data_bundle_ids;
    m_data_bundle_ids_isSet = true;
}

bool OAIPostTrainings::is_data_bundle_ids_Set() const{
    return m_data_bundle_ids_isSet;
}

bool OAIPostTrainings::is_data_bundle_ids_Valid() const{
    return m_data_bundle_ids_isValid;
}

bool OAIPostTrainings::isDataScientistAssistance() const {
    return m_data_scientist_assistance;
}
void OAIPostTrainings::setDataScientistAssistance(const bool &data_scientist_assistance) {
    m_data_scientist_assistance = data_scientist_assistance;
    m_data_scientist_assistance_isSet = true;
}

bool OAIPostTrainings::is_data_scientist_assistance_Set() const{
    return m_data_scientist_assistance_isSet;
}

bool OAIPostTrainings::is_data_scientist_assistance_Valid() const{
    return m_data_scientist_assistance_isValid;
}

QString OAIPostTrainings::getDescription() const {
    return m_description;
}
void OAIPostTrainings::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPostTrainings::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPostTrainings::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIPostTrainings::getInstanceType() const {
    return m_instance_type;
}
void OAIPostTrainings::setInstanceType(const QString &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAIPostTrainings::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAIPostTrainings::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

OAIObject OAIPostTrainings::getMetadata() const {
    return m_metadata;
}
void OAIPostTrainings::setMetadata(const OAIObject &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIPostTrainings::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIPostTrainings::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIPostTrainings::getName() const {
    return m_name;
}
void OAIPostTrainings::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPostTrainings::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPostTrainings::is_name_Valid() const{
    return m_name_isValid;
}

OAIPostTrainings_warmStartConfig OAIPostTrainings::getWarmStartConfig() const {
    return m_warm_start_config;
}
void OAIPostTrainings::setWarmStartConfig(const OAIPostTrainings_warmStartConfig &warm_start_config) {
    m_warm_start_config = warm_start_config;
    m_warm_start_config_isSet = true;
}

bool OAIPostTrainings::is_warm_start_config_Set() const{
    return m_warm_start_config_isSet;
}

bool OAIPostTrainings::is_warm_start_config_Valid() const{
    return m_warm_start_config_isValid;
}

bool OAIPostTrainings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_bundle_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_scientist_assistance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warm_start_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPostTrainings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
