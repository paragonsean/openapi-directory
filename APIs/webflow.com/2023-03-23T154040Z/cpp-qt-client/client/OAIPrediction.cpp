/**
 * Lucidtech API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-03-23T15:40:40Z
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPrediction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPrediction::OAIPrediction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPrediction::OAIPrediction() {
    this->initializeModel();
}

OAIPrediction::~OAIPrediction() {}

void OAIPrediction::initializeModel() {

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_document_id_isSet = false;
    m_document_id_isValid = false;

    m_inference_time_isSet = false;
    m_inference_time_isValid = false;

    m_model_id_isSet = false;
    m_model_id_isValid = false;

    m_postprocess_config_isSet = false;
    m_postprocess_config_isValid = false;

    m_prediction_id_isSet = false;
    m_prediction_id_isValid = false;

    m_predictions_isSet = false;
    m_predictions_isValid = false;

    m_preprocess_config_isSet = false;
    m_preprocess_config_isValid = false;

    m_training_id_isSet = false;
    m_training_id_isValid = false;
}

void OAIPrediction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPrediction::fromJsonObject(QJsonObject json) {

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("createdBy")]);
    m_created_by_isSet = !json[QString("createdBy")].isNull() && m_created_by_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("createdTime")]);
    m_created_time_isSet = !json[QString("createdTime")].isNull() && m_created_time_isValid;

    m_document_id_isValid = ::OpenAPI::fromJsonValue(m_document_id, json[QString("documentId")]);
    m_document_id_isSet = !json[QString("documentId")].isNull() && m_document_id_isValid;

    m_inference_time_isValid = ::OpenAPI::fromJsonValue(m_inference_time, json[QString("inferenceTime")]);
    m_inference_time_isSet = !json[QString("inferenceTime")].isNull() && m_inference_time_isValid;

    m_model_id_isValid = ::OpenAPI::fromJsonValue(m_model_id, json[QString("modelId")]);
    m_model_id_isSet = !json[QString("modelId")].isNull() && m_model_id_isValid;

    m_postprocess_config_isValid = ::OpenAPI::fromJsonValue(m_postprocess_config, json[QString("postprocessConfig")]);
    m_postprocess_config_isSet = !json[QString("postprocessConfig")].isNull() && m_postprocess_config_isValid;

    m_prediction_id_isValid = ::OpenAPI::fromJsonValue(m_prediction_id, json[QString("predictionId")]);
    m_prediction_id_isSet = !json[QString("predictionId")].isNull() && m_prediction_id_isValid;

    m_predictions_isValid = ::OpenAPI::fromJsonValue(m_predictions, json[QString("predictions")]);
    m_predictions_isSet = !json[QString("predictions")].isNull() && m_predictions_isValid;

    m_preprocess_config_isValid = ::OpenAPI::fromJsonValue(m_preprocess_config, json[QString("preprocessConfig")]);
    m_preprocess_config_isSet = !json[QString("preprocessConfig")].isNull() && m_preprocess_config_isValid;

    m_training_id_isValid = ::OpenAPI::fromJsonValue(m_training_id, json[QString("trainingId")]);
    m_training_id_isSet = !json[QString("trainingId")].isNull() && m_training_id_isValid;
}

QString OAIPrediction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPrediction::asJsonObject() const {
    QJsonObject obj;
    if (m_created_by_isSet) {
        obj.insert(QString("createdBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("createdTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_document_id_isSet) {
        obj.insert(QString("documentId"), ::OpenAPI::toJsonValue(m_document_id));
    }
    if (m_inference_time_isSet) {
        obj.insert(QString("inferenceTime"), ::OpenAPI::toJsonValue(m_inference_time));
    }
    if (m_model_id_isSet) {
        obj.insert(QString("modelId"), ::OpenAPI::toJsonValue(m_model_id));
    }
    if (m_postprocess_config.isSet()) {
        obj.insert(QString("postprocessConfig"), ::OpenAPI::toJsonValue(m_postprocess_config));
    }
    if (m_prediction_id_isSet) {
        obj.insert(QString("predictionId"), ::OpenAPI::toJsonValue(m_prediction_id));
    }
    if (m_predictions.size() > 0) {
        obj.insert(QString("predictions"), ::OpenAPI::toJsonValue(m_predictions));
    }
    if (m_preprocess_config.isSet()) {
        obj.insert(QString("preprocessConfig"), ::OpenAPI::toJsonValue(m_preprocess_config));
    }
    if (m_training_id_isSet) {
        obj.insert(QString("trainingId"), ::OpenAPI::toJsonValue(m_training_id));
    }
    return obj;
}

QString OAIPrediction::getCreatedBy() const {
    return m_created_by;
}
void OAIPrediction::setCreatedBy(const QString &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIPrediction::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIPrediction::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QString OAIPrediction::getCreatedTime() const {
    return m_created_time;
}
void OAIPrediction::setCreatedTime(const QString &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIPrediction::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIPrediction::is_created_time_Valid() const{
    return m_created_time_isValid;
}

QString OAIPrediction::getDocumentId() const {
    return m_document_id;
}
void OAIPrediction::setDocumentId(const QString &document_id) {
    m_document_id = document_id;
    m_document_id_isSet = true;
}

bool OAIPrediction::is_document_id_Set() const{
    return m_document_id_isSet;
}

bool OAIPrediction::is_document_id_Valid() const{
    return m_document_id_isValid;
}

double OAIPrediction::getInferenceTime() const {
    return m_inference_time;
}
void OAIPrediction::setInferenceTime(const double &inference_time) {
    m_inference_time = inference_time;
    m_inference_time_isSet = true;
}

bool OAIPrediction::is_inference_time_Set() const{
    return m_inference_time_isSet;
}

bool OAIPrediction::is_inference_time_Valid() const{
    return m_inference_time_isValid;
}

QString OAIPrediction::getModelId() const {
    return m_model_id;
}
void OAIPrediction::setModelId(const QString &model_id) {
    m_model_id = model_id;
    m_model_id_isSet = true;
}

bool OAIPrediction::is_model_id_Set() const{
    return m_model_id_isSet;
}

bool OAIPrediction::is_model_id_Valid() const{
    return m_model_id_isValid;
}

OAIPrediction_postprocessConfig OAIPrediction::getPostprocessConfig() const {
    return m_postprocess_config;
}
void OAIPrediction::setPostprocessConfig(const OAIPrediction_postprocessConfig &postprocess_config) {
    m_postprocess_config = postprocess_config;
    m_postprocess_config_isSet = true;
}

bool OAIPrediction::is_postprocess_config_Set() const{
    return m_postprocess_config_isSet;
}

bool OAIPrediction::is_postprocess_config_Valid() const{
    return m_postprocess_config_isValid;
}

QString OAIPrediction::getPredictionId() const {
    return m_prediction_id;
}
void OAIPrediction::setPredictionId(const QString &prediction_id) {
    m_prediction_id = prediction_id;
    m_prediction_id_isSet = true;
}

bool OAIPrediction::is_prediction_id_Set() const{
    return m_prediction_id_isSet;
}

bool OAIPrediction::is_prediction_id_Valid() const{
    return m_prediction_id_isValid;
}

QList<OAIPrediction_predictions_inner> OAIPrediction::getPredictions() const {
    return m_predictions;
}
void OAIPrediction::setPredictions(const QList<OAIPrediction_predictions_inner> &predictions) {
    m_predictions = predictions;
    m_predictions_isSet = true;
}

bool OAIPrediction::is_predictions_Set() const{
    return m_predictions_isSet;
}

bool OAIPrediction::is_predictions_Valid() const{
    return m_predictions_isValid;
}

OAIPrediction_preprocessConfig OAIPrediction::getPreprocessConfig() const {
    return m_preprocess_config;
}
void OAIPrediction::setPreprocessConfig(const OAIPrediction_preprocessConfig &preprocess_config) {
    m_preprocess_config = preprocess_config;
    m_preprocess_config_isSet = true;
}

bool OAIPrediction::is_preprocess_config_Set() const{
    return m_preprocess_config_isSet;
}

bool OAIPrediction::is_preprocess_config_Valid() const{
    return m_preprocess_config_isValid;
}

QString OAIPrediction::getTrainingId() const {
    return m_training_id;
}
void OAIPrediction::setTrainingId(const QString &training_id) {
    m_training_id = training_id;
    m_training_id_isSet = true;
}

bool OAIPrediction::is_training_id_Set() const{
    return m_training_id_isSet;
}

bool OAIPrediction::is_training_id_Valid() const{
    return m_training_id_isValid;
}

bool OAIPrediction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inference_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postprocess_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_prediction_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_predictions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_preprocess_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_training_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPrediction::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_document_id_isValid && m_inference_time_isValid && m_model_id_isValid && m_prediction_id_isValid && m_predictions_isValid && true;
}

} // namespace OpenAPI
