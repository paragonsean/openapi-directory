/**
 * Lucidtech API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-03-23T15:40:40Z
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIModel_preprocessConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIModel_preprocessConfig::OAIModel_preprocessConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIModel_preprocessConfig::OAIModel_preprocessConfig() {
    this->initializeModel();
}

OAIModel_preprocessConfig::~OAIModel_preprocessConfig() {}

void OAIModel_preprocessConfig::initializeModel() {

    m_auto_rotate_isSet = false;
    m_auto_rotate_isValid = false;

    m_image_quality_isSet = false;
    m_image_quality_isValid = false;

    m_max_pages_isSet = false;
    m_max_pages_isValid = false;
}

void OAIModel_preprocessConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIModel_preprocessConfig::fromJsonObject(QJsonObject json) {

    m_auto_rotate_isValid = ::OpenAPI::fromJsonValue(m_auto_rotate, json[QString("autoRotate")]);
    m_auto_rotate_isSet = !json[QString("autoRotate")].isNull() && m_auto_rotate_isValid;

    m_image_quality_isValid = ::OpenAPI::fromJsonValue(m_image_quality, json[QString("imageQuality")]);
    m_image_quality_isSet = !json[QString("imageQuality")].isNull() && m_image_quality_isValid;

    m_max_pages_isValid = ::OpenAPI::fromJsonValue(m_max_pages, json[QString("maxPages")]);
    m_max_pages_isSet = !json[QString("maxPages")].isNull() && m_max_pages_isValid;
}

QString OAIModel_preprocessConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIModel_preprocessConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_rotate_isSet) {
        obj.insert(QString("autoRotate"), ::OpenAPI::toJsonValue(m_auto_rotate));
    }
    if (m_image_quality_isSet) {
        obj.insert(QString("imageQuality"), ::OpenAPI::toJsonValue(m_image_quality));
    }
    if (m_max_pages_isSet) {
        obj.insert(QString("maxPages"), ::OpenAPI::toJsonValue(m_max_pages));
    }
    return obj;
}

bool OAIModel_preprocessConfig::isAutoRotate() const {
    return m_auto_rotate;
}
void OAIModel_preprocessConfig::setAutoRotate(const bool &auto_rotate) {
    m_auto_rotate = auto_rotate;
    m_auto_rotate_isSet = true;
}

bool OAIModel_preprocessConfig::is_auto_rotate_Set() const{
    return m_auto_rotate_isSet;
}

bool OAIModel_preprocessConfig::is_auto_rotate_Valid() const{
    return m_auto_rotate_isValid;
}

QString OAIModel_preprocessConfig::getImageQuality() const {
    return m_image_quality;
}
void OAIModel_preprocessConfig::setImageQuality(const QString &image_quality) {
    m_image_quality = image_quality;
    m_image_quality_isSet = true;
}

bool OAIModel_preprocessConfig::is_image_quality_Set() const{
    return m_image_quality_isSet;
}

bool OAIModel_preprocessConfig::is_image_quality_Valid() const{
    return m_image_quality_isValid;
}

qint32 OAIModel_preprocessConfig::getMaxPages() const {
    return m_max_pages;
}
void OAIModel_preprocessConfig::setMaxPages(const qint32 &max_pages) {
    m_max_pages = max_pages;
    m_max_pages_isSet = true;
}

bool OAIModel_preprocessConfig::is_max_pages_Set() const{
    return m_max_pages_isSet;
}

bool OAIModel_preprocessConfig::is_max_pages_Valid() const{
    return m_max_pages_isValid;
}

bool OAIModel_preprocessConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_rotate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_quality_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_pages_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIModel_preprocessConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_auto_rotate_isValid && m_image_quality_isValid && m_max_pages_isValid && true;
}

} // namespace OpenAPI
