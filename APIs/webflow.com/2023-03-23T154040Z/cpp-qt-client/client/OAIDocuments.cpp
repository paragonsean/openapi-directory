/**
 * Lucidtech API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-03-23T15:40:40Z
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDocuments.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDocuments::OAIDocuments(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDocuments::OAIDocuments() {
    this->initializeModel();
}

OAIDocuments::~OAIDocuments() {}

void OAIDocuments::initializeModel() {

    m_consent_id_isSet = false;
    m_consent_id_isValid = false;

    m_dataset_id_isSet = false;
    m_dataset_id_isValid = false;

    m_documents_isSet = false;
    m_documents_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_order_isSet = false;
    m_order_isValid = false;

    m_sort_by_isSet = false;
    m_sort_by_isValid = false;
}

void OAIDocuments::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDocuments::fromJsonObject(QJsonObject json) {

    m_consent_id_isValid = ::OpenAPI::fromJsonValue(m_consent_id, json[QString("consentId")]);
    m_consent_id_isSet = !json[QString("consentId")].isNull() && m_consent_id_isValid;

    m_dataset_id_isValid = ::OpenAPI::fromJsonValue(m_dataset_id, json[QString("datasetId")]);
    m_dataset_id_isSet = !json[QString("datasetId")].isNull() && m_dataset_id_isValid;

    m_documents_isValid = ::OpenAPI::fromJsonValue(m_documents, json[QString("documents")]);
    m_documents_isSet = !json[QString("documents")].isNull() && m_documents_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;

    m_order_isValid = ::OpenAPI::fromJsonValue(m_order, json[QString("order")]);
    m_order_isSet = !json[QString("order")].isNull() && m_order_isValid;

    m_sort_by_isValid = ::OpenAPI::fromJsonValue(m_sort_by, json[QString("sortBy")]);
    m_sort_by_isSet = !json[QString("sortBy")].isNull() && m_sort_by_isValid;
}

QString OAIDocuments::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDocuments::asJsonObject() const {
    QJsonObject obj;
    if (m_consent_id.size() > 0) {
        obj.insert(QString("consentId"), ::OpenAPI::toJsonValue(m_consent_id));
    }
    if (m_dataset_id.size() > 0) {
        obj.insert(QString("datasetId"), ::OpenAPI::toJsonValue(m_dataset_id));
    }
    if (m_documents.size() > 0) {
        obj.insert(QString("documents"), ::OpenAPI::toJsonValue(m_documents));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_order_isSet) {
        obj.insert(QString("order"), ::OpenAPI::toJsonValue(m_order));
    }
    if (m_sort_by_isSet) {
        obj.insert(QString("sortBy"), ::OpenAPI::toJsonValue(m_sort_by));
    }
    return obj;
}

QList<QString> OAIDocuments::getConsentId() const {
    return m_consent_id;
}
void OAIDocuments::setConsentId(const QList<QString> &consent_id) {
    m_consent_id = consent_id;
    m_consent_id_isSet = true;
}

bool OAIDocuments::is_consent_id_Set() const{
    return m_consent_id_isSet;
}

bool OAIDocuments::is_consent_id_Valid() const{
    return m_consent_id_isValid;
}

QList<QString> OAIDocuments::getDatasetId() const {
    return m_dataset_id;
}
void OAIDocuments::setDatasetId(const QList<QString> &dataset_id) {
    m_dataset_id = dataset_id;
    m_dataset_id_isSet = true;
}

bool OAIDocuments::is_dataset_id_Set() const{
    return m_dataset_id_isSet;
}

bool OAIDocuments::is_dataset_id_Valid() const{
    return m_dataset_id_isValid;
}

QList<OAIDocuments_documents_inner> OAIDocuments::getDocuments() const {
    return m_documents;
}
void OAIDocuments::setDocuments(const QList<OAIDocuments_documents_inner> &documents) {
    m_documents = documents;
    m_documents_isSet = true;
}

bool OAIDocuments::is_documents_Set() const{
    return m_documents_isSet;
}

bool OAIDocuments::is_documents_Valid() const{
    return m_documents_isValid;
}

QString OAIDocuments::getNextToken() const {
    return m_next_token;
}
void OAIDocuments::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIDocuments::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIDocuments::is_next_token_Valid() const{
    return m_next_token_isValid;
}

QString OAIDocuments::getOrder() const {
    return m_order;
}
void OAIDocuments::setOrder(const QString &order) {
    m_order = order;
    m_order_isSet = true;
}

bool OAIDocuments::is_order_Set() const{
    return m_order_isSet;
}

bool OAIDocuments::is_order_Valid() const{
    return m_order_isValid;
}

QString OAIDocuments::getSortBy() const {
    return m_sort_by;
}
void OAIDocuments::setSortBy(const QString &sort_by) {
    m_sort_by = sort_by;
    m_sort_by_isSet = true;
}

bool OAIDocuments::is_sort_by_Set() const{
    return m_sort_by_isSet;
}

bool OAIDocuments::is_sort_by_Valid() const{
    return m_sort_by_isValid;
}

bool OAIDocuments::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_consent_id.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataset_id.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_documents.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_by_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDocuments::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_documents_isValid && m_next_token_isValid && true;
}

} // namespace OpenAPI
