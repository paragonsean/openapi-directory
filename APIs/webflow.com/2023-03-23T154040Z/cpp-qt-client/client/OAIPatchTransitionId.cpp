/**
 * Lucidtech API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-03-23T15:40:40Z
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPatchTransitionId.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPatchTransitionId::OAIPatchTransitionId(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPatchTransitionId::OAIPatchTransitionId() {
    this->initializeModel();
}

OAIPatchTransitionId::~OAIPatchTransitionId() {}

void OAIPatchTransitionId::initializeModel() {

    m_assets_isSet = false;
    m_assets_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_environment_isSet = false;
    m_environment_isValid = false;

    m_environment_secrets_isSet = false;
    m_environment_secrets_isValid = false;

    m_input_json_schema_isSet = false;
    m_input_json_schema_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_output_json_schema_isSet = false;
    m_output_json_schema_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;
}

void OAIPatchTransitionId::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPatchTransitionId::fromJsonObject(QJsonObject json) {

    m_assets_isValid = ::OpenAPI::fromJsonValue(m_assets, json[QString("assets")]);
    m_assets_isSet = !json[QString("assets")].isNull() && m_assets_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_environment_isValid = ::OpenAPI::fromJsonValue(m_environment, json[QString("environment")]);
    m_environment_isSet = !json[QString("environment")].isNull() && m_environment_isValid;

    m_environment_secrets_isValid = ::OpenAPI::fromJsonValue(m_environment_secrets, json[QString("environmentSecrets")]);
    m_environment_secrets_isSet = !json[QString("environmentSecrets")].isNull() && m_environment_secrets_isValid;

    m_input_json_schema_isValid = ::OpenAPI::fromJsonValue(m_input_json_schema, json[QString("inputJsonSchema")]);
    m_input_json_schema_isSet = !json[QString("inputJsonSchema")].isNull() && m_input_json_schema_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_output_json_schema_isValid = ::OpenAPI::fromJsonValue(m_output_json_schema, json[QString("outputJsonSchema")]);
    m_output_json_schema_isSet = !json[QString("outputJsonSchema")].isNull() && m_output_json_schema_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;
}

QString OAIPatchTransitionId::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPatchTransitionId::asJsonObject() const {
    QJsonObject obj;
    if (m_assets.isSet()) {
        obj.insert(QString("assets"), ::OpenAPI::toJsonValue(m_assets));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_environment.size() > 0) {
        obj.insert(QString("environment"), ::OpenAPI::toJsonValue(m_environment));
    }
    if (m_environment_secrets.size() > 0) {
        obj.insert(QString("environmentSecrets"), ::OpenAPI::toJsonValue(m_environment_secrets));
    }
    if (m_input_json_schema_isSet) {
        obj.insert(QString("inputJsonSchema"), ::OpenAPI::toJsonValue(m_input_json_schema));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_output_json_schema_isSet) {
        obj.insert(QString("outputJsonSchema"), ::OpenAPI::toJsonValue(m_output_json_schema));
    }
    if (m_parameters.isSet()) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    return obj;
}

OAIPatchTransitionId_assets OAIPatchTransitionId::getAssets() const {
    return m_assets;
}
void OAIPatchTransitionId::setAssets(const OAIPatchTransitionId_assets &assets) {
    m_assets = assets;
    m_assets_isSet = true;
}

bool OAIPatchTransitionId::is_assets_Set() const{
    return m_assets_isSet;
}

bool OAIPatchTransitionId::is_assets_Valid() const{
    return m_assets_isValid;
}

QString OAIPatchTransitionId::getDescription() const {
    return m_description;
}
void OAIPatchTransitionId::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPatchTransitionId::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPatchTransitionId::is_description_Valid() const{
    return m_description_isValid;
}

QMap<QString, QString> OAIPatchTransitionId::getEnvironment() const {
    return m_environment;
}
void OAIPatchTransitionId::setEnvironment(const QMap<QString, QString> &environment) {
    m_environment = environment;
    m_environment_isSet = true;
}

bool OAIPatchTransitionId::is_environment_Set() const{
    return m_environment_isSet;
}

bool OAIPatchTransitionId::is_environment_Valid() const{
    return m_environment_isValid;
}

QList<QString> OAIPatchTransitionId::getEnvironmentSecrets() const {
    return m_environment_secrets;
}
void OAIPatchTransitionId::setEnvironmentSecrets(const QList<QString> &environment_secrets) {
    m_environment_secrets = environment_secrets;
    m_environment_secrets_isSet = true;
}

bool OAIPatchTransitionId::is_environment_secrets_Set() const{
    return m_environment_secrets_isSet;
}

bool OAIPatchTransitionId::is_environment_secrets_Valid() const{
    return m_environment_secrets_isValid;
}

OAIObject OAIPatchTransitionId::getInputJsonSchema() const {
    return m_input_json_schema;
}
void OAIPatchTransitionId::setInputJsonSchema(const OAIObject &input_json_schema) {
    m_input_json_schema = input_json_schema;
    m_input_json_schema_isSet = true;
}

bool OAIPatchTransitionId::is_input_json_schema_Set() const{
    return m_input_json_schema_isSet;
}

bool OAIPatchTransitionId::is_input_json_schema_Valid() const{
    return m_input_json_schema_isValid;
}

QString OAIPatchTransitionId::getName() const {
    return m_name;
}
void OAIPatchTransitionId::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPatchTransitionId::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPatchTransitionId::is_name_Valid() const{
    return m_name_isValid;
}

OAIObject OAIPatchTransitionId::getOutputJsonSchema() const {
    return m_output_json_schema;
}
void OAIPatchTransitionId::setOutputJsonSchema(const OAIObject &output_json_schema) {
    m_output_json_schema = output_json_schema;
    m_output_json_schema_isSet = true;
}

bool OAIPatchTransitionId::is_output_json_schema_Set() const{
    return m_output_json_schema_isSet;
}

bool OAIPatchTransitionId::is_output_json_schema_Valid() const{
    return m_output_json_schema_isValid;
}

OAIPatchTransitionId_parameters OAIPatchTransitionId::getParameters() const {
    return m_parameters;
}
void OAIPatchTransitionId::setParameters(const OAIPatchTransitionId_parameters &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIPatchTransitionId::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIPatchTransitionId::is_parameters_Valid() const{
    return m_parameters_isValid;
}

bool OAIPatchTransitionId::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_secrets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_json_schema_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_json_schema_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPatchTransitionId::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
