/**
 * Lucidtech API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-03-23T15:40:40Z
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppClient.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAppClient::OAIAppClient(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAppClient::OAIAppClient() {
    this->initializeModel();
}

OAIAppClient::~OAIAppClient() {}

void OAIAppClient::initializeModel() {

    m_app_client_id_isSet = false;
    m_app_client_id_isValid = false;

    m_callback_urls_isSet = false;
    m_callback_urls_isValid = false;

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_client_secret_isSet = false;
    m_client_secret_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_default_login_url_isSet = false;
    m_default_login_url_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_has_secret_isSet = false;
    m_has_secret_isValid = false;

    m_login_urls_isSet = false;
    m_login_urls_isValid = false;

    m_logout_urls_isSet = false;
    m_logout_urls_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_updated_by_isSet = false;
    m_updated_by_isValid = false;

    m_updated_time_isSet = false;
    m_updated_time_isValid = false;
}

void OAIAppClient::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAppClient::fromJsonObject(QJsonObject json) {

    m_app_client_id_isValid = ::OpenAPI::fromJsonValue(m_app_client_id, json[QString("appClientId")]);
    m_app_client_id_isSet = !json[QString("appClientId")].isNull() && m_app_client_id_isValid;

    m_callback_urls_isValid = ::OpenAPI::fromJsonValue(m_callback_urls, json[QString("callbackUrls")]);
    m_callback_urls_isSet = !json[QString("callbackUrls")].isNull() && m_callback_urls_isValid;

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("clientId")]);
    m_client_id_isSet = !json[QString("clientId")].isNull() && m_client_id_isValid;

    m_client_secret_isValid = ::OpenAPI::fromJsonValue(m_client_secret, json[QString("clientSecret")]);
    m_client_secret_isSet = !json[QString("clientSecret")].isNull() && m_client_secret_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("createdBy")]);
    m_created_by_isSet = !json[QString("createdBy")].isNull() && m_created_by_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("createdTime")]);
    m_created_time_isSet = !json[QString("createdTime")].isNull() && m_created_time_isValid;

    m_default_login_url_isValid = ::OpenAPI::fromJsonValue(m_default_login_url, json[QString("defaultLoginUrl")]);
    m_default_login_url_isSet = !json[QString("defaultLoginUrl")].isNull() && m_default_login_url_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_has_secret_isValid = ::OpenAPI::fromJsonValue(m_has_secret, json[QString("hasSecret")]);
    m_has_secret_isSet = !json[QString("hasSecret")].isNull() && m_has_secret_isValid;

    m_login_urls_isValid = ::OpenAPI::fromJsonValue(m_login_urls, json[QString("loginUrls")]);
    m_login_urls_isSet = !json[QString("loginUrls")].isNull() && m_login_urls_isValid;

    m_logout_urls_isValid = ::OpenAPI::fromJsonValue(m_logout_urls, json[QString("logoutUrls")]);
    m_logout_urls_isSet = !json[QString("logoutUrls")].isNull() && m_logout_urls_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_updated_by_isValid = ::OpenAPI::fromJsonValue(m_updated_by, json[QString("updatedBy")]);
    m_updated_by_isSet = !json[QString("updatedBy")].isNull() && m_updated_by_isValid;

    m_updated_time_isValid = ::OpenAPI::fromJsonValue(m_updated_time, json[QString("updatedTime")]);
    m_updated_time_isSet = !json[QString("updatedTime")].isNull() && m_updated_time_isValid;
}

QString OAIAppClient::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAppClient::asJsonObject() const {
    QJsonObject obj;
    if (m_app_client_id_isSet) {
        obj.insert(QString("appClientId"), ::OpenAPI::toJsonValue(m_app_client_id));
    }
    if (m_callback_urls.size() > 0) {
        obj.insert(QString("callbackUrls"), ::OpenAPI::toJsonValue(m_callback_urls));
    }
    if (m_client_id_isSet) {
        obj.insert(QString("clientId"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_client_secret_isSet) {
        obj.insert(QString("clientSecret"), ::OpenAPI::toJsonValue(m_client_secret));
    }
    if (m_created_by_isSet) {
        obj.insert(QString("createdBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("createdTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_default_login_url_isSet) {
        obj.insert(QString("defaultLoginUrl"), ::OpenAPI::toJsonValue(m_default_login_url));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_has_secret_isSet) {
        obj.insert(QString("hasSecret"), ::OpenAPI::toJsonValue(m_has_secret));
    }
    if (m_login_urls.size() > 0) {
        obj.insert(QString("loginUrls"), ::OpenAPI::toJsonValue(m_login_urls));
    }
    if (m_logout_urls.size() > 0) {
        obj.insert(QString("logoutUrls"), ::OpenAPI::toJsonValue(m_logout_urls));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_updated_by_isSet) {
        obj.insert(QString("updatedBy"), ::OpenAPI::toJsonValue(m_updated_by));
    }
    if (m_updated_time_isSet) {
        obj.insert(QString("updatedTime"), ::OpenAPI::toJsonValue(m_updated_time));
    }
    return obj;
}

QString OAIAppClient::getAppClientId() const {
    return m_app_client_id;
}
void OAIAppClient::setAppClientId(const QString &app_client_id) {
    m_app_client_id = app_client_id;
    m_app_client_id_isSet = true;
}

bool OAIAppClient::is_app_client_id_Set() const{
    return m_app_client_id_isSet;
}

bool OAIAppClient::is_app_client_id_Valid() const{
    return m_app_client_id_isValid;
}

QList<QString> OAIAppClient::getCallbackUrls() const {
    return m_callback_urls;
}
void OAIAppClient::setCallbackUrls(const QList<QString> &callback_urls) {
    m_callback_urls = callback_urls;
    m_callback_urls_isSet = true;
}

bool OAIAppClient::is_callback_urls_Set() const{
    return m_callback_urls_isSet;
}

bool OAIAppClient::is_callback_urls_Valid() const{
    return m_callback_urls_isValid;
}

QString OAIAppClient::getClientId() const {
    return m_client_id;
}
void OAIAppClient::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIAppClient::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIAppClient::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAIAppClient::getClientSecret() const {
    return m_client_secret;
}
void OAIAppClient::setClientSecret(const QString &client_secret) {
    m_client_secret = client_secret;
    m_client_secret_isSet = true;
}

bool OAIAppClient::is_client_secret_Set() const{
    return m_client_secret_isSet;
}

bool OAIAppClient::is_client_secret_Valid() const{
    return m_client_secret_isValid;
}

QString OAIAppClient::getCreatedBy() const {
    return m_created_by;
}
void OAIAppClient::setCreatedBy(const QString &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIAppClient::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIAppClient::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QString OAIAppClient::getCreatedTime() const {
    return m_created_time;
}
void OAIAppClient::setCreatedTime(const QString &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIAppClient::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIAppClient::is_created_time_Valid() const{
    return m_created_time_isValid;
}

QString OAIAppClient::getDefaultLoginUrl() const {
    return m_default_login_url;
}
void OAIAppClient::setDefaultLoginUrl(const QString &default_login_url) {
    m_default_login_url = default_login_url;
    m_default_login_url_isSet = true;
}

bool OAIAppClient::is_default_login_url_Set() const{
    return m_default_login_url_isSet;
}

bool OAIAppClient::is_default_login_url_Valid() const{
    return m_default_login_url_isValid;
}

QString OAIAppClient::getDescription() const {
    return m_description;
}
void OAIAppClient::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAppClient::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAppClient::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIAppClient::isHasSecret() const {
    return m_has_secret;
}
void OAIAppClient::setHasSecret(const bool &has_secret) {
    m_has_secret = has_secret;
    m_has_secret_isSet = true;
}

bool OAIAppClient::is_has_secret_Set() const{
    return m_has_secret_isSet;
}

bool OAIAppClient::is_has_secret_Valid() const{
    return m_has_secret_isValid;
}

QList<QString> OAIAppClient::getLoginUrls() const {
    return m_login_urls;
}
void OAIAppClient::setLoginUrls(const QList<QString> &login_urls) {
    m_login_urls = login_urls;
    m_login_urls_isSet = true;
}

bool OAIAppClient::is_login_urls_Set() const{
    return m_login_urls_isSet;
}

bool OAIAppClient::is_login_urls_Valid() const{
    return m_login_urls_isValid;
}

QList<QString> OAIAppClient::getLogoutUrls() const {
    return m_logout_urls;
}
void OAIAppClient::setLogoutUrls(const QList<QString> &logout_urls) {
    m_logout_urls = logout_urls;
    m_logout_urls_isSet = true;
}

bool OAIAppClient::is_logout_urls_Set() const{
    return m_logout_urls_isSet;
}

bool OAIAppClient::is_logout_urls_Valid() const{
    return m_logout_urls_isValid;
}

QString OAIAppClient::getName() const {
    return m_name;
}
void OAIAppClient::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAppClient::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAppClient::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAppClient::getUpdatedBy() const {
    return m_updated_by;
}
void OAIAppClient::setUpdatedBy(const QString &updated_by) {
    m_updated_by = updated_by;
    m_updated_by_isSet = true;
}

bool OAIAppClient::is_updated_by_Set() const{
    return m_updated_by_isSet;
}

bool OAIAppClient::is_updated_by_Valid() const{
    return m_updated_by_isValid;
}

QString OAIAppClient::getUpdatedTime() const {
    return m_updated_time;
}
void OAIAppClient::setUpdatedTime(const QString &updated_time) {
    m_updated_time = updated_time;
    m_updated_time_isSet = true;
}

bool OAIAppClient::is_updated_time_Set() const{
    return m_updated_time_isSet;
}

bool OAIAppClient::is_updated_time_Valid() const{
    return m_updated_time_isValid;
}

bool OAIAppClient::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_callback_urls.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_login_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_login_urls.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_logout_urls.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAppClient::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_app_client_id_isValid && m_callback_urls_isValid && m_client_id_isValid && m_created_by_isValid && m_created_time_isValid && m_default_login_url_isValid && m_description_isValid && m_has_secret_isValid && m_login_urls_isValid && m_logout_urls_isValid && m_name_isValid && m_updated_by_isValid && m_updated_time_isValid && true;
}

} // namespace OpenAPI
