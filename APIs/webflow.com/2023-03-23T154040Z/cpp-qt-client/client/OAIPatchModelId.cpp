/**
 * Lucidtech API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-03-23T15:40:40Z
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPatchModelId.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPatchModelId::OAIPatchModelId(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPatchModelId::OAIPatchModelId() {
    this->initializeModel();
}

OAIPatchModelId::~OAIPatchModelId() {}

void OAIPatchModelId::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_field_config_isSet = false;
    m_field_config_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_postprocess_config_isSet = false;
    m_postprocess_config_isValid = false;

    m_preprocess_config_isSet = false;
    m_preprocess_config_isValid = false;

    m_training_id_isSet = false;
    m_training_id_isValid = false;
}

void OAIPatchModelId::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPatchModelId::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_field_config_isValid = ::OpenAPI::fromJsonValue(m_field_config, json[QString("fieldConfig")]);
    m_field_config_isSet = !json[QString("fieldConfig")].isNull() && m_field_config_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_postprocess_config_isValid = ::OpenAPI::fromJsonValue(m_postprocess_config, json[QString("postprocessConfig")]);
    m_postprocess_config_isSet = !json[QString("postprocessConfig")].isNull() && m_postprocess_config_isValid;

    m_preprocess_config_isValid = ::OpenAPI::fromJsonValue(m_preprocess_config, json[QString("preprocessConfig")]);
    m_preprocess_config_isSet = !json[QString("preprocessConfig")].isNull() && m_preprocess_config_isValid;

    m_training_id_isValid = ::OpenAPI::fromJsonValue(m_training_id, json[QString("trainingId")]);
    m_training_id_isSet = !json[QString("trainingId")].isNull() && m_training_id_isValid;
}

QString OAIPatchModelId::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPatchModelId::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_field_config.size() > 0) {
        obj.insert(QString("fieldConfig"), ::OpenAPI::toJsonValue(m_field_config));
    }
    if (m_metadata_isSet) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_postprocess_config.isSet()) {
        obj.insert(QString("postprocessConfig"), ::OpenAPI::toJsonValue(m_postprocess_config));
    }
    if (m_preprocess_config.isSet()) {
        obj.insert(QString("preprocessConfig"), ::OpenAPI::toJsonValue(m_preprocess_config));
    }
    if (m_training_id_isSet) {
        obj.insert(QString("trainingId"), ::OpenAPI::toJsonValue(m_training_id));
    }
    return obj;
}

QString OAIPatchModelId::getDescription() const {
    return m_description;
}
void OAIPatchModelId::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPatchModelId::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPatchModelId::is_description_Valid() const{
    return m_description_isValid;
}

QMap<QString, OAIModel_fieldConfig_value> OAIPatchModelId::getFieldConfig() const {
    return m_field_config;
}
void OAIPatchModelId::setFieldConfig(const QMap<QString, OAIModel_fieldConfig_value> &field_config) {
    m_field_config = field_config;
    m_field_config_isSet = true;
}

bool OAIPatchModelId::is_field_config_Set() const{
    return m_field_config_isSet;
}

bool OAIPatchModelId::is_field_config_Valid() const{
    return m_field_config_isValid;
}

OAIObject OAIPatchModelId::getMetadata() const {
    return m_metadata;
}
void OAIPatchModelId::setMetadata(const OAIObject &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIPatchModelId::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIPatchModelId::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIPatchModelId::getName() const {
    return m_name;
}
void OAIPatchModelId::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPatchModelId::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPatchModelId::is_name_Valid() const{
    return m_name_isValid;
}

OAIModel_postprocessConfig OAIPatchModelId::getPostprocessConfig() const {
    return m_postprocess_config;
}
void OAIPatchModelId::setPostprocessConfig(const OAIModel_postprocessConfig &postprocess_config) {
    m_postprocess_config = postprocess_config;
    m_postprocess_config_isSet = true;
}

bool OAIPatchModelId::is_postprocess_config_Set() const{
    return m_postprocess_config_isSet;
}

bool OAIPatchModelId::is_postprocess_config_Valid() const{
    return m_postprocess_config_isValid;
}

OAIModel_preprocessConfig OAIPatchModelId::getPreprocessConfig() const {
    return m_preprocess_config;
}
void OAIPatchModelId::setPreprocessConfig(const OAIModel_preprocessConfig &preprocess_config) {
    m_preprocess_config = preprocess_config;
    m_preprocess_config_isSet = true;
}

bool OAIPatchModelId::is_preprocess_config_Set() const{
    return m_preprocess_config_isSet;
}

bool OAIPatchModelId::is_preprocess_config_Valid() const{
    return m_preprocess_config_isValid;
}

QString OAIPatchModelId::getTrainingId() const {
    return m_training_id;
}
void OAIPatchModelId::setTrainingId(const QString &training_id) {
    m_training_id = training_id;
    m_training_id_isSet = true;
}

bool OAIPatchModelId::is_training_id_Set() const{
    return m_training_id_isSet;
}

bool OAIPatchModelId::is_training_id_Valid() const{
    return m_training_id_isValid;
}

bool OAIPatchModelId::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_config.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postprocess_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_preprocess_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_training_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPatchModelId::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
