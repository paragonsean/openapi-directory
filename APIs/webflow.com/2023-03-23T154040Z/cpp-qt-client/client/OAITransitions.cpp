/**
 * Lucidtech API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-03-23T15:40:40Z
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransitions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransitions::OAITransitions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransitions::OAITransitions() {
    this->initializeModel();
}

OAITransitions::~OAITransitions() {}

void OAITransitions::initializeModel() {

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_transition_type_isSet = false;
    m_transition_type_isValid = false;

    m_transitions_isSet = false;
    m_transitions_isValid = false;
}

void OAITransitions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransitions::fromJsonObject(QJsonObject json) {

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;

    m_transition_type_isValid = ::OpenAPI::fromJsonValue(m_transition_type, json[QString("transitionType")]);
    m_transition_type_isSet = !json[QString("transitionType")].isNull() && m_transition_type_isValid;

    m_transitions_isValid = ::OpenAPI::fromJsonValue(m_transitions, json[QString("transitions")]);
    m_transitions_isSet = !json[QString("transitions")].isNull() && m_transitions_isValid;
}

QString OAITransitions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransitions::asJsonObject() const {
    QJsonObject obj;
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_transition_type.size() > 0) {
        obj.insert(QString("transitionType"), ::OpenAPI::toJsonValue(m_transition_type));
    }
    if (m_transitions.size() > 0) {
        obj.insert(QString("transitions"), ::OpenAPI::toJsonValue(m_transitions));
    }
    return obj;
}

QString OAITransitions::getNextToken() const {
    return m_next_token;
}
void OAITransitions::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAITransitions::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAITransitions::is_next_token_Valid() const{
    return m_next_token_isValid;
}

QList<QString> OAITransitions::getTransitionType() const {
    return m_transition_type;
}
void OAITransitions::setTransitionType(const QList<QString> &transition_type) {
    m_transition_type = transition_type;
    m_transition_type_isSet = true;
}

bool OAITransitions::is_transition_type_Set() const{
    return m_transition_type_isSet;
}

bool OAITransitions::is_transition_type_Valid() const{
    return m_transition_type_isValid;
}

QList<OAITransitions_transitions_inner> OAITransitions::getTransitions() const {
    return m_transitions;
}
void OAITransitions::setTransitions(const QList<OAITransitions_transitions_inner> &transitions) {
    m_transitions = transitions;
    m_transitions_isSet = true;
}

bool OAITransitions::is_transitions_Set() const{
    return m_transitions_isSet;
}

bool OAITransitions::is_transitions_Valid() const{
    return m_transitions_isValid;
}

bool OAITransitions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transition_type.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_transitions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransitions::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_next_token_isValid && m_transitions_isValid && true;
}

} // namespace OpenAPI
