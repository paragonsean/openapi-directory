# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PostSecrets(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data: object=None, description: str=None, name: str=None):
        """PostSecrets - a model defined in OpenAPI

        :param data: The data of this PostSecrets.
        :param description: The description of this PostSecrets.
        :param name: The name of this PostSecrets.
        """
        self.openapi_types = {
            'data': object,
            'description': str,
            'name': str
        }

        self.attribute_map = {
            'data': 'data',
            'description': 'description',
            'name': 'name'
        }

        self._data = data
        self._description = description
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PostSecrets':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PostSecrets of this PostSecrets.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data(self):
        """Gets the data of this PostSecrets.


        :return: The data of this PostSecrets.
        :rtype: object
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this PostSecrets.


        :param data: The data of this PostSecrets.
        :type data: object
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")

        self._data = data

    @property
    def description(self):
        """Gets the description of this PostSecrets.


        :return: The description of this PostSecrets.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PostSecrets.


        :param description: The description of this PostSecrets.
        :type description: str
        """
        if description is not None and len(description) > 4096:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `4096`")

        self._description = description

    @property
    def name(self):
        """Gets the name of this PostSecrets.


        :return: The name of this PostSecrets.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PostSecrets.


        :param name: The name of this PostSecrets.
        :type name: str
        """
        if name is not None and len(name) > 4096:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `4096`")

        self._name = name
