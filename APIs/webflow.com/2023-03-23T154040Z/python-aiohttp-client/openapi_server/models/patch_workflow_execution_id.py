# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.logs_transition_id import LogsTransitionId
from openapi_server import util


class PatchWorkflowExecutionId(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, next_transition_id: LogsTransitionId=None):
        """PatchWorkflowExecutionId - a model defined in OpenAPI

        :param next_transition_id: The next_transition_id of this PatchWorkflowExecutionId.
        """
        self.openapi_types = {
            'next_transition_id': LogsTransitionId
        }

        self.attribute_map = {
            'next_transition_id': 'nextTransitionId'
        }

        self._next_transition_id = next_transition_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PatchWorkflowExecutionId':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PatchWorkflowExecutionId of this PatchWorkflowExecutionId.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def next_transition_id(self):
        """Gets the next_transition_id of this PatchWorkflowExecutionId.


        :return: The next_transition_id of this PatchWorkflowExecutionId.
        :rtype: LogsTransitionId
        """
        return self._next_transition_id

    @next_transition_id.setter
    def next_transition_id(self, next_transition_id):
        """Sets the next_transition_id of this PatchWorkflowExecutionId.


        :param next_transition_id: The next_transition_id of this PatchWorkflowExecutionId.
        :type next_transition_id: LogsTransitionId
        """
        if next_transition_id is None:
            raise ValueError("Invalid value for `next_transition_id`, must not be `None`")

        self._next_transition_id = next_transition_id
