# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.trainings_trainings_inner import TrainingsTrainingsInner
from openapi_server import util


class Trainings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, next_token: str=None, status: List[str]=None, trainings: List[TrainingsTrainingsInner]=None):
        """Trainings - a model defined in OpenAPI

        :param next_token: The next_token of this Trainings.
        :param status: The status of this Trainings.
        :param trainings: The trainings of this Trainings.
        """
        self.openapi_types = {
            'next_token': str,
            'status': List[str],
            'trainings': List[TrainingsTrainingsInner]
        }

        self.attribute_map = {
            'next_token': 'nextToken',
            'status': 'status',
            'trainings': 'trainings'
        }

        self._next_token = next_token
        self._status = status
        self._trainings = trainings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Trainings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Trainings of this Trainings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def next_token(self):
        """Gets the next_token of this Trainings.


        :return: The next_token of this Trainings.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this Trainings.


        :param next_token: The next_token of this Trainings.
        :type next_token: str
        """
        if next_token is None:
            raise ValueError("Invalid value for `next_token`, must not be `None`")
        if next_token is not None and len(next_token) > 4096:
            raise ValueError("Invalid value for `next_token`, length must be less than or equal to `4096`")

        self._next_token = next_token

    @property
    def status(self):
        """Gets the status of this Trainings.


        :return: The status of this Trainings.
        :rtype: List[str]
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Trainings.


        :param status: The status of this Trainings.
        :type status: List[str]
        """
        allowed_values = ["waiting-for-approval", "pending", "running", "succeeded", "failed", "cancelled"]  # noqa: E501
        if not set(status).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `status` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(status) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._status = status

    @property
    def trainings(self):
        """Gets the trainings of this Trainings.


        :return: The trainings of this Trainings.
        :rtype: List[TrainingsTrainingsInner]
        """
        return self._trainings

    @trainings.setter
    def trainings(self, trainings):
        """Sets the trainings of this Trainings.


        :param trainings: The trainings of this Trainings.
        :type trainings: List[TrainingsTrainingsInner]
        """
        if trainings is None:
            raise ValueError("Invalid value for `trainings`, must not be `None`")

        self._trainings = trainings
