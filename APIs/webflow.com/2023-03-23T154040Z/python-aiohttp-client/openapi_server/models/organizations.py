# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.organizations_organizations_inner import OrganizationsOrganizationsInner
from openapi_server import util


class Organizations(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, next_token: str=None, organizations: List[OrganizationsOrganizationsInner]=None):
        """Organizations - a model defined in OpenAPI

        :param next_token: The next_token of this Organizations.
        :param organizations: The organizations of this Organizations.
        """
        self.openapi_types = {
            'next_token': str,
            'organizations': List[OrganizationsOrganizationsInner]
        }

        self.attribute_map = {
            'next_token': 'nextToken',
            'organizations': 'organizations'
        }

        self._next_token = next_token
        self._organizations = organizations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Organizations':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Organizations of this Organizations.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def next_token(self):
        """Gets the next_token of this Organizations.


        :return: The next_token of this Organizations.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this Organizations.


        :param next_token: The next_token of this Organizations.
        :type next_token: str
        """
        if next_token is None:
            raise ValueError("Invalid value for `next_token`, must not be `None`")
        if next_token is not None and len(next_token) > 4096:
            raise ValueError("Invalid value for `next_token`, length must be less than or equal to `4096`")

        self._next_token = next_token

    @property
    def organizations(self):
        """Gets the organizations of this Organizations.


        :return: The organizations of this Organizations.
        :rtype: List[OrganizationsOrganizationsInner]
        """
        return self._organizations

    @organizations.setter
    def organizations(self, organizations):
        """Sets the organizations of this Organizations.


        :param organizations: The organizations of this Organizations.
        :type organizations: List[OrganizationsOrganizationsInner]
        """
        if organizations is None:
            raise ValueError("Invalid value for `organizations`, must not be `None`")

        self._organizations = organizations
