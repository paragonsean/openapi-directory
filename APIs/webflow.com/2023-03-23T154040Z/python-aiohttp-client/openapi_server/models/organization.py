# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class Organization(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_id: str=None, deployments_allowed: object=None, deployments_created: object=None, description: str=None, document_retention_in_days: int=None, monthly_number_of_active_models_used: int=None, monthly_number_of_data_bundles_allowed: int=None, monthly_number_of_data_bundles_created: int=None, monthly_number_of_documents_allowed: int=None, monthly_number_of_documents_created: int=None, monthly_number_of_field_predictions_allowed: int=None, monthly_number_of_field_predictions_used: int=None, monthly_number_of_gpu_hours_used: float=None, monthly_number_of_model_deployment_units_used: int=None, monthly_number_of_predictions_allowed: int=None, monthly_number_of_predictions_created: int=None, monthly_number_of_trainings_allowed: int=None, monthly_number_of_trainings_created: int=None, monthly_number_of_transition_executions_allowed: int=None, monthly_number_of_transition_executions_created: int=None, monthly_number_of_workflow_executions_allowed: int=None, monthly_number_of_workflow_executions_created: int=None, monthly_usage_summary: object=None, name: str=None, number_of_app_clients_allowed: int=None, number_of_app_clients_created: int=None, number_of_assets_allowed: int=None, number_of_assets_created: int=None, number_of_datasets_allowed: int=None, number_of_datasets_created: int=None, number_of_models_allowed: int=None, number_of_models_created: int=None, number_of_secrets_allowed: int=None, number_of_secrets_created: int=None, number_of_transitions_allowed: int=None, number_of_transitions_created: int=None, number_of_users_allowed: int=None, number_of_users_created: int=None, number_of_workflows_allowed: int=None, number_of_workflows_created: int=None, organization_id: str=None, payment_method_id: str=None, plan_id: str=None, updated_by: str=None, updated_time: str=None):
        """Organization - a model defined in OpenAPI

        :param client_id: The client_id of this Organization.
        :param deployments_allowed: The deployments_allowed of this Organization.
        :param deployments_created: The deployments_created of this Organization.
        :param description: The description of this Organization.
        :param document_retention_in_days: The document_retention_in_days of this Organization.
        :param monthly_number_of_active_models_used: The monthly_number_of_active_models_used of this Organization.
        :param monthly_number_of_data_bundles_allowed: The monthly_number_of_data_bundles_allowed of this Organization.
        :param monthly_number_of_data_bundles_created: The monthly_number_of_data_bundles_created of this Organization.
        :param monthly_number_of_documents_allowed: The monthly_number_of_documents_allowed of this Organization.
        :param monthly_number_of_documents_created: The monthly_number_of_documents_created of this Organization.
        :param monthly_number_of_field_predictions_allowed: The monthly_number_of_field_predictions_allowed of this Organization.
        :param monthly_number_of_field_predictions_used: The monthly_number_of_field_predictions_used of this Organization.
        :param monthly_number_of_gpu_hours_used: The monthly_number_of_gpu_hours_used of this Organization.
        :param monthly_number_of_model_deployment_units_used: The monthly_number_of_model_deployment_units_used of this Organization.
        :param monthly_number_of_predictions_allowed: The monthly_number_of_predictions_allowed of this Organization.
        :param monthly_number_of_predictions_created: The monthly_number_of_predictions_created of this Organization.
        :param monthly_number_of_trainings_allowed: The monthly_number_of_trainings_allowed of this Organization.
        :param monthly_number_of_trainings_created: The monthly_number_of_trainings_created of this Organization.
        :param monthly_number_of_transition_executions_allowed: The monthly_number_of_transition_executions_allowed of this Organization.
        :param monthly_number_of_transition_executions_created: The monthly_number_of_transition_executions_created of this Organization.
        :param monthly_number_of_workflow_executions_allowed: The monthly_number_of_workflow_executions_allowed of this Organization.
        :param monthly_number_of_workflow_executions_created: The monthly_number_of_workflow_executions_created of this Organization.
        :param monthly_usage_summary: The monthly_usage_summary of this Organization.
        :param name: The name of this Organization.
        :param number_of_app_clients_allowed: The number_of_app_clients_allowed of this Organization.
        :param number_of_app_clients_created: The number_of_app_clients_created of this Organization.
        :param number_of_assets_allowed: The number_of_assets_allowed of this Organization.
        :param number_of_assets_created: The number_of_assets_created of this Organization.
        :param number_of_datasets_allowed: The number_of_datasets_allowed of this Organization.
        :param number_of_datasets_created: The number_of_datasets_created of this Organization.
        :param number_of_models_allowed: The number_of_models_allowed of this Organization.
        :param number_of_models_created: The number_of_models_created of this Organization.
        :param number_of_secrets_allowed: The number_of_secrets_allowed of this Organization.
        :param number_of_secrets_created: The number_of_secrets_created of this Organization.
        :param number_of_transitions_allowed: The number_of_transitions_allowed of this Organization.
        :param number_of_transitions_created: The number_of_transitions_created of this Organization.
        :param number_of_users_allowed: The number_of_users_allowed of this Organization.
        :param number_of_users_created: The number_of_users_created of this Organization.
        :param number_of_workflows_allowed: The number_of_workflows_allowed of this Organization.
        :param number_of_workflows_created: The number_of_workflows_created of this Organization.
        :param organization_id: The organization_id of this Organization.
        :param payment_method_id: The payment_method_id of this Organization.
        :param plan_id: The plan_id of this Organization.
        :param updated_by: The updated_by of this Organization.
        :param updated_time: The updated_time of this Organization.
        """
        self.openapi_types = {
            'client_id': str,
            'deployments_allowed': object,
            'deployments_created': object,
            'description': str,
            'document_retention_in_days': int,
            'monthly_number_of_active_models_used': int,
            'monthly_number_of_data_bundles_allowed': int,
            'monthly_number_of_data_bundles_created': int,
            'monthly_number_of_documents_allowed': int,
            'monthly_number_of_documents_created': int,
            'monthly_number_of_field_predictions_allowed': int,
            'monthly_number_of_field_predictions_used': int,
            'monthly_number_of_gpu_hours_used': float,
            'monthly_number_of_model_deployment_units_used': int,
            'monthly_number_of_predictions_allowed': int,
            'monthly_number_of_predictions_created': int,
            'monthly_number_of_trainings_allowed': int,
            'monthly_number_of_trainings_created': int,
            'monthly_number_of_transition_executions_allowed': int,
            'monthly_number_of_transition_executions_created': int,
            'monthly_number_of_workflow_executions_allowed': int,
            'monthly_number_of_workflow_executions_created': int,
            'monthly_usage_summary': object,
            'name': str,
            'number_of_app_clients_allowed': int,
            'number_of_app_clients_created': int,
            'number_of_assets_allowed': int,
            'number_of_assets_created': int,
            'number_of_datasets_allowed': int,
            'number_of_datasets_created': int,
            'number_of_models_allowed': int,
            'number_of_models_created': int,
            'number_of_secrets_allowed': int,
            'number_of_secrets_created': int,
            'number_of_transitions_allowed': int,
            'number_of_transitions_created': int,
            'number_of_users_allowed': int,
            'number_of_users_created': int,
            'number_of_workflows_allowed': int,
            'number_of_workflows_created': int,
            'organization_id': str,
            'payment_method_id': str,
            'plan_id': str,
            'updated_by': str,
            'updated_time': str
        }

        self.attribute_map = {
            'client_id': 'clientId',
            'deployments_allowed': 'deploymentsAllowed',
            'deployments_created': 'deploymentsCreated',
            'description': 'description',
            'document_retention_in_days': 'documentRetentionInDays',
            'monthly_number_of_active_models_used': 'monthlyNumberOfActiveModelsUsed',
            'monthly_number_of_data_bundles_allowed': 'monthlyNumberOfDataBundlesAllowed',
            'monthly_number_of_data_bundles_created': 'monthlyNumberOfDataBundlesCreated',
            'monthly_number_of_documents_allowed': 'monthlyNumberOfDocumentsAllowed',
            'monthly_number_of_documents_created': 'monthlyNumberOfDocumentsCreated',
            'monthly_number_of_field_predictions_allowed': 'monthlyNumberOfFieldPredictionsAllowed',
            'monthly_number_of_field_predictions_used': 'monthlyNumberOfFieldPredictionsUsed',
            'monthly_number_of_gpu_hours_used': 'monthlyNumberOfGpuHoursUsed',
            'monthly_number_of_model_deployment_units_used': 'monthlyNumberOfModelDeploymentUnitsUsed',
            'monthly_number_of_predictions_allowed': 'monthlyNumberOfPredictionsAllowed',
            'monthly_number_of_predictions_created': 'monthlyNumberOfPredictionsCreated',
            'monthly_number_of_trainings_allowed': 'monthlyNumberOfTrainingsAllowed',
            'monthly_number_of_trainings_created': 'monthlyNumberOfTrainingsCreated',
            'monthly_number_of_transition_executions_allowed': 'monthlyNumberOfTransitionExecutionsAllowed',
            'monthly_number_of_transition_executions_created': 'monthlyNumberOfTransitionExecutionsCreated',
            'monthly_number_of_workflow_executions_allowed': 'monthlyNumberOfWorkflowExecutionsAllowed',
            'monthly_number_of_workflow_executions_created': 'monthlyNumberOfWorkflowExecutionsCreated',
            'monthly_usage_summary': 'monthlyUsageSummary',
            'name': 'name',
            'number_of_app_clients_allowed': 'numberOfAppClientsAllowed',
            'number_of_app_clients_created': 'numberOfAppClientsCreated',
            'number_of_assets_allowed': 'numberOfAssetsAllowed',
            'number_of_assets_created': 'numberOfAssetsCreated',
            'number_of_datasets_allowed': 'numberOfDatasetsAllowed',
            'number_of_datasets_created': 'numberOfDatasetsCreated',
            'number_of_models_allowed': 'numberOfModelsAllowed',
            'number_of_models_created': 'numberOfModelsCreated',
            'number_of_secrets_allowed': 'numberOfSecretsAllowed',
            'number_of_secrets_created': 'numberOfSecretsCreated',
            'number_of_transitions_allowed': 'numberOfTransitionsAllowed',
            'number_of_transitions_created': 'numberOfTransitionsCreated',
            'number_of_users_allowed': 'numberOfUsersAllowed',
            'number_of_users_created': 'numberOfUsersCreated',
            'number_of_workflows_allowed': 'numberOfWorkflowsAllowed',
            'number_of_workflows_created': 'numberOfWorkflowsCreated',
            'organization_id': 'organizationId',
            'payment_method_id': 'paymentMethodId',
            'plan_id': 'planId',
            'updated_by': 'updatedBy',
            'updated_time': 'updatedTime'
        }

        self._client_id = client_id
        self._deployments_allowed = deployments_allowed
        self._deployments_created = deployments_created
        self._description = description
        self._document_retention_in_days = document_retention_in_days
        self._monthly_number_of_active_models_used = monthly_number_of_active_models_used
        self._monthly_number_of_data_bundles_allowed = monthly_number_of_data_bundles_allowed
        self._monthly_number_of_data_bundles_created = monthly_number_of_data_bundles_created
        self._monthly_number_of_documents_allowed = monthly_number_of_documents_allowed
        self._monthly_number_of_documents_created = monthly_number_of_documents_created
        self._monthly_number_of_field_predictions_allowed = monthly_number_of_field_predictions_allowed
        self._monthly_number_of_field_predictions_used = monthly_number_of_field_predictions_used
        self._monthly_number_of_gpu_hours_used = monthly_number_of_gpu_hours_used
        self._monthly_number_of_model_deployment_units_used = monthly_number_of_model_deployment_units_used
        self._monthly_number_of_predictions_allowed = monthly_number_of_predictions_allowed
        self._monthly_number_of_predictions_created = monthly_number_of_predictions_created
        self._monthly_number_of_trainings_allowed = monthly_number_of_trainings_allowed
        self._monthly_number_of_trainings_created = monthly_number_of_trainings_created
        self._monthly_number_of_transition_executions_allowed = monthly_number_of_transition_executions_allowed
        self._monthly_number_of_transition_executions_created = monthly_number_of_transition_executions_created
        self._monthly_number_of_workflow_executions_allowed = monthly_number_of_workflow_executions_allowed
        self._monthly_number_of_workflow_executions_created = monthly_number_of_workflow_executions_created
        self._monthly_usage_summary = monthly_usage_summary
        self._name = name
        self._number_of_app_clients_allowed = number_of_app_clients_allowed
        self._number_of_app_clients_created = number_of_app_clients_created
        self._number_of_assets_allowed = number_of_assets_allowed
        self._number_of_assets_created = number_of_assets_created
        self._number_of_datasets_allowed = number_of_datasets_allowed
        self._number_of_datasets_created = number_of_datasets_created
        self._number_of_models_allowed = number_of_models_allowed
        self._number_of_models_created = number_of_models_created
        self._number_of_secrets_allowed = number_of_secrets_allowed
        self._number_of_secrets_created = number_of_secrets_created
        self._number_of_transitions_allowed = number_of_transitions_allowed
        self._number_of_transitions_created = number_of_transitions_created
        self._number_of_users_allowed = number_of_users_allowed
        self._number_of_users_created = number_of_users_created
        self._number_of_workflows_allowed = number_of_workflows_allowed
        self._number_of_workflows_created = number_of_workflows_created
        self._organization_id = organization_id
        self._payment_method_id = payment_method_id
        self._plan_id = plan_id
        self._updated_by = updated_by
        self._updated_time = updated_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Organization':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Organization of this Organization.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_id(self):
        """Gets the client_id of this Organization.


        :return: The client_id of this Organization.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this Organization.


        :param client_id: The client_id of this Organization.
        :type client_id: str
        """
        if client_id is not None and not re.search(r'^[0-9a-z]+$', client_id):
            raise ValueError("Invalid value for `client_id`, must be a follow pattern or equal to `/^[0-9a-z]+$/`")

        self._client_id = client_id

    @property
    def deployments_allowed(self):
        """Gets the deployments_allowed of this Organization.


        :return: The deployments_allowed of this Organization.
        :rtype: object
        """
        return self._deployments_allowed

    @deployments_allowed.setter
    def deployments_allowed(self, deployments_allowed):
        """Sets the deployments_allowed of this Organization.


        :param deployments_allowed: The deployments_allowed of this Organization.
        :type deployments_allowed: object
        """

        self._deployments_allowed = deployments_allowed

    @property
    def deployments_created(self):
        """Gets the deployments_created of this Organization.


        :return: The deployments_created of this Organization.
        :rtype: object
        """
        return self._deployments_created

    @deployments_created.setter
    def deployments_created(self, deployments_created):
        """Sets the deployments_created of this Organization.


        :param deployments_created: The deployments_created of this Organization.
        :type deployments_created: object
        """

        self._deployments_created = deployments_created

    @property
    def description(self):
        """Gets the description of this Organization.


        :return: The description of this Organization.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Organization.


        :param description: The description of this Organization.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")
        if description is not None and len(description) > 4096:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `4096`")

        self._description = description

    @property
    def document_retention_in_days(self):
        """Gets the document_retention_in_days of this Organization.


        :return: The document_retention_in_days of this Organization.
        :rtype: int
        """
        return self._document_retention_in_days

    @document_retention_in_days.setter
    def document_retention_in_days(self, document_retention_in_days):
        """Sets the document_retention_in_days of this Organization.


        :param document_retention_in_days: The document_retention_in_days of this Organization.
        :type document_retention_in_days: int
        """
        if document_retention_in_days is None:
            raise ValueError("Invalid value for `document_retention_in_days`, must not be `None`")
        if document_retention_in_days is not None and document_retention_in_days < 1:
            raise ValueError("Invalid value for `document_retention_in_days`, must be a value greater than or equal to `1`")

        self._document_retention_in_days = document_retention_in_days

    @property
    def monthly_number_of_active_models_used(self):
        """Gets the monthly_number_of_active_models_used of this Organization.


        :return: The monthly_number_of_active_models_used of this Organization.
        :rtype: int
        """
        return self._monthly_number_of_active_models_used

    @monthly_number_of_active_models_used.setter
    def monthly_number_of_active_models_used(self, monthly_number_of_active_models_used):
        """Sets the monthly_number_of_active_models_used of this Organization.


        :param monthly_number_of_active_models_used: The monthly_number_of_active_models_used of this Organization.
        :type monthly_number_of_active_models_used: int
        """
        if monthly_number_of_active_models_used is None:
            raise ValueError("Invalid value for `monthly_number_of_active_models_used`, must not be `None`")
        if monthly_number_of_active_models_used is not None and monthly_number_of_active_models_used < 0:
            raise ValueError("Invalid value for `monthly_number_of_active_models_used`, must be a value greater than or equal to `0`")

        self._monthly_number_of_active_models_used = monthly_number_of_active_models_used

    @property
    def monthly_number_of_data_bundles_allowed(self):
        """Gets the monthly_number_of_data_bundles_allowed of this Organization.


        :return: The monthly_number_of_data_bundles_allowed of this Organization.
        :rtype: int
        """
        return self._monthly_number_of_data_bundles_allowed

    @monthly_number_of_data_bundles_allowed.setter
    def monthly_number_of_data_bundles_allowed(self, monthly_number_of_data_bundles_allowed):
        """Sets the monthly_number_of_data_bundles_allowed of this Organization.


        :param monthly_number_of_data_bundles_allowed: The monthly_number_of_data_bundles_allowed of this Organization.
        :type monthly_number_of_data_bundles_allowed: int
        """
        if monthly_number_of_data_bundles_allowed is None:
            raise ValueError("Invalid value for `monthly_number_of_data_bundles_allowed`, must not be `None`")
        if monthly_number_of_data_bundles_allowed is not None and monthly_number_of_data_bundles_allowed < 0:
            raise ValueError("Invalid value for `monthly_number_of_data_bundles_allowed`, must be a value greater than or equal to `0`")

        self._monthly_number_of_data_bundles_allowed = monthly_number_of_data_bundles_allowed

    @property
    def monthly_number_of_data_bundles_created(self):
        """Gets the monthly_number_of_data_bundles_created of this Organization.


        :return: The monthly_number_of_data_bundles_created of this Organization.
        :rtype: int
        """
        return self._monthly_number_of_data_bundles_created

    @monthly_number_of_data_bundles_created.setter
    def monthly_number_of_data_bundles_created(self, monthly_number_of_data_bundles_created):
        """Sets the monthly_number_of_data_bundles_created of this Organization.


        :param monthly_number_of_data_bundles_created: The monthly_number_of_data_bundles_created of this Organization.
        :type monthly_number_of_data_bundles_created: int
        """
        if monthly_number_of_data_bundles_created is None:
            raise ValueError("Invalid value for `monthly_number_of_data_bundles_created`, must not be `None`")
        if monthly_number_of_data_bundles_created is not None and monthly_number_of_data_bundles_created < 0:
            raise ValueError("Invalid value for `monthly_number_of_data_bundles_created`, must be a value greater than or equal to `0`")

        self._monthly_number_of_data_bundles_created = monthly_number_of_data_bundles_created

    @property
    def monthly_number_of_documents_allowed(self):
        """Gets the monthly_number_of_documents_allowed of this Organization.


        :return: The monthly_number_of_documents_allowed of this Organization.
        :rtype: int
        """
        return self._monthly_number_of_documents_allowed

    @monthly_number_of_documents_allowed.setter
    def monthly_number_of_documents_allowed(self, monthly_number_of_documents_allowed):
        """Sets the monthly_number_of_documents_allowed of this Organization.


        :param monthly_number_of_documents_allowed: The monthly_number_of_documents_allowed of this Organization.
        :type monthly_number_of_documents_allowed: int
        """
        if monthly_number_of_documents_allowed is None:
            raise ValueError("Invalid value for `monthly_number_of_documents_allowed`, must not be `None`")
        if monthly_number_of_documents_allowed is not None and monthly_number_of_documents_allowed < 0:
            raise ValueError("Invalid value for `monthly_number_of_documents_allowed`, must be a value greater than or equal to `0`")

        self._monthly_number_of_documents_allowed = monthly_number_of_documents_allowed

    @property
    def monthly_number_of_documents_created(self):
        """Gets the monthly_number_of_documents_created of this Organization.


        :return: The monthly_number_of_documents_created of this Organization.
        :rtype: int
        """
        return self._monthly_number_of_documents_created

    @monthly_number_of_documents_created.setter
    def monthly_number_of_documents_created(self, monthly_number_of_documents_created):
        """Sets the monthly_number_of_documents_created of this Organization.


        :param monthly_number_of_documents_created: The monthly_number_of_documents_created of this Organization.
        :type monthly_number_of_documents_created: int
        """
        if monthly_number_of_documents_created is None:
            raise ValueError("Invalid value for `monthly_number_of_documents_created`, must not be `None`")
        if monthly_number_of_documents_created is not None and monthly_number_of_documents_created < 0:
            raise ValueError("Invalid value for `monthly_number_of_documents_created`, must be a value greater than or equal to `0`")

        self._monthly_number_of_documents_created = monthly_number_of_documents_created

    @property
    def monthly_number_of_field_predictions_allowed(self):
        """Gets the monthly_number_of_field_predictions_allowed of this Organization.


        :return: The monthly_number_of_field_predictions_allowed of this Organization.
        :rtype: int
        """
        return self._monthly_number_of_field_predictions_allowed

    @monthly_number_of_field_predictions_allowed.setter
    def monthly_number_of_field_predictions_allowed(self, monthly_number_of_field_predictions_allowed):
        """Sets the monthly_number_of_field_predictions_allowed of this Organization.


        :param monthly_number_of_field_predictions_allowed: The monthly_number_of_field_predictions_allowed of this Organization.
        :type monthly_number_of_field_predictions_allowed: int
        """
        if monthly_number_of_field_predictions_allowed is None:
            raise ValueError("Invalid value for `monthly_number_of_field_predictions_allowed`, must not be `None`")
        if monthly_number_of_field_predictions_allowed is not None and monthly_number_of_field_predictions_allowed < 0:
            raise ValueError("Invalid value for `monthly_number_of_field_predictions_allowed`, must be a value greater than or equal to `0`")

        self._monthly_number_of_field_predictions_allowed = monthly_number_of_field_predictions_allowed

    @property
    def monthly_number_of_field_predictions_used(self):
        """Gets the monthly_number_of_field_predictions_used of this Organization.


        :return: The monthly_number_of_field_predictions_used of this Organization.
        :rtype: int
        """
        return self._monthly_number_of_field_predictions_used

    @monthly_number_of_field_predictions_used.setter
    def monthly_number_of_field_predictions_used(self, monthly_number_of_field_predictions_used):
        """Sets the monthly_number_of_field_predictions_used of this Organization.


        :param monthly_number_of_field_predictions_used: The monthly_number_of_field_predictions_used of this Organization.
        :type monthly_number_of_field_predictions_used: int
        """
        if monthly_number_of_field_predictions_used is None:
            raise ValueError("Invalid value for `monthly_number_of_field_predictions_used`, must not be `None`")
        if monthly_number_of_field_predictions_used is not None and monthly_number_of_field_predictions_used < 0:
            raise ValueError("Invalid value for `monthly_number_of_field_predictions_used`, must be a value greater than or equal to `0`")

        self._monthly_number_of_field_predictions_used = monthly_number_of_field_predictions_used

    @property
    def monthly_number_of_gpu_hours_used(self):
        """Gets the monthly_number_of_gpu_hours_used of this Organization.


        :return: The monthly_number_of_gpu_hours_used of this Organization.
        :rtype: float
        """
        return self._monthly_number_of_gpu_hours_used

    @monthly_number_of_gpu_hours_used.setter
    def monthly_number_of_gpu_hours_used(self, monthly_number_of_gpu_hours_used):
        """Sets the monthly_number_of_gpu_hours_used of this Organization.


        :param monthly_number_of_gpu_hours_used: The monthly_number_of_gpu_hours_used of this Organization.
        :type monthly_number_of_gpu_hours_used: float
        """
        if monthly_number_of_gpu_hours_used is None:
            raise ValueError("Invalid value for `monthly_number_of_gpu_hours_used`, must not be `None`")
        if monthly_number_of_gpu_hours_used is not None and monthly_number_of_gpu_hours_used < 0:
            raise ValueError("Invalid value for `monthly_number_of_gpu_hours_used`, must be a value greater than or equal to `0`")

        self._monthly_number_of_gpu_hours_used = monthly_number_of_gpu_hours_used

    @property
    def monthly_number_of_model_deployment_units_used(self):
        """Gets the monthly_number_of_model_deployment_units_used of this Organization.


        :return: The monthly_number_of_model_deployment_units_used of this Organization.
        :rtype: int
        """
        return self._monthly_number_of_model_deployment_units_used

    @monthly_number_of_model_deployment_units_used.setter
    def monthly_number_of_model_deployment_units_used(self, monthly_number_of_model_deployment_units_used):
        """Sets the monthly_number_of_model_deployment_units_used of this Organization.


        :param monthly_number_of_model_deployment_units_used: The monthly_number_of_model_deployment_units_used of this Organization.
        :type monthly_number_of_model_deployment_units_used: int
        """
        if monthly_number_of_model_deployment_units_used is not None and monthly_number_of_model_deployment_units_used < 0:
            raise ValueError("Invalid value for `monthly_number_of_model_deployment_units_used`, must be a value greater than or equal to `0`")

        self._monthly_number_of_model_deployment_units_used = monthly_number_of_model_deployment_units_used

    @property
    def monthly_number_of_predictions_allowed(self):
        """Gets the monthly_number_of_predictions_allowed of this Organization.


        :return: The monthly_number_of_predictions_allowed of this Organization.
        :rtype: int
        """
        return self._monthly_number_of_predictions_allowed

    @monthly_number_of_predictions_allowed.setter
    def monthly_number_of_predictions_allowed(self, monthly_number_of_predictions_allowed):
        """Sets the monthly_number_of_predictions_allowed of this Organization.


        :param monthly_number_of_predictions_allowed: The monthly_number_of_predictions_allowed of this Organization.
        :type monthly_number_of_predictions_allowed: int
        """
        if monthly_number_of_predictions_allowed is None:
            raise ValueError("Invalid value for `monthly_number_of_predictions_allowed`, must not be `None`")
        if monthly_number_of_predictions_allowed is not None and monthly_number_of_predictions_allowed < 0:
            raise ValueError("Invalid value for `monthly_number_of_predictions_allowed`, must be a value greater than or equal to `0`")

        self._monthly_number_of_predictions_allowed = monthly_number_of_predictions_allowed

    @property
    def monthly_number_of_predictions_created(self):
        """Gets the monthly_number_of_predictions_created of this Organization.


        :return: The monthly_number_of_predictions_created of this Organization.
        :rtype: int
        """
        return self._monthly_number_of_predictions_created

    @monthly_number_of_predictions_created.setter
    def monthly_number_of_predictions_created(self, monthly_number_of_predictions_created):
        """Sets the monthly_number_of_predictions_created of this Organization.


        :param monthly_number_of_predictions_created: The monthly_number_of_predictions_created of this Organization.
        :type monthly_number_of_predictions_created: int
        """
        if monthly_number_of_predictions_created is None:
            raise ValueError("Invalid value for `monthly_number_of_predictions_created`, must not be `None`")
        if monthly_number_of_predictions_created is not None and monthly_number_of_predictions_created < 0:
            raise ValueError("Invalid value for `monthly_number_of_predictions_created`, must be a value greater than or equal to `0`")

        self._monthly_number_of_predictions_created = monthly_number_of_predictions_created

    @property
    def monthly_number_of_trainings_allowed(self):
        """Gets the monthly_number_of_trainings_allowed of this Organization.


        :return: The monthly_number_of_trainings_allowed of this Organization.
        :rtype: int
        """
        return self._monthly_number_of_trainings_allowed

    @monthly_number_of_trainings_allowed.setter
    def monthly_number_of_trainings_allowed(self, monthly_number_of_trainings_allowed):
        """Sets the monthly_number_of_trainings_allowed of this Organization.


        :param monthly_number_of_trainings_allowed: The monthly_number_of_trainings_allowed of this Organization.
        :type monthly_number_of_trainings_allowed: int
        """
        if monthly_number_of_trainings_allowed is None:
            raise ValueError("Invalid value for `monthly_number_of_trainings_allowed`, must not be `None`")
        if monthly_number_of_trainings_allowed is not None and monthly_number_of_trainings_allowed < 0:
            raise ValueError("Invalid value for `monthly_number_of_trainings_allowed`, must be a value greater than or equal to `0`")

        self._monthly_number_of_trainings_allowed = monthly_number_of_trainings_allowed

    @property
    def monthly_number_of_trainings_created(self):
        """Gets the monthly_number_of_trainings_created of this Organization.


        :return: The monthly_number_of_trainings_created of this Organization.
        :rtype: int
        """
        return self._monthly_number_of_trainings_created

    @monthly_number_of_trainings_created.setter
    def monthly_number_of_trainings_created(self, monthly_number_of_trainings_created):
        """Sets the monthly_number_of_trainings_created of this Organization.


        :param monthly_number_of_trainings_created: The monthly_number_of_trainings_created of this Organization.
        :type monthly_number_of_trainings_created: int
        """
        if monthly_number_of_trainings_created is None:
            raise ValueError("Invalid value for `monthly_number_of_trainings_created`, must not be `None`")
        if monthly_number_of_trainings_created is not None and monthly_number_of_trainings_created < 0:
            raise ValueError("Invalid value for `monthly_number_of_trainings_created`, must be a value greater than or equal to `0`")

        self._monthly_number_of_trainings_created = monthly_number_of_trainings_created

    @property
    def monthly_number_of_transition_executions_allowed(self):
        """Gets the monthly_number_of_transition_executions_allowed of this Organization.


        :return: The monthly_number_of_transition_executions_allowed of this Organization.
        :rtype: int
        """
        return self._monthly_number_of_transition_executions_allowed

    @monthly_number_of_transition_executions_allowed.setter
    def monthly_number_of_transition_executions_allowed(self, monthly_number_of_transition_executions_allowed):
        """Sets the monthly_number_of_transition_executions_allowed of this Organization.


        :param monthly_number_of_transition_executions_allowed: The monthly_number_of_transition_executions_allowed of this Organization.
        :type monthly_number_of_transition_executions_allowed: int
        """
        if monthly_number_of_transition_executions_allowed is None:
            raise ValueError("Invalid value for `monthly_number_of_transition_executions_allowed`, must not be `None`")
        if monthly_number_of_transition_executions_allowed is not None and monthly_number_of_transition_executions_allowed < 0:
            raise ValueError("Invalid value for `monthly_number_of_transition_executions_allowed`, must be a value greater than or equal to `0`")

        self._monthly_number_of_transition_executions_allowed = monthly_number_of_transition_executions_allowed

    @property
    def monthly_number_of_transition_executions_created(self):
        """Gets the monthly_number_of_transition_executions_created of this Organization.


        :return: The monthly_number_of_transition_executions_created of this Organization.
        :rtype: int
        """
        return self._monthly_number_of_transition_executions_created

    @monthly_number_of_transition_executions_created.setter
    def monthly_number_of_transition_executions_created(self, monthly_number_of_transition_executions_created):
        """Sets the monthly_number_of_transition_executions_created of this Organization.


        :param monthly_number_of_transition_executions_created: The monthly_number_of_transition_executions_created of this Organization.
        :type monthly_number_of_transition_executions_created: int
        """
        if monthly_number_of_transition_executions_created is None:
            raise ValueError("Invalid value for `monthly_number_of_transition_executions_created`, must not be `None`")
        if monthly_number_of_transition_executions_created is not None and monthly_number_of_transition_executions_created < 0:
            raise ValueError("Invalid value for `monthly_number_of_transition_executions_created`, must be a value greater than or equal to `0`")

        self._monthly_number_of_transition_executions_created = monthly_number_of_transition_executions_created

    @property
    def monthly_number_of_workflow_executions_allowed(self):
        """Gets the monthly_number_of_workflow_executions_allowed of this Organization.


        :return: The monthly_number_of_workflow_executions_allowed of this Organization.
        :rtype: int
        """
        return self._monthly_number_of_workflow_executions_allowed

    @monthly_number_of_workflow_executions_allowed.setter
    def monthly_number_of_workflow_executions_allowed(self, monthly_number_of_workflow_executions_allowed):
        """Sets the monthly_number_of_workflow_executions_allowed of this Organization.


        :param monthly_number_of_workflow_executions_allowed: The monthly_number_of_workflow_executions_allowed of this Organization.
        :type monthly_number_of_workflow_executions_allowed: int
        """
        if monthly_number_of_workflow_executions_allowed is None:
            raise ValueError("Invalid value for `monthly_number_of_workflow_executions_allowed`, must not be `None`")
        if monthly_number_of_workflow_executions_allowed is not None and monthly_number_of_workflow_executions_allowed < 0:
            raise ValueError("Invalid value for `monthly_number_of_workflow_executions_allowed`, must be a value greater than or equal to `0`")

        self._monthly_number_of_workflow_executions_allowed = monthly_number_of_workflow_executions_allowed

    @property
    def monthly_number_of_workflow_executions_created(self):
        """Gets the monthly_number_of_workflow_executions_created of this Organization.


        :return: The monthly_number_of_workflow_executions_created of this Organization.
        :rtype: int
        """
        return self._monthly_number_of_workflow_executions_created

    @monthly_number_of_workflow_executions_created.setter
    def monthly_number_of_workflow_executions_created(self, monthly_number_of_workflow_executions_created):
        """Sets the monthly_number_of_workflow_executions_created of this Organization.


        :param monthly_number_of_workflow_executions_created: The monthly_number_of_workflow_executions_created of this Organization.
        :type monthly_number_of_workflow_executions_created: int
        """
        if monthly_number_of_workflow_executions_created is None:
            raise ValueError("Invalid value for `monthly_number_of_workflow_executions_created`, must not be `None`")
        if monthly_number_of_workflow_executions_created is not None and monthly_number_of_workflow_executions_created < 0:
            raise ValueError("Invalid value for `monthly_number_of_workflow_executions_created`, must be a value greater than or equal to `0`")

        self._monthly_number_of_workflow_executions_created = monthly_number_of_workflow_executions_created

    @property
    def monthly_usage_summary(self):
        """Gets the monthly_usage_summary of this Organization.


        :return: The monthly_usage_summary of this Organization.
        :rtype: object
        """
        return self._monthly_usage_summary

    @monthly_usage_summary.setter
    def monthly_usage_summary(self, monthly_usage_summary):
        """Sets the monthly_usage_summary of this Organization.


        :param monthly_usage_summary: The monthly_usage_summary of this Organization.
        :type monthly_usage_summary: object
        """
        if monthly_usage_summary is None:
            raise ValueError("Invalid value for `monthly_usage_summary`, must not be `None`")

        self._monthly_usage_summary = monthly_usage_summary

    @property
    def name(self):
        """Gets the name of this Organization.


        :return: The name of this Organization.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Organization.


        :param name: The name of this Organization.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 4096:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `4096`")

        self._name = name

    @property
    def number_of_app_clients_allowed(self):
        """Gets the number_of_app_clients_allowed of this Organization.


        :return: The number_of_app_clients_allowed of this Organization.
        :rtype: int
        """
        return self._number_of_app_clients_allowed

    @number_of_app_clients_allowed.setter
    def number_of_app_clients_allowed(self, number_of_app_clients_allowed):
        """Sets the number_of_app_clients_allowed of this Organization.


        :param number_of_app_clients_allowed: The number_of_app_clients_allowed of this Organization.
        :type number_of_app_clients_allowed: int
        """
        if number_of_app_clients_allowed is None:
            raise ValueError("Invalid value for `number_of_app_clients_allowed`, must not be `None`")
        if number_of_app_clients_allowed is not None and number_of_app_clients_allowed < 0:
            raise ValueError("Invalid value for `number_of_app_clients_allowed`, must be a value greater than or equal to `0`")

        self._number_of_app_clients_allowed = number_of_app_clients_allowed

    @property
    def number_of_app_clients_created(self):
        """Gets the number_of_app_clients_created of this Organization.


        :return: The number_of_app_clients_created of this Organization.
        :rtype: int
        """
        return self._number_of_app_clients_created

    @number_of_app_clients_created.setter
    def number_of_app_clients_created(self, number_of_app_clients_created):
        """Sets the number_of_app_clients_created of this Organization.


        :param number_of_app_clients_created: The number_of_app_clients_created of this Organization.
        :type number_of_app_clients_created: int
        """
        if number_of_app_clients_created is None:
            raise ValueError("Invalid value for `number_of_app_clients_created`, must not be `None`")
        if number_of_app_clients_created is not None and number_of_app_clients_created < 0:
            raise ValueError("Invalid value for `number_of_app_clients_created`, must be a value greater than or equal to `0`")

        self._number_of_app_clients_created = number_of_app_clients_created

    @property
    def number_of_assets_allowed(self):
        """Gets the number_of_assets_allowed of this Organization.


        :return: The number_of_assets_allowed of this Organization.
        :rtype: int
        """
        return self._number_of_assets_allowed

    @number_of_assets_allowed.setter
    def number_of_assets_allowed(self, number_of_assets_allowed):
        """Sets the number_of_assets_allowed of this Organization.


        :param number_of_assets_allowed: The number_of_assets_allowed of this Organization.
        :type number_of_assets_allowed: int
        """
        if number_of_assets_allowed is None:
            raise ValueError("Invalid value for `number_of_assets_allowed`, must not be `None`")
        if number_of_assets_allowed is not None and number_of_assets_allowed < 0:
            raise ValueError("Invalid value for `number_of_assets_allowed`, must be a value greater than or equal to `0`")

        self._number_of_assets_allowed = number_of_assets_allowed

    @property
    def number_of_assets_created(self):
        """Gets the number_of_assets_created of this Organization.


        :return: The number_of_assets_created of this Organization.
        :rtype: int
        """
        return self._number_of_assets_created

    @number_of_assets_created.setter
    def number_of_assets_created(self, number_of_assets_created):
        """Sets the number_of_assets_created of this Organization.


        :param number_of_assets_created: The number_of_assets_created of this Organization.
        :type number_of_assets_created: int
        """
        if number_of_assets_created is None:
            raise ValueError("Invalid value for `number_of_assets_created`, must not be `None`")
        if number_of_assets_created is not None and number_of_assets_created < 0:
            raise ValueError("Invalid value for `number_of_assets_created`, must be a value greater than or equal to `0`")

        self._number_of_assets_created = number_of_assets_created

    @property
    def number_of_datasets_allowed(self):
        """Gets the number_of_datasets_allowed of this Organization.


        :return: The number_of_datasets_allowed of this Organization.
        :rtype: int
        """
        return self._number_of_datasets_allowed

    @number_of_datasets_allowed.setter
    def number_of_datasets_allowed(self, number_of_datasets_allowed):
        """Sets the number_of_datasets_allowed of this Organization.


        :param number_of_datasets_allowed: The number_of_datasets_allowed of this Organization.
        :type number_of_datasets_allowed: int
        """
        if number_of_datasets_allowed is not None and number_of_datasets_allowed < 0:
            raise ValueError("Invalid value for `number_of_datasets_allowed`, must be a value greater than or equal to `0`")

        self._number_of_datasets_allowed = number_of_datasets_allowed

    @property
    def number_of_datasets_created(self):
        """Gets the number_of_datasets_created of this Organization.


        :return: The number_of_datasets_created of this Organization.
        :rtype: int
        """
        return self._number_of_datasets_created

    @number_of_datasets_created.setter
    def number_of_datasets_created(self, number_of_datasets_created):
        """Sets the number_of_datasets_created of this Organization.


        :param number_of_datasets_created: The number_of_datasets_created of this Organization.
        :type number_of_datasets_created: int
        """
        if number_of_datasets_created is not None and number_of_datasets_created < 0:
            raise ValueError("Invalid value for `number_of_datasets_created`, must be a value greater than or equal to `0`")

        self._number_of_datasets_created = number_of_datasets_created

    @property
    def number_of_models_allowed(self):
        """Gets the number_of_models_allowed of this Organization.


        :return: The number_of_models_allowed of this Organization.
        :rtype: int
        """
        return self._number_of_models_allowed

    @number_of_models_allowed.setter
    def number_of_models_allowed(self, number_of_models_allowed):
        """Sets the number_of_models_allowed of this Organization.


        :param number_of_models_allowed: The number_of_models_allowed of this Organization.
        :type number_of_models_allowed: int
        """
        if number_of_models_allowed is None:
            raise ValueError("Invalid value for `number_of_models_allowed`, must not be `None`")
        if number_of_models_allowed is not None and number_of_models_allowed < 0:
            raise ValueError("Invalid value for `number_of_models_allowed`, must be a value greater than or equal to `0`")

        self._number_of_models_allowed = number_of_models_allowed

    @property
    def number_of_models_created(self):
        """Gets the number_of_models_created of this Organization.


        :return: The number_of_models_created of this Organization.
        :rtype: int
        """
        return self._number_of_models_created

    @number_of_models_created.setter
    def number_of_models_created(self, number_of_models_created):
        """Sets the number_of_models_created of this Organization.


        :param number_of_models_created: The number_of_models_created of this Organization.
        :type number_of_models_created: int
        """
        if number_of_models_created is None:
            raise ValueError("Invalid value for `number_of_models_created`, must not be `None`")
        if number_of_models_created is not None and number_of_models_created < 0:
            raise ValueError("Invalid value for `number_of_models_created`, must be a value greater than or equal to `0`")

        self._number_of_models_created = number_of_models_created

    @property
    def number_of_secrets_allowed(self):
        """Gets the number_of_secrets_allowed of this Organization.


        :return: The number_of_secrets_allowed of this Organization.
        :rtype: int
        """
        return self._number_of_secrets_allowed

    @number_of_secrets_allowed.setter
    def number_of_secrets_allowed(self, number_of_secrets_allowed):
        """Sets the number_of_secrets_allowed of this Organization.


        :param number_of_secrets_allowed: The number_of_secrets_allowed of this Organization.
        :type number_of_secrets_allowed: int
        """
        if number_of_secrets_allowed is None:
            raise ValueError("Invalid value for `number_of_secrets_allowed`, must not be `None`")
        if number_of_secrets_allowed is not None and number_of_secrets_allowed < 0:
            raise ValueError("Invalid value for `number_of_secrets_allowed`, must be a value greater than or equal to `0`")

        self._number_of_secrets_allowed = number_of_secrets_allowed

    @property
    def number_of_secrets_created(self):
        """Gets the number_of_secrets_created of this Organization.


        :return: The number_of_secrets_created of this Organization.
        :rtype: int
        """
        return self._number_of_secrets_created

    @number_of_secrets_created.setter
    def number_of_secrets_created(self, number_of_secrets_created):
        """Sets the number_of_secrets_created of this Organization.


        :param number_of_secrets_created: The number_of_secrets_created of this Organization.
        :type number_of_secrets_created: int
        """
        if number_of_secrets_created is None:
            raise ValueError("Invalid value for `number_of_secrets_created`, must not be `None`")
        if number_of_secrets_created is not None and number_of_secrets_created < 0:
            raise ValueError("Invalid value for `number_of_secrets_created`, must be a value greater than or equal to `0`")

        self._number_of_secrets_created = number_of_secrets_created

    @property
    def number_of_transitions_allowed(self):
        """Gets the number_of_transitions_allowed of this Organization.


        :return: The number_of_transitions_allowed of this Organization.
        :rtype: int
        """
        return self._number_of_transitions_allowed

    @number_of_transitions_allowed.setter
    def number_of_transitions_allowed(self, number_of_transitions_allowed):
        """Sets the number_of_transitions_allowed of this Organization.


        :param number_of_transitions_allowed: The number_of_transitions_allowed of this Organization.
        :type number_of_transitions_allowed: int
        """
        if number_of_transitions_allowed is None:
            raise ValueError("Invalid value for `number_of_transitions_allowed`, must not be `None`")
        if number_of_transitions_allowed is not None and number_of_transitions_allowed < 0:
            raise ValueError("Invalid value for `number_of_transitions_allowed`, must be a value greater than or equal to `0`")

        self._number_of_transitions_allowed = number_of_transitions_allowed

    @property
    def number_of_transitions_created(self):
        """Gets the number_of_transitions_created of this Organization.


        :return: The number_of_transitions_created of this Organization.
        :rtype: int
        """
        return self._number_of_transitions_created

    @number_of_transitions_created.setter
    def number_of_transitions_created(self, number_of_transitions_created):
        """Sets the number_of_transitions_created of this Organization.


        :param number_of_transitions_created: The number_of_transitions_created of this Organization.
        :type number_of_transitions_created: int
        """
        if number_of_transitions_created is None:
            raise ValueError("Invalid value for `number_of_transitions_created`, must not be `None`")
        if number_of_transitions_created is not None and number_of_transitions_created < 0:
            raise ValueError("Invalid value for `number_of_transitions_created`, must be a value greater than or equal to `0`")

        self._number_of_transitions_created = number_of_transitions_created

    @property
    def number_of_users_allowed(self):
        """Gets the number_of_users_allowed of this Organization.


        :return: The number_of_users_allowed of this Organization.
        :rtype: int
        """
        return self._number_of_users_allowed

    @number_of_users_allowed.setter
    def number_of_users_allowed(self, number_of_users_allowed):
        """Sets the number_of_users_allowed of this Organization.


        :param number_of_users_allowed: The number_of_users_allowed of this Organization.
        :type number_of_users_allowed: int
        """
        if number_of_users_allowed is None:
            raise ValueError("Invalid value for `number_of_users_allowed`, must not be `None`")
        if number_of_users_allowed is not None and number_of_users_allowed < 0:
            raise ValueError("Invalid value for `number_of_users_allowed`, must be a value greater than or equal to `0`")

        self._number_of_users_allowed = number_of_users_allowed

    @property
    def number_of_users_created(self):
        """Gets the number_of_users_created of this Organization.


        :return: The number_of_users_created of this Organization.
        :rtype: int
        """
        return self._number_of_users_created

    @number_of_users_created.setter
    def number_of_users_created(self, number_of_users_created):
        """Sets the number_of_users_created of this Organization.


        :param number_of_users_created: The number_of_users_created of this Organization.
        :type number_of_users_created: int
        """
        if number_of_users_created is None:
            raise ValueError("Invalid value for `number_of_users_created`, must not be `None`")
        if number_of_users_created is not None and number_of_users_created < 0:
            raise ValueError("Invalid value for `number_of_users_created`, must be a value greater than or equal to `0`")

        self._number_of_users_created = number_of_users_created

    @property
    def number_of_workflows_allowed(self):
        """Gets the number_of_workflows_allowed of this Organization.


        :return: The number_of_workflows_allowed of this Organization.
        :rtype: int
        """
        return self._number_of_workflows_allowed

    @number_of_workflows_allowed.setter
    def number_of_workflows_allowed(self, number_of_workflows_allowed):
        """Sets the number_of_workflows_allowed of this Organization.


        :param number_of_workflows_allowed: The number_of_workflows_allowed of this Organization.
        :type number_of_workflows_allowed: int
        """
        if number_of_workflows_allowed is None:
            raise ValueError("Invalid value for `number_of_workflows_allowed`, must not be `None`")
        if number_of_workflows_allowed is not None and number_of_workflows_allowed < 0:
            raise ValueError("Invalid value for `number_of_workflows_allowed`, must be a value greater than or equal to `0`")

        self._number_of_workflows_allowed = number_of_workflows_allowed

    @property
    def number_of_workflows_created(self):
        """Gets the number_of_workflows_created of this Organization.


        :return: The number_of_workflows_created of this Organization.
        :rtype: int
        """
        return self._number_of_workflows_created

    @number_of_workflows_created.setter
    def number_of_workflows_created(self, number_of_workflows_created):
        """Sets the number_of_workflows_created of this Organization.


        :param number_of_workflows_created: The number_of_workflows_created of this Organization.
        :type number_of_workflows_created: int
        """
        if number_of_workflows_created is None:
            raise ValueError("Invalid value for `number_of_workflows_created`, must not be `None`")
        if number_of_workflows_created is not None and number_of_workflows_created < 0:
            raise ValueError("Invalid value for `number_of_workflows_created`, must be a value greater than or equal to `0`")

        self._number_of_workflows_created = number_of_workflows_created

    @property
    def organization_id(self):
        """Gets the organization_id of this Organization.


        :return: The organization_id of this Organization.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this Organization.


        :param organization_id: The organization_id of this Organization.
        :type organization_id: str
        """
        if organization_id is None:
            raise ValueError("Invalid value for `organization_id`, must not be `None`")
        if organization_id is not None and not re.search(r'^las:organization:[a-z0-9-_]+$', organization_id):
            raise ValueError("Invalid value for `organization_id`, must be a follow pattern or equal to `/^las:organization:[a-z0-9-_]+$/`")

        self._organization_id = organization_id

    @property
    def payment_method_id(self):
        """Gets the payment_method_id of this Organization.


        :return: The payment_method_id of this Organization.
        :rtype: str
        """
        return self._payment_method_id

    @payment_method_id.setter
    def payment_method_id(self, payment_method_id):
        """Sets the payment_method_id of this Organization.


        :param payment_method_id: The payment_method_id of this Organization.
        :type payment_method_id: str
        """
        if payment_method_id is None:
            raise ValueError("Invalid value for `payment_method_id`, must not be `None`")
        if payment_method_id is not None and not re.search(r'^las:payment-method:[a-f0-9]{32}$', payment_method_id):
            raise ValueError("Invalid value for `payment_method_id`, must be a follow pattern or equal to `/^las:payment-method:[a-f0-9]{32}$/`")

        self._payment_method_id = payment_method_id

    @property
    def plan_id(self):
        """Gets the plan_id of this Organization.


        :return: The plan_id of this Organization.
        :rtype: str
        """
        return self._plan_id

    @plan_id.setter
    def plan_id(self, plan_id):
        """Sets the plan_id of this Organization.


        :param plan_id: The plan_id of this Organization.
        :type plan_id: str
        """
        if plan_id is None:
            raise ValueError("Invalid value for `plan_id`, must not be `None`")
        if plan_id is not None and not re.search(r'^(|las:organization:[a-z0-9-_]+\/)las:plan:[a-z0-9-_]+(|:@[a-z0-9-_]+|:[0-9]+)$', plan_id):
            raise ValueError("Invalid value for `plan_id`, must be a follow pattern or equal to `/^(|las:organization:[a-z0-9-_]+\/)las:plan:[a-z0-9-_]+(|:@[a-z0-9-_]+|:[0-9]+)$/`")

        self._plan_id = plan_id

    @property
    def updated_by(self):
        """Gets the updated_by of this Organization.


        :return: The updated_by of this Organization.
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this Organization.


        :param updated_by: The updated_by of this Organization.
        :type updated_by: str
        """
        if updated_by is None:
            raise ValueError("Invalid value for `updated_by`, must not be `None`")
        if updated_by is not None and len(updated_by) > 4096:
            raise ValueError("Invalid value for `updated_by`, length must be less than or equal to `4096`")

        self._updated_by = updated_by

    @property
    def updated_time(self):
        """Gets the updated_time of this Organization.


        :return: The updated_time of this Organization.
        :rtype: str
        """
        return self._updated_time

    @updated_time.setter
    def updated_time(self, updated_time):
        """Sets the updated_time of this Organization.


        :param updated_time: The updated_time of this Organization.
        :type updated_time: str
        """
        if updated_time is None:
            raise ValueError("Invalid value for `updated_time`, must not be `None`")
        if updated_time is not None and not re.search(r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$', updated_time):
            raise ValueError("Invalid value for `updated_time`, must be a follow pattern or equal to `/^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$/`")

        self._updated_time = updated_time
