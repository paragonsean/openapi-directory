# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class PaymentMethod(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_by: str=None, created_time: str=None, description: str=None, details: object=None, name: str=None, payment_method_id: str=None, stripe_publishable_key: str=None, stripe_setup_intent_secret: str=None, updated_by: str=None, updated_time: str=None):
        """PaymentMethod - a model defined in OpenAPI

        :param created_by: The created_by of this PaymentMethod.
        :param created_time: The created_time of this PaymentMethod.
        :param description: The description of this PaymentMethod.
        :param details: The details of this PaymentMethod.
        :param name: The name of this PaymentMethod.
        :param payment_method_id: The payment_method_id of this PaymentMethod.
        :param stripe_publishable_key: The stripe_publishable_key of this PaymentMethod.
        :param stripe_setup_intent_secret: The stripe_setup_intent_secret of this PaymentMethod.
        :param updated_by: The updated_by of this PaymentMethod.
        :param updated_time: The updated_time of this PaymentMethod.
        """
        self.openapi_types = {
            'created_by': str,
            'created_time': str,
            'description': str,
            'details': object,
            'name': str,
            'payment_method_id': str,
            'stripe_publishable_key': str,
            'stripe_setup_intent_secret': str,
            'updated_by': str,
            'updated_time': str
        }

        self.attribute_map = {
            'created_by': 'createdBy',
            'created_time': 'createdTime',
            'description': 'description',
            'details': 'details',
            'name': 'name',
            'payment_method_id': 'paymentMethodId',
            'stripe_publishable_key': 'stripePublishableKey',
            'stripe_setup_intent_secret': 'stripeSetupIntentSecret',
            'updated_by': 'updatedBy',
            'updated_time': 'updatedTime'
        }

        self._created_by = created_by
        self._created_time = created_time
        self._description = description
        self._details = details
        self._name = name
        self._payment_method_id = payment_method_id
        self._stripe_publishable_key = stripe_publishable_key
        self._stripe_setup_intent_secret = stripe_setup_intent_secret
        self._updated_by = updated_by
        self._updated_time = updated_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentMethod':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentMethod of this PaymentMethod.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_by(self):
        """Gets the created_by of this PaymentMethod.


        :return: The created_by of this PaymentMethod.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this PaymentMethod.


        :param created_by: The created_by of this PaymentMethod.
        :type created_by: str
        """
        if created_by is None:
            raise ValueError("Invalid value for `created_by`, must not be `None`")
        if created_by is not None and len(created_by) > 4096:
            raise ValueError("Invalid value for `created_by`, length must be less than or equal to `4096`")

        self._created_by = created_by

    @property
    def created_time(self):
        """Gets the created_time of this PaymentMethod.


        :return: The created_time of this PaymentMethod.
        :rtype: str
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this PaymentMethod.


        :param created_time: The created_time of this PaymentMethod.
        :type created_time: str
        """
        if created_time is None:
            raise ValueError("Invalid value for `created_time`, must not be `None`")
        if created_time is not None and not re.search(r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$', created_time):
            raise ValueError("Invalid value for `created_time`, must be a follow pattern or equal to `/^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$/`")

        self._created_time = created_time

    @property
    def description(self):
        """Gets the description of this PaymentMethod.


        :return: The description of this PaymentMethod.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PaymentMethod.


        :param description: The description of this PaymentMethod.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")
        if description is not None and len(description) > 4096:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `4096`")

        self._description = description

    @property
    def details(self):
        """Gets the details of this PaymentMethod.


        :return: The details of this PaymentMethod.
        :rtype: object
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this PaymentMethod.


        :param details: The details of this PaymentMethod.
        :type details: object
        """
        if details is None:
            raise ValueError("Invalid value for `details`, must not be `None`")

        self._details = details

    @property
    def name(self):
        """Gets the name of this PaymentMethod.


        :return: The name of this PaymentMethod.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PaymentMethod.


        :param name: The name of this PaymentMethod.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 4096:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `4096`")

        self._name = name

    @property
    def payment_method_id(self):
        """Gets the payment_method_id of this PaymentMethod.


        :return: The payment_method_id of this PaymentMethod.
        :rtype: str
        """
        return self._payment_method_id

    @payment_method_id.setter
    def payment_method_id(self, payment_method_id):
        """Sets the payment_method_id of this PaymentMethod.


        :param payment_method_id: The payment_method_id of this PaymentMethod.
        :type payment_method_id: str
        """
        if payment_method_id is None:
            raise ValueError("Invalid value for `payment_method_id`, must not be `None`")
        if payment_method_id is not None and not re.search(r'^las:payment-method:[a-f0-9]{32}$', payment_method_id):
            raise ValueError("Invalid value for `payment_method_id`, must be a follow pattern or equal to `/^las:payment-method:[a-f0-9]{32}$/`")

        self._payment_method_id = payment_method_id

    @property
    def stripe_publishable_key(self):
        """Gets the stripe_publishable_key of this PaymentMethod.


        :return: The stripe_publishable_key of this PaymentMethod.
        :rtype: str
        """
        return self._stripe_publishable_key

    @stripe_publishable_key.setter
    def stripe_publishable_key(self, stripe_publishable_key):
        """Sets the stripe_publishable_key of this PaymentMethod.


        :param stripe_publishable_key: The stripe_publishable_key of this PaymentMethod.
        :type stripe_publishable_key: str
        """
        if stripe_publishable_key is not None and len(stripe_publishable_key) > 4096:
            raise ValueError("Invalid value for `stripe_publishable_key`, length must be less than or equal to `4096`")

        self._stripe_publishable_key = stripe_publishable_key

    @property
    def stripe_setup_intent_secret(self):
        """Gets the stripe_setup_intent_secret of this PaymentMethod.


        :return: The stripe_setup_intent_secret of this PaymentMethod.
        :rtype: str
        """
        return self._stripe_setup_intent_secret

    @stripe_setup_intent_secret.setter
    def stripe_setup_intent_secret(self, stripe_setup_intent_secret):
        """Sets the stripe_setup_intent_secret of this PaymentMethod.


        :param stripe_setup_intent_secret: The stripe_setup_intent_secret of this PaymentMethod.
        :type stripe_setup_intent_secret: str
        """
        if stripe_setup_intent_secret is not None and len(stripe_setup_intent_secret) > 4096:
            raise ValueError("Invalid value for `stripe_setup_intent_secret`, length must be less than or equal to `4096`")

        self._stripe_setup_intent_secret = stripe_setup_intent_secret

    @property
    def updated_by(self):
        """Gets the updated_by of this PaymentMethod.


        :return: The updated_by of this PaymentMethod.
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this PaymentMethod.


        :param updated_by: The updated_by of this PaymentMethod.
        :type updated_by: str
        """
        if updated_by is None:
            raise ValueError("Invalid value for `updated_by`, must not be `None`")
        if updated_by is not None and len(updated_by) > 4096:
            raise ValueError("Invalid value for `updated_by`, length must be less than or equal to `4096`")

        self._updated_by = updated_by

    @property
    def updated_time(self):
        """Gets the updated_time of this PaymentMethod.


        :return: The updated_time of this PaymentMethod.
        :rtype: str
        """
        return self._updated_time

    @updated_time.setter
    def updated_time(self, updated_time):
        """Sets the updated_time of this PaymentMethod.


        :param updated_time: The updated_time of this PaymentMethod.
        :type updated_time: str
        """
        if updated_time is None:
            raise ValueError("Invalid value for `updated_time`, must not be `None`")
        if updated_time is not None and not re.search(r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$', updated_time):
            raise ValueError("Invalid value for `updated_time`, must be a follow pattern or equal to `/^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$/`")

        self._updated_time = updated_time
