# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class DeploymentEnvironmentsDeploymentEnvironmentsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, deployment_environment_id: str=None, description: str=None, model_deployment_units: int=None, name: str=None, organization_id: str=None, status: str=None):
        """DeploymentEnvironmentsDeploymentEnvironmentsInner - a model defined in OpenAPI

        :param deployment_environment_id: The deployment_environment_id of this DeploymentEnvironmentsDeploymentEnvironmentsInner.
        :param description: The description of this DeploymentEnvironmentsDeploymentEnvironmentsInner.
        :param model_deployment_units: The model_deployment_units of this DeploymentEnvironmentsDeploymentEnvironmentsInner.
        :param name: The name of this DeploymentEnvironmentsDeploymentEnvironmentsInner.
        :param organization_id: The organization_id of this DeploymentEnvironmentsDeploymentEnvironmentsInner.
        :param status: The status of this DeploymentEnvironmentsDeploymentEnvironmentsInner.
        """
        self.openapi_types = {
            'deployment_environment_id': str,
            'description': str,
            'model_deployment_units': int,
            'name': str,
            'organization_id': str,
            'status': str
        }

        self.attribute_map = {
            'deployment_environment_id': 'deploymentEnvironmentId',
            'description': 'description',
            'model_deployment_units': 'modelDeploymentUnits',
            'name': 'name',
            'organization_id': 'organizationId',
            'status': 'status'
        }

        self._deployment_environment_id = deployment_environment_id
        self._description = description
        self._model_deployment_units = model_deployment_units
        self._name = name
        self._organization_id = organization_id
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeploymentEnvironmentsDeploymentEnvironmentsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeploymentEnvironments_deploymentEnvironments_inner of this DeploymentEnvironmentsDeploymentEnvironmentsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def deployment_environment_id(self):
        """Gets the deployment_environment_id of this DeploymentEnvironmentsDeploymentEnvironmentsInner.


        :return: The deployment_environment_id of this DeploymentEnvironmentsDeploymentEnvironmentsInner.
        :rtype: str
        """
        return self._deployment_environment_id

    @deployment_environment_id.setter
    def deployment_environment_id(self, deployment_environment_id):
        """Sets the deployment_environment_id of this DeploymentEnvironmentsDeploymentEnvironmentsInner.


        :param deployment_environment_id: The deployment_environment_id of this DeploymentEnvironmentsDeploymentEnvironmentsInner.
        :type deployment_environment_id: str
        """
        if deployment_environment_id is None:
            raise ValueError("Invalid value for `deployment_environment_id`, must not be `None`")
        if deployment_environment_id is not None and not re.search(r'^las:deployment-environment:[a-z0-9-_]+(|:@[a-z0-9-_]+|:[0-9]+)$', deployment_environment_id):
            raise ValueError("Invalid value for `deployment_environment_id`, must be a follow pattern or equal to `/^las:deployment-environment:[a-z0-9-_]+(|:@[a-z0-9-_]+|:[0-9]+)$/`")

        self._deployment_environment_id = deployment_environment_id

    @property
    def description(self):
        """Gets the description of this DeploymentEnvironmentsDeploymentEnvironmentsInner.


        :return: The description of this DeploymentEnvironmentsDeploymentEnvironmentsInner.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DeploymentEnvironmentsDeploymentEnvironmentsInner.


        :param description: The description of this DeploymentEnvironmentsDeploymentEnvironmentsInner.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")
        if description is not None and len(description) > 4096:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `4096`")

        self._description = description

    @property
    def model_deployment_units(self):
        """Gets the model_deployment_units of this DeploymentEnvironmentsDeploymentEnvironmentsInner.


        :return: The model_deployment_units of this DeploymentEnvironmentsDeploymentEnvironmentsInner.
        :rtype: int
        """
        return self._model_deployment_units

    @model_deployment_units.setter
    def model_deployment_units(self, model_deployment_units):
        """Sets the model_deployment_units of this DeploymentEnvironmentsDeploymentEnvironmentsInner.


        :param model_deployment_units: The model_deployment_units of this DeploymentEnvironmentsDeploymentEnvironmentsInner.
        :type model_deployment_units: int
        """
        if model_deployment_units is None:
            raise ValueError("Invalid value for `model_deployment_units`, must not be `None`")
        if model_deployment_units is not None and model_deployment_units < 0:
            raise ValueError("Invalid value for `model_deployment_units`, must be a value greater than or equal to `0`")

        self._model_deployment_units = model_deployment_units

    @property
    def name(self):
        """Gets the name of this DeploymentEnvironmentsDeploymentEnvironmentsInner.


        :return: The name of this DeploymentEnvironmentsDeploymentEnvironmentsInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DeploymentEnvironmentsDeploymentEnvironmentsInner.


        :param name: The name of this DeploymentEnvironmentsDeploymentEnvironmentsInner.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 4096:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `4096`")

        self._name = name

    @property
    def organization_id(self):
        """Gets the organization_id of this DeploymentEnvironmentsDeploymentEnvironmentsInner.


        :return: The organization_id of this DeploymentEnvironmentsDeploymentEnvironmentsInner.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this DeploymentEnvironmentsDeploymentEnvironmentsInner.


        :param organization_id: The organization_id of this DeploymentEnvironmentsDeploymentEnvironmentsInner.
        :type organization_id: str
        """
        if organization_id is None:
            raise ValueError("Invalid value for `organization_id`, must not be `None`")
        if organization_id is not None and not re.search(r'^las:organization:[a-z0-9-_]+$', organization_id):
            raise ValueError("Invalid value for `organization_id`, must be a follow pattern or equal to `/^las:organization:[a-z0-9-_]+$/`")

        self._organization_id = organization_id

    @property
    def status(self):
        """Gets the status of this DeploymentEnvironmentsDeploymentEnvironmentsInner.


        :return: The status of this DeploymentEnvironmentsDeploymentEnvironmentsInner.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DeploymentEnvironmentsDeploymentEnvironmentsInner.


        :param status: The status of this DeploymentEnvironmentsDeploymentEnvironmentsInner.
        :type status: str
        """
        allowed_values = ["available", "unavailable"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
