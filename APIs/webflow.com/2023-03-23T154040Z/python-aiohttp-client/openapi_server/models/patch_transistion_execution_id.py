# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.patch_transistion_execution_id_any_of import PatchTransistionExecutionIdAnyOf
from openapi_server.models.patch_transistion_execution_id_any_of1 import PatchTransistionExecutionIdAnyOf1
import re
from openapi_server import util


class PatchTransistionExecutionId(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error: object=None, output: object=None, start_time: str=None, status: str=None):
        """PatchTransistionExecutionId - a model defined in OpenAPI

        :param error: The error of this PatchTransistionExecutionId.
        :param output: The output of this PatchTransistionExecutionId.
        :param start_time: The start_time of this PatchTransistionExecutionId.
        :param status: The status of this PatchTransistionExecutionId.
        """
        self.openapi_types = {
            'error': object,
            'output': object,
            'start_time': str,
            'status': str
        }

        self.attribute_map = {
            'error': 'error',
            'output': 'output',
            'start_time': 'startTime',
            'status': 'status'
        }

        self._error = error
        self._output = output
        self._start_time = start_time
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PatchTransistionExecutionId':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PatchTransistionExecutionId of this PatchTransistionExecutionId.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error(self):
        """Gets the error of this PatchTransistionExecutionId.


        :return: The error of this PatchTransistionExecutionId.
        :rtype: object
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this PatchTransistionExecutionId.


        :param error: The error of this PatchTransistionExecutionId.
        :type error: object
        """

        self._error = error

    @property
    def output(self):
        """Gets the output of this PatchTransistionExecutionId.


        :return: The output of this PatchTransistionExecutionId.
        :rtype: object
        """
        return self._output

    @output.setter
    def output(self, output):
        """Sets the output of this PatchTransistionExecutionId.


        :param output: The output of this PatchTransistionExecutionId.
        :type output: object
        """

        self._output = output

    @property
    def start_time(self):
        """Gets the start_time of this PatchTransistionExecutionId.


        :return: The start_time of this PatchTransistionExecutionId.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this PatchTransistionExecutionId.


        :param start_time: The start_time of this PatchTransistionExecutionId.
        :type start_time: str
        """
        if start_time is not None and not re.search(r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$', start_time):
            raise ValueError("Invalid value for `start_time`, must be a follow pattern or equal to `/^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$/`")

        self._start_time = start_time

    @property
    def status(self):
        """Gets the status of this PatchTransistionExecutionId.


        :return: The status of this PatchTransistionExecutionId.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PatchTransistionExecutionId.


        :param status: The status of this PatchTransistionExecutionId.
        :type status: str
        """

        self._status = status
