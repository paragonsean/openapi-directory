# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.workflow_completed_config import WorkflowCompletedConfig
from openapi_server.models.workflow_error_config import WorkflowErrorConfig
import re
from openapi_server import util


class Workflow(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, completed_config: WorkflowCompletedConfig=None, created_by: str=None, created_time: str=None, description: str=None, error_config: WorkflowErrorConfig=None, name: str=None, number_of_running_executions: int=None, updated_by: str=None, updated_time: str=None, workflow_id: str=None):
        """Workflow - a model defined in OpenAPI

        :param completed_config: The completed_config of this Workflow.
        :param created_by: The created_by of this Workflow.
        :param created_time: The created_time of this Workflow.
        :param description: The description of this Workflow.
        :param error_config: The error_config of this Workflow.
        :param name: The name of this Workflow.
        :param number_of_running_executions: The number_of_running_executions of this Workflow.
        :param updated_by: The updated_by of this Workflow.
        :param updated_time: The updated_time of this Workflow.
        :param workflow_id: The workflow_id of this Workflow.
        """
        self.openapi_types = {
            'completed_config': WorkflowCompletedConfig,
            'created_by': str,
            'created_time': str,
            'description': str,
            'error_config': WorkflowErrorConfig,
            'name': str,
            'number_of_running_executions': int,
            'updated_by': str,
            'updated_time': str,
            'workflow_id': str
        }

        self.attribute_map = {
            'completed_config': 'completedConfig',
            'created_by': 'createdBy',
            'created_time': 'createdTime',
            'description': 'description',
            'error_config': 'errorConfig',
            'name': 'name',
            'number_of_running_executions': 'numberOfRunningExecutions',
            'updated_by': 'updatedBy',
            'updated_time': 'updatedTime',
            'workflow_id': 'workflowId'
        }

        self._completed_config = completed_config
        self._created_by = created_by
        self._created_time = created_time
        self._description = description
        self._error_config = error_config
        self._name = name
        self._number_of_running_executions = number_of_running_executions
        self._updated_by = updated_by
        self._updated_time = updated_time
        self._workflow_id = workflow_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Workflow':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Workflow of this Workflow.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def completed_config(self):
        """Gets the completed_config of this Workflow.


        :return: The completed_config of this Workflow.
        :rtype: WorkflowCompletedConfig
        """
        return self._completed_config

    @completed_config.setter
    def completed_config(self, completed_config):
        """Sets the completed_config of this Workflow.


        :param completed_config: The completed_config of this Workflow.
        :type completed_config: WorkflowCompletedConfig
        """
        if completed_config is None:
            raise ValueError("Invalid value for `completed_config`, must not be `None`")

        self._completed_config = completed_config

    @property
    def created_by(self):
        """Gets the created_by of this Workflow.


        :return: The created_by of this Workflow.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Workflow.


        :param created_by: The created_by of this Workflow.
        :type created_by: str
        """
        if created_by is None:
            raise ValueError("Invalid value for `created_by`, must not be `None`")
        if created_by is not None and len(created_by) > 4096:
            raise ValueError("Invalid value for `created_by`, length must be less than or equal to `4096`")

        self._created_by = created_by

    @property
    def created_time(self):
        """Gets the created_time of this Workflow.


        :return: The created_time of this Workflow.
        :rtype: str
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this Workflow.


        :param created_time: The created_time of this Workflow.
        :type created_time: str
        """
        if created_time is None:
            raise ValueError("Invalid value for `created_time`, must not be `None`")
        if created_time is not None and not re.search(r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$', created_time):
            raise ValueError("Invalid value for `created_time`, must be a follow pattern or equal to `/^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$/`")

        self._created_time = created_time

    @property
    def description(self):
        """Gets the description of this Workflow.


        :return: The description of this Workflow.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Workflow.


        :param description: The description of this Workflow.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")
        if description is not None and len(description) > 4096:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `4096`")

        self._description = description

    @property
    def error_config(self):
        """Gets the error_config of this Workflow.


        :return: The error_config of this Workflow.
        :rtype: WorkflowErrorConfig
        """
        return self._error_config

    @error_config.setter
    def error_config(self, error_config):
        """Sets the error_config of this Workflow.


        :param error_config: The error_config of this Workflow.
        :type error_config: WorkflowErrorConfig
        """
        if error_config is None:
            raise ValueError("Invalid value for `error_config`, must not be `None`")

        self._error_config = error_config

    @property
    def name(self):
        """Gets the name of this Workflow.


        :return: The name of this Workflow.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Workflow.


        :param name: The name of this Workflow.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 4096:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `4096`")

        self._name = name

    @property
    def number_of_running_executions(self):
        """Gets the number_of_running_executions of this Workflow.


        :return: The number_of_running_executions of this Workflow.
        :rtype: int
        """
        return self._number_of_running_executions

    @number_of_running_executions.setter
    def number_of_running_executions(self, number_of_running_executions):
        """Sets the number_of_running_executions of this Workflow.


        :param number_of_running_executions: The number_of_running_executions of this Workflow.
        :type number_of_running_executions: int
        """
        if number_of_running_executions is None:
            raise ValueError("Invalid value for `number_of_running_executions`, must not be `None`")

        self._number_of_running_executions = number_of_running_executions

    @property
    def updated_by(self):
        """Gets the updated_by of this Workflow.


        :return: The updated_by of this Workflow.
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this Workflow.


        :param updated_by: The updated_by of this Workflow.
        :type updated_by: str
        """
        if updated_by is None:
            raise ValueError("Invalid value for `updated_by`, must not be `None`")
        if updated_by is not None and len(updated_by) > 4096:
            raise ValueError("Invalid value for `updated_by`, length must be less than or equal to `4096`")

        self._updated_by = updated_by

    @property
    def updated_time(self):
        """Gets the updated_time of this Workflow.


        :return: The updated_time of this Workflow.
        :rtype: str
        """
        return self._updated_time

    @updated_time.setter
    def updated_time(self, updated_time):
        """Sets the updated_time of this Workflow.


        :param updated_time: The updated_time of this Workflow.
        :type updated_time: str
        """
        if updated_time is None:
            raise ValueError("Invalid value for `updated_time`, must not be `None`")
        if updated_time is not None and not re.search(r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$', updated_time):
            raise ValueError("Invalid value for `updated_time`, must be a follow pattern or equal to `/^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$/`")

        self._updated_time = updated_time

    @property
    def workflow_id(self):
        """Gets the workflow_id of this Workflow.


        :return: The workflow_id of this Workflow.
        :rtype: str
        """
        return self._workflow_id

    @workflow_id.setter
    def workflow_id(self, workflow_id):
        """Sets the workflow_id of this Workflow.


        :param workflow_id: The workflow_id of this Workflow.
        :type workflow_id: str
        """
        if workflow_id is None:
            raise ValueError("Invalid value for `workflow_id`, must not be `None`")
        if workflow_id is not None and not re.search(r'^las:workflow:[a-f0-9]{32}$', workflow_id):
            raise ValueError("Invalid value for `workflow_id`, must be a follow pattern or equal to `/^las:workflow:[a-f0-9]{32}$/`")

        self._workflow_id = workflow_id
