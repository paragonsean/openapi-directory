# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.document_ground_truth_inner import DocumentGroundTruthInner
import re
from openapi_server import util


class PostDocuments(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, consent_id: str=None, content: str=None, content_type: str=None, dataset_id: str=None, description: str=None, ground_truth: List[DocumentGroundTruthInner]=None, metadata: object=None, name: str=None, retention_in_days: int=None):
        """PostDocuments - a model defined in OpenAPI

        :param consent_id: The consent_id of this PostDocuments.
        :param content: The content of this PostDocuments.
        :param content_type: The content_type of this PostDocuments.
        :param dataset_id: The dataset_id of this PostDocuments.
        :param description: The description of this PostDocuments.
        :param ground_truth: The ground_truth of this PostDocuments.
        :param metadata: The metadata of this PostDocuments.
        :param name: The name of this PostDocuments.
        :param retention_in_days: The retention_in_days of this PostDocuments.
        """
        self.openapi_types = {
            'consent_id': str,
            'content': str,
            'content_type': str,
            'dataset_id': str,
            'description': str,
            'ground_truth': List[DocumentGroundTruthInner],
            'metadata': object,
            'name': str,
            'retention_in_days': int
        }

        self.attribute_map = {
            'consent_id': 'consentId',
            'content': 'content',
            'content_type': 'contentType',
            'dataset_id': 'datasetId',
            'description': 'description',
            'ground_truth': 'groundTruth',
            'metadata': 'metadata',
            'name': 'name',
            'retention_in_days': 'retentionInDays'
        }

        self._consent_id = consent_id
        self._content = content
        self._content_type = content_type
        self._dataset_id = dataset_id
        self._description = description
        self._ground_truth = ground_truth
        self._metadata = metadata
        self._name = name
        self._retention_in_days = retention_in_days

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PostDocuments':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PostDocuments of this PostDocuments.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def consent_id(self):
        """Gets the consent_id of this PostDocuments.


        :return: The consent_id of this PostDocuments.
        :rtype: str
        """
        return self._consent_id

    @consent_id.setter
    def consent_id(self, consent_id):
        """Sets the consent_id of this PostDocuments.


        :param consent_id: The consent_id of this PostDocuments.
        :type consent_id: str
        """
        if consent_id is not None and not re.search(r'^las:consent:[a-f0-9]{32}$', consent_id):
            raise ValueError("Invalid value for `consent_id`, must be a follow pattern or equal to `/^las:consent:[a-f0-9]{32}$/`")

        self._consent_id = consent_id

    @property
    def content(self):
        """Gets the content of this PostDocuments.


        :return: The content of this PostDocuments.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this PostDocuments.


        :param content: The content of this PostDocuments.
        :type content: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")
        if content is not None and len(content) > 6250000:
            raise ValueError("Invalid value for `content`, length must be less than or equal to `6250000`")
        if content is not None and len(content) < 1:
            raise ValueError("Invalid value for `content`, length must be greater than or equal to `1`")

        self._content = content

    @property
    def content_type(self):
        """Gets the content_type of this PostDocuments.


        :return: The content_type of this PostDocuments.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this PostDocuments.


        :param content_type: The content_type of this PostDocuments.
        :type content_type: str
        """
        allowed_values = [None,"application/pdf", "image/jpeg", "image/png", "image/tiff"]  # noqa: E501
        if content_type not in allowed_values:
            raise ValueError(
                "Invalid value for `content_type` ({0}), must be one of {1}"
                .format(content_type, allowed_values)
            )

        self._content_type = content_type

    @property
    def dataset_id(self):
        """Gets the dataset_id of this PostDocuments.


        :return: The dataset_id of this PostDocuments.
        :rtype: str
        """
        return self._dataset_id

    @dataset_id.setter
    def dataset_id(self, dataset_id):
        """Sets the dataset_id of this PostDocuments.


        :param dataset_id: The dataset_id of this PostDocuments.
        :type dataset_id: str
        """
        if dataset_id is not None and not re.search(r'^las:dataset:[a-f0-9]{32}$', dataset_id):
            raise ValueError("Invalid value for `dataset_id`, must be a follow pattern or equal to `/^las:dataset:[a-f0-9]{32}$/`")

        self._dataset_id = dataset_id

    @property
    def description(self):
        """Gets the description of this PostDocuments.


        :return: The description of this PostDocuments.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PostDocuments.


        :param description: The description of this PostDocuments.
        :type description: str
        """
        if description is not None and len(description) > 4096:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `4096`")

        self._description = description

    @property
    def ground_truth(self):
        """Gets the ground_truth of this PostDocuments.


        :return: The ground_truth of this PostDocuments.
        :rtype: List[DocumentGroundTruthInner]
        """
        return self._ground_truth

    @ground_truth.setter
    def ground_truth(self, ground_truth):
        """Sets the ground_truth of this PostDocuments.


        :param ground_truth: The ground_truth of this PostDocuments.
        :type ground_truth: List[DocumentGroundTruthInner]
        """

        self._ground_truth = ground_truth

    @property
    def metadata(self):
        """Gets the metadata of this PostDocuments.


        :return: The metadata of this PostDocuments.
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this PostDocuments.


        :param metadata: The metadata of this PostDocuments.
        :type metadata: object
        """

        self._metadata = metadata

    @property
    def name(self):
        """Gets the name of this PostDocuments.


        :return: The name of this PostDocuments.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PostDocuments.


        :param name: The name of this PostDocuments.
        :type name: str
        """
        if name is not None and len(name) > 4096:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `4096`")

        self._name = name

    @property
    def retention_in_days(self):
        """Gets the retention_in_days of this PostDocuments.


        :return: The retention_in_days of this PostDocuments.
        :rtype: int
        """
        return self._retention_in_days

    @retention_in_days.setter
    def retention_in_days(self, retention_in_days):
        """Sets the retention_in_days of this PostDocuments.


        :param retention_in_days: The retention_in_days of this PostDocuments.
        :type retention_in_days: int
        """
        if retention_in_days is not None and retention_in_days < 1:
            raise ValueError("Invalid value for `retention_in_days`, must be a value greater than or equal to `1`")

        self._retention_in_days = retention_in_days
