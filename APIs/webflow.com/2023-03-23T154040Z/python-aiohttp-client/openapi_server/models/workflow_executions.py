# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.workflow_executions_executions_inner import WorkflowExecutionsExecutionsInner
import re
from openapi_server import util


class WorkflowExecutions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, executions: List[WorkflowExecutionsExecutionsInner]=None, next_token: str=None, order: str=None, sort_by: str=None, status: List[str]=None, workflow_id: str=None):
        """WorkflowExecutions - a model defined in OpenAPI

        :param executions: The executions of this WorkflowExecutions.
        :param next_token: The next_token of this WorkflowExecutions.
        :param order: The order of this WorkflowExecutions.
        :param sort_by: The sort_by of this WorkflowExecutions.
        :param status: The status of this WorkflowExecutions.
        :param workflow_id: The workflow_id of this WorkflowExecutions.
        """
        self.openapi_types = {
            'executions': List[WorkflowExecutionsExecutionsInner],
            'next_token': str,
            'order': str,
            'sort_by': str,
            'status': List[str],
            'workflow_id': str
        }

        self.attribute_map = {
            'executions': 'executions',
            'next_token': 'nextToken',
            'order': 'order',
            'sort_by': 'sortBy',
            'status': 'status',
            'workflow_id': 'workflowId'
        }

        self._executions = executions
        self._next_token = next_token
        self._order = order
        self._sort_by = sort_by
        self._status = status
        self._workflow_id = workflow_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WorkflowExecutions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WorkflowExecutions of this WorkflowExecutions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def executions(self):
        """Gets the executions of this WorkflowExecutions.


        :return: The executions of this WorkflowExecutions.
        :rtype: List[WorkflowExecutionsExecutionsInner]
        """
        return self._executions

    @executions.setter
    def executions(self, executions):
        """Sets the executions of this WorkflowExecutions.


        :param executions: The executions of this WorkflowExecutions.
        :type executions: List[WorkflowExecutionsExecutionsInner]
        """
        if executions is None:
            raise ValueError("Invalid value for `executions`, must not be `None`")

        self._executions = executions

    @property
    def next_token(self):
        """Gets the next_token of this WorkflowExecutions.


        :return: The next_token of this WorkflowExecutions.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this WorkflowExecutions.


        :param next_token: The next_token of this WorkflowExecutions.
        :type next_token: str
        """
        if next_token is None:
            raise ValueError("Invalid value for `next_token`, must not be `None`")
        if next_token is not None and len(next_token) > 4096:
            raise ValueError("Invalid value for `next_token`, length must be less than or equal to `4096`")

        self._next_token = next_token

    @property
    def order(self):
        """Gets the order of this WorkflowExecutions.


        :return: The order of this WorkflowExecutions.
        :rtype: str
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this WorkflowExecutions.


        :param order: The order of this WorkflowExecutions.
        :type order: str
        """
        allowed_values = ["ascending", "descending"]  # noqa: E501
        if order not in allowed_values:
            raise ValueError(
                "Invalid value for `order` ({0}), must be one of {1}"
                .format(order, allowed_values)
            )

        self._order = order

    @property
    def sort_by(self):
        """Gets the sort_by of this WorkflowExecutions.


        :return: The sort_by of this WorkflowExecutions.
        :rtype: str
        """
        return self._sort_by

    @sort_by.setter
    def sort_by(self, sort_by):
        """Sets the sort_by of this WorkflowExecutions.


        :param sort_by: The sort_by of this WorkflowExecutions.
        :type sort_by: str
        """
        allowed_values = ["startTime", "endTime"]  # noqa: E501
        if sort_by not in allowed_values:
            raise ValueError(
                "Invalid value for `sort_by` ({0}), must be one of {1}"
                .format(sort_by, allowed_values)
            )

        self._sort_by = sort_by

    @property
    def status(self):
        """Gets the status of this WorkflowExecutions.


        :return: The status of this WorkflowExecutions.
        :rtype: List[str]
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this WorkflowExecutions.


        :param status: The status of this WorkflowExecutions.
        :type status: List[str]
        """
        allowed_values = ["running", "succeeded", "failed", "rejected", "retry", "error"]  # noqa: E501
        if not set(status).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `status` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(status) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._status = status

    @property
    def workflow_id(self):
        """Gets the workflow_id of this WorkflowExecutions.


        :return: The workflow_id of this WorkflowExecutions.
        :rtype: str
        """
        return self._workflow_id

    @workflow_id.setter
    def workflow_id(self, workflow_id):
        """Sets the workflow_id of this WorkflowExecutions.


        :param workflow_id: The workflow_id of this WorkflowExecutions.
        :type workflow_id: str
        """
        if workflow_id is None:
            raise ValueError("Invalid value for `workflow_id`, must not be `None`")
        if workflow_id is not None and not re.search(r'^las:workflow:[a-f0-9]{32}$', workflow_id):
            raise ValueError("Invalid value for `workflow_id`, must be a follow pattern or equal to `/^las:workflow:[a-f0-9]{32}$/`")

        self._workflow_id = workflow_id
