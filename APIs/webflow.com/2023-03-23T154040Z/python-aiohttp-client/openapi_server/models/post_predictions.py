# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.model_postprocess_config import ModelPostprocessConfig
import re
from openapi_server import util


class PostPredictions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auto_rotate: bool=None, document_id: str=None, image_quality: str=None, max_pages: int=None, model_id: str=None, postprocess_config: ModelPostprocessConfig=None, rotation: int=None, training_id: str=None):
        """PostPredictions - a model defined in OpenAPI

        :param auto_rotate: The auto_rotate of this PostPredictions.
        :param document_id: The document_id of this PostPredictions.
        :param image_quality: The image_quality of this PostPredictions.
        :param max_pages: The max_pages of this PostPredictions.
        :param model_id: The model_id of this PostPredictions.
        :param postprocess_config: The postprocess_config of this PostPredictions.
        :param rotation: The rotation of this PostPredictions.
        :param training_id: The training_id of this PostPredictions.
        """
        self.openapi_types = {
            'auto_rotate': bool,
            'document_id': str,
            'image_quality': str,
            'max_pages': int,
            'model_id': str,
            'postprocess_config': ModelPostprocessConfig,
            'rotation': int,
            'training_id': str
        }

        self.attribute_map = {
            'auto_rotate': 'autoRotate',
            'document_id': 'documentId',
            'image_quality': 'imageQuality',
            'max_pages': 'maxPages',
            'model_id': 'modelId',
            'postprocess_config': 'postprocessConfig',
            'rotation': 'rotation',
            'training_id': 'trainingId'
        }

        self._auto_rotate = auto_rotate
        self._document_id = document_id
        self._image_quality = image_quality
        self._max_pages = max_pages
        self._model_id = model_id
        self._postprocess_config = postprocess_config
        self._rotation = rotation
        self._training_id = training_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PostPredictions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PostPredictions of this PostPredictions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auto_rotate(self):
        """Gets the auto_rotate of this PostPredictions.


        :return: The auto_rotate of this PostPredictions.
        :rtype: bool
        """
        return self._auto_rotate

    @auto_rotate.setter
    def auto_rotate(self, auto_rotate):
        """Sets the auto_rotate of this PostPredictions.


        :param auto_rotate: The auto_rotate of this PostPredictions.
        :type auto_rotate: bool
        """

        self._auto_rotate = auto_rotate

    @property
    def document_id(self):
        """Gets the document_id of this PostPredictions.


        :return: The document_id of this PostPredictions.
        :rtype: str
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id):
        """Sets the document_id of this PostPredictions.


        :param document_id: The document_id of this PostPredictions.
        :type document_id: str
        """
        if document_id is None:
            raise ValueError("Invalid value for `document_id`, must not be `None`")
        if document_id is not None and not re.search(r'^las:document:[a-f0-9]{32}$', document_id):
            raise ValueError("Invalid value for `document_id`, must be a follow pattern or equal to `/^las:document:[a-f0-9]{32}$/`")

        self._document_id = document_id

    @property
    def image_quality(self):
        """Gets the image_quality of this PostPredictions.


        :return: The image_quality of this PostPredictions.
        :rtype: str
        """
        return self._image_quality

    @image_quality.setter
    def image_quality(self, image_quality):
        """Sets the image_quality of this PostPredictions.


        :param image_quality: The image_quality of this PostPredictions.
        :type image_quality: str
        """
        allowed_values = ["LOW", "HIGH"]  # noqa: E501
        if image_quality not in allowed_values:
            raise ValueError(
                "Invalid value for `image_quality` ({0}), must be one of {1}"
                .format(image_quality, allowed_values)
            )

        self._image_quality = image_quality

    @property
    def max_pages(self):
        """Gets the max_pages of this PostPredictions.


        :return: The max_pages of this PostPredictions.
        :rtype: int
        """
        return self._max_pages

    @max_pages.setter
    def max_pages(self, max_pages):
        """Sets the max_pages of this PostPredictions.


        :param max_pages: The max_pages of this PostPredictions.
        :type max_pages: int
        """
        if max_pages is not None and max_pages > 3:
            raise ValueError("Invalid value for `max_pages`, must be a value less than or equal to `3`")
        if max_pages is not None and max_pages < 1:
            raise ValueError("Invalid value for `max_pages`, must be a value greater than or equal to `1`")

        self._max_pages = max_pages

    @property
    def model_id(self):
        """Gets the model_id of this PostPredictions.


        :return: The model_id of this PostPredictions.
        :rtype: str
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id):
        """Sets the model_id of this PostPredictions.


        :param model_id: The model_id of this PostPredictions.
        :type model_id: str
        """
        if model_id is None:
            raise ValueError("Invalid value for `model_id`, must not be `None`")
        if model_id is not None and not re.search(r'^(|las:organization:[a-z0-9-_]+\/)las:model:[a-z0-9-_]+$', model_id):
            raise ValueError("Invalid value for `model_id`, must be a follow pattern or equal to `/^(|las:organization:[a-z0-9-_]+\/)las:model:[a-z0-9-_]+$/`")

        self._model_id = model_id

    @property
    def postprocess_config(self):
        """Gets the postprocess_config of this PostPredictions.


        :return: The postprocess_config of this PostPredictions.
        :rtype: ModelPostprocessConfig
        """
        return self._postprocess_config

    @postprocess_config.setter
    def postprocess_config(self, postprocess_config):
        """Sets the postprocess_config of this PostPredictions.


        :param postprocess_config: The postprocess_config of this PostPredictions.
        :type postprocess_config: ModelPostprocessConfig
        """

        self._postprocess_config = postprocess_config

    @property
    def rotation(self):
        """Gets the rotation of this PostPredictions.


        :return: The rotation of this PostPredictions.
        :rtype: int
        """
        return self._rotation

    @rotation.setter
    def rotation(self, rotation):
        """Sets the rotation of this PostPredictions.


        :param rotation: The rotation of this PostPredictions.
        :type rotation: int
        """
        allowed_values = [0, 90, 180, 270]  # noqa: E501
        if rotation not in allowed_values:
            raise ValueError(
                "Invalid value for `rotation` ({0}), must be one of {1}"
                .format(rotation, allowed_values)
            )

        self._rotation = rotation

    @property
    def training_id(self):
        """Gets the training_id of this PostPredictions.


        :return: The training_id of this PostPredictions.
        :rtype: str
        """
        return self._training_id

    @training_id.setter
    def training_id(self, training_id):
        """Sets the training_id of this PostPredictions.


        :param training_id: The training_id of this PostPredictions.
        :type training_id: str
        """
        if training_id is not None and not re.search(r'^las:model-training:[a-f0-9]{32}$', training_id):
            raise ValueError("Invalid value for `training_id`, must be a follow pattern or equal to `/^las:model-training:[a-f0-9]{32}$/`")

        self._training_id = training_id
