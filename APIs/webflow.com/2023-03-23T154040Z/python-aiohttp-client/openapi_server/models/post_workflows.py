# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.patch_workflow_id_completed_config import PatchWorkflowIdCompletedConfig
from openapi_server.models.patch_workflow_id_error_config import PatchWorkflowIdErrorConfig
from openapi_server.models.post_workflows_specification import PostWorkflowsSpecification
from openapi_server import util


class PostWorkflows(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, completed_config: PatchWorkflowIdCompletedConfig=None, description: str=None, error_config: PatchWorkflowIdErrorConfig=None, name: str=None, specification: PostWorkflowsSpecification=None):
        """PostWorkflows - a model defined in OpenAPI

        :param completed_config: The completed_config of this PostWorkflows.
        :param description: The description of this PostWorkflows.
        :param error_config: The error_config of this PostWorkflows.
        :param name: The name of this PostWorkflows.
        :param specification: The specification of this PostWorkflows.
        """
        self.openapi_types = {
            'completed_config': PatchWorkflowIdCompletedConfig,
            'description': str,
            'error_config': PatchWorkflowIdErrorConfig,
            'name': str,
            'specification': PostWorkflowsSpecification
        }

        self.attribute_map = {
            'completed_config': 'completedConfig',
            'description': 'description',
            'error_config': 'errorConfig',
            'name': 'name',
            'specification': 'specification'
        }

        self._completed_config = completed_config
        self._description = description
        self._error_config = error_config
        self._name = name
        self._specification = specification

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PostWorkflows':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PostWorkflows of this PostWorkflows.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def completed_config(self):
        """Gets the completed_config of this PostWorkflows.


        :return: The completed_config of this PostWorkflows.
        :rtype: PatchWorkflowIdCompletedConfig
        """
        return self._completed_config

    @completed_config.setter
    def completed_config(self, completed_config):
        """Sets the completed_config of this PostWorkflows.


        :param completed_config: The completed_config of this PostWorkflows.
        :type completed_config: PatchWorkflowIdCompletedConfig
        """

        self._completed_config = completed_config

    @property
    def description(self):
        """Gets the description of this PostWorkflows.


        :return: The description of this PostWorkflows.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PostWorkflows.


        :param description: The description of this PostWorkflows.
        :type description: str
        """
        if description is not None and len(description) > 4096:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `4096`")

        self._description = description

    @property
    def error_config(self):
        """Gets the error_config of this PostWorkflows.


        :return: The error_config of this PostWorkflows.
        :rtype: PatchWorkflowIdErrorConfig
        """
        return self._error_config

    @error_config.setter
    def error_config(self, error_config):
        """Sets the error_config of this PostWorkflows.


        :param error_config: The error_config of this PostWorkflows.
        :type error_config: PatchWorkflowIdErrorConfig
        """

        self._error_config = error_config

    @property
    def name(self):
        """Gets the name of this PostWorkflows.


        :return: The name of this PostWorkflows.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PostWorkflows.


        :param name: The name of this PostWorkflows.
        :type name: str
        """
        if name is not None and len(name) > 4096:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `4096`")

        self._name = name

    @property
    def specification(self):
        """Gets the specification of this PostWorkflows.


        :return: The specification of this PostWorkflows.
        :rtype: PostWorkflowsSpecification
        """
        return self._specification

    @specification.setter
    def specification(self, specification):
        """Sets the specification of this PostWorkflows.


        :param specification: The specification of this PostWorkflows.
        :type specification: PostWorkflowsSpecification
        """
        if specification is None:
            raise ValueError("Invalid value for `specification`, must not be `None`")

        self._specification = specification
