# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.assets_assets_inner import AssetsAssetsInner
from openapi_server import util


class Assets(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assets: List[AssetsAssetsInner]=None, next_token: str=None):
        """Assets - a model defined in OpenAPI

        :param assets: The assets of this Assets.
        :param next_token: The next_token of this Assets.
        """
        self.openapi_types = {
            'assets': List[AssetsAssetsInner],
            'next_token': str
        }

        self.attribute_map = {
            'assets': 'assets',
            'next_token': 'nextToken'
        }

        self._assets = assets
        self._next_token = next_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Assets':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Assets of this Assets.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assets(self):
        """Gets the assets of this Assets.


        :return: The assets of this Assets.
        :rtype: List[AssetsAssetsInner]
        """
        return self._assets

    @assets.setter
    def assets(self, assets):
        """Sets the assets of this Assets.


        :param assets: The assets of this Assets.
        :type assets: List[AssetsAssetsInner]
        """
        if assets is None:
            raise ValueError("Invalid value for `assets`, must not be `None`")

        self._assets = assets

    @property
    def next_token(self):
        """Gets the next_token of this Assets.


        :return: The next_token of this Assets.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this Assets.


        :param next_token: The next_token of this Assets.
        :type next_token: str
        """
        if next_token is None:
            raise ValueError("Invalid value for `next_token`, must not be `None`")
        if next_token is not None and len(next_token) > 4096:
            raise ValueError("Invalid value for `next_token`, length must be less than or equal to `4096`")

        self._next_token = next_token
