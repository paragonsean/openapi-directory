# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class PostUsers(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_client_id: str=None, avatar: str=None, email: str=None, metadata: object=None, name: str=None):
        """PostUsers - a model defined in OpenAPI

        :param app_client_id: The app_client_id of this PostUsers.
        :param avatar: The avatar of this PostUsers.
        :param email: The email of this PostUsers.
        :param metadata: The metadata of this PostUsers.
        :param name: The name of this PostUsers.
        """
        self.openapi_types = {
            'app_client_id': str,
            'avatar': str,
            'email': str,
            'metadata': object,
            'name': str
        }

        self.attribute_map = {
            'app_client_id': 'appClientId',
            'avatar': 'avatar',
            'email': 'email',
            'metadata': 'metadata',
            'name': 'name'
        }

        self._app_client_id = app_client_id
        self._avatar = avatar
        self._email = email
        self._metadata = metadata
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PostUsers':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PostUsers of this PostUsers.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_client_id(self):
        """Gets the app_client_id of this PostUsers.


        :return: The app_client_id of this PostUsers.
        :rtype: str
        """
        return self._app_client_id

    @app_client_id.setter
    def app_client_id(self, app_client_id):
        """Sets the app_client_id of this PostUsers.


        :param app_client_id: The app_client_id of this PostUsers.
        :type app_client_id: str
        """
        if app_client_id is not None and not re.search(r'^las:app-client:[a-z0-9-_]+$', app_client_id):
            raise ValueError("Invalid value for `app_client_id`, must be a follow pattern or equal to `/^las:app-client:[a-z0-9-_]+$/`")

        self._app_client_id = app_client_id

    @property
    def avatar(self):
        """Gets the avatar of this PostUsers.


        :return: The avatar of this PostUsers.
        :rtype: str
        """
        return self._avatar

    @avatar.setter
    def avatar(self, avatar):
        """Sets the avatar of this PostUsers.


        :param avatar: The avatar of this PostUsers.
        :type avatar: str
        """
        if avatar is not None and len(avatar) > 131072:
            raise ValueError("Invalid value for `avatar`, length must be less than or equal to `131072`")

        self._avatar = avatar

    @property
    def email(self):
        """Gets the email of this PostUsers.


        :return: The email of this PostUsers.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this PostUsers.


        :param email: The email of this PostUsers.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")
        if email is not None and not re.search(r'^[A-Za-z0-9][-+._A-Za-z0-9]*@([-_.A-Za-z0-9]+\.)+[A-Za-z]{2,}$', email):
            raise ValueError("Invalid value for `email`, must be a follow pattern or equal to `/^[A-Za-z0-9][-+._A-Za-z0-9]*@([-_.A-Za-z0-9]+\.)+[A-Za-z]{2,}$/`")

        self._email = email

    @property
    def metadata(self):
        """Gets the metadata of this PostUsers.


        :return: The metadata of this PostUsers.
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this PostUsers.


        :param metadata: The metadata of this PostUsers.
        :type metadata: object
        """

        self._metadata = metadata

    @property
    def name(self):
        """Gets the name of this PostUsers.


        :return: The name of this PostUsers.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PostUsers.


        :param name: The name of this PostUsers.
        :type name: str
        """
        if name is not None and len(name) > 4096:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `4096`")

        self._name = name
