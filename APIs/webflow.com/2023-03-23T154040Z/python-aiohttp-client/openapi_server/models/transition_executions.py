# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.logs_transition_id import LogsTransitionId
from openapi_server.models.transition_executions_executions_inner import TransitionExecutionsExecutionsInner
from openapi_server import util


class TransitionExecutions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, executions: List[TransitionExecutionsExecutionsInner]=None, next_token: str=None, status: List[str]=None, transition_id: LogsTransitionId=None):
        """TransitionExecutions - a model defined in OpenAPI

        :param executions: The executions of this TransitionExecutions.
        :param next_token: The next_token of this TransitionExecutions.
        :param status: The status of this TransitionExecutions.
        :param transition_id: The transition_id of this TransitionExecutions.
        """
        self.openapi_types = {
            'executions': List[TransitionExecutionsExecutionsInner],
            'next_token': str,
            'status': List[str],
            'transition_id': LogsTransitionId
        }

        self.attribute_map = {
            'executions': 'executions',
            'next_token': 'nextToken',
            'status': 'status',
            'transition_id': 'transitionId'
        }

        self._executions = executions
        self._next_token = next_token
        self._status = status
        self._transition_id = transition_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransitionExecutions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransitionExecutions of this TransitionExecutions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def executions(self):
        """Gets the executions of this TransitionExecutions.


        :return: The executions of this TransitionExecutions.
        :rtype: List[TransitionExecutionsExecutionsInner]
        """
        return self._executions

    @executions.setter
    def executions(self, executions):
        """Sets the executions of this TransitionExecutions.


        :param executions: The executions of this TransitionExecutions.
        :type executions: List[TransitionExecutionsExecutionsInner]
        """
        if executions is None:
            raise ValueError("Invalid value for `executions`, must not be `None`")

        self._executions = executions

    @property
    def next_token(self):
        """Gets the next_token of this TransitionExecutions.


        :return: The next_token of this TransitionExecutions.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this TransitionExecutions.


        :param next_token: The next_token of this TransitionExecutions.
        :type next_token: str
        """
        if next_token is None:
            raise ValueError("Invalid value for `next_token`, must not be `None`")
        if next_token is not None and len(next_token) > 4096:
            raise ValueError("Invalid value for `next_token`, length must be less than or equal to `4096`")

        self._next_token = next_token

    @property
    def status(self):
        """Gets the status of this TransitionExecutions.


        :return: The status of this TransitionExecutions.
        :rtype: List[str]
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TransitionExecutions.


        :param status: The status of this TransitionExecutions.
        :type status: List[str]
        """
        allowed_values = ["running", "succeeded", "failed", "rejected", "retry"]  # noqa: E501
        if not set(status).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `status` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(status) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._status = status

    @property
    def transition_id(self):
        """Gets the transition_id of this TransitionExecutions.


        :return: The transition_id of this TransitionExecutions.
        :rtype: LogsTransitionId
        """
        return self._transition_id

    @transition_id.setter
    def transition_id(self, transition_id):
        """Sets the transition_id of this TransitionExecutions.


        :param transition_id: The transition_id of this TransitionExecutions.
        :type transition_id: LogsTransitionId
        """
        if transition_id is None:
            raise ValueError("Invalid value for `transition_id`, must not be `None`")

        self._transition_id = transition_id
