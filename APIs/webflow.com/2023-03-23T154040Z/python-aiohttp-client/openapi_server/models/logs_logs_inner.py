# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.log_transition_id import LogTransitionId
import re
from openapi_server import util


class LogsLogsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, events: List[object]=None, log_id: str=None, start_time: str=None, transition_execution_id: str=None, transition_id: LogTransitionId=None, workflow_execution_id: str=None, workflow_id: str=None):
        """LogsLogsInner - a model defined in OpenAPI

        :param events: The events of this LogsLogsInner.
        :param log_id: The log_id of this LogsLogsInner.
        :param start_time: The start_time of this LogsLogsInner.
        :param transition_execution_id: The transition_execution_id of this LogsLogsInner.
        :param transition_id: The transition_id of this LogsLogsInner.
        :param workflow_execution_id: The workflow_execution_id of this LogsLogsInner.
        :param workflow_id: The workflow_id of this LogsLogsInner.
        """
        self.openapi_types = {
            'events': List[object],
            'log_id': str,
            'start_time': str,
            'transition_execution_id': str,
            'transition_id': LogTransitionId,
            'workflow_execution_id': str,
            'workflow_id': str
        }

        self.attribute_map = {
            'events': 'events',
            'log_id': 'logId',
            'start_time': 'startTime',
            'transition_execution_id': 'transitionExecutionId',
            'transition_id': 'transitionId',
            'workflow_execution_id': 'workflowExecutionId',
            'workflow_id': 'workflowId'
        }

        self._events = events
        self._log_id = log_id
        self._start_time = start_time
        self._transition_execution_id = transition_execution_id
        self._transition_id = transition_id
        self._workflow_execution_id = workflow_execution_id
        self._workflow_id = workflow_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LogsLogsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Logs_logs_inner of this LogsLogsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def events(self):
        """Gets the events of this LogsLogsInner.


        :return: The events of this LogsLogsInner.
        :rtype: List[object]
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this LogsLogsInner.


        :param events: The events of this LogsLogsInner.
        :type events: List[object]
        """

        self._events = events

    @property
    def log_id(self):
        """Gets the log_id of this LogsLogsInner.


        :return: The log_id of this LogsLogsInner.
        :rtype: str
        """
        return self._log_id

    @log_id.setter
    def log_id(self, log_id):
        """Sets the log_id of this LogsLogsInner.


        :param log_id: The log_id of this LogsLogsInner.
        :type log_id: str
        """
        if log_id is None:
            raise ValueError("Invalid value for `log_id`, must not be `None`")
        if log_id is not None and not re.search(r'^las:log:[a-f0-9]{32}$', log_id):
            raise ValueError("Invalid value for `log_id`, must be a follow pattern or equal to `/^las:log:[a-f0-9]{32}$/`")

        self._log_id = log_id

    @property
    def start_time(self):
        """Gets the start_time of this LogsLogsInner.


        :return: The start_time of this LogsLogsInner.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this LogsLogsInner.


        :param start_time: The start_time of this LogsLogsInner.
        :type start_time: str
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")
        if start_time is not None and not re.search(r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$', start_time):
            raise ValueError("Invalid value for `start_time`, must be a follow pattern or equal to `/^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$/`")

        self._start_time = start_time

    @property
    def transition_execution_id(self):
        """Gets the transition_execution_id of this LogsLogsInner.


        :return: The transition_execution_id of this LogsLogsInner.
        :rtype: str
        """
        return self._transition_execution_id

    @transition_execution_id.setter
    def transition_execution_id(self, transition_execution_id):
        """Sets the transition_execution_id of this LogsLogsInner.


        :param transition_execution_id: The transition_execution_id of this LogsLogsInner.
        :type transition_execution_id: str
        """
        if transition_execution_id is None:
            raise ValueError("Invalid value for `transition_execution_id`, must not be `None`")
        if transition_execution_id is not None and not re.search(r'^las:transition-execution:[a-f0-9]{32}$', transition_execution_id):
            raise ValueError("Invalid value for `transition_execution_id`, must be a follow pattern or equal to `/^las:transition-execution:[a-f0-9]{32}$/`")

        self._transition_execution_id = transition_execution_id

    @property
    def transition_id(self):
        """Gets the transition_id of this LogsLogsInner.


        :return: The transition_id of this LogsLogsInner.
        :rtype: LogTransitionId
        """
        return self._transition_id

    @transition_id.setter
    def transition_id(self, transition_id):
        """Sets the transition_id of this LogsLogsInner.


        :param transition_id: The transition_id of this LogsLogsInner.
        :type transition_id: LogTransitionId
        """
        if transition_id is None:
            raise ValueError("Invalid value for `transition_id`, must not be `None`")

        self._transition_id = transition_id

    @property
    def workflow_execution_id(self):
        """Gets the workflow_execution_id of this LogsLogsInner.


        :return: The workflow_execution_id of this LogsLogsInner.
        :rtype: str
        """
        return self._workflow_execution_id

    @workflow_execution_id.setter
    def workflow_execution_id(self, workflow_execution_id):
        """Sets the workflow_execution_id of this LogsLogsInner.


        :param workflow_execution_id: The workflow_execution_id of this LogsLogsInner.
        :type workflow_execution_id: str
        """
        if workflow_execution_id is None:
            raise ValueError("Invalid value for `workflow_execution_id`, must not be `None`")
        if workflow_execution_id is not None and not re.search(r'^las:workflow-execution:[a-f0-9]{32}$', workflow_execution_id):
            raise ValueError("Invalid value for `workflow_execution_id`, must be a follow pattern or equal to `/^las:workflow-execution:[a-f0-9]{32}$/`")

        self._workflow_execution_id = workflow_execution_id

    @property
    def workflow_id(self):
        """Gets the workflow_id of this LogsLogsInner.


        :return: The workflow_id of this LogsLogsInner.
        :rtype: str
        """
        return self._workflow_id

    @workflow_id.setter
    def workflow_id(self, workflow_id):
        """Sets the workflow_id of this LogsLogsInner.


        :param workflow_id: The workflow_id of this LogsLogsInner.
        :type workflow_id: str
        """
        if workflow_id is None:
            raise ValueError("Invalid value for `workflow_id`, must not be `None`")
        if workflow_id is not None and not re.search(r'^las:workflow:[a-f0-9]{32}$', workflow_id):
            raise ValueError("Invalid value for `workflow_id`, must be a follow pattern or equal to `/^las:workflow:[a-f0-9]{32}$/`")

        self._workflow_id = workflow_id
