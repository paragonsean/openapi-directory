# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.models_models_inner import ModelsModelsInner
from openapi_server import util


class Models(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, models: List[ModelsModelsInner]=None, next_token: str=None):
        """Models - a model defined in OpenAPI

        :param models: The models of this Models.
        :param next_token: The next_token of this Models.
        """
        self.openapi_types = {
            'models': List[ModelsModelsInner],
            'next_token': str
        }

        self.attribute_map = {
            'models': 'models',
            'next_token': 'nextToken'
        }

        self._models = models
        self._next_token = next_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Models':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Models of this Models.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def models(self):
        """Gets the models of this Models.


        :return: The models of this Models.
        :rtype: List[ModelsModelsInner]
        """
        return self._models

    @models.setter
    def models(self, models):
        """Sets the models of this Models.


        :param models: The models of this Models.
        :type models: List[ModelsModelsInner]
        """
        if models is None:
            raise ValueError("Invalid value for `models`, must not be `None`")

        self._models = models

    @property
    def next_token(self):
        """Gets the next_token of this Models.


        :return: The next_token of this Models.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this Models.


        :param next_token: The next_token of this Models.
        :type next_token: str
        """
        if next_token is None:
            raise ValueError("Invalid value for `next_token`, must not be `None`")
        if next_token is not None and len(next_token) > 4096:
            raise ValueError("Invalid value for `next_token`, length must be less than or equal to `4096`")

        self._next_token = next_token
