# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.predictions_predictions_inner import PredictionsPredictionsInner
from openapi_server import util


class Predictions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, next_token: str=None, order: str=None, predictions: List[PredictionsPredictionsInner]=None, sort_by: str=None):
        """Predictions - a model defined in OpenAPI

        :param next_token: The next_token of this Predictions.
        :param order: The order of this Predictions.
        :param predictions: The predictions of this Predictions.
        :param sort_by: The sort_by of this Predictions.
        """
        self.openapi_types = {
            'next_token': str,
            'order': str,
            'predictions': List[PredictionsPredictionsInner],
            'sort_by': str
        }

        self.attribute_map = {
            'next_token': 'nextToken',
            'order': 'order',
            'predictions': 'predictions',
            'sort_by': 'sortBy'
        }

        self._next_token = next_token
        self._order = order
        self._predictions = predictions
        self._sort_by = sort_by

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Predictions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Predictions of this Predictions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def next_token(self):
        """Gets the next_token of this Predictions.


        :return: The next_token of this Predictions.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this Predictions.


        :param next_token: The next_token of this Predictions.
        :type next_token: str
        """
        if next_token is None:
            raise ValueError("Invalid value for `next_token`, must not be `None`")
        if next_token is not None and len(next_token) > 4096:
            raise ValueError("Invalid value for `next_token`, length must be less than or equal to `4096`")

        self._next_token = next_token

    @property
    def order(self):
        """Gets the order of this Predictions.


        :return: The order of this Predictions.
        :rtype: str
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this Predictions.


        :param order: The order of this Predictions.
        :type order: str
        """
        allowed_values = ["ascending", "descending"]  # noqa: E501
        if order not in allowed_values:
            raise ValueError(
                "Invalid value for `order` ({0}), must be one of {1}"
                .format(order, allowed_values)
            )

        self._order = order

    @property
    def predictions(self):
        """Gets the predictions of this Predictions.


        :return: The predictions of this Predictions.
        :rtype: List[PredictionsPredictionsInner]
        """
        return self._predictions

    @predictions.setter
    def predictions(self, predictions):
        """Sets the predictions of this Predictions.


        :param predictions: The predictions of this Predictions.
        :type predictions: List[PredictionsPredictionsInner]
        """
        if predictions is None:
            raise ValueError("Invalid value for `predictions`, must not be `None`")

        self._predictions = predictions

    @property
    def sort_by(self):
        """Gets the sort_by of this Predictions.


        :return: The sort_by of this Predictions.
        :rtype: str
        """
        return self._sort_by

    @sort_by.setter
    def sort_by(self, sort_by):
        """Sets the sort_by of this Predictions.


        :param sort_by: The sort_by of this Predictions.
        :type sort_by: str
        """
        allowed_values = ["createdTime"]  # noqa: E501
        if sort_by not in allowed_values:
            raise ValueError(
                "Invalid value for `sort_by` ({0}), must be one of {1}"
                .format(sort_by, allowed_values)
            )

        self._sort_by = sort_by
