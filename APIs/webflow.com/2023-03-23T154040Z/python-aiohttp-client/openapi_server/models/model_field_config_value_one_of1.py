# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.model_field_config_value_one_of import ModelFieldConfigValueOneOf
from openapi_server import util


class ModelFieldConfigValueOneOf1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fields: Dict[str, ModelFieldConfigValueOneOf]=None, type: str=None):
        """ModelFieldConfigValueOneOf1 - a model defined in OpenAPI

        :param fields: The fields of this ModelFieldConfigValueOneOf1.
        :param type: The type of this ModelFieldConfigValueOneOf1.
        """
        self.openapi_types = {
            'fields': Dict[str, ModelFieldConfigValueOneOf],
            'type': str
        }

        self.attribute_map = {
            'fields': 'fields',
            'type': 'type'
        }

        self._fields = fields
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ModelFieldConfigValueOneOf1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Model_fieldConfig_value_oneOf_1 of this ModelFieldConfigValueOneOf1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fields(self):
        """Gets the fields of this ModelFieldConfigValueOneOf1.


        :return: The fields of this ModelFieldConfigValueOneOf1.
        :rtype: Dict[str, ModelFieldConfigValueOneOf]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this ModelFieldConfigValueOneOf1.


        :param fields: The fields of this ModelFieldConfigValueOneOf1.
        :type fields: Dict[str, ModelFieldConfigValueOneOf]
        """
        if fields is None:
            raise ValueError("Invalid value for `fields`, must not be `None`")

        self._fields = fields

    @property
    def type(self):
        """Gets the type of this ModelFieldConfigValueOneOf1.


        :return: The type of this ModelFieldConfigValueOneOf1.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ModelFieldConfigValueOneOf1.


        :param type: The type of this ModelFieldConfigValueOneOf1.
        :type type: str
        """
        allowed_values = ["lines"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
