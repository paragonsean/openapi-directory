# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class WorkflowCompletedConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, environment: Dict[str, str]=None, environment_secrets: List[str]=None, image_url: str=None, secret_id: str=None):
        """WorkflowCompletedConfig - a model defined in OpenAPI

        :param environment: The environment of this WorkflowCompletedConfig.
        :param environment_secrets: The environment_secrets of this WorkflowCompletedConfig.
        :param image_url: The image_url of this WorkflowCompletedConfig.
        :param secret_id: The secret_id of this WorkflowCompletedConfig.
        """
        self.openapi_types = {
            'environment': Dict[str, str],
            'environment_secrets': List[str],
            'image_url': str,
            'secret_id': str
        }

        self.attribute_map = {
            'environment': 'environment',
            'environment_secrets': 'environmentSecrets',
            'image_url': 'imageUrl',
            'secret_id': 'secretId'
        }

        self._environment = environment
        self._environment_secrets = environment_secrets
        self._image_url = image_url
        self._secret_id = secret_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WorkflowCompletedConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Workflow_completedConfig of this WorkflowCompletedConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def environment(self):
        """Gets the environment of this WorkflowCompletedConfig.


        :return: The environment of this WorkflowCompletedConfig.
        :rtype: Dict[str, str]
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this WorkflowCompletedConfig.


        :param environment: The environment of this WorkflowCompletedConfig.
        :type environment: Dict[str, str]
        """

        self._environment = environment

    @property
    def environment_secrets(self):
        """Gets the environment_secrets of this WorkflowCompletedConfig.


        :return: The environment_secrets of this WorkflowCompletedConfig.
        :rtype: List[str]
        """
        return self._environment_secrets

    @environment_secrets.setter
    def environment_secrets(self, environment_secrets):
        """Sets the environment_secrets of this WorkflowCompletedConfig.


        :param environment_secrets: The environment_secrets of this WorkflowCompletedConfig.
        :type environment_secrets: List[str]
        """

        self._environment_secrets = environment_secrets

    @property
    def image_url(self):
        """Gets the image_url of this WorkflowCompletedConfig.


        :return: The image_url of this WorkflowCompletedConfig.
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this WorkflowCompletedConfig.


        :param image_url: The image_url of this WorkflowCompletedConfig.
        :type image_url: str
        """
        if image_url is None:
            raise ValueError("Invalid value for `image_url`, must not be `None`")

        self._image_url = image_url

    @property
    def secret_id(self):
        """Gets the secret_id of this WorkflowCompletedConfig.


        :return: The secret_id of this WorkflowCompletedConfig.
        :rtype: str
        """
        return self._secret_id

    @secret_id.setter
    def secret_id(self, secret_id):
        """Sets the secret_id of this WorkflowCompletedConfig.


        :param secret_id: The secret_id of this WorkflowCompletedConfig.
        :type secret_id: str
        """
        if secret_id is not None and not re.search(r'^las:secret:[a-f0-9]{32}$', secret_id):
            raise ValueError("Invalid value for `secret_id`, must be a follow pattern or equal to `/^las:secret:[a-f0-9]{32}$/`")

        self._secret_id = secret_id
