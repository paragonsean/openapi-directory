# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class PatchOrganizationId(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, name: str=None, payment_method_id: str=None, plan_id: str=None):
        """PatchOrganizationId - a model defined in OpenAPI

        :param description: The description of this PatchOrganizationId.
        :param name: The name of this PatchOrganizationId.
        :param payment_method_id: The payment_method_id of this PatchOrganizationId.
        :param plan_id: The plan_id of this PatchOrganizationId.
        """
        self.openapi_types = {
            'description': str,
            'name': str,
            'payment_method_id': str,
            'plan_id': str
        }

        self.attribute_map = {
            'description': 'description',
            'name': 'name',
            'payment_method_id': 'paymentMethodId',
            'plan_id': 'planId'
        }

        self._description = description
        self._name = name
        self._payment_method_id = payment_method_id
        self._plan_id = plan_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PatchOrganizationId':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PatchOrganizationId of this PatchOrganizationId.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this PatchOrganizationId.


        :return: The description of this PatchOrganizationId.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PatchOrganizationId.


        :param description: The description of this PatchOrganizationId.
        :type description: str
        """
        if description is not None and len(description) > 4096:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `4096`")

        self._description = description

    @property
    def name(self):
        """Gets the name of this PatchOrganizationId.


        :return: The name of this PatchOrganizationId.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PatchOrganizationId.


        :param name: The name of this PatchOrganizationId.
        :type name: str
        """
        if name is not None and len(name) > 4096:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `4096`")

        self._name = name

    @property
    def payment_method_id(self):
        """Gets the payment_method_id of this PatchOrganizationId.


        :return: The payment_method_id of this PatchOrganizationId.
        :rtype: str
        """
        return self._payment_method_id

    @payment_method_id.setter
    def payment_method_id(self, payment_method_id):
        """Sets the payment_method_id of this PatchOrganizationId.


        :param payment_method_id: The payment_method_id of this PatchOrganizationId.
        :type payment_method_id: str
        """
        if payment_method_id is not None and not re.search(r'^las:payment-method:[a-f0-9]{32}$', payment_method_id):
            raise ValueError("Invalid value for `payment_method_id`, must be a follow pattern or equal to `/^las:payment-method:[a-f0-9]{32}$/`")

        self._payment_method_id = payment_method_id

    @property
    def plan_id(self):
        """Gets the plan_id of this PatchOrganizationId.


        :return: The plan_id of this PatchOrganizationId.
        :rtype: str
        """
        return self._plan_id

    @plan_id.setter
    def plan_id(self, plan_id):
        """Sets the plan_id of this PatchOrganizationId.


        :param plan_id: The plan_id of this PatchOrganizationId.
        :type plan_id: str
        """
        if plan_id is not None and not re.search(r'^(|las:organization:[a-z0-9-_]+\/)las:plan:[a-z0-9-_]+(|:@[a-z0-9-_]+|:[0-9]+)$', plan_id):
            raise ValueError("Invalid value for `plan_id`, must be a follow pattern or equal to `/^(|las:organization:[a-z0-9-_]+\/)las:plan:[a-z0-9-_]+(|:@[a-z0-9-_]+|:[0-9]+)$/`")

        self._plan_id = plan_id
