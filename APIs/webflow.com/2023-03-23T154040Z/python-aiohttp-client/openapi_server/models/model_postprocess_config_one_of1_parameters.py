# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ModelPostprocessConfigOneOf1Parameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, collapse: bool=None, n: int=None):
        """ModelPostprocessConfigOneOf1Parameters - a model defined in OpenAPI

        :param collapse: The collapse of this ModelPostprocessConfigOneOf1Parameters.
        :param n: The n of this ModelPostprocessConfigOneOf1Parameters.
        """
        self.openapi_types = {
            'collapse': bool,
            'n': int
        }

        self.attribute_map = {
            'collapse': 'collapse',
            'n': 'n'
        }

        self._collapse = collapse
        self._n = n

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ModelPostprocessConfigOneOf1Parameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Model_postprocessConfig_oneOf_1_parameters of this ModelPostprocessConfigOneOf1Parameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def collapse(self):
        """Gets the collapse of this ModelPostprocessConfigOneOf1Parameters.


        :return: The collapse of this ModelPostprocessConfigOneOf1Parameters.
        :rtype: bool
        """
        return self._collapse

    @collapse.setter
    def collapse(self, collapse):
        """Sets the collapse of this ModelPostprocessConfigOneOf1Parameters.


        :param collapse: The collapse of this ModelPostprocessConfigOneOf1Parameters.
        :type collapse: bool
        """

        self._collapse = collapse

    @property
    def n(self):
        """Gets the n of this ModelPostprocessConfigOneOf1Parameters.


        :return: The n of this ModelPostprocessConfigOneOf1Parameters.
        :rtype: int
        """
        return self._n

    @n.setter
    def n(self, n):
        """Sets the n of this ModelPostprocessConfigOneOf1Parameters.


        :param n: The n of this ModelPostprocessConfigOneOf1Parameters.
        :type n: int
        """
        if n is None:
            raise ValueError("Invalid value for `n`, must not be `None`")
        if n is not None and n > 3:
            raise ValueError("Invalid value for `n`, must be a value less than or equal to `3`")
        if n is not None and n < 1:
            raise ValueError("Invalid value for `n`, must be a value greater than or equal to `1`")

        self._n = n
