# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.patch_transition_id_assets import PatchTransitionIdAssets
from openapi_server.models.patch_transition_id_parameters_any_of import PatchTransitionIdParametersAnyOf
from openapi_server.models.patch_transition_id_parameters_any_of1 import PatchTransitionIdParametersAnyOf1
import re
from openapi_server import util


class PatchTransitionIdParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cpu: int=None, environment: Dict[str, str]=None, environment_secrets: List[str]=None, image_url: str=None, memory: int=None, secret_id: str=None, assets: PatchTransitionIdAssets=None):
        """PatchTransitionIdParameters - a model defined in OpenAPI

        :param cpu: The cpu of this PatchTransitionIdParameters.
        :param environment: The environment of this PatchTransitionIdParameters.
        :param environment_secrets: The environment_secrets of this PatchTransitionIdParameters.
        :param image_url: The image_url of this PatchTransitionIdParameters.
        :param memory: The memory of this PatchTransitionIdParameters.
        :param secret_id: The secret_id of this PatchTransitionIdParameters.
        :param assets: The assets of this PatchTransitionIdParameters.
        """
        self.openapi_types = {
            'cpu': int,
            'environment': Dict[str, str],
            'environment_secrets': List[str],
            'image_url': str,
            'memory': int,
            'secret_id': str,
            'assets': PatchTransitionIdAssets
        }

        self.attribute_map = {
            'cpu': 'cpu',
            'environment': 'environment',
            'environment_secrets': 'environmentSecrets',
            'image_url': 'imageUrl',
            'memory': 'memory',
            'secret_id': 'secretId',
            'assets': 'assets'
        }

        self._cpu = cpu
        self._environment = environment
        self._environment_secrets = environment_secrets
        self._image_url = image_url
        self._memory = memory
        self._secret_id = secret_id
        self._assets = assets

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PatchTransitionIdParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PatchTransitionId_parameters of this PatchTransitionIdParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cpu(self):
        """Gets the cpu of this PatchTransitionIdParameters.


        :return: The cpu of this PatchTransitionIdParameters.
        :rtype: int
        """
        return self._cpu

    @cpu.setter
    def cpu(self, cpu):
        """Sets the cpu of this PatchTransitionIdParameters.


        :param cpu: The cpu of this PatchTransitionIdParameters.
        :type cpu: int
        """
        allowed_values = [256, 512, 1024]  # noqa: E501
        if cpu not in allowed_values:
            raise ValueError(
                "Invalid value for `cpu` ({0}), must be one of {1}"
                .format(cpu, allowed_values)
            )

        self._cpu = cpu

    @property
    def environment(self):
        """Gets the environment of this PatchTransitionIdParameters.


        :return: The environment of this PatchTransitionIdParameters.
        :rtype: Dict[str, str]
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this PatchTransitionIdParameters.


        :param environment: The environment of this PatchTransitionIdParameters.
        :type environment: Dict[str, str]
        """

        self._environment = environment

    @property
    def environment_secrets(self):
        """Gets the environment_secrets of this PatchTransitionIdParameters.


        :return: The environment_secrets of this PatchTransitionIdParameters.
        :rtype: List[str]
        """
        return self._environment_secrets

    @environment_secrets.setter
    def environment_secrets(self, environment_secrets):
        """Sets the environment_secrets of this PatchTransitionIdParameters.


        :param environment_secrets: The environment_secrets of this PatchTransitionIdParameters.
        :type environment_secrets: List[str]
        """

        self._environment_secrets = environment_secrets

    @property
    def image_url(self):
        """Gets the image_url of this PatchTransitionIdParameters.


        :return: The image_url of this PatchTransitionIdParameters.
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this PatchTransitionIdParameters.


        :param image_url: The image_url of this PatchTransitionIdParameters.
        :type image_url: str
        """

        self._image_url = image_url

    @property
    def memory(self):
        """Gets the memory of this PatchTransitionIdParameters.


        :return: The memory of this PatchTransitionIdParameters.
        :rtype: int
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """Sets the memory of this PatchTransitionIdParameters.


        :param memory: The memory of this PatchTransitionIdParameters.
        :type memory: int
        """
        allowed_values = [512, 1024, 2048, 4096, 8192]  # noqa: E501
        if memory not in allowed_values:
            raise ValueError(
                "Invalid value for `memory` ({0}), must be one of {1}"
                .format(memory, allowed_values)
            )

        self._memory = memory

    @property
    def secret_id(self):
        """Gets the secret_id of this PatchTransitionIdParameters.


        :return: The secret_id of this PatchTransitionIdParameters.
        :rtype: str
        """
        return self._secret_id

    @secret_id.setter
    def secret_id(self, secret_id):
        """Sets the secret_id of this PatchTransitionIdParameters.


        :param secret_id: The secret_id of this PatchTransitionIdParameters.
        :type secret_id: str
        """
        if secret_id is not None and not re.search(r'^las:secret:[a-f0-9]{32}$', secret_id):
            raise ValueError("Invalid value for `secret_id`, must be a follow pattern or equal to `/^las:secret:[a-f0-9]{32}$/`")

        self._secret_id = secret_id

    @property
    def assets(self):
        """Gets the assets of this PatchTransitionIdParameters.


        :return: The assets of this PatchTransitionIdParameters.
        :rtype: PatchTransitionIdAssets
        """
        return self._assets

    @assets.setter
    def assets(self, assets):
        """Sets the assets of this PatchTransitionIdParameters.


        :param assets: The assets of this PatchTransitionIdParameters.
        :type assets: PatchTransitionIdAssets
        """

        self._assets = assets
