# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.model_field_config_value_one_of import ModelFieldConfigValueOneOf
from openapi_server.models.model_field_config_value_one_of1 import ModelFieldConfigValueOneOf1
from openapi_server import util


class ModelFieldConfigValue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, enum: list[str]=None, max_length: int=None, type: str=None, fields: Dict[str, ModelFieldConfigValueOneOf]=None):
        """ModelFieldConfigValue - a model defined in OpenAPI

        :param description: The description of this ModelFieldConfigValue.
        :param enum: The enum of this ModelFieldConfigValue.
        :param max_length: The max_length of this ModelFieldConfigValue.
        :param type: The type of this ModelFieldConfigValue.
        :param fields: The fields of this ModelFieldConfigValue.
        """
        self.openapi_types = {
            'description': str,
            'enum': list[str],
            'max_length': int,
            'type': str,
            'fields': Dict[str, ModelFieldConfigValueOneOf]
        }

        self.attribute_map = {
            'description': 'description',
            'enum': 'enum',
            'max_length': 'maxLength',
            'type': 'type',
            'fields': 'fields'
        }

        self._description = description
        self._enum = enum
        self._max_length = max_length
        self._type = type
        self._fields = fields

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ModelFieldConfigValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Model_fieldConfig_value of this ModelFieldConfigValue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this ModelFieldConfigValue.


        :return: The description of this ModelFieldConfigValue.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ModelFieldConfigValue.


        :param description: The description of this ModelFieldConfigValue.
        :type description: str
        """
        if description is not None and len(description) > 4096:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `4096`")

        self._description = description

    @property
    def enum(self):
        """Gets the enum of this ModelFieldConfigValue.


        :return: The enum of this ModelFieldConfigValue.
        :rtype: list[str]
        """
        return self._enum

    @enum.setter
    def enum(self, enum):
        """Sets the enum of this ModelFieldConfigValue.


        :param enum: The enum of this ModelFieldConfigValue.
        :type enum: list[str]
        """
        if enum is not None and len(enum) > 500:
            raise ValueError("Invalid value for `enum`, number of items must be less than or equal to `500`")
        if enum is not None and len(enum) < 1:
            raise ValueError("Invalid value for `enum`, number of items must be greater than or equal to `1`")

        self._enum = enum

    @property
    def max_length(self):
        """Gets the max_length of this ModelFieldConfigValue.


        :return: The max_length of this ModelFieldConfigValue.
        :rtype: int
        """
        return self._max_length

    @max_length.setter
    def max_length(self, max_length):
        """Sets the max_length of this ModelFieldConfigValue.


        :param max_length: The max_length of this ModelFieldConfigValue.
        :type max_length: int
        """
        if max_length is not None and max_length > 512:
            raise ValueError("Invalid value for `max_length`, must be a value less than or equal to `512`")
        if max_length is not None and max_length < 1:
            raise ValueError("Invalid value for `max_length`, must be a value greater than or equal to `1`")

        self._max_length = max_length

    @property
    def type(self):
        """Gets the type of this ModelFieldConfigValue.


        :return: The type of this ModelFieldConfigValue.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ModelFieldConfigValue.


        :param type: The type of this ModelFieldConfigValue.
        :type type: str
        """
        allowed_values = ["amount", "date", "digits", "enum", "numeric", "string", "lines"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def fields(self):
        """Gets the fields of this ModelFieldConfigValue.


        :return: The fields of this ModelFieldConfigValue.
        :rtype: Dict[str, ModelFieldConfigValueOneOf]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this ModelFieldConfigValue.


        :param fields: The fields of this ModelFieldConfigValue.
        :type fields: Dict[str, ModelFieldConfigValueOneOf]
        """
        if fields is None:
            raise ValueError("Invalid value for `fields`, must not be `None`")

        self._fields = fields
