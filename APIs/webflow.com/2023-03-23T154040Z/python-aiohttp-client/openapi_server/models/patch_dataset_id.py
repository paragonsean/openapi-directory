# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PatchDatasetId(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contains_personally_identifiable_information: bool=None, description: str=None, metadata: object=None, name: str=None, retention_in_days: int=None):
        """PatchDatasetId - a model defined in OpenAPI

        :param contains_personally_identifiable_information: The contains_personally_identifiable_information of this PatchDatasetId.
        :param description: The description of this PatchDatasetId.
        :param metadata: The metadata of this PatchDatasetId.
        :param name: The name of this PatchDatasetId.
        :param retention_in_days: The retention_in_days of this PatchDatasetId.
        """
        self.openapi_types = {
            'contains_personally_identifiable_information': bool,
            'description': str,
            'metadata': object,
            'name': str,
            'retention_in_days': int
        }

        self.attribute_map = {
            'contains_personally_identifiable_information': 'containsPersonallyIdentifiableInformation',
            'description': 'description',
            'metadata': 'metadata',
            'name': 'name',
            'retention_in_days': 'retentionInDays'
        }

        self._contains_personally_identifiable_information = contains_personally_identifiable_information
        self._description = description
        self._metadata = metadata
        self._name = name
        self._retention_in_days = retention_in_days

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PatchDatasetId':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PatchDatasetId of this PatchDatasetId.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contains_personally_identifiable_information(self):
        """Gets the contains_personally_identifiable_information of this PatchDatasetId.


        :return: The contains_personally_identifiable_information of this PatchDatasetId.
        :rtype: bool
        """
        return self._contains_personally_identifiable_information

    @contains_personally_identifiable_information.setter
    def contains_personally_identifiable_information(self, contains_personally_identifiable_information):
        """Sets the contains_personally_identifiable_information of this PatchDatasetId.


        :param contains_personally_identifiable_information: The contains_personally_identifiable_information of this PatchDatasetId.
        :type contains_personally_identifiable_information: bool
        """

        self._contains_personally_identifiable_information = contains_personally_identifiable_information

    @property
    def description(self):
        """Gets the description of this PatchDatasetId.


        :return: The description of this PatchDatasetId.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PatchDatasetId.


        :param description: The description of this PatchDatasetId.
        :type description: str
        """
        if description is not None and len(description) > 4096:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `4096`")

        self._description = description

    @property
    def metadata(self):
        """Gets the metadata of this PatchDatasetId.


        :return: The metadata of this PatchDatasetId.
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this PatchDatasetId.


        :param metadata: The metadata of this PatchDatasetId.
        :type metadata: object
        """

        self._metadata = metadata

    @property
    def name(self):
        """Gets the name of this PatchDatasetId.


        :return: The name of this PatchDatasetId.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PatchDatasetId.


        :param name: The name of this PatchDatasetId.
        :type name: str
        """
        if name is not None and len(name) > 4096:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `4096`")

        self._name = name

    @property
    def retention_in_days(self):
        """Gets the retention_in_days of this PatchDatasetId.


        :return: The retention_in_days of this PatchDatasetId.
        :rtype: int
        """
        return self._retention_in_days

    @retention_in_days.setter
    def retention_in_days(self, retention_in_days):
        """Sets the retention_in_days of this PatchDatasetId.


        :param retention_in_days: The retention_in_days of this PatchDatasetId.
        :type retention_in_days: int
        """
        if retention_in_days is not None and retention_in_days < 1:
            raise ValueError("Invalid value for `retention_in_days`, must be a value greater than or equal to `1`")

        self._retention_in_days = retention_in_days
