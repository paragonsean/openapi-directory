# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.post_trainings_warm_start_config import PostTrainingsWarmStartConfig
from openapi_server import util


class PostTrainings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_bundle_ids: List[str]=None, data_scientist_assistance: bool=None, description: str=None, instance_type: str=None, metadata: object=None, name: str=None, warm_start_config: PostTrainingsWarmStartConfig=None):
        """PostTrainings - a model defined in OpenAPI

        :param data_bundle_ids: The data_bundle_ids of this PostTrainings.
        :param data_scientist_assistance: The data_scientist_assistance of this PostTrainings.
        :param description: The description of this PostTrainings.
        :param instance_type: The instance_type of this PostTrainings.
        :param metadata: The metadata of this PostTrainings.
        :param name: The name of this PostTrainings.
        :param warm_start_config: The warm_start_config of this PostTrainings.
        """
        self.openapi_types = {
            'data_bundle_ids': List[str],
            'data_scientist_assistance': bool,
            'description': str,
            'instance_type': str,
            'metadata': object,
            'name': str,
            'warm_start_config': PostTrainingsWarmStartConfig
        }

        self.attribute_map = {
            'data_bundle_ids': 'dataBundleIds',
            'data_scientist_assistance': 'dataScientistAssistance',
            'description': 'description',
            'instance_type': 'instanceType',
            'metadata': 'metadata',
            'name': 'name',
            'warm_start_config': 'warmStartConfig'
        }

        self._data_bundle_ids = data_bundle_ids
        self._data_scientist_assistance = data_scientist_assistance
        self._description = description
        self._instance_type = instance_type
        self._metadata = metadata
        self._name = name
        self._warm_start_config = warm_start_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PostTrainings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PostTrainings of this PostTrainings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_bundle_ids(self):
        """Gets the data_bundle_ids of this PostTrainings.


        :return: The data_bundle_ids of this PostTrainings.
        :rtype: List[str]
        """
        return self._data_bundle_ids

    @data_bundle_ids.setter
    def data_bundle_ids(self, data_bundle_ids):
        """Sets the data_bundle_ids of this PostTrainings.


        :param data_bundle_ids: The data_bundle_ids of this PostTrainings.
        :type data_bundle_ids: List[str]
        """
        if data_bundle_ids is not None and len(data_bundle_ids) < 1:
            raise ValueError("Invalid value for `data_bundle_ids`, number of items must be greater than or equal to `1`")

        self._data_bundle_ids = data_bundle_ids

    @property
    def data_scientist_assistance(self):
        """Gets the data_scientist_assistance of this PostTrainings.


        :return: The data_scientist_assistance of this PostTrainings.
        :rtype: bool
        """
        return self._data_scientist_assistance

    @data_scientist_assistance.setter
    def data_scientist_assistance(self, data_scientist_assistance):
        """Sets the data_scientist_assistance of this PostTrainings.


        :param data_scientist_assistance: The data_scientist_assistance of this PostTrainings.
        :type data_scientist_assistance: bool
        """

        self._data_scientist_assistance = data_scientist_assistance

    @property
    def description(self):
        """Gets the description of this PostTrainings.


        :return: The description of this PostTrainings.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PostTrainings.


        :param description: The description of this PostTrainings.
        :type description: str
        """
        if description is not None and len(description) > 4096:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `4096`")

        self._description = description

    @property
    def instance_type(self):
        """Gets the instance_type of this PostTrainings.


        :return: The instance_type of this PostTrainings.
        :rtype: str
        """
        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type):
        """Sets the instance_type of this PostTrainings.


        :param instance_type: The instance_type of this PostTrainings.
        :type instance_type: str
        """
        allowed_values = [None,"small-gpu", "medium-gpu", "large-gpu"]  # noqa: E501
        if instance_type not in allowed_values:
            raise ValueError(
                "Invalid value for `instance_type` ({0}), must be one of {1}"
                .format(instance_type, allowed_values)
            )

        self._instance_type = instance_type

    @property
    def metadata(self):
        """Gets the metadata of this PostTrainings.


        :return: The metadata of this PostTrainings.
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this PostTrainings.


        :param metadata: The metadata of this PostTrainings.
        :type metadata: object
        """

        self._metadata = metadata

    @property
    def name(self):
        """Gets the name of this PostTrainings.


        :return: The name of this PostTrainings.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PostTrainings.


        :param name: The name of this PostTrainings.
        :type name: str
        """
        if name is not None and len(name) > 4096:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `4096`")

        self._name = name

    @property
    def warm_start_config(self):
        """Gets the warm_start_config of this PostTrainings.


        :return: The warm_start_config of this PostTrainings.
        :rtype: PostTrainingsWarmStartConfig
        """
        return self._warm_start_config

    @warm_start_config.setter
    def warm_start_config(self, warm_start_config):
        """Sets the warm_start_config of this PostTrainings.


        :param warm_start_config: The warm_start_config of this PostTrainings.
        :type warm_start_config: PostTrainingsWarmStartConfig
        """

        self._warm_start_config = warm_start_config
