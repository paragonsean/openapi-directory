# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PostDataBundles(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dataset_ids: List[str]=None, description: str=None, name: str=None):
        """PostDataBundles - a model defined in OpenAPI

        :param dataset_ids: The dataset_ids of this PostDataBundles.
        :param description: The description of this PostDataBundles.
        :param name: The name of this PostDataBundles.
        """
        self.openapi_types = {
            'dataset_ids': List[str],
            'description': str,
            'name': str
        }

        self.attribute_map = {
            'dataset_ids': 'datasetIds',
            'description': 'description',
            'name': 'name'
        }

        self._dataset_ids = dataset_ids
        self._description = description
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PostDataBundles':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PostDataBundles of this PostDataBundles.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dataset_ids(self):
        """Gets the dataset_ids of this PostDataBundles.


        :return: The dataset_ids of this PostDataBundles.
        :rtype: List[str]
        """
        return self._dataset_ids

    @dataset_ids.setter
    def dataset_ids(self, dataset_ids):
        """Sets the dataset_ids of this PostDataBundles.


        :param dataset_ids: The dataset_ids of this PostDataBundles.
        :type dataset_ids: List[str]
        """
        if dataset_ids is not None and len(dataset_ids) < 1:
            raise ValueError("Invalid value for `dataset_ids`, number of items must be greater than or equal to `1`")

        self._dataset_ids = dataset_ids

    @property
    def description(self):
        """Gets the description of this PostDataBundles.


        :return: The description of this PostDataBundles.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PostDataBundles.


        :param description: The description of this PostDataBundles.
        :type description: str
        """
        if description is not None and len(description) > 4096:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `4096`")

        self._description = description

    @property
    def name(self):
        """Gets the name of this PostDataBundles.


        :return: The name of this PostDataBundles.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PostDataBundles.


        :param name: The name of this PostDataBundles.
        :type name: str
        """
        if name is not None and len(name) > 4096:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `4096`")

        self._name = name
