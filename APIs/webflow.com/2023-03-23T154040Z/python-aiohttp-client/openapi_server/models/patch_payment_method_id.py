# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PatchPaymentMethodId(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, name: str=None, stripe_setup_intent_secret: str=None):
        """PatchPaymentMethodId - a model defined in OpenAPI

        :param description: The description of this PatchPaymentMethodId.
        :param name: The name of this PatchPaymentMethodId.
        :param stripe_setup_intent_secret: The stripe_setup_intent_secret of this PatchPaymentMethodId.
        """
        self.openapi_types = {
            'description': str,
            'name': str,
            'stripe_setup_intent_secret': str
        }

        self.attribute_map = {
            'description': 'description',
            'name': 'name',
            'stripe_setup_intent_secret': 'stripeSetupIntentSecret'
        }

        self._description = description
        self._name = name
        self._stripe_setup_intent_secret = stripe_setup_intent_secret

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PatchPaymentMethodId':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PatchPaymentMethodId of this PatchPaymentMethodId.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this PatchPaymentMethodId.


        :return: The description of this PatchPaymentMethodId.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PatchPaymentMethodId.


        :param description: The description of this PatchPaymentMethodId.
        :type description: str
        """
        if description is not None and len(description) > 4096:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `4096`")

        self._description = description

    @property
    def name(self):
        """Gets the name of this PatchPaymentMethodId.


        :return: The name of this PatchPaymentMethodId.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PatchPaymentMethodId.


        :param name: The name of this PatchPaymentMethodId.
        :type name: str
        """
        if name is not None and len(name) > 4096:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `4096`")

        self._name = name

    @property
    def stripe_setup_intent_secret(self):
        """Gets the stripe_setup_intent_secret of this PatchPaymentMethodId.


        :return: The stripe_setup_intent_secret of this PatchPaymentMethodId.
        :rtype: str
        """
        return self._stripe_setup_intent_secret

    @stripe_setup_intent_secret.setter
    def stripe_setup_intent_secret(self, stripe_setup_intent_secret):
        """Sets the stripe_setup_intent_secret of this PatchPaymentMethodId.


        :param stripe_setup_intent_secret: The stripe_setup_intent_secret of this PatchPaymentMethodId.
        :type stripe_setup_intent_secret: str
        """
        if stripe_setup_intent_secret is not None and len(stripe_setup_intent_secret) < 1:
            raise ValueError("Invalid value for `stripe_setup_intent_secret`, length must be greater than or equal to `1`")

        self._stripe_setup_intent_secret = stripe_setup_intent_secret
