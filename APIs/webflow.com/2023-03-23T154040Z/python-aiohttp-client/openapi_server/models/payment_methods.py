# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.payment_methods_payment_methods_inner import PaymentMethodsPaymentMethodsInner
from openapi_server import util


class PaymentMethods(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, next_token: str=None, payment_methods: List[PaymentMethodsPaymentMethodsInner]=None):
        """PaymentMethods - a model defined in OpenAPI

        :param next_token: The next_token of this PaymentMethods.
        :param payment_methods: The payment_methods of this PaymentMethods.
        """
        self.openapi_types = {
            'next_token': str,
            'payment_methods': List[PaymentMethodsPaymentMethodsInner]
        }

        self.attribute_map = {
            'next_token': 'nextToken',
            'payment_methods': 'paymentMethods'
        }

        self._next_token = next_token
        self._payment_methods = payment_methods

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentMethods':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentMethods of this PaymentMethods.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def next_token(self):
        """Gets the next_token of this PaymentMethods.


        :return: The next_token of this PaymentMethods.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this PaymentMethods.


        :param next_token: The next_token of this PaymentMethods.
        :type next_token: str
        """
        if next_token is None:
            raise ValueError("Invalid value for `next_token`, must not be `None`")
        if next_token is not None and len(next_token) > 4096:
            raise ValueError("Invalid value for `next_token`, length must be less than or equal to `4096`")

        self._next_token = next_token

    @property
    def payment_methods(self):
        """Gets the payment_methods of this PaymentMethods.


        :return: The payment_methods of this PaymentMethods.
        :rtype: List[PaymentMethodsPaymentMethodsInner]
        """
        return self._payment_methods

    @payment_methods.setter
    def payment_methods(self, payment_methods):
        """Sets the payment_methods of this PaymentMethods.


        :param payment_methods: The payment_methods of this PaymentMethods.
        :type payment_methods: List[PaymentMethodsPaymentMethodsInner]
        """
        if payment_methods is None:
            raise ValueError("Invalid value for `payment_methods`, must not be `None`")

        self._payment_methods = payment_methods
