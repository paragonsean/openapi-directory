# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.documents_documents_inner import DocumentsDocumentsInner
from openapi_server import util


class Documents(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, consent_id: List[str]=None, dataset_id: List[str]=None, documents: List[DocumentsDocumentsInner]=None, next_token: str=None, order: str=None, sort_by: str=None):
        """Documents - a model defined in OpenAPI

        :param consent_id: The consent_id of this Documents.
        :param dataset_id: The dataset_id of this Documents.
        :param documents: The documents of this Documents.
        :param next_token: The next_token of this Documents.
        :param order: The order of this Documents.
        :param sort_by: The sort_by of this Documents.
        """
        self.openapi_types = {
            'consent_id': List[str],
            'dataset_id': List[str],
            'documents': List[DocumentsDocumentsInner],
            'next_token': str,
            'order': str,
            'sort_by': str
        }

        self.attribute_map = {
            'consent_id': 'consentId',
            'dataset_id': 'datasetId',
            'documents': 'documents',
            'next_token': 'nextToken',
            'order': 'order',
            'sort_by': 'sortBy'
        }

        self._consent_id = consent_id
        self._dataset_id = dataset_id
        self._documents = documents
        self._next_token = next_token
        self._order = order
        self._sort_by = sort_by

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Documents':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Documents of this Documents.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def consent_id(self):
        """Gets the consent_id of this Documents.


        :return: The consent_id of this Documents.
        :rtype: List[str]
        """
        return self._consent_id

    @consent_id.setter
    def consent_id(self, consent_id):
        """Sets the consent_id of this Documents.


        :param consent_id: The consent_id of this Documents.
        :type consent_id: List[str]
        """

        self._consent_id = consent_id

    @property
    def dataset_id(self):
        """Gets the dataset_id of this Documents.


        :return: The dataset_id of this Documents.
        :rtype: List[str]
        """
        return self._dataset_id

    @dataset_id.setter
    def dataset_id(self, dataset_id):
        """Sets the dataset_id of this Documents.


        :param dataset_id: The dataset_id of this Documents.
        :type dataset_id: List[str]
        """

        self._dataset_id = dataset_id

    @property
    def documents(self):
        """Gets the documents of this Documents.


        :return: The documents of this Documents.
        :rtype: List[DocumentsDocumentsInner]
        """
        return self._documents

    @documents.setter
    def documents(self, documents):
        """Sets the documents of this Documents.


        :param documents: The documents of this Documents.
        :type documents: List[DocumentsDocumentsInner]
        """
        if documents is None:
            raise ValueError("Invalid value for `documents`, must not be `None`")

        self._documents = documents

    @property
    def next_token(self):
        """Gets the next_token of this Documents.


        :return: The next_token of this Documents.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this Documents.


        :param next_token: The next_token of this Documents.
        :type next_token: str
        """
        if next_token is None:
            raise ValueError("Invalid value for `next_token`, must not be `None`")
        if next_token is not None and len(next_token) > 4096:
            raise ValueError("Invalid value for `next_token`, length must be less than or equal to `4096`")

        self._next_token = next_token

    @property
    def order(self):
        """Gets the order of this Documents.


        :return: The order of this Documents.
        :rtype: str
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this Documents.


        :param order: The order of this Documents.
        :type order: str
        """
        allowed_values = ["ascending", "descending"]  # noqa: E501
        if order not in allowed_values:
            raise ValueError(
                "Invalid value for `order` ({0}), must be one of {1}"
                .format(order, allowed_values)
            )

        self._order = order

    @property
    def sort_by(self):
        """Gets the sort_by of this Documents.


        :return: The sort_by of this Documents.
        :rtype: str
        """
        return self._sort_by

    @sort_by.setter
    def sort_by(self, sort_by):
        """Sets the sort_by of this Documents.


        :param sort_by: The sort_by of this Documents.
        :type sort_by: str
        """
        allowed_values = ["createdTime"]  # noqa: E501
        if sort_by not in allowed_values:
            raise ValueError(
                "Invalid value for `sort_by` ({0}), must be one of {1}"
                .format(sort_by, allowed_values)
            )

        self._sort_by = sort_by
