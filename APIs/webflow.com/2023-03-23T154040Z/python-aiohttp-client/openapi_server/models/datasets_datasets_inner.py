# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class DatasetsDatasetsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contains_personally_identifiable_information: bool=None, created_by: str=None, created_time: str=None, dataset_id: str=None, description: str=None, ground_truth_summary: object=None, metadata: object=None, name: str=None, number_of_documents: int=None, retention_in_days: int=None, storage_location: str=None, updated_by: str=None, updated_time: str=None, version: int=None):
        """DatasetsDatasetsInner - a model defined in OpenAPI

        :param contains_personally_identifiable_information: The contains_personally_identifiable_information of this DatasetsDatasetsInner.
        :param created_by: The created_by of this DatasetsDatasetsInner.
        :param created_time: The created_time of this DatasetsDatasetsInner.
        :param dataset_id: The dataset_id of this DatasetsDatasetsInner.
        :param description: The description of this DatasetsDatasetsInner.
        :param ground_truth_summary: The ground_truth_summary of this DatasetsDatasetsInner.
        :param metadata: The metadata of this DatasetsDatasetsInner.
        :param name: The name of this DatasetsDatasetsInner.
        :param number_of_documents: The number_of_documents of this DatasetsDatasetsInner.
        :param retention_in_days: The retention_in_days of this DatasetsDatasetsInner.
        :param storage_location: The storage_location of this DatasetsDatasetsInner.
        :param updated_by: The updated_by of this DatasetsDatasetsInner.
        :param updated_time: The updated_time of this DatasetsDatasetsInner.
        :param version: The version of this DatasetsDatasetsInner.
        """
        self.openapi_types = {
            'contains_personally_identifiable_information': bool,
            'created_by': str,
            'created_time': str,
            'dataset_id': str,
            'description': str,
            'ground_truth_summary': object,
            'metadata': object,
            'name': str,
            'number_of_documents': int,
            'retention_in_days': int,
            'storage_location': str,
            'updated_by': str,
            'updated_time': str,
            'version': int
        }

        self.attribute_map = {
            'contains_personally_identifiable_information': 'containsPersonallyIdentifiableInformation',
            'created_by': 'createdBy',
            'created_time': 'createdTime',
            'dataset_id': 'datasetId',
            'description': 'description',
            'ground_truth_summary': 'groundTruthSummary',
            'metadata': 'metadata',
            'name': 'name',
            'number_of_documents': 'numberOfDocuments',
            'retention_in_days': 'retentionInDays',
            'storage_location': 'storageLocation',
            'updated_by': 'updatedBy',
            'updated_time': 'updatedTime',
            'version': 'version'
        }

        self._contains_personally_identifiable_information = contains_personally_identifiable_information
        self._created_by = created_by
        self._created_time = created_time
        self._dataset_id = dataset_id
        self._description = description
        self._ground_truth_summary = ground_truth_summary
        self._metadata = metadata
        self._name = name
        self._number_of_documents = number_of_documents
        self._retention_in_days = retention_in_days
        self._storage_location = storage_location
        self._updated_by = updated_by
        self._updated_time = updated_time
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DatasetsDatasetsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Datasets_datasets_inner of this DatasetsDatasetsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contains_personally_identifiable_information(self):
        """Gets the contains_personally_identifiable_information of this DatasetsDatasetsInner.


        :return: The contains_personally_identifiable_information of this DatasetsDatasetsInner.
        :rtype: bool
        """
        return self._contains_personally_identifiable_information

    @contains_personally_identifiable_information.setter
    def contains_personally_identifiable_information(self, contains_personally_identifiable_information):
        """Sets the contains_personally_identifiable_information of this DatasetsDatasetsInner.


        :param contains_personally_identifiable_information: The contains_personally_identifiable_information of this DatasetsDatasetsInner.
        :type contains_personally_identifiable_information: bool
        """
        if contains_personally_identifiable_information is None:
            raise ValueError("Invalid value for `contains_personally_identifiable_information`, must not be `None`")

        self._contains_personally_identifiable_information = contains_personally_identifiable_information

    @property
    def created_by(self):
        """Gets the created_by of this DatasetsDatasetsInner.


        :return: The created_by of this DatasetsDatasetsInner.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this DatasetsDatasetsInner.


        :param created_by: The created_by of this DatasetsDatasetsInner.
        :type created_by: str
        """
        if created_by is None:
            raise ValueError("Invalid value for `created_by`, must not be `None`")
        if created_by is not None and len(created_by) > 4096:
            raise ValueError("Invalid value for `created_by`, length must be less than or equal to `4096`")

        self._created_by = created_by

    @property
    def created_time(self):
        """Gets the created_time of this DatasetsDatasetsInner.


        :return: The created_time of this DatasetsDatasetsInner.
        :rtype: str
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this DatasetsDatasetsInner.


        :param created_time: The created_time of this DatasetsDatasetsInner.
        :type created_time: str
        """
        if created_time is None:
            raise ValueError("Invalid value for `created_time`, must not be `None`")
        if created_time is not None and not re.search(r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$', created_time):
            raise ValueError("Invalid value for `created_time`, must be a follow pattern or equal to `/^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$/`")

        self._created_time = created_time

    @property
    def dataset_id(self):
        """Gets the dataset_id of this DatasetsDatasetsInner.


        :return: The dataset_id of this DatasetsDatasetsInner.
        :rtype: str
        """
        return self._dataset_id

    @dataset_id.setter
    def dataset_id(self, dataset_id):
        """Sets the dataset_id of this DatasetsDatasetsInner.


        :param dataset_id: The dataset_id of this DatasetsDatasetsInner.
        :type dataset_id: str
        """
        if dataset_id is None:
            raise ValueError("Invalid value for `dataset_id`, must not be `None`")
        if dataset_id is not None and not re.search(r'^las:dataset:[a-f0-9]{32}$', dataset_id):
            raise ValueError("Invalid value for `dataset_id`, must be a follow pattern or equal to `/^las:dataset:[a-f0-9]{32}$/`")

        self._dataset_id = dataset_id

    @property
    def description(self):
        """Gets the description of this DatasetsDatasetsInner.


        :return: The description of this DatasetsDatasetsInner.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DatasetsDatasetsInner.


        :param description: The description of this DatasetsDatasetsInner.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")
        if description is not None and len(description) > 4096:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `4096`")

        self._description = description

    @property
    def ground_truth_summary(self):
        """Gets the ground_truth_summary of this DatasetsDatasetsInner.


        :return: The ground_truth_summary of this DatasetsDatasetsInner.
        :rtype: object
        """
        return self._ground_truth_summary

    @ground_truth_summary.setter
    def ground_truth_summary(self, ground_truth_summary):
        """Sets the ground_truth_summary of this DatasetsDatasetsInner.


        :param ground_truth_summary: The ground_truth_summary of this DatasetsDatasetsInner.
        :type ground_truth_summary: object
        """
        if ground_truth_summary is None:
            raise ValueError("Invalid value for `ground_truth_summary`, must not be `None`")

        self._ground_truth_summary = ground_truth_summary

    @property
    def metadata(self):
        """Gets the metadata of this DatasetsDatasetsInner.


        :return: The metadata of this DatasetsDatasetsInner.
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this DatasetsDatasetsInner.


        :param metadata: The metadata of this DatasetsDatasetsInner.
        :type metadata: object
        """
        if metadata is None:
            raise ValueError("Invalid value for `metadata`, must not be `None`")

        self._metadata = metadata

    @property
    def name(self):
        """Gets the name of this DatasetsDatasetsInner.


        :return: The name of this DatasetsDatasetsInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DatasetsDatasetsInner.


        :param name: The name of this DatasetsDatasetsInner.
        :type name: str
        """
        if name is not None and len(name) > 4096:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `4096`")

        self._name = name

    @property
    def number_of_documents(self):
        """Gets the number_of_documents of this DatasetsDatasetsInner.


        :return: The number_of_documents of this DatasetsDatasetsInner.
        :rtype: int
        """
        return self._number_of_documents

    @number_of_documents.setter
    def number_of_documents(self, number_of_documents):
        """Sets the number_of_documents of this DatasetsDatasetsInner.


        :param number_of_documents: The number_of_documents of this DatasetsDatasetsInner.
        :type number_of_documents: int
        """
        if number_of_documents is None:
            raise ValueError("Invalid value for `number_of_documents`, must not be `None`")
        if number_of_documents is not None and number_of_documents < 0:
            raise ValueError("Invalid value for `number_of_documents`, must be a value greater than or equal to `0`")

        self._number_of_documents = number_of_documents

    @property
    def retention_in_days(self):
        """Gets the retention_in_days of this DatasetsDatasetsInner.


        :return: The retention_in_days of this DatasetsDatasetsInner.
        :rtype: int
        """
        return self._retention_in_days

    @retention_in_days.setter
    def retention_in_days(self, retention_in_days):
        """Sets the retention_in_days of this DatasetsDatasetsInner.


        :param retention_in_days: The retention_in_days of this DatasetsDatasetsInner.
        :type retention_in_days: int
        """
        if retention_in_days is None:
            raise ValueError("Invalid value for `retention_in_days`, must not be `None`")
        if retention_in_days is not None and retention_in_days > 1825:
            raise ValueError("Invalid value for `retention_in_days`, must be a value less than or equal to `1825`")
        if retention_in_days is not None and retention_in_days < 0:
            raise ValueError("Invalid value for `retention_in_days`, must be a value greater than or equal to `0`")

        self._retention_in_days = retention_in_days

    @property
    def storage_location(self):
        """Gets the storage_location of this DatasetsDatasetsInner.


        :return: The storage_location of this DatasetsDatasetsInner.
        :rtype: str
        """
        return self._storage_location

    @storage_location.setter
    def storage_location(self, storage_location):
        """Sets the storage_location of this DatasetsDatasetsInner.


        :param storage_location: The storage_location of this DatasetsDatasetsInner.
        :type storage_location: str
        """
        allowed_values = ["EU"]  # noqa: E501
        if storage_location not in allowed_values:
            raise ValueError(
                "Invalid value for `storage_location` ({0}), must be one of {1}"
                .format(storage_location, allowed_values)
            )

        self._storage_location = storage_location

    @property
    def updated_by(self):
        """Gets the updated_by of this DatasetsDatasetsInner.


        :return: The updated_by of this DatasetsDatasetsInner.
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this DatasetsDatasetsInner.


        :param updated_by: The updated_by of this DatasetsDatasetsInner.
        :type updated_by: str
        """
        if updated_by is None:
            raise ValueError("Invalid value for `updated_by`, must not be `None`")
        if updated_by is not None and len(updated_by) > 4096:
            raise ValueError("Invalid value for `updated_by`, length must be less than or equal to `4096`")

        self._updated_by = updated_by

    @property
    def updated_time(self):
        """Gets the updated_time of this DatasetsDatasetsInner.


        :return: The updated_time of this DatasetsDatasetsInner.
        :rtype: str
        """
        return self._updated_time

    @updated_time.setter
    def updated_time(self, updated_time):
        """Sets the updated_time of this DatasetsDatasetsInner.


        :param updated_time: The updated_time of this DatasetsDatasetsInner.
        :type updated_time: str
        """
        if updated_time is None:
            raise ValueError("Invalid value for `updated_time`, must not be `None`")
        if updated_time is not None and not re.search(r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$', updated_time):
            raise ValueError("Invalid value for `updated_time`, must be a follow pattern or equal to `/^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$/`")

        self._updated_time = updated_time

    @property
    def version(self):
        """Gets the version of this DatasetsDatasetsInner.


        :return: The version of this DatasetsDatasetsInner.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this DatasetsDatasetsInner.


        :param version: The version of this DatasetsDatasetsInner.
        :type version: int
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")
        if version is not None and version < 0:
            raise ValueError("Invalid value for `version`, must be a value greater than or equal to `0`")

        self._version = version
