# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.prediction_predictions_inner_any_of import PredictionPredictionsInnerAnyOf
from openapi_server.models.prediction_predictions_inner_any_of1 import PredictionPredictionsInnerAnyOf1
import re
from openapi_server import util


class PredictionPredictionsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, confidence: float=None, label: str=None, location: List[float]=None, page: int=None, value: List[List[PredictionPredictionsInnerAnyOf]]=None):
        """PredictionPredictionsInner - a model defined in OpenAPI

        :param confidence: The confidence of this PredictionPredictionsInner.
        :param label: The label of this PredictionPredictionsInner.
        :param location: The location of this PredictionPredictionsInner.
        :param page: The page of this PredictionPredictionsInner.
        :param value: The value of this PredictionPredictionsInner.
        """
        self.openapi_types = {
            'confidence': float,
            'label': str,
            'location': List[float],
            'page': int,
            'value': List[List[PredictionPredictionsInnerAnyOf]]
        }

        self.attribute_map = {
            'confidence': 'confidence',
            'label': 'label',
            'location': 'location',
            'page': 'page',
            'value': 'value'
        }

        self._confidence = confidence
        self._label = label
        self._location = location
        self._page = page
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PredictionPredictionsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Prediction_predictions_inner of this PredictionPredictionsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def confidence(self):
        """Gets the confidence of this PredictionPredictionsInner.


        :return: The confidence of this PredictionPredictionsInner.
        :rtype: float
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this PredictionPredictionsInner.


        :param confidence: The confidence of this PredictionPredictionsInner.
        :type confidence: float
        """
        if confidence is None:
            raise ValueError("Invalid value for `confidence`, must not be `None`")
        if confidence is not None and confidence > 1:
            raise ValueError("Invalid value for `confidence`, must be a value less than or equal to `1`")
        if confidence is not None and confidence < 0:
            raise ValueError("Invalid value for `confidence`, must be a value greater than or equal to `0`")

        self._confidence = confidence

    @property
    def label(self):
        """Gets the label of this PredictionPredictionsInner.


        :return: The label of this PredictionPredictionsInner.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this PredictionPredictionsInner.


        :param label: The label of this PredictionPredictionsInner.
        :type label: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")
        if label is not None and len(label) > 36:
            raise ValueError("Invalid value for `label`, length must be less than or equal to `36`")
        if label is not None and len(label) < 1:
            raise ValueError("Invalid value for `label`, length must be greater than or equal to `1`")
        if label is not None and not re.search(r'^[0-9A-Za-z-_]+$', label):
            raise ValueError("Invalid value for `label`, must be a follow pattern or equal to `/^[0-9A-Za-z-_]+$/`")

        self._label = label

    @property
    def location(self):
        """Gets the location of this PredictionPredictionsInner.


        :return: The location of this PredictionPredictionsInner.
        :rtype: List[float]
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this PredictionPredictionsInner.


        :param location: The location of this PredictionPredictionsInner.
        :type location: List[float]
        """
        if location is not None and len(location) > 4:
            raise ValueError("Invalid value for `location`, number of items must be less than or equal to `4`")
        if location is not None and len(location) < 4:
            raise ValueError("Invalid value for `location`, number of items must be greater than or equal to `4`")

        self._location = location

    @property
    def page(self):
        """Gets the page of this PredictionPredictionsInner.


        :return: The page of this PredictionPredictionsInner.
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this PredictionPredictionsInner.


        :param page: The page of this PredictionPredictionsInner.
        :type page: int
        """
        if page is not None and page < 0:
            raise ValueError("Invalid value for `page`, must be a value greater than or equal to `0`")

        self._page = page

    @property
    def value(self):
        """Gets the value of this PredictionPredictionsInner.


        :return: The value of this PredictionPredictionsInner.
        :rtype: List[List[PredictionPredictionsInnerAnyOf]]
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this PredictionPredictionsInner.


        :param value: The value of this PredictionPredictionsInner.
        :type value: List[List[PredictionPredictionsInnerAnyOf]]
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
