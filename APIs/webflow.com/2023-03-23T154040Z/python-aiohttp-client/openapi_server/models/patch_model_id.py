# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.model_field_config_value import ModelFieldConfigValue
from openapi_server.models.model_postprocess_config import ModelPostprocessConfig
from openapi_server.models.model_preprocess_config import ModelPreprocessConfig
import re
from openapi_server import util


class PatchModelId(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, field_config: Dict[str, ModelFieldConfigValue]=None, metadata: object=None, name: str=None, postprocess_config: ModelPostprocessConfig=None, preprocess_config: ModelPreprocessConfig=None, training_id: str=None):
        """PatchModelId - a model defined in OpenAPI

        :param description: The description of this PatchModelId.
        :param field_config: The field_config of this PatchModelId.
        :param metadata: The metadata of this PatchModelId.
        :param name: The name of this PatchModelId.
        :param postprocess_config: The postprocess_config of this PatchModelId.
        :param preprocess_config: The preprocess_config of this PatchModelId.
        :param training_id: The training_id of this PatchModelId.
        """
        self.openapi_types = {
            'description': str,
            'field_config': Dict[str, ModelFieldConfigValue],
            'metadata': object,
            'name': str,
            'postprocess_config': ModelPostprocessConfig,
            'preprocess_config': ModelPreprocessConfig,
            'training_id': str
        }

        self.attribute_map = {
            'description': 'description',
            'field_config': 'fieldConfig',
            'metadata': 'metadata',
            'name': 'name',
            'postprocess_config': 'postprocessConfig',
            'preprocess_config': 'preprocessConfig',
            'training_id': 'trainingId'
        }

        self._description = description
        self._field_config = field_config
        self._metadata = metadata
        self._name = name
        self._postprocess_config = postprocess_config
        self._preprocess_config = preprocess_config
        self._training_id = training_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PatchModelId':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PatchModelId of this PatchModelId.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this PatchModelId.


        :return: The description of this PatchModelId.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PatchModelId.


        :param description: The description of this PatchModelId.
        :type description: str
        """
        if description is not None and len(description) > 4096:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `4096`")

        self._description = description

    @property
    def field_config(self):
        """Gets the field_config of this PatchModelId.


        :return: The field_config of this PatchModelId.
        :rtype: Dict[str, ModelFieldConfigValue]
        """
        return self._field_config

    @field_config.setter
    def field_config(self, field_config):
        """Sets the field_config of this PatchModelId.


        :param field_config: The field_config of this PatchModelId.
        :type field_config: Dict[str, ModelFieldConfigValue]
        """

        self._field_config = field_config

    @property
    def metadata(self):
        """Gets the metadata of this PatchModelId.


        :return: The metadata of this PatchModelId.
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this PatchModelId.


        :param metadata: The metadata of this PatchModelId.
        :type metadata: object
        """

        self._metadata = metadata

    @property
    def name(self):
        """Gets the name of this PatchModelId.


        :return: The name of this PatchModelId.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PatchModelId.


        :param name: The name of this PatchModelId.
        :type name: str
        """
        if name is not None and len(name) > 4096:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `4096`")

        self._name = name

    @property
    def postprocess_config(self):
        """Gets the postprocess_config of this PatchModelId.


        :return: The postprocess_config of this PatchModelId.
        :rtype: ModelPostprocessConfig
        """
        return self._postprocess_config

    @postprocess_config.setter
    def postprocess_config(self, postprocess_config):
        """Sets the postprocess_config of this PatchModelId.


        :param postprocess_config: The postprocess_config of this PatchModelId.
        :type postprocess_config: ModelPostprocessConfig
        """

        self._postprocess_config = postprocess_config

    @property
    def preprocess_config(self):
        """Gets the preprocess_config of this PatchModelId.


        :return: The preprocess_config of this PatchModelId.
        :rtype: ModelPreprocessConfig
        """
        return self._preprocess_config

    @preprocess_config.setter
    def preprocess_config(self, preprocess_config):
        """Sets the preprocess_config of this PatchModelId.


        :param preprocess_config: The preprocess_config of this PatchModelId.
        :type preprocess_config: ModelPreprocessConfig
        """

        self._preprocess_config = preprocess_config

    @property
    def training_id(self):
        """Gets the training_id of this PatchModelId.


        :return: The training_id of this PatchModelId.
        :rtype: str
        """
        return self._training_id

    @training_id.setter
    def training_id(self, training_id):
        """Sets the training_id of this PatchModelId.


        :param training_id: The training_id of this PatchModelId.
        :type training_id: str
        """
        if training_id is not None and not re.search(r'^las:model-training:[a-f0-9]{32}$', training_id):
            raise ValueError("Invalid value for `training_id`, must be a follow pattern or equal to `/^las:model-training:[a-f0-9]{32}$/`")

        self._training_id = training_id
