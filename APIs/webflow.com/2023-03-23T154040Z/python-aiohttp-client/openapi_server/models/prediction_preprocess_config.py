# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PredictionPreprocessConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auto_rotate: bool=None, image_quality: str=None, max_pages: int=None):
        """PredictionPreprocessConfig - a model defined in OpenAPI

        :param auto_rotate: The auto_rotate of this PredictionPreprocessConfig.
        :param image_quality: The image_quality of this PredictionPreprocessConfig.
        :param max_pages: The max_pages of this PredictionPreprocessConfig.
        """
        self.openapi_types = {
            'auto_rotate': bool,
            'image_quality': str,
            'max_pages': int
        }

        self.attribute_map = {
            'auto_rotate': 'autoRotate',
            'image_quality': 'imageQuality',
            'max_pages': 'maxPages'
        }

        self._auto_rotate = auto_rotate
        self._image_quality = image_quality
        self._max_pages = max_pages

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PredictionPreprocessConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Prediction_preprocessConfig of this PredictionPreprocessConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auto_rotate(self):
        """Gets the auto_rotate of this PredictionPreprocessConfig.


        :return: The auto_rotate of this PredictionPreprocessConfig.
        :rtype: bool
        """
        return self._auto_rotate

    @auto_rotate.setter
    def auto_rotate(self, auto_rotate):
        """Sets the auto_rotate of this PredictionPreprocessConfig.


        :param auto_rotate: The auto_rotate of this PredictionPreprocessConfig.
        :type auto_rotate: bool
        """
        if auto_rotate is None:
            raise ValueError("Invalid value for `auto_rotate`, must not be `None`")

        self._auto_rotate = auto_rotate

    @property
    def image_quality(self):
        """Gets the image_quality of this PredictionPreprocessConfig.


        :return: The image_quality of this PredictionPreprocessConfig.
        :rtype: str
        """
        return self._image_quality

    @image_quality.setter
    def image_quality(self, image_quality):
        """Sets the image_quality of this PredictionPreprocessConfig.


        :param image_quality: The image_quality of this PredictionPreprocessConfig.
        :type image_quality: str
        """
        allowed_values = ["LOW", "HIGH"]  # noqa: E501
        if image_quality not in allowed_values:
            raise ValueError(
                "Invalid value for `image_quality` ({0}), must be one of {1}"
                .format(image_quality, allowed_values)
            )

        self._image_quality = image_quality

    @property
    def max_pages(self):
        """Gets the max_pages of this PredictionPreprocessConfig.


        :return: The max_pages of this PredictionPreprocessConfig.
        :rtype: int
        """
        return self._max_pages

    @max_pages.setter
    def max_pages(self, max_pages):
        """Sets the max_pages of this PredictionPreprocessConfig.


        :param max_pages: The max_pages of this PredictionPreprocessConfig.
        :type max_pages: int
        """
        if max_pages is None:
            raise ValueError("Invalid value for `max_pages`, must not be `None`")
        if max_pages is not None and max_pages > 3:
            raise ValueError("Invalid value for `max_pages`, must be a value less than or equal to `3`")
        if max_pages is not None and max_pages < 1:
            raise ValueError("Invalid value for `max_pages`, must be a value greater than or equal to `1`")

        self._max_pages = max_pages
