# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class User(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, avatar: str=None, created_by: str=None, created_time: str=None, email: str=None, metadata: object=None, name: str=None, profile_id: str=None, updated_by: str=None, updated_time: str=None, user_id: str=None):
        """User - a model defined in OpenAPI

        :param avatar: The avatar of this User.
        :param created_by: The created_by of this User.
        :param created_time: The created_time of this User.
        :param email: The email of this User.
        :param metadata: The metadata of this User.
        :param name: The name of this User.
        :param profile_id: The profile_id of this User.
        :param updated_by: The updated_by of this User.
        :param updated_time: The updated_time of this User.
        :param user_id: The user_id of this User.
        """
        self.openapi_types = {
            'avatar': str,
            'created_by': str,
            'created_time': str,
            'email': str,
            'metadata': object,
            'name': str,
            'profile_id': str,
            'updated_by': str,
            'updated_time': str,
            'user_id': str
        }

        self.attribute_map = {
            'avatar': 'avatar',
            'created_by': 'createdBy',
            'created_time': 'createdTime',
            'email': 'email',
            'metadata': 'metadata',
            'name': 'name',
            'profile_id': 'profileId',
            'updated_by': 'updatedBy',
            'updated_time': 'updatedTime',
            'user_id': 'userId'
        }

        self._avatar = avatar
        self._created_by = created_by
        self._created_time = created_time
        self._email = email
        self._metadata = metadata
        self._name = name
        self._profile_id = profile_id
        self._updated_by = updated_by
        self._updated_time = updated_time
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The User of this User.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def avatar(self):
        """Gets the avatar of this User.


        :return: The avatar of this User.
        :rtype: str
        """
        return self._avatar

    @avatar.setter
    def avatar(self, avatar):
        """Sets the avatar of this User.


        :param avatar: The avatar of this User.
        :type avatar: str
        """
        if avatar is not None and len(avatar) > 131072:
            raise ValueError("Invalid value for `avatar`, length must be less than or equal to `131072`")

        self._avatar = avatar

    @property
    def created_by(self):
        """Gets the created_by of this User.


        :return: The created_by of this User.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this User.


        :param created_by: The created_by of this User.
        :type created_by: str
        """
        if created_by is None:
            raise ValueError("Invalid value for `created_by`, must not be `None`")
        if created_by is not None and len(created_by) > 4096:
            raise ValueError("Invalid value for `created_by`, length must be less than or equal to `4096`")

        self._created_by = created_by

    @property
    def created_time(self):
        """Gets the created_time of this User.


        :return: The created_time of this User.
        :rtype: str
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this User.


        :param created_time: The created_time of this User.
        :type created_time: str
        """
        if created_time is None:
            raise ValueError("Invalid value for `created_time`, must not be `None`")
        if created_time is not None and not re.search(r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$', created_time):
            raise ValueError("Invalid value for `created_time`, must be a follow pattern or equal to `/^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$/`")

        self._created_time = created_time

    @property
    def email(self):
        """Gets the email of this User.


        :return: The email of this User.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this User.


        :param email: The email of this User.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")
        if email is not None and not re.search(r'^[A-Za-z0-9][-+._A-Za-z0-9]*@([-_.A-Za-z0-9]+\.)+[A-Za-z]{2,}$', email):
            raise ValueError("Invalid value for `email`, must be a follow pattern or equal to `/^[A-Za-z0-9][-+._A-Za-z0-9]*@([-_.A-Za-z0-9]+\.)+[A-Za-z]{2,}$/`")

        self._email = email

    @property
    def metadata(self):
        """Gets the metadata of this User.


        :return: The metadata of this User.
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this User.


        :param metadata: The metadata of this User.
        :type metadata: object
        """

        self._metadata = metadata

    @property
    def name(self):
        """Gets the name of this User.


        :return: The name of this User.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this User.


        :param name: The name of this User.
        :type name: str
        """
        if name is not None and len(name) > 4096:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `4096`")

        self._name = name

    @property
    def profile_id(self):
        """Gets the profile_id of this User.


        :return: The profile_id of this User.
        :rtype: str
        """
        return self._profile_id

    @profile_id.setter
    def profile_id(self, profile_id):
        """Sets the profile_id of this User.


        :param profile_id: The profile_id of this User.
        :type profile_id: str
        """
        if profile_id is not None and not re.search(r'^las:profile:[a-f0-9]{32}$', profile_id):
            raise ValueError("Invalid value for `profile_id`, must be a follow pattern or equal to `/^las:profile:[a-f0-9]{32}$/`")

        self._profile_id = profile_id

    @property
    def updated_by(self):
        """Gets the updated_by of this User.


        :return: The updated_by of this User.
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this User.


        :param updated_by: The updated_by of this User.
        :type updated_by: str
        """
        if updated_by is None:
            raise ValueError("Invalid value for `updated_by`, must not be `None`")
        if updated_by is not None and len(updated_by) > 4096:
            raise ValueError("Invalid value for `updated_by`, length must be less than or equal to `4096`")

        self._updated_by = updated_by

    @property
    def updated_time(self):
        """Gets the updated_time of this User.


        :return: The updated_time of this User.
        :rtype: str
        """
        return self._updated_time

    @updated_time.setter
    def updated_time(self, updated_time):
        """Sets the updated_time of this User.


        :param updated_time: The updated_time of this User.
        :type updated_time: str
        """
        if updated_time is None:
            raise ValueError("Invalid value for `updated_time`, must not be `None`")
        if updated_time is not None and not re.search(r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$', updated_time):
            raise ValueError("Invalid value for `updated_time`, must be a follow pattern or equal to `/^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$/`")

        self._updated_time = updated_time

    @property
    def user_id(self):
        """Gets the user_id of this User.


        :return: The user_id of this User.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this User.


        :param user_id: The user_id of this User.
        :type user_id: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")
        if user_id is not None and not re.search(r'^las:user:[a-f0-9]{32}$', user_id):
            raise ValueError("Invalid value for `user_id`, must be a follow pattern or equal to `/^las:user:[a-f0-9]{32}$/`")

        self._user_id = user_id
