# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PatchUserId(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, avatar: str=None, metadata: object=None, name: str=None):
        """PatchUserId - a model defined in OpenAPI

        :param avatar: The avatar of this PatchUserId.
        :param metadata: The metadata of this PatchUserId.
        :param name: The name of this PatchUserId.
        """
        self.openapi_types = {
            'avatar': str,
            'metadata': object,
            'name': str
        }

        self.attribute_map = {
            'avatar': 'avatar',
            'metadata': 'metadata',
            'name': 'name'
        }

        self._avatar = avatar
        self._metadata = metadata
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PatchUserId':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PatchUserId of this PatchUserId.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def avatar(self):
        """Gets the avatar of this PatchUserId.


        :return: The avatar of this PatchUserId.
        :rtype: str
        """
        return self._avatar

    @avatar.setter
    def avatar(self, avatar):
        """Sets the avatar of this PatchUserId.


        :param avatar: The avatar of this PatchUserId.
        :type avatar: str
        """
        if avatar is not None and len(avatar) > 131072:
            raise ValueError("Invalid value for `avatar`, length must be less than or equal to `131072`")

        self._avatar = avatar

    @property
    def metadata(self):
        """Gets the metadata of this PatchUserId.


        :return: The metadata of this PatchUserId.
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this PatchUserId.


        :param metadata: The metadata of this PatchUserId.
        :type metadata: object
        """

        self._metadata = metadata

    @property
    def name(self):
        """Gets the name of this PatchUserId.


        :return: The name of this PatchUserId.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PatchUserId.


        :param name: The name of this PatchUserId.
        :type name: str
        """
        if name is not None and len(name) > 4096:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `4096`")

        self._name = name
