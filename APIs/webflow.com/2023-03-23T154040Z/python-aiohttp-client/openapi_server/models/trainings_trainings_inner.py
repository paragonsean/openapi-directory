# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.training_warm_start_config import TrainingWarmStartConfig
import re
from openapi_server import util


class TrainingsTrainingsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_by: str=None, created_time: str=None, data_bundle_ids: List[str]=None, data_scientist_assistance: bool=None, deployment_environment_id: str=None, description: str=None, evaluation: object=None, gpu_hours: float=None, instance_type: str=None, metadata: object=None, model_id: str=None, name: str=None, status: str=None, training_id: str=None, updated_by: str=None, updated_time: str=None, warm_start_config: TrainingWarmStartConfig=None):
        """TrainingsTrainingsInner - a model defined in OpenAPI

        :param created_by: The created_by of this TrainingsTrainingsInner.
        :param created_time: The created_time of this TrainingsTrainingsInner.
        :param data_bundle_ids: The data_bundle_ids of this TrainingsTrainingsInner.
        :param data_scientist_assistance: The data_scientist_assistance of this TrainingsTrainingsInner.
        :param deployment_environment_id: The deployment_environment_id of this TrainingsTrainingsInner.
        :param description: The description of this TrainingsTrainingsInner.
        :param evaluation: The evaluation of this TrainingsTrainingsInner.
        :param gpu_hours: The gpu_hours of this TrainingsTrainingsInner.
        :param instance_type: The instance_type of this TrainingsTrainingsInner.
        :param metadata: The metadata of this TrainingsTrainingsInner.
        :param model_id: The model_id of this TrainingsTrainingsInner.
        :param name: The name of this TrainingsTrainingsInner.
        :param status: The status of this TrainingsTrainingsInner.
        :param training_id: The training_id of this TrainingsTrainingsInner.
        :param updated_by: The updated_by of this TrainingsTrainingsInner.
        :param updated_time: The updated_time of this TrainingsTrainingsInner.
        :param warm_start_config: The warm_start_config of this TrainingsTrainingsInner.
        """
        self.openapi_types = {
            'created_by': str,
            'created_time': str,
            'data_bundle_ids': List[str],
            'data_scientist_assistance': bool,
            'deployment_environment_id': str,
            'description': str,
            'evaluation': object,
            'gpu_hours': float,
            'instance_type': str,
            'metadata': object,
            'model_id': str,
            'name': str,
            'status': str,
            'training_id': str,
            'updated_by': str,
            'updated_time': str,
            'warm_start_config': TrainingWarmStartConfig
        }

        self.attribute_map = {
            'created_by': 'createdBy',
            'created_time': 'createdTime',
            'data_bundle_ids': 'dataBundleIds',
            'data_scientist_assistance': 'dataScientistAssistance',
            'deployment_environment_id': 'deploymentEnvironmentId',
            'description': 'description',
            'evaluation': 'evaluation',
            'gpu_hours': 'gpuHours',
            'instance_type': 'instanceType',
            'metadata': 'metadata',
            'model_id': 'modelId',
            'name': 'name',
            'status': 'status',
            'training_id': 'trainingId',
            'updated_by': 'updatedBy',
            'updated_time': 'updatedTime',
            'warm_start_config': 'warmStartConfig'
        }

        self._created_by = created_by
        self._created_time = created_time
        self._data_bundle_ids = data_bundle_ids
        self._data_scientist_assistance = data_scientist_assistance
        self._deployment_environment_id = deployment_environment_id
        self._description = description
        self._evaluation = evaluation
        self._gpu_hours = gpu_hours
        self._instance_type = instance_type
        self._metadata = metadata
        self._model_id = model_id
        self._name = name
        self._status = status
        self._training_id = training_id
        self._updated_by = updated_by
        self._updated_time = updated_time
        self._warm_start_config = warm_start_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TrainingsTrainingsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Trainings_trainings_inner of this TrainingsTrainingsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_by(self):
        """Gets the created_by of this TrainingsTrainingsInner.


        :return: The created_by of this TrainingsTrainingsInner.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this TrainingsTrainingsInner.


        :param created_by: The created_by of this TrainingsTrainingsInner.
        :type created_by: str
        """
        if created_by is None:
            raise ValueError("Invalid value for `created_by`, must not be `None`")
        if created_by is not None and len(created_by) > 4096:
            raise ValueError("Invalid value for `created_by`, length must be less than or equal to `4096`")

        self._created_by = created_by

    @property
    def created_time(self):
        """Gets the created_time of this TrainingsTrainingsInner.


        :return: The created_time of this TrainingsTrainingsInner.
        :rtype: str
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this TrainingsTrainingsInner.


        :param created_time: The created_time of this TrainingsTrainingsInner.
        :type created_time: str
        """
        if created_time is None:
            raise ValueError("Invalid value for `created_time`, must not be `None`")
        if created_time is not None and not re.search(r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$', created_time):
            raise ValueError("Invalid value for `created_time`, must be a follow pattern or equal to `/^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$/`")

        self._created_time = created_time

    @property
    def data_bundle_ids(self):
        """Gets the data_bundle_ids of this TrainingsTrainingsInner.


        :return: The data_bundle_ids of this TrainingsTrainingsInner.
        :rtype: List[str]
        """
        return self._data_bundle_ids

    @data_bundle_ids.setter
    def data_bundle_ids(self, data_bundle_ids):
        """Sets the data_bundle_ids of this TrainingsTrainingsInner.


        :param data_bundle_ids: The data_bundle_ids of this TrainingsTrainingsInner.
        :type data_bundle_ids: List[str]
        """
        if data_bundle_ids is None:
            raise ValueError("Invalid value for `data_bundle_ids`, must not be `None`")

        self._data_bundle_ids = data_bundle_ids

    @property
    def data_scientist_assistance(self):
        """Gets the data_scientist_assistance of this TrainingsTrainingsInner.


        :return: The data_scientist_assistance of this TrainingsTrainingsInner.
        :rtype: bool
        """
        return self._data_scientist_assistance

    @data_scientist_assistance.setter
    def data_scientist_assistance(self, data_scientist_assistance):
        """Sets the data_scientist_assistance of this TrainingsTrainingsInner.


        :param data_scientist_assistance: The data_scientist_assistance of this TrainingsTrainingsInner.
        :type data_scientist_assistance: bool
        """

        self._data_scientist_assistance = data_scientist_assistance

    @property
    def deployment_environment_id(self):
        """Gets the deployment_environment_id of this TrainingsTrainingsInner.


        :return: The deployment_environment_id of this TrainingsTrainingsInner.
        :rtype: str
        """
        return self._deployment_environment_id

    @deployment_environment_id.setter
    def deployment_environment_id(self, deployment_environment_id):
        """Sets the deployment_environment_id of this TrainingsTrainingsInner.


        :param deployment_environment_id: The deployment_environment_id of this TrainingsTrainingsInner.
        :type deployment_environment_id: str
        """
        if deployment_environment_id is not None and not re.search(r'^(|las:organization:[a-z0-9-_]+\/)las:deployment-environment:[a-z0-9-_]+(|:@[a-z0-9-_]+|:[0-9]+)$', deployment_environment_id):
            raise ValueError("Invalid value for `deployment_environment_id`, must be a follow pattern or equal to `/^(|las:organization:[a-z0-9-_]+\/)las:deployment-environment:[a-z0-9-_]+(|:@[a-z0-9-_]+|:[0-9]+)$/`")

        self._deployment_environment_id = deployment_environment_id

    @property
    def description(self):
        """Gets the description of this TrainingsTrainingsInner.


        :return: The description of this TrainingsTrainingsInner.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TrainingsTrainingsInner.


        :param description: The description of this TrainingsTrainingsInner.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")
        if description is not None and len(description) > 4096:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `4096`")

        self._description = description

    @property
    def evaluation(self):
        """Gets the evaluation of this TrainingsTrainingsInner.


        :return: The evaluation of this TrainingsTrainingsInner.
        :rtype: object
        """
        return self._evaluation

    @evaluation.setter
    def evaluation(self, evaluation):
        """Sets the evaluation of this TrainingsTrainingsInner.


        :param evaluation: The evaluation of this TrainingsTrainingsInner.
        :type evaluation: object
        """
        if evaluation is None:
            raise ValueError("Invalid value for `evaluation`, must not be `None`")

        self._evaluation = evaluation

    @property
    def gpu_hours(self):
        """Gets the gpu_hours of this TrainingsTrainingsInner.


        :return: The gpu_hours of this TrainingsTrainingsInner.
        :rtype: float
        """
        return self._gpu_hours

    @gpu_hours.setter
    def gpu_hours(self, gpu_hours):
        """Sets the gpu_hours of this TrainingsTrainingsInner.


        :param gpu_hours: The gpu_hours of this TrainingsTrainingsInner.
        :type gpu_hours: float
        """
        if gpu_hours is None:
            raise ValueError("Invalid value for `gpu_hours`, must not be `None`")
        if gpu_hours is not None and gpu_hours < 0:
            raise ValueError("Invalid value for `gpu_hours`, must be a value greater than or equal to `0`")

        self._gpu_hours = gpu_hours

    @property
    def instance_type(self):
        """Gets the instance_type of this TrainingsTrainingsInner.


        :return: The instance_type of this TrainingsTrainingsInner.
        :rtype: str
        """
        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type):
        """Sets the instance_type of this TrainingsTrainingsInner.


        :param instance_type: The instance_type of this TrainingsTrainingsInner.
        :type instance_type: str
        """
        allowed_values = ["small-gpu", "medium-gpu", "large-gpu"]  # noqa: E501
        if instance_type not in allowed_values:
            raise ValueError(
                "Invalid value for `instance_type` ({0}), must be one of {1}"
                .format(instance_type, allowed_values)
            )

        self._instance_type = instance_type

    @property
    def metadata(self):
        """Gets the metadata of this TrainingsTrainingsInner.


        :return: The metadata of this TrainingsTrainingsInner.
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this TrainingsTrainingsInner.


        :param metadata: The metadata of this TrainingsTrainingsInner.
        :type metadata: object
        """
        if metadata is None:
            raise ValueError("Invalid value for `metadata`, must not be `None`")

        self._metadata = metadata

    @property
    def model_id(self):
        """Gets the model_id of this TrainingsTrainingsInner.


        :return: The model_id of this TrainingsTrainingsInner.
        :rtype: str
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id):
        """Sets the model_id of this TrainingsTrainingsInner.


        :param model_id: The model_id of this TrainingsTrainingsInner.
        :type model_id: str
        """
        if model_id is None:
            raise ValueError("Invalid value for `model_id`, must not be `None`")
        if model_id is not None and not re.search(r'^las:model:[a-z0-9-_]+$', model_id):
            raise ValueError("Invalid value for `model_id`, must be a follow pattern or equal to `/^las:model:[a-z0-9-_]+$/`")

        self._model_id = model_id

    @property
    def name(self):
        """Gets the name of this TrainingsTrainingsInner.


        :return: The name of this TrainingsTrainingsInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TrainingsTrainingsInner.


        :param name: The name of this TrainingsTrainingsInner.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 4096:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `4096`")

        self._name = name

    @property
    def status(self):
        """Gets the status of this TrainingsTrainingsInner.


        :return: The status of this TrainingsTrainingsInner.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TrainingsTrainingsInner.


        :param status: The status of this TrainingsTrainingsInner.
        :type status: str
        """
        allowed_values = ["waiting-for-approval", "pending", "running", "succeeded", "failed", "cancelled"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def training_id(self):
        """Gets the training_id of this TrainingsTrainingsInner.


        :return: The training_id of this TrainingsTrainingsInner.
        :rtype: str
        """
        return self._training_id

    @training_id.setter
    def training_id(self, training_id):
        """Sets the training_id of this TrainingsTrainingsInner.


        :param training_id: The training_id of this TrainingsTrainingsInner.
        :type training_id: str
        """
        if training_id is None:
            raise ValueError("Invalid value for `training_id`, must not be `None`")
        if training_id is not None and not re.search(r'^las:model-training:[a-f0-9]{32}$', training_id):
            raise ValueError("Invalid value for `training_id`, must be a follow pattern or equal to `/^las:model-training:[a-f0-9]{32}$/`")

        self._training_id = training_id

    @property
    def updated_by(self):
        """Gets the updated_by of this TrainingsTrainingsInner.


        :return: The updated_by of this TrainingsTrainingsInner.
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this TrainingsTrainingsInner.


        :param updated_by: The updated_by of this TrainingsTrainingsInner.
        :type updated_by: str
        """
        if updated_by is None:
            raise ValueError("Invalid value for `updated_by`, must not be `None`")
        if updated_by is not None and len(updated_by) > 4096:
            raise ValueError("Invalid value for `updated_by`, length must be less than or equal to `4096`")

        self._updated_by = updated_by

    @property
    def updated_time(self):
        """Gets the updated_time of this TrainingsTrainingsInner.


        :return: The updated_time of this TrainingsTrainingsInner.
        :rtype: str
        """
        return self._updated_time

    @updated_time.setter
    def updated_time(self, updated_time):
        """Sets the updated_time of this TrainingsTrainingsInner.


        :param updated_time: The updated_time of this TrainingsTrainingsInner.
        :type updated_time: str
        """
        if updated_time is None:
            raise ValueError("Invalid value for `updated_time`, must not be `None`")
        if updated_time is not None and not re.search(r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$', updated_time):
            raise ValueError("Invalid value for `updated_time`, must be a follow pattern or equal to `/^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$/`")

        self._updated_time = updated_time

    @property
    def warm_start_config(self):
        """Gets the warm_start_config of this TrainingsTrainingsInner.


        :return: The warm_start_config of this TrainingsTrainingsInner.
        :rtype: TrainingWarmStartConfig
        """
        return self._warm_start_config

    @warm_start_config.setter
    def warm_start_config(self, warm_start_config):
        """Sets the warm_start_config of this TrainingsTrainingsInner.


        :param warm_start_config: The warm_start_config of this TrainingsTrainingsInner.
        :type warm_start_config: TrainingWarmStartConfig
        """

        self._warm_start_config = warm_start_config
