# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.data_bundle_datasets_inner import DataBundleDatasetsInner
import re
from openapi_server import util


class DataBundlesDataBundlesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_by: str=None, created_time: str=None, data_bundle_id: str=None, datasets: List[DataBundleDatasetsInner]=None, description: str=None, model_id: str=None, name: str=None, retention_in_days: int=None, status: str=None, summary: object=None, updated_by: str=None, updated_time: str=None):
        """DataBundlesDataBundlesInner - a model defined in OpenAPI

        :param created_by: The created_by of this DataBundlesDataBundlesInner.
        :param created_time: The created_time of this DataBundlesDataBundlesInner.
        :param data_bundle_id: The data_bundle_id of this DataBundlesDataBundlesInner.
        :param datasets: The datasets of this DataBundlesDataBundlesInner.
        :param description: The description of this DataBundlesDataBundlesInner.
        :param model_id: The model_id of this DataBundlesDataBundlesInner.
        :param name: The name of this DataBundlesDataBundlesInner.
        :param retention_in_days: The retention_in_days of this DataBundlesDataBundlesInner.
        :param status: The status of this DataBundlesDataBundlesInner.
        :param summary: The summary of this DataBundlesDataBundlesInner.
        :param updated_by: The updated_by of this DataBundlesDataBundlesInner.
        :param updated_time: The updated_time of this DataBundlesDataBundlesInner.
        """
        self.openapi_types = {
            'created_by': str,
            'created_time': str,
            'data_bundle_id': str,
            'datasets': List[DataBundleDatasetsInner],
            'description': str,
            'model_id': str,
            'name': str,
            'retention_in_days': int,
            'status': str,
            'summary': object,
            'updated_by': str,
            'updated_time': str
        }

        self.attribute_map = {
            'created_by': 'createdBy',
            'created_time': 'createdTime',
            'data_bundle_id': 'dataBundleId',
            'datasets': 'datasets',
            'description': 'description',
            'model_id': 'modelId',
            'name': 'name',
            'retention_in_days': 'retentionInDays',
            'status': 'status',
            'summary': 'summary',
            'updated_by': 'updatedBy',
            'updated_time': 'updatedTime'
        }

        self._created_by = created_by
        self._created_time = created_time
        self._data_bundle_id = data_bundle_id
        self._datasets = datasets
        self._description = description
        self._model_id = model_id
        self._name = name
        self._retention_in_days = retention_in_days
        self._status = status
        self._summary = summary
        self._updated_by = updated_by
        self._updated_time = updated_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataBundlesDataBundlesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataBundles_dataBundles_inner of this DataBundlesDataBundlesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_by(self):
        """Gets the created_by of this DataBundlesDataBundlesInner.


        :return: The created_by of this DataBundlesDataBundlesInner.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this DataBundlesDataBundlesInner.


        :param created_by: The created_by of this DataBundlesDataBundlesInner.
        :type created_by: str
        """
        if created_by is None:
            raise ValueError("Invalid value for `created_by`, must not be `None`")
        if created_by is not None and len(created_by) > 4096:
            raise ValueError("Invalid value for `created_by`, length must be less than or equal to `4096`")

        self._created_by = created_by

    @property
    def created_time(self):
        """Gets the created_time of this DataBundlesDataBundlesInner.


        :return: The created_time of this DataBundlesDataBundlesInner.
        :rtype: str
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this DataBundlesDataBundlesInner.


        :param created_time: The created_time of this DataBundlesDataBundlesInner.
        :type created_time: str
        """
        if created_time is None:
            raise ValueError("Invalid value for `created_time`, must not be `None`")
        if created_time is not None and not re.search(r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$', created_time):
            raise ValueError("Invalid value for `created_time`, must be a follow pattern or equal to `/^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$/`")

        self._created_time = created_time

    @property
    def data_bundle_id(self):
        """Gets the data_bundle_id of this DataBundlesDataBundlesInner.


        :return: The data_bundle_id of this DataBundlesDataBundlesInner.
        :rtype: str
        """
        return self._data_bundle_id

    @data_bundle_id.setter
    def data_bundle_id(self, data_bundle_id):
        """Sets the data_bundle_id of this DataBundlesDataBundlesInner.


        :param data_bundle_id: The data_bundle_id of this DataBundlesDataBundlesInner.
        :type data_bundle_id: str
        """
        if data_bundle_id is None:
            raise ValueError("Invalid value for `data_bundle_id`, must not be `None`")
        if data_bundle_id is not None and not re.search(r'^las:model-data-bundle:[a-f0-9]{32}$', data_bundle_id):
            raise ValueError("Invalid value for `data_bundle_id`, must be a follow pattern or equal to `/^las:model-data-bundle:[a-f0-9]{32}$/`")

        self._data_bundle_id = data_bundle_id

    @property
    def datasets(self):
        """Gets the datasets of this DataBundlesDataBundlesInner.


        :return: The datasets of this DataBundlesDataBundlesInner.
        :rtype: List[DataBundleDatasetsInner]
        """
        return self._datasets

    @datasets.setter
    def datasets(self, datasets):
        """Sets the datasets of this DataBundlesDataBundlesInner.


        :param datasets: The datasets of this DataBundlesDataBundlesInner.
        :type datasets: List[DataBundleDatasetsInner]
        """
        if datasets is None:
            raise ValueError("Invalid value for `datasets`, must not be `None`")

        self._datasets = datasets

    @property
    def description(self):
        """Gets the description of this DataBundlesDataBundlesInner.


        :return: The description of this DataBundlesDataBundlesInner.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DataBundlesDataBundlesInner.


        :param description: The description of this DataBundlesDataBundlesInner.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")
        if description is not None and len(description) > 4096:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `4096`")

        self._description = description

    @property
    def model_id(self):
        """Gets the model_id of this DataBundlesDataBundlesInner.


        :return: The model_id of this DataBundlesDataBundlesInner.
        :rtype: str
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id):
        """Sets the model_id of this DataBundlesDataBundlesInner.


        :param model_id: The model_id of this DataBundlesDataBundlesInner.
        :type model_id: str
        """
        if model_id is None:
            raise ValueError("Invalid value for `model_id`, must not be `None`")
        if model_id is not None and not re.search(r'^las:model:[a-z0-9-_]+$', model_id):
            raise ValueError("Invalid value for `model_id`, must be a follow pattern or equal to `/^las:model:[a-z0-9-_]+$/`")

        self._model_id = model_id

    @property
    def name(self):
        """Gets the name of this DataBundlesDataBundlesInner.


        :return: The name of this DataBundlesDataBundlesInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DataBundlesDataBundlesInner.


        :param name: The name of this DataBundlesDataBundlesInner.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 4096:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `4096`")

        self._name = name

    @property
    def retention_in_days(self):
        """Gets the retention_in_days of this DataBundlesDataBundlesInner.


        :return: The retention_in_days of this DataBundlesDataBundlesInner.
        :rtype: int
        """
        return self._retention_in_days

    @retention_in_days.setter
    def retention_in_days(self, retention_in_days):
        """Sets the retention_in_days of this DataBundlesDataBundlesInner.


        :param retention_in_days: The retention_in_days of this DataBundlesDataBundlesInner.
        :type retention_in_days: int
        """
        if retention_in_days is not None and retention_in_days < 1:
            raise ValueError("Invalid value for `retention_in_days`, must be a value greater than or equal to `1`")

        self._retention_in_days = retention_in_days

    @property
    def status(self):
        """Gets the status of this DataBundlesDataBundlesInner.


        :return: The status of this DataBundlesDataBundlesInner.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DataBundlesDataBundlesInner.


        :param status: The status of this DataBundlesDataBundlesInner.
        :type status: str
        """
        allowed_values = ["running", "succeeded", "failed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def summary(self):
        """Gets the summary of this DataBundlesDataBundlesInner.


        :return: The summary of this DataBundlesDataBundlesInner.
        :rtype: object
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this DataBundlesDataBundlesInner.


        :param summary: The summary of this DataBundlesDataBundlesInner.
        :type summary: object
        """
        if summary is None:
            raise ValueError("Invalid value for `summary`, must not be `None`")

        self._summary = summary

    @property
    def updated_by(self):
        """Gets the updated_by of this DataBundlesDataBundlesInner.


        :return: The updated_by of this DataBundlesDataBundlesInner.
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this DataBundlesDataBundlesInner.


        :param updated_by: The updated_by of this DataBundlesDataBundlesInner.
        :type updated_by: str
        """
        if updated_by is None:
            raise ValueError("Invalid value for `updated_by`, must not be `None`")
        if updated_by is not None and len(updated_by) > 4096:
            raise ValueError("Invalid value for `updated_by`, length must be less than or equal to `4096`")

        self._updated_by = updated_by

    @property
    def updated_time(self):
        """Gets the updated_time of this DataBundlesDataBundlesInner.


        :return: The updated_time of this DataBundlesDataBundlesInner.
        :rtype: str
        """
        return self._updated_time

    @updated_time.setter
    def updated_time(self, updated_time):
        """Sets the updated_time of this DataBundlesDataBundlesInner.


        :param updated_time: The updated_time of this DataBundlesDataBundlesInner.
        :type updated_time: str
        """
        if updated_time is None:
            raise ValueError("Invalid value for `updated_time`, must not be `None`")
        if updated_time is not None and not re.search(r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$', updated_time):
            raise ValueError("Invalid value for `updated_time`, must be a follow pattern or equal to `/^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$/`")

        self._updated_time = updated_time
