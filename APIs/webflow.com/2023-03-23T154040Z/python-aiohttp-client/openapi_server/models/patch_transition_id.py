# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.patch_transition_id_assets import PatchTransitionIdAssets
from openapi_server.models.patch_transition_id_parameters import PatchTransitionIdParameters
from openapi_server import util


class PatchTransitionId(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assets: PatchTransitionIdAssets=None, description: str=None, environment: Dict[str, str]=None, environment_secrets: List[str]=None, input_json_schema: object=None, name: str=None, output_json_schema: object=None, parameters: PatchTransitionIdParameters=None):
        """PatchTransitionId - a model defined in OpenAPI

        :param assets: The assets of this PatchTransitionId.
        :param description: The description of this PatchTransitionId.
        :param environment: The environment of this PatchTransitionId.
        :param environment_secrets: The environment_secrets of this PatchTransitionId.
        :param input_json_schema: The input_json_schema of this PatchTransitionId.
        :param name: The name of this PatchTransitionId.
        :param output_json_schema: The output_json_schema of this PatchTransitionId.
        :param parameters: The parameters of this PatchTransitionId.
        """
        self.openapi_types = {
            'assets': PatchTransitionIdAssets,
            'description': str,
            'environment': Dict[str, str],
            'environment_secrets': List[str],
            'input_json_schema': object,
            'name': str,
            'output_json_schema': object,
            'parameters': PatchTransitionIdParameters
        }

        self.attribute_map = {
            'assets': 'assets',
            'description': 'description',
            'environment': 'environment',
            'environment_secrets': 'environmentSecrets',
            'input_json_schema': 'inputJsonSchema',
            'name': 'name',
            'output_json_schema': 'outputJsonSchema',
            'parameters': 'parameters'
        }

        self._assets = assets
        self._description = description
        self._environment = environment
        self._environment_secrets = environment_secrets
        self._input_json_schema = input_json_schema
        self._name = name
        self._output_json_schema = output_json_schema
        self._parameters = parameters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PatchTransitionId':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PatchTransitionId of this PatchTransitionId.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assets(self):
        """Gets the assets of this PatchTransitionId.


        :return: The assets of this PatchTransitionId.
        :rtype: PatchTransitionIdAssets
        """
        return self._assets

    @assets.setter
    def assets(self, assets):
        """Sets the assets of this PatchTransitionId.


        :param assets: The assets of this PatchTransitionId.
        :type assets: PatchTransitionIdAssets
        """

        self._assets = assets

    @property
    def description(self):
        """Gets the description of this PatchTransitionId.


        :return: The description of this PatchTransitionId.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PatchTransitionId.


        :param description: The description of this PatchTransitionId.
        :type description: str
        """
        if description is not None and len(description) > 4096:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `4096`")

        self._description = description

    @property
    def environment(self):
        """Gets the environment of this PatchTransitionId.


        :return: The environment of this PatchTransitionId.
        :rtype: Dict[str, str]
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this PatchTransitionId.


        :param environment: The environment of this PatchTransitionId.
        :type environment: Dict[str, str]
        """

        self._environment = environment

    @property
    def environment_secrets(self):
        """Gets the environment_secrets of this PatchTransitionId.


        :return: The environment_secrets of this PatchTransitionId.
        :rtype: List[str]
        """
        return self._environment_secrets

    @environment_secrets.setter
    def environment_secrets(self, environment_secrets):
        """Sets the environment_secrets of this PatchTransitionId.


        :param environment_secrets: The environment_secrets of this PatchTransitionId.
        :type environment_secrets: List[str]
        """

        self._environment_secrets = environment_secrets

    @property
    def input_json_schema(self):
        """Gets the input_json_schema of this PatchTransitionId.


        :return: The input_json_schema of this PatchTransitionId.
        :rtype: object
        """
        return self._input_json_schema

    @input_json_schema.setter
    def input_json_schema(self, input_json_schema):
        """Sets the input_json_schema of this PatchTransitionId.


        :param input_json_schema: The input_json_schema of this PatchTransitionId.
        :type input_json_schema: object
        """

        self._input_json_schema = input_json_schema

    @property
    def name(self):
        """Gets the name of this PatchTransitionId.


        :return: The name of this PatchTransitionId.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PatchTransitionId.


        :param name: The name of this PatchTransitionId.
        :type name: str
        """
        if name is not None and len(name) > 4096:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `4096`")

        self._name = name

    @property
    def output_json_schema(self):
        """Gets the output_json_schema of this PatchTransitionId.


        :return: The output_json_schema of this PatchTransitionId.
        :rtype: object
        """
        return self._output_json_schema

    @output_json_schema.setter
    def output_json_schema(self, output_json_schema):
        """Sets the output_json_schema of this PatchTransitionId.


        :param output_json_schema: The output_json_schema of this PatchTransitionId.
        :type output_json_schema: object
        """

        self._output_json_schema = output_json_schema

    @property
    def parameters(self):
        """Gets the parameters of this PatchTransitionId.


        :return: The parameters of this PatchTransitionId.
        :rtype: PatchTransitionIdParameters
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this PatchTransitionId.


        :param parameters: The parameters of this PatchTransitionId.
        :type parameters: PatchTransitionIdParameters
        """

        self._parameters = parameters
