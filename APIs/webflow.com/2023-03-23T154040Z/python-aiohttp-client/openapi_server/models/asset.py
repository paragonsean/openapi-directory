# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class Asset(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, asset_id: str=None, content: str=None, content_md5: str=None, created_by: str=None, created_time: str=None, description: str=None, name: str=None, updated_by: str=None, updated_time: str=None):
        """Asset - a model defined in OpenAPI

        :param asset_id: The asset_id of this Asset.
        :param content: The content of this Asset.
        :param content_md5: The content_md5 of this Asset.
        :param created_by: The created_by of this Asset.
        :param created_time: The created_time of this Asset.
        :param description: The description of this Asset.
        :param name: The name of this Asset.
        :param updated_by: The updated_by of this Asset.
        :param updated_time: The updated_time of this Asset.
        """
        self.openapi_types = {
            'asset_id': str,
            'content': str,
            'content_md5': str,
            'created_by': str,
            'created_time': str,
            'description': str,
            'name': str,
            'updated_by': str,
            'updated_time': str
        }

        self.attribute_map = {
            'asset_id': 'assetId',
            'content': 'content',
            'content_md5': 'contentMD5',
            'created_by': 'createdBy',
            'created_time': 'createdTime',
            'description': 'description',
            'name': 'name',
            'updated_by': 'updatedBy',
            'updated_time': 'updatedTime'
        }

        self._asset_id = asset_id
        self._content = content
        self._content_md5 = content_md5
        self._created_by = created_by
        self._created_time = created_time
        self._description = description
        self._name = name
        self._updated_by = updated_by
        self._updated_time = updated_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Asset':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Asset of this Asset.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def asset_id(self):
        """Gets the asset_id of this Asset.


        :return: The asset_id of this Asset.
        :rtype: str
        """
        return self._asset_id

    @asset_id.setter
    def asset_id(self, asset_id):
        """Sets the asset_id of this Asset.


        :param asset_id: The asset_id of this Asset.
        :type asset_id: str
        """
        if asset_id is None:
            raise ValueError("Invalid value for `asset_id`, must not be `None`")
        if asset_id is not None and not re.search(r'^las:asset:[a-f0-9]{32}$', asset_id):
            raise ValueError("Invalid value for `asset_id`, must be a follow pattern or equal to `/^las:asset:[a-f0-9]{32}$/`")

        self._asset_id = asset_id

    @property
    def content(self):
        """Gets the content of this Asset.


        :return: The content of this Asset.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this Asset.


        :param content: The content of this Asset.
        :type content: str
        """
        if content is not None and len(content) < 1:
            raise ValueError("Invalid value for `content`, length must be greater than or equal to `1`")

        self._content = content

    @property
    def content_md5(self):
        """Gets the content_md5 of this Asset.


        :return: The content_md5 of this Asset.
        :rtype: str
        """
        return self._content_md5

    @content_md5.setter
    def content_md5(self, content_md5):
        """Sets the content_md5 of this Asset.


        :param content_md5: The content_md5 of this Asset.
        :type content_md5: str
        """
        if content_md5 is None:
            raise ValueError("Invalid value for `content_md5`, must not be `None`")
        if content_md5 is not None and len(content_md5) > 4096:
            raise ValueError("Invalid value for `content_md5`, length must be less than or equal to `4096`")

        self._content_md5 = content_md5

    @property
    def created_by(self):
        """Gets the created_by of this Asset.


        :return: The created_by of this Asset.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Asset.


        :param created_by: The created_by of this Asset.
        :type created_by: str
        """
        if created_by is None:
            raise ValueError("Invalid value for `created_by`, must not be `None`")
        if created_by is not None and len(created_by) > 4096:
            raise ValueError("Invalid value for `created_by`, length must be less than or equal to `4096`")

        self._created_by = created_by

    @property
    def created_time(self):
        """Gets the created_time of this Asset.


        :return: The created_time of this Asset.
        :rtype: str
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this Asset.


        :param created_time: The created_time of this Asset.
        :type created_time: str
        """
        if created_time is None:
            raise ValueError("Invalid value for `created_time`, must not be `None`")
        if created_time is not None and not re.search(r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$', created_time):
            raise ValueError("Invalid value for `created_time`, must be a follow pattern or equal to `/^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$/`")

        self._created_time = created_time

    @property
    def description(self):
        """Gets the description of this Asset.


        :return: The description of this Asset.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Asset.


        :param description: The description of this Asset.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")
        if description is not None and len(description) > 4096:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `4096`")

        self._description = description

    @property
    def name(self):
        """Gets the name of this Asset.


        :return: The name of this Asset.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Asset.


        :param name: The name of this Asset.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 4096:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `4096`")

        self._name = name

    @property
    def updated_by(self):
        """Gets the updated_by of this Asset.


        :return: The updated_by of this Asset.
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this Asset.


        :param updated_by: The updated_by of this Asset.
        :type updated_by: str
        """
        if updated_by is None:
            raise ValueError("Invalid value for `updated_by`, must not be `None`")
        if updated_by is not None and len(updated_by) > 4096:
            raise ValueError("Invalid value for `updated_by`, length must be less than or equal to `4096`")

        self._updated_by = updated_by

    @property
    def updated_time(self):
        """Gets the updated_time of this Asset.


        :return: The updated_time of this Asset.
        :rtype: str
        """
        return self._updated_time

    @updated_time.setter
    def updated_time(self, updated_time):
        """Sets the updated_time of this Asset.


        :param updated_time: The updated_time of this Asset.
        :type updated_time: str
        """
        if updated_time is None:
            raise ValueError("Invalid value for `updated_time`, must not be `None`")
        if updated_time is not None and not re.search(r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$', updated_time):
            raise ValueError("Invalid value for `updated_time`, must be a follow pattern or equal to `/^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$/`")

        self._updated_time = updated_time
