# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.prediction_postprocess_config import PredictionPostprocessConfig
from openapi_server.models.prediction_predictions_inner import PredictionPredictionsInner
from openapi_server.models.prediction_preprocess_config import PredictionPreprocessConfig
import re
from openapi_server import util


class PredictionsPredictionsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_by: str=None, created_time: str=None, document_id: str=None, inference_time: float=None, model_id: str=None, postprocess_config: PredictionPostprocessConfig=None, prediction_id: str=None, predictions: List[PredictionPredictionsInner]=None, preprocess_config: PredictionPreprocessConfig=None, training_id: str=None):
        """PredictionsPredictionsInner - a model defined in OpenAPI

        :param created_by: The created_by of this PredictionsPredictionsInner.
        :param created_time: The created_time of this PredictionsPredictionsInner.
        :param document_id: The document_id of this PredictionsPredictionsInner.
        :param inference_time: The inference_time of this PredictionsPredictionsInner.
        :param model_id: The model_id of this PredictionsPredictionsInner.
        :param postprocess_config: The postprocess_config of this PredictionsPredictionsInner.
        :param prediction_id: The prediction_id of this PredictionsPredictionsInner.
        :param predictions: The predictions of this PredictionsPredictionsInner.
        :param preprocess_config: The preprocess_config of this PredictionsPredictionsInner.
        :param training_id: The training_id of this PredictionsPredictionsInner.
        """
        self.openapi_types = {
            'created_by': str,
            'created_time': str,
            'document_id': str,
            'inference_time': float,
            'model_id': str,
            'postprocess_config': PredictionPostprocessConfig,
            'prediction_id': str,
            'predictions': List[PredictionPredictionsInner],
            'preprocess_config': PredictionPreprocessConfig,
            'training_id': str
        }

        self.attribute_map = {
            'created_by': 'createdBy',
            'created_time': 'createdTime',
            'document_id': 'documentId',
            'inference_time': 'inferenceTime',
            'model_id': 'modelId',
            'postprocess_config': 'postprocessConfig',
            'prediction_id': 'predictionId',
            'predictions': 'predictions',
            'preprocess_config': 'preprocessConfig',
            'training_id': 'trainingId'
        }

        self._created_by = created_by
        self._created_time = created_time
        self._document_id = document_id
        self._inference_time = inference_time
        self._model_id = model_id
        self._postprocess_config = postprocess_config
        self._prediction_id = prediction_id
        self._predictions = predictions
        self._preprocess_config = preprocess_config
        self._training_id = training_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PredictionsPredictionsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Predictions_predictions_inner of this PredictionsPredictionsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_by(self):
        """Gets the created_by of this PredictionsPredictionsInner.


        :return: The created_by of this PredictionsPredictionsInner.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this PredictionsPredictionsInner.


        :param created_by: The created_by of this PredictionsPredictionsInner.
        :type created_by: str
        """
        if created_by is not None and len(created_by) > 4096:
            raise ValueError("Invalid value for `created_by`, length must be less than or equal to `4096`")

        self._created_by = created_by

    @property
    def created_time(self):
        """Gets the created_time of this PredictionsPredictionsInner.


        :return: The created_time of this PredictionsPredictionsInner.
        :rtype: str
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this PredictionsPredictionsInner.


        :param created_time: The created_time of this PredictionsPredictionsInner.
        :type created_time: str
        """
        if created_time is not None and not re.search(r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$', created_time):
            raise ValueError("Invalid value for `created_time`, must be a follow pattern or equal to `/^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$/`")

        self._created_time = created_time

    @property
    def document_id(self):
        """Gets the document_id of this PredictionsPredictionsInner.


        :return: The document_id of this PredictionsPredictionsInner.
        :rtype: str
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id):
        """Sets the document_id of this PredictionsPredictionsInner.


        :param document_id: The document_id of this PredictionsPredictionsInner.
        :type document_id: str
        """
        if document_id is None:
            raise ValueError("Invalid value for `document_id`, must not be `None`")
        if document_id is not None and not re.search(r'^las:document:[a-f0-9]{32}$', document_id):
            raise ValueError("Invalid value for `document_id`, must be a follow pattern or equal to `/^las:document:[a-f0-9]{32}$/`")

        self._document_id = document_id

    @property
    def inference_time(self):
        """Gets the inference_time of this PredictionsPredictionsInner.


        :return: The inference_time of this PredictionsPredictionsInner.
        :rtype: float
        """
        return self._inference_time

    @inference_time.setter
    def inference_time(self, inference_time):
        """Sets the inference_time of this PredictionsPredictionsInner.


        :param inference_time: The inference_time of this PredictionsPredictionsInner.
        :type inference_time: float
        """
        if inference_time is None:
            raise ValueError("Invalid value for `inference_time`, must not be `None`")
        if inference_time is not None and inference_time < 0:
            raise ValueError("Invalid value for `inference_time`, must be a value greater than or equal to `0`")

        self._inference_time = inference_time

    @property
    def model_id(self):
        """Gets the model_id of this PredictionsPredictionsInner.


        :return: The model_id of this PredictionsPredictionsInner.
        :rtype: str
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id):
        """Sets the model_id of this PredictionsPredictionsInner.


        :param model_id: The model_id of this PredictionsPredictionsInner.
        :type model_id: str
        """
        if model_id is None:
            raise ValueError("Invalid value for `model_id`, must not be `None`")
        if model_id is not None and not re.search(r'^(|las:organization:[a-z0-9-_]+\/)las:model:[a-z0-9-_]+$', model_id):
            raise ValueError("Invalid value for `model_id`, must be a follow pattern or equal to `/^(|las:organization:[a-z0-9-_]+\/)las:model:[a-z0-9-_]+$/`")

        self._model_id = model_id

    @property
    def postprocess_config(self):
        """Gets the postprocess_config of this PredictionsPredictionsInner.


        :return: The postprocess_config of this PredictionsPredictionsInner.
        :rtype: PredictionPostprocessConfig
        """
        return self._postprocess_config

    @postprocess_config.setter
    def postprocess_config(self, postprocess_config):
        """Sets the postprocess_config of this PredictionsPredictionsInner.


        :param postprocess_config: The postprocess_config of this PredictionsPredictionsInner.
        :type postprocess_config: PredictionPostprocessConfig
        """

        self._postprocess_config = postprocess_config

    @property
    def prediction_id(self):
        """Gets the prediction_id of this PredictionsPredictionsInner.


        :return: The prediction_id of this PredictionsPredictionsInner.
        :rtype: str
        """
        return self._prediction_id

    @prediction_id.setter
    def prediction_id(self, prediction_id):
        """Sets the prediction_id of this PredictionsPredictionsInner.


        :param prediction_id: The prediction_id of this PredictionsPredictionsInner.
        :type prediction_id: str
        """
        if prediction_id is None:
            raise ValueError("Invalid value for `prediction_id`, must not be `None`")
        if prediction_id is not None and not re.search(r'^las:prediction:[a-f0-9]{32}$', prediction_id):
            raise ValueError("Invalid value for `prediction_id`, must be a follow pattern or equal to `/^las:prediction:[a-f0-9]{32}$/`")

        self._prediction_id = prediction_id

    @property
    def predictions(self):
        """Gets the predictions of this PredictionsPredictionsInner.


        :return: The predictions of this PredictionsPredictionsInner.
        :rtype: List[PredictionPredictionsInner]
        """
        return self._predictions

    @predictions.setter
    def predictions(self, predictions):
        """Sets the predictions of this PredictionsPredictionsInner.


        :param predictions: The predictions of this PredictionsPredictionsInner.
        :type predictions: List[PredictionPredictionsInner]
        """
        if predictions is None:
            raise ValueError("Invalid value for `predictions`, must not be `None`")

        self._predictions = predictions

    @property
    def preprocess_config(self):
        """Gets the preprocess_config of this PredictionsPredictionsInner.


        :return: The preprocess_config of this PredictionsPredictionsInner.
        :rtype: PredictionPreprocessConfig
        """
        return self._preprocess_config

    @preprocess_config.setter
    def preprocess_config(self, preprocess_config):
        """Sets the preprocess_config of this PredictionsPredictionsInner.


        :param preprocess_config: The preprocess_config of this PredictionsPredictionsInner.
        :type preprocess_config: PredictionPreprocessConfig
        """

        self._preprocess_config = preprocess_config

    @property
    def training_id(self):
        """Gets the training_id of this PredictionsPredictionsInner.


        :return: The training_id of this PredictionsPredictionsInner.
        :rtype: str
        """
        return self._training_id

    @training_id.setter
    def training_id(self, training_id):
        """Sets the training_id of this PredictionsPredictionsInner.


        :param training_id: The training_id of this PredictionsPredictionsInner.
        :type training_id: str
        """
        if training_id is not None and not re.search(r'^las:model-training:[a-f0-9]{32}$', training_id):
            raise ValueError("Invalid value for `training_id`, must be a follow pattern or equal to `/^las:model-training:[a-f0-9]{32}$/`")

        self._training_id = training_id
