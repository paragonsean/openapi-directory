# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.transitions_transitions_inner import TransitionsTransitionsInner
from openapi_server import util


class Transitions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, next_token: str=None, transition_type: List[str]=None, transitions: List[TransitionsTransitionsInner]=None):
        """Transitions - a model defined in OpenAPI

        :param next_token: The next_token of this Transitions.
        :param transition_type: The transition_type of this Transitions.
        :param transitions: The transitions of this Transitions.
        """
        self.openapi_types = {
            'next_token': str,
            'transition_type': List[str],
            'transitions': List[TransitionsTransitionsInner]
        }

        self.attribute_map = {
            'next_token': 'nextToken',
            'transition_type': 'transitionType',
            'transitions': 'transitions'
        }

        self._next_token = next_token
        self._transition_type = transition_type
        self._transitions = transitions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Transitions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Transitions of this Transitions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def next_token(self):
        """Gets the next_token of this Transitions.


        :return: The next_token of this Transitions.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this Transitions.


        :param next_token: The next_token of this Transitions.
        :type next_token: str
        """
        if next_token is None:
            raise ValueError("Invalid value for `next_token`, must not be `None`")
        if next_token is not None and len(next_token) > 4096:
            raise ValueError("Invalid value for `next_token`, length must be less than or equal to `4096`")

        self._next_token = next_token

    @property
    def transition_type(self):
        """Gets the transition_type of this Transitions.


        :return: The transition_type of this Transitions.
        :rtype: List[str]
        """
        return self._transition_type

    @transition_type.setter
    def transition_type(self, transition_type):
        """Sets the transition_type of this Transitions.


        :param transition_type: The transition_type of this Transitions.
        :type transition_type: List[str]
        """
        allowed_values = ["docker", "manual"]  # noqa: E501
        if not set(transition_type).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `transition_type` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(transition_type) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._transition_type = transition_type

    @property
    def transitions(self):
        """Gets the transitions of this Transitions.


        :return: The transitions of this Transitions.
        :rtype: List[TransitionsTransitionsInner]
        """
        return self._transitions

    @transitions.setter
    def transitions(self, transitions):
        """Sets the transitions of this Transitions.


        :param transitions: The transitions of this Transitions.
        :type transitions: List[TransitionsTransitionsInner]
        """
        if transitions is None:
            raise ValueError("Invalid value for `transitions`, must not be `None`")

        self._transitions = transitions
