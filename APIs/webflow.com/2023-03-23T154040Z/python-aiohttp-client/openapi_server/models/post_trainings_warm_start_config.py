# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class PostTrainingsWarmStartConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, training_id: str=None):
        """PostTrainingsWarmStartConfig - a model defined in OpenAPI

        :param training_id: The training_id of this PostTrainingsWarmStartConfig.
        """
        self.openapi_types = {
            'training_id': str
        }

        self.attribute_map = {
            'training_id': 'trainingId'
        }

        self._training_id = training_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PostTrainingsWarmStartConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PostTrainings_warmStartConfig of this PostTrainingsWarmStartConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def training_id(self):
        """Gets the training_id of this PostTrainingsWarmStartConfig.


        :return: The training_id of this PostTrainingsWarmStartConfig.
        :rtype: str
        """
        return self._training_id

    @training_id.setter
    def training_id(self, training_id):
        """Sets the training_id of this PostTrainingsWarmStartConfig.


        :param training_id: The training_id of this PostTrainingsWarmStartConfig.
        :type training_id: str
        """
        if training_id is None:
            raise ValueError("Invalid value for `training_id`, must not be `None`")
        if training_id is not None and not re.search(r'^las:model-training:[a-f0-9]{32}$', training_id):
            raise ValueError("Invalid value for `training_id`, must be a follow pattern or equal to `/^las:model-training:[a-f0-9]{32}$/`")

        self._training_id = training_id
