# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.workflow_execution_completed_by_inner import WorkflowExecutionCompletedByInner
import re
from openapi_server import util


class WorkflowExecutionsExecutionsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, completed_by: List[WorkflowExecutionCompletedByInner]=None, completed_task_log_id: str=None, end_time: str=None, events: List[object]=None, execution_id: str=None, input: object=None, log_id: str=None, output: object=None, start_time: str=None, status: str=None, transition_executions: object=None, workflow_id: str=None):
        """WorkflowExecutionsExecutionsInner - a model defined in OpenAPI

        :param completed_by: The completed_by of this WorkflowExecutionsExecutionsInner.
        :param completed_task_log_id: The completed_task_log_id of this WorkflowExecutionsExecutionsInner.
        :param end_time: The end_time of this WorkflowExecutionsExecutionsInner.
        :param events: The events of this WorkflowExecutionsExecutionsInner.
        :param execution_id: The execution_id of this WorkflowExecutionsExecutionsInner.
        :param input: The input of this WorkflowExecutionsExecutionsInner.
        :param log_id: The log_id of this WorkflowExecutionsExecutionsInner.
        :param output: The output of this WorkflowExecutionsExecutionsInner.
        :param start_time: The start_time of this WorkflowExecutionsExecutionsInner.
        :param status: The status of this WorkflowExecutionsExecutionsInner.
        :param transition_executions: The transition_executions of this WorkflowExecutionsExecutionsInner.
        :param workflow_id: The workflow_id of this WorkflowExecutionsExecutionsInner.
        """
        self.openapi_types = {
            'completed_by': List[WorkflowExecutionCompletedByInner],
            'completed_task_log_id': str,
            'end_time': str,
            'events': List[object],
            'execution_id': str,
            'input': object,
            'log_id': str,
            'output': object,
            'start_time': str,
            'status': str,
            'transition_executions': object,
            'workflow_id': str
        }

        self.attribute_map = {
            'completed_by': 'completedBy',
            'completed_task_log_id': 'completedTaskLogId',
            'end_time': 'endTime',
            'events': 'events',
            'execution_id': 'executionId',
            'input': 'input',
            'log_id': 'logId',
            'output': 'output',
            'start_time': 'startTime',
            'status': 'status',
            'transition_executions': 'transitionExecutions',
            'workflow_id': 'workflowId'
        }

        self._completed_by = completed_by
        self._completed_task_log_id = completed_task_log_id
        self._end_time = end_time
        self._events = events
        self._execution_id = execution_id
        self._input = input
        self._log_id = log_id
        self._output = output
        self._start_time = start_time
        self._status = status
        self._transition_executions = transition_executions
        self._workflow_id = workflow_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WorkflowExecutionsExecutionsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WorkflowExecutions_executions_inner of this WorkflowExecutionsExecutionsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def completed_by(self):
        """Gets the completed_by of this WorkflowExecutionsExecutionsInner.


        :return: The completed_by of this WorkflowExecutionsExecutionsInner.
        :rtype: List[WorkflowExecutionCompletedByInner]
        """
        return self._completed_by

    @completed_by.setter
    def completed_by(self, completed_by):
        """Sets the completed_by of this WorkflowExecutionsExecutionsInner.


        :param completed_by: The completed_by of this WorkflowExecutionsExecutionsInner.
        :type completed_by: List[WorkflowExecutionCompletedByInner]
        """

        self._completed_by = completed_by

    @property
    def completed_task_log_id(self):
        """Gets the completed_task_log_id of this WorkflowExecutionsExecutionsInner.


        :return: The completed_task_log_id of this WorkflowExecutionsExecutionsInner.
        :rtype: str
        """
        return self._completed_task_log_id

    @completed_task_log_id.setter
    def completed_task_log_id(self, completed_task_log_id):
        """Sets the completed_task_log_id of this WorkflowExecutionsExecutionsInner.


        :param completed_task_log_id: The completed_task_log_id of this WorkflowExecutionsExecutionsInner.
        :type completed_task_log_id: str
        """
        if completed_task_log_id is not None and not re.search(r'^las:log:[a-f0-9]{32}$', completed_task_log_id):
            raise ValueError("Invalid value for `completed_task_log_id`, must be a follow pattern or equal to `/^las:log:[a-f0-9]{32}$/`")

        self._completed_task_log_id = completed_task_log_id

    @property
    def end_time(self):
        """Gets the end_time of this WorkflowExecutionsExecutionsInner.


        :return: The end_time of this WorkflowExecutionsExecutionsInner.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this WorkflowExecutionsExecutionsInner.


        :param end_time: The end_time of this WorkflowExecutionsExecutionsInner.
        :type end_time: str
        """
        if end_time is None:
            raise ValueError("Invalid value for `end_time`, must not be `None`")
        if end_time is not None and not re.search(r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$', end_time):
            raise ValueError("Invalid value for `end_time`, must be a follow pattern or equal to `/^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$/`")

        self._end_time = end_time

    @property
    def events(self):
        """Gets the events of this WorkflowExecutionsExecutionsInner.


        :return: The events of this WorkflowExecutionsExecutionsInner.
        :rtype: List[object]
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this WorkflowExecutionsExecutionsInner.


        :param events: The events of this WorkflowExecutionsExecutionsInner.
        :type events: List[object]
        """

        self._events = events

    @property
    def execution_id(self):
        """Gets the execution_id of this WorkflowExecutionsExecutionsInner.


        :return: The execution_id of this WorkflowExecutionsExecutionsInner.
        :rtype: str
        """
        return self._execution_id

    @execution_id.setter
    def execution_id(self, execution_id):
        """Sets the execution_id of this WorkflowExecutionsExecutionsInner.


        :param execution_id: The execution_id of this WorkflowExecutionsExecutionsInner.
        :type execution_id: str
        """
        if execution_id is None:
            raise ValueError("Invalid value for `execution_id`, must not be `None`")
        if execution_id is not None and not re.search(r'^las:workflow-execution:[a-f0-9]{32}$', execution_id):
            raise ValueError("Invalid value for `execution_id`, must be a follow pattern or equal to `/^las:workflow-execution:[a-f0-9]{32}$/`")

        self._execution_id = execution_id

    @property
    def input(self):
        """Gets the input of this WorkflowExecutionsExecutionsInner.


        :return: The input of this WorkflowExecutionsExecutionsInner.
        :rtype: object
        """
        return self._input

    @input.setter
    def input(self, input):
        """Sets the input of this WorkflowExecutionsExecutionsInner.


        :param input: The input of this WorkflowExecutionsExecutionsInner.
        :type input: object
        """
        if input is None:
            raise ValueError("Invalid value for `input`, must not be `None`")

        self._input = input

    @property
    def log_id(self):
        """Gets the log_id of this WorkflowExecutionsExecutionsInner.


        :return: The log_id of this WorkflowExecutionsExecutionsInner.
        :rtype: str
        """
        return self._log_id

    @log_id.setter
    def log_id(self, log_id):
        """Sets the log_id of this WorkflowExecutionsExecutionsInner.


        :param log_id: The log_id of this WorkflowExecutionsExecutionsInner.
        :type log_id: str
        """
        if log_id is not None and not re.search(r'^las:log:[a-f0-9]{32}$', log_id):
            raise ValueError("Invalid value for `log_id`, must be a follow pattern or equal to `/^las:log:[a-f0-9]{32}$/`")

        self._log_id = log_id

    @property
    def output(self):
        """Gets the output of this WorkflowExecutionsExecutionsInner.


        :return: The output of this WorkflowExecutionsExecutionsInner.
        :rtype: object
        """
        return self._output

    @output.setter
    def output(self, output):
        """Sets the output of this WorkflowExecutionsExecutionsInner.


        :param output: The output of this WorkflowExecutionsExecutionsInner.
        :type output: object
        """
        if output is None:
            raise ValueError("Invalid value for `output`, must not be `None`")

        self._output = output

    @property
    def start_time(self):
        """Gets the start_time of this WorkflowExecutionsExecutionsInner.


        :return: The start_time of this WorkflowExecutionsExecutionsInner.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this WorkflowExecutionsExecutionsInner.


        :param start_time: The start_time of this WorkflowExecutionsExecutionsInner.
        :type start_time: str
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")
        if start_time is not None and not re.search(r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$', start_time):
            raise ValueError("Invalid value for `start_time`, must be a follow pattern or equal to `/^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$/`")

        self._start_time = start_time

    @property
    def status(self):
        """Gets the status of this WorkflowExecutionsExecutionsInner.


        :return: The status of this WorkflowExecutionsExecutionsInner.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this WorkflowExecutionsExecutionsInner.


        :param status: The status of this WorkflowExecutionsExecutionsInner.
        :type status: str
        """
        allowed_values = ["running", "succeeded", "failed", "rejected", "retry", "error"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def transition_executions(self):
        """Gets the transition_executions of this WorkflowExecutionsExecutionsInner.


        :return: The transition_executions of this WorkflowExecutionsExecutionsInner.
        :rtype: object
        """
        return self._transition_executions

    @transition_executions.setter
    def transition_executions(self, transition_executions):
        """Sets the transition_executions of this WorkflowExecutionsExecutionsInner.


        :param transition_executions: The transition_executions of this WorkflowExecutionsExecutionsInner.
        :type transition_executions: object
        """
        if transition_executions is None:
            raise ValueError("Invalid value for `transition_executions`, must not be `None`")

        self._transition_executions = transition_executions

    @property
    def workflow_id(self):
        """Gets the workflow_id of this WorkflowExecutionsExecutionsInner.


        :return: The workflow_id of this WorkflowExecutionsExecutionsInner.
        :rtype: str
        """
        return self._workflow_id

    @workflow_id.setter
    def workflow_id(self, workflow_id):
        """Sets the workflow_id of this WorkflowExecutionsExecutionsInner.


        :param workflow_id: The workflow_id of this WorkflowExecutionsExecutionsInner.
        :type workflow_id: str
        """
        if workflow_id is None:
            raise ValueError("Invalid value for `workflow_id`, must not be `None`")
        if workflow_id is not None and not re.search(r'^las:workflow:[a-f0-9]{32}$', workflow_id):
            raise ValueError("Invalid value for `workflow_id`, must be a follow pattern or equal to `/^las:workflow:[a-f0-9]{32}$/`")

        self._workflow_id = workflow_id
