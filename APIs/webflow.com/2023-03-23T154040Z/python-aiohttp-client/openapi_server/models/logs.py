# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.logs_logs_inner import LogsLogsInner
from openapi_server.models.logs_transition_id import LogsTransitionId
import re
from openapi_server import util


class Logs(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, logs: List[LogsLogsInner]=None, next_token: str=None, order: str=None, transition_execution_id: str=None, transition_id: LogsTransitionId=None, workflow_execution_id: str=None, workflow_id: str=None):
        """Logs - a model defined in OpenAPI

        :param logs: The logs of this Logs.
        :param next_token: The next_token of this Logs.
        :param order: The order of this Logs.
        :param transition_execution_id: The transition_execution_id of this Logs.
        :param transition_id: The transition_id of this Logs.
        :param workflow_execution_id: The workflow_execution_id of this Logs.
        :param workflow_id: The workflow_id of this Logs.
        """
        self.openapi_types = {
            'logs': List[LogsLogsInner],
            'next_token': str,
            'order': str,
            'transition_execution_id': str,
            'transition_id': LogsTransitionId,
            'workflow_execution_id': str,
            'workflow_id': str
        }

        self.attribute_map = {
            'logs': 'logs',
            'next_token': 'nextToken',
            'order': 'order',
            'transition_execution_id': 'transitionExecutionId',
            'transition_id': 'transitionId',
            'workflow_execution_id': 'workflowExecutionId',
            'workflow_id': 'workflowId'
        }

        self._logs = logs
        self._next_token = next_token
        self._order = order
        self._transition_execution_id = transition_execution_id
        self._transition_id = transition_id
        self._workflow_execution_id = workflow_execution_id
        self._workflow_id = workflow_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Logs':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Logs of this Logs.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def logs(self):
        """Gets the logs of this Logs.


        :return: The logs of this Logs.
        :rtype: List[LogsLogsInner]
        """
        return self._logs

    @logs.setter
    def logs(self, logs):
        """Sets the logs of this Logs.


        :param logs: The logs of this Logs.
        :type logs: List[LogsLogsInner]
        """
        if logs is None:
            raise ValueError("Invalid value for `logs`, must not be `None`")

        self._logs = logs

    @property
    def next_token(self):
        """Gets the next_token of this Logs.


        :return: The next_token of this Logs.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this Logs.


        :param next_token: The next_token of this Logs.
        :type next_token: str
        """
        if next_token is None:
            raise ValueError("Invalid value for `next_token`, must not be `None`")
        if next_token is not None and len(next_token) > 4096:
            raise ValueError("Invalid value for `next_token`, length must be less than or equal to `4096`")

        self._next_token = next_token

    @property
    def order(self):
        """Gets the order of this Logs.


        :return: The order of this Logs.
        :rtype: str
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this Logs.


        :param order: The order of this Logs.
        :type order: str
        """
        allowed_values = ["ascending", "descending"]  # noqa: E501
        if order not in allowed_values:
            raise ValueError(
                "Invalid value for `order` ({0}), must be one of {1}"
                .format(order, allowed_values)
            )

        self._order = order

    @property
    def transition_execution_id(self):
        """Gets the transition_execution_id of this Logs.


        :return: The transition_execution_id of this Logs.
        :rtype: str
        """
        return self._transition_execution_id

    @transition_execution_id.setter
    def transition_execution_id(self, transition_execution_id):
        """Sets the transition_execution_id of this Logs.


        :param transition_execution_id: The transition_execution_id of this Logs.
        :type transition_execution_id: str
        """
        if transition_execution_id is not None and not re.search(r'^las:transition-execution:[a-f0-9]{32}$', transition_execution_id):
            raise ValueError("Invalid value for `transition_execution_id`, must be a follow pattern or equal to `/^las:transition-execution:[a-f0-9]{32}$/`")

        self._transition_execution_id = transition_execution_id

    @property
    def transition_id(self):
        """Gets the transition_id of this Logs.


        :return: The transition_id of this Logs.
        :rtype: LogsTransitionId
        """
        return self._transition_id

    @transition_id.setter
    def transition_id(self, transition_id):
        """Sets the transition_id of this Logs.


        :param transition_id: The transition_id of this Logs.
        :type transition_id: LogsTransitionId
        """

        self._transition_id = transition_id

    @property
    def workflow_execution_id(self):
        """Gets the workflow_execution_id of this Logs.


        :return: The workflow_execution_id of this Logs.
        :rtype: str
        """
        return self._workflow_execution_id

    @workflow_execution_id.setter
    def workflow_execution_id(self, workflow_execution_id):
        """Sets the workflow_execution_id of this Logs.


        :param workflow_execution_id: The workflow_execution_id of this Logs.
        :type workflow_execution_id: str
        """
        if workflow_execution_id is not None and not re.search(r'^las:workflow-execution:[a-f0-9]{32}$', workflow_execution_id):
            raise ValueError("Invalid value for `workflow_execution_id`, must be a follow pattern or equal to `/^las:workflow-execution:[a-f0-9]{32}$/`")

        self._workflow_execution_id = workflow_execution_id

    @property
    def workflow_id(self):
        """Gets the workflow_id of this Logs.


        :return: The workflow_id of this Logs.
        :rtype: str
        """
        return self._workflow_id

    @workflow_id.setter
    def workflow_id(self, workflow_id):
        """Sets the workflow_id of this Logs.


        :param workflow_id: The workflow_id of this Logs.
        :type workflow_id: str
        """
        if workflow_id is not None and not re.search(r'^las:workflow:[a-f0-9]{32}$', workflow_id):
            raise ValueError("Invalid value for `workflow_id`, must be a follow pattern or equal to `/^las:workflow:[a-f0-9]{32}$/`")

        self._workflow_id = workflow_id
