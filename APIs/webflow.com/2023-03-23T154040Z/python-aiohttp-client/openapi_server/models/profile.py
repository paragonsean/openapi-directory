# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class Profile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_time: str=None, email: str=None, family_name: str=None, given_name: str=None, locale: str=None, metadata: object=None, name: str=None, number_of_organizations_allowed: int=None, number_of_organizations_created: int=None, picture: str=None, profile_id: str=None, updated_time: str=None):
        """Profile - a model defined in OpenAPI

        :param created_time: The created_time of this Profile.
        :param email: The email of this Profile.
        :param family_name: The family_name of this Profile.
        :param given_name: The given_name of this Profile.
        :param locale: The locale of this Profile.
        :param metadata: The metadata of this Profile.
        :param name: The name of this Profile.
        :param number_of_organizations_allowed: The number_of_organizations_allowed of this Profile.
        :param number_of_organizations_created: The number_of_organizations_created of this Profile.
        :param picture: The picture of this Profile.
        :param profile_id: The profile_id of this Profile.
        :param updated_time: The updated_time of this Profile.
        """
        self.openapi_types = {
            'created_time': str,
            'email': str,
            'family_name': str,
            'given_name': str,
            'locale': str,
            'metadata': object,
            'name': str,
            'number_of_organizations_allowed': int,
            'number_of_organizations_created': int,
            'picture': str,
            'profile_id': str,
            'updated_time': str
        }

        self.attribute_map = {
            'created_time': 'createdTime',
            'email': 'email',
            'family_name': 'familyName',
            'given_name': 'givenName',
            'locale': 'locale',
            'metadata': 'metadata',
            'name': 'name',
            'number_of_organizations_allowed': 'numberOfOrganizationsAllowed',
            'number_of_organizations_created': 'numberOfOrganizationsCreated',
            'picture': 'picture',
            'profile_id': 'profileId',
            'updated_time': 'updatedTime'
        }

        self._created_time = created_time
        self._email = email
        self._family_name = family_name
        self._given_name = given_name
        self._locale = locale
        self._metadata = metadata
        self._name = name
        self._number_of_organizations_allowed = number_of_organizations_allowed
        self._number_of_organizations_created = number_of_organizations_created
        self._picture = picture
        self._profile_id = profile_id
        self._updated_time = updated_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Profile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Profile of this Profile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_time(self):
        """Gets the created_time of this Profile.


        :return: The created_time of this Profile.
        :rtype: str
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this Profile.


        :param created_time: The created_time of this Profile.
        :type created_time: str
        """
        if created_time is not None and not re.search(r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$', created_time):
            raise ValueError("Invalid value for `created_time`, must be a follow pattern or equal to `/^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$/`")

        self._created_time = created_time

    @property
    def email(self):
        """Gets the email of this Profile.


        :return: The email of this Profile.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Profile.


        :param email: The email of this Profile.
        :type email: str
        """
        if email is not None and not re.search(r'^[A-Za-z0-9][-+._A-Za-z0-9]*@([-_.A-Za-z0-9]+\.)+[A-Za-z]{2,}$', email):
            raise ValueError("Invalid value for `email`, must be a follow pattern or equal to `/^[A-Za-z0-9][-+._A-Za-z0-9]*@([-_.A-Za-z0-9]+\.)+[A-Za-z]{2,}$/`")

        self._email = email

    @property
    def family_name(self):
        """Gets the family_name of this Profile.


        :return: The family_name of this Profile.
        :rtype: str
        """
        return self._family_name

    @family_name.setter
    def family_name(self, family_name):
        """Sets the family_name of this Profile.


        :param family_name: The family_name of this Profile.
        :type family_name: str
        """
        if family_name is not None and len(family_name) > 4096:
            raise ValueError("Invalid value for `family_name`, length must be less than or equal to `4096`")

        self._family_name = family_name

    @property
    def given_name(self):
        """Gets the given_name of this Profile.


        :return: The given_name of this Profile.
        :rtype: str
        """
        return self._given_name

    @given_name.setter
    def given_name(self, given_name):
        """Sets the given_name of this Profile.


        :param given_name: The given_name of this Profile.
        :type given_name: str
        """
        if given_name is not None and len(given_name) > 4096:
            raise ValueError("Invalid value for `given_name`, length must be less than or equal to `4096`")

        self._given_name = given_name

    @property
    def locale(self):
        """Gets the locale of this Profile.


        :return: The locale of this Profile.
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this Profile.


        :param locale: The locale of this Profile.
        :type locale: str
        """
        if locale is not None and len(locale) > 4096:
            raise ValueError("Invalid value for `locale`, length must be less than or equal to `4096`")

        self._locale = locale

    @property
    def metadata(self):
        """Gets the metadata of this Profile.


        :return: The metadata of this Profile.
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Profile.


        :param metadata: The metadata of this Profile.
        :type metadata: object
        """

        self._metadata = metadata

    @property
    def name(self):
        """Gets the name of this Profile.


        :return: The name of this Profile.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Profile.


        :param name: The name of this Profile.
        :type name: str
        """
        if name is not None and len(name) > 4096:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `4096`")

        self._name = name

    @property
    def number_of_organizations_allowed(self):
        """Gets the number_of_organizations_allowed of this Profile.


        :return: The number_of_organizations_allowed of this Profile.
        :rtype: int
        """
        return self._number_of_organizations_allowed

    @number_of_organizations_allowed.setter
    def number_of_organizations_allowed(self, number_of_organizations_allowed):
        """Sets the number_of_organizations_allowed of this Profile.


        :param number_of_organizations_allowed: The number_of_organizations_allowed of this Profile.
        :type number_of_organizations_allowed: int
        """
        if number_of_organizations_allowed is not None and number_of_organizations_allowed < 0:
            raise ValueError("Invalid value for `number_of_organizations_allowed`, must be a value greater than or equal to `0`")

        self._number_of_organizations_allowed = number_of_organizations_allowed

    @property
    def number_of_organizations_created(self):
        """Gets the number_of_organizations_created of this Profile.


        :return: The number_of_organizations_created of this Profile.
        :rtype: int
        """
        return self._number_of_organizations_created

    @number_of_organizations_created.setter
    def number_of_organizations_created(self, number_of_organizations_created):
        """Sets the number_of_organizations_created of this Profile.


        :param number_of_organizations_created: The number_of_organizations_created of this Profile.
        :type number_of_organizations_created: int
        """
        if number_of_organizations_created is not None and number_of_organizations_created < 0:
            raise ValueError("Invalid value for `number_of_organizations_created`, must be a value greater than or equal to `0`")

        self._number_of_organizations_created = number_of_organizations_created

    @property
    def picture(self):
        """Gets the picture of this Profile.


        :return: The picture of this Profile.
        :rtype: str
        """
        return self._picture

    @picture.setter
    def picture(self, picture):
        """Sets the picture of this Profile.


        :param picture: The picture of this Profile.
        :type picture: str
        """
        if picture is not None and len(picture) > 4096:
            raise ValueError("Invalid value for `picture`, length must be less than or equal to `4096`")

        self._picture = picture

    @property
    def profile_id(self):
        """Gets the profile_id of this Profile.


        :return: The profile_id of this Profile.
        :rtype: str
        """
        return self._profile_id

    @profile_id.setter
    def profile_id(self, profile_id):
        """Sets the profile_id of this Profile.


        :param profile_id: The profile_id of this Profile.
        :type profile_id: str
        """
        if profile_id is None:
            raise ValueError("Invalid value for `profile_id`, must not be `None`")
        if profile_id is not None and not re.search(r'^las:profile:[a-f0-9]{32}$', profile_id):
            raise ValueError("Invalid value for `profile_id`, must be a follow pattern or equal to `/^las:profile:[a-f0-9]{32}$/`")

        self._profile_id = profile_id

    @property
    def updated_time(self):
        """Gets the updated_time of this Profile.


        :return: The updated_time of this Profile.
        :rtype: str
        """
        return self._updated_time

    @updated_time.setter
    def updated_time(self, updated_time):
        """Sets the updated_time of this Profile.


        :param updated_time: The updated_time of this Profile.
        :type updated_time: str
        """
        if updated_time is not None and not re.search(r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$', updated_time):
            raise ValueError("Invalid value for `updated_time`, must be a follow pattern or equal to `/^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$/`")

        self._updated_time = updated_time
