# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class PlansPlansInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active_models: object=None, available: bool=None, currency: str=None, description: str=None, field_predictions: object=None, gpu_hours: object=None, latest: int=None, license: object=None, model_deployment_units: object=None, name: str=None, organization_id: str=None, plan_id: str=None):
        """PlansPlansInner - a model defined in OpenAPI

        :param active_models: The active_models of this PlansPlansInner.
        :param available: The available of this PlansPlansInner.
        :param currency: The currency of this PlansPlansInner.
        :param description: The description of this PlansPlansInner.
        :param field_predictions: The field_predictions of this PlansPlansInner.
        :param gpu_hours: The gpu_hours of this PlansPlansInner.
        :param latest: The latest of this PlansPlansInner.
        :param license: The license of this PlansPlansInner.
        :param model_deployment_units: The model_deployment_units of this PlansPlansInner.
        :param name: The name of this PlansPlansInner.
        :param organization_id: The organization_id of this PlansPlansInner.
        :param plan_id: The plan_id of this PlansPlansInner.
        """
        self.openapi_types = {
            'active_models': object,
            'available': bool,
            'currency': str,
            'description': str,
            'field_predictions': object,
            'gpu_hours': object,
            'latest': int,
            'license': object,
            'model_deployment_units': object,
            'name': str,
            'organization_id': str,
            'plan_id': str
        }

        self.attribute_map = {
            'active_models': 'activeModels',
            'available': 'available',
            'currency': 'currency',
            'description': 'description',
            'field_predictions': 'fieldPredictions',
            'gpu_hours': 'gpuHours',
            'latest': 'latest',
            'license': 'license',
            'model_deployment_units': 'modelDeploymentUnits',
            'name': 'name',
            'organization_id': 'organizationId',
            'plan_id': 'planId'
        }

        self._active_models = active_models
        self._available = available
        self._currency = currency
        self._description = description
        self._field_predictions = field_predictions
        self._gpu_hours = gpu_hours
        self._latest = latest
        self._license = license
        self._model_deployment_units = model_deployment_units
        self._name = name
        self._organization_id = organization_id
        self._plan_id = plan_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PlansPlansInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Plans_plans_inner of this PlansPlansInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active_models(self):
        """Gets the active_models of this PlansPlansInner.


        :return: The active_models of this PlansPlansInner.
        :rtype: object
        """
        return self._active_models

    @active_models.setter
    def active_models(self, active_models):
        """Sets the active_models of this PlansPlansInner.


        :param active_models: The active_models of this PlansPlansInner.
        :type active_models: object
        """

        self._active_models = active_models

    @property
    def available(self):
        """Gets the available of this PlansPlansInner.


        :return: The available of this PlansPlansInner.
        :rtype: bool
        """
        return self._available

    @available.setter
    def available(self, available):
        """Sets the available of this PlansPlansInner.


        :param available: The available of this PlansPlansInner.
        :type available: bool
        """
        if available is None:
            raise ValueError("Invalid value for `available`, must not be `None`")

        self._available = available

    @property
    def currency(self):
        """Gets the currency of this PlansPlansInner.


        :return: The currency of this PlansPlansInner.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this PlansPlansInner.


        :param currency: The currency of this PlansPlansInner.
        :type currency: str
        """
        allowed_values = ["USD", "EUR", "NOK"]  # noqa: E501
        if currency not in allowed_values:
            raise ValueError(
                "Invalid value for `currency` ({0}), must be one of {1}"
                .format(currency, allowed_values)
            )

        self._currency = currency

    @property
    def description(self):
        """Gets the description of this PlansPlansInner.


        :return: The description of this PlansPlansInner.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PlansPlansInner.


        :param description: The description of this PlansPlansInner.
        :type description: str
        """
        if description is not None and len(description) > 4096:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `4096`")

        self._description = description

    @property
    def field_predictions(self):
        """Gets the field_predictions of this PlansPlansInner.


        :return: The field_predictions of this PlansPlansInner.
        :rtype: object
        """
        return self._field_predictions

    @field_predictions.setter
    def field_predictions(self, field_predictions):
        """Sets the field_predictions of this PlansPlansInner.


        :param field_predictions: The field_predictions of this PlansPlansInner.
        :type field_predictions: object
        """

        self._field_predictions = field_predictions

    @property
    def gpu_hours(self):
        """Gets the gpu_hours of this PlansPlansInner.


        :return: The gpu_hours of this PlansPlansInner.
        :rtype: object
        """
        return self._gpu_hours

    @gpu_hours.setter
    def gpu_hours(self, gpu_hours):
        """Sets the gpu_hours of this PlansPlansInner.


        :param gpu_hours: The gpu_hours of this PlansPlansInner.
        :type gpu_hours: object
        """

        self._gpu_hours = gpu_hours

    @property
    def latest(self):
        """Gets the latest of this PlansPlansInner.


        :return: The latest of this PlansPlansInner.
        :rtype: int
        """
        return self._latest

    @latest.setter
    def latest(self, latest):
        """Sets the latest of this PlansPlansInner.


        :param latest: The latest of this PlansPlansInner.
        :type latest: int
        """
        if latest is None:
            raise ValueError("Invalid value for `latest`, must not be `None`")
        if latest is not None and latest < 1:
            raise ValueError("Invalid value for `latest`, must be a value greater than or equal to `1`")

        self._latest = latest

    @property
    def license(self):
        """Gets the license of this PlansPlansInner.


        :return: The license of this PlansPlansInner.
        :rtype: object
        """
        return self._license

    @license.setter
    def license(self, license):
        """Sets the license of this PlansPlansInner.


        :param license: The license of this PlansPlansInner.
        :type license: object
        """

        self._license = license

    @property
    def model_deployment_units(self):
        """Gets the model_deployment_units of this PlansPlansInner.


        :return: The model_deployment_units of this PlansPlansInner.
        :rtype: object
        """
        return self._model_deployment_units

    @model_deployment_units.setter
    def model_deployment_units(self, model_deployment_units):
        """Sets the model_deployment_units of this PlansPlansInner.


        :param model_deployment_units: The model_deployment_units of this PlansPlansInner.
        :type model_deployment_units: object
        """

        self._model_deployment_units = model_deployment_units

    @property
    def name(self):
        """Gets the name of this PlansPlansInner.


        :return: The name of this PlansPlansInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PlansPlansInner.


        :param name: The name of this PlansPlansInner.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 4096:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `4096`")

        self._name = name

    @property
    def organization_id(self):
        """Gets the organization_id of this PlansPlansInner.


        :return: The organization_id of this PlansPlansInner.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this PlansPlansInner.


        :param organization_id: The organization_id of this PlansPlansInner.
        :type organization_id: str
        """
        if organization_id is None:
            raise ValueError("Invalid value for `organization_id`, must not be `None`")
        if organization_id is not None and not re.search(r'^las:organization:[a-z0-9-_]+$', organization_id):
            raise ValueError("Invalid value for `organization_id`, must be a follow pattern or equal to `/^las:organization:[a-z0-9-_]+$/`")

        self._organization_id = organization_id

    @property
    def plan_id(self):
        """Gets the plan_id of this PlansPlansInner.


        :return: The plan_id of this PlansPlansInner.
        :rtype: str
        """
        return self._plan_id

    @plan_id.setter
    def plan_id(self, plan_id):
        """Sets the plan_id of this PlansPlansInner.


        :param plan_id: The plan_id of this PlansPlansInner.
        :type plan_id: str
        """
        if plan_id is None:
            raise ValueError("Invalid value for `plan_id`, must not be `None`")
        if plan_id is not None and not re.search(r'^las:plan:[a-z0-9-_]+(|:@[a-z0-9-_]+|:[0-9]+)$', plan_id):
            raise ValueError("Invalid value for `plan_id`, must be a follow pattern or equal to `/^las:plan:[a-z0-9-_]+(|:@[a-z0-9-_]+|:[0-9]+)$/`")

        self._plan_id = plan_id
