# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.workflows_workflows_inner import WorkflowsWorkflowsInner
from openapi_server import util


class Workflows(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, next_token: str=None, workflows: List[WorkflowsWorkflowsInner]=None):
        """Workflows - a model defined in OpenAPI

        :param next_token: The next_token of this Workflows.
        :param workflows: The workflows of this Workflows.
        """
        self.openapi_types = {
            'next_token': str,
            'workflows': List[WorkflowsWorkflowsInner]
        }

        self.attribute_map = {
            'next_token': 'nextToken',
            'workflows': 'workflows'
        }

        self._next_token = next_token
        self._workflows = workflows

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Workflows':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Workflows of this Workflows.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def next_token(self):
        """Gets the next_token of this Workflows.


        :return: The next_token of this Workflows.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this Workflows.


        :param next_token: The next_token of this Workflows.
        :type next_token: str
        """
        if next_token is None:
            raise ValueError("Invalid value for `next_token`, must not be `None`")
        if next_token is not None and len(next_token) > 4096:
            raise ValueError("Invalid value for `next_token`, length must be less than or equal to `4096`")

        self._next_token = next_token

    @property
    def workflows(self):
        """Gets the workflows of this Workflows.


        :return: The workflows of this Workflows.
        :rtype: List[WorkflowsWorkflowsInner]
        """
        return self._workflows

    @workflows.setter
    def workflows(self, workflows):
        """Sets the workflows of this Workflows.


        :param workflows: The workflows of this Workflows.
        :type workflows: List[WorkflowsWorkflowsInner]
        """
        if workflows is None:
            raise ValueError("Invalid value for `workflows`, must not be `None`")

        self._workflows = workflows
