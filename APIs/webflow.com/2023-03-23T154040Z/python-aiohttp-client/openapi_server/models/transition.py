# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.logs_transition_id import LogsTransitionId
from openapi_server.models.patch_transition_id_assets import PatchTransitionIdAssets
import re
from openapi_server import util


class Transition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assets: PatchTransitionIdAssets=None, created_by: str=None, created_time: str=None, description: str=None, input_json_schema: object=None, name: str=None, output_json_schema: object=None, parameters: object=None, timeout_in_seconds: int=None, transition_id: LogsTransitionId=None, transition_type: str=None, updated_by: str=None, updated_time: str=None):
        """Transition - a model defined in OpenAPI

        :param assets: The assets of this Transition.
        :param created_by: The created_by of this Transition.
        :param created_time: The created_time of this Transition.
        :param description: The description of this Transition.
        :param input_json_schema: The input_json_schema of this Transition.
        :param name: The name of this Transition.
        :param output_json_schema: The output_json_schema of this Transition.
        :param parameters: The parameters of this Transition.
        :param timeout_in_seconds: The timeout_in_seconds of this Transition.
        :param transition_id: The transition_id of this Transition.
        :param transition_type: The transition_type of this Transition.
        :param updated_by: The updated_by of this Transition.
        :param updated_time: The updated_time of this Transition.
        """
        self.openapi_types = {
            'assets': PatchTransitionIdAssets,
            'created_by': str,
            'created_time': str,
            'description': str,
            'input_json_schema': object,
            'name': str,
            'output_json_schema': object,
            'parameters': object,
            'timeout_in_seconds': int,
            'transition_id': LogsTransitionId,
            'transition_type': str,
            'updated_by': str,
            'updated_time': str
        }

        self.attribute_map = {
            'assets': 'assets',
            'created_by': 'createdBy',
            'created_time': 'createdTime',
            'description': 'description',
            'input_json_schema': 'inputJsonSchema',
            'name': 'name',
            'output_json_schema': 'outputJsonSchema',
            'parameters': 'parameters',
            'timeout_in_seconds': 'timeoutInSeconds',
            'transition_id': 'transitionId',
            'transition_type': 'transitionType',
            'updated_by': 'updatedBy',
            'updated_time': 'updatedTime'
        }

        self._assets = assets
        self._created_by = created_by
        self._created_time = created_time
        self._description = description
        self._input_json_schema = input_json_schema
        self._name = name
        self._output_json_schema = output_json_schema
        self._parameters = parameters
        self._timeout_in_seconds = timeout_in_seconds
        self._transition_id = transition_id
        self._transition_type = transition_type
        self._updated_by = updated_by
        self._updated_time = updated_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Transition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Transition of this Transition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assets(self):
        """Gets the assets of this Transition.


        :return: The assets of this Transition.
        :rtype: PatchTransitionIdAssets
        """
        return self._assets

    @assets.setter
    def assets(self, assets):
        """Sets the assets of this Transition.


        :param assets: The assets of this Transition.
        :type assets: PatchTransitionIdAssets
        """

        self._assets = assets

    @property
    def created_by(self):
        """Gets the created_by of this Transition.


        :return: The created_by of this Transition.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Transition.


        :param created_by: The created_by of this Transition.
        :type created_by: str
        """
        if created_by is None:
            raise ValueError("Invalid value for `created_by`, must not be `None`")
        if created_by is not None and len(created_by) > 4096:
            raise ValueError("Invalid value for `created_by`, length must be less than or equal to `4096`")

        self._created_by = created_by

    @property
    def created_time(self):
        """Gets the created_time of this Transition.


        :return: The created_time of this Transition.
        :rtype: str
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this Transition.


        :param created_time: The created_time of this Transition.
        :type created_time: str
        """
        if created_time is None:
            raise ValueError("Invalid value for `created_time`, must not be `None`")
        if created_time is not None and not re.search(r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$', created_time):
            raise ValueError("Invalid value for `created_time`, must be a follow pattern or equal to `/^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$/`")

        self._created_time = created_time

    @property
    def description(self):
        """Gets the description of this Transition.


        :return: The description of this Transition.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Transition.


        :param description: The description of this Transition.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")
        if description is not None and len(description) > 4096:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `4096`")

        self._description = description

    @property
    def input_json_schema(self):
        """Gets the input_json_schema of this Transition.


        :return: The input_json_schema of this Transition.
        :rtype: object
        """
        return self._input_json_schema

    @input_json_schema.setter
    def input_json_schema(self, input_json_schema):
        """Sets the input_json_schema of this Transition.


        :param input_json_schema: The input_json_schema of this Transition.
        :type input_json_schema: object
        """

        self._input_json_schema = input_json_schema

    @property
    def name(self):
        """Gets the name of this Transition.


        :return: The name of this Transition.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Transition.


        :param name: The name of this Transition.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 4096:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `4096`")

        self._name = name

    @property
    def output_json_schema(self):
        """Gets the output_json_schema of this Transition.


        :return: The output_json_schema of this Transition.
        :rtype: object
        """
        return self._output_json_schema

    @output_json_schema.setter
    def output_json_schema(self, output_json_schema):
        """Sets the output_json_schema of this Transition.


        :param output_json_schema: The output_json_schema of this Transition.
        :type output_json_schema: object
        """

        self._output_json_schema = output_json_schema

    @property
    def parameters(self):
        """Gets the parameters of this Transition.


        :return: The parameters of this Transition.
        :rtype: object
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this Transition.


        :param parameters: The parameters of this Transition.
        :type parameters: object
        """
        if parameters is None:
            raise ValueError("Invalid value for `parameters`, must not be `None`")

        self._parameters = parameters

    @property
    def timeout_in_seconds(self):
        """Gets the timeout_in_seconds of this Transition.


        :return: The timeout_in_seconds of this Transition.
        :rtype: int
        """
        return self._timeout_in_seconds

    @timeout_in_seconds.setter
    def timeout_in_seconds(self, timeout_in_seconds):
        """Sets the timeout_in_seconds of this Transition.


        :param timeout_in_seconds: The timeout_in_seconds of this Transition.
        :type timeout_in_seconds: int
        """
        if timeout_in_seconds is None:
            raise ValueError("Invalid value for `timeout_in_seconds`, must not be `None`")
        if timeout_in_seconds is not None and timeout_in_seconds > 1800:
            raise ValueError("Invalid value for `timeout_in_seconds`, must be a value less than or equal to `1800`")
        if timeout_in_seconds is not None and timeout_in_seconds < 60:
            raise ValueError("Invalid value for `timeout_in_seconds`, must be a value greater than or equal to `60`")

        self._timeout_in_seconds = timeout_in_seconds

    @property
    def transition_id(self):
        """Gets the transition_id of this Transition.


        :return: The transition_id of this Transition.
        :rtype: LogsTransitionId
        """
        return self._transition_id

    @transition_id.setter
    def transition_id(self, transition_id):
        """Sets the transition_id of this Transition.


        :param transition_id: The transition_id of this Transition.
        :type transition_id: LogsTransitionId
        """
        if transition_id is None:
            raise ValueError("Invalid value for `transition_id`, must not be `None`")

        self._transition_id = transition_id

    @property
    def transition_type(self):
        """Gets the transition_type of this Transition.


        :return: The transition_type of this Transition.
        :rtype: str
        """
        return self._transition_type

    @transition_type.setter
    def transition_type(self, transition_type):
        """Sets the transition_type of this Transition.


        :param transition_type: The transition_type of this Transition.
        :type transition_type: str
        """
        allowed_values = ["docker", "manual"]  # noqa: E501
        if transition_type not in allowed_values:
            raise ValueError(
                "Invalid value for `transition_type` ({0}), must be one of {1}"
                .format(transition_type, allowed_values)
            )

        self._transition_type = transition_type

    @property
    def updated_by(self):
        """Gets the updated_by of this Transition.


        :return: The updated_by of this Transition.
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this Transition.


        :param updated_by: The updated_by of this Transition.
        :type updated_by: str
        """
        if updated_by is None:
            raise ValueError("Invalid value for `updated_by`, must not be `None`")
        if updated_by is not None and len(updated_by) > 4096:
            raise ValueError("Invalid value for `updated_by`, length must be less than or equal to `4096`")

        self._updated_by = updated_by

    @property
    def updated_time(self):
        """Gets the updated_time of this Transition.


        :return: The updated_time of this Transition.
        :rtype: str
        """
        return self._updated_time

    @updated_time.setter
    def updated_time(self, updated_time):
        """Sets the updated_time of this Transition.


        :param updated_time: The updated_time of this Transition.
        :type updated_time: str
        """
        if updated_time is None:
            raise ValueError("Invalid value for `updated_time`, must not be `None`")
        if updated_time is not None and not re.search(r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$', updated_time):
            raise ValueError("Invalid value for `updated_time`, must be a follow pattern or equal to `/^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$/`")

        self._updated_time = updated_time
