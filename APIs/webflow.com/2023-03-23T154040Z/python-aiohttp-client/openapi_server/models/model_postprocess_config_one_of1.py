# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.model_postprocess_config_one_of1_parameters import ModelPostprocessConfigOneOf1Parameters
from openapi_server import util


class ModelPostprocessConfigOneOf1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, parameters: ModelPostprocessConfigOneOf1Parameters=None, strategy: str=None):
        """ModelPostprocessConfigOneOf1 - a model defined in OpenAPI

        :param parameters: The parameters of this ModelPostprocessConfigOneOf1.
        :param strategy: The strategy of this ModelPostprocessConfigOneOf1.
        """
        self.openapi_types = {
            'parameters': ModelPostprocessConfigOneOf1Parameters,
            'strategy': str
        }

        self.attribute_map = {
            'parameters': 'parameters',
            'strategy': 'strategy'
        }

        self._parameters = parameters
        self._strategy = strategy

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ModelPostprocessConfigOneOf1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Model_postprocessConfig_oneOf_1 of this ModelPostprocessConfigOneOf1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def parameters(self):
        """Gets the parameters of this ModelPostprocessConfigOneOf1.


        :return: The parameters of this ModelPostprocessConfigOneOf1.
        :rtype: ModelPostprocessConfigOneOf1Parameters
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this ModelPostprocessConfigOneOf1.


        :param parameters: The parameters of this ModelPostprocessConfigOneOf1.
        :type parameters: ModelPostprocessConfigOneOf1Parameters
        """
        if parameters is None:
            raise ValueError("Invalid value for `parameters`, must not be `None`")

        self._parameters = parameters

    @property
    def strategy(self):
        """Gets the strategy of this ModelPostprocessConfigOneOf1.


        :return: The strategy of this ModelPostprocessConfigOneOf1.
        :rtype: str
        """
        return self._strategy

    @strategy.setter
    def strategy(self, strategy):
        """Sets the strategy of this ModelPostprocessConfigOneOf1.


        :param strategy: The strategy of this ModelPostprocessConfigOneOf1.
        :type strategy: str
        """
        allowed_values = ["BEST_N_PAGES"]  # noqa: E501
        if strategy not in allowed_values:
            raise ValueError(
                "Invalid value for `strategy` ({0}), must be one of {1}"
                .format(strategy, allowed_values)
            )

        self._strategy = strategy
