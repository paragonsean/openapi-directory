# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.model_field_config_value import ModelFieldConfigValue
from openapi_server.models.model_postprocess_config import ModelPostprocessConfig
from openapi_server.models.model_preprocess_config import ModelPreprocessConfig
import re
from openapi_server import util


class ModelsModelsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_by: str=None, created_time: str=None, description: str=None, field_config: Dict[str, ModelFieldConfigValue]=None, metadata: object=None, model_id: str=None, name: str=None, number_of_data_bundles: int=None, number_of_running_trainings: int=None, organization_id: str=None, postprocess_config: ModelPostprocessConfig=None, preprocess_config: ModelPreprocessConfig=None, status: str=None, training_id: str=None, updated_by: str=None, updated_time: str=None):
        """ModelsModelsInner - a model defined in OpenAPI

        :param created_by: The created_by of this ModelsModelsInner.
        :param created_time: The created_time of this ModelsModelsInner.
        :param description: The description of this ModelsModelsInner.
        :param field_config: The field_config of this ModelsModelsInner.
        :param metadata: The metadata of this ModelsModelsInner.
        :param model_id: The model_id of this ModelsModelsInner.
        :param name: The name of this ModelsModelsInner.
        :param number_of_data_bundles: The number_of_data_bundles of this ModelsModelsInner.
        :param number_of_running_trainings: The number_of_running_trainings of this ModelsModelsInner.
        :param organization_id: The organization_id of this ModelsModelsInner.
        :param postprocess_config: The postprocess_config of this ModelsModelsInner.
        :param preprocess_config: The preprocess_config of this ModelsModelsInner.
        :param status: The status of this ModelsModelsInner.
        :param training_id: The training_id of this ModelsModelsInner.
        :param updated_by: The updated_by of this ModelsModelsInner.
        :param updated_time: The updated_time of this ModelsModelsInner.
        """
        self.openapi_types = {
            'created_by': str,
            'created_time': str,
            'description': str,
            'field_config': Dict[str, ModelFieldConfigValue],
            'metadata': object,
            'model_id': str,
            'name': str,
            'number_of_data_bundles': int,
            'number_of_running_trainings': int,
            'organization_id': str,
            'postprocess_config': ModelPostprocessConfig,
            'preprocess_config': ModelPreprocessConfig,
            'status': str,
            'training_id': str,
            'updated_by': str,
            'updated_time': str
        }

        self.attribute_map = {
            'created_by': 'createdBy',
            'created_time': 'createdTime',
            'description': 'description',
            'field_config': 'fieldConfig',
            'metadata': 'metadata',
            'model_id': 'modelId',
            'name': 'name',
            'number_of_data_bundles': 'numberOfDataBundles',
            'number_of_running_trainings': 'numberOfRunningTrainings',
            'organization_id': 'organizationId',
            'postprocess_config': 'postprocessConfig',
            'preprocess_config': 'preprocessConfig',
            'status': 'status',
            'training_id': 'trainingId',
            'updated_by': 'updatedBy',
            'updated_time': 'updatedTime'
        }

        self._created_by = created_by
        self._created_time = created_time
        self._description = description
        self._field_config = field_config
        self._metadata = metadata
        self._model_id = model_id
        self._name = name
        self._number_of_data_bundles = number_of_data_bundles
        self._number_of_running_trainings = number_of_running_trainings
        self._organization_id = organization_id
        self._postprocess_config = postprocess_config
        self._preprocess_config = preprocess_config
        self._status = status
        self._training_id = training_id
        self._updated_by = updated_by
        self._updated_time = updated_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ModelsModelsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Models_models_inner of this ModelsModelsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_by(self):
        """Gets the created_by of this ModelsModelsInner.


        :return: The created_by of this ModelsModelsInner.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this ModelsModelsInner.


        :param created_by: The created_by of this ModelsModelsInner.
        :type created_by: str
        """
        if created_by is None:
            raise ValueError("Invalid value for `created_by`, must not be `None`")
        if created_by is not None and len(created_by) > 4096:
            raise ValueError("Invalid value for `created_by`, length must be less than or equal to `4096`")

        self._created_by = created_by

    @property
    def created_time(self):
        """Gets the created_time of this ModelsModelsInner.


        :return: The created_time of this ModelsModelsInner.
        :rtype: str
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this ModelsModelsInner.


        :param created_time: The created_time of this ModelsModelsInner.
        :type created_time: str
        """
        if created_time is None:
            raise ValueError("Invalid value for `created_time`, must not be `None`")
        if created_time is not None and not re.search(r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$', created_time):
            raise ValueError("Invalid value for `created_time`, must be a follow pattern or equal to `/^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$/`")

        self._created_time = created_time

    @property
    def description(self):
        """Gets the description of this ModelsModelsInner.


        :return: The description of this ModelsModelsInner.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ModelsModelsInner.


        :param description: The description of this ModelsModelsInner.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")
        if description is not None and len(description) > 4096:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `4096`")

        self._description = description

    @property
    def field_config(self):
        """Gets the field_config of this ModelsModelsInner.


        :return: The field_config of this ModelsModelsInner.
        :rtype: Dict[str, ModelFieldConfigValue]
        """
        return self._field_config

    @field_config.setter
    def field_config(self, field_config):
        """Sets the field_config of this ModelsModelsInner.


        :param field_config: The field_config of this ModelsModelsInner.
        :type field_config: Dict[str, ModelFieldConfigValue]
        """
        if field_config is None:
            raise ValueError("Invalid value for `field_config`, must not be `None`")

        self._field_config = field_config

    @property
    def metadata(self):
        """Gets the metadata of this ModelsModelsInner.


        :return: The metadata of this ModelsModelsInner.
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this ModelsModelsInner.


        :param metadata: The metadata of this ModelsModelsInner.
        :type metadata: object
        """
        if metadata is None:
            raise ValueError("Invalid value for `metadata`, must not be `None`")

        self._metadata = metadata

    @property
    def model_id(self):
        """Gets the model_id of this ModelsModelsInner.


        :return: The model_id of this ModelsModelsInner.
        :rtype: str
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id):
        """Sets the model_id of this ModelsModelsInner.


        :param model_id: The model_id of this ModelsModelsInner.
        :type model_id: str
        """
        if model_id is None:
            raise ValueError("Invalid value for `model_id`, must not be `None`")
        if model_id is not None and not re.search(r'^las:model:[a-z0-9-_]+$', model_id):
            raise ValueError("Invalid value for `model_id`, must be a follow pattern or equal to `/^las:model:[a-z0-9-_]+$/`")

        self._model_id = model_id

    @property
    def name(self):
        """Gets the name of this ModelsModelsInner.


        :return: The name of this ModelsModelsInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ModelsModelsInner.


        :param name: The name of this ModelsModelsInner.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 4096:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `4096`")

        self._name = name

    @property
    def number_of_data_bundles(self):
        """Gets the number_of_data_bundles of this ModelsModelsInner.


        :return: The number_of_data_bundles of this ModelsModelsInner.
        :rtype: int
        """
        return self._number_of_data_bundles

    @number_of_data_bundles.setter
    def number_of_data_bundles(self, number_of_data_bundles):
        """Sets the number_of_data_bundles of this ModelsModelsInner.


        :param number_of_data_bundles: The number_of_data_bundles of this ModelsModelsInner.
        :type number_of_data_bundles: int
        """
        if number_of_data_bundles is None:
            raise ValueError("Invalid value for `number_of_data_bundles`, must not be `None`")
        if number_of_data_bundles is not None and number_of_data_bundles < 0:
            raise ValueError("Invalid value for `number_of_data_bundles`, must be a value greater than or equal to `0`")

        self._number_of_data_bundles = number_of_data_bundles

    @property
    def number_of_running_trainings(self):
        """Gets the number_of_running_trainings of this ModelsModelsInner.


        :return: The number_of_running_trainings of this ModelsModelsInner.
        :rtype: int
        """
        return self._number_of_running_trainings

    @number_of_running_trainings.setter
    def number_of_running_trainings(self, number_of_running_trainings):
        """Sets the number_of_running_trainings of this ModelsModelsInner.


        :param number_of_running_trainings: The number_of_running_trainings of this ModelsModelsInner.
        :type number_of_running_trainings: int
        """
        if number_of_running_trainings is None:
            raise ValueError("Invalid value for `number_of_running_trainings`, must not be `None`")
        if number_of_running_trainings is not None and number_of_running_trainings < 0:
            raise ValueError("Invalid value for `number_of_running_trainings`, must be a value greater than or equal to `0`")

        self._number_of_running_trainings = number_of_running_trainings

    @property
    def organization_id(self):
        """Gets the organization_id of this ModelsModelsInner.


        :return: The organization_id of this ModelsModelsInner.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this ModelsModelsInner.


        :param organization_id: The organization_id of this ModelsModelsInner.
        :type organization_id: str
        """
        if organization_id is None:
            raise ValueError("Invalid value for `organization_id`, must not be `None`")
        if organization_id is not None and not re.search(r'^las:organization:[a-z0-9-_]+$', organization_id):
            raise ValueError("Invalid value for `organization_id`, must be a follow pattern or equal to `/^las:organization:[a-z0-9-_]+$/`")

        self._organization_id = organization_id

    @property
    def postprocess_config(self):
        """Gets the postprocess_config of this ModelsModelsInner.


        :return: The postprocess_config of this ModelsModelsInner.
        :rtype: ModelPostprocessConfig
        """
        return self._postprocess_config

    @postprocess_config.setter
    def postprocess_config(self, postprocess_config):
        """Sets the postprocess_config of this ModelsModelsInner.


        :param postprocess_config: The postprocess_config of this ModelsModelsInner.
        :type postprocess_config: ModelPostprocessConfig
        """

        self._postprocess_config = postprocess_config

    @property
    def preprocess_config(self):
        """Gets the preprocess_config of this ModelsModelsInner.


        :return: The preprocess_config of this ModelsModelsInner.
        :rtype: ModelPreprocessConfig
        """
        return self._preprocess_config

    @preprocess_config.setter
    def preprocess_config(self, preprocess_config):
        """Sets the preprocess_config of this ModelsModelsInner.


        :param preprocess_config: The preprocess_config of this ModelsModelsInner.
        :type preprocess_config: ModelPreprocessConfig
        """
        if preprocess_config is None:
            raise ValueError("Invalid value for `preprocess_config`, must not be `None`")

        self._preprocess_config = preprocess_config

    @property
    def status(self):
        """Gets the status of this ModelsModelsInner.


        :return: The status of this ModelsModelsInner.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ModelsModelsInner.


        :param status: The status of this ModelsModelsInner.
        :type status: str
        """
        allowed_values = ["active", "inactive"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def training_id(self):
        """Gets the training_id of this ModelsModelsInner.


        :return: The training_id of this ModelsModelsInner.
        :rtype: str
        """
        return self._training_id

    @training_id.setter
    def training_id(self, training_id):
        """Sets the training_id of this ModelsModelsInner.


        :param training_id: The training_id of this ModelsModelsInner.
        :type training_id: str
        """
        if training_id is None:
            raise ValueError("Invalid value for `training_id`, must not be `None`")
        if training_id is not None and not re.search(r'^las:model-training:[a-f0-9]{32}$', training_id):
            raise ValueError("Invalid value for `training_id`, must be a follow pattern or equal to `/^las:model-training:[a-f0-9]{32}$/`")

        self._training_id = training_id

    @property
    def updated_by(self):
        """Gets the updated_by of this ModelsModelsInner.


        :return: The updated_by of this ModelsModelsInner.
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this ModelsModelsInner.


        :param updated_by: The updated_by of this ModelsModelsInner.
        :type updated_by: str
        """
        if updated_by is None:
            raise ValueError("Invalid value for `updated_by`, must not be `None`")
        if updated_by is not None and len(updated_by) > 4096:
            raise ValueError("Invalid value for `updated_by`, length must be less than or equal to `4096`")

        self._updated_by = updated_by

    @property
    def updated_time(self):
        """Gets the updated_time of this ModelsModelsInner.


        :return: The updated_time of this ModelsModelsInner.
        :rtype: str
        """
        return self._updated_time

    @updated_time.setter
    def updated_time(self, updated_time):
        """Sets the updated_time of this ModelsModelsInner.


        :param updated_time: The updated_time of this ModelsModelsInner.
        :type updated_time: str
        """
        if updated_time is None:
            raise ValueError("Invalid value for `updated_time`, must not be `None`")
        if updated_time is not None and not re.search(r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$', updated_time):
            raise ValueError("Invalid value for `updated_time`, must be a follow pattern or equal to `/^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$/`")

        self._updated_time = updated_time
