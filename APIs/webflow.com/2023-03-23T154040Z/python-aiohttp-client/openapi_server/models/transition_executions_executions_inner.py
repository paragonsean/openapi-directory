# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.logs_transition_id import LogsTransitionId
import re
from openapi_server import util


class TransitionExecutionsExecutionsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, completed_by: str=None, end_time: str=None, execution_id: str=None, input: object=None, log_id: str=None, start_time: str=None, status: str=None, transition_id: LogsTransitionId=None):
        """TransitionExecutionsExecutionsInner - a model defined in OpenAPI

        :param completed_by: The completed_by of this TransitionExecutionsExecutionsInner.
        :param end_time: The end_time of this TransitionExecutionsExecutionsInner.
        :param execution_id: The execution_id of this TransitionExecutionsExecutionsInner.
        :param input: The input of this TransitionExecutionsExecutionsInner.
        :param log_id: The log_id of this TransitionExecutionsExecutionsInner.
        :param start_time: The start_time of this TransitionExecutionsExecutionsInner.
        :param status: The status of this TransitionExecutionsExecutionsInner.
        :param transition_id: The transition_id of this TransitionExecutionsExecutionsInner.
        """
        self.openapi_types = {
            'completed_by': str,
            'end_time': str,
            'execution_id': str,
            'input': object,
            'log_id': str,
            'start_time': str,
            'status': str,
            'transition_id': LogsTransitionId
        }

        self.attribute_map = {
            'completed_by': 'completedBy',
            'end_time': 'endTime',
            'execution_id': 'executionId',
            'input': 'input',
            'log_id': 'logId',
            'start_time': 'startTime',
            'status': 'status',
            'transition_id': 'transitionId'
        }

        self._completed_by = completed_by
        self._end_time = end_time
        self._execution_id = execution_id
        self._input = input
        self._log_id = log_id
        self._start_time = start_time
        self._status = status
        self._transition_id = transition_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransitionExecutionsExecutionsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransitionExecutions_executions_inner of this TransitionExecutionsExecutionsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def completed_by(self):
        """Gets the completed_by of this TransitionExecutionsExecutionsInner.


        :return: The completed_by of this TransitionExecutionsExecutionsInner.
        :rtype: str
        """
        return self._completed_by

    @completed_by.setter
    def completed_by(self, completed_by):
        """Sets the completed_by of this TransitionExecutionsExecutionsInner.


        :param completed_by: The completed_by of this TransitionExecutionsExecutionsInner.
        :type completed_by: str
        """
        if completed_by is None:
            raise ValueError("Invalid value for `completed_by`, must not be `None`")
        if completed_by is not None and len(completed_by) > 4096:
            raise ValueError("Invalid value for `completed_by`, length must be less than or equal to `4096`")

        self._completed_by = completed_by

    @property
    def end_time(self):
        """Gets the end_time of this TransitionExecutionsExecutionsInner.


        :return: The end_time of this TransitionExecutionsExecutionsInner.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this TransitionExecutionsExecutionsInner.


        :param end_time: The end_time of this TransitionExecutionsExecutionsInner.
        :type end_time: str
        """
        if end_time is not None and not re.search(r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$', end_time):
            raise ValueError("Invalid value for `end_time`, must be a follow pattern or equal to `/^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$/`")

        self._end_time = end_time

    @property
    def execution_id(self):
        """Gets the execution_id of this TransitionExecutionsExecutionsInner.


        :return: The execution_id of this TransitionExecutionsExecutionsInner.
        :rtype: str
        """
        return self._execution_id

    @execution_id.setter
    def execution_id(self, execution_id):
        """Sets the execution_id of this TransitionExecutionsExecutionsInner.


        :param execution_id: The execution_id of this TransitionExecutionsExecutionsInner.
        :type execution_id: str
        """
        if execution_id is None:
            raise ValueError("Invalid value for `execution_id`, must not be `None`")
        if execution_id is not None and not re.search(r'^las:transition-execution:[a-f0-9]{32}$', execution_id):
            raise ValueError("Invalid value for `execution_id`, must be a follow pattern or equal to `/^las:transition-execution:[a-f0-9]{32}$/`")

        self._execution_id = execution_id

    @property
    def input(self):
        """Gets the input of this TransitionExecutionsExecutionsInner.


        :return: The input of this TransitionExecutionsExecutionsInner.
        :rtype: object
        """
        return self._input

    @input.setter
    def input(self, input):
        """Sets the input of this TransitionExecutionsExecutionsInner.


        :param input: The input of this TransitionExecutionsExecutionsInner.
        :type input: object
        """
        if input is None:
            raise ValueError("Invalid value for `input`, must not be `None`")

        self._input = input

    @property
    def log_id(self):
        """Gets the log_id of this TransitionExecutionsExecutionsInner.


        :return: The log_id of this TransitionExecutionsExecutionsInner.
        :rtype: str
        """
        return self._log_id

    @log_id.setter
    def log_id(self, log_id):
        """Sets the log_id of this TransitionExecutionsExecutionsInner.


        :param log_id: The log_id of this TransitionExecutionsExecutionsInner.
        :type log_id: str
        """
        if log_id is not None and not re.search(r'^las:log:[a-f0-9]{32}$', log_id):
            raise ValueError("Invalid value for `log_id`, must be a follow pattern or equal to `/^las:log:[a-f0-9]{32}$/`")

        self._log_id = log_id

    @property
    def start_time(self):
        """Gets the start_time of this TransitionExecutionsExecutionsInner.


        :return: The start_time of this TransitionExecutionsExecutionsInner.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this TransitionExecutionsExecutionsInner.


        :param start_time: The start_time of this TransitionExecutionsExecutionsInner.
        :type start_time: str
        """
        if start_time is not None and not re.search(r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$', start_time):
            raise ValueError("Invalid value for `start_time`, must be a follow pattern or equal to `/^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$/`")

        self._start_time = start_time

    @property
    def status(self):
        """Gets the status of this TransitionExecutionsExecutionsInner.


        :return: The status of this TransitionExecutionsExecutionsInner.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TransitionExecutionsExecutionsInner.


        :param status: The status of this TransitionExecutionsExecutionsInner.
        :type status: str
        """
        allowed_values = ["running", "succeeded", "failed", "rejected", "retry"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def transition_id(self):
        """Gets the transition_id of this TransitionExecutionsExecutionsInner.


        :return: The transition_id of this TransitionExecutionsExecutionsInner.
        :rtype: LogsTransitionId
        """
        return self._transition_id

    @transition_id.setter
    def transition_id(self, transition_id):
        """Sets the transition_id of this TransitionExecutionsExecutionsInner.


        :param transition_id: The transition_id of this TransitionExecutionsExecutionsInner.
        :type transition_id: LogsTransitionId
        """
        if transition_id is None:
            raise ValueError("Invalid value for `transition_id`, must not be `None`")

        self._transition_id = transition_id
