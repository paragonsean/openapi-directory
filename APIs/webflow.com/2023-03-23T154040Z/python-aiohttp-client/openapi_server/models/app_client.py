# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class AppClient(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_client_id: str=None, callback_urls: List[str]=None, client_id: str=None, client_secret: str=None, created_by: str=None, created_time: str=None, default_login_url: str=None, description: str=None, has_secret: bool=None, login_urls: List[str]=None, logout_urls: List[str]=None, name: str=None, updated_by: str=None, updated_time: str=None):
        """AppClient - a model defined in OpenAPI

        :param app_client_id: The app_client_id of this AppClient.
        :param callback_urls: The callback_urls of this AppClient.
        :param client_id: The client_id of this AppClient.
        :param client_secret: The client_secret of this AppClient.
        :param created_by: The created_by of this AppClient.
        :param created_time: The created_time of this AppClient.
        :param default_login_url: The default_login_url of this AppClient.
        :param description: The description of this AppClient.
        :param has_secret: The has_secret of this AppClient.
        :param login_urls: The login_urls of this AppClient.
        :param logout_urls: The logout_urls of this AppClient.
        :param name: The name of this AppClient.
        :param updated_by: The updated_by of this AppClient.
        :param updated_time: The updated_time of this AppClient.
        """
        self.openapi_types = {
            'app_client_id': str,
            'callback_urls': List[str],
            'client_id': str,
            'client_secret': str,
            'created_by': str,
            'created_time': str,
            'default_login_url': str,
            'description': str,
            'has_secret': bool,
            'login_urls': List[str],
            'logout_urls': List[str],
            'name': str,
            'updated_by': str,
            'updated_time': str
        }

        self.attribute_map = {
            'app_client_id': 'appClientId',
            'callback_urls': 'callbackUrls',
            'client_id': 'clientId',
            'client_secret': 'clientSecret',
            'created_by': 'createdBy',
            'created_time': 'createdTime',
            'default_login_url': 'defaultLoginUrl',
            'description': 'description',
            'has_secret': 'hasSecret',
            'login_urls': 'loginUrls',
            'logout_urls': 'logoutUrls',
            'name': 'name',
            'updated_by': 'updatedBy',
            'updated_time': 'updatedTime'
        }

        self._app_client_id = app_client_id
        self._callback_urls = callback_urls
        self._client_id = client_id
        self._client_secret = client_secret
        self._created_by = created_by
        self._created_time = created_time
        self._default_login_url = default_login_url
        self._description = description
        self._has_secret = has_secret
        self._login_urls = login_urls
        self._logout_urls = logout_urls
        self._name = name
        self._updated_by = updated_by
        self._updated_time = updated_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AppClient':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AppClient of this AppClient.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_client_id(self):
        """Gets the app_client_id of this AppClient.


        :return: The app_client_id of this AppClient.
        :rtype: str
        """
        return self._app_client_id

    @app_client_id.setter
    def app_client_id(self, app_client_id):
        """Sets the app_client_id of this AppClient.


        :param app_client_id: The app_client_id of this AppClient.
        :type app_client_id: str
        """
        if app_client_id is None:
            raise ValueError("Invalid value for `app_client_id`, must not be `None`")
        if app_client_id is not None and not re.search(r'^las:app-client:[a-z0-9-_]+$', app_client_id):
            raise ValueError("Invalid value for `app_client_id`, must be a follow pattern or equal to `/^las:app-client:[a-z0-9-_]+$/`")

        self._app_client_id = app_client_id

    @property
    def callback_urls(self):
        """Gets the callback_urls of this AppClient.


        :return: The callback_urls of this AppClient.
        :rtype: List[str]
        """
        return self._callback_urls

    @callback_urls.setter
    def callback_urls(self, callback_urls):
        """Sets the callback_urls of this AppClient.


        :param callback_urls: The callback_urls of this AppClient.
        :type callback_urls: List[str]
        """
        if callback_urls is None:
            raise ValueError("Invalid value for `callback_urls`, must not be `None`")

        self._callback_urls = callback_urls

    @property
    def client_id(self):
        """Gets the client_id of this AppClient.


        :return: The client_id of this AppClient.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this AppClient.


        :param client_id: The client_id of this AppClient.
        :type client_id: str
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")

        self._client_id = client_id

    @property
    def client_secret(self):
        """Gets the client_secret of this AppClient.


        :return: The client_secret of this AppClient.
        :rtype: str
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """Sets the client_secret of this AppClient.


        :param client_secret: The client_secret of this AppClient.
        :type client_secret: str
        """

        self._client_secret = client_secret

    @property
    def created_by(self):
        """Gets the created_by of this AppClient.


        :return: The created_by of this AppClient.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this AppClient.


        :param created_by: The created_by of this AppClient.
        :type created_by: str
        """
        if created_by is None:
            raise ValueError("Invalid value for `created_by`, must not be `None`")
        if created_by is not None and len(created_by) > 4096:
            raise ValueError("Invalid value for `created_by`, length must be less than or equal to `4096`")

        self._created_by = created_by

    @property
    def created_time(self):
        """Gets the created_time of this AppClient.


        :return: The created_time of this AppClient.
        :rtype: str
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this AppClient.


        :param created_time: The created_time of this AppClient.
        :type created_time: str
        """
        if created_time is None:
            raise ValueError("Invalid value for `created_time`, must not be `None`")
        if created_time is not None and not re.search(r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$', created_time):
            raise ValueError("Invalid value for `created_time`, must be a follow pattern or equal to `/^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$/`")

        self._created_time = created_time

    @property
    def default_login_url(self):
        """Gets the default_login_url of this AppClient.


        :return: The default_login_url of this AppClient.
        :rtype: str
        """
        return self._default_login_url

    @default_login_url.setter
    def default_login_url(self, default_login_url):
        """Sets the default_login_url of this AppClient.


        :param default_login_url: The default_login_url of this AppClient.
        :type default_login_url: str
        """
        if default_login_url is None:
            raise ValueError("Invalid value for `default_login_url`, must not be `None`")
        if default_login_url is not None and not re.search(r'^http:\/\/localhost.*|^https:\/\/.*', default_login_url):
            raise ValueError("Invalid value for `default_login_url`, must be a follow pattern or equal to `/^http:\/\/localhost.*|^https:\/\/.*/`")

        self._default_login_url = default_login_url

    @property
    def description(self):
        """Gets the description of this AppClient.


        :return: The description of this AppClient.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AppClient.


        :param description: The description of this AppClient.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")
        if description is not None and len(description) > 4096:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `4096`")

        self._description = description

    @property
    def has_secret(self):
        """Gets the has_secret of this AppClient.


        :return: The has_secret of this AppClient.
        :rtype: bool
        """
        return self._has_secret

    @has_secret.setter
    def has_secret(self, has_secret):
        """Sets the has_secret of this AppClient.


        :param has_secret: The has_secret of this AppClient.
        :type has_secret: bool
        """
        if has_secret is None:
            raise ValueError("Invalid value for `has_secret`, must not be `None`")

        self._has_secret = has_secret

    @property
    def login_urls(self):
        """Gets the login_urls of this AppClient.


        :return: The login_urls of this AppClient.
        :rtype: List[str]
        """
        return self._login_urls

    @login_urls.setter
    def login_urls(self, login_urls):
        """Sets the login_urls of this AppClient.


        :param login_urls: The login_urls of this AppClient.
        :type login_urls: List[str]
        """
        if login_urls is None:
            raise ValueError("Invalid value for `login_urls`, must not be `None`")

        self._login_urls = login_urls

    @property
    def logout_urls(self):
        """Gets the logout_urls of this AppClient.


        :return: The logout_urls of this AppClient.
        :rtype: List[str]
        """
        return self._logout_urls

    @logout_urls.setter
    def logout_urls(self, logout_urls):
        """Sets the logout_urls of this AppClient.


        :param logout_urls: The logout_urls of this AppClient.
        :type logout_urls: List[str]
        """
        if logout_urls is None:
            raise ValueError("Invalid value for `logout_urls`, must not be `None`")

        self._logout_urls = logout_urls

    @property
    def name(self):
        """Gets the name of this AppClient.


        :return: The name of this AppClient.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AppClient.


        :param name: The name of this AppClient.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 4096:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `4096`")

        self._name = name

    @property
    def updated_by(self):
        """Gets the updated_by of this AppClient.


        :return: The updated_by of this AppClient.
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this AppClient.


        :param updated_by: The updated_by of this AppClient.
        :type updated_by: str
        """
        if updated_by is None:
            raise ValueError("Invalid value for `updated_by`, must not be `None`")
        if updated_by is not None and len(updated_by) > 4096:
            raise ValueError("Invalid value for `updated_by`, length must be less than or equal to `4096`")

        self._updated_by = updated_by

    @property
    def updated_time(self):
        """Gets the updated_time of this AppClient.


        :return: The updated_time of this AppClient.
        :rtype: str
        """
        return self._updated_time

    @updated_time.setter
    def updated_time(self, updated_time):
        """Sets the updated_time of this AppClient.


        :param updated_time: The updated_time of this AppClient.
        :type updated_time: str
        """
        if updated_time is None:
            raise ValueError("Invalid value for `updated_time`, must not be `None`")
        if updated_time is not None and not re.search(r'^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$', updated_time):
            raise ValueError("Invalid value for `updated_time`, must be a follow pattern or equal to `/^[0-9]{4}-?[0-9]{2}-?[0-9]{2}( |T)?[0-9]{2}:?[0-9]{2}:?[0-9]{2}(.[0-9]{1,6})?(Z|[+][0-9]{2}(:|)[0-9]{2})$/`")

        self._updated_time = updated_time
