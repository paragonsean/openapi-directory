/**
 * Lucidtech API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-03-23T15:40:40Z
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AppClient from '../model/AppClient';
import AppClients from '../model/AppClients';
import Asset from '../model/Asset';
import Assets from '../model/Assets';
import DataBundle from '../model/DataBundle';
import DataBundles from '../model/DataBundles';
import Dataset from '../model/Dataset';
import Datasets from '../model/Datasets';
import DeploymentEnvironment from '../model/DeploymentEnvironment';
import DeploymentEnvironments from '../model/DeploymentEnvironments';
import Document from '../model/Document';
import Documents from '../model/Documents';
import Error from '../model/Error';
import Log from '../model/Log';
import Logs from '../model/Logs';
import Model from '../model/Model';
import Models from '../model/Models';
import Organization from '../model/Organization';
import Organizations from '../model/Organizations';
import PatchAppClientId from '../model/PatchAppClientId';
import PatchAssetId from '../model/PatchAssetId';
import PatchDataBundleId from '../model/PatchDataBundleId';
import PatchDatasetId from '../model/PatchDatasetId';
import PatchDocumentId from '../model/PatchDocumentId';
import PatchModelId from '../model/PatchModelId';
import PatchOrganizationId from '../model/PatchOrganizationId';
import PatchPaymentMethodId from '../model/PatchPaymentMethodId';
import PatchSecretId from '../model/PatchSecretId';
import PatchTrainingId from '../model/PatchTrainingId';
import PatchTransistionExecutionId from '../model/PatchTransistionExecutionId';
import PatchTransitionId from '../model/PatchTransitionId';
import PatchUserId from '../model/PatchUserId';
import PatchWorkflowExecutionId from '../model/PatchWorkflowExecutionId';
import PatchWorkflowId from '../model/PatchWorkflowId';
import PaymentMethod from '../model/PaymentMethod';
import PaymentMethods from '../model/PaymentMethods';
import Plan from '../model/Plan';
import Plans from '../model/Plans';
import PostAppClients from '../model/PostAppClients';
import PostAssets from '../model/PostAssets';
import PostDataBundles from '../model/PostDataBundles';
import PostDatasets from '../model/PostDatasets';
import PostDocuments from '../model/PostDocuments';
import PostModels from '../model/PostModels';
import PostOrganizations from '../model/PostOrganizations';
import PostPaymentMethods from '../model/PostPaymentMethods';
import PostPredictions from '../model/PostPredictions';
import PostSecrets from '../model/PostSecrets';
import PostTrainings from '../model/PostTrainings';
import PostTransitions from '../model/PostTransitions';
import PostUsers from '../model/PostUsers';
import PostWorkflowExecutions from '../model/PostWorkflowExecutions';
import PostWorkflows from '../model/PostWorkflows';
import Prediction from '../model/Prediction';
import Predictions from '../model/Predictions';
import Profile from '../model/Profile';
import Secret from '../model/Secret';
import Secrets from '../model/Secrets';
import Training from '../model/Training';
import Trainings from '../model/Trainings';
import Transition from '../model/Transition';
import TransitionExecution from '../model/TransitionExecution';
import TransitionExecutions from '../model/TransitionExecutions';
import Transitions from '../model/Transitions';
import User from '../model/User';
import Users from '../model/Users';
import Workflow from '../model/Workflow';
import WorkflowExecution from '../model/WorkflowExecution';
import WorkflowExecutions from '../model/WorkflowExecutions';
import Workflows from '../model/Workflows';

/**
* Default service.
* @module api/DefaultApi
* @version 2023-03-23T15:40:40Z
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the appClientsAppClientIdDelete operation.
     * @callback module:api/DefaultApi~appClientsAppClientIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppClient} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appClientId 
     * @param {module:api/DefaultApi~appClientsAppClientIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppClient}
     */
    appClientsAppClientIdDelete(appClientId, callback) {
      let postBody = null;
      // verify the required parameter 'appClientId' is set
      if (appClientId === undefined || appClientId === null) {
        throw new Error("Missing the required parameter 'appClientId' when calling appClientsAppClientIdDelete");
      }

      let pathParams = {
        'appClientId': appClientId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppClient;
      return this.apiClient.callApi(
        '/appClients/{appClientId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appClientsAppClientIdOptions operation.
     * @callback module:api/DefaultApi~appClientsAppClientIdOptionsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appClientId 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~appClientsAppClientIdOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    appClientsAppClientIdOptions(appClientId, body, callback) {
      let postBody = body;
      // verify the required parameter 'appClientId' is set
      if (appClientId === undefined || appClientId === null) {
        throw new Error("Missing the required parameter 'appClientId' when calling appClientsAppClientIdOptions");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling appClientsAppClientIdOptions");
      }

      let pathParams = {
        'appClientId': appClientId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/appClients/{appClientId}', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appClientsAppClientIdPatch operation.
     * @callback module:api/DefaultApi~appClientsAppClientIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppClient} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appClientId 
     * @param {String} contentType 
     * @param {module:model/PatchAppClientId} patchAppClientId 
     * @param {module:api/DefaultApi~appClientsAppClientIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppClient}
     */
    appClientsAppClientIdPatch(appClientId, contentType, patchAppClientId, callback) {
      let postBody = patchAppClientId;
      // verify the required parameter 'appClientId' is set
      if (appClientId === undefined || appClientId === null) {
        throw new Error("Missing the required parameter 'appClientId' when calling appClientsAppClientIdPatch");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling appClientsAppClientIdPatch");
      }
      // verify the required parameter 'patchAppClientId' is set
      if (patchAppClientId === undefined || patchAppClientId === null) {
        throw new Error("Missing the required parameter 'patchAppClientId' when calling appClientsAppClientIdPatch");
      }

      let pathParams = {
        'appClientId': appClientId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppClient;
      return this.apiClient.callApi(
        '/appClients/{appClientId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appClientsGet operation.
     * @callback module:api/DefaultApi~appClientsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppClients} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [nextToken] 
     * @param {String} [maxResults] 
     * @param {module:api/DefaultApi~appClientsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppClients}
     */
    appClientsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppClients;
      return this.apiClient.callApi(
        '/appClients', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appClientsOptions operation.
     * @callback module:api/DefaultApi~appClientsOptionsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~appClientsOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    appClientsOptions(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling appClientsOptions");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/appClients', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appClientsPost operation.
     * @callback module:api/DefaultApi~appClientsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppClient} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} contentType 
     * @param {module:model/PostAppClients} postAppClients 
     * @param {module:api/DefaultApi~appClientsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppClient}
     */
    appClientsPost(contentType, postAppClients, callback) {
      let postBody = postAppClients;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling appClientsPost");
      }
      // verify the required parameter 'postAppClients' is set
      if (postAppClients === undefined || postAppClients === null) {
        throw new Error("Missing the required parameter 'postAppClients' when calling appClientsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppClient;
      return this.apiClient.callApi(
        '/appClients', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assetsAssetIdDelete operation.
     * @callback module:api/DefaultApi~assetsAssetIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Asset} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} assetId 
     * @param {module:api/DefaultApi~assetsAssetIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Asset}
     */
    assetsAssetIdDelete(assetId, callback) {
      let postBody = null;
      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling assetsAssetIdDelete");
      }

      let pathParams = {
        'assetId': assetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Asset;
      return this.apiClient.callApi(
        '/assets/{assetId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assetsAssetIdGet operation.
     * @callback module:api/DefaultApi~assetsAssetIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Asset} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} assetId 
     * @param {module:api/DefaultApi~assetsAssetIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Asset}
     */
    assetsAssetIdGet(assetId, callback) {
      let postBody = null;
      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling assetsAssetIdGet");
      }

      let pathParams = {
        'assetId': assetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Asset;
      return this.apiClient.callApi(
        '/assets/{assetId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assetsAssetIdOptions operation.
     * @callback module:api/DefaultApi~assetsAssetIdOptionsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} assetId 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~assetsAssetIdOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    assetsAssetIdOptions(assetId, body, callback) {
      let postBody = body;
      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling assetsAssetIdOptions");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling assetsAssetIdOptions");
      }

      let pathParams = {
        'assetId': assetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/assets/{assetId}', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assetsAssetIdPatch operation.
     * @callback module:api/DefaultApi~assetsAssetIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Asset} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} contentType 
     * @param {String} assetId 
     * @param {module:model/PatchAssetId} patchAssetId 
     * @param {module:api/DefaultApi~assetsAssetIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Asset}
     */
    assetsAssetIdPatch(contentType, assetId, patchAssetId, callback) {
      let postBody = patchAssetId;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling assetsAssetIdPatch");
      }
      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling assetsAssetIdPatch");
      }
      // verify the required parameter 'patchAssetId' is set
      if (patchAssetId === undefined || patchAssetId === null) {
        throw new Error("Missing the required parameter 'patchAssetId' when calling assetsAssetIdPatch");
      }

      let pathParams = {
        'assetId': assetId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Asset;
      return this.apiClient.callApi(
        '/assets/{assetId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assetsGet operation.
     * @callback module:api/DefaultApi~assetsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Assets} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [nextToken] 
     * @param {String} [maxResults] 
     * @param {module:api/DefaultApi~assetsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Assets}
     */
    assetsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Assets;
      return this.apiClient.callApi(
        '/assets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assetsOptions operation.
     * @callback module:api/DefaultApi~assetsOptionsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~assetsOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    assetsOptions(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling assetsOptions");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/assets', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assetsPost operation.
     * @callback module:api/DefaultApi~assetsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Asset} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} contentType 
     * @param {module:model/PostAssets} postAssets 
     * @param {module:api/DefaultApi~assetsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Asset}
     */
    assetsPost(contentType, postAssets, callback) {
      let postBody = postAssets;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling assetsPost");
      }
      // verify the required parameter 'postAssets' is set
      if (postAssets === undefined || postAssets === null) {
        throw new Error("Missing the required parameter 'postAssets' when calling assetsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Asset;
      return this.apiClient.callApi(
        '/assets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the datasetsDatasetIdDelete operation.
     * @callback module:api/DefaultApi~datasetsDatasetIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Dataset} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} datasetId 
     * @param {module:api/DefaultApi~datasetsDatasetIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Dataset}
     */
    datasetsDatasetIdDelete(datasetId, callback) {
      let postBody = null;
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling datasetsDatasetIdDelete");
      }

      let pathParams = {
        'datasetId': datasetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Dataset;
      return this.apiClient.callApi(
        '/datasets/{datasetId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the datasetsDatasetIdGet operation.
     * @callback module:api/DefaultApi~datasetsDatasetIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Dataset} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} datasetId 
     * @param {module:api/DefaultApi~datasetsDatasetIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Dataset}
     */
    datasetsDatasetIdGet(datasetId, callback) {
      let postBody = null;
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling datasetsDatasetIdGet");
      }

      let pathParams = {
        'datasetId': datasetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Dataset;
      return this.apiClient.callApi(
        '/datasets/{datasetId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the datasetsDatasetIdOptions operation.
     * @callback module:api/DefaultApi~datasetsDatasetIdOptionsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} datasetId 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~datasetsDatasetIdOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    datasetsDatasetIdOptions(datasetId, body, callback) {
      let postBody = body;
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling datasetsDatasetIdOptions");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling datasetsDatasetIdOptions");
      }

      let pathParams = {
        'datasetId': datasetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/datasets/{datasetId}', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the datasetsDatasetIdPatch operation.
     * @callback module:api/DefaultApi~datasetsDatasetIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Dataset} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} contentType 
     * @param {String} datasetId 
     * @param {module:model/PatchDatasetId} patchDatasetId 
     * @param {module:api/DefaultApi~datasetsDatasetIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Dataset}
     */
    datasetsDatasetIdPatch(contentType, datasetId, patchDatasetId, callback) {
      let postBody = patchDatasetId;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling datasetsDatasetIdPatch");
      }
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling datasetsDatasetIdPatch");
      }
      // verify the required parameter 'patchDatasetId' is set
      if (patchDatasetId === undefined || patchDatasetId === null) {
        throw new Error("Missing the required parameter 'patchDatasetId' when calling datasetsDatasetIdPatch");
      }

      let pathParams = {
        'datasetId': datasetId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Dataset;
      return this.apiClient.callApi(
        '/datasets/{datasetId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the datasetsGet operation.
     * @callback module:api/DefaultApi~datasetsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Datasets} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [nextToken] 
     * @param {String} [maxResults] 
     * @param {module:api/DefaultApi~datasetsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Datasets}
     */
    datasetsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Datasets;
      return this.apiClient.callApi(
        '/datasets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the datasetsOptions operation.
     * @callback module:api/DefaultApi~datasetsOptionsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~datasetsOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    datasetsOptions(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling datasetsOptions");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/datasets', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the datasetsPost operation.
     * @callback module:api/DefaultApi~datasetsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Dataset} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} contentType 
     * @param {module:model/PostDatasets} postDatasets 
     * @param {module:api/DefaultApi~datasetsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Dataset}
     */
    datasetsPost(contentType, postDatasets, callback) {
      let postBody = postDatasets;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling datasetsPost");
      }
      // verify the required parameter 'postDatasets' is set
      if (postDatasets === undefined || postDatasets === null) {
        throw new Error("Missing the required parameter 'postDatasets' when calling datasetsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Dataset;
      return this.apiClient.callApi(
        '/datasets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deploymentEnvironmentsDeploymentEnvironmentIdGet operation.
     * @callback module:api/DefaultApi~deploymentEnvironmentsDeploymentEnvironmentIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeploymentEnvironment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} deploymentEnvironmentId 
     * @param {module:api/DefaultApi~deploymentEnvironmentsDeploymentEnvironmentIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeploymentEnvironment}
     */
    deploymentEnvironmentsDeploymentEnvironmentIdGet(deploymentEnvironmentId, callback) {
      let postBody = null;
      // verify the required parameter 'deploymentEnvironmentId' is set
      if (deploymentEnvironmentId === undefined || deploymentEnvironmentId === null) {
        throw new Error("Missing the required parameter 'deploymentEnvironmentId' when calling deploymentEnvironmentsDeploymentEnvironmentIdGet");
      }

      let pathParams = {
        'deploymentEnvironmentId': deploymentEnvironmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeploymentEnvironment;
      return this.apiClient.callApi(
        '/deploymentEnvironments/{deploymentEnvironmentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deploymentEnvironmentsDeploymentEnvironmentIdOptions operation.
     * @callback module:api/DefaultApi~deploymentEnvironmentsDeploymentEnvironmentIdOptionsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} deploymentEnvironmentId 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~deploymentEnvironmentsDeploymentEnvironmentIdOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deploymentEnvironmentsDeploymentEnvironmentIdOptions(deploymentEnvironmentId, body, callback) {
      let postBody = body;
      // verify the required parameter 'deploymentEnvironmentId' is set
      if (deploymentEnvironmentId === undefined || deploymentEnvironmentId === null) {
        throw new Error("Missing the required parameter 'deploymentEnvironmentId' when calling deploymentEnvironmentsDeploymentEnvironmentIdOptions");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deploymentEnvironmentsDeploymentEnvironmentIdOptions");
      }

      let pathParams = {
        'deploymentEnvironmentId': deploymentEnvironmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/deploymentEnvironments/{deploymentEnvironmentId}', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deploymentEnvironmentsGet operation.
     * @callback module:api/DefaultApi~deploymentEnvironmentsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeploymentEnvironments} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [owner] 
     * @param {String} [nextToken] 
     * @param {String} [maxResults] 
     * @param {module:api/DefaultApi~deploymentEnvironmentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeploymentEnvironments}
     */
    deploymentEnvironmentsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'owner': opts['owner'],
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeploymentEnvironments;
      return this.apiClient.callApi(
        '/deploymentEnvironments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deploymentEnvironmentsOptions operation.
     * @callback module:api/DefaultApi~deploymentEnvironmentsOptionsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~deploymentEnvironmentsOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deploymentEnvironmentsOptions(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deploymentEnvironmentsOptions");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/deploymentEnvironments', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the documentsDelete operation.
     * @callback module:api/DefaultApi~documentsDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Documents} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [consentId] 
     * @param {String} [datasetId] 
     * @param {String} [nextToken] 
     * @param {String} [maxResults] 
     * @param {module:api/DefaultApi~documentsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Documents}
     */
    documentsDelete(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'consentId': opts['consentId'],
        'datasetId': opts['datasetId'],
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Documents;
      return this.apiClient.callApi(
        '/documents', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the documentsDocumentIdDelete operation.
     * @callback module:api/DefaultApi~documentsDocumentIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Document} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} documentId 
     * @param {module:api/DefaultApi~documentsDocumentIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Document}
     */
    documentsDocumentIdDelete(documentId, callback) {
      let postBody = null;
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling documentsDocumentIdDelete");
      }

      let pathParams = {
        'documentId': documentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Document;
      return this.apiClient.callApi(
        '/documents/{documentId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the documentsDocumentIdGet operation.
     * @callback module:api/DefaultApi~documentsDocumentIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Document} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} documentId 
     * @param {module:api/DefaultApi~documentsDocumentIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Document}
     */
    documentsDocumentIdGet(documentId, callback) {
      let postBody = null;
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling documentsDocumentIdGet");
      }

      let pathParams = {
        'documentId': documentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Document;
      return this.apiClient.callApi(
        '/documents/{documentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the documentsDocumentIdOptions operation.
     * @callback module:api/DefaultApi~documentsDocumentIdOptionsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} documentId 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~documentsDocumentIdOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    documentsDocumentIdOptions(documentId, body, callback) {
      let postBody = body;
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling documentsDocumentIdOptions");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling documentsDocumentIdOptions");
      }

      let pathParams = {
        'documentId': documentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/documents/{documentId}', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the documentsDocumentIdPatch operation.
     * @callback module:api/DefaultApi~documentsDocumentIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Document} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} contentType 
     * @param {String} documentId 
     * @param {module:model/PatchDocumentId} patchDocumentId 
     * @param {module:api/DefaultApi~documentsDocumentIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Document}
     */
    documentsDocumentIdPatch(contentType, documentId, patchDocumentId, callback) {
      let postBody = patchDocumentId;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling documentsDocumentIdPatch");
      }
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling documentsDocumentIdPatch");
      }
      // verify the required parameter 'patchDocumentId' is set
      if (patchDocumentId === undefined || patchDocumentId === null) {
        throw new Error("Missing the required parameter 'patchDocumentId' when calling documentsDocumentIdPatch");
      }

      let pathParams = {
        'documentId': documentId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Document;
      return this.apiClient.callApi(
        '/documents/{documentId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the documentsGet operation.
     * @callback module:api/DefaultApi~documentsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Documents} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [datasetId] 
     * @param {String} [nextToken] 
     * @param {String} [order] 
     * @param {String} [documentId] 
     * @param {String} [consentId] 
     * @param {String} [maxResults] 
     * @param {String} [sortBy] 
     * @param {module:api/DefaultApi~documentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Documents}
     */
    documentsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'datasetId': opts['datasetId'],
        'nextToken': opts['nextToken'],
        'order': opts['order'],
        'documentId': opts['documentId'],
        'consentId': opts['consentId'],
        'maxResults': opts['maxResults'],
        'sortBy': opts['sortBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Documents;
      return this.apiClient.callApi(
        '/documents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the documentsOptions operation.
     * @callback module:api/DefaultApi~documentsOptionsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~documentsOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    documentsOptions(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling documentsOptions");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/documents', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the documentsPost operation.
     * @callback module:api/DefaultApi~documentsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Document} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} contentType 
     * @param {module:model/PostDocuments} postDocuments 
     * @param {module:api/DefaultApi~documentsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Document}
     */
    documentsPost(contentType, postDocuments, callback) {
      let postBody = postDocuments;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling documentsPost");
      }
      // verify the required parameter 'postDocuments' is set
      if (postDocuments === undefined || postDocuments === null) {
        throw new Error("Missing the required parameter 'postDocuments' when calling documentsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Document;
      return this.apiClient.callApi(
        '/documents', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the logsGet operation.
     * @callback module:api/DefaultApi~logsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Logs} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [workflowId] 
     * @param {String} [nextToken] 
     * @param {String} [order] 
     * @param {String} [transitionExecutionId] 
     * @param {String} [transitionId] 
     * @param {String} [maxResults] 
     * @param {String} [workflowExecutionId] 
     * @param {module:api/DefaultApi~logsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Logs}
     */
    logsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'workflowId': opts['workflowId'],
        'nextToken': opts['nextToken'],
        'order': opts['order'],
        'transitionExecutionId': opts['transitionExecutionId'],
        'transitionId': opts['transitionId'],
        'maxResults': opts['maxResults'],
        'workflowExecutionId': opts['workflowExecutionId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Logs;
      return this.apiClient.callApi(
        '/logs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the logsLogIdGet operation.
     * @callback module:api/DefaultApi~logsLogIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Log} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} logId 
     * @param {module:api/DefaultApi~logsLogIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Log}
     */
    logsLogIdGet(logId, callback) {
      let postBody = null;
      // verify the required parameter 'logId' is set
      if (logId === undefined || logId === null) {
        throw new Error("Missing the required parameter 'logId' when calling logsLogIdGet");
      }

      let pathParams = {
        'logId': logId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Log;
      return this.apiClient.callApi(
        '/logs/{logId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the logsLogIdOptions operation.
     * @callback module:api/DefaultApi~logsLogIdOptionsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} logId 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~logsLogIdOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    logsLogIdOptions(logId, body, callback) {
      let postBody = body;
      // verify the required parameter 'logId' is set
      if (logId === undefined || logId === null) {
        throw new Error("Missing the required parameter 'logId' when calling logsLogIdOptions");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling logsLogIdOptions");
      }

      let pathParams = {
        'logId': logId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/logs/{logId}', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the logsOptions operation.
     * @callback module:api/DefaultApi~logsOptionsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~logsOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    logsOptions(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling logsOptions");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/logs', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelsGet operation.
     * @callback module:api/DefaultApi~modelsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Models} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [owner] 
     * @param {String} [nextToken] 
     * @param {String} [maxResults] 
     * @param {module:api/DefaultApi~modelsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Models}
     */
    modelsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'owner': opts['owner'],
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Models;
      return this.apiClient.callApi(
        '/models', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelsModelIdDataBundlesDataBundleIdDelete operation.
     * @callback module:api/DefaultApi~modelsModelIdDataBundlesDataBundleIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataBundle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} dataBundleId 
     * @param {String} modelId 
     * @param {module:api/DefaultApi~modelsModelIdDataBundlesDataBundleIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataBundle}
     */
    modelsModelIdDataBundlesDataBundleIdDelete(dataBundleId, modelId, callback) {
      let postBody = null;
      // verify the required parameter 'dataBundleId' is set
      if (dataBundleId === undefined || dataBundleId === null) {
        throw new Error("Missing the required parameter 'dataBundleId' when calling modelsModelIdDataBundlesDataBundleIdDelete");
      }
      // verify the required parameter 'modelId' is set
      if (modelId === undefined || modelId === null) {
        throw new Error("Missing the required parameter 'modelId' when calling modelsModelIdDataBundlesDataBundleIdDelete");
      }

      let pathParams = {
        'dataBundleId': dataBundleId,
        'modelId': modelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DataBundle;
      return this.apiClient.callApi(
        '/models/{modelId}/dataBundles/{dataBundleId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelsModelIdDataBundlesDataBundleIdOptions operation.
     * @callback module:api/DefaultApi~modelsModelIdDataBundlesDataBundleIdOptionsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} dataBundleId 
     * @param {String} modelId 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~modelsModelIdDataBundlesDataBundleIdOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    modelsModelIdDataBundlesDataBundleIdOptions(dataBundleId, modelId, body, callback) {
      let postBody = body;
      // verify the required parameter 'dataBundleId' is set
      if (dataBundleId === undefined || dataBundleId === null) {
        throw new Error("Missing the required parameter 'dataBundleId' when calling modelsModelIdDataBundlesDataBundleIdOptions");
      }
      // verify the required parameter 'modelId' is set
      if (modelId === undefined || modelId === null) {
        throw new Error("Missing the required parameter 'modelId' when calling modelsModelIdDataBundlesDataBundleIdOptions");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling modelsModelIdDataBundlesDataBundleIdOptions");
      }

      let pathParams = {
        'dataBundleId': dataBundleId,
        'modelId': modelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/models/{modelId}/dataBundles/{dataBundleId}', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelsModelIdDataBundlesDataBundleIdPatch operation.
     * @callback module:api/DefaultApi~modelsModelIdDataBundlesDataBundleIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataBundle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} dataBundleId 
     * @param {String} contentType 
     * @param {String} modelId 
     * @param {module:model/PatchDataBundleId} patchDataBundleId 
     * @param {module:api/DefaultApi~modelsModelIdDataBundlesDataBundleIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataBundle}
     */
    modelsModelIdDataBundlesDataBundleIdPatch(dataBundleId, contentType, modelId, patchDataBundleId, callback) {
      let postBody = patchDataBundleId;
      // verify the required parameter 'dataBundleId' is set
      if (dataBundleId === undefined || dataBundleId === null) {
        throw new Error("Missing the required parameter 'dataBundleId' when calling modelsModelIdDataBundlesDataBundleIdPatch");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling modelsModelIdDataBundlesDataBundleIdPatch");
      }
      // verify the required parameter 'modelId' is set
      if (modelId === undefined || modelId === null) {
        throw new Error("Missing the required parameter 'modelId' when calling modelsModelIdDataBundlesDataBundleIdPatch");
      }
      // verify the required parameter 'patchDataBundleId' is set
      if (patchDataBundleId === undefined || patchDataBundleId === null) {
        throw new Error("Missing the required parameter 'patchDataBundleId' when calling modelsModelIdDataBundlesDataBundleIdPatch");
      }

      let pathParams = {
        'dataBundleId': dataBundleId,
        'modelId': modelId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DataBundle;
      return this.apiClient.callApi(
        '/models/{modelId}/dataBundles/{dataBundleId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelsModelIdDataBundlesGet operation.
     * @callback module:api/DefaultApi~modelsModelIdDataBundlesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataBundles} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} modelId 
     * @param {Object} opts Optional parameters
     * @param {String} [status] 
     * @param {String} [nextToken] 
     * @param {String} [maxResults] 
     * @param {module:api/DefaultApi~modelsModelIdDataBundlesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataBundles}
     */
    modelsModelIdDataBundlesGet(modelId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'modelId' is set
      if (modelId === undefined || modelId === null) {
        throw new Error("Missing the required parameter 'modelId' when calling modelsModelIdDataBundlesGet");
      }

      let pathParams = {
        'modelId': modelId
      };
      let queryParams = {
        'status': opts['status'],
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DataBundles;
      return this.apiClient.callApi(
        '/models/{modelId}/dataBundles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelsModelIdDataBundlesOptions operation.
     * @callback module:api/DefaultApi~modelsModelIdDataBundlesOptionsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} modelId 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~modelsModelIdDataBundlesOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    modelsModelIdDataBundlesOptions(modelId, body, callback) {
      let postBody = body;
      // verify the required parameter 'modelId' is set
      if (modelId === undefined || modelId === null) {
        throw new Error("Missing the required parameter 'modelId' when calling modelsModelIdDataBundlesOptions");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling modelsModelIdDataBundlesOptions");
      }

      let pathParams = {
        'modelId': modelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/models/{modelId}/dataBundles', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelsModelIdDataBundlesPost operation.
     * @callback module:api/DefaultApi~modelsModelIdDataBundlesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataBundle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} contentType 
     * @param {String} modelId 
     * @param {module:model/PostDataBundles} postDataBundles 
     * @param {module:api/DefaultApi~modelsModelIdDataBundlesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataBundle}
     */
    modelsModelIdDataBundlesPost(contentType, modelId, postDataBundles, callback) {
      let postBody = postDataBundles;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling modelsModelIdDataBundlesPost");
      }
      // verify the required parameter 'modelId' is set
      if (modelId === undefined || modelId === null) {
        throw new Error("Missing the required parameter 'modelId' when calling modelsModelIdDataBundlesPost");
      }
      // verify the required parameter 'postDataBundles' is set
      if (postDataBundles === undefined || postDataBundles === null) {
        throw new Error("Missing the required parameter 'postDataBundles' when calling modelsModelIdDataBundlesPost");
      }

      let pathParams = {
        'modelId': modelId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DataBundle;
      return this.apiClient.callApi(
        '/models/{modelId}/dataBundles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelsModelIdDelete operation.
     * @callback module:api/DefaultApi~modelsModelIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} modelId 
     * @param {module:api/DefaultApi~modelsModelIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model}
     */
    modelsModelIdDelete(modelId, callback) {
      let postBody = null;
      // verify the required parameter 'modelId' is set
      if (modelId === undefined || modelId === null) {
        throw new Error("Missing the required parameter 'modelId' when calling modelsModelIdDelete");
      }

      let pathParams = {
        'modelId': modelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model;
      return this.apiClient.callApi(
        '/models/{modelId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelsModelIdGet operation.
     * @callback module:api/DefaultApi~modelsModelIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} modelId 
     * @param {module:api/DefaultApi~modelsModelIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model}
     */
    modelsModelIdGet(modelId, callback) {
      let postBody = null;
      // verify the required parameter 'modelId' is set
      if (modelId === undefined || modelId === null) {
        throw new Error("Missing the required parameter 'modelId' when calling modelsModelIdGet");
      }

      let pathParams = {
        'modelId': modelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model;
      return this.apiClient.callApi(
        '/models/{modelId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelsModelIdOptions operation.
     * @callback module:api/DefaultApi~modelsModelIdOptionsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} modelId 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~modelsModelIdOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    modelsModelIdOptions(modelId, body, callback) {
      let postBody = body;
      // verify the required parameter 'modelId' is set
      if (modelId === undefined || modelId === null) {
        throw new Error("Missing the required parameter 'modelId' when calling modelsModelIdOptions");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling modelsModelIdOptions");
      }

      let pathParams = {
        'modelId': modelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/models/{modelId}', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelsModelIdPatch operation.
     * @callback module:api/DefaultApi~modelsModelIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} contentType 
     * @param {String} modelId 
     * @param {module:model/PatchModelId} patchModelId 
     * @param {module:api/DefaultApi~modelsModelIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model}
     */
    modelsModelIdPatch(contentType, modelId, patchModelId, callback) {
      let postBody = patchModelId;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling modelsModelIdPatch");
      }
      // verify the required parameter 'modelId' is set
      if (modelId === undefined || modelId === null) {
        throw new Error("Missing the required parameter 'modelId' when calling modelsModelIdPatch");
      }
      // verify the required parameter 'patchModelId' is set
      if (patchModelId === undefined || patchModelId === null) {
        throw new Error("Missing the required parameter 'patchModelId' when calling modelsModelIdPatch");
      }

      let pathParams = {
        'modelId': modelId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Model;
      return this.apiClient.callApi(
        '/models/{modelId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelsModelIdTrainingsGet operation.
     * @callback module:api/DefaultApi~modelsModelIdTrainingsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Trainings} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} modelId 
     * @param {Object} opts Optional parameters
     * @param {String} [status] 
     * @param {String} [nextToken] 
     * @param {String} [maxResults] 
     * @param {module:api/DefaultApi~modelsModelIdTrainingsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Trainings}
     */
    modelsModelIdTrainingsGet(modelId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'modelId' is set
      if (modelId === undefined || modelId === null) {
        throw new Error("Missing the required parameter 'modelId' when calling modelsModelIdTrainingsGet");
      }

      let pathParams = {
        'modelId': modelId
      };
      let queryParams = {
        'status': opts['status'],
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Trainings;
      return this.apiClient.callApi(
        '/models/{modelId}/trainings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelsModelIdTrainingsOptions operation.
     * @callback module:api/DefaultApi~modelsModelIdTrainingsOptionsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} modelId 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~modelsModelIdTrainingsOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    modelsModelIdTrainingsOptions(modelId, body, callback) {
      let postBody = body;
      // verify the required parameter 'modelId' is set
      if (modelId === undefined || modelId === null) {
        throw new Error("Missing the required parameter 'modelId' when calling modelsModelIdTrainingsOptions");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling modelsModelIdTrainingsOptions");
      }

      let pathParams = {
        'modelId': modelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/models/{modelId}/trainings', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelsModelIdTrainingsPost operation.
     * @callback module:api/DefaultApi~modelsModelIdTrainingsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Training} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} contentType 
     * @param {String} modelId 
     * @param {module:model/PostTrainings} postTrainings 
     * @param {module:api/DefaultApi~modelsModelIdTrainingsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Training}
     */
    modelsModelIdTrainingsPost(contentType, modelId, postTrainings, callback) {
      let postBody = postTrainings;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling modelsModelIdTrainingsPost");
      }
      // verify the required parameter 'modelId' is set
      if (modelId === undefined || modelId === null) {
        throw new Error("Missing the required parameter 'modelId' when calling modelsModelIdTrainingsPost");
      }
      // verify the required parameter 'postTrainings' is set
      if (postTrainings === undefined || postTrainings === null) {
        throw new Error("Missing the required parameter 'postTrainings' when calling modelsModelIdTrainingsPost");
      }

      let pathParams = {
        'modelId': modelId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Training;
      return this.apiClient.callApi(
        '/models/{modelId}/trainings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelsModelIdTrainingsTrainingIdOptions operation.
     * @callback module:api/DefaultApi~modelsModelIdTrainingsTrainingIdOptionsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} modelId 
     * @param {String} trainingId 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~modelsModelIdTrainingsTrainingIdOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    modelsModelIdTrainingsTrainingIdOptions(modelId, trainingId, body, callback) {
      let postBody = body;
      // verify the required parameter 'modelId' is set
      if (modelId === undefined || modelId === null) {
        throw new Error("Missing the required parameter 'modelId' when calling modelsModelIdTrainingsTrainingIdOptions");
      }
      // verify the required parameter 'trainingId' is set
      if (trainingId === undefined || trainingId === null) {
        throw new Error("Missing the required parameter 'trainingId' when calling modelsModelIdTrainingsTrainingIdOptions");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling modelsModelIdTrainingsTrainingIdOptions");
      }

      let pathParams = {
        'modelId': modelId,
        'trainingId': trainingId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/models/{modelId}/trainings/{trainingId}', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelsModelIdTrainingsTrainingIdPatch operation.
     * @callback module:api/DefaultApi~modelsModelIdTrainingsTrainingIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Training} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} contentType 
     * @param {String} modelId 
     * @param {String} trainingId 
     * @param {module:model/PatchTrainingId} patchTrainingId 
     * @param {module:api/DefaultApi~modelsModelIdTrainingsTrainingIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Training}
     */
    modelsModelIdTrainingsTrainingIdPatch(contentType, modelId, trainingId, patchTrainingId, callback) {
      let postBody = patchTrainingId;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling modelsModelIdTrainingsTrainingIdPatch");
      }
      // verify the required parameter 'modelId' is set
      if (modelId === undefined || modelId === null) {
        throw new Error("Missing the required parameter 'modelId' when calling modelsModelIdTrainingsTrainingIdPatch");
      }
      // verify the required parameter 'trainingId' is set
      if (trainingId === undefined || trainingId === null) {
        throw new Error("Missing the required parameter 'trainingId' when calling modelsModelIdTrainingsTrainingIdPatch");
      }
      // verify the required parameter 'patchTrainingId' is set
      if (patchTrainingId === undefined || patchTrainingId === null) {
        throw new Error("Missing the required parameter 'patchTrainingId' when calling modelsModelIdTrainingsTrainingIdPatch");
      }

      let pathParams = {
        'modelId': modelId,
        'trainingId': trainingId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Training;
      return this.apiClient.callApi(
        '/models/{modelId}/trainings/{trainingId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelsOptions operation.
     * @callback module:api/DefaultApi~modelsOptionsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~modelsOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    modelsOptions(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling modelsOptions");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/models', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelsPost operation.
     * @callback module:api/DefaultApi~modelsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} contentType 
     * @param {module:model/PostModels} postModels 
     * @param {module:api/DefaultApi~modelsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model}
     */
    modelsPost(contentType, postModels, callback) {
      let postBody = postModels;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling modelsPost");
      }
      // verify the required parameter 'postModels' is set
      if (postModels === undefined || postModels === null) {
        throw new Error("Missing the required parameter 'postModels' when calling modelsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Model;
      return this.apiClient.callApi(
        '/models', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organizationsGet operation.
     * @callback module:api/DefaultApi~organizationsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Organizations} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [nextToken] 
     * @param {String} [maxResults] 
     * @param {module:api/DefaultApi~organizationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Organizations}
     */
    organizationsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Organizations;
      return this.apiClient.callApi(
        '/organizations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organizationsOptions operation.
     * @callback module:api/DefaultApi~organizationsOptionsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~organizationsOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    organizationsOptions(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling organizationsOptions");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organizationsOrganizationIdGet operation.
     * @callback module:api/DefaultApi~organizationsOrganizationIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Organization} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} organizationId 
     * @param {module:api/DefaultApi~organizationsOrganizationIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Organization}
     */
    organizationsOrganizationIdGet(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling organizationsOrganizationIdGet");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Organization;
      return this.apiClient.callApi(
        '/organizations/{organizationId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organizationsOrganizationIdOptions operation.
     * @callback module:api/DefaultApi~organizationsOrganizationIdOptionsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} organizationId 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~organizationsOrganizationIdOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    organizationsOrganizationIdOptions(organizationId, body, callback) {
      let postBody = body;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling organizationsOrganizationIdOptions");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling organizationsOrganizationIdOptions");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organizations/{organizationId}', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organizationsOrganizationIdPatch operation.
     * @callback module:api/DefaultApi~organizationsOrganizationIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Organization} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} contentType 
     * @param {String} organizationId 
     * @param {module:model/PatchOrganizationId} patchOrganizationId 
     * @param {module:api/DefaultApi~organizationsOrganizationIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Organization}
     */
    organizationsOrganizationIdPatch(contentType, organizationId, patchOrganizationId, callback) {
      let postBody = patchOrganizationId;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling organizationsOrganizationIdPatch");
      }
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling organizationsOrganizationIdPatch");
      }
      // verify the required parameter 'patchOrganizationId' is set
      if (patchOrganizationId === undefined || patchOrganizationId === null) {
        throw new Error("Missing the required parameter 'patchOrganizationId' when calling organizationsOrganizationIdPatch");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Organization;
      return this.apiClient.callApi(
        '/organizations/{organizationId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organizationsPost operation.
     * @callback module:api/DefaultApi~organizationsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Organization} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} contentType 
     * @param {module:model/PostOrganizations} postOrganizations 
     * @param {module:api/DefaultApi~organizationsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Organization}
     */
    organizationsPost(contentType, postOrganizations, callback) {
      let postBody = postOrganizations;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling organizationsPost");
      }
      // verify the required parameter 'postOrganizations' is set
      if (postOrganizations === undefined || postOrganizations === null) {
        throw new Error("Missing the required parameter 'postOrganizations' when calling organizationsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Organization;
      return this.apiClient.callApi(
        '/organizations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentMethodsGet operation.
     * @callback module:api/DefaultApi~paymentMethodsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaymentMethods} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [nextToken] 
     * @param {String} [maxResults] 
     * @param {module:api/DefaultApi~paymentMethodsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaymentMethods}
     */
    paymentMethodsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaymentMethods;
      return this.apiClient.callApi(
        '/paymentMethods', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentMethodsOptions operation.
     * @callback module:api/DefaultApi~paymentMethodsOptionsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~paymentMethodsOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    paymentMethodsOptions(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling paymentMethodsOptions");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/paymentMethods', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentMethodsPaymentMethodIdDelete operation.
     * @callback module:api/DefaultApi~paymentMethodsPaymentMethodIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaymentMethod} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} paymentMethodId 
     * @param {module:api/DefaultApi~paymentMethodsPaymentMethodIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaymentMethod}
     */
    paymentMethodsPaymentMethodIdDelete(paymentMethodId, callback) {
      let postBody = null;
      // verify the required parameter 'paymentMethodId' is set
      if (paymentMethodId === undefined || paymentMethodId === null) {
        throw new Error("Missing the required parameter 'paymentMethodId' when calling paymentMethodsPaymentMethodIdDelete");
      }

      let pathParams = {
        'paymentMethodId': paymentMethodId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaymentMethod;
      return this.apiClient.callApi(
        '/paymentMethods/{paymentMethodId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentMethodsPaymentMethodIdGet operation.
     * @callback module:api/DefaultApi~paymentMethodsPaymentMethodIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaymentMethod} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} paymentMethodId 
     * @param {module:api/DefaultApi~paymentMethodsPaymentMethodIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaymentMethod}
     */
    paymentMethodsPaymentMethodIdGet(paymentMethodId, callback) {
      let postBody = null;
      // verify the required parameter 'paymentMethodId' is set
      if (paymentMethodId === undefined || paymentMethodId === null) {
        throw new Error("Missing the required parameter 'paymentMethodId' when calling paymentMethodsPaymentMethodIdGet");
      }

      let pathParams = {
        'paymentMethodId': paymentMethodId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaymentMethod;
      return this.apiClient.callApi(
        '/paymentMethods/{paymentMethodId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentMethodsPaymentMethodIdOptions operation.
     * @callback module:api/DefaultApi~paymentMethodsPaymentMethodIdOptionsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} paymentMethodId 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~paymentMethodsPaymentMethodIdOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    paymentMethodsPaymentMethodIdOptions(paymentMethodId, body, callback) {
      let postBody = body;
      // verify the required parameter 'paymentMethodId' is set
      if (paymentMethodId === undefined || paymentMethodId === null) {
        throw new Error("Missing the required parameter 'paymentMethodId' when calling paymentMethodsPaymentMethodIdOptions");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling paymentMethodsPaymentMethodIdOptions");
      }

      let pathParams = {
        'paymentMethodId': paymentMethodId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/paymentMethods/{paymentMethodId}', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentMethodsPaymentMethodIdPatch operation.
     * @callback module:api/DefaultApi~paymentMethodsPaymentMethodIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaymentMethod} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} contentType 
     * @param {String} paymentMethodId 
     * @param {module:model/PatchPaymentMethodId} patchPaymentMethodId 
     * @param {module:api/DefaultApi~paymentMethodsPaymentMethodIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaymentMethod}
     */
    paymentMethodsPaymentMethodIdPatch(contentType, paymentMethodId, patchPaymentMethodId, callback) {
      let postBody = patchPaymentMethodId;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling paymentMethodsPaymentMethodIdPatch");
      }
      // verify the required parameter 'paymentMethodId' is set
      if (paymentMethodId === undefined || paymentMethodId === null) {
        throw new Error("Missing the required parameter 'paymentMethodId' when calling paymentMethodsPaymentMethodIdPatch");
      }
      // verify the required parameter 'patchPaymentMethodId' is set
      if (patchPaymentMethodId === undefined || patchPaymentMethodId === null) {
        throw new Error("Missing the required parameter 'patchPaymentMethodId' when calling paymentMethodsPaymentMethodIdPatch");
      }

      let pathParams = {
        'paymentMethodId': paymentMethodId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PaymentMethod;
      return this.apiClient.callApi(
        '/paymentMethods/{paymentMethodId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentMethodsPost operation.
     * @callback module:api/DefaultApi~paymentMethodsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaymentMethod} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} contentType 
     * @param {module:model/PostPaymentMethods} postPaymentMethods 
     * @param {module:api/DefaultApi~paymentMethodsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaymentMethod}
     */
    paymentMethodsPost(contentType, postPaymentMethods, callback) {
      let postBody = postPaymentMethods;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling paymentMethodsPost");
      }
      // verify the required parameter 'postPaymentMethods' is set
      if (postPaymentMethods === undefined || postPaymentMethods === null) {
        throw new Error("Missing the required parameter 'postPaymentMethods' when calling paymentMethodsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PaymentMethod;
      return this.apiClient.callApi(
        '/paymentMethods', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the plansGet operation.
     * @callback module:api/DefaultApi~plansGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Plans} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [owner] 
     * @param {String} [nextToken] 
     * @param {String} [maxResults] 
     * @param {module:api/DefaultApi~plansGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Plans}
     */
    plansGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'owner': opts['owner'],
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Plans;
      return this.apiClient.callApi(
        '/plans', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the plansOptions operation.
     * @callback module:api/DefaultApi~plansOptionsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~plansOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    plansOptions(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling plansOptions");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/plans', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the plansPlanIdGet operation.
     * @callback module:api/DefaultApi~plansPlanIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Plan} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} planId 
     * @param {module:api/DefaultApi~plansPlanIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Plan}
     */
    plansPlanIdGet(planId, callback) {
      let postBody = null;
      // verify the required parameter 'planId' is set
      if (planId === undefined || planId === null) {
        throw new Error("Missing the required parameter 'planId' when calling plansPlanIdGet");
      }

      let pathParams = {
        'planId': planId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Plan;
      return this.apiClient.callApi(
        '/plans/{planId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the plansPlanIdOptions operation.
     * @callback module:api/DefaultApi~plansPlanIdOptionsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} planId 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~plansPlanIdOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    plansPlanIdOptions(planId, body, callback) {
      let postBody = body;
      // verify the required parameter 'planId' is set
      if (planId === undefined || planId === null) {
        throw new Error("Missing the required parameter 'planId' when calling plansPlanIdOptions");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling plansPlanIdOptions");
      }

      let pathParams = {
        'planId': planId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/plans/{planId}', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the predictionsGet operation.
     * @callback module:api/DefaultApi~predictionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Predictions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [nextToken] 
     * @param {String} [maxResults] 
     * @param {String} [sortBy] 
     * @param {String} [order] 
     * @param {module:api/DefaultApi~predictionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Predictions}
     */
    predictionsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults'],
        'sortBy': opts['sortBy'],
        'order': opts['order']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Predictions;
      return this.apiClient.callApi(
        '/predictions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the predictionsOptions operation.
     * @callback module:api/DefaultApi~predictionsOptionsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~predictionsOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    predictionsOptions(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling predictionsOptions");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/predictions', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the predictionsPost operation.
     * @callback module:api/DefaultApi~predictionsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Prediction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} contentType 
     * @param {module:model/PostPredictions} postPredictions 
     * @param {module:api/DefaultApi~predictionsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Prediction}
     */
    predictionsPost(contentType, postPredictions, callback) {
      let postBody = postPredictions;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling predictionsPost");
      }
      // verify the required parameter 'postPredictions' is set
      if (postPredictions === undefined || postPredictions === null) {
        throw new Error("Missing the required parameter 'postPredictions' when calling predictionsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Prediction;
      return this.apiClient.callApi(
        '/predictions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the profilesProfileIdGet operation.
     * @callback module:api/DefaultApi~profilesProfileIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Profile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} profileId 
     * @param {module:api/DefaultApi~profilesProfileIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Profile}
     */
    profilesProfileIdGet(profileId, callback) {
      let postBody = null;
      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling profilesProfileIdGet");
      }

      let pathParams = {
        'profileId': profileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Profile;
      return this.apiClient.callApi(
        '/profiles/{profileId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the profilesProfileIdOptions operation.
     * @callback module:api/DefaultApi~profilesProfileIdOptionsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} profileId 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~profilesProfileIdOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    profilesProfileIdOptions(profileId, body, callback) {
      let postBody = body;
      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling profilesProfileIdOptions");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling profilesProfileIdOptions");
      }

      let pathParams = {
        'profileId': profileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/profiles/{profileId}', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the profilesProfileIdPatch operation.
     * @callback module:api/DefaultApi~profilesProfileIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Profile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} profileId 
     * @param {module:api/DefaultApi~profilesProfileIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Profile}
     */
    profilesProfileIdPatch(profileId, callback) {
      let postBody = null;
      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling profilesProfileIdPatch");
      }

      let pathParams = {
        'profileId': profileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Profile;
      return this.apiClient.callApi(
        '/profiles/{profileId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the secretsGet operation.
     * @callback module:api/DefaultApi~secretsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Secrets} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [nextToken] 
     * @param {String} [maxResults] 
     * @param {module:api/DefaultApi~secretsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Secrets}
     */
    secretsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Secrets;
      return this.apiClient.callApi(
        '/secrets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the secretsOptions operation.
     * @callback module:api/DefaultApi~secretsOptionsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~secretsOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    secretsOptions(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling secretsOptions");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/secrets', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the secretsPost operation.
     * @callback module:api/DefaultApi~secretsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Secret} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} contentType 
     * @param {module:model/PostSecrets} postSecrets 
     * @param {module:api/DefaultApi~secretsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Secret}
     */
    secretsPost(contentType, postSecrets, callback) {
      let postBody = postSecrets;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling secretsPost");
      }
      // verify the required parameter 'postSecrets' is set
      if (postSecrets === undefined || postSecrets === null) {
        throw new Error("Missing the required parameter 'postSecrets' when calling secretsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Secret;
      return this.apiClient.callApi(
        '/secrets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the secretsSecretIdDelete operation.
     * @callback module:api/DefaultApi~secretsSecretIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Secret} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} secretId 
     * @param {module:api/DefaultApi~secretsSecretIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Secret}
     */
    secretsSecretIdDelete(secretId, callback) {
      let postBody = null;
      // verify the required parameter 'secretId' is set
      if (secretId === undefined || secretId === null) {
        throw new Error("Missing the required parameter 'secretId' when calling secretsSecretIdDelete");
      }

      let pathParams = {
        'secretId': secretId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Secret;
      return this.apiClient.callApi(
        '/secrets/{secretId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the secretsSecretIdOptions operation.
     * @callback module:api/DefaultApi~secretsSecretIdOptionsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} secretId 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~secretsSecretIdOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    secretsSecretIdOptions(secretId, body, callback) {
      let postBody = body;
      // verify the required parameter 'secretId' is set
      if (secretId === undefined || secretId === null) {
        throw new Error("Missing the required parameter 'secretId' when calling secretsSecretIdOptions");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling secretsSecretIdOptions");
      }

      let pathParams = {
        'secretId': secretId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/secrets/{secretId}', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the secretsSecretIdPatch operation.
     * @callback module:api/DefaultApi~secretsSecretIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Secret} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} contentType 
     * @param {String} secretId 
     * @param {module:model/PatchSecretId} patchSecretId 
     * @param {module:api/DefaultApi~secretsSecretIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Secret}
     */
    secretsSecretIdPatch(contentType, secretId, patchSecretId, callback) {
      let postBody = patchSecretId;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling secretsSecretIdPatch");
      }
      // verify the required parameter 'secretId' is set
      if (secretId === undefined || secretId === null) {
        throw new Error("Missing the required parameter 'secretId' when calling secretsSecretIdPatch");
      }
      // verify the required parameter 'patchSecretId' is set
      if (patchSecretId === undefined || patchSecretId === null) {
        throw new Error("Missing the required parameter 'patchSecretId' when calling secretsSecretIdPatch");
      }

      let pathParams = {
        'secretId': secretId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Secret;
      return this.apiClient.callApi(
        '/secrets/{secretId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transitionsGet operation.
     * @callback module:api/DefaultApi~transitionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Transitions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [transitionType] 
     * @param {String} [nextToken] 
     * @param {String} [maxResults] 
     * @param {module:api/DefaultApi~transitionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Transitions}
     */
    transitionsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'transitionType': opts['transitionType'],
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Transitions;
      return this.apiClient.callApi(
        '/transitions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transitionsOptions operation.
     * @callback module:api/DefaultApi~transitionsOptionsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~transitionsOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    transitionsOptions(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling transitionsOptions");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/transitions', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transitionsPost operation.
     * @callback module:api/DefaultApi~transitionsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Transition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} contentType 
     * @param {module:model/PostTransitions} postTransitions 
     * @param {module:api/DefaultApi~transitionsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Transition}
     */
    transitionsPost(contentType, postTransitions, callback) {
      let postBody = postTransitions;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling transitionsPost");
      }
      // verify the required parameter 'postTransitions' is set
      if (postTransitions === undefined || postTransitions === null) {
        throw new Error("Missing the required parameter 'postTransitions' when calling transitionsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Transition;
      return this.apiClient.callApi(
        '/transitions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transitionsTransitionIdDelete operation.
     * @callback module:api/DefaultApi~transitionsTransitionIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Transition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} transitionId 
     * @param {module:api/DefaultApi~transitionsTransitionIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Transition}
     */
    transitionsTransitionIdDelete(transitionId, callback) {
      let postBody = null;
      // verify the required parameter 'transitionId' is set
      if (transitionId === undefined || transitionId === null) {
        throw new Error("Missing the required parameter 'transitionId' when calling transitionsTransitionIdDelete");
      }

      let pathParams = {
        'transitionId': transitionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Transition;
      return this.apiClient.callApi(
        '/transitions/{transitionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transitionsTransitionIdExecutionsExecutionIdGet operation.
     * @callback module:api/DefaultApi~transitionsTransitionIdExecutionsExecutionIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransitionExecution} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} transitionId 
     * @param {String} executionId 
     * @param {module:api/DefaultApi~transitionsTransitionIdExecutionsExecutionIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransitionExecution}
     */
    transitionsTransitionIdExecutionsExecutionIdGet(transitionId, executionId, callback) {
      let postBody = null;
      // verify the required parameter 'transitionId' is set
      if (transitionId === undefined || transitionId === null) {
        throw new Error("Missing the required parameter 'transitionId' when calling transitionsTransitionIdExecutionsExecutionIdGet");
      }
      // verify the required parameter 'executionId' is set
      if (executionId === undefined || executionId === null) {
        throw new Error("Missing the required parameter 'executionId' when calling transitionsTransitionIdExecutionsExecutionIdGet");
      }

      let pathParams = {
        'transitionId': transitionId,
        'executionId': executionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TransitionExecution;
      return this.apiClient.callApi(
        '/transitions/{transitionId}/executions/{executionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transitionsTransitionIdExecutionsExecutionIdHeartbeatsOptions operation.
     * @callback module:api/DefaultApi~transitionsTransitionIdExecutionsExecutionIdHeartbeatsOptionsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} transitionId 
     * @param {String} executionId 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~transitionsTransitionIdExecutionsExecutionIdHeartbeatsOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    transitionsTransitionIdExecutionsExecutionIdHeartbeatsOptions(transitionId, executionId, body, callback) {
      let postBody = body;
      // verify the required parameter 'transitionId' is set
      if (transitionId === undefined || transitionId === null) {
        throw new Error("Missing the required parameter 'transitionId' when calling transitionsTransitionIdExecutionsExecutionIdHeartbeatsOptions");
      }
      // verify the required parameter 'executionId' is set
      if (executionId === undefined || executionId === null) {
        throw new Error("Missing the required parameter 'executionId' when calling transitionsTransitionIdExecutionsExecutionIdHeartbeatsOptions");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling transitionsTransitionIdExecutionsExecutionIdHeartbeatsOptions");
      }

      let pathParams = {
        'transitionId': transitionId,
        'executionId': executionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/transitions/{transitionId}/executions/{executionId}/heartbeats', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transitionsTransitionIdExecutionsExecutionIdHeartbeatsPost operation.
     * @callback module:api/DefaultApi~transitionsTransitionIdExecutionsExecutionIdHeartbeatsPostCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} contentType 
     * @param {String} transitionId 
     * @param {String} executionId 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~transitionsTransitionIdExecutionsExecutionIdHeartbeatsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    transitionsTransitionIdExecutionsExecutionIdHeartbeatsPost(contentType, transitionId, executionId, body, callback) {
      let postBody = body;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling transitionsTransitionIdExecutionsExecutionIdHeartbeatsPost");
      }
      // verify the required parameter 'transitionId' is set
      if (transitionId === undefined || transitionId === null) {
        throw new Error("Missing the required parameter 'transitionId' when calling transitionsTransitionIdExecutionsExecutionIdHeartbeatsPost");
      }
      // verify the required parameter 'executionId' is set
      if (executionId === undefined || executionId === null) {
        throw new Error("Missing the required parameter 'executionId' when calling transitionsTransitionIdExecutionsExecutionIdHeartbeatsPost");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling transitionsTransitionIdExecutionsExecutionIdHeartbeatsPost");
      }

      let pathParams = {
        'transitionId': transitionId,
        'executionId': executionId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/transitions/{transitionId}/executions/{executionId}/heartbeats', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transitionsTransitionIdExecutionsExecutionIdOptions operation.
     * @callback module:api/DefaultApi~transitionsTransitionIdExecutionsExecutionIdOptionsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} transitionId 
     * @param {String} executionId 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~transitionsTransitionIdExecutionsExecutionIdOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    transitionsTransitionIdExecutionsExecutionIdOptions(transitionId, executionId, body, callback) {
      let postBody = body;
      // verify the required parameter 'transitionId' is set
      if (transitionId === undefined || transitionId === null) {
        throw new Error("Missing the required parameter 'transitionId' when calling transitionsTransitionIdExecutionsExecutionIdOptions");
      }
      // verify the required parameter 'executionId' is set
      if (executionId === undefined || executionId === null) {
        throw new Error("Missing the required parameter 'executionId' when calling transitionsTransitionIdExecutionsExecutionIdOptions");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling transitionsTransitionIdExecutionsExecutionIdOptions");
      }

      let pathParams = {
        'transitionId': transitionId,
        'executionId': executionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/transitions/{transitionId}/executions/{executionId}', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transitionsTransitionIdExecutionsExecutionIdPatch operation.
     * @callback module:api/DefaultApi~transitionsTransitionIdExecutionsExecutionIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransitionExecution} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} contentType 
     * @param {String} transitionId 
     * @param {String} executionId 
     * @param {module:model/PatchTransistionExecutionId} patchTransistionExecutionId 
     * @param {module:api/DefaultApi~transitionsTransitionIdExecutionsExecutionIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransitionExecution}
     */
    transitionsTransitionIdExecutionsExecutionIdPatch(contentType, transitionId, executionId, patchTransistionExecutionId, callback) {
      let postBody = patchTransistionExecutionId;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling transitionsTransitionIdExecutionsExecutionIdPatch");
      }
      // verify the required parameter 'transitionId' is set
      if (transitionId === undefined || transitionId === null) {
        throw new Error("Missing the required parameter 'transitionId' when calling transitionsTransitionIdExecutionsExecutionIdPatch");
      }
      // verify the required parameter 'executionId' is set
      if (executionId === undefined || executionId === null) {
        throw new Error("Missing the required parameter 'executionId' when calling transitionsTransitionIdExecutionsExecutionIdPatch");
      }
      // verify the required parameter 'patchTransistionExecutionId' is set
      if (patchTransistionExecutionId === undefined || patchTransistionExecutionId === null) {
        throw new Error("Missing the required parameter 'patchTransistionExecutionId' when calling transitionsTransitionIdExecutionsExecutionIdPatch");
      }

      let pathParams = {
        'transitionId': transitionId,
        'executionId': executionId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransitionExecution;
      return this.apiClient.callApi(
        '/transitions/{transitionId}/executions/{executionId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transitionsTransitionIdExecutionsGet operation.
     * @callback module:api/DefaultApi~transitionsTransitionIdExecutionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransitionExecutions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} transitionId 
     * @param {Object} opts Optional parameters
     * @param {String} [nextToken] 
     * @param {String} [order] 
     * @param {String} [executionId] 
     * @param {String} [status] 
     * @param {String} [maxResults] 
     * @param {String} [sortBy] 
     * @param {module:api/DefaultApi~transitionsTransitionIdExecutionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransitionExecutions}
     */
    transitionsTransitionIdExecutionsGet(transitionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'transitionId' is set
      if (transitionId === undefined || transitionId === null) {
        throw new Error("Missing the required parameter 'transitionId' when calling transitionsTransitionIdExecutionsGet");
      }

      let pathParams = {
        'transitionId': transitionId
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'order': opts['order'],
        'executionId': opts['executionId'],
        'status': opts['status'],
        'maxResults': opts['maxResults'],
        'sortBy': opts['sortBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TransitionExecutions;
      return this.apiClient.callApi(
        '/transitions/{transitionId}/executions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transitionsTransitionIdExecutionsOptions operation.
     * @callback module:api/DefaultApi~transitionsTransitionIdExecutionsOptionsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} transitionId 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~transitionsTransitionIdExecutionsOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    transitionsTransitionIdExecutionsOptions(transitionId, body, callback) {
      let postBody = body;
      // verify the required parameter 'transitionId' is set
      if (transitionId === undefined || transitionId === null) {
        throw new Error("Missing the required parameter 'transitionId' when calling transitionsTransitionIdExecutionsOptions");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling transitionsTransitionIdExecutionsOptions");
      }

      let pathParams = {
        'transitionId': transitionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/transitions/{transitionId}/executions', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transitionsTransitionIdExecutionsPost operation.
     * @callback module:api/DefaultApi~transitionsTransitionIdExecutionsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransitionExecution} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} contentType 
     * @param {String} transitionId 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~transitionsTransitionIdExecutionsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransitionExecution}
     */
    transitionsTransitionIdExecutionsPost(contentType, transitionId, body, callback) {
      let postBody = body;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling transitionsTransitionIdExecutionsPost");
      }
      // verify the required parameter 'transitionId' is set
      if (transitionId === undefined || transitionId === null) {
        throw new Error("Missing the required parameter 'transitionId' when calling transitionsTransitionIdExecutionsPost");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling transitionsTransitionIdExecutionsPost");
      }

      let pathParams = {
        'transitionId': transitionId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransitionExecution;
      return this.apiClient.callApi(
        '/transitions/{transitionId}/executions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transitionsTransitionIdGet operation.
     * @callback module:api/DefaultApi~transitionsTransitionIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Transition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} transitionId 
     * @param {module:api/DefaultApi~transitionsTransitionIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Transition}
     */
    transitionsTransitionIdGet(transitionId, callback) {
      let postBody = null;
      // verify the required parameter 'transitionId' is set
      if (transitionId === undefined || transitionId === null) {
        throw new Error("Missing the required parameter 'transitionId' when calling transitionsTransitionIdGet");
      }

      let pathParams = {
        'transitionId': transitionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Transition;
      return this.apiClient.callApi(
        '/transitions/{transitionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transitionsTransitionIdOptions operation.
     * @callback module:api/DefaultApi~transitionsTransitionIdOptionsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} transitionId 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~transitionsTransitionIdOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    transitionsTransitionIdOptions(transitionId, body, callback) {
      let postBody = body;
      // verify the required parameter 'transitionId' is set
      if (transitionId === undefined || transitionId === null) {
        throw new Error("Missing the required parameter 'transitionId' when calling transitionsTransitionIdOptions");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling transitionsTransitionIdOptions");
      }

      let pathParams = {
        'transitionId': transitionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/transitions/{transitionId}', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transitionsTransitionIdPatch operation.
     * @callback module:api/DefaultApi~transitionsTransitionIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Transition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} contentType 
     * @param {String} transitionId 
     * @param {module:model/PatchTransitionId} patchTransitionId 
     * @param {module:api/DefaultApi~transitionsTransitionIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Transition}
     */
    transitionsTransitionIdPatch(contentType, transitionId, patchTransitionId, callback) {
      let postBody = patchTransitionId;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling transitionsTransitionIdPatch");
      }
      // verify the required parameter 'transitionId' is set
      if (transitionId === undefined || transitionId === null) {
        throw new Error("Missing the required parameter 'transitionId' when calling transitionsTransitionIdPatch");
      }
      // verify the required parameter 'patchTransitionId' is set
      if (patchTransitionId === undefined || patchTransitionId === null) {
        throw new Error("Missing the required parameter 'patchTransitionId' when calling transitionsTransitionIdPatch");
      }

      let pathParams = {
        'transitionId': transitionId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Transition;
      return this.apiClient.callApi(
        '/transitions/{transitionId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersGet operation.
     * @callback module:api/DefaultApi~usersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Users} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [nextToken] 
     * @param {String} [maxResults] 
     * @param {module:api/DefaultApi~usersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Users}
     */
    usersGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Users;
      return this.apiClient.callApi(
        '/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersOptions operation.
     * @callback module:api/DefaultApi~usersOptionsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~usersOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    usersOptions(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling usersOptions");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/users', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersPost operation.
     * @callback module:api/DefaultApi~usersPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} contentType 
     * @param {module:model/PostUsers} postUsers 
     * @param {module:api/DefaultApi~usersPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    usersPost(contentType, postUsers, callback) {
      let postBody = postUsers;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling usersPost");
      }
      // verify the required parameter 'postUsers' is set
      if (postUsers === undefined || postUsers === null) {
        throw new Error("Missing the required parameter 'postUsers' when calling usersPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUserIdDelete operation.
     * @callback module:api/DefaultApi~usersUserIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} userId 
     * @param {module:api/DefaultApi~usersUserIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    usersUserIdDelete(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersUserIdDelete");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/users/{userId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUserIdGet operation.
     * @callback module:api/DefaultApi~usersUserIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} userId 
     * @param {module:api/DefaultApi~usersUserIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    usersUserIdGet(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersUserIdGet");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/users/{userId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUserIdOptions operation.
     * @callback module:api/DefaultApi~usersUserIdOptionsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} userId 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~usersUserIdOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    usersUserIdOptions(userId, body, callback) {
      let postBody = body;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersUserIdOptions");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling usersUserIdOptions");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/users/{userId}', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUserIdPatch operation.
     * @callback module:api/DefaultApi~usersUserIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} contentType 
     * @param {String} userId 
     * @param {module:model/PatchUserId} patchUserId 
     * @param {module:api/DefaultApi~usersUserIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    usersUserIdPatch(contentType, userId, patchUserId, callback) {
      let postBody = patchUserId;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling usersUserIdPatch");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersUserIdPatch");
      }
      // verify the required parameter 'patchUserId' is set
      if (patchUserId === undefined || patchUserId === null) {
        throw new Error("Missing the required parameter 'patchUserId' when calling usersUserIdPatch");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/users/{userId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workflowsGet operation.
     * @callback module:api/DefaultApi~workflowsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Workflows} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [nextToken] 
     * @param {String} [maxResults] 
     * @param {module:api/DefaultApi~workflowsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Workflows}
     */
    workflowsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Workflows;
      return this.apiClient.callApi(
        '/workflows', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workflowsOptions operation.
     * @callback module:api/DefaultApi~workflowsOptionsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~workflowsOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    workflowsOptions(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling workflowsOptions");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/workflows', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workflowsPost operation.
     * @callback module:api/DefaultApi~workflowsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Workflow} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} contentType 
     * @param {module:model/PostWorkflows} postWorkflows 
     * @param {module:api/DefaultApi~workflowsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Workflow}
     */
    workflowsPost(contentType, postWorkflows, callback) {
      let postBody = postWorkflows;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling workflowsPost");
      }
      // verify the required parameter 'postWorkflows' is set
      if (postWorkflows === undefined || postWorkflows === null) {
        throw new Error("Missing the required parameter 'postWorkflows' when calling workflowsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Workflow;
      return this.apiClient.callApi(
        '/workflows', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workflowsWorkflowIdDelete operation.
     * @callback module:api/DefaultApi~workflowsWorkflowIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Workflow} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} workflowId 
     * @param {module:api/DefaultApi~workflowsWorkflowIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Workflow}
     */
    workflowsWorkflowIdDelete(workflowId, callback) {
      let postBody = null;
      // verify the required parameter 'workflowId' is set
      if (workflowId === undefined || workflowId === null) {
        throw new Error("Missing the required parameter 'workflowId' when calling workflowsWorkflowIdDelete");
      }

      let pathParams = {
        'workflowId': workflowId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Workflow;
      return this.apiClient.callApi(
        '/workflows/{workflowId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workflowsWorkflowIdExecutionsExecutionIdDelete operation.
     * @callback module:api/DefaultApi~workflowsWorkflowIdExecutionsExecutionIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkflowExecution} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} executionId 
     * @param {String} workflowId 
     * @param {module:api/DefaultApi~workflowsWorkflowIdExecutionsExecutionIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkflowExecution}
     */
    workflowsWorkflowIdExecutionsExecutionIdDelete(executionId, workflowId, callback) {
      let postBody = null;
      // verify the required parameter 'executionId' is set
      if (executionId === undefined || executionId === null) {
        throw new Error("Missing the required parameter 'executionId' when calling workflowsWorkflowIdExecutionsExecutionIdDelete");
      }
      // verify the required parameter 'workflowId' is set
      if (workflowId === undefined || workflowId === null) {
        throw new Error("Missing the required parameter 'workflowId' when calling workflowsWorkflowIdExecutionsExecutionIdDelete");
      }

      let pathParams = {
        'executionId': executionId,
        'workflowId': workflowId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WorkflowExecution;
      return this.apiClient.callApi(
        '/workflows/{workflowId}/executions/{executionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workflowsWorkflowIdExecutionsExecutionIdGet operation.
     * @callback module:api/DefaultApi~workflowsWorkflowIdExecutionsExecutionIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkflowExecution} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} executionId 
     * @param {String} workflowId 
     * @param {module:api/DefaultApi~workflowsWorkflowIdExecutionsExecutionIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkflowExecution}
     */
    workflowsWorkflowIdExecutionsExecutionIdGet(executionId, workflowId, callback) {
      let postBody = null;
      // verify the required parameter 'executionId' is set
      if (executionId === undefined || executionId === null) {
        throw new Error("Missing the required parameter 'executionId' when calling workflowsWorkflowIdExecutionsExecutionIdGet");
      }
      // verify the required parameter 'workflowId' is set
      if (workflowId === undefined || workflowId === null) {
        throw new Error("Missing the required parameter 'workflowId' when calling workflowsWorkflowIdExecutionsExecutionIdGet");
      }

      let pathParams = {
        'executionId': executionId,
        'workflowId': workflowId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WorkflowExecution;
      return this.apiClient.callApi(
        '/workflows/{workflowId}/executions/{executionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workflowsWorkflowIdExecutionsExecutionIdOptions operation.
     * @callback module:api/DefaultApi~workflowsWorkflowIdExecutionsExecutionIdOptionsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} executionId 
     * @param {String} workflowId 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~workflowsWorkflowIdExecutionsExecutionIdOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    workflowsWorkflowIdExecutionsExecutionIdOptions(executionId, workflowId, body, callback) {
      let postBody = body;
      // verify the required parameter 'executionId' is set
      if (executionId === undefined || executionId === null) {
        throw new Error("Missing the required parameter 'executionId' when calling workflowsWorkflowIdExecutionsExecutionIdOptions");
      }
      // verify the required parameter 'workflowId' is set
      if (workflowId === undefined || workflowId === null) {
        throw new Error("Missing the required parameter 'workflowId' when calling workflowsWorkflowIdExecutionsExecutionIdOptions");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling workflowsWorkflowIdExecutionsExecutionIdOptions");
      }

      let pathParams = {
        'executionId': executionId,
        'workflowId': workflowId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/workflows/{workflowId}/executions/{executionId}', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workflowsWorkflowIdExecutionsExecutionIdPatch operation.
     * @callback module:api/DefaultApi~workflowsWorkflowIdExecutionsExecutionIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkflowExecution} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} contentType 
     * @param {String} executionId 
     * @param {String} workflowId 
     * @param {module:model/PatchWorkflowExecutionId} patchWorkflowExecutionId 
     * @param {module:api/DefaultApi~workflowsWorkflowIdExecutionsExecutionIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkflowExecution}
     */
    workflowsWorkflowIdExecutionsExecutionIdPatch(contentType, executionId, workflowId, patchWorkflowExecutionId, callback) {
      let postBody = patchWorkflowExecutionId;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling workflowsWorkflowIdExecutionsExecutionIdPatch");
      }
      // verify the required parameter 'executionId' is set
      if (executionId === undefined || executionId === null) {
        throw new Error("Missing the required parameter 'executionId' when calling workflowsWorkflowIdExecutionsExecutionIdPatch");
      }
      // verify the required parameter 'workflowId' is set
      if (workflowId === undefined || workflowId === null) {
        throw new Error("Missing the required parameter 'workflowId' when calling workflowsWorkflowIdExecutionsExecutionIdPatch");
      }
      // verify the required parameter 'patchWorkflowExecutionId' is set
      if (patchWorkflowExecutionId === undefined || patchWorkflowExecutionId === null) {
        throw new Error("Missing the required parameter 'patchWorkflowExecutionId' when calling workflowsWorkflowIdExecutionsExecutionIdPatch");
      }

      let pathParams = {
        'executionId': executionId,
        'workflowId': workflowId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WorkflowExecution;
      return this.apiClient.callApi(
        '/workflows/{workflowId}/executions/{executionId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workflowsWorkflowIdExecutionsGet operation.
     * @callback module:api/DefaultApi~workflowsWorkflowIdExecutionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkflowExecutions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} workflowId 
     * @param {Object} opts Optional parameters
     * @param {String} [fromStartTime] 
     * @param {String} [toStartTime] 
     * @param {String} [nextToken] 
     * @param {String} [order] 
     * @param {String} [status] 
     * @param {String} [maxResults] 
     * @param {String} [sortBy] 
     * @param {module:api/DefaultApi~workflowsWorkflowIdExecutionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkflowExecutions}
     */
    workflowsWorkflowIdExecutionsGet(workflowId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workflowId' is set
      if (workflowId === undefined || workflowId === null) {
        throw new Error("Missing the required parameter 'workflowId' when calling workflowsWorkflowIdExecutionsGet");
      }

      let pathParams = {
        'workflowId': workflowId
      };
      let queryParams = {
        'fromStartTime': opts['fromStartTime'],
        'toStartTime': opts['toStartTime'],
        'nextToken': opts['nextToken'],
        'order': opts['order'],
        'status': opts['status'],
        'maxResults': opts['maxResults'],
        'sortBy': opts['sortBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WorkflowExecutions;
      return this.apiClient.callApi(
        '/workflows/{workflowId}/executions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workflowsWorkflowIdExecutionsOptions operation.
     * @callback module:api/DefaultApi~workflowsWorkflowIdExecutionsOptionsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} workflowId 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~workflowsWorkflowIdExecutionsOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    workflowsWorkflowIdExecutionsOptions(workflowId, body, callback) {
      let postBody = body;
      // verify the required parameter 'workflowId' is set
      if (workflowId === undefined || workflowId === null) {
        throw new Error("Missing the required parameter 'workflowId' when calling workflowsWorkflowIdExecutionsOptions");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling workflowsWorkflowIdExecutionsOptions");
      }

      let pathParams = {
        'workflowId': workflowId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/workflows/{workflowId}/executions', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workflowsWorkflowIdExecutionsPost operation.
     * @callback module:api/DefaultApi~workflowsWorkflowIdExecutionsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkflowExecution} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} contentType 
     * @param {String} workflowId 
     * @param {module:model/PostWorkflowExecutions} postWorkflowExecutions 
     * @param {module:api/DefaultApi~workflowsWorkflowIdExecutionsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkflowExecution}
     */
    workflowsWorkflowIdExecutionsPost(contentType, workflowId, postWorkflowExecutions, callback) {
      let postBody = postWorkflowExecutions;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling workflowsWorkflowIdExecutionsPost");
      }
      // verify the required parameter 'workflowId' is set
      if (workflowId === undefined || workflowId === null) {
        throw new Error("Missing the required parameter 'workflowId' when calling workflowsWorkflowIdExecutionsPost");
      }
      // verify the required parameter 'postWorkflowExecutions' is set
      if (postWorkflowExecutions === undefined || postWorkflowExecutions === null) {
        throw new Error("Missing the required parameter 'postWorkflowExecutions' when calling workflowsWorkflowIdExecutionsPost");
      }

      let pathParams = {
        'workflowId': workflowId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WorkflowExecution;
      return this.apiClient.callApi(
        '/workflows/{workflowId}/executions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workflowsWorkflowIdGet operation.
     * @callback module:api/DefaultApi~workflowsWorkflowIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Workflow} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} workflowId 
     * @param {module:api/DefaultApi~workflowsWorkflowIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Workflow}
     */
    workflowsWorkflowIdGet(workflowId, callback) {
      let postBody = null;
      // verify the required parameter 'workflowId' is set
      if (workflowId === undefined || workflowId === null) {
        throw new Error("Missing the required parameter 'workflowId' when calling workflowsWorkflowIdGet");
      }

      let pathParams = {
        'workflowId': workflowId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Workflow;
      return this.apiClient.callApi(
        '/workflows/{workflowId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workflowsWorkflowIdOptions operation.
     * @callback module:api/DefaultApi~workflowsWorkflowIdOptionsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} workflowId 
     * @param {Object.<String, Object>} body 
     * @param {module:api/DefaultApi~workflowsWorkflowIdOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    workflowsWorkflowIdOptions(workflowId, body, callback) {
      let postBody = body;
      // verify the required parameter 'workflowId' is set
      if (workflowId === undefined || workflowId === null) {
        throw new Error("Missing the required parameter 'workflowId' when calling workflowsWorkflowIdOptions");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling workflowsWorkflowIdOptions");
      }

      let pathParams = {
        'workflowId': workflowId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/workflows/{workflowId}', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workflowsWorkflowIdPatch operation.
     * @callback module:api/DefaultApi~workflowsWorkflowIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Workflow} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} contentType 
     * @param {String} workflowId 
     * @param {module:model/PatchWorkflowId} patchWorkflowId 
     * @param {module:api/DefaultApi~workflowsWorkflowIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Workflow}
     */
    workflowsWorkflowIdPatch(contentType, workflowId, patchWorkflowId, callback) {
      let postBody = patchWorkflowId;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling workflowsWorkflowIdPatch");
      }
      // verify the required parameter 'workflowId' is set
      if (workflowId === undefined || workflowId === null) {
        throw new Error("Missing the required parameter 'workflowId' when calling workflowsWorkflowIdPatch");
      }
      // verify the required parameter 'patchWorkflowId' is set
      if (patchWorkflowId === undefined || patchWorkflowId === null) {
        throw new Error("Missing the required parameter 'patchWorkflowId' when calling workflowsWorkflowIdPatch");
      }

      let pathParams = {
        'workflowId': workflowId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Workflow;
      return this.apiClient.callApi(
        '/workflows/{workflowId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
