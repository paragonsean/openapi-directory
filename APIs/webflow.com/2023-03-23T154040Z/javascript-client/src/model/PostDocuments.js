/**
 * Lucidtech API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-03-23T15:40:40Z
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DocumentGroundTruthInner from './DocumentGroundTruthInner';

/**
 * The PostDocuments model module.
 * @module model/PostDocuments
 * @version 2023-03-23T15:40:40Z
 */
class PostDocuments {
    /**
     * Constructs a new <code>PostDocuments</code>.
     * @alias module:model/PostDocuments
     * @param content {String} 
     * @param contentType {module:model/PostDocuments.ContentTypeEnum} 
     */
    constructor(content, contentType) { 
        
        PostDocuments.initialize(this, content, contentType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, content, contentType) { 
        obj['content'] = content;
        obj['contentType'] = contentType;
    }

    /**
     * Constructs a <code>PostDocuments</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PostDocuments} obj Optional instance to populate.
     * @return {module:model/PostDocuments} The populated <code>PostDocuments</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PostDocuments();

            if (data.hasOwnProperty('consentId')) {
                obj['consentId'] = ApiClient.convertToType(data['consentId'], 'String');
            }
            if (data.hasOwnProperty('content')) {
                obj['content'] = ApiClient.convertToType(data['content'], 'String');
            }
            if (data.hasOwnProperty('contentType')) {
                obj['contentType'] = ApiClient.convertToType(data['contentType'], 'String');
            }
            if (data.hasOwnProperty('datasetId')) {
                obj['datasetId'] = ApiClient.convertToType(data['datasetId'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('groundTruth')) {
                obj['groundTruth'] = ApiClient.convertToType(data['groundTruth'], [DocumentGroundTruthInner]);
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], Object);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('retentionInDays')) {
                obj['retentionInDays'] = ApiClient.convertToType(data['retentionInDays'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PostDocuments</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PostDocuments</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PostDocuments.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['consentId'] && !(typeof data['consentId'] === 'string' || data['consentId'] instanceof String)) {
            throw new Error("Expected the field `consentId` to be a primitive type in the JSON string but got " + data['consentId']);
        }
        // ensure the json data is a string
        if (data['content'] && !(typeof data['content'] === 'string' || data['content'] instanceof String)) {
            throw new Error("Expected the field `content` to be a primitive type in the JSON string but got " + data['content']);
        }
        // ensure the json data is a string
        if (data['contentType'] && !(typeof data['contentType'] === 'string' || data['contentType'] instanceof String)) {
            throw new Error("Expected the field `contentType` to be a primitive type in the JSON string but got " + data['contentType']);
        }
        // ensure the json data is a string
        if (data['datasetId'] && !(typeof data['datasetId'] === 'string' || data['datasetId'] instanceof String)) {
            throw new Error("Expected the field `datasetId` to be a primitive type in the JSON string but got " + data['datasetId']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        if (data['groundTruth']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['groundTruth'])) {
                throw new Error("Expected the field `groundTruth` to be an array in the JSON data but got " + data['groundTruth']);
            }
            // validate the optional field `groundTruth` (array)
            for (const item of data['groundTruth']) {
                DocumentGroundTruthInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}

PostDocuments.RequiredProperties = ["content", "contentType"];

/**
 * @member {String} consentId
 */
PostDocuments.prototype['consentId'] = undefined;

/**
 * @member {String} content
 */
PostDocuments.prototype['content'] = undefined;

/**
 * @member {module:model/PostDocuments.ContentTypeEnum} contentType
 */
PostDocuments.prototype['contentType'] = undefined;

/**
 * @member {String} datasetId
 */
PostDocuments.prototype['datasetId'] = undefined;

/**
 * @member {String} description
 */
PostDocuments.prototype['description'] = undefined;

/**
 * @member {Array.<module:model/DocumentGroundTruthInner>} groundTruth
 */
PostDocuments.prototype['groundTruth'] = undefined;

/**
 * @member {Object} metadata
 */
PostDocuments.prototype['metadata'] = undefined;

/**
 * @member {String} name
 */
PostDocuments.prototype['name'] = undefined;

/**
 * @member {Number} retentionInDays
 */
PostDocuments.prototype['retentionInDays'] = undefined;





/**
 * Allowed values for the <code>contentType</code> property.
 * @enum {String}
 * @readonly
 */
PostDocuments['ContentTypeEnum'] = {

    /**
     * value: "application/pdf"
     * @const
     */
    "application/pdf": "application/pdf",

    /**
     * value: "image/jpeg"
     * @const
     */
    "image/jpeg": "image/jpeg",

    /**
     * value: "image/png"
     * @const
     */
    "image/png": "image/png",

    /**
     * value: "image/tiff"
     * @const
     */
    "image/tiff": "image/tiff"
};



export default PostDocuments;

