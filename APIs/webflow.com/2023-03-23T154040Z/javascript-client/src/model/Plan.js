/**
 * Lucidtech API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-03-23T15:40:40Z
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Plan model module.
 * @module model/Plan
 * @version 2023-03-23T15:40:40Z
 */
class Plan {
    /**
     * Constructs a new <code>Plan</code>.
     * @alias module:model/Plan
     * @param available {Boolean} 
     * @param currency {module:model/Plan.CurrencyEnum} 
     * @param latest {Number} 
     * @param name {String} 
     * @param organizationId {String} 
     * @param planId {String} 
     */
    constructor(available, currency, latest, name, organizationId, planId) { 
        
        Plan.initialize(this, available, currency, latest, name, organizationId, planId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, available, currency, latest, name, organizationId, planId) { 
        obj['available'] = available;
        obj['currency'] = currency;
        obj['latest'] = latest;
        obj['name'] = name;
        obj['organizationId'] = organizationId;
        obj['planId'] = planId;
    }

    /**
     * Constructs a <code>Plan</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Plan} obj Optional instance to populate.
     * @return {module:model/Plan} The populated <code>Plan</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Plan();

            if (data.hasOwnProperty('activeModels')) {
                obj['activeModels'] = ApiClient.convertToType(data['activeModels'], Object);
            }
            if (data.hasOwnProperty('available')) {
                obj['available'] = ApiClient.convertToType(data['available'], 'Boolean');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('fieldPredictions')) {
                obj['fieldPredictions'] = ApiClient.convertToType(data['fieldPredictions'], Object);
            }
            if (data.hasOwnProperty('gpuHours')) {
                obj['gpuHours'] = ApiClient.convertToType(data['gpuHours'], Object);
            }
            if (data.hasOwnProperty('latest')) {
                obj['latest'] = ApiClient.convertToType(data['latest'], 'Number');
            }
            if (data.hasOwnProperty('license')) {
                obj['license'] = ApiClient.convertToType(data['license'], Object);
            }
            if (data.hasOwnProperty('modelDeploymentUnits')) {
                obj['modelDeploymentUnits'] = ApiClient.convertToType(data['modelDeploymentUnits'], Object);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('organizationId')) {
                obj['organizationId'] = ApiClient.convertToType(data['organizationId'], 'String');
            }
            if (data.hasOwnProperty('planId')) {
                obj['planId'] = ApiClient.convertToType(data['planId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Plan</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Plan</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Plan.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['organizationId'] && !(typeof data['organizationId'] === 'string' || data['organizationId'] instanceof String)) {
            throw new Error("Expected the field `organizationId` to be a primitive type in the JSON string but got " + data['organizationId']);
        }
        // ensure the json data is a string
        if (data['planId'] && !(typeof data['planId'] === 'string' || data['planId'] instanceof String)) {
            throw new Error("Expected the field `planId` to be a primitive type in the JSON string but got " + data['planId']);
        }

        return true;
    }


}

Plan.RequiredProperties = ["available", "currency", "latest", "name", "organizationId", "planId"];

/**
 * @member {Object} activeModels
 */
Plan.prototype['activeModels'] = undefined;

/**
 * @member {Boolean} available
 */
Plan.prototype['available'] = undefined;

/**
 * @member {module:model/Plan.CurrencyEnum} currency
 */
Plan.prototype['currency'] = undefined;

/**
 * @member {String} description
 */
Plan.prototype['description'] = undefined;

/**
 * @member {Object} fieldPredictions
 */
Plan.prototype['fieldPredictions'] = undefined;

/**
 * @member {Object} gpuHours
 */
Plan.prototype['gpuHours'] = undefined;

/**
 * @member {Number} latest
 */
Plan.prototype['latest'] = undefined;

/**
 * @member {Object} license
 */
Plan.prototype['license'] = undefined;

/**
 * @member {Object} modelDeploymentUnits
 */
Plan.prototype['modelDeploymentUnits'] = undefined;

/**
 * @member {String} name
 */
Plan.prototype['name'] = undefined;

/**
 * @member {String} organizationId
 */
Plan.prototype['organizationId'] = undefined;

/**
 * @member {String} planId
 */
Plan.prototype['planId'] = undefined;





/**
 * Allowed values for the <code>currency</code> property.
 * @enum {String}
 * @readonly
 */
Plan['CurrencyEnum'] = {

    /**
     * value: "USD"
     * @const
     */
    "USD": "USD",

    /**
     * value: "EUR"
     * @const
     */
    "EUR": "EUR",

    /**
     * value: "NOK"
     * @const
     */
    "NOK": "NOK"
};



export default Plan;

