/**
 * Lucidtech API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-03-23T15:40:40Z
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DocumentsDocumentsInner from './DocumentsDocumentsInner';

/**
 * The Documents model module.
 * @module model/Documents
 * @version 2023-03-23T15:40:40Z
 */
class Documents {
    /**
     * Constructs a new <code>Documents</code>.
     * @alias module:model/Documents
     * @param documents {Array.<module:model/DocumentsDocumentsInner>} 
     * @param nextToken {String} 
     */
    constructor(documents, nextToken) { 
        
        Documents.initialize(this, documents, nextToken);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, documents, nextToken) { 
        obj['documents'] = documents;
        obj['nextToken'] = nextToken;
    }

    /**
     * Constructs a <code>Documents</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Documents} obj Optional instance to populate.
     * @return {module:model/Documents} The populated <code>Documents</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Documents();

            if (data.hasOwnProperty('consentId')) {
                obj['consentId'] = ApiClient.convertToType(data['consentId'], ['String']);
            }
            if (data.hasOwnProperty('datasetId')) {
                obj['datasetId'] = ApiClient.convertToType(data['datasetId'], ['String']);
            }
            if (data.hasOwnProperty('documents')) {
                obj['documents'] = ApiClient.convertToType(data['documents'], [DocumentsDocumentsInner]);
            }
            if (data.hasOwnProperty('nextToken')) {
                obj['nextToken'] = ApiClient.convertToType(data['nextToken'], 'String');
            }
            if (data.hasOwnProperty('order')) {
                obj['order'] = ApiClient.convertToType(data['order'], 'String');
            }
            if (data.hasOwnProperty('sortBy')) {
                obj['sortBy'] = ApiClient.convertToType(data['sortBy'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Documents</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Documents</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Documents.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['consentId'])) {
            throw new Error("Expected the field `consentId` to be an array in the JSON data but got " + data['consentId']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['datasetId'])) {
            throw new Error("Expected the field `datasetId` to be an array in the JSON data but got " + data['datasetId']);
        }
        if (data['documents']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['documents'])) {
                throw new Error("Expected the field `documents` to be an array in the JSON data but got " + data['documents']);
            }
            // validate the optional field `documents` (array)
            for (const item of data['documents']) {
                DocumentsDocumentsInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['nextToken'] && !(typeof data['nextToken'] === 'string' || data['nextToken'] instanceof String)) {
            throw new Error("Expected the field `nextToken` to be a primitive type in the JSON string but got " + data['nextToken']);
        }
        // ensure the json data is a string
        if (data['order'] && !(typeof data['order'] === 'string' || data['order'] instanceof String)) {
            throw new Error("Expected the field `order` to be a primitive type in the JSON string but got " + data['order']);
        }
        // ensure the json data is a string
        if (data['sortBy'] && !(typeof data['sortBy'] === 'string' || data['sortBy'] instanceof String)) {
            throw new Error("Expected the field `sortBy` to be a primitive type in the JSON string but got " + data['sortBy']);
        }

        return true;
    }


}

Documents.RequiredProperties = ["documents", "nextToken"];

/**
 * @member {Array.<String>} consentId
 */
Documents.prototype['consentId'] = undefined;

/**
 * @member {Array.<String>} datasetId
 */
Documents.prototype['datasetId'] = undefined;

/**
 * @member {Array.<module:model/DocumentsDocumentsInner>} documents
 */
Documents.prototype['documents'] = undefined;

/**
 * @member {String} nextToken
 */
Documents.prototype['nextToken'] = undefined;

/**
 * @member {module:model/Documents.OrderEnum} order
 */
Documents.prototype['order'] = undefined;

/**
 * @member {module:model/Documents.SortByEnum} sortBy
 */
Documents.prototype['sortBy'] = undefined;





/**
 * Allowed values for the <code>order</code> property.
 * @enum {String}
 * @readonly
 */
Documents['OrderEnum'] = {

    /**
     * value: "ascending"
     * @const
     */
    "ascending": "ascending",

    /**
     * value: "descending"
     * @const
     */
    "descending": "descending"
};


/**
 * Allowed values for the <code>sortBy</code> property.
 * @enum {String}
 * @readonly
 */
Documents['SortByEnum'] = {

    /**
     * value: "createdTime"
     * @const
     */
    "createdTime": "createdTime"
};



export default Documents;

