/**
 * Lucidtech API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-03-23T15:40:40Z
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DocumentGroundTruthInner from './DocumentGroundTruthInner';

/**
 * The DocumentsDocumentsInner model module.
 * @module model/DocumentsDocumentsInner
 * @version 2023-03-23T15:40:40Z
 */
class DocumentsDocumentsInner {
    /**
     * Constructs a new <code>DocumentsDocumentsInner</code>.
     * @alias module:model/DocumentsDocumentsInner
     * @param contentMD5 {String} 
     * @param contentType {module:model/DocumentsDocumentsInner.ContentTypeEnum} 
     * @param createdBy {String} 
     * @param createdTime {String} 
     * @param description {String} 
     * @param documentId {String} 
     * @param metadata {Object} 
     * @param name {String} 
     * @param retentionInDays {Number} 
     * @param updatedBy {String} 
     * @param updatedTime {String} 
     */
    constructor(contentMD5, contentType, createdBy, createdTime, description, documentId, metadata, name, retentionInDays, updatedBy, updatedTime) { 
        
        DocumentsDocumentsInner.initialize(this, contentMD5, contentType, createdBy, createdTime, description, documentId, metadata, name, retentionInDays, updatedBy, updatedTime);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, contentMD5, contentType, createdBy, createdTime, description, documentId, metadata, name, retentionInDays, updatedBy, updatedTime) { 
        obj['contentMD5'] = contentMD5;
        obj['contentType'] = contentType;
        obj['createdBy'] = createdBy;
        obj['createdTime'] = createdTime;
        obj['description'] = description;
        obj['documentId'] = documentId;
        obj['metadata'] = metadata;
        obj['name'] = name;
        obj['retentionInDays'] = retentionInDays;
        obj['updatedBy'] = updatedBy;
        obj['updatedTime'] = updatedTime;
    }

    /**
     * Constructs a <code>DocumentsDocumentsInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DocumentsDocumentsInner} obj Optional instance to populate.
     * @return {module:model/DocumentsDocumentsInner} The populated <code>DocumentsDocumentsInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DocumentsDocumentsInner();

            if (data.hasOwnProperty('consentId')) {
                obj['consentId'] = ApiClient.convertToType(data['consentId'], 'String');
            }
            if (data.hasOwnProperty('content')) {
                obj['content'] = ApiClient.convertToType(data['content'], 'String');
            }
            if (data.hasOwnProperty('contentMD5')) {
                obj['contentMD5'] = ApiClient.convertToType(data['contentMD5'], 'String');
            }
            if (data.hasOwnProperty('contentType')) {
                obj['contentType'] = ApiClient.convertToType(data['contentType'], 'String');
            }
            if (data.hasOwnProperty('createdBy')) {
                obj['createdBy'] = ApiClient.convertToType(data['createdBy'], 'String');
            }
            if (data.hasOwnProperty('createdTime')) {
                obj['createdTime'] = ApiClient.convertToType(data['createdTime'], 'String');
            }
            if (data.hasOwnProperty('datasetId')) {
                obj['datasetId'] = ApiClient.convertToType(data['datasetId'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('documentId')) {
                obj['documentId'] = ApiClient.convertToType(data['documentId'], 'String');
            }
            if (data.hasOwnProperty('groundTruth')) {
                obj['groundTruth'] = ApiClient.convertToType(data['groundTruth'], [DocumentGroundTruthInner]);
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], Object);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('retentionInDays')) {
                obj['retentionInDays'] = ApiClient.convertToType(data['retentionInDays'], 'Number');
            }
            if (data.hasOwnProperty('updatedBy')) {
                obj['updatedBy'] = ApiClient.convertToType(data['updatedBy'], 'String');
            }
            if (data.hasOwnProperty('updatedTime')) {
                obj['updatedTime'] = ApiClient.convertToType(data['updatedTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DocumentsDocumentsInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DocumentsDocumentsInner</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DocumentsDocumentsInner.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['consentId'] && !(typeof data['consentId'] === 'string' || data['consentId'] instanceof String)) {
            throw new Error("Expected the field `consentId` to be a primitive type in the JSON string but got " + data['consentId']);
        }
        // ensure the json data is a string
        if (data['content'] && !(typeof data['content'] === 'string' || data['content'] instanceof String)) {
            throw new Error("Expected the field `content` to be a primitive type in the JSON string but got " + data['content']);
        }
        // ensure the json data is a string
        if (data['contentMD5'] && !(typeof data['contentMD5'] === 'string' || data['contentMD5'] instanceof String)) {
            throw new Error("Expected the field `contentMD5` to be a primitive type in the JSON string but got " + data['contentMD5']);
        }
        // ensure the json data is a string
        if (data['contentType'] && !(typeof data['contentType'] === 'string' || data['contentType'] instanceof String)) {
            throw new Error("Expected the field `contentType` to be a primitive type in the JSON string but got " + data['contentType']);
        }
        // ensure the json data is a string
        if (data['createdBy'] && !(typeof data['createdBy'] === 'string' || data['createdBy'] instanceof String)) {
            throw new Error("Expected the field `createdBy` to be a primitive type in the JSON string but got " + data['createdBy']);
        }
        // ensure the json data is a string
        if (data['createdTime'] && !(typeof data['createdTime'] === 'string' || data['createdTime'] instanceof String)) {
            throw new Error("Expected the field `createdTime` to be a primitive type in the JSON string but got " + data['createdTime']);
        }
        // ensure the json data is a string
        if (data['datasetId'] && !(typeof data['datasetId'] === 'string' || data['datasetId'] instanceof String)) {
            throw new Error("Expected the field `datasetId` to be a primitive type in the JSON string but got " + data['datasetId']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['documentId'] && !(typeof data['documentId'] === 'string' || data['documentId'] instanceof String)) {
            throw new Error("Expected the field `documentId` to be a primitive type in the JSON string but got " + data['documentId']);
        }
        if (data['groundTruth']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['groundTruth'])) {
                throw new Error("Expected the field `groundTruth` to be an array in the JSON data but got " + data['groundTruth']);
            }
            // validate the optional field `groundTruth` (array)
            for (const item of data['groundTruth']) {
                DocumentGroundTruthInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['updatedBy'] && !(typeof data['updatedBy'] === 'string' || data['updatedBy'] instanceof String)) {
            throw new Error("Expected the field `updatedBy` to be a primitive type in the JSON string but got " + data['updatedBy']);
        }
        // ensure the json data is a string
        if (data['updatedTime'] && !(typeof data['updatedTime'] === 'string' || data['updatedTime'] instanceof String)) {
            throw new Error("Expected the field `updatedTime` to be a primitive type in the JSON string but got " + data['updatedTime']);
        }

        return true;
    }


}

DocumentsDocumentsInner.RequiredProperties = ["contentMD5", "contentType", "createdBy", "createdTime", "description", "documentId", "metadata", "name", "retentionInDays", "updatedBy", "updatedTime"];

/**
 * @member {String} consentId
 */
DocumentsDocumentsInner.prototype['consentId'] = undefined;

/**
 * @member {String} content
 */
DocumentsDocumentsInner.prototype['content'] = undefined;

/**
 * @member {String} contentMD5
 */
DocumentsDocumentsInner.prototype['contentMD5'] = undefined;

/**
 * @member {module:model/DocumentsDocumentsInner.ContentTypeEnum} contentType
 */
DocumentsDocumentsInner.prototype['contentType'] = undefined;

/**
 * @member {String} createdBy
 */
DocumentsDocumentsInner.prototype['createdBy'] = undefined;

/**
 * @member {String} createdTime
 */
DocumentsDocumentsInner.prototype['createdTime'] = undefined;

/**
 * @member {String} datasetId
 */
DocumentsDocumentsInner.prototype['datasetId'] = undefined;

/**
 * @member {String} description
 */
DocumentsDocumentsInner.prototype['description'] = undefined;

/**
 * @member {String} documentId
 */
DocumentsDocumentsInner.prototype['documentId'] = undefined;

/**
 * @member {Array.<module:model/DocumentGroundTruthInner>} groundTruth
 */
DocumentsDocumentsInner.prototype['groundTruth'] = undefined;

/**
 * @member {Object} metadata
 */
DocumentsDocumentsInner.prototype['metadata'] = undefined;

/**
 * @member {String} name
 */
DocumentsDocumentsInner.prototype['name'] = undefined;

/**
 * @member {Number} retentionInDays
 */
DocumentsDocumentsInner.prototype['retentionInDays'] = undefined;

/**
 * @member {String} updatedBy
 */
DocumentsDocumentsInner.prototype['updatedBy'] = undefined;

/**
 * @member {String} updatedTime
 */
DocumentsDocumentsInner.prototype['updatedTime'] = undefined;





/**
 * Allowed values for the <code>contentType</code> property.
 * @enum {String}
 * @readonly
 */
DocumentsDocumentsInner['ContentTypeEnum'] = {

    /**
     * value: "application/pdf"
     * @const
     */
    "application/pdf": "application/pdf",

    /**
     * value: "image/jpeg"
     * @const
     */
    "image/jpeg": "image/jpeg",

    /**
     * value: "image/png"
     * @const
     */
    "image/png": "image/png",

    /**
     * value: "image/tiff"
     * @const
     */
    "image/tiff": "image/tiff"
};



export default DocumentsDocumentsInner;

