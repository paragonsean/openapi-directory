/**
 * Lucidtech API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-03-23T15:40:40Z
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ModelPostprocessConfig from './ModelPostprocessConfig';

/**
 * The PostPredictions model module.
 * @module model/PostPredictions
 * @version 2023-03-23T15:40:40Z
 */
class PostPredictions {
    /**
     * Constructs a new <code>PostPredictions</code>.
     * @alias module:model/PostPredictions
     * @param documentId {String} 
     * @param modelId {String} 
     */
    constructor(documentId, modelId) { 
        
        PostPredictions.initialize(this, documentId, modelId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, documentId, modelId) { 
        obj['documentId'] = documentId;
        obj['modelId'] = modelId;
    }

    /**
     * Constructs a <code>PostPredictions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PostPredictions} obj Optional instance to populate.
     * @return {module:model/PostPredictions} The populated <code>PostPredictions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PostPredictions();

            if (data.hasOwnProperty('autoRotate')) {
                obj['autoRotate'] = ApiClient.convertToType(data['autoRotate'], 'Boolean');
            }
            if (data.hasOwnProperty('documentId')) {
                obj['documentId'] = ApiClient.convertToType(data['documentId'], 'String');
            }
            if (data.hasOwnProperty('imageQuality')) {
                obj['imageQuality'] = ApiClient.convertToType(data['imageQuality'], 'String');
            }
            if (data.hasOwnProperty('maxPages')) {
                obj['maxPages'] = ApiClient.convertToType(data['maxPages'], 'Number');
            }
            if (data.hasOwnProperty('modelId')) {
                obj['modelId'] = ApiClient.convertToType(data['modelId'], 'String');
            }
            if (data.hasOwnProperty('postprocessConfig')) {
                obj['postprocessConfig'] = ModelPostprocessConfig.constructFromObject(data['postprocessConfig']);
            }
            if (data.hasOwnProperty('rotation')) {
                obj['rotation'] = ApiClient.convertToType(data['rotation'], 'Number');
            }
            if (data.hasOwnProperty('trainingId')) {
                obj['trainingId'] = ApiClient.convertToType(data['trainingId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PostPredictions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PostPredictions</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PostPredictions.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['documentId'] && !(typeof data['documentId'] === 'string' || data['documentId'] instanceof String)) {
            throw new Error("Expected the field `documentId` to be a primitive type in the JSON string but got " + data['documentId']);
        }
        // ensure the json data is a string
        if (data['imageQuality'] && !(typeof data['imageQuality'] === 'string' || data['imageQuality'] instanceof String)) {
            throw new Error("Expected the field `imageQuality` to be a primitive type in the JSON string but got " + data['imageQuality']);
        }
        // ensure the json data is a string
        if (data['modelId'] && !(typeof data['modelId'] === 'string' || data['modelId'] instanceof String)) {
            throw new Error("Expected the field `modelId` to be a primitive type in the JSON string but got " + data['modelId']);
        }
        // validate the optional field `postprocessConfig`
        if (data['postprocessConfig']) { // data not null
          ModelPostprocessConfig.validateJSON(data['postprocessConfig']);
        }
        // ensure the json data is a string
        if (data['trainingId'] && !(typeof data['trainingId'] === 'string' || data['trainingId'] instanceof String)) {
            throw new Error("Expected the field `trainingId` to be a primitive type in the JSON string but got " + data['trainingId']);
        }

        return true;
    }


}

PostPredictions.RequiredProperties = ["documentId", "modelId"];

/**
 * @member {Boolean} autoRotate
 */
PostPredictions.prototype['autoRotate'] = undefined;

/**
 * @member {String} documentId
 */
PostPredictions.prototype['documentId'] = undefined;

/**
 * @member {module:model/PostPredictions.ImageQualityEnum} imageQuality
 */
PostPredictions.prototype['imageQuality'] = undefined;

/**
 * @member {Number} maxPages
 */
PostPredictions.prototype['maxPages'] = undefined;

/**
 * @member {String} modelId
 */
PostPredictions.prototype['modelId'] = undefined;

/**
 * @member {module:model/ModelPostprocessConfig} postprocessConfig
 */
PostPredictions.prototype['postprocessConfig'] = undefined;

/**
 * @member {module:model/PostPredictions.RotationEnum} rotation
 */
PostPredictions.prototype['rotation'] = undefined;

/**
 * @member {String} trainingId
 */
PostPredictions.prototype['trainingId'] = undefined;





/**
 * Allowed values for the <code>imageQuality</code> property.
 * @enum {String}
 * @readonly
 */
PostPredictions['ImageQualityEnum'] = {

    /**
     * value: "LOW"
     * @const
     */
    "LOW": "LOW",

    /**
     * value: "HIGH"
     * @const
     */
    "HIGH": "HIGH"
};


/**
 * Allowed values for the <code>rotation</code> property.
 * @enum {Number}
 * @readonly
 */
PostPredictions['RotationEnum'] = {

    /**
     * value: 0
     * @const
     */
    "0": 0,

    /**
     * value: 90
     * @const
     */
    "90": 90,

    /**
     * value: 180
     * @const
     */
    "180": 180,

    /**
     * value: 270
     * @const
     */
    "270": 270
};



export default PostPredictions;

