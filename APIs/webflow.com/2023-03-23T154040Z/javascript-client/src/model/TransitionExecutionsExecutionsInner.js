/**
 * Lucidtech API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-03-23T15:40:40Z
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LogsTransitionId from './LogsTransitionId';

/**
 * The TransitionExecutionsExecutionsInner model module.
 * @module model/TransitionExecutionsExecutionsInner
 * @version 2023-03-23T15:40:40Z
 */
class TransitionExecutionsExecutionsInner {
    /**
     * Constructs a new <code>TransitionExecutionsExecutionsInner</code>.
     * @alias module:model/TransitionExecutionsExecutionsInner
     * @param completedBy {String} 
     * @param executionId {String} 
     * @param input {Object} 
     * @param status {module:model/TransitionExecutionsExecutionsInner.StatusEnum} 
     * @param transitionId {module:model/LogsTransitionId} 
     */
    constructor(completedBy, executionId, input, status, transitionId) { 
        
        TransitionExecutionsExecutionsInner.initialize(this, completedBy, executionId, input, status, transitionId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, completedBy, executionId, input, status, transitionId) { 
        obj['completedBy'] = completedBy;
        obj['executionId'] = executionId;
        obj['input'] = input;
        obj['status'] = status;
        obj['transitionId'] = transitionId;
    }

    /**
     * Constructs a <code>TransitionExecutionsExecutionsInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransitionExecutionsExecutionsInner} obj Optional instance to populate.
     * @return {module:model/TransitionExecutionsExecutionsInner} The populated <code>TransitionExecutionsExecutionsInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TransitionExecutionsExecutionsInner();

            if (data.hasOwnProperty('completedBy')) {
                obj['completedBy'] = ApiClient.convertToType(data['completedBy'], 'String');
            }
            if (data.hasOwnProperty('endTime')) {
                obj['endTime'] = ApiClient.convertToType(data['endTime'], 'String');
            }
            if (data.hasOwnProperty('executionId')) {
                obj['executionId'] = ApiClient.convertToType(data['executionId'], 'String');
            }
            if (data.hasOwnProperty('input')) {
                obj['input'] = ApiClient.convertToType(data['input'], Object);
            }
            if (data.hasOwnProperty('logId')) {
                obj['logId'] = ApiClient.convertToType(data['logId'], 'String');
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('transitionId')) {
                obj['transitionId'] = LogsTransitionId.constructFromObject(data['transitionId']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TransitionExecutionsExecutionsInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TransitionExecutionsExecutionsInner</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TransitionExecutionsExecutionsInner.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['completedBy'] && !(typeof data['completedBy'] === 'string' || data['completedBy'] instanceof String)) {
            throw new Error("Expected the field `completedBy` to be a primitive type in the JSON string but got " + data['completedBy']);
        }
        // ensure the json data is a string
        if (data['endTime'] && !(typeof data['endTime'] === 'string' || data['endTime'] instanceof String)) {
            throw new Error("Expected the field `endTime` to be a primitive type in the JSON string but got " + data['endTime']);
        }
        // ensure the json data is a string
        if (data['executionId'] && !(typeof data['executionId'] === 'string' || data['executionId'] instanceof String)) {
            throw new Error("Expected the field `executionId` to be a primitive type in the JSON string but got " + data['executionId']);
        }
        // ensure the json data is a string
        if (data['logId'] && !(typeof data['logId'] === 'string' || data['logId'] instanceof String)) {
            throw new Error("Expected the field `logId` to be a primitive type in the JSON string but got " + data['logId']);
        }
        // ensure the json data is a string
        if (data['startTime'] && !(typeof data['startTime'] === 'string' || data['startTime'] instanceof String)) {
            throw new Error("Expected the field `startTime` to be a primitive type in the JSON string but got " + data['startTime']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // validate the optional field `transitionId`
        if (data['transitionId']) { // data not null
          LogsTransitionId.validateJSON(data['transitionId']);
        }

        return true;
    }


}

TransitionExecutionsExecutionsInner.RequiredProperties = ["completedBy", "executionId", "input", "status", "transitionId"];

/**
 * @member {String} completedBy
 */
TransitionExecutionsExecutionsInner.prototype['completedBy'] = undefined;

/**
 * @member {String} endTime
 */
TransitionExecutionsExecutionsInner.prototype['endTime'] = undefined;

/**
 * @member {String} executionId
 */
TransitionExecutionsExecutionsInner.prototype['executionId'] = undefined;

/**
 * @member {Object} input
 */
TransitionExecutionsExecutionsInner.prototype['input'] = undefined;

/**
 * @member {String} logId
 */
TransitionExecutionsExecutionsInner.prototype['logId'] = undefined;

/**
 * @member {String} startTime
 */
TransitionExecutionsExecutionsInner.prototype['startTime'] = undefined;

/**
 * @member {module:model/TransitionExecutionsExecutionsInner.StatusEnum} status
 */
TransitionExecutionsExecutionsInner.prototype['status'] = undefined;

/**
 * @member {module:model/LogsTransitionId} transitionId
 */
TransitionExecutionsExecutionsInner.prototype['transitionId'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
TransitionExecutionsExecutionsInner['StatusEnum'] = {

    /**
     * value: "running"
     * @const
     */
    "running": "running",

    /**
     * value: "succeeded"
     * @const
     */
    "succeeded": "succeeded",

    /**
     * value: "failed"
     * @const
     */
    "failed": "failed",

    /**
     * value: "rejected"
     * @const
     */
    "rejected": "rejected",

    /**
     * value: "retry"
     * @const
     */
    "retry": "retry"
};



export default TransitionExecutionsExecutionsInner;

