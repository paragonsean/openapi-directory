/**
 * Lucidtech API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-03-23T15:40:40Z
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PostTrainingsWarmStartConfig from './PostTrainingsWarmStartConfig';

/**
 * The PostTrainings model module.
 * @module model/PostTrainings
 * @version 2023-03-23T15:40:40Z
 */
class PostTrainings {
    /**
     * Constructs a new <code>PostTrainings</code>.
     * @alias module:model/PostTrainings
     */
    constructor() { 
        
        PostTrainings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PostTrainings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PostTrainings} obj Optional instance to populate.
     * @return {module:model/PostTrainings} The populated <code>PostTrainings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PostTrainings();

            if (data.hasOwnProperty('dataBundleIds')) {
                obj['dataBundleIds'] = ApiClient.convertToType(data['dataBundleIds'], ['String']);
            }
            if (data.hasOwnProperty('dataScientistAssistance')) {
                obj['dataScientistAssistance'] = ApiClient.convertToType(data['dataScientistAssistance'], 'Boolean');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('instanceType')) {
                obj['instanceType'] = ApiClient.convertToType(data['instanceType'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], Object);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('warmStartConfig')) {
                obj['warmStartConfig'] = PostTrainingsWarmStartConfig.constructFromObject(data['warmStartConfig']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PostTrainings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PostTrainings</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['dataBundleIds'])) {
            throw new Error("Expected the field `dataBundleIds` to be an array in the JSON data but got " + data['dataBundleIds']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['instanceType'] && !(typeof data['instanceType'] === 'string' || data['instanceType'] instanceof String)) {
            throw new Error("Expected the field `instanceType` to be a primitive type in the JSON string but got " + data['instanceType']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `warmStartConfig`
        if (data['warmStartConfig']) { // data not null
          PostTrainingsWarmStartConfig.validateJSON(data['warmStartConfig']);
        }

        return true;
    }


}



/**
 * @member {Array.<String>} dataBundleIds
 */
PostTrainings.prototype['dataBundleIds'] = undefined;

/**
 * @member {Boolean} dataScientistAssistance
 */
PostTrainings.prototype['dataScientistAssistance'] = undefined;

/**
 * @member {String} description
 */
PostTrainings.prototype['description'] = undefined;

/**
 * @member {module:model/PostTrainings.InstanceTypeEnum} instanceType
 */
PostTrainings.prototype['instanceType'] = undefined;

/**
 * @member {Object} metadata
 */
PostTrainings.prototype['metadata'] = undefined;

/**
 * @member {String} name
 */
PostTrainings.prototype['name'] = undefined;

/**
 * @member {module:model/PostTrainingsWarmStartConfig} warmStartConfig
 */
PostTrainings.prototype['warmStartConfig'] = undefined;





/**
 * Allowed values for the <code>instanceType</code> property.
 * @enum {String}
 * @readonly
 */
PostTrainings['InstanceTypeEnum'] = {

    /**
     * value: "small-gpu"
     * @const
     */
    "small-gpu": "small-gpu",

    /**
     * value: "medium-gpu"
     * @const
     */
    "medium-gpu": "medium-gpu",

    /**
     * value: "large-gpu"
     * @const
     */
    "large-gpu": "large-gpu"
};



export default PostTrainings;

