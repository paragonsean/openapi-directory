/**
 * Lucidtech API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-03-23T15:40:40Z
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PatchTransitionIdAssets from './PatchTransitionIdAssets';
import PatchTransitionIdParameters from './PatchTransitionIdParameters';

/**
 * The PatchTransitionId model module.
 * @module model/PatchTransitionId
 * @version 2023-03-23T15:40:40Z
 */
class PatchTransitionId {
    /**
     * Constructs a new <code>PatchTransitionId</code>.
     * @alias module:model/PatchTransitionId
     */
    constructor() { 
        
        PatchTransitionId.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PatchTransitionId</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PatchTransitionId} obj Optional instance to populate.
     * @return {module:model/PatchTransitionId} The populated <code>PatchTransitionId</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PatchTransitionId();

            if (data.hasOwnProperty('assets')) {
                obj['assets'] = PatchTransitionIdAssets.constructFromObject(data['assets']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('environment')) {
                obj['environment'] = ApiClient.convertToType(data['environment'], {'String': 'String'});
            }
            if (data.hasOwnProperty('environmentSecrets')) {
                obj['environmentSecrets'] = ApiClient.convertToType(data['environmentSecrets'], ['String']);
            }
            if (data.hasOwnProperty('inputJsonSchema')) {
                obj['inputJsonSchema'] = ApiClient.convertToType(data['inputJsonSchema'], Object);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('outputJsonSchema')) {
                obj['outputJsonSchema'] = ApiClient.convertToType(data['outputJsonSchema'], Object);
            }
            if (data.hasOwnProperty('parameters')) {
                obj['parameters'] = PatchTransitionIdParameters.constructFromObject(data['parameters']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PatchTransitionId</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PatchTransitionId</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['environmentSecrets'])) {
            throw new Error("Expected the field `environmentSecrets` to be an array in the JSON data but got " + data['environmentSecrets']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `parameters`
        if (data['parameters']) { // data not null
          PatchTransitionIdParameters.validateJSON(data['parameters']);
        }

        return true;
    }


}



/**
 * @member {module:model/PatchTransitionIdAssets} assets
 */
PatchTransitionId.prototype['assets'] = undefined;

/**
 * @member {String} description
 */
PatchTransitionId.prototype['description'] = undefined;

/**
 * @member {Object.<String, String>} environment
 */
PatchTransitionId.prototype['environment'] = undefined;

/**
 * @member {Array.<String>} environmentSecrets
 */
PatchTransitionId.prototype['environmentSecrets'] = undefined;

/**
 * @member {Object} inputJsonSchema
 */
PatchTransitionId.prototype['inputJsonSchema'] = undefined;

/**
 * @member {String} name
 */
PatchTransitionId.prototype['name'] = undefined;

/**
 * @member {Object} outputJsonSchema
 */
PatchTransitionId.prototype['outputJsonSchema'] = undefined;

/**
 * @member {module:model/PatchTransitionIdParameters} parameters
 */
PatchTransitionId.prototype['parameters'] = undefined;






export default PatchTransitionId;

