/**
 * Lucidtech API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-03-23T15:40:40Z
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ModelFieldConfigValueOneOf model module.
 * @module model/ModelFieldConfigValueOneOf
 * @version 2023-03-23T15:40:40Z
 */
class ModelFieldConfigValueOneOf {
    /**
     * Constructs a new <code>ModelFieldConfigValueOneOf</code>.
     * @alias module:model/ModelFieldConfigValueOneOf
     * @param type {module:model/ModelFieldConfigValueOneOf.TypeEnum} 
     */
    constructor(type) { 
        
        ModelFieldConfigValueOneOf.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
        obj['type'] = type;
    }

    /**
     * Constructs a <code>ModelFieldConfigValueOneOf</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ModelFieldConfigValueOneOf} obj Optional instance to populate.
     * @return {module:model/ModelFieldConfigValueOneOf} The populated <code>ModelFieldConfigValueOneOf</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ModelFieldConfigValueOneOf();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('enum')) {
                obj['enum'] = ApiClient.convertToType(data['enum'], ['String']);
            }
            if (data.hasOwnProperty('maxLength')) {
                obj['maxLength'] = ApiClient.convertToType(data['maxLength'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ModelFieldConfigValueOneOf</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ModelFieldConfigValueOneOf</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ModelFieldConfigValueOneOf.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['enum'])) {
            throw new Error("Expected the field `enum` to be an array in the JSON data but got " + data['enum']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

ModelFieldConfigValueOneOf.RequiredProperties = ["type"];

/**
 * @member {String} description
 */
ModelFieldConfigValueOneOf.prototype['description'] = undefined;

/**
 * @member {Array.<String>} enum
 */
ModelFieldConfigValueOneOf.prototype['enum'] = undefined;

/**
 * @member {Number} maxLength
 */
ModelFieldConfigValueOneOf.prototype['maxLength'] = undefined;

/**
 * @member {module:model/ModelFieldConfigValueOneOf.TypeEnum} type
 */
ModelFieldConfigValueOneOf.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
ModelFieldConfigValueOneOf['TypeEnum'] = {

    /**
     * value: "amount"
     * @const
     */
    "amount": "amount",

    /**
     * value: "date"
     * @const
     */
    "date": "date",

    /**
     * value: "digits"
     * @const
     */
    "digits": "digits",

    /**
     * value: "enum"
     * @const
     */
    "enum": "enum",

    /**
     * value: "numeric"
     * @const
     */
    "numeric": "numeric",

    /**
     * value: "string"
     * @const
     */
    "string": "string"
};



export default ModelFieldConfigValueOneOf;

