/**
 * Lucidtech API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-03-23T15:40:40Z
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import WorkflowExecutionsExecutionsInner from './WorkflowExecutionsExecutionsInner';

/**
 * The WorkflowExecutions model module.
 * @module model/WorkflowExecutions
 * @version 2023-03-23T15:40:40Z
 */
class WorkflowExecutions {
    /**
     * Constructs a new <code>WorkflowExecutions</code>.
     * @alias module:model/WorkflowExecutions
     * @param executions {Array.<module:model/WorkflowExecutionsExecutionsInner>} 
     * @param nextToken {String} 
     * @param workflowId {String} 
     */
    constructor(executions, nextToken, workflowId) { 
        
        WorkflowExecutions.initialize(this, executions, nextToken, workflowId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, executions, nextToken, workflowId) { 
        obj['executions'] = executions;
        obj['nextToken'] = nextToken;
        obj['workflowId'] = workflowId;
    }

    /**
     * Constructs a <code>WorkflowExecutions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WorkflowExecutions} obj Optional instance to populate.
     * @return {module:model/WorkflowExecutions} The populated <code>WorkflowExecutions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WorkflowExecutions();

            if (data.hasOwnProperty('executions')) {
                obj['executions'] = ApiClient.convertToType(data['executions'], [WorkflowExecutionsExecutionsInner]);
            }
            if (data.hasOwnProperty('nextToken')) {
                obj['nextToken'] = ApiClient.convertToType(data['nextToken'], 'String');
            }
            if (data.hasOwnProperty('order')) {
                obj['order'] = ApiClient.convertToType(data['order'], 'String');
            }
            if (data.hasOwnProperty('sortBy')) {
                obj['sortBy'] = ApiClient.convertToType(data['sortBy'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], ['String']);
            }
            if (data.hasOwnProperty('workflowId')) {
                obj['workflowId'] = ApiClient.convertToType(data['workflowId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WorkflowExecutions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WorkflowExecutions</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WorkflowExecutions.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['executions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['executions'])) {
                throw new Error("Expected the field `executions` to be an array in the JSON data but got " + data['executions']);
            }
            // validate the optional field `executions` (array)
            for (const item of data['executions']) {
                WorkflowExecutionsExecutionsInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['nextToken'] && !(typeof data['nextToken'] === 'string' || data['nextToken'] instanceof String)) {
            throw new Error("Expected the field `nextToken` to be a primitive type in the JSON string but got " + data['nextToken']);
        }
        // ensure the json data is a string
        if (data['order'] && !(typeof data['order'] === 'string' || data['order'] instanceof String)) {
            throw new Error("Expected the field `order` to be a primitive type in the JSON string but got " + data['order']);
        }
        // ensure the json data is a string
        if (data['sortBy'] && !(typeof data['sortBy'] === 'string' || data['sortBy'] instanceof String)) {
            throw new Error("Expected the field `sortBy` to be a primitive type in the JSON string but got " + data['sortBy']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['status'])) {
            throw new Error("Expected the field `status` to be an array in the JSON data but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['workflowId'] && !(typeof data['workflowId'] === 'string' || data['workflowId'] instanceof String)) {
            throw new Error("Expected the field `workflowId` to be a primitive type in the JSON string but got " + data['workflowId']);
        }

        return true;
    }


}

WorkflowExecutions.RequiredProperties = ["executions", "nextToken", "workflowId"];

/**
 * @member {Array.<module:model/WorkflowExecutionsExecutionsInner>} executions
 */
WorkflowExecutions.prototype['executions'] = undefined;

/**
 * @member {String} nextToken
 */
WorkflowExecutions.prototype['nextToken'] = undefined;

/**
 * @member {module:model/WorkflowExecutions.OrderEnum} order
 */
WorkflowExecutions.prototype['order'] = undefined;

/**
 * @member {module:model/WorkflowExecutions.SortByEnum} sortBy
 */
WorkflowExecutions.prototype['sortBy'] = undefined;

/**
 * @member {Array.<module:model/WorkflowExecutions.StatusEnum>} status
 */
WorkflowExecutions.prototype['status'] = undefined;

/**
 * @member {String} workflowId
 */
WorkflowExecutions.prototype['workflowId'] = undefined;





/**
 * Allowed values for the <code>order</code> property.
 * @enum {String}
 * @readonly
 */
WorkflowExecutions['OrderEnum'] = {

    /**
     * value: "ascending"
     * @const
     */
    "ascending": "ascending",

    /**
     * value: "descending"
     * @const
     */
    "descending": "descending"
};


/**
 * Allowed values for the <code>sortBy</code> property.
 * @enum {String}
 * @readonly
 */
WorkflowExecutions['SortByEnum'] = {

    /**
     * value: "startTime"
     * @const
     */
    "startTime": "startTime",

    /**
     * value: "endTime"
     * @const
     */
    "endTime": "endTime"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
WorkflowExecutions['StatusEnum'] = {

    /**
     * value: "running"
     * @const
     */
    "running": "running",

    /**
     * value: "succeeded"
     * @const
     */
    "succeeded": "succeeded",

    /**
     * value: "failed"
     * @const
     */
    "failed": "failed",

    /**
     * value: "rejected"
     * @const
     */
    "rejected": "rejected",

    /**
     * value: "retry"
     * @const
     */
    "retry": "retry",

    /**
     * value: "error"
     * @const
     */
    "error": "error"
};



export default WorkflowExecutions;

