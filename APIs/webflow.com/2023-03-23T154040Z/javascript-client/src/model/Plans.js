/**
 * Lucidtech API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-03-23T15:40:40Z
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PlansPlansInner from './PlansPlansInner';

/**
 * The Plans model module.
 * @module model/Plans
 * @version 2023-03-23T15:40:40Z
 */
class Plans {
    /**
     * Constructs a new <code>Plans</code>.
     * @alias module:model/Plans
     * @param nextToken {String} 
     * @param plans {Array.<module:model/PlansPlansInner>} 
     */
    constructor(nextToken, plans) { 
        
        Plans.initialize(this, nextToken, plans);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, nextToken, plans) { 
        obj['nextToken'] = nextToken;
        obj['plans'] = plans;
    }

    /**
     * Constructs a <code>Plans</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Plans} obj Optional instance to populate.
     * @return {module:model/Plans} The populated <code>Plans</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Plans();

            if (data.hasOwnProperty('nextToken')) {
                obj['nextToken'] = ApiClient.convertToType(data['nextToken'], 'String');
            }
            if (data.hasOwnProperty('plans')) {
                obj['plans'] = ApiClient.convertToType(data['plans'], [PlansPlansInner]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Plans</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Plans</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Plans.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['nextToken'] && !(typeof data['nextToken'] === 'string' || data['nextToken'] instanceof String)) {
            throw new Error("Expected the field `nextToken` to be a primitive type in the JSON string but got " + data['nextToken']);
        }
        if (data['plans']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['plans'])) {
                throw new Error("Expected the field `plans` to be an array in the JSON data but got " + data['plans']);
            }
            // validate the optional field `plans` (array)
            for (const item of data['plans']) {
                PlansPlansInner.validateJSON(item);
            };
        }

        return true;
    }


}

Plans.RequiredProperties = ["nextToken", "plans"];

/**
 * @member {String} nextToken
 */
Plans.prototype['nextToken'] = undefined;

/**
 * @member {Array.<module:model/PlansPlansInner>} plans
 */
Plans.prototype['plans'] = undefined;






export default Plans;

