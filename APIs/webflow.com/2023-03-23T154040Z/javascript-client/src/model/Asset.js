/**
 * Lucidtech API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-03-23T15:40:40Z
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Asset model module.
 * @module model/Asset
 * @version 2023-03-23T15:40:40Z
 */
class Asset {
    /**
     * Constructs a new <code>Asset</code>.
     * @alias module:model/Asset
     * @param assetId {String} 
     * @param contentMD5 {String} 
     * @param createdBy {String} 
     * @param createdTime {String} 
     * @param description {String} 
     * @param name {String} 
     * @param updatedBy {String} 
     * @param updatedTime {String} 
     */
    constructor(assetId, contentMD5, createdBy, createdTime, description, name, updatedBy, updatedTime) { 
        
        Asset.initialize(this, assetId, contentMD5, createdBy, createdTime, description, name, updatedBy, updatedTime);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, assetId, contentMD5, createdBy, createdTime, description, name, updatedBy, updatedTime) { 
        obj['assetId'] = assetId;
        obj['contentMD5'] = contentMD5;
        obj['createdBy'] = createdBy;
        obj['createdTime'] = createdTime;
        obj['description'] = description;
        obj['name'] = name;
        obj['updatedBy'] = updatedBy;
        obj['updatedTime'] = updatedTime;
    }

    /**
     * Constructs a <code>Asset</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Asset} obj Optional instance to populate.
     * @return {module:model/Asset} The populated <code>Asset</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Asset();

            if (data.hasOwnProperty('assetId')) {
                obj['assetId'] = ApiClient.convertToType(data['assetId'], 'String');
            }
            if (data.hasOwnProperty('content')) {
                obj['content'] = ApiClient.convertToType(data['content'], 'String');
            }
            if (data.hasOwnProperty('contentMD5')) {
                obj['contentMD5'] = ApiClient.convertToType(data['contentMD5'], 'String');
            }
            if (data.hasOwnProperty('createdBy')) {
                obj['createdBy'] = ApiClient.convertToType(data['createdBy'], 'String');
            }
            if (data.hasOwnProperty('createdTime')) {
                obj['createdTime'] = ApiClient.convertToType(data['createdTime'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('updatedBy')) {
                obj['updatedBy'] = ApiClient.convertToType(data['updatedBy'], 'String');
            }
            if (data.hasOwnProperty('updatedTime')) {
                obj['updatedTime'] = ApiClient.convertToType(data['updatedTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Asset</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Asset</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Asset.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['assetId'] && !(typeof data['assetId'] === 'string' || data['assetId'] instanceof String)) {
            throw new Error("Expected the field `assetId` to be a primitive type in the JSON string but got " + data['assetId']);
        }
        // ensure the json data is a string
        if (data['content'] && !(typeof data['content'] === 'string' || data['content'] instanceof String)) {
            throw new Error("Expected the field `content` to be a primitive type in the JSON string but got " + data['content']);
        }
        // ensure the json data is a string
        if (data['contentMD5'] && !(typeof data['contentMD5'] === 'string' || data['contentMD5'] instanceof String)) {
            throw new Error("Expected the field `contentMD5` to be a primitive type in the JSON string but got " + data['contentMD5']);
        }
        // ensure the json data is a string
        if (data['createdBy'] && !(typeof data['createdBy'] === 'string' || data['createdBy'] instanceof String)) {
            throw new Error("Expected the field `createdBy` to be a primitive type in the JSON string but got " + data['createdBy']);
        }
        // ensure the json data is a string
        if (data['createdTime'] && !(typeof data['createdTime'] === 'string' || data['createdTime'] instanceof String)) {
            throw new Error("Expected the field `createdTime` to be a primitive type in the JSON string but got " + data['createdTime']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['updatedBy'] && !(typeof data['updatedBy'] === 'string' || data['updatedBy'] instanceof String)) {
            throw new Error("Expected the field `updatedBy` to be a primitive type in the JSON string but got " + data['updatedBy']);
        }
        // ensure the json data is a string
        if (data['updatedTime'] && !(typeof data['updatedTime'] === 'string' || data['updatedTime'] instanceof String)) {
            throw new Error("Expected the field `updatedTime` to be a primitive type in the JSON string but got " + data['updatedTime']);
        }

        return true;
    }


}

Asset.RequiredProperties = ["assetId", "contentMD5", "createdBy", "createdTime", "description", "name", "updatedBy", "updatedTime"];

/**
 * @member {String} assetId
 */
Asset.prototype['assetId'] = undefined;

/**
 * @member {String} content
 */
Asset.prototype['content'] = undefined;

/**
 * @member {String} contentMD5
 */
Asset.prototype['contentMD5'] = undefined;

/**
 * @member {String} createdBy
 */
Asset.prototype['createdBy'] = undefined;

/**
 * @member {String} createdTime
 */
Asset.prototype['createdTime'] = undefined;

/**
 * @member {String} description
 */
Asset.prototype['description'] = undefined;

/**
 * @member {String} name
 */
Asset.prototype['name'] = undefined;

/**
 * @member {String} updatedBy
 */
Asset.prototype['updatedBy'] = undefined;

/**
 * @member {String} updatedTime
 */
Asset.prototype['updatedTime'] = undefined;






export default Asset;

