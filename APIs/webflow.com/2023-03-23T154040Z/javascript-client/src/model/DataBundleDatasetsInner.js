/**
 * Lucidtech API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-03-23T15:40:40Z
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DataBundleDatasetsInner model module.
 * @module model/DataBundleDatasetsInner
 * @version 2023-03-23T15:40:40Z
 */
class DataBundleDatasetsInner {
    /**
     * Constructs a new <code>DataBundleDatasetsInner</code>.
     * @alias module:model/DataBundleDatasetsInner
     * @param containsPersonallyIdentifiableInformation {Boolean} 
     * @param datasetId {String} 
     * @param description {String} 
     * @param numberOfDocuments {Number} 
     * @param retentionInDays {Number} 
     * @param storageLocation {module:model/DataBundleDatasetsInner.StorageLocationEnum} 
     * @param version {Number} 
     */
    constructor(containsPersonallyIdentifiableInformation, datasetId, description, numberOfDocuments, retentionInDays, storageLocation, version) { 
        
        DataBundleDatasetsInner.initialize(this, containsPersonallyIdentifiableInformation, datasetId, description, numberOfDocuments, retentionInDays, storageLocation, version);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, containsPersonallyIdentifiableInformation, datasetId, description, numberOfDocuments, retentionInDays, storageLocation, version) { 
        obj['containsPersonallyIdentifiableInformation'] = containsPersonallyIdentifiableInformation;
        obj['datasetId'] = datasetId;
        obj['description'] = description;
        obj['numberOfDocuments'] = numberOfDocuments;
        obj['retentionInDays'] = retentionInDays;
        obj['storageLocation'] = storageLocation;
        obj['version'] = version;
    }

    /**
     * Constructs a <code>DataBundleDatasetsInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DataBundleDatasetsInner} obj Optional instance to populate.
     * @return {module:model/DataBundleDatasetsInner} The populated <code>DataBundleDatasetsInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DataBundleDatasetsInner();

            if (data.hasOwnProperty('containsPersonallyIdentifiableInformation')) {
                obj['containsPersonallyIdentifiableInformation'] = ApiClient.convertToType(data['containsPersonallyIdentifiableInformation'], 'Boolean');
            }
            if (data.hasOwnProperty('createdBy')) {
                obj['createdBy'] = ApiClient.convertToType(data['createdBy'], 'String');
            }
            if (data.hasOwnProperty('createdTime')) {
                obj['createdTime'] = ApiClient.convertToType(data['createdTime'], 'String');
            }
            if (data.hasOwnProperty('datasetId')) {
                obj['datasetId'] = ApiClient.convertToType(data['datasetId'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('groundTruthSummary')) {
                obj['groundTruthSummary'] = ApiClient.convertToType(data['groundTruthSummary'], Object);
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], Object);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('numberOfDocuments')) {
                obj['numberOfDocuments'] = ApiClient.convertToType(data['numberOfDocuments'], 'Number');
            }
            if (data.hasOwnProperty('retentionInDays')) {
                obj['retentionInDays'] = ApiClient.convertToType(data['retentionInDays'], 'Number');
            }
            if (data.hasOwnProperty('storageLocation')) {
                obj['storageLocation'] = ApiClient.convertToType(data['storageLocation'], 'String');
            }
            if (data.hasOwnProperty('updatedBy')) {
                obj['updatedBy'] = ApiClient.convertToType(data['updatedBy'], 'String');
            }
            if (data.hasOwnProperty('updatedTime')) {
                obj['updatedTime'] = ApiClient.convertToType(data['updatedTime'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DataBundleDatasetsInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DataBundleDatasetsInner</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DataBundleDatasetsInner.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['createdBy'] && !(typeof data['createdBy'] === 'string' || data['createdBy'] instanceof String)) {
            throw new Error("Expected the field `createdBy` to be a primitive type in the JSON string but got " + data['createdBy']);
        }
        // ensure the json data is a string
        if (data['createdTime'] && !(typeof data['createdTime'] === 'string' || data['createdTime'] instanceof String)) {
            throw new Error("Expected the field `createdTime` to be a primitive type in the JSON string but got " + data['createdTime']);
        }
        // ensure the json data is a string
        if (data['datasetId'] && !(typeof data['datasetId'] === 'string' || data['datasetId'] instanceof String)) {
            throw new Error("Expected the field `datasetId` to be a primitive type in the JSON string but got " + data['datasetId']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['storageLocation'] && !(typeof data['storageLocation'] === 'string' || data['storageLocation'] instanceof String)) {
            throw new Error("Expected the field `storageLocation` to be a primitive type in the JSON string but got " + data['storageLocation']);
        }
        // ensure the json data is a string
        if (data['updatedBy'] && !(typeof data['updatedBy'] === 'string' || data['updatedBy'] instanceof String)) {
            throw new Error("Expected the field `updatedBy` to be a primitive type in the JSON string but got " + data['updatedBy']);
        }
        // ensure the json data is a string
        if (data['updatedTime'] && !(typeof data['updatedTime'] === 'string' || data['updatedTime'] instanceof String)) {
            throw new Error("Expected the field `updatedTime` to be a primitive type in the JSON string but got " + data['updatedTime']);
        }

        return true;
    }


}

DataBundleDatasetsInner.RequiredProperties = ["containsPersonallyIdentifiableInformation", "datasetId", "description", "numberOfDocuments", "retentionInDays", "storageLocation", "version"];

/**
 * @member {Boolean} containsPersonallyIdentifiableInformation
 */
DataBundleDatasetsInner.prototype['containsPersonallyIdentifiableInformation'] = undefined;

/**
 * @member {String} createdBy
 */
DataBundleDatasetsInner.prototype['createdBy'] = undefined;

/**
 * @member {String} createdTime
 */
DataBundleDatasetsInner.prototype['createdTime'] = undefined;

/**
 * @member {String} datasetId
 */
DataBundleDatasetsInner.prototype['datasetId'] = undefined;

/**
 * @member {String} description
 */
DataBundleDatasetsInner.prototype['description'] = undefined;

/**
 * @member {Object} groundTruthSummary
 */
DataBundleDatasetsInner.prototype['groundTruthSummary'] = undefined;

/**
 * @member {Object} metadata
 */
DataBundleDatasetsInner.prototype['metadata'] = undefined;

/**
 * @member {String} name
 */
DataBundleDatasetsInner.prototype['name'] = undefined;

/**
 * @member {Number} numberOfDocuments
 */
DataBundleDatasetsInner.prototype['numberOfDocuments'] = undefined;

/**
 * @member {Number} retentionInDays
 */
DataBundleDatasetsInner.prototype['retentionInDays'] = undefined;

/**
 * @member {module:model/DataBundleDatasetsInner.StorageLocationEnum} storageLocation
 */
DataBundleDatasetsInner.prototype['storageLocation'] = undefined;

/**
 * @member {String} updatedBy
 */
DataBundleDatasetsInner.prototype['updatedBy'] = undefined;

/**
 * @member {String} updatedTime
 */
DataBundleDatasetsInner.prototype['updatedTime'] = undefined;

/**
 * @member {Number} version
 */
DataBundleDatasetsInner.prototype['version'] = undefined;





/**
 * Allowed values for the <code>storageLocation</code> property.
 * @enum {String}
 * @readonly
 */
DataBundleDatasetsInner['StorageLocationEnum'] = {

    /**
     * value: "EU"
     * @const
     */
    "EU": "EU"
};



export default DataBundleDatasetsInner;

