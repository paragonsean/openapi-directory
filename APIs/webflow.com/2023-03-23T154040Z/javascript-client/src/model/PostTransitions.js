/**
 * Lucidtech API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-03-23T15:40:40Z
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PostTransitionsParameters from './PostTransitionsParameters';

/**
 * The PostTransitions model module.
 * @module model/PostTransitions
 * @version 2023-03-23T15:40:40Z
 */
class PostTransitions {
    /**
     * Constructs a new <code>PostTransitions</code>.
     * @alias module:model/PostTransitions
     * @param transitionType {module:model/PostTransitions.TransitionTypeEnum} 
     */
    constructor(transitionType) { 
        
        PostTransitions.initialize(this, transitionType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, transitionType) { 
        obj['transitionType'] = transitionType;
    }

    /**
     * Constructs a <code>PostTransitions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PostTransitions} obj Optional instance to populate.
     * @return {module:model/PostTransitions} The populated <code>PostTransitions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PostTransitions();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('inputJsonSchema')) {
                obj['inputJsonSchema'] = ApiClient.convertToType(data['inputJsonSchema'], Object);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('outputJsonSchema')) {
                obj['outputJsonSchema'] = ApiClient.convertToType(data['outputJsonSchema'], Object);
            }
            if (data.hasOwnProperty('parameters')) {
                obj['parameters'] = PostTransitionsParameters.constructFromObject(data['parameters']);
            }
            if (data.hasOwnProperty('timeoutInSeconds')) {
                obj['timeoutInSeconds'] = ApiClient.convertToType(data['timeoutInSeconds'], 'Number');
            }
            if (data.hasOwnProperty('transitionType')) {
                obj['transitionType'] = ApiClient.convertToType(data['transitionType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PostTransitions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PostTransitions</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PostTransitions.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `parameters`
        if (data['parameters']) { // data not null
          PostTransitionsParameters.validateJSON(data['parameters']);
        }
        // ensure the json data is a string
        if (data['transitionType'] && !(typeof data['transitionType'] === 'string' || data['transitionType'] instanceof String)) {
            throw new Error("Expected the field `transitionType` to be a primitive type in the JSON string but got " + data['transitionType']);
        }

        return true;
    }


}

PostTransitions.RequiredProperties = ["transitionType"];

/**
 * @member {String} description
 */
PostTransitions.prototype['description'] = undefined;

/**
 * @member {Object} inputJsonSchema
 */
PostTransitions.prototype['inputJsonSchema'] = undefined;

/**
 * @member {String} name
 */
PostTransitions.prototype['name'] = undefined;

/**
 * @member {Object} outputJsonSchema
 */
PostTransitions.prototype['outputJsonSchema'] = undefined;

/**
 * @member {module:model/PostTransitionsParameters} parameters
 */
PostTransitions.prototype['parameters'] = undefined;

/**
 * @member {Number} timeoutInSeconds
 */
PostTransitions.prototype['timeoutInSeconds'] = undefined;

/**
 * @member {module:model/PostTransitions.TransitionTypeEnum} transitionType
 */
PostTransitions.prototype['transitionType'] = undefined;





/**
 * Allowed values for the <code>transitionType</code> property.
 * @enum {String}
 * @readonly
 */
PostTransitions['TransitionTypeEnum'] = {

    /**
     * value: "docker"
     * @const
     */
    "docker": "docker",

    /**
     * value: "manual"
     * @const
     */
    "manual": "manual"
};



export default PostTransitions;

