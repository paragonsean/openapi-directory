/**
 * Lucidtech API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-03-23T15:40:40Z
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LogsLogsInner from './LogsLogsInner';
import LogsTransitionId from './LogsTransitionId';

/**
 * The Logs model module.
 * @module model/Logs
 * @version 2023-03-23T15:40:40Z
 */
class Logs {
    /**
     * Constructs a new <code>Logs</code>.
     * @alias module:model/Logs
     * @param logs {Array.<module:model/LogsLogsInner>} 
     * @param nextToken {String} 
     */
    constructor(logs, nextToken) { 
        
        Logs.initialize(this, logs, nextToken);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, logs, nextToken) { 
        obj['logs'] = logs;
        obj['nextToken'] = nextToken;
    }

    /**
     * Constructs a <code>Logs</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Logs} obj Optional instance to populate.
     * @return {module:model/Logs} The populated <code>Logs</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Logs();

            if (data.hasOwnProperty('logs')) {
                obj['logs'] = ApiClient.convertToType(data['logs'], [LogsLogsInner]);
            }
            if (data.hasOwnProperty('nextToken')) {
                obj['nextToken'] = ApiClient.convertToType(data['nextToken'], 'String');
            }
            if (data.hasOwnProperty('order')) {
                obj['order'] = ApiClient.convertToType(data['order'], 'String');
            }
            if (data.hasOwnProperty('transitionExecutionId')) {
                obj['transitionExecutionId'] = ApiClient.convertToType(data['transitionExecutionId'], 'String');
            }
            if (data.hasOwnProperty('transitionId')) {
                obj['transitionId'] = LogsTransitionId.constructFromObject(data['transitionId']);
            }
            if (data.hasOwnProperty('workflowExecutionId')) {
                obj['workflowExecutionId'] = ApiClient.convertToType(data['workflowExecutionId'], 'String');
            }
            if (data.hasOwnProperty('workflowId')) {
                obj['workflowId'] = ApiClient.convertToType(data['workflowId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Logs</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Logs</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Logs.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['logs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['logs'])) {
                throw new Error("Expected the field `logs` to be an array in the JSON data but got " + data['logs']);
            }
            // validate the optional field `logs` (array)
            for (const item of data['logs']) {
                LogsLogsInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['nextToken'] && !(typeof data['nextToken'] === 'string' || data['nextToken'] instanceof String)) {
            throw new Error("Expected the field `nextToken` to be a primitive type in the JSON string but got " + data['nextToken']);
        }
        // ensure the json data is a string
        if (data['order'] && !(typeof data['order'] === 'string' || data['order'] instanceof String)) {
            throw new Error("Expected the field `order` to be a primitive type in the JSON string but got " + data['order']);
        }
        // ensure the json data is a string
        if (data['transitionExecutionId'] && !(typeof data['transitionExecutionId'] === 'string' || data['transitionExecutionId'] instanceof String)) {
            throw new Error("Expected the field `transitionExecutionId` to be a primitive type in the JSON string but got " + data['transitionExecutionId']);
        }
        // validate the optional field `transitionId`
        if (data['transitionId']) { // data not null
          LogsTransitionId.validateJSON(data['transitionId']);
        }
        // ensure the json data is a string
        if (data['workflowExecutionId'] && !(typeof data['workflowExecutionId'] === 'string' || data['workflowExecutionId'] instanceof String)) {
            throw new Error("Expected the field `workflowExecutionId` to be a primitive type in the JSON string but got " + data['workflowExecutionId']);
        }
        // ensure the json data is a string
        if (data['workflowId'] && !(typeof data['workflowId'] === 'string' || data['workflowId'] instanceof String)) {
            throw new Error("Expected the field `workflowId` to be a primitive type in the JSON string but got " + data['workflowId']);
        }

        return true;
    }


}

Logs.RequiredProperties = ["logs", "nextToken"];

/**
 * @member {Array.<module:model/LogsLogsInner>} logs
 */
Logs.prototype['logs'] = undefined;

/**
 * @member {String} nextToken
 */
Logs.prototype['nextToken'] = undefined;

/**
 * @member {module:model/Logs.OrderEnum} order
 */
Logs.prototype['order'] = undefined;

/**
 * @member {String} transitionExecutionId
 */
Logs.prototype['transitionExecutionId'] = undefined;

/**
 * @member {module:model/LogsTransitionId} transitionId
 */
Logs.prototype['transitionId'] = undefined;

/**
 * @member {String} workflowExecutionId
 */
Logs.prototype['workflowExecutionId'] = undefined;

/**
 * @member {String} workflowId
 */
Logs.prototype['workflowId'] = undefined;





/**
 * Allowed values for the <code>order</code> property.
 * @enum {String}
 * @readonly
 */
Logs['OrderEnum'] = {

    /**
     * value: "ascending"
     * @const
     */
    "ascending": "ascending",

    /**
     * value: "descending"
     * @const
     */
    "descending": "descending"
};



export default Logs;

