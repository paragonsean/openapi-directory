/**
 * Lucidtech API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-03-23T15:40:40Z
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PredictionPostprocessConfig from './PredictionPostprocessConfig';
import PredictionPredictionsInner from './PredictionPredictionsInner';
import PredictionPreprocessConfig from './PredictionPreprocessConfig';

/**
 * The PredictionsPredictionsInner model module.
 * @module model/PredictionsPredictionsInner
 * @version 2023-03-23T15:40:40Z
 */
class PredictionsPredictionsInner {
    /**
     * Constructs a new <code>PredictionsPredictionsInner</code>.
     * @alias module:model/PredictionsPredictionsInner
     * @param documentId {String} 
     * @param inferenceTime {Number} 
     * @param modelId {String} 
     * @param predictionId {String} 
     * @param predictions {Array.<module:model/PredictionPredictionsInner>} 
     */
    constructor(documentId, inferenceTime, modelId, predictionId, predictions) { 
        
        PredictionsPredictionsInner.initialize(this, documentId, inferenceTime, modelId, predictionId, predictions);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, documentId, inferenceTime, modelId, predictionId, predictions) { 
        obj['documentId'] = documentId;
        obj['inferenceTime'] = inferenceTime;
        obj['modelId'] = modelId;
        obj['predictionId'] = predictionId;
        obj['predictions'] = predictions;
    }

    /**
     * Constructs a <code>PredictionsPredictionsInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PredictionsPredictionsInner} obj Optional instance to populate.
     * @return {module:model/PredictionsPredictionsInner} The populated <code>PredictionsPredictionsInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PredictionsPredictionsInner();

            if (data.hasOwnProperty('createdBy')) {
                obj['createdBy'] = ApiClient.convertToType(data['createdBy'], 'String');
            }
            if (data.hasOwnProperty('createdTime')) {
                obj['createdTime'] = ApiClient.convertToType(data['createdTime'], 'String');
            }
            if (data.hasOwnProperty('documentId')) {
                obj['documentId'] = ApiClient.convertToType(data['documentId'], 'String');
            }
            if (data.hasOwnProperty('inferenceTime')) {
                obj['inferenceTime'] = ApiClient.convertToType(data['inferenceTime'], 'Number');
            }
            if (data.hasOwnProperty('modelId')) {
                obj['modelId'] = ApiClient.convertToType(data['modelId'], 'String');
            }
            if (data.hasOwnProperty('postprocessConfig')) {
                obj['postprocessConfig'] = PredictionPostprocessConfig.constructFromObject(data['postprocessConfig']);
            }
            if (data.hasOwnProperty('predictionId')) {
                obj['predictionId'] = ApiClient.convertToType(data['predictionId'], 'String');
            }
            if (data.hasOwnProperty('predictions')) {
                obj['predictions'] = ApiClient.convertToType(data['predictions'], [PredictionPredictionsInner]);
            }
            if (data.hasOwnProperty('preprocessConfig')) {
                obj['preprocessConfig'] = PredictionPreprocessConfig.constructFromObject(data['preprocessConfig']);
            }
            if (data.hasOwnProperty('trainingId')) {
                obj['trainingId'] = ApiClient.convertToType(data['trainingId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PredictionsPredictionsInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PredictionsPredictionsInner</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PredictionsPredictionsInner.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['createdBy'] && !(typeof data['createdBy'] === 'string' || data['createdBy'] instanceof String)) {
            throw new Error("Expected the field `createdBy` to be a primitive type in the JSON string but got " + data['createdBy']);
        }
        // ensure the json data is a string
        if (data['createdTime'] && !(typeof data['createdTime'] === 'string' || data['createdTime'] instanceof String)) {
            throw new Error("Expected the field `createdTime` to be a primitive type in the JSON string but got " + data['createdTime']);
        }
        // ensure the json data is a string
        if (data['documentId'] && !(typeof data['documentId'] === 'string' || data['documentId'] instanceof String)) {
            throw new Error("Expected the field `documentId` to be a primitive type in the JSON string but got " + data['documentId']);
        }
        // ensure the json data is a string
        if (data['modelId'] && !(typeof data['modelId'] === 'string' || data['modelId'] instanceof String)) {
            throw new Error("Expected the field `modelId` to be a primitive type in the JSON string but got " + data['modelId']);
        }
        // validate the optional field `postprocessConfig`
        if (data['postprocessConfig']) { // data not null
          PredictionPostprocessConfig.validateJSON(data['postprocessConfig']);
        }
        // ensure the json data is a string
        if (data['predictionId'] && !(typeof data['predictionId'] === 'string' || data['predictionId'] instanceof String)) {
            throw new Error("Expected the field `predictionId` to be a primitive type in the JSON string but got " + data['predictionId']);
        }
        if (data['predictions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['predictions'])) {
                throw new Error("Expected the field `predictions` to be an array in the JSON data but got " + data['predictions']);
            }
            // validate the optional field `predictions` (array)
            for (const item of data['predictions']) {
                PredictionPredictionsInner.validateJSON(item);
            };
        }
        // validate the optional field `preprocessConfig`
        if (data['preprocessConfig']) { // data not null
          PredictionPreprocessConfig.validateJSON(data['preprocessConfig']);
        }
        // ensure the json data is a string
        if (data['trainingId'] && !(typeof data['trainingId'] === 'string' || data['trainingId'] instanceof String)) {
            throw new Error("Expected the field `trainingId` to be a primitive type in the JSON string but got " + data['trainingId']);
        }

        return true;
    }


}

PredictionsPredictionsInner.RequiredProperties = ["documentId", "inferenceTime", "modelId", "predictionId", "predictions"];

/**
 * @member {String} createdBy
 */
PredictionsPredictionsInner.prototype['createdBy'] = undefined;

/**
 * @member {String} createdTime
 */
PredictionsPredictionsInner.prototype['createdTime'] = undefined;

/**
 * @member {String} documentId
 */
PredictionsPredictionsInner.prototype['documentId'] = undefined;

/**
 * @member {Number} inferenceTime
 */
PredictionsPredictionsInner.prototype['inferenceTime'] = undefined;

/**
 * @member {String} modelId
 */
PredictionsPredictionsInner.prototype['modelId'] = undefined;

/**
 * @member {module:model/PredictionPostprocessConfig} postprocessConfig
 */
PredictionsPredictionsInner.prototype['postprocessConfig'] = undefined;

/**
 * @member {String} predictionId
 */
PredictionsPredictionsInner.prototype['predictionId'] = undefined;

/**
 * @member {Array.<module:model/PredictionPredictionsInner>} predictions
 */
PredictionsPredictionsInner.prototype['predictions'] = undefined;

/**
 * @member {module:model/PredictionPreprocessConfig} preprocessConfig
 */
PredictionsPredictionsInner.prototype['preprocessConfig'] = undefined;

/**
 * @member {String} trainingId
 */
PredictionsPredictionsInner.prototype['trainingId'] = undefined;






export default PredictionsPredictionsInner;

