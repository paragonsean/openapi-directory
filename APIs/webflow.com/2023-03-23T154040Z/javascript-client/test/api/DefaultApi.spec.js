/**
 * Lucidtech API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-03-23T15:40:40Z
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.LucidtechApi);
  }
}(this, function(expect, LucidtechApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new LucidtechApi.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('appClientsAppClientIdDelete', function() {
      it('should call appClientsAppClientIdDelete successfully', function(done) {
        //uncomment below and update the code to test appClientsAppClientIdDelete
        //instance.appClientsAppClientIdDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('appClientsAppClientIdOptions', function() {
      it('should call appClientsAppClientIdOptions successfully', function(done) {
        //uncomment below and update the code to test appClientsAppClientIdOptions
        //instance.appClientsAppClientIdOptions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('appClientsAppClientIdPatch', function() {
      it('should call appClientsAppClientIdPatch successfully', function(done) {
        //uncomment below and update the code to test appClientsAppClientIdPatch
        //instance.appClientsAppClientIdPatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('appClientsGet', function() {
      it('should call appClientsGet successfully', function(done) {
        //uncomment below and update the code to test appClientsGet
        //instance.appClientsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('appClientsOptions', function() {
      it('should call appClientsOptions successfully', function(done) {
        //uncomment below and update the code to test appClientsOptions
        //instance.appClientsOptions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('appClientsPost', function() {
      it('should call appClientsPost successfully', function(done) {
        //uncomment below and update the code to test appClientsPost
        //instance.appClientsPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('assetsAssetIdDelete', function() {
      it('should call assetsAssetIdDelete successfully', function(done) {
        //uncomment below and update the code to test assetsAssetIdDelete
        //instance.assetsAssetIdDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('assetsAssetIdGet', function() {
      it('should call assetsAssetIdGet successfully', function(done) {
        //uncomment below and update the code to test assetsAssetIdGet
        //instance.assetsAssetIdGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('assetsAssetIdOptions', function() {
      it('should call assetsAssetIdOptions successfully', function(done) {
        //uncomment below and update the code to test assetsAssetIdOptions
        //instance.assetsAssetIdOptions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('assetsAssetIdPatch', function() {
      it('should call assetsAssetIdPatch successfully', function(done) {
        //uncomment below and update the code to test assetsAssetIdPatch
        //instance.assetsAssetIdPatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('assetsGet', function() {
      it('should call assetsGet successfully', function(done) {
        //uncomment below and update the code to test assetsGet
        //instance.assetsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('assetsOptions', function() {
      it('should call assetsOptions successfully', function(done) {
        //uncomment below and update the code to test assetsOptions
        //instance.assetsOptions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('assetsPost', function() {
      it('should call assetsPost successfully', function(done) {
        //uncomment below and update the code to test assetsPost
        //instance.assetsPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('datasetsDatasetIdDelete', function() {
      it('should call datasetsDatasetIdDelete successfully', function(done) {
        //uncomment below and update the code to test datasetsDatasetIdDelete
        //instance.datasetsDatasetIdDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('datasetsDatasetIdGet', function() {
      it('should call datasetsDatasetIdGet successfully', function(done) {
        //uncomment below and update the code to test datasetsDatasetIdGet
        //instance.datasetsDatasetIdGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('datasetsDatasetIdOptions', function() {
      it('should call datasetsDatasetIdOptions successfully', function(done) {
        //uncomment below and update the code to test datasetsDatasetIdOptions
        //instance.datasetsDatasetIdOptions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('datasetsDatasetIdPatch', function() {
      it('should call datasetsDatasetIdPatch successfully', function(done) {
        //uncomment below and update the code to test datasetsDatasetIdPatch
        //instance.datasetsDatasetIdPatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('datasetsGet', function() {
      it('should call datasetsGet successfully', function(done) {
        //uncomment below and update the code to test datasetsGet
        //instance.datasetsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('datasetsOptions', function() {
      it('should call datasetsOptions successfully', function(done) {
        //uncomment below and update the code to test datasetsOptions
        //instance.datasetsOptions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('datasetsPost', function() {
      it('should call datasetsPost successfully', function(done) {
        //uncomment below and update the code to test datasetsPost
        //instance.datasetsPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deploymentEnvironmentsDeploymentEnvironmentIdGet', function() {
      it('should call deploymentEnvironmentsDeploymentEnvironmentIdGet successfully', function(done) {
        //uncomment below and update the code to test deploymentEnvironmentsDeploymentEnvironmentIdGet
        //instance.deploymentEnvironmentsDeploymentEnvironmentIdGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deploymentEnvironmentsDeploymentEnvironmentIdOptions', function() {
      it('should call deploymentEnvironmentsDeploymentEnvironmentIdOptions successfully', function(done) {
        //uncomment below and update the code to test deploymentEnvironmentsDeploymentEnvironmentIdOptions
        //instance.deploymentEnvironmentsDeploymentEnvironmentIdOptions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deploymentEnvironmentsGet', function() {
      it('should call deploymentEnvironmentsGet successfully', function(done) {
        //uncomment below and update the code to test deploymentEnvironmentsGet
        //instance.deploymentEnvironmentsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deploymentEnvironmentsOptions', function() {
      it('should call deploymentEnvironmentsOptions successfully', function(done) {
        //uncomment below and update the code to test deploymentEnvironmentsOptions
        //instance.deploymentEnvironmentsOptions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('documentsDelete', function() {
      it('should call documentsDelete successfully', function(done) {
        //uncomment below and update the code to test documentsDelete
        //instance.documentsDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('documentsDocumentIdDelete', function() {
      it('should call documentsDocumentIdDelete successfully', function(done) {
        //uncomment below and update the code to test documentsDocumentIdDelete
        //instance.documentsDocumentIdDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('documentsDocumentIdGet', function() {
      it('should call documentsDocumentIdGet successfully', function(done) {
        //uncomment below and update the code to test documentsDocumentIdGet
        //instance.documentsDocumentIdGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('documentsDocumentIdOptions', function() {
      it('should call documentsDocumentIdOptions successfully', function(done) {
        //uncomment below and update the code to test documentsDocumentIdOptions
        //instance.documentsDocumentIdOptions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('documentsDocumentIdPatch', function() {
      it('should call documentsDocumentIdPatch successfully', function(done) {
        //uncomment below and update the code to test documentsDocumentIdPatch
        //instance.documentsDocumentIdPatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('documentsGet', function() {
      it('should call documentsGet successfully', function(done) {
        //uncomment below and update the code to test documentsGet
        //instance.documentsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('documentsOptions', function() {
      it('should call documentsOptions successfully', function(done) {
        //uncomment below and update the code to test documentsOptions
        //instance.documentsOptions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('documentsPost', function() {
      it('should call documentsPost successfully', function(done) {
        //uncomment below and update the code to test documentsPost
        //instance.documentsPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('logsGet', function() {
      it('should call logsGet successfully', function(done) {
        //uncomment below and update the code to test logsGet
        //instance.logsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('logsLogIdGet', function() {
      it('should call logsLogIdGet successfully', function(done) {
        //uncomment below and update the code to test logsLogIdGet
        //instance.logsLogIdGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('logsLogIdOptions', function() {
      it('should call logsLogIdOptions successfully', function(done) {
        //uncomment below and update the code to test logsLogIdOptions
        //instance.logsLogIdOptions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('logsOptions', function() {
      it('should call logsOptions successfully', function(done) {
        //uncomment below and update the code to test logsOptions
        //instance.logsOptions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelsGet', function() {
      it('should call modelsGet successfully', function(done) {
        //uncomment below and update the code to test modelsGet
        //instance.modelsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelsModelIdDataBundlesDataBundleIdDelete', function() {
      it('should call modelsModelIdDataBundlesDataBundleIdDelete successfully', function(done) {
        //uncomment below and update the code to test modelsModelIdDataBundlesDataBundleIdDelete
        //instance.modelsModelIdDataBundlesDataBundleIdDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelsModelIdDataBundlesDataBundleIdOptions', function() {
      it('should call modelsModelIdDataBundlesDataBundleIdOptions successfully', function(done) {
        //uncomment below and update the code to test modelsModelIdDataBundlesDataBundleIdOptions
        //instance.modelsModelIdDataBundlesDataBundleIdOptions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelsModelIdDataBundlesDataBundleIdPatch', function() {
      it('should call modelsModelIdDataBundlesDataBundleIdPatch successfully', function(done) {
        //uncomment below and update the code to test modelsModelIdDataBundlesDataBundleIdPatch
        //instance.modelsModelIdDataBundlesDataBundleIdPatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelsModelIdDataBundlesGet', function() {
      it('should call modelsModelIdDataBundlesGet successfully', function(done) {
        //uncomment below and update the code to test modelsModelIdDataBundlesGet
        //instance.modelsModelIdDataBundlesGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelsModelIdDataBundlesOptions', function() {
      it('should call modelsModelIdDataBundlesOptions successfully', function(done) {
        //uncomment below and update the code to test modelsModelIdDataBundlesOptions
        //instance.modelsModelIdDataBundlesOptions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelsModelIdDataBundlesPost', function() {
      it('should call modelsModelIdDataBundlesPost successfully', function(done) {
        //uncomment below and update the code to test modelsModelIdDataBundlesPost
        //instance.modelsModelIdDataBundlesPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelsModelIdDelete', function() {
      it('should call modelsModelIdDelete successfully', function(done) {
        //uncomment below and update the code to test modelsModelIdDelete
        //instance.modelsModelIdDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelsModelIdGet', function() {
      it('should call modelsModelIdGet successfully', function(done) {
        //uncomment below and update the code to test modelsModelIdGet
        //instance.modelsModelIdGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelsModelIdOptions', function() {
      it('should call modelsModelIdOptions successfully', function(done) {
        //uncomment below and update the code to test modelsModelIdOptions
        //instance.modelsModelIdOptions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelsModelIdPatch', function() {
      it('should call modelsModelIdPatch successfully', function(done) {
        //uncomment below and update the code to test modelsModelIdPatch
        //instance.modelsModelIdPatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelsModelIdTrainingsGet', function() {
      it('should call modelsModelIdTrainingsGet successfully', function(done) {
        //uncomment below and update the code to test modelsModelIdTrainingsGet
        //instance.modelsModelIdTrainingsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelsModelIdTrainingsOptions', function() {
      it('should call modelsModelIdTrainingsOptions successfully', function(done) {
        //uncomment below and update the code to test modelsModelIdTrainingsOptions
        //instance.modelsModelIdTrainingsOptions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelsModelIdTrainingsPost', function() {
      it('should call modelsModelIdTrainingsPost successfully', function(done) {
        //uncomment below and update the code to test modelsModelIdTrainingsPost
        //instance.modelsModelIdTrainingsPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelsModelIdTrainingsTrainingIdOptions', function() {
      it('should call modelsModelIdTrainingsTrainingIdOptions successfully', function(done) {
        //uncomment below and update the code to test modelsModelIdTrainingsTrainingIdOptions
        //instance.modelsModelIdTrainingsTrainingIdOptions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelsModelIdTrainingsTrainingIdPatch', function() {
      it('should call modelsModelIdTrainingsTrainingIdPatch successfully', function(done) {
        //uncomment below and update the code to test modelsModelIdTrainingsTrainingIdPatch
        //instance.modelsModelIdTrainingsTrainingIdPatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelsOptions', function() {
      it('should call modelsOptions successfully', function(done) {
        //uncomment below and update the code to test modelsOptions
        //instance.modelsOptions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelsPost', function() {
      it('should call modelsPost successfully', function(done) {
        //uncomment below and update the code to test modelsPost
        //instance.modelsPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('organizationsGet', function() {
      it('should call organizationsGet successfully', function(done) {
        //uncomment below and update the code to test organizationsGet
        //instance.organizationsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('organizationsOptions', function() {
      it('should call organizationsOptions successfully', function(done) {
        //uncomment below and update the code to test organizationsOptions
        //instance.organizationsOptions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('organizationsOrganizationIdGet', function() {
      it('should call organizationsOrganizationIdGet successfully', function(done) {
        //uncomment below and update the code to test organizationsOrganizationIdGet
        //instance.organizationsOrganizationIdGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('organizationsOrganizationIdOptions', function() {
      it('should call organizationsOrganizationIdOptions successfully', function(done) {
        //uncomment below and update the code to test organizationsOrganizationIdOptions
        //instance.organizationsOrganizationIdOptions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('organizationsOrganizationIdPatch', function() {
      it('should call organizationsOrganizationIdPatch successfully', function(done) {
        //uncomment below and update the code to test organizationsOrganizationIdPatch
        //instance.organizationsOrganizationIdPatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('organizationsPost', function() {
      it('should call organizationsPost successfully', function(done) {
        //uncomment below and update the code to test organizationsPost
        //instance.organizationsPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('paymentMethodsGet', function() {
      it('should call paymentMethodsGet successfully', function(done) {
        //uncomment below and update the code to test paymentMethodsGet
        //instance.paymentMethodsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('paymentMethodsOptions', function() {
      it('should call paymentMethodsOptions successfully', function(done) {
        //uncomment below and update the code to test paymentMethodsOptions
        //instance.paymentMethodsOptions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('paymentMethodsPaymentMethodIdDelete', function() {
      it('should call paymentMethodsPaymentMethodIdDelete successfully', function(done) {
        //uncomment below and update the code to test paymentMethodsPaymentMethodIdDelete
        //instance.paymentMethodsPaymentMethodIdDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('paymentMethodsPaymentMethodIdGet', function() {
      it('should call paymentMethodsPaymentMethodIdGet successfully', function(done) {
        //uncomment below and update the code to test paymentMethodsPaymentMethodIdGet
        //instance.paymentMethodsPaymentMethodIdGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('paymentMethodsPaymentMethodIdOptions', function() {
      it('should call paymentMethodsPaymentMethodIdOptions successfully', function(done) {
        //uncomment below and update the code to test paymentMethodsPaymentMethodIdOptions
        //instance.paymentMethodsPaymentMethodIdOptions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('paymentMethodsPaymentMethodIdPatch', function() {
      it('should call paymentMethodsPaymentMethodIdPatch successfully', function(done) {
        //uncomment below and update the code to test paymentMethodsPaymentMethodIdPatch
        //instance.paymentMethodsPaymentMethodIdPatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('paymentMethodsPost', function() {
      it('should call paymentMethodsPost successfully', function(done) {
        //uncomment below and update the code to test paymentMethodsPost
        //instance.paymentMethodsPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('plansGet', function() {
      it('should call plansGet successfully', function(done) {
        //uncomment below and update the code to test plansGet
        //instance.plansGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('plansOptions', function() {
      it('should call plansOptions successfully', function(done) {
        //uncomment below and update the code to test plansOptions
        //instance.plansOptions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('plansPlanIdGet', function() {
      it('should call plansPlanIdGet successfully', function(done) {
        //uncomment below and update the code to test plansPlanIdGet
        //instance.plansPlanIdGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('plansPlanIdOptions', function() {
      it('should call plansPlanIdOptions successfully', function(done) {
        //uncomment below and update the code to test plansPlanIdOptions
        //instance.plansPlanIdOptions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('predictionsGet', function() {
      it('should call predictionsGet successfully', function(done) {
        //uncomment below and update the code to test predictionsGet
        //instance.predictionsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('predictionsOptions', function() {
      it('should call predictionsOptions successfully', function(done) {
        //uncomment below and update the code to test predictionsOptions
        //instance.predictionsOptions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('predictionsPost', function() {
      it('should call predictionsPost successfully', function(done) {
        //uncomment below and update the code to test predictionsPost
        //instance.predictionsPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('profilesProfileIdGet', function() {
      it('should call profilesProfileIdGet successfully', function(done) {
        //uncomment below and update the code to test profilesProfileIdGet
        //instance.profilesProfileIdGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('profilesProfileIdOptions', function() {
      it('should call profilesProfileIdOptions successfully', function(done) {
        //uncomment below and update the code to test profilesProfileIdOptions
        //instance.profilesProfileIdOptions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('profilesProfileIdPatch', function() {
      it('should call profilesProfileIdPatch successfully', function(done) {
        //uncomment below and update the code to test profilesProfileIdPatch
        //instance.profilesProfileIdPatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('secretsGet', function() {
      it('should call secretsGet successfully', function(done) {
        //uncomment below and update the code to test secretsGet
        //instance.secretsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('secretsOptions', function() {
      it('should call secretsOptions successfully', function(done) {
        //uncomment below and update the code to test secretsOptions
        //instance.secretsOptions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('secretsPost', function() {
      it('should call secretsPost successfully', function(done) {
        //uncomment below and update the code to test secretsPost
        //instance.secretsPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('secretsSecretIdDelete', function() {
      it('should call secretsSecretIdDelete successfully', function(done) {
        //uncomment below and update the code to test secretsSecretIdDelete
        //instance.secretsSecretIdDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('secretsSecretIdOptions', function() {
      it('should call secretsSecretIdOptions successfully', function(done) {
        //uncomment below and update the code to test secretsSecretIdOptions
        //instance.secretsSecretIdOptions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('secretsSecretIdPatch', function() {
      it('should call secretsSecretIdPatch successfully', function(done) {
        //uncomment below and update the code to test secretsSecretIdPatch
        //instance.secretsSecretIdPatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('transitionsGet', function() {
      it('should call transitionsGet successfully', function(done) {
        //uncomment below and update the code to test transitionsGet
        //instance.transitionsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('transitionsOptions', function() {
      it('should call transitionsOptions successfully', function(done) {
        //uncomment below and update the code to test transitionsOptions
        //instance.transitionsOptions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('transitionsPost', function() {
      it('should call transitionsPost successfully', function(done) {
        //uncomment below and update the code to test transitionsPost
        //instance.transitionsPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('transitionsTransitionIdDelete', function() {
      it('should call transitionsTransitionIdDelete successfully', function(done) {
        //uncomment below and update the code to test transitionsTransitionIdDelete
        //instance.transitionsTransitionIdDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('transitionsTransitionIdExecutionsExecutionIdGet', function() {
      it('should call transitionsTransitionIdExecutionsExecutionIdGet successfully', function(done) {
        //uncomment below and update the code to test transitionsTransitionIdExecutionsExecutionIdGet
        //instance.transitionsTransitionIdExecutionsExecutionIdGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('transitionsTransitionIdExecutionsExecutionIdHeartbeatsOptions', function() {
      it('should call transitionsTransitionIdExecutionsExecutionIdHeartbeatsOptions successfully', function(done) {
        //uncomment below and update the code to test transitionsTransitionIdExecutionsExecutionIdHeartbeatsOptions
        //instance.transitionsTransitionIdExecutionsExecutionIdHeartbeatsOptions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('transitionsTransitionIdExecutionsExecutionIdHeartbeatsPost', function() {
      it('should call transitionsTransitionIdExecutionsExecutionIdHeartbeatsPost successfully', function(done) {
        //uncomment below and update the code to test transitionsTransitionIdExecutionsExecutionIdHeartbeatsPost
        //instance.transitionsTransitionIdExecutionsExecutionIdHeartbeatsPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('transitionsTransitionIdExecutionsExecutionIdOptions', function() {
      it('should call transitionsTransitionIdExecutionsExecutionIdOptions successfully', function(done) {
        //uncomment below and update the code to test transitionsTransitionIdExecutionsExecutionIdOptions
        //instance.transitionsTransitionIdExecutionsExecutionIdOptions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('transitionsTransitionIdExecutionsExecutionIdPatch', function() {
      it('should call transitionsTransitionIdExecutionsExecutionIdPatch successfully', function(done) {
        //uncomment below and update the code to test transitionsTransitionIdExecutionsExecutionIdPatch
        //instance.transitionsTransitionIdExecutionsExecutionIdPatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('transitionsTransitionIdExecutionsGet', function() {
      it('should call transitionsTransitionIdExecutionsGet successfully', function(done) {
        //uncomment below and update the code to test transitionsTransitionIdExecutionsGet
        //instance.transitionsTransitionIdExecutionsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('transitionsTransitionIdExecutionsOptions', function() {
      it('should call transitionsTransitionIdExecutionsOptions successfully', function(done) {
        //uncomment below and update the code to test transitionsTransitionIdExecutionsOptions
        //instance.transitionsTransitionIdExecutionsOptions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('transitionsTransitionIdExecutionsPost', function() {
      it('should call transitionsTransitionIdExecutionsPost successfully', function(done) {
        //uncomment below and update the code to test transitionsTransitionIdExecutionsPost
        //instance.transitionsTransitionIdExecutionsPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('transitionsTransitionIdGet', function() {
      it('should call transitionsTransitionIdGet successfully', function(done) {
        //uncomment below and update the code to test transitionsTransitionIdGet
        //instance.transitionsTransitionIdGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('transitionsTransitionIdOptions', function() {
      it('should call transitionsTransitionIdOptions successfully', function(done) {
        //uncomment below and update the code to test transitionsTransitionIdOptions
        //instance.transitionsTransitionIdOptions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('transitionsTransitionIdPatch', function() {
      it('should call transitionsTransitionIdPatch successfully', function(done) {
        //uncomment below and update the code to test transitionsTransitionIdPatch
        //instance.transitionsTransitionIdPatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersGet', function() {
      it('should call usersGet successfully', function(done) {
        //uncomment below and update the code to test usersGet
        //instance.usersGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersOptions', function() {
      it('should call usersOptions successfully', function(done) {
        //uncomment below and update the code to test usersOptions
        //instance.usersOptions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersPost', function() {
      it('should call usersPost successfully', function(done) {
        //uncomment below and update the code to test usersPost
        //instance.usersPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersUserIdDelete', function() {
      it('should call usersUserIdDelete successfully', function(done) {
        //uncomment below and update the code to test usersUserIdDelete
        //instance.usersUserIdDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersUserIdGet', function() {
      it('should call usersUserIdGet successfully', function(done) {
        //uncomment below and update the code to test usersUserIdGet
        //instance.usersUserIdGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersUserIdOptions', function() {
      it('should call usersUserIdOptions successfully', function(done) {
        //uncomment below and update the code to test usersUserIdOptions
        //instance.usersUserIdOptions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersUserIdPatch', function() {
      it('should call usersUserIdPatch successfully', function(done) {
        //uncomment below and update the code to test usersUserIdPatch
        //instance.usersUserIdPatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('workflowsGet', function() {
      it('should call workflowsGet successfully', function(done) {
        //uncomment below and update the code to test workflowsGet
        //instance.workflowsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('workflowsOptions', function() {
      it('should call workflowsOptions successfully', function(done) {
        //uncomment below and update the code to test workflowsOptions
        //instance.workflowsOptions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('workflowsPost', function() {
      it('should call workflowsPost successfully', function(done) {
        //uncomment below and update the code to test workflowsPost
        //instance.workflowsPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('workflowsWorkflowIdDelete', function() {
      it('should call workflowsWorkflowIdDelete successfully', function(done) {
        //uncomment below and update the code to test workflowsWorkflowIdDelete
        //instance.workflowsWorkflowIdDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('workflowsWorkflowIdExecutionsExecutionIdDelete', function() {
      it('should call workflowsWorkflowIdExecutionsExecutionIdDelete successfully', function(done) {
        //uncomment below and update the code to test workflowsWorkflowIdExecutionsExecutionIdDelete
        //instance.workflowsWorkflowIdExecutionsExecutionIdDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('workflowsWorkflowIdExecutionsExecutionIdGet', function() {
      it('should call workflowsWorkflowIdExecutionsExecutionIdGet successfully', function(done) {
        //uncomment below and update the code to test workflowsWorkflowIdExecutionsExecutionIdGet
        //instance.workflowsWorkflowIdExecutionsExecutionIdGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('workflowsWorkflowIdExecutionsExecutionIdOptions', function() {
      it('should call workflowsWorkflowIdExecutionsExecutionIdOptions successfully', function(done) {
        //uncomment below and update the code to test workflowsWorkflowIdExecutionsExecutionIdOptions
        //instance.workflowsWorkflowIdExecutionsExecutionIdOptions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('workflowsWorkflowIdExecutionsExecutionIdPatch', function() {
      it('should call workflowsWorkflowIdExecutionsExecutionIdPatch successfully', function(done) {
        //uncomment below and update the code to test workflowsWorkflowIdExecutionsExecutionIdPatch
        //instance.workflowsWorkflowIdExecutionsExecutionIdPatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('workflowsWorkflowIdExecutionsGet', function() {
      it('should call workflowsWorkflowIdExecutionsGet successfully', function(done) {
        //uncomment below and update the code to test workflowsWorkflowIdExecutionsGet
        //instance.workflowsWorkflowIdExecutionsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('workflowsWorkflowIdExecutionsOptions', function() {
      it('should call workflowsWorkflowIdExecutionsOptions successfully', function(done) {
        //uncomment below and update the code to test workflowsWorkflowIdExecutionsOptions
        //instance.workflowsWorkflowIdExecutionsOptions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('workflowsWorkflowIdExecutionsPost', function() {
      it('should call workflowsWorkflowIdExecutionsPost successfully', function(done) {
        //uncomment below and update the code to test workflowsWorkflowIdExecutionsPost
        //instance.workflowsWorkflowIdExecutionsPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('workflowsWorkflowIdGet', function() {
      it('should call workflowsWorkflowIdGet successfully', function(done) {
        //uncomment below and update the code to test workflowsWorkflowIdGet
        //instance.workflowsWorkflowIdGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('workflowsWorkflowIdOptions', function() {
      it('should call workflowsWorkflowIdOptions successfully', function(done) {
        //uncomment below and update the code to test workflowsWorkflowIdOptions
        //instance.workflowsWorkflowIdOptions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('workflowsWorkflowIdPatch', function() {
      it('should call workflowsWorkflowIdPatch successfully', function(done) {
        //uncomment below and update the code to test workflowsWorkflowIdPatch
        //instance.workflowsWorkflowIdPatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
