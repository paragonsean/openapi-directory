/*
 * Lucidtech API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-03-23T15:40:40Z
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PatchWorkflowIdCompletedConfig
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:04.127247-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PatchWorkflowIdCompletedConfig {
  public static final String SERIALIZED_NAME_ENVIRONMENT = "environment";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT)
  private Map<String, String> environment = new HashMap<>();

  public static final String SERIALIZED_NAME_ENVIRONMENT_SECRETS = "environmentSecrets";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT_SECRETS)
  private List<String> environmentSecrets = new ArrayList<>();

  public static final String SERIALIZED_NAME_IMAGE_URL = "imageUrl";
  @SerializedName(SERIALIZED_NAME_IMAGE_URL)
  private String imageUrl;

  public static final String SERIALIZED_NAME_SECRET_ID = "secretId";
  @SerializedName(SERIALIZED_NAME_SECRET_ID)
  private String secretId;

  public PatchWorkflowIdCompletedConfig() {
  }

  public PatchWorkflowIdCompletedConfig environment(Map<String, String> environment) {
    this.environment = environment;
    return this;
  }

  public PatchWorkflowIdCompletedConfig putEnvironmentItem(String key, String environmentItem) {
    if (this.environment == null) {
      this.environment = new HashMap<>();
    }
    this.environment.put(key, environmentItem);
    return this;
  }

  /**
   * Get environment
   * @return environment
   */
  @javax.annotation.Nullable
  public Map<String, String> getEnvironment() {
    return environment;
  }

  public void setEnvironment(Map<String, String> environment) {
    this.environment = environment;
  }


  public PatchWorkflowIdCompletedConfig environmentSecrets(List<String> environmentSecrets) {
    this.environmentSecrets = environmentSecrets;
    return this;
  }

  public PatchWorkflowIdCompletedConfig addEnvironmentSecretsItem(String environmentSecretsItem) {
    if (this.environmentSecrets == null) {
      this.environmentSecrets = new ArrayList<>();
    }
    this.environmentSecrets.add(environmentSecretsItem);
    return this;
  }

  /**
   * Get environmentSecrets
   * @return environmentSecrets
   */
  @javax.annotation.Nullable
  public List<String> getEnvironmentSecrets() {
    return environmentSecrets;
  }

  public void setEnvironmentSecrets(List<String> environmentSecrets) {
    this.environmentSecrets = environmentSecrets;
  }


  public PatchWorkflowIdCompletedConfig imageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
    return this;
  }

  /**
   * Get imageUrl
   * @return imageUrl
   */
  @javax.annotation.Nonnull
  public String getImageUrl() {
    return imageUrl;
  }

  public void setImageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
  }


  public PatchWorkflowIdCompletedConfig secretId(String secretId) {
    this.secretId = secretId;
    return this;
  }

  /**
   * Get secretId
   * @return secretId
   */
  @javax.annotation.Nullable
  public String getSecretId() {
    return secretId;
  }

  public void setSecretId(String secretId) {
    this.secretId = secretId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PatchWorkflowIdCompletedConfig patchWorkflowIdCompletedConfig = (PatchWorkflowIdCompletedConfig) o;
    return Objects.equals(this.environment, patchWorkflowIdCompletedConfig.environment) &&
        Objects.equals(this.environmentSecrets, patchWorkflowIdCompletedConfig.environmentSecrets) &&
        Objects.equals(this.imageUrl, patchWorkflowIdCompletedConfig.imageUrl) &&
        Objects.equals(this.secretId, patchWorkflowIdCompletedConfig.secretId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(environment, environmentSecrets, imageUrl, secretId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PatchWorkflowIdCompletedConfig {\n");
    sb.append("    environment: ").append(toIndentedString(environment)).append("\n");
    sb.append("    environmentSecrets: ").append(toIndentedString(environmentSecrets)).append("\n");
    sb.append("    imageUrl: ").append(toIndentedString(imageUrl)).append("\n");
    sb.append("    secretId: ").append(toIndentedString(secretId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("environment");
    openapiFields.add("environmentSecrets");
    openapiFields.add("imageUrl");
    openapiFields.add("secretId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("imageUrl");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PatchWorkflowIdCompletedConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PatchWorkflowIdCompletedConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PatchWorkflowIdCompletedConfig is not found in the empty JSON string", PatchWorkflowIdCompletedConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PatchWorkflowIdCompletedConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PatchWorkflowIdCompletedConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PatchWorkflowIdCompletedConfig.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("environmentSecrets") != null && !jsonObj.get("environmentSecrets").isJsonNull() && !jsonObj.get("environmentSecrets").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `environmentSecrets` to be an array in the JSON string but got `%s`", jsonObj.get("environmentSecrets").toString()));
      }
      if (!jsonObj.get("imageUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imageUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imageUrl").toString()));
      }
      if ((jsonObj.get("secretId") != null && !jsonObj.get("secretId").isJsonNull()) && !jsonObj.get("secretId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secretId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secretId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PatchWorkflowIdCompletedConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PatchWorkflowIdCompletedConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PatchWorkflowIdCompletedConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PatchWorkflowIdCompletedConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<PatchWorkflowIdCompletedConfig>() {
           @Override
           public void write(JsonWriter out, PatchWorkflowIdCompletedConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PatchWorkflowIdCompletedConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PatchWorkflowIdCompletedConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PatchWorkflowIdCompletedConfig
   * @throws IOException if the JSON string is invalid with respect to PatchWorkflowIdCompletedConfig
   */
  public static PatchWorkflowIdCompletedConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PatchWorkflowIdCompletedConfig.class);
  }

  /**
   * Convert an instance of PatchWorkflowIdCompletedConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

