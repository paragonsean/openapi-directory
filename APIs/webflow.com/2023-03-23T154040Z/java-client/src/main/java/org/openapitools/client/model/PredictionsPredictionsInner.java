/*
 * Lucidtech API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-03-23T15:40:40Z
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PredictionPostprocessConfig;
import org.openapitools.client.model.PredictionPredictionsInner;
import org.openapitools.client.model.PredictionPreprocessConfig;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PredictionsPredictionsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:04.127247-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PredictionsPredictionsInner {
  public static final String SERIALIZED_NAME_CREATED_BY = "createdBy";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private String createdBy;

  public static final String SERIALIZED_NAME_CREATED_TIME = "createdTime";
  @SerializedName(SERIALIZED_NAME_CREATED_TIME)
  private String createdTime;

  public static final String SERIALIZED_NAME_DOCUMENT_ID = "documentId";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_ID)
  private String documentId;

  public static final String SERIALIZED_NAME_INFERENCE_TIME = "inferenceTime";
  @SerializedName(SERIALIZED_NAME_INFERENCE_TIME)
  private BigDecimal inferenceTime;

  public static final String SERIALIZED_NAME_MODEL_ID = "modelId";
  @SerializedName(SERIALIZED_NAME_MODEL_ID)
  private String modelId;

  public static final String SERIALIZED_NAME_POSTPROCESS_CONFIG = "postprocessConfig";
  @SerializedName(SERIALIZED_NAME_POSTPROCESS_CONFIG)
  private PredictionPostprocessConfig postprocessConfig;

  public static final String SERIALIZED_NAME_PREDICTION_ID = "predictionId";
  @SerializedName(SERIALIZED_NAME_PREDICTION_ID)
  private String predictionId;

  public static final String SERIALIZED_NAME_PREDICTIONS = "predictions";
  @SerializedName(SERIALIZED_NAME_PREDICTIONS)
  private List<PredictionPredictionsInner> predictions = new ArrayList<>();

  public static final String SERIALIZED_NAME_PREPROCESS_CONFIG = "preprocessConfig";
  @SerializedName(SERIALIZED_NAME_PREPROCESS_CONFIG)
  private PredictionPreprocessConfig preprocessConfig;

  public static final String SERIALIZED_NAME_TRAINING_ID = "trainingId";
  @SerializedName(SERIALIZED_NAME_TRAINING_ID)
  private String trainingId;

  public PredictionsPredictionsInner() {
  }

  public PredictionsPredictionsInner createdBy(String createdBy) {
    this.createdBy = createdBy;
    return this;
  }

  /**
   * Get createdBy
   * @return createdBy
   */
  @javax.annotation.Nullable
  public String getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(String createdBy) {
    this.createdBy = createdBy;
  }


  public PredictionsPredictionsInner createdTime(String createdTime) {
    this.createdTime = createdTime;
    return this;
  }

  /**
   * Get createdTime
   * @return createdTime
   */
  @javax.annotation.Nullable
  public String getCreatedTime() {
    return createdTime;
  }

  public void setCreatedTime(String createdTime) {
    this.createdTime = createdTime;
  }


  public PredictionsPredictionsInner documentId(String documentId) {
    this.documentId = documentId;
    return this;
  }

  /**
   * Get documentId
   * @return documentId
   */
  @javax.annotation.Nonnull
  public String getDocumentId() {
    return documentId;
  }

  public void setDocumentId(String documentId) {
    this.documentId = documentId;
  }


  public PredictionsPredictionsInner inferenceTime(BigDecimal inferenceTime) {
    this.inferenceTime = inferenceTime;
    return this;
  }

  /**
   * Get inferenceTime
   * minimum: 0
   * @return inferenceTime
   */
  @javax.annotation.Nonnull
  public BigDecimal getInferenceTime() {
    return inferenceTime;
  }

  public void setInferenceTime(BigDecimal inferenceTime) {
    this.inferenceTime = inferenceTime;
  }


  public PredictionsPredictionsInner modelId(String modelId) {
    this.modelId = modelId;
    return this;
  }

  /**
   * Get modelId
   * @return modelId
   */
  @javax.annotation.Nonnull
  public String getModelId() {
    return modelId;
  }

  public void setModelId(String modelId) {
    this.modelId = modelId;
  }


  public PredictionsPredictionsInner postprocessConfig(PredictionPostprocessConfig postprocessConfig) {
    this.postprocessConfig = postprocessConfig;
    return this;
  }

  /**
   * Get postprocessConfig
   * @return postprocessConfig
   */
  @javax.annotation.Nullable
  public PredictionPostprocessConfig getPostprocessConfig() {
    return postprocessConfig;
  }

  public void setPostprocessConfig(PredictionPostprocessConfig postprocessConfig) {
    this.postprocessConfig = postprocessConfig;
  }


  public PredictionsPredictionsInner predictionId(String predictionId) {
    this.predictionId = predictionId;
    return this;
  }

  /**
   * Get predictionId
   * @return predictionId
   */
  @javax.annotation.Nonnull
  public String getPredictionId() {
    return predictionId;
  }

  public void setPredictionId(String predictionId) {
    this.predictionId = predictionId;
  }


  public PredictionsPredictionsInner predictions(List<PredictionPredictionsInner> predictions) {
    this.predictions = predictions;
    return this;
  }

  public PredictionsPredictionsInner addPredictionsItem(PredictionPredictionsInner predictionsItem) {
    if (this.predictions == null) {
      this.predictions = new ArrayList<>();
    }
    this.predictions.add(predictionsItem);
    return this;
  }

  /**
   * Get predictions
   * @return predictions
   */
  @javax.annotation.Nonnull
  public List<PredictionPredictionsInner> getPredictions() {
    return predictions;
  }

  public void setPredictions(List<PredictionPredictionsInner> predictions) {
    this.predictions = predictions;
  }


  public PredictionsPredictionsInner preprocessConfig(PredictionPreprocessConfig preprocessConfig) {
    this.preprocessConfig = preprocessConfig;
    return this;
  }

  /**
   * Get preprocessConfig
   * @return preprocessConfig
   */
  @javax.annotation.Nullable
  public PredictionPreprocessConfig getPreprocessConfig() {
    return preprocessConfig;
  }

  public void setPreprocessConfig(PredictionPreprocessConfig preprocessConfig) {
    this.preprocessConfig = preprocessConfig;
  }


  public PredictionsPredictionsInner trainingId(String trainingId) {
    this.trainingId = trainingId;
    return this;
  }

  /**
   * Get trainingId
   * @return trainingId
   */
  @javax.annotation.Nullable
  public String getTrainingId() {
    return trainingId;
  }

  public void setTrainingId(String trainingId) {
    this.trainingId = trainingId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PredictionsPredictionsInner predictionsPredictionsInner = (PredictionsPredictionsInner) o;
    return Objects.equals(this.createdBy, predictionsPredictionsInner.createdBy) &&
        Objects.equals(this.createdTime, predictionsPredictionsInner.createdTime) &&
        Objects.equals(this.documentId, predictionsPredictionsInner.documentId) &&
        Objects.equals(this.inferenceTime, predictionsPredictionsInner.inferenceTime) &&
        Objects.equals(this.modelId, predictionsPredictionsInner.modelId) &&
        Objects.equals(this.postprocessConfig, predictionsPredictionsInner.postprocessConfig) &&
        Objects.equals(this.predictionId, predictionsPredictionsInner.predictionId) &&
        Objects.equals(this.predictions, predictionsPredictionsInner.predictions) &&
        Objects.equals(this.preprocessConfig, predictionsPredictionsInner.preprocessConfig) &&
        Objects.equals(this.trainingId, predictionsPredictionsInner.trainingId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdBy, createdTime, documentId, inferenceTime, modelId, postprocessConfig, predictionId, predictions, preprocessConfig, trainingId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PredictionsPredictionsInner {\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    createdTime: ").append(toIndentedString(createdTime)).append("\n");
    sb.append("    documentId: ").append(toIndentedString(documentId)).append("\n");
    sb.append("    inferenceTime: ").append(toIndentedString(inferenceTime)).append("\n");
    sb.append("    modelId: ").append(toIndentedString(modelId)).append("\n");
    sb.append("    postprocessConfig: ").append(toIndentedString(postprocessConfig)).append("\n");
    sb.append("    predictionId: ").append(toIndentedString(predictionId)).append("\n");
    sb.append("    predictions: ").append(toIndentedString(predictions)).append("\n");
    sb.append("    preprocessConfig: ").append(toIndentedString(preprocessConfig)).append("\n");
    sb.append("    trainingId: ").append(toIndentedString(trainingId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createdBy");
    openapiFields.add("createdTime");
    openapiFields.add("documentId");
    openapiFields.add("inferenceTime");
    openapiFields.add("modelId");
    openapiFields.add("postprocessConfig");
    openapiFields.add("predictionId");
    openapiFields.add("predictions");
    openapiFields.add("preprocessConfig");
    openapiFields.add("trainingId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("documentId");
    openapiRequiredFields.add("inferenceTime");
    openapiRequiredFields.add("modelId");
    openapiRequiredFields.add("predictionId");
    openapiRequiredFields.add("predictions");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PredictionsPredictionsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PredictionsPredictionsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PredictionsPredictionsInner is not found in the empty JSON string", PredictionsPredictionsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PredictionsPredictionsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PredictionsPredictionsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PredictionsPredictionsInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("createdBy") != null && !jsonObj.get("createdBy").isJsonNull()) && !jsonObj.get("createdBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdBy").toString()));
      }
      if ((jsonObj.get("createdTime") != null && !jsonObj.get("createdTime").isJsonNull()) && !jsonObj.get("createdTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdTime").toString()));
      }
      if (!jsonObj.get("documentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentId").toString()));
      }
      if (!jsonObj.get("modelId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modelId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modelId").toString()));
      }
      // validate the optional field `postprocessConfig`
      if (jsonObj.get("postprocessConfig") != null && !jsonObj.get("postprocessConfig").isJsonNull()) {
        PredictionPostprocessConfig.validateJsonElement(jsonObj.get("postprocessConfig"));
      }
      if (!jsonObj.get("predictionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `predictionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("predictionId").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("predictions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `predictions` to be an array in the JSON string but got `%s`", jsonObj.get("predictions").toString()));
      }

      JsonArray jsonArraypredictions = jsonObj.getAsJsonArray("predictions");
      // validate the required field `predictions` (array)
      for (int i = 0; i < jsonArraypredictions.size(); i++) {
        PredictionPredictionsInner.validateJsonElement(jsonArraypredictions.get(i));
      };
      // validate the optional field `preprocessConfig`
      if (jsonObj.get("preprocessConfig") != null && !jsonObj.get("preprocessConfig").isJsonNull()) {
        PredictionPreprocessConfig.validateJsonElement(jsonObj.get("preprocessConfig"));
      }
      if ((jsonObj.get("trainingId") != null && !jsonObj.get("trainingId").isJsonNull()) && !jsonObj.get("trainingId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trainingId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trainingId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PredictionsPredictionsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PredictionsPredictionsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PredictionsPredictionsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PredictionsPredictionsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<PredictionsPredictionsInner>() {
           @Override
           public void write(JsonWriter out, PredictionsPredictionsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PredictionsPredictionsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PredictionsPredictionsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PredictionsPredictionsInner
   * @throws IOException if the JSON string is invalid with respect to PredictionsPredictionsInner
   */
  public static PredictionsPredictionsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PredictionsPredictionsInner.class);
  }

  /**
   * Convert an instance of PredictionsPredictionsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

