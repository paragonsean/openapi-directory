/*
 * Lucidtech API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-03-23T15:40:40Z
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DocumentGroundTruthInner;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PatchDocumentId
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:04.127247-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PatchDocumentId {
  public static final String SERIALIZED_NAME_DATASET_ID = "datasetId";
  @SerializedName(SERIALIZED_NAME_DATASET_ID)
  private String datasetId;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_GROUND_TRUTH = "groundTruth";
  @SerializedName(SERIALIZED_NAME_GROUND_TRUTH)
  private List<DocumentGroundTruthInner> groundTruth;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Object metadata;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RETENTION_IN_DAYS = "retentionInDays";
  @SerializedName(SERIALIZED_NAME_RETENTION_IN_DAYS)
  private Integer retentionInDays;

  public PatchDocumentId() {
  }

  public PatchDocumentId datasetId(String datasetId) {
    this.datasetId = datasetId;
    return this;
  }

  /**
   * Get datasetId
   * @return datasetId
   */
  @javax.annotation.Nullable
  public String getDatasetId() {
    return datasetId;
  }

  public void setDatasetId(String datasetId) {
    this.datasetId = datasetId;
  }


  public PatchDocumentId description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public PatchDocumentId groundTruth(List<DocumentGroundTruthInner> groundTruth) {
    this.groundTruth = groundTruth;
    return this;
  }

  public PatchDocumentId addGroundTruthItem(DocumentGroundTruthInner groundTruthItem) {
    if (this.groundTruth == null) {
      this.groundTruth = new ArrayList<>();
    }
    this.groundTruth.add(groundTruthItem);
    return this;
  }

  /**
   * Get groundTruth
   * @return groundTruth
   */
  @javax.annotation.Nullable
  public List<DocumentGroundTruthInner> getGroundTruth() {
    return groundTruth;
  }

  public void setGroundTruth(List<DocumentGroundTruthInner> groundTruth) {
    this.groundTruth = groundTruth;
  }


  public PatchDocumentId metadata(Object metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nullable
  public Object getMetadata() {
    return metadata;
  }

  public void setMetadata(Object metadata) {
    this.metadata = metadata;
  }


  public PatchDocumentId name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public PatchDocumentId retentionInDays(Integer retentionInDays) {
    this.retentionInDays = retentionInDays;
    return this;
  }

  /**
   * Get retentionInDays
   * minimum: 1
   * @return retentionInDays
   */
  @javax.annotation.Nullable
  public Integer getRetentionInDays() {
    return retentionInDays;
  }

  public void setRetentionInDays(Integer retentionInDays) {
    this.retentionInDays = retentionInDays;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PatchDocumentId patchDocumentId = (PatchDocumentId) o;
    return Objects.equals(this.datasetId, patchDocumentId.datasetId) &&
        Objects.equals(this.description, patchDocumentId.description) &&
        Objects.equals(this.groundTruth, patchDocumentId.groundTruth) &&
        Objects.equals(this.metadata, patchDocumentId.metadata) &&
        Objects.equals(this.name, patchDocumentId.name) &&
        Objects.equals(this.retentionInDays, patchDocumentId.retentionInDays);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(datasetId, description, groundTruth, metadata, name, retentionInDays);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PatchDocumentId {\n");
    sb.append("    datasetId: ").append(toIndentedString(datasetId)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    groundTruth: ").append(toIndentedString(groundTruth)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    retentionInDays: ").append(toIndentedString(retentionInDays)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("datasetId");
    openapiFields.add("description");
    openapiFields.add("groundTruth");
    openapiFields.add("metadata");
    openapiFields.add("name");
    openapiFields.add("retentionInDays");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PatchDocumentId
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PatchDocumentId.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PatchDocumentId is not found in the empty JSON string", PatchDocumentId.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PatchDocumentId.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PatchDocumentId` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("datasetId") != null && !jsonObj.get("datasetId").isJsonNull()) && !jsonObj.get("datasetId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `datasetId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("datasetId").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("groundTruth") != null && !jsonObj.get("groundTruth").isJsonNull()) {
        JsonArray jsonArraygroundTruth = jsonObj.getAsJsonArray("groundTruth");
        if (jsonArraygroundTruth != null) {
          // ensure the json data is an array
          if (!jsonObj.get("groundTruth").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `groundTruth` to be an array in the JSON string but got `%s`", jsonObj.get("groundTruth").toString()));
          }

          // validate the optional field `groundTruth` (array)
          for (int i = 0; i < jsonArraygroundTruth.size(); i++) {
            DocumentGroundTruthInner.validateJsonElement(jsonArraygroundTruth.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PatchDocumentId.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PatchDocumentId' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PatchDocumentId> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PatchDocumentId.class));

       return (TypeAdapter<T>) new TypeAdapter<PatchDocumentId>() {
           @Override
           public void write(JsonWriter out, PatchDocumentId value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PatchDocumentId read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PatchDocumentId given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PatchDocumentId
   * @throws IOException if the JSON string is invalid with respect to PatchDocumentId
   */
  public static PatchDocumentId fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PatchDocumentId.class);
  }

  /**
   * Convert an instance of PatchDocumentId to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

