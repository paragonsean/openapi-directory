/*
 * Lucidtech API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-03-23T15:40:40Z
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AppClient
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:04.127247-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AppClient {
  public static final String SERIALIZED_NAME_APP_CLIENT_ID = "appClientId";
  @SerializedName(SERIALIZED_NAME_APP_CLIENT_ID)
  private String appClientId;

  public static final String SERIALIZED_NAME_CALLBACK_URLS = "callbackUrls";
  @SerializedName(SERIALIZED_NAME_CALLBACK_URLS)
  private List<String> callbackUrls;

  public static final String SERIALIZED_NAME_CLIENT_ID = "clientId";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  private String clientId;

  public static final String SERIALIZED_NAME_CLIENT_SECRET = "clientSecret";
  @SerializedName(SERIALIZED_NAME_CLIENT_SECRET)
  private String clientSecret;

  public static final String SERIALIZED_NAME_CREATED_BY = "createdBy";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private String createdBy;

  public static final String SERIALIZED_NAME_CREATED_TIME = "createdTime";
  @SerializedName(SERIALIZED_NAME_CREATED_TIME)
  private String createdTime;

  public static final String SERIALIZED_NAME_DEFAULT_LOGIN_URL = "defaultLoginUrl";
  @SerializedName(SERIALIZED_NAME_DEFAULT_LOGIN_URL)
  private String defaultLoginUrl;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_HAS_SECRET = "hasSecret";
  @SerializedName(SERIALIZED_NAME_HAS_SECRET)
  private Boolean hasSecret;

  public static final String SERIALIZED_NAME_LOGIN_URLS = "loginUrls";
  @SerializedName(SERIALIZED_NAME_LOGIN_URLS)
  private List<String> loginUrls;

  public static final String SERIALIZED_NAME_LOGOUT_URLS = "logoutUrls";
  @SerializedName(SERIALIZED_NAME_LOGOUT_URLS)
  private List<String> logoutUrls;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_UPDATED_BY = "updatedBy";
  @SerializedName(SERIALIZED_NAME_UPDATED_BY)
  private String updatedBy;

  public static final String SERIALIZED_NAME_UPDATED_TIME = "updatedTime";
  @SerializedName(SERIALIZED_NAME_UPDATED_TIME)
  private String updatedTime;

  public AppClient() {
  }

  public AppClient appClientId(String appClientId) {
    this.appClientId = appClientId;
    return this;
  }

  /**
   * Get appClientId
   * @return appClientId
   */
  @javax.annotation.Nonnull
  public String getAppClientId() {
    return appClientId;
  }

  public void setAppClientId(String appClientId) {
    this.appClientId = appClientId;
  }


  public AppClient callbackUrls(List<String> callbackUrls) {
    this.callbackUrls = callbackUrls;
    return this;
  }

  public AppClient addCallbackUrlsItem(String callbackUrlsItem) {
    if (this.callbackUrls == null) {
      this.callbackUrls = new ArrayList<>();
    }
    this.callbackUrls.add(callbackUrlsItem);
    return this;
  }

  /**
   * Get callbackUrls
   * @return callbackUrls
   */
  @javax.annotation.Nullable
  public List<String> getCallbackUrls() {
    return callbackUrls;
  }

  public void setCallbackUrls(List<String> callbackUrls) {
    this.callbackUrls = callbackUrls;
  }


  public AppClient clientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  /**
   * Get clientId
   * @return clientId
   */
  @javax.annotation.Nonnull
  public String getClientId() {
    return clientId;
  }

  public void setClientId(String clientId) {
    this.clientId = clientId;
  }


  public AppClient clientSecret(String clientSecret) {
    this.clientSecret = clientSecret;
    return this;
  }

  /**
   * Get clientSecret
   * @return clientSecret
   */
  @javax.annotation.Nullable
  public String getClientSecret() {
    return clientSecret;
  }

  public void setClientSecret(String clientSecret) {
    this.clientSecret = clientSecret;
  }


  public AppClient createdBy(String createdBy) {
    this.createdBy = createdBy;
    return this;
  }

  /**
   * Get createdBy
   * @return createdBy
   */
  @javax.annotation.Nullable
  public String getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(String createdBy) {
    this.createdBy = createdBy;
  }


  public AppClient createdTime(String createdTime) {
    this.createdTime = createdTime;
    return this;
  }

  /**
   * Get createdTime
   * @return createdTime
   */
  @javax.annotation.Nullable
  public String getCreatedTime() {
    return createdTime;
  }

  public void setCreatedTime(String createdTime) {
    this.createdTime = createdTime;
  }


  public AppClient defaultLoginUrl(String defaultLoginUrl) {
    this.defaultLoginUrl = defaultLoginUrl;
    return this;
  }

  /**
   * Get defaultLoginUrl
   * @return defaultLoginUrl
   */
  @javax.annotation.Nullable
  public String getDefaultLoginUrl() {
    return defaultLoginUrl;
  }

  public void setDefaultLoginUrl(String defaultLoginUrl) {
    this.defaultLoginUrl = defaultLoginUrl;
  }


  public AppClient description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public AppClient hasSecret(Boolean hasSecret) {
    this.hasSecret = hasSecret;
    return this;
  }

  /**
   * Get hasSecret
   * @return hasSecret
   */
  @javax.annotation.Nonnull
  public Boolean getHasSecret() {
    return hasSecret;
  }

  public void setHasSecret(Boolean hasSecret) {
    this.hasSecret = hasSecret;
  }


  public AppClient loginUrls(List<String> loginUrls) {
    this.loginUrls = loginUrls;
    return this;
  }

  public AppClient addLoginUrlsItem(String loginUrlsItem) {
    if (this.loginUrls == null) {
      this.loginUrls = new ArrayList<>();
    }
    this.loginUrls.add(loginUrlsItem);
    return this;
  }

  /**
   * Get loginUrls
   * @return loginUrls
   */
  @javax.annotation.Nullable
  public List<String> getLoginUrls() {
    return loginUrls;
  }

  public void setLoginUrls(List<String> loginUrls) {
    this.loginUrls = loginUrls;
  }


  public AppClient logoutUrls(List<String> logoutUrls) {
    this.logoutUrls = logoutUrls;
    return this;
  }

  public AppClient addLogoutUrlsItem(String logoutUrlsItem) {
    if (this.logoutUrls == null) {
      this.logoutUrls = new ArrayList<>();
    }
    this.logoutUrls.add(logoutUrlsItem);
    return this;
  }

  /**
   * Get logoutUrls
   * @return logoutUrls
   */
  @javax.annotation.Nullable
  public List<String> getLogoutUrls() {
    return logoutUrls;
  }

  public void setLogoutUrls(List<String> logoutUrls) {
    this.logoutUrls = logoutUrls;
  }


  public AppClient name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public AppClient updatedBy(String updatedBy) {
    this.updatedBy = updatedBy;
    return this;
  }

  /**
   * Get updatedBy
   * @return updatedBy
   */
  @javax.annotation.Nullable
  public String getUpdatedBy() {
    return updatedBy;
  }

  public void setUpdatedBy(String updatedBy) {
    this.updatedBy = updatedBy;
  }


  public AppClient updatedTime(String updatedTime) {
    this.updatedTime = updatedTime;
    return this;
  }

  /**
   * Get updatedTime
   * @return updatedTime
   */
  @javax.annotation.Nullable
  public String getUpdatedTime() {
    return updatedTime;
  }

  public void setUpdatedTime(String updatedTime) {
    this.updatedTime = updatedTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppClient appClient = (AppClient) o;
    return Objects.equals(this.appClientId, appClient.appClientId) &&
        Objects.equals(this.callbackUrls, appClient.callbackUrls) &&
        Objects.equals(this.clientId, appClient.clientId) &&
        Objects.equals(this.clientSecret, appClient.clientSecret) &&
        Objects.equals(this.createdBy, appClient.createdBy) &&
        Objects.equals(this.createdTime, appClient.createdTime) &&
        Objects.equals(this.defaultLoginUrl, appClient.defaultLoginUrl) &&
        Objects.equals(this.description, appClient.description) &&
        Objects.equals(this.hasSecret, appClient.hasSecret) &&
        Objects.equals(this.loginUrls, appClient.loginUrls) &&
        Objects.equals(this.logoutUrls, appClient.logoutUrls) &&
        Objects.equals(this.name, appClient.name) &&
        Objects.equals(this.updatedBy, appClient.updatedBy) &&
        Objects.equals(this.updatedTime, appClient.updatedTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appClientId, callbackUrls, clientId, clientSecret, createdBy, createdTime, defaultLoginUrl, description, hasSecret, loginUrls, logoutUrls, name, updatedBy, updatedTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppClient {\n");
    sb.append("    appClientId: ").append(toIndentedString(appClientId)).append("\n");
    sb.append("    callbackUrls: ").append(toIndentedString(callbackUrls)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    clientSecret: ").append(toIndentedString(clientSecret)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    createdTime: ").append(toIndentedString(createdTime)).append("\n");
    sb.append("    defaultLoginUrl: ").append(toIndentedString(defaultLoginUrl)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    hasSecret: ").append(toIndentedString(hasSecret)).append("\n");
    sb.append("    loginUrls: ").append(toIndentedString(loginUrls)).append("\n");
    sb.append("    logoutUrls: ").append(toIndentedString(logoutUrls)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    updatedBy: ").append(toIndentedString(updatedBy)).append("\n");
    sb.append("    updatedTime: ").append(toIndentedString(updatedTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appClientId");
    openapiFields.add("callbackUrls");
    openapiFields.add("clientId");
    openapiFields.add("clientSecret");
    openapiFields.add("createdBy");
    openapiFields.add("createdTime");
    openapiFields.add("defaultLoginUrl");
    openapiFields.add("description");
    openapiFields.add("hasSecret");
    openapiFields.add("loginUrls");
    openapiFields.add("logoutUrls");
    openapiFields.add("name");
    openapiFields.add("updatedBy");
    openapiFields.add("updatedTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("appClientId");
    openapiRequiredFields.add("callbackUrls");
    openapiRequiredFields.add("clientId");
    openapiRequiredFields.add("createdBy");
    openapiRequiredFields.add("createdTime");
    openapiRequiredFields.add("defaultLoginUrl");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("hasSecret");
    openapiRequiredFields.add("loginUrls");
    openapiRequiredFields.add("logoutUrls");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("updatedBy");
    openapiRequiredFields.add("updatedTime");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AppClient
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AppClient.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AppClient is not found in the empty JSON string", AppClient.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AppClient.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AppClient` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AppClient.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("appClientId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appClientId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appClientId").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("callbackUrls") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("callbackUrls").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `callbackUrls` to be an array in the JSON string but got `%s`", jsonObj.get("callbackUrls").toString()));
      }
      if (!jsonObj.get("clientId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientId").toString()));
      }
      if ((jsonObj.get("clientSecret") != null && !jsonObj.get("clientSecret").isJsonNull()) && !jsonObj.get("clientSecret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientSecret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientSecret").toString()));
      }
      if ((jsonObj.get("createdBy") != null && !jsonObj.get("createdBy").isJsonNull()) && !jsonObj.get("createdBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdBy").toString()));
      }
      if ((jsonObj.get("createdTime") != null && !jsonObj.get("createdTime").isJsonNull()) && !jsonObj.get("createdTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdTime").toString()));
      }
      if ((jsonObj.get("defaultLoginUrl") != null && !jsonObj.get("defaultLoginUrl").isJsonNull()) && !jsonObj.get("defaultLoginUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultLoginUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultLoginUrl").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("loginUrls") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("loginUrls").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `loginUrls` to be an array in the JSON string but got `%s`", jsonObj.get("loginUrls").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("logoutUrls") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("logoutUrls").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `logoutUrls` to be an array in the JSON string but got `%s`", jsonObj.get("logoutUrls").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("updatedBy") != null && !jsonObj.get("updatedBy").isJsonNull()) && !jsonObj.get("updatedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updatedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updatedBy").toString()));
      }
      if ((jsonObj.get("updatedTime") != null && !jsonObj.get("updatedTime").isJsonNull()) && !jsonObj.get("updatedTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updatedTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updatedTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AppClient.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AppClient' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AppClient> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AppClient.class));

       return (TypeAdapter<T>) new TypeAdapter<AppClient>() {
           @Override
           public void write(JsonWriter out, AppClient value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AppClient read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AppClient given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AppClient
   * @throws IOException if the JSON string is invalid with respect to AppClient
   */
  public static AppClient fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AppClient.class);
  }

  /**
   * Convert an instance of AppClient to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

