/*
 * Lucidtech API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-03-23T15:40:40Z
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.PatchTransitionIdAssets;
import org.openapitools.client.model.PatchTransitionIdParameters;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PatchTransitionId
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:04.127247-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PatchTransitionId {
  public static final String SERIALIZED_NAME_ASSETS = "assets";
  @SerializedName(SERIALIZED_NAME_ASSETS)
  private PatchTransitionIdAssets assets;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ENVIRONMENT = "environment";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT)
  private Map<String, String> environment = new HashMap<>();

  public static final String SERIALIZED_NAME_ENVIRONMENT_SECRETS = "environmentSecrets";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT_SECRETS)
  private List<String> environmentSecrets = new ArrayList<>();

  public static final String SERIALIZED_NAME_INPUT_JSON_SCHEMA = "inputJsonSchema";
  @SerializedName(SERIALIZED_NAME_INPUT_JSON_SCHEMA)
  private Object inputJsonSchema;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OUTPUT_JSON_SCHEMA = "outputJsonSchema";
  @SerializedName(SERIALIZED_NAME_OUTPUT_JSON_SCHEMA)
  private Object outputJsonSchema;

  public static final String SERIALIZED_NAME_PARAMETERS = "parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private PatchTransitionIdParameters parameters;

  public PatchTransitionId() {
  }

  public PatchTransitionId assets(PatchTransitionIdAssets assets) {
    this.assets = assets;
    return this;
  }

  /**
   * Get assets
   * @return assets
   */
  @javax.annotation.Nullable
  public PatchTransitionIdAssets getAssets() {
    return assets;
  }

  public void setAssets(PatchTransitionIdAssets assets) {
    this.assets = assets;
  }


  public PatchTransitionId description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public PatchTransitionId environment(Map<String, String> environment) {
    this.environment = environment;
    return this;
  }

  public PatchTransitionId putEnvironmentItem(String key, String environmentItem) {
    if (this.environment == null) {
      this.environment = new HashMap<>();
    }
    this.environment.put(key, environmentItem);
    return this;
  }

  /**
   * Get environment
   * @return environment
   */
  @javax.annotation.Nullable
  public Map<String, String> getEnvironment() {
    return environment;
  }

  public void setEnvironment(Map<String, String> environment) {
    this.environment = environment;
  }


  public PatchTransitionId environmentSecrets(List<String> environmentSecrets) {
    this.environmentSecrets = environmentSecrets;
    return this;
  }

  public PatchTransitionId addEnvironmentSecretsItem(String environmentSecretsItem) {
    if (this.environmentSecrets == null) {
      this.environmentSecrets = new ArrayList<>();
    }
    this.environmentSecrets.add(environmentSecretsItem);
    return this;
  }

  /**
   * Get environmentSecrets
   * @return environmentSecrets
   */
  @javax.annotation.Nullable
  public List<String> getEnvironmentSecrets() {
    return environmentSecrets;
  }

  public void setEnvironmentSecrets(List<String> environmentSecrets) {
    this.environmentSecrets = environmentSecrets;
  }


  public PatchTransitionId inputJsonSchema(Object inputJsonSchema) {
    this.inputJsonSchema = inputJsonSchema;
    return this;
  }

  /**
   * Get inputJsonSchema
   * @return inputJsonSchema
   */
  @javax.annotation.Nullable
  public Object getInputJsonSchema() {
    return inputJsonSchema;
  }

  public void setInputJsonSchema(Object inputJsonSchema) {
    this.inputJsonSchema = inputJsonSchema;
  }


  public PatchTransitionId name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public PatchTransitionId outputJsonSchema(Object outputJsonSchema) {
    this.outputJsonSchema = outputJsonSchema;
    return this;
  }

  /**
   * Get outputJsonSchema
   * @return outputJsonSchema
   */
  @javax.annotation.Nullable
  public Object getOutputJsonSchema() {
    return outputJsonSchema;
  }

  public void setOutputJsonSchema(Object outputJsonSchema) {
    this.outputJsonSchema = outputJsonSchema;
  }


  public PatchTransitionId parameters(PatchTransitionIdParameters parameters) {
    this.parameters = parameters;
    return this;
  }

  /**
   * Get parameters
   * @return parameters
   */
  @javax.annotation.Nullable
  public PatchTransitionIdParameters getParameters() {
    return parameters;
  }

  public void setParameters(PatchTransitionIdParameters parameters) {
    this.parameters = parameters;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PatchTransitionId patchTransitionId = (PatchTransitionId) o;
    return Objects.equals(this.assets, patchTransitionId.assets) &&
        Objects.equals(this.description, patchTransitionId.description) &&
        Objects.equals(this.environment, patchTransitionId.environment) &&
        Objects.equals(this.environmentSecrets, patchTransitionId.environmentSecrets) &&
        Objects.equals(this.inputJsonSchema, patchTransitionId.inputJsonSchema) &&
        Objects.equals(this.name, patchTransitionId.name) &&
        Objects.equals(this.outputJsonSchema, patchTransitionId.outputJsonSchema) &&
        Objects.equals(this.parameters, patchTransitionId.parameters);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(assets, description, environment, environmentSecrets, inputJsonSchema, name, outputJsonSchema, parameters);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PatchTransitionId {\n");
    sb.append("    assets: ").append(toIndentedString(assets)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    environment: ").append(toIndentedString(environment)).append("\n");
    sb.append("    environmentSecrets: ").append(toIndentedString(environmentSecrets)).append("\n");
    sb.append("    inputJsonSchema: ").append(toIndentedString(inputJsonSchema)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    outputJsonSchema: ").append(toIndentedString(outputJsonSchema)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("assets");
    openapiFields.add("description");
    openapiFields.add("environment");
    openapiFields.add("environmentSecrets");
    openapiFields.add("inputJsonSchema");
    openapiFields.add("name");
    openapiFields.add("outputJsonSchema");
    openapiFields.add("parameters");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PatchTransitionId
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PatchTransitionId.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PatchTransitionId is not found in the empty JSON string", PatchTransitionId.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PatchTransitionId.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PatchTransitionId` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("environmentSecrets") != null && !jsonObj.get("environmentSecrets").isJsonNull() && !jsonObj.get("environmentSecrets").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `environmentSecrets` to be an array in the JSON string but got `%s`", jsonObj.get("environmentSecrets").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `parameters`
      if (jsonObj.get("parameters") != null && !jsonObj.get("parameters").isJsonNull()) {
        PatchTransitionIdParameters.validateJsonElement(jsonObj.get("parameters"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PatchTransitionId.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PatchTransitionId' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PatchTransitionId> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PatchTransitionId.class));

       return (TypeAdapter<T>) new TypeAdapter<PatchTransitionId>() {
           @Override
           public void write(JsonWriter out, PatchTransitionId value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PatchTransitionId read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PatchTransitionId given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PatchTransitionId
   * @throws IOException if the JSON string is invalid with respect to PatchTransitionId
   */
  public static PatchTransitionId fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PatchTransitionId.class);
  }

  /**
   * Convert an instance of PatchTransitionId to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

