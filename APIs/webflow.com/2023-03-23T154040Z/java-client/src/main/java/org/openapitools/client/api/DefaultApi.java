/*
 * Lucidtech API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-03-23T15:40:40Z
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AppClient;
import org.openapitools.client.model.AppClients;
import org.openapitools.client.model.Asset;
import org.openapitools.client.model.Assets;
import org.openapitools.client.model.DataBundle;
import org.openapitools.client.model.DataBundles;
import org.openapitools.client.model.Dataset;
import org.openapitools.client.model.Datasets;
import org.openapitools.client.model.DeploymentEnvironment;
import org.openapitools.client.model.DeploymentEnvironments;
import org.openapitools.client.model.Document;
import org.openapitools.client.model.Documents;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.Log;
import org.openapitools.client.model.Logs;
import org.openapitools.client.model.Model;
import org.openapitools.client.model.Models;
import org.openapitools.client.model.Organization;
import org.openapitools.client.model.Organizations;
import org.openapitools.client.model.PatchAppClientId;
import org.openapitools.client.model.PatchAssetId;
import org.openapitools.client.model.PatchDataBundleId;
import org.openapitools.client.model.PatchDatasetId;
import org.openapitools.client.model.PatchDocumentId;
import org.openapitools.client.model.PatchModelId;
import org.openapitools.client.model.PatchOrganizationId;
import org.openapitools.client.model.PatchPaymentMethodId;
import org.openapitools.client.model.PatchSecretId;
import org.openapitools.client.model.PatchTrainingId;
import org.openapitools.client.model.PatchTransistionExecutionId;
import org.openapitools.client.model.PatchTransitionId;
import org.openapitools.client.model.PatchUserId;
import org.openapitools.client.model.PatchWorkflowExecutionId;
import org.openapitools.client.model.PatchWorkflowId;
import org.openapitools.client.model.PaymentMethod;
import org.openapitools.client.model.PaymentMethods;
import org.openapitools.client.model.Plan;
import org.openapitools.client.model.Plans;
import org.openapitools.client.model.PostAppClients;
import org.openapitools.client.model.PostAssets;
import org.openapitools.client.model.PostDataBundles;
import org.openapitools.client.model.PostDatasets;
import org.openapitools.client.model.PostDocuments;
import org.openapitools.client.model.PostModels;
import org.openapitools.client.model.PostOrganizations;
import org.openapitools.client.model.PostPaymentMethods;
import org.openapitools.client.model.PostPredictions;
import org.openapitools.client.model.PostSecrets;
import org.openapitools.client.model.PostTrainings;
import org.openapitools.client.model.PostTransitions;
import org.openapitools.client.model.PostUsers;
import org.openapitools.client.model.PostWorkflowExecutions;
import org.openapitools.client.model.PostWorkflows;
import org.openapitools.client.model.Prediction;
import org.openapitools.client.model.Predictions;
import org.openapitools.client.model.Profile;
import org.openapitools.client.model.Secret;
import org.openapitools.client.model.Secrets;
import org.openapitools.client.model.Training;
import org.openapitools.client.model.Trainings;
import org.openapitools.client.model.Transition;
import org.openapitools.client.model.TransitionExecution;
import org.openapitools.client.model.TransitionExecutions;
import org.openapitools.client.model.Transitions;
import org.openapitools.client.model.User;
import org.openapitools.client.model.Users;
import org.openapitools.client.model.Workflow;
import org.openapitools.client.model.WorkflowExecution;
import org.openapitools.client.model.WorkflowExecutions;
import org.openapitools.client.model.Workflows;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for appClientsAppClientIdDelete
     * @param appClientId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call appClientsAppClientIdDeleteCall(String appClientId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/appClients/{appClientId}"
            .replace("{" + "appClientId" + "}", localVarApiClient.escapeString(appClientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appClientsAppClientIdDeleteValidateBeforeCall(String appClientId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appClientId' is set
        if (appClientId == null) {
            throw new ApiException("Missing the required parameter 'appClientId' when calling appClientsAppClientIdDelete(Async)");
        }

        return appClientsAppClientIdDeleteCall(appClientId, _callback);

    }

    /**
     * 
     * 
     * @param appClientId  (required)
     * @return AppClient
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public AppClient appClientsAppClientIdDelete(String appClientId) throws ApiException {
        ApiResponse<AppClient> localVarResp = appClientsAppClientIdDeleteWithHttpInfo(appClientId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param appClientId  (required)
     * @return ApiResponse&lt;AppClient&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<AppClient> appClientsAppClientIdDeleteWithHttpInfo(String appClientId) throws ApiException {
        okhttp3.Call localVarCall = appClientsAppClientIdDeleteValidateBeforeCall(appClientId, null);
        Type localVarReturnType = new TypeToken<AppClient>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appClientId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call appClientsAppClientIdDeleteAsync(String appClientId, final ApiCallback<AppClient> _callback) throws ApiException {

        okhttp3.Call localVarCall = appClientsAppClientIdDeleteValidateBeforeCall(appClientId, _callback);
        Type localVarReturnType = new TypeToken<AppClient>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appClientsAppClientIdOptions
     * @param appClientId  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call appClientsAppClientIdOptionsCall(String appClientId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/appClients/{appClientId}"
            .replace("{" + "appClientId" + "}", localVarApiClient.escapeString(appClientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "OPTIONS", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appClientsAppClientIdOptionsValidateBeforeCall(String appClientId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appClientId' is set
        if (appClientId == null) {
            throw new ApiException("Missing the required parameter 'appClientId' when calling appClientsAppClientIdOptions(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling appClientsAppClientIdOptions(Async)");
        }

        return appClientsAppClientIdOptionsCall(appClientId, body, _callback);

    }

    /**
     * 
     * 
     * @param appClientId  (required)
     * @param body  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Object appClientsAppClientIdOptions(String appClientId, Object body) throws ApiException {
        ApiResponse<Object> localVarResp = appClientsAppClientIdOptionsWithHttpInfo(appClientId, body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param appClientId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Object> appClientsAppClientIdOptionsWithHttpInfo(String appClientId, Object body) throws ApiException {
        okhttp3.Call localVarCall = appClientsAppClientIdOptionsValidateBeforeCall(appClientId, body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appClientId  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call appClientsAppClientIdOptionsAsync(String appClientId, Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = appClientsAppClientIdOptionsValidateBeforeCall(appClientId, body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appClientsAppClientIdPatch
     * @param appClientId  (required)
     * @param contentType  (required)
     * @param patchAppClientId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call appClientsAppClientIdPatchCall(String appClientId, String contentType, PatchAppClientId patchAppClientId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchAppClientId;

        // create path and map variables
        String localVarPath = "/appClients/{appClientId}"
            .replace("{" + "appClientId" + "}", localVarApiClient.escapeString(appClientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appClientsAppClientIdPatchValidateBeforeCall(String appClientId, String contentType, PatchAppClientId patchAppClientId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appClientId' is set
        if (appClientId == null) {
            throw new ApiException("Missing the required parameter 'appClientId' when calling appClientsAppClientIdPatch(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling appClientsAppClientIdPatch(Async)");
        }

        // verify the required parameter 'patchAppClientId' is set
        if (patchAppClientId == null) {
            throw new ApiException("Missing the required parameter 'patchAppClientId' when calling appClientsAppClientIdPatch(Async)");
        }

        return appClientsAppClientIdPatchCall(appClientId, contentType, patchAppClientId, _callback);

    }

    /**
     * 
     * 
     * @param appClientId  (required)
     * @param contentType  (required)
     * @param patchAppClientId  (required)
     * @return AppClient
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public AppClient appClientsAppClientIdPatch(String appClientId, String contentType, PatchAppClientId patchAppClientId) throws ApiException {
        ApiResponse<AppClient> localVarResp = appClientsAppClientIdPatchWithHttpInfo(appClientId, contentType, patchAppClientId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param appClientId  (required)
     * @param contentType  (required)
     * @param patchAppClientId  (required)
     * @return ApiResponse&lt;AppClient&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<AppClient> appClientsAppClientIdPatchWithHttpInfo(String appClientId, String contentType, PatchAppClientId patchAppClientId) throws ApiException {
        okhttp3.Call localVarCall = appClientsAppClientIdPatchValidateBeforeCall(appClientId, contentType, patchAppClientId, null);
        Type localVarReturnType = new TypeToken<AppClient>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appClientId  (required)
     * @param contentType  (required)
     * @param patchAppClientId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call appClientsAppClientIdPatchAsync(String appClientId, String contentType, PatchAppClientId patchAppClientId, final ApiCallback<AppClient> _callback) throws ApiException {

        okhttp3.Call localVarCall = appClientsAppClientIdPatchValidateBeforeCall(appClientId, contentType, patchAppClientId, _callback);
        Type localVarReturnType = new TypeToken<AppClient>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appClientsGet
     * @param nextToken  (optional)
     * @param maxResults  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call appClientsGetCall(String nextToken, String maxResults, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/appClients";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appClientsGetValidateBeforeCall(String nextToken, String maxResults, final ApiCallback _callback) throws ApiException {
        return appClientsGetCall(nextToken, maxResults, _callback);

    }

    /**
     * 
     * 
     * @param nextToken  (optional)
     * @param maxResults  (optional)
     * @return AppClients
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public AppClients appClientsGet(String nextToken, String maxResults) throws ApiException {
        ApiResponse<AppClients> localVarResp = appClientsGetWithHttpInfo(nextToken, maxResults);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param nextToken  (optional)
     * @param maxResults  (optional)
     * @return ApiResponse&lt;AppClients&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<AppClients> appClientsGetWithHttpInfo(String nextToken, String maxResults) throws ApiException {
        okhttp3.Call localVarCall = appClientsGetValidateBeforeCall(nextToken, maxResults, null);
        Type localVarReturnType = new TypeToken<AppClients>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param nextToken  (optional)
     * @param maxResults  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call appClientsGetAsync(String nextToken, String maxResults, final ApiCallback<AppClients> _callback) throws ApiException {

        okhttp3.Call localVarCall = appClientsGetValidateBeforeCall(nextToken, maxResults, _callback);
        Type localVarReturnType = new TypeToken<AppClients>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appClientsOptions
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call appClientsOptionsCall(Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/appClients";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "OPTIONS", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appClientsOptionsValidateBeforeCall(Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling appClientsOptions(Async)");
        }

        return appClientsOptionsCall(body, _callback);

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Object appClientsOptions(Object body) throws ApiException {
        ApiResponse<Object> localVarResp = appClientsOptionsWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Object> appClientsOptionsWithHttpInfo(Object body) throws ApiException {
        okhttp3.Call localVarCall = appClientsOptionsValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call appClientsOptionsAsync(Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = appClientsOptionsValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appClientsPost
     * @param contentType  (required)
     * @param postAppClients  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call appClientsPostCall(String contentType, PostAppClients postAppClients, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postAppClients;

        // create path and map variables
        String localVarPath = "/appClients";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appClientsPostValidateBeforeCall(String contentType, PostAppClients postAppClients, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling appClientsPost(Async)");
        }

        // verify the required parameter 'postAppClients' is set
        if (postAppClients == null) {
            throw new ApiException("Missing the required parameter 'postAppClients' when calling appClientsPost(Async)");
        }

        return appClientsPostCall(contentType, postAppClients, _callback);

    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param postAppClients  (required)
     * @return AppClient
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public AppClient appClientsPost(String contentType, PostAppClients postAppClients) throws ApiException {
        ApiResponse<AppClient> localVarResp = appClientsPostWithHttpInfo(contentType, postAppClients);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param postAppClients  (required)
     * @return ApiResponse&lt;AppClient&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<AppClient> appClientsPostWithHttpInfo(String contentType, PostAppClients postAppClients) throws ApiException {
        okhttp3.Call localVarCall = appClientsPostValidateBeforeCall(contentType, postAppClients, null);
        Type localVarReturnType = new TypeToken<AppClient>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentType  (required)
     * @param postAppClients  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call appClientsPostAsync(String contentType, PostAppClients postAppClients, final ApiCallback<AppClient> _callback) throws ApiException {

        okhttp3.Call localVarCall = appClientsPostValidateBeforeCall(contentType, postAppClients, _callback);
        Type localVarReturnType = new TypeToken<AppClient>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assetsAssetIdDelete
     * @param assetId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call assetsAssetIdDeleteCall(String assetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/assets/{assetId}"
            .replace("{" + "assetId" + "}", localVarApiClient.escapeString(assetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetsAssetIdDeleteValidateBeforeCall(String assetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'assetId' is set
        if (assetId == null) {
            throw new ApiException("Missing the required parameter 'assetId' when calling assetsAssetIdDelete(Async)");
        }

        return assetsAssetIdDeleteCall(assetId, _callback);

    }

    /**
     * 
     * 
     * @param assetId  (required)
     * @return Asset
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Asset assetsAssetIdDelete(String assetId) throws ApiException {
        ApiResponse<Asset> localVarResp = assetsAssetIdDeleteWithHttpInfo(assetId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param assetId  (required)
     * @return ApiResponse&lt;Asset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Asset> assetsAssetIdDeleteWithHttpInfo(String assetId) throws ApiException {
        okhttp3.Call localVarCall = assetsAssetIdDeleteValidateBeforeCall(assetId, null);
        Type localVarReturnType = new TypeToken<Asset>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param assetId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call assetsAssetIdDeleteAsync(String assetId, final ApiCallback<Asset> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetsAssetIdDeleteValidateBeforeCall(assetId, _callback);
        Type localVarReturnType = new TypeToken<Asset>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assetsAssetIdGet
     * @param assetId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call assetsAssetIdGetCall(String assetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/assets/{assetId}"
            .replace("{" + "assetId" + "}", localVarApiClient.escapeString(assetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetsAssetIdGetValidateBeforeCall(String assetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'assetId' is set
        if (assetId == null) {
            throw new ApiException("Missing the required parameter 'assetId' when calling assetsAssetIdGet(Async)");
        }

        return assetsAssetIdGetCall(assetId, _callback);

    }

    /**
     * 
     * 
     * @param assetId  (required)
     * @return Asset
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Asset assetsAssetIdGet(String assetId) throws ApiException {
        ApiResponse<Asset> localVarResp = assetsAssetIdGetWithHttpInfo(assetId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param assetId  (required)
     * @return ApiResponse&lt;Asset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Asset> assetsAssetIdGetWithHttpInfo(String assetId) throws ApiException {
        okhttp3.Call localVarCall = assetsAssetIdGetValidateBeforeCall(assetId, null);
        Type localVarReturnType = new TypeToken<Asset>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param assetId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call assetsAssetIdGetAsync(String assetId, final ApiCallback<Asset> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetsAssetIdGetValidateBeforeCall(assetId, _callback);
        Type localVarReturnType = new TypeToken<Asset>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assetsAssetIdOptions
     * @param assetId  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call assetsAssetIdOptionsCall(String assetId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/assets/{assetId}"
            .replace("{" + "assetId" + "}", localVarApiClient.escapeString(assetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "OPTIONS", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetsAssetIdOptionsValidateBeforeCall(String assetId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'assetId' is set
        if (assetId == null) {
            throw new ApiException("Missing the required parameter 'assetId' when calling assetsAssetIdOptions(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling assetsAssetIdOptions(Async)");
        }

        return assetsAssetIdOptionsCall(assetId, body, _callback);

    }

    /**
     * 
     * 
     * @param assetId  (required)
     * @param body  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Object assetsAssetIdOptions(String assetId, Object body) throws ApiException {
        ApiResponse<Object> localVarResp = assetsAssetIdOptionsWithHttpInfo(assetId, body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param assetId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Object> assetsAssetIdOptionsWithHttpInfo(String assetId, Object body) throws ApiException {
        okhttp3.Call localVarCall = assetsAssetIdOptionsValidateBeforeCall(assetId, body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param assetId  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call assetsAssetIdOptionsAsync(String assetId, Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetsAssetIdOptionsValidateBeforeCall(assetId, body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assetsAssetIdPatch
     * @param contentType  (required)
     * @param assetId  (required)
     * @param patchAssetId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call assetsAssetIdPatchCall(String contentType, String assetId, PatchAssetId patchAssetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchAssetId;

        // create path and map variables
        String localVarPath = "/assets/{assetId}"
            .replace("{" + "assetId" + "}", localVarApiClient.escapeString(assetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetsAssetIdPatchValidateBeforeCall(String contentType, String assetId, PatchAssetId patchAssetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling assetsAssetIdPatch(Async)");
        }

        // verify the required parameter 'assetId' is set
        if (assetId == null) {
            throw new ApiException("Missing the required parameter 'assetId' when calling assetsAssetIdPatch(Async)");
        }

        // verify the required parameter 'patchAssetId' is set
        if (patchAssetId == null) {
            throw new ApiException("Missing the required parameter 'patchAssetId' when calling assetsAssetIdPatch(Async)");
        }

        return assetsAssetIdPatchCall(contentType, assetId, patchAssetId, _callback);

    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param assetId  (required)
     * @param patchAssetId  (required)
     * @return Asset
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Asset assetsAssetIdPatch(String contentType, String assetId, PatchAssetId patchAssetId) throws ApiException {
        ApiResponse<Asset> localVarResp = assetsAssetIdPatchWithHttpInfo(contentType, assetId, patchAssetId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param assetId  (required)
     * @param patchAssetId  (required)
     * @return ApiResponse&lt;Asset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Asset> assetsAssetIdPatchWithHttpInfo(String contentType, String assetId, PatchAssetId patchAssetId) throws ApiException {
        okhttp3.Call localVarCall = assetsAssetIdPatchValidateBeforeCall(contentType, assetId, patchAssetId, null);
        Type localVarReturnType = new TypeToken<Asset>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentType  (required)
     * @param assetId  (required)
     * @param patchAssetId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call assetsAssetIdPatchAsync(String contentType, String assetId, PatchAssetId patchAssetId, final ApiCallback<Asset> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetsAssetIdPatchValidateBeforeCall(contentType, assetId, patchAssetId, _callback);
        Type localVarReturnType = new TypeToken<Asset>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assetsGet
     * @param nextToken  (optional)
     * @param maxResults  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call assetsGetCall(String nextToken, String maxResults, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/assets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetsGetValidateBeforeCall(String nextToken, String maxResults, final ApiCallback _callback) throws ApiException {
        return assetsGetCall(nextToken, maxResults, _callback);

    }

    /**
     * 
     * 
     * @param nextToken  (optional)
     * @param maxResults  (optional)
     * @return Assets
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Assets assetsGet(String nextToken, String maxResults) throws ApiException {
        ApiResponse<Assets> localVarResp = assetsGetWithHttpInfo(nextToken, maxResults);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param nextToken  (optional)
     * @param maxResults  (optional)
     * @return ApiResponse&lt;Assets&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Assets> assetsGetWithHttpInfo(String nextToken, String maxResults) throws ApiException {
        okhttp3.Call localVarCall = assetsGetValidateBeforeCall(nextToken, maxResults, null);
        Type localVarReturnType = new TypeToken<Assets>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param nextToken  (optional)
     * @param maxResults  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call assetsGetAsync(String nextToken, String maxResults, final ApiCallback<Assets> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetsGetValidateBeforeCall(nextToken, maxResults, _callback);
        Type localVarReturnType = new TypeToken<Assets>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assetsOptions
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call assetsOptionsCall(Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/assets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "OPTIONS", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetsOptionsValidateBeforeCall(Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling assetsOptions(Async)");
        }

        return assetsOptionsCall(body, _callback);

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Object assetsOptions(Object body) throws ApiException {
        ApiResponse<Object> localVarResp = assetsOptionsWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Object> assetsOptionsWithHttpInfo(Object body) throws ApiException {
        okhttp3.Call localVarCall = assetsOptionsValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call assetsOptionsAsync(Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetsOptionsValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assetsPost
     * @param contentType  (required)
     * @param postAssets  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call assetsPostCall(String contentType, PostAssets postAssets, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postAssets;

        // create path and map variables
        String localVarPath = "/assets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetsPostValidateBeforeCall(String contentType, PostAssets postAssets, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling assetsPost(Async)");
        }

        // verify the required parameter 'postAssets' is set
        if (postAssets == null) {
            throw new ApiException("Missing the required parameter 'postAssets' when calling assetsPost(Async)");
        }

        return assetsPostCall(contentType, postAssets, _callback);

    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param postAssets  (required)
     * @return Asset
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Asset assetsPost(String contentType, PostAssets postAssets) throws ApiException {
        ApiResponse<Asset> localVarResp = assetsPostWithHttpInfo(contentType, postAssets);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param postAssets  (required)
     * @return ApiResponse&lt;Asset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Asset> assetsPostWithHttpInfo(String contentType, PostAssets postAssets) throws ApiException {
        okhttp3.Call localVarCall = assetsPostValidateBeforeCall(contentType, postAssets, null);
        Type localVarReturnType = new TypeToken<Asset>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentType  (required)
     * @param postAssets  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call assetsPostAsync(String contentType, PostAssets postAssets, final ApiCallback<Asset> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetsPostValidateBeforeCall(contentType, postAssets, _callback);
        Type localVarReturnType = new TypeToken<Asset>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for datasetsDatasetIdDelete
     * @param datasetId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call datasetsDatasetIdDeleteCall(String datasetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datasets/{datasetId}"
            .replace("{" + "datasetId" + "}", localVarApiClient.escapeString(datasetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call datasetsDatasetIdDeleteValidateBeforeCall(String datasetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'datasetId' is set
        if (datasetId == null) {
            throw new ApiException("Missing the required parameter 'datasetId' when calling datasetsDatasetIdDelete(Async)");
        }

        return datasetsDatasetIdDeleteCall(datasetId, _callback);

    }

    /**
     * 
     * 
     * @param datasetId  (required)
     * @return Dataset
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Dataset datasetsDatasetIdDelete(String datasetId) throws ApiException {
        ApiResponse<Dataset> localVarResp = datasetsDatasetIdDeleteWithHttpInfo(datasetId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param datasetId  (required)
     * @return ApiResponse&lt;Dataset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Dataset> datasetsDatasetIdDeleteWithHttpInfo(String datasetId) throws ApiException {
        okhttp3.Call localVarCall = datasetsDatasetIdDeleteValidateBeforeCall(datasetId, null);
        Type localVarReturnType = new TypeToken<Dataset>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param datasetId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call datasetsDatasetIdDeleteAsync(String datasetId, final ApiCallback<Dataset> _callback) throws ApiException {

        okhttp3.Call localVarCall = datasetsDatasetIdDeleteValidateBeforeCall(datasetId, _callback);
        Type localVarReturnType = new TypeToken<Dataset>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for datasetsDatasetIdGet
     * @param datasetId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call datasetsDatasetIdGetCall(String datasetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datasets/{datasetId}"
            .replace("{" + "datasetId" + "}", localVarApiClient.escapeString(datasetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call datasetsDatasetIdGetValidateBeforeCall(String datasetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'datasetId' is set
        if (datasetId == null) {
            throw new ApiException("Missing the required parameter 'datasetId' when calling datasetsDatasetIdGet(Async)");
        }

        return datasetsDatasetIdGetCall(datasetId, _callback);

    }

    /**
     * 
     * 
     * @param datasetId  (required)
     * @return Dataset
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Dataset datasetsDatasetIdGet(String datasetId) throws ApiException {
        ApiResponse<Dataset> localVarResp = datasetsDatasetIdGetWithHttpInfo(datasetId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param datasetId  (required)
     * @return ApiResponse&lt;Dataset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Dataset> datasetsDatasetIdGetWithHttpInfo(String datasetId) throws ApiException {
        okhttp3.Call localVarCall = datasetsDatasetIdGetValidateBeforeCall(datasetId, null);
        Type localVarReturnType = new TypeToken<Dataset>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param datasetId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call datasetsDatasetIdGetAsync(String datasetId, final ApiCallback<Dataset> _callback) throws ApiException {

        okhttp3.Call localVarCall = datasetsDatasetIdGetValidateBeforeCall(datasetId, _callback);
        Type localVarReturnType = new TypeToken<Dataset>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for datasetsDatasetIdOptions
     * @param datasetId  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call datasetsDatasetIdOptionsCall(String datasetId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/datasets/{datasetId}"
            .replace("{" + "datasetId" + "}", localVarApiClient.escapeString(datasetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "OPTIONS", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call datasetsDatasetIdOptionsValidateBeforeCall(String datasetId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'datasetId' is set
        if (datasetId == null) {
            throw new ApiException("Missing the required parameter 'datasetId' when calling datasetsDatasetIdOptions(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling datasetsDatasetIdOptions(Async)");
        }

        return datasetsDatasetIdOptionsCall(datasetId, body, _callback);

    }

    /**
     * 
     * 
     * @param datasetId  (required)
     * @param body  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Object datasetsDatasetIdOptions(String datasetId, Object body) throws ApiException {
        ApiResponse<Object> localVarResp = datasetsDatasetIdOptionsWithHttpInfo(datasetId, body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param datasetId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Object> datasetsDatasetIdOptionsWithHttpInfo(String datasetId, Object body) throws ApiException {
        okhttp3.Call localVarCall = datasetsDatasetIdOptionsValidateBeforeCall(datasetId, body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param datasetId  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call datasetsDatasetIdOptionsAsync(String datasetId, Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = datasetsDatasetIdOptionsValidateBeforeCall(datasetId, body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for datasetsDatasetIdPatch
     * @param contentType  (required)
     * @param datasetId  (required)
     * @param patchDatasetId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call datasetsDatasetIdPatchCall(String contentType, String datasetId, PatchDatasetId patchDatasetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchDatasetId;

        // create path and map variables
        String localVarPath = "/datasets/{datasetId}"
            .replace("{" + "datasetId" + "}", localVarApiClient.escapeString(datasetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call datasetsDatasetIdPatchValidateBeforeCall(String contentType, String datasetId, PatchDatasetId patchDatasetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling datasetsDatasetIdPatch(Async)");
        }

        // verify the required parameter 'datasetId' is set
        if (datasetId == null) {
            throw new ApiException("Missing the required parameter 'datasetId' when calling datasetsDatasetIdPatch(Async)");
        }

        // verify the required parameter 'patchDatasetId' is set
        if (patchDatasetId == null) {
            throw new ApiException("Missing the required parameter 'patchDatasetId' when calling datasetsDatasetIdPatch(Async)");
        }

        return datasetsDatasetIdPatchCall(contentType, datasetId, patchDatasetId, _callback);

    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param datasetId  (required)
     * @param patchDatasetId  (required)
     * @return Dataset
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Dataset datasetsDatasetIdPatch(String contentType, String datasetId, PatchDatasetId patchDatasetId) throws ApiException {
        ApiResponse<Dataset> localVarResp = datasetsDatasetIdPatchWithHttpInfo(contentType, datasetId, patchDatasetId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param datasetId  (required)
     * @param patchDatasetId  (required)
     * @return ApiResponse&lt;Dataset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Dataset> datasetsDatasetIdPatchWithHttpInfo(String contentType, String datasetId, PatchDatasetId patchDatasetId) throws ApiException {
        okhttp3.Call localVarCall = datasetsDatasetIdPatchValidateBeforeCall(contentType, datasetId, patchDatasetId, null);
        Type localVarReturnType = new TypeToken<Dataset>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentType  (required)
     * @param datasetId  (required)
     * @param patchDatasetId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call datasetsDatasetIdPatchAsync(String contentType, String datasetId, PatchDatasetId patchDatasetId, final ApiCallback<Dataset> _callback) throws ApiException {

        okhttp3.Call localVarCall = datasetsDatasetIdPatchValidateBeforeCall(contentType, datasetId, patchDatasetId, _callback);
        Type localVarReturnType = new TypeToken<Dataset>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for datasetsGet
     * @param nextToken  (optional)
     * @param maxResults  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call datasetsGetCall(String nextToken, String maxResults, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datasets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call datasetsGetValidateBeforeCall(String nextToken, String maxResults, final ApiCallback _callback) throws ApiException {
        return datasetsGetCall(nextToken, maxResults, _callback);

    }

    /**
     * 
     * 
     * @param nextToken  (optional)
     * @param maxResults  (optional)
     * @return Datasets
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Datasets datasetsGet(String nextToken, String maxResults) throws ApiException {
        ApiResponse<Datasets> localVarResp = datasetsGetWithHttpInfo(nextToken, maxResults);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param nextToken  (optional)
     * @param maxResults  (optional)
     * @return ApiResponse&lt;Datasets&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Datasets> datasetsGetWithHttpInfo(String nextToken, String maxResults) throws ApiException {
        okhttp3.Call localVarCall = datasetsGetValidateBeforeCall(nextToken, maxResults, null);
        Type localVarReturnType = new TypeToken<Datasets>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param nextToken  (optional)
     * @param maxResults  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call datasetsGetAsync(String nextToken, String maxResults, final ApiCallback<Datasets> _callback) throws ApiException {

        okhttp3.Call localVarCall = datasetsGetValidateBeforeCall(nextToken, maxResults, _callback);
        Type localVarReturnType = new TypeToken<Datasets>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for datasetsOptions
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call datasetsOptionsCall(Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/datasets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "OPTIONS", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call datasetsOptionsValidateBeforeCall(Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling datasetsOptions(Async)");
        }

        return datasetsOptionsCall(body, _callback);

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Object datasetsOptions(Object body) throws ApiException {
        ApiResponse<Object> localVarResp = datasetsOptionsWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Object> datasetsOptionsWithHttpInfo(Object body) throws ApiException {
        okhttp3.Call localVarCall = datasetsOptionsValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call datasetsOptionsAsync(Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = datasetsOptionsValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for datasetsPost
     * @param contentType  (required)
     * @param postDatasets  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call datasetsPostCall(String contentType, PostDatasets postDatasets, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postDatasets;

        // create path and map variables
        String localVarPath = "/datasets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call datasetsPostValidateBeforeCall(String contentType, PostDatasets postDatasets, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling datasetsPost(Async)");
        }

        // verify the required parameter 'postDatasets' is set
        if (postDatasets == null) {
            throw new ApiException("Missing the required parameter 'postDatasets' when calling datasetsPost(Async)");
        }

        return datasetsPostCall(contentType, postDatasets, _callback);

    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param postDatasets  (required)
     * @return Dataset
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Dataset datasetsPost(String contentType, PostDatasets postDatasets) throws ApiException {
        ApiResponse<Dataset> localVarResp = datasetsPostWithHttpInfo(contentType, postDatasets);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param postDatasets  (required)
     * @return ApiResponse&lt;Dataset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Dataset> datasetsPostWithHttpInfo(String contentType, PostDatasets postDatasets) throws ApiException {
        okhttp3.Call localVarCall = datasetsPostValidateBeforeCall(contentType, postDatasets, null);
        Type localVarReturnType = new TypeToken<Dataset>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentType  (required)
     * @param postDatasets  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call datasetsPostAsync(String contentType, PostDatasets postDatasets, final ApiCallback<Dataset> _callback) throws ApiException {

        okhttp3.Call localVarCall = datasetsPostValidateBeforeCall(contentType, postDatasets, _callback);
        Type localVarReturnType = new TypeToken<Dataset>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deploymentEnvironmentsDeploymentEnvironmentIdGet
     * @param deploymentEnvironmentId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call deploymentEnvironmentsDeploymentEnvironmentIdGetCall(String deploymentEnvironmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/deploymentEnvironments/{deploymentEnvironmentId}"
            .replace("{" + "deploymentEnvironmentId" + "}", localVarApiClient.escapeString(deploymentEnvironmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deploymentEnvironmentsDeploymentEnvironmentIdGetValidateBeforeCall(String deploymentEnvironmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deploymentEnvironmentId' is set
        if (deploymentEnvironmentId == null) {
            throw new ApiException("Missing the required parameter 'deploymentEnvironmentId' when calling deploymentEnvironmentsDeploymentEnvironmentIdGet(Async)");
        }

        return deploymentEnvironmentsDeploymentEnvironmentIdGetCall(deploymentEnvironmentId, _callback);

    }

    /**
     * 
     * 
     * @param deploymentEnvironmentId  (required)
     * @return DeploymentEnvironment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public DeploymentEnvironment deploymentEnvironmentsDeploymentEnvironmentIdGet(String deploymentEnvironmentId) throws ApiException {
        ApiResponse<DeploymentEnvironment> localVarResp = deploymentEnvironmentsDeploymentEnvironmentIdGetWithHttpInfo(deploymentEnvironmentId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param deploymentEnvironmentId  (required)
     * @return ApiResponse&lt;DeploymentEnvironment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<DeploymentEnvironment> deploymentEnvironmentsDeploymentEnvironmentIdGetWithHttpInfo(String deploymentEnvironmentId) throws ApiException {
        okhttp3.Call localVarCall = deploymentEnvironmentsDeploymentEnvironmentIdGetValidateBeforeCall(deploymentEnvironmentId, null);
        Type localVarReturnType = new TypeToken<DeploymentEnvironment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param deploymentEnvironmentId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call deploymentEnvironmentsDeploymentEnvironmentIdGetAsync(String deploymentEnvironmentId, final ApiCallback<DeploymentEnvironment> _callback) throws ApiException {

        okhttp3.Call localVarCall = deploymentEnvironmentsDeploymentEnvironmentIdGetValidateBeforeCall(deploymentEnvironmentId, _callback);
        Type localVarReturnType = new TypeToken<DeploymentEnvironment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deploymentEnvironmentsDeploymentEnvironmentIdOptions
     * @param deploymentEnvironmentId  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call deploymentEnvironmentsDeploymentEnvironmentIdOptionsCall(String deploymentEnvironmentId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/deploymentEnvironments/{deploymentEnvironmentId}"
            .replace("{" + "deploymentEnvironmentId" + "}", localVarApiClient.escapeString(deploymentEnvironmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "OPTIONS", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deploymentEnvironmentsDeploymentEnvironmentIdOptionsValidateBeforeCall(String deploymentEnvironmentId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deploymentEnvironmentId' is set
        if (deploymentEnvironmentId == null) {
            throw new ApiException("Missing the required parameter 'deploymentEnvironmentId' when calling deploymentEnvironmentsDeploymentEnvironmentIdOptions(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling deploymentEnvironmentsDeploymentEnvironmentIdOptions(Async)");
        }

        return deploymentEnvironmentsDeploymentEnvironmentIdOptionsCall(deploymentEnvironmentId, body, _callback);

    }

    /**
     * 
     * 
     * @param deploymentEnvironmentId  (required)
     * @param body  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Object deploymentEnvironmentsDeploymentEnvironmentIdOptions(String deploymentEnvironmentId, Object body) throws ApiException {
        ApiResponse<Object> localVarResp = deploymentEnvironmentsDeploymentEnvironmentIdOptionsWithHttpInfo(deploymentEnvironmentId, body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param deploymentEnvironmentId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Object> deploymentEnvironmentsDeploymentEnvironmentIdOptionsWithHttpInfo(String deploymentEnvironmentId, Object body) throws ApiException {
        okhttp3.Call localVarCall = deploymentEnvironmentsDeploymentEnvironmentIdOptionsValidateBeforeCall(deploymentEnvironmentId, body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param deploymentEnvironmentId  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call deploymentEnvironmentsDeploymentEnvironmentIdOptionsAsync(String deploymentEnvironmentId, Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deploymentEnvironmentsDeploymentEnvironmentIdOptionsValidateBeforeCall(deploymentEnvironmentId, body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deploymentEnvironmentsGet
     * @param owner  (optional)
     * @param nextToken  (optional)
     * @param maxResults  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call deploymentEnvironmentsGetCall(String owner, String nextToken, String maxResults, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/deploymentEnvironments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (owner != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("owner", owner));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deploymentEnvironmentsGetValidateBeforeCall(String owner, String nextToken, String maxResults, final ApiCallback _callback) throws ApiException {
        return deploymentEnvironmentsGetCall(owner, nextToken, maxResults, _callback);

    }

    /**
     * 
     * 
     * @param owner  (optional)
     * @param nextToken  (optional)
     * @param maxResults  (optional)
     * @return DeploymentEnvironments
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public DeploymentEnvironments deploymentEnvironmentsGet(String owner, String nextToken, String maxResults) throws ApiException {
        ApiResponse<DeploymentEnvironments> localVarResp = deploymentEnvironmentsGetWithHttpInfo(owner, nextToken, maxResults);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param owner  (optional)
     * @param nextToken  (optional)
     * @param maxResults  (optional)
     * @return ApiResponse&lt;DeploymentEnvironments&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<DeploymentEnvironments> deploymentEnvironmentsGetWithHttpInfo(String owner, String nextToken, String maxResults) throws ApiException {
        okhttp3.Call localVarCall = deploymentEnvironmentsGetValidateBeforeCall(owner, nextToken, maxResults, null);
        Type localVarReturnType = new TypeToken<DeploymentEnvironments>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param owner  (optional)
     * @param nextToken  (optional)
     * @param maxResults  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call deploymentEnvironmentsGetAsync(String owner, String nextToken, String maxResults, final ApiCallback<DeploymentEnvironments> _callback) throws ApiException {

        okhttp3.Call localVarCall = deploymentEnvironmentsGetValidateBeforeCall(owner, nextToken, maxResults, _callback);
        Type localVarReturnType = new TypeToken<DeploymentEnvironments>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deploymentEnvironmentsOptions
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call deploymentEnvironmentsOptionsCall(Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/deploymentEnvironments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "OPTIONS", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deploymentEnvironmentsOptionsValidateBeforeCall(Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling deploymentEnvironmentsOptions(Async)");
        }

        return deploymentEnvironmentsOptionsCall(body, _callback);

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Object deploymentEnvironmentsOptions(Object body) throws ApiException {
        ApiResponse<Object> localVarResp = deploymentEnvironmentsOptionsWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Object> deploymentEnvironmentsOptionsWithHttpInfo(Object body) throws ApiException {
        okhttp3.Call localVarCall = deploymentEnvironmentsOptionsValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call deploymentEnvironmentsOptionsAsync(Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deploymentEnvironmentsOptionsValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentsDelete
     * @param consentId  (optional)
     * @param datasetId  (optional)
     * @param nextToken  (optional)
     * @param maxResults  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call documentsDeleteCall(String consentId, String datasetId, String nextToken, String maxResults, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/documents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (consentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("consentId", consentId));
        }

        if (datasetId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("datasetId", datasetId));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentsDeleteValidateBeforeCall(String consentId, String datasetId, String nextToken, String maxResults, final ApiCallback _callback) throws ApiException {
        return documentsDeleteCall(consentId, datasetId, nextToken, maxResults, _callback);

    }

    /**
     * 
     * 
     * @param consentId  (optional)
     * @param datasetId  (optional)
     * @param nextToken  (optional)
     * @param maxResults  (optional)
     * @return Documents
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Documents documentsDelete(String consentId, String datasetId, String nextToken, String maxResults) throws ApiException {
        ApiResponse<Documents> localVarResp = documentsDeleteWithHttpInfo(consentId, datasetId, nextToken, maxResults);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param consentId  (optional)
     * @param datasetId  (optional)
     * @param nextToken  (optional)
     * @param maxResults  (optional)
     * @return ApiResponse&lt;Documents&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Documents> documentsDeleteWithHttpInfo(String consentId, String datasetId, String nextToken, String maxResults) throws ApiException {
        okhttp3.Call localVarCall = documentsDeleteValidateBeforeCall(consentId, datasetId, nextToken, maxResults, null);
        Type localVarReturnType = new TypeToken<Documents>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param consentId  (optional)
     * @param datasetId  (optional)
     * @param nextToken  (optional)
     * @param maxResults  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call documentsDeleteAsync(String consentId, String datasetId, String nextToken, String maxResults, final ApiCallback<Documents> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentsDeleteValidateBeforeCall(consentId, datasetId, nextToken, maxResults, _callback);
        Type localVarReturnType = new TypeToken<Documents>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentsDocumentIdDelete
     * @param documentId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call documentsDocumentIdDeleteCall(String documentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/documents/{documentId}"
            .replace("{" + "documentId" + "}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentsDocumentIdDeleteValidateBeforeCall(String documentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling documentsDocumentIdDelete(Async)");
        }

        return documentsDocumentIdDeleteCall(documentId, _callback);

    }

    /**
     * 
     * 
     * @param documentId  (required)
     * @return Document
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Document documentsDocumentIdDelete(String documentId) throws ApiException {
        ApiResponse<Document> localVarResp = documentsDocumentIdDeleteWithHttpInfo(documentId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param documentId  (required)
     * @return ApiResponse&lt;Document&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Document> documentsDocumentIdDeleteWithHttpInfo(String documentId) throws ApiException {
        okhttp3.Call localVarCall = documentsDocumentIdDeleteValidateBeforeCall(documentId, null);
        Type localVarReturnType = new TypeToken<Document>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param documentId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call documentsDocumentIdDeleteAsync(String documentId, final ApiCallback<Document> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentsDocumentIdDeleteValidateBeforeCall(documentId, _callback);
        Type localVarReturnType = new TypeToken<Document>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentsDocumentIdGet
     * @param documentId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call documentsDocumentIdGetCall(String documentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/documents/{documentId}"
            .replace("{" + "documentId" + "}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentsDocumentIdGetValidateBeforeCall(String documentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling documentsDocumentIdGet(Async)");
        }

        return documentsDocumentIdGetCall(documentId, _callback);

    }

    /**
     * 
     * 
     * @param documentId  (required)
     * @return Document
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Document documentsDocumentIdGet(String documentId) throws ApiException {
        ApiResponse<Document> localVarResp = documentsDocumentIdGetWithHttpInfo(documentId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param documentId  (required)
     * @return ApiResponse&lt;Document&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Document> documentsDocumentIdGetWithHttpInfo(String documentId) throws ApiException {
        okhttp3.Call localVarCall = documentsDocumentIdGetValidateBeforeCall(documentId, null);
        Type localVarReturnType = new TypeToken<Document>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param documentId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call documentsDocumentIdGetAsync(String documentId, final ApiCallback<Document> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentsDocumentIdGetValidateBeforeCall(documentId, _callback);
        Type localVarReturnType = new TypeToken<Document>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentsDocumentIdOptions
     * @param documentId  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call documentsDocumentIdOptionsCall(String documentId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/documents/{documentId}"
            .replace("{" + "documentId" + "}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "OPTIONS", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentsDocumentIdOptionsValidateBeforeCall(String documentId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling documentsDocumentIdOptions(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling documentsDocumentIdOptions(Async)");
        }

        return documentsDocumentIdOptionsCall(documentId, body, _callback);

    }

    /**
     * 
     * 
     * @param documentId  (required)
     * @param body  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Object documentsDocumentIdOptions(String documentId, Object body) throws ApiException {
        ApiResponse<Object> localVarResp = documentsDocumentIdOptionsWithHttpInfo(documentId, body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param documentId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Object> documentsDocumentIdOptionsWithHttpInfo(String documentId, Object body) throws ApiException {
        okhttp3.Call localVarCall = documentsDocumentIdOptionsValidateBeforeCall(documentId, body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param documentId  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call documentsDocumentIdOptionsAsync(String documentId, Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentsDocumentIdOptionsValidateBeforeCall(documentId, body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentsDocumentIdPatch
     * @param contentType  (required)
     * @param documentId  (required)
     * @param patchDocumentId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call documentsDocumentIdPatchCall(String contentType, String documentId, PatchDocumentId patchDocumentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchDocumentId;

        // create path and map variables
        String localVarPath = "/documents/{documentId}"
            .replace("{" + "documentId" + "}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentsDocumentIdPatchValidateBeforeCall(String contentType, String documentId, PatchDocumentId patchDocumentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling documentsDocumentIdPatch(Async)");
        }

        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling documentsDocumentIdPatch(Async)");
        }

        // verify the required parameter 'patchDocumentId' is set
        if (patchDocumentId == null) {
            throw new ApiException("Missing the required parameter 'patchDocumentId' when calling documentsDocumentIdPatch(Async)");
        }

        return documentsDocumentIdPatchCall(contentType, documentId, patchDocumentId, _callback);

    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param documentId  (required)
     * @param patchDocumentId  (required)
     * @return Document
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Document documentsDocumentIdPatch(String contentType, String documentId, PatchDocumentId patchDocumentId) throws ApiException {
        ApiResponse<Document> localVarResp = documentsDocumentIdPatchWithHttpInfo(contentType, documentId, patchDocumentId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param documentId  (required)
     * @param patchDocumentId  (required)
     * @return ApiResponse&lt;Document&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Document> documentsDocumentIdPatchWithHttpInfo(String contentType, String documentId, PatchDocumentId patchDocumentId) throws ApiException {
        okhttp3.Call localVarCall = documentsDocumentIdPatchValidateBeforeCall(contentType, documentId, patchDocumentId, null);
        Type localVarReturnType = new TypeToken<Document>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentType  (required)
     * @param documentId  (required)
     * @param patchDocumentId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call documentsDocumentIdPatchAsync(String contentType, String documentId, PatchDocumentId patchDocumentId, final ApiCallback<Document> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentsDocumentIdPatchValidateBeforeCall(contentType, documentId, patchDocumentId, _callback);
        Type localVarReturnType = new TypeToken<Document>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentsGet
     * @param datasetId  (optional)
     * @param nextToken  (optional)
     * @param order  (optional)
     * @param documentId  (optional)
     * @param consentId  (optional)
     * @param maxResults  (optional)
     * @param sortBy  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call documentsGetCall(String datasetId, String nextToken, String order, String documentId, String consentId, String maxResults, String sortBy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/documents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (datasetId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("datasetId", datasetId));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (documentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("documentId", documentId));
        }

        if (consentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("consentId", consentId));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentsGetValidateBeforeCall(String datasetId, String nextToken, String order, String documentId, String consentId, String maxResults, String sortBy, final ApiCallback _callback) throws ApiException {
        return documentsGetCall(datasetId, nextToken, order, documentId, consentId, maxResults, sortBy, _callback);

    }

    /**
     * 
     * 
     * @param datasetId  (optional)
     * @param nextToken  (optional)
     * @param order  (optional)
     * @param documentId  (optional)
     * @param consentId  (optional)
     * @param maxResults  (optional)
     * @param sortBy  (optional)
     * @return Documents
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Documents documentsGet(String datasetId, String nextToken, String order, String documentId, String consentId, String maxResults, String sortBy) throws ApiException {
        ApiResponse<Documents> localVarResp = documentsGetWithHttpInfo(datasetId, nextToken, order, documentId, consentId, maxResults, sortBy);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param datasetId  (optional)
     * @param nextToken  (optional)
     * @param order  (optional)
     * @param documentId  (optional)
     * @param consentId  (optional)
     * @param maxResults  (optional)
     * @param sortBy  (optional)
     * @return ApiResponse&lt;Documents&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Documents> documentsGetWithHttpInfo(String datasetId, String nextToken, String order, String documentId, String consentId, String maxResults, String sortBy) throws ApiException {
        okhttp3.Call localVarCall = documentsGetValidateBeforeCall(datasetId, nextToken, order, documentId, consentId, maxResults, sortBy, null);
        Type localVarReturnType = new TypeToken<Documents>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param datasetId  (optional)
     * @param nextToken  (optional)
     * @param order  (optional)
     * @param documentId  (optional)
     * @param consentId  (optional)
     * @param maxResults  (optional)
     * @param sortBy  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call documentsGetAsync(String datasetId, String nextToken, String order, String documentId, String consentId, String maxResults, String sortBy, final ApiCallback<Documents> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentsGetValidateBeforeCall(datasetId, nextToken, order, documentId, consentId, maxResults, sortBy, _callback);
        Type localVarReturnType = new TypeToken<Documents>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentsOptions
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call documentsOptionsCall(Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/documents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "OPTIONS", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentsOptionsValidateBeforeCall(Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling documentsOptions(Async)");
        }

        return documentsOptionsCall(body, _callback);

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Object documentsOptions(Object body) throws ApiException {
        ApiResponse<Object> localVarResp = documentsOptionsWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Object> documentsOptionsWithHttpInfo(Object body) throws ApiException {
        okhttp3.Call localVarCall = documentsOptionsValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call documentsOptionsAsync(Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentsOptionsValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentsPost
     * @param contentType  (required)
     * @param postDocuments  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call documentsPostCall(String contentType, PostDocuments postDocuments, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postDocuments;

        // create path and map variables
        String localVarPath = "/documents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentsPostValidateBeforeCall(String contentType, PostDocuments postDocuments, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling documentsPost(Async)");
        }

        // verify the required parameter 'postDocuments' is set
        if (postDocuments == null) {
            throw new ApiException("Missing the required parameter 'postDocuments' when calling documentsPost(Async)");
        }

        return documentsPostCall(contentType, postDocuments, _callback);

    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param postDocuments  (required)
     * @return Document
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Document documentsPost(String contentType, PostDocuments postDocuments) throws ApiException {
        ApiResponse<Document> localVarResp = documentsPostWithHttpInfo(contentType, postDocuments);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param postDocuments  (required)
     * @return ApiResponse&lt;Document&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Document> documentsPostWithHttpInfo(String contentType, PostDocuments postDocuments) throws ApiException {
        okhttp3.Call localVarCall = documentsPostValidateBeforeCall(contentType, postDocuments, null);
        Type localVarReturnType = new TypeToken<Document>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentType  (required)
     * @param postDocuments  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call documentsPostAsync(String contentType, PostDocuments postDocuments, final ApiCallback<Document> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentsPostValidateBeforeCall(contentType, postDocuments, _callback);
        Type localVarReturnType = new TypeToken<Document>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for logsGet
     * @param workflowId  (optional)
     * @param nextToken  (optional)
     * @param order  (optional)
     * @param transitionExecutionId  (optional)
     * @param transitionId  (optional)
     * @param maxResults  (optional)
     * @param workflowExecutionId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call logsGetCall(String workflowId, String nextToken, String order, String transitionExecutionId, String transitionId, String maxResults, String workflowExecutionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/logs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (workflowId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("workflowId", workflowId));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (transitionExecutionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("transitionExecutionId", transitionExecutionId));
        }

        if (transitionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("transitionId", transitionId));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (workflowExecutionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("workflowExecutionId", workflowExecutionId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call logsGetValidateBeforeCall(String workflowId, String nextToken, String order, String transitionExecutionId, String transitionId, String maxResults, String workflowExecutionId, final ApiCallback _callback) throws ApiException {
        return logsGetCall(workflowId, nextToken, order, transitionExecutionId, transitionId, maxResults, workflowExecutionId, _callback);

    }

    /**
     * 
     * 
     * @param workflowId  (optional)
     * @param nextToken  (optional)
     * @param order  (optional)
     * @param transitionExecutionId  (optional)
     * @param transitionId  (optional)
     * @param maxResults  (optional)
     * @param workflowExecutionId  (optional)
     * @return Logs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Logs logsGet(String workflowId, String nextToken, String order, String transitionExecutionId, String transitionId, String maxResults, String workflowExecutionId) throws ApiException {
        ApiResponse<Logs> localVarResp = logsGetWithHttpInfo(workflowId, nextToken, order, transitionExecutionId, transitionId, maxResults, workflowExecutionId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param workflowId  (optional)
     * @param nextToken  (optional)
     * @param order  (optional)
     * @param transitionExecutionId  (optional)
     * @param transitionId  (optional)
     * @param maxResults  (optional)
     * @param workflowExecutionId  (optional)
     * @return ApiResponse&lt;Logs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Logs> logsGetWithHttpInfo(String workflowId, String nextToken, String order, String transitionExecutionId, String transitionId, String maxResults, String workflowExecutionId) throws ApiException {
        okhttp3.Call localVarCall = logsGetValidateBeforeCall(workflowId, nextToken, order, transitionExecutionId, transitionId, maxResults, workflowExecutionId, null);
        Type localVarReturnType = new TypeToken<Logs>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param workflowId  (optional)
     * @param nextToken  (optional)
     * @param order  (optional)
     * @param transitionExecutionId  (optional)
     * @param transitionId  (optional)
     * @param maxResults  (optional)
     * @param workflowExecutionId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call logsGetAsync(String workflowId, String nextToken, String order, String transitionExecutionId, String transitionId, String maxResults, String workflowExecutionId, final ApiCallback<Logs> _callback) throws ApiException {

        okhttp3.Call localVarCall = logsGetValidateBeforeCall(workflowId, nextToken, order, transitionExecutionId, transitionId, maxResults, workflowExecutionId, _callback);
        Type localVarReturnType = new TypeToken<Logs>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for logsLogIdGet
     * @param logId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call logsLogIdGetCall(String logId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/logs/{logId}"
            .replace("{" + "logId" + "}", localVarApiClient.escapeString(logId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call logsLogIdGetValidateBeforeCall(String logId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'logId' is set
        if (logId == null) {
            throw new ApiException("Missing the required parameter 'logId' when calling logsLogIdGet(Async)");
        }

        return logsLogIdGetCall(logId, _callback);

    }

    /**
     * 
     * 
     * @param logId  (required)
     * @return Log
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Log logsLogIdGet(String logId) throws ApiException {
        ApiResponse<Log> localVarResp = logsLogIdGetWithHttpInfo(logId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param logId  (required)
     * @return ApiResponse&lt;Log&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Log> logsLogIdGetWithHttpInfo(String logId) throws ApiException {
        okhttp3.Call localVarCall = logsLogIdGetValidateBeforeCall(logId, null);
        Type localVarReturnType = new TypeToken<Log>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param logId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call logsLogIdGetAsync(String logId, final ApiCallback<Log> _callback) throws ApiException {

        okhttp3.Call localVarCall = logsLogIdGetValidateBeforeCall(logId, _callback);
        Type localVarReturnType = new TypeToken<Log>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for logsLogIdOptions
     * @param logId  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call logsLogIdOptionsCall(String logId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/logs/{logId}"
            .replace("{" + "logId" + "}", localVarApiClient.escapeString(logId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "OPTIONS", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call logsLogIdOptionsValidateBeforeCall(String logId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'logId' is set
        if (logId == null) {
            throw new ApiException("Missing the required parameter 'logId' when calling logsLogIdOptions(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling logsLogIdOptions(Async)");
        }

        return logsLogIdOptionsCall(logId, body, _callback);

    }

    /**
     * 
     * 
     * @param logId  (required)
     * @param body  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Object logsLogIdOptions(String logId, Object body) throws ApiException {
        ApiResponse<Object> localVarResp = logsLogIdOptionsWithHttpInfo(logId, body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param logId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Object> logsLogIdOptionsWithHttpInfo(String logId, Object body) throws ApiException {
        okhttp3.Call localVarCall = logsLogIdOptionsValidateBeforeCall(logId, body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param logId  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call logsLogIdOptionsAsync(String logId, Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = logsLogIdOptionsValidateBeforeCall(logId, body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for logsOptions
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call logsOptionsCall(Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/logs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "OPTIONS", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call logsOptionsValidateBeforeCall(Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling logsOptions(Async)");
        }

        return logsOptionsCall(body, _callback);

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Object logsOptions(Object body) throws ApiException {
        ApiResponse<Object> localVarResp = logsOptionsWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Object> logsOptionsWithHttpInfo(Object body) throws ApiException {
        okhttp3.Call localVarCall = logsOptionsValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call logsOptionsAsync(Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = logsOptionsValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelsGet
     * @param owner  (optional)
     * @param nextToken  (optional)
     * @param maxResults  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call modelsGetCall(String owner, String nextToken, String maxResults, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/models";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (owner != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("owner", owner));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelsGetValidateBeforeCall(String owner, String nextToken, String maxResults, final ApiCallback _callback) throws ApiException {
        return modelsGetCall(owner, nextToken, maxResults, _callback);

    }

    /**
     * 
     * 
     * @param owner  (optional)
     * @param nextToken  (optional)
     * @param maxResults  (optional)
     * @return Models
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Models modelsGet(String owner, String nextToken, String maxResults) throws ApiException {
        ApiResponse<Models> localVarResp = modelsGetWithHttpInfo(owner, nextToken, maxResults);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param owner  (optional)
     * @param nextToken  (optional)
     * @param maxResults  (optional)
     * @return ApiResponse&lt;Models&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Models> modelsGetWithHttpInfo(String owner, String nextToken, String maxResults) throws ApiException {
        okhttp3.Call localVarCall = modelsGetValidateBeforeCall(owner, nextToken, maxResults, null);
        Type localVarReturnType = new TypeToken<Models>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param owner  (optional)
     * @param nextToken  (optional)
     * @param maxResults  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call modelsGetAsync(String owner, String nextToken, String maxResults, final ApiCallback<Models> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelsGetValidateBeforeCall(owner, nextToken, maxResults, _callback);
        Type localVarReturnType = new TypeToken<Models>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelsModelIdDataBundlesDataBundleIdDelete
     * @param dataBundleId  (required)
     * @param modelId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call modelsModelIdDataBundlesDataBundleIdDeleteCall(String dataBundleId, String modelId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/models/{modelId}/dataBundles/{dataBundleId}"
            .replace("{" + "dataBundleId" + "}", localVarApiClient.escapeString(dataBundleId.toString()))
            .replace("{" + "modelId" + "}", localVarApiClient.escapeString(modelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelsModelIdDataBundlesDataBundleIdDeleteValidateBeforeCall(String dataBundleId, String modelId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dataBundleId' is set
        if (dataBundleId == null) {
            throw new ApiException("Missing the required parameter 'dataBundleId' when calling modelsModelIdDataBundlesDataBundleIdDelete(Async)");
        }

        // verify the required parameter 'modelId' is set
        if (modelId == null) {
            throw new ApiException("Missing the required parameter 'modelId' when calling modelsModelIdDataBundlesDataBundleIdDelete(Async)");
        }

        return modelsModelIdDataBundlesDataBundleIdDeleteCall(dataBundleId, modelId, _callback);

    }

    /**
     * 
     * 
     * @param dataBundleId  (required)
     * @param modelId  (required)
     * @return DataBundle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public DataBundle modelsModelIdDataBundlesDataBundleIdDelete(String dataBundleId, String modelId) throws ApiException {
        ApiResponse<DataBundle> localVarResp = modelsModelIdDataBundlesDataBundleIdDeleteWithHttpInfo(dataBundleId, modelId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param dataBundleId  (required)
     * @param modelId  (required)
     * @return ApiResponse&lt;DataBundle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<DataBundle> modelsModelIdDataBundlesDataBundleIdDeleteWithHttpInfo(String dataBundleId, String modelId) throws ApiException {
        okhttp3.Call localVarCall = modelsModelIdDataBundlesDataBundleIdDeleteValidateBeforeCall(dataBundleId, modelId, null);
        Type localVarReturnType = new TypeToken<DataBundle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param dataBundleId  (required)
     * @param modelId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call modelsModelIdDataBundlesDataBundleIdDeleteAsync(String dataBundleId, String modelId, final ApiCallback<DataBundle> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelsModelIdDataBundlesDataBundleIdDeleteValidateBeforeCall(dataBundleId, modelId, _callback);
        Type localVarReturnType = new TypeToken<DataBundle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelsModelIdDataBundlesDataBundleIdOptions
     * @param dataBundleId  (required)
     * @param modelId  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call modelsModelIdDataBundlesDataBundleIdOptionsCall(String dataBundleId, String modelId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/models/{modelId}/dataBundles/{dataBundleId}"
            .replace("{" + "dataBundleId" + "}", localVarApiClient.escapeString(dataBundleId.toString()))
            .replace("{" + "modelId" + "}", localVarApiClient.escapeString(modelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "OPTIONS", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelsModelIdDataBundlesDataBundleIdOptionsValidateBeforeCall(String dataBundleId, String modelId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dataBundleId' is set
        if (dataBundleId == null) {
            throw new ApiException("Missing the required parameter 'dataBundleId' when calling modelsModelIdDataBundlesDataBundleIdOptions(Async)");
        }

        // verify the required parameter 'modelId' is set
        if (modelId == null) {
            throw new ApiException("Missing the required parameter 'modelId' when calling modelsModelIdDataBundlesDataBundleIdOptions(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling modelsModelIdDataBundlesDataBundleIdOptions(Async)");
        }

        return modelsModelIdDataBundlesDataBundleIdOptionsCall(dataBundleId, modelId, body, _callback);

    }

    /**
     * 
     * 
     * @param dataBundleId  (required)
     * @param modelId  (required)
     * @param body  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Object modelsModelIdDataBundlesDataBundleIdOptions(String dataBundleId, String modelId, Object body) throws ApiException {
        ApiResponse<Object> localVarResp = modelsModelIdDataBundlesDataBundleIdOptionsWithHttpInfo(dataBundleId, modelId, body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param dataBundleId  (required)
     * @param modelId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Object> modelsModelIdDataBundlesDataBundleIdOptionsWithHttpInfo(String dataBundleId, String modelId, Object body) throws ApiException {
        okhttp3.Call localVarCall = modelsModelIdDataBundlesDataBundleIdOptionsValidateBeforeCall(dataBundleId, modelId, body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param dataBundleId  (required)
     * @param modelId  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call modelsModelIdDataBundlesDataBundleIdOptionsAsync(String dataBundleId, String modelId, Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelsModelIdDataBundlesDataBundleIdOptionsValidateBeforeCall(dataBundleId, modelId, body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelsModelIdDataBundlesDataBundleIdPatch
     * @param dataBundleId  (required)
     * @param contentType  (required)
     * @param modelId  (required)
     * @param patchDataBundleId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call modelsModelIdDataBundlesDataBundleIdPatchCall(String dataBundleId, String contentType, String modelId, PatchDataBundleId patchDataBundleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchDataBundleId;

        // create path and map variables
        String localVarPath = "/models/{modelId}/dataBundles/{dataBundleId}"
            .replace("{" + "dataBundleId" + "}", localVarApiClient.escapeString(dataBundleId.toString()))
            .replace("{" + "modelId" + "}", localVarApiClient.escapeString(modelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelsModelIdDataBundlesDataBundleIdPatchValidateBeforeCall(String dataBundleId, String contentType, String modelId, PatchDataBundleId patchDataBundleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dataBundleId' is set
        if (dataBundleId == null) {
            throw new ApiException("Missing the required parameter 'dataBundleId' when calling modelsModelIdDataBundlesDataBundleIdPatch(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling modelsModelIdDataBundlesDataBundleIdPatch(Async)");
        }

        // verify the required parameter 'modelId' is set
        if (modelId == null) {
            throw new ApiException("Missing the required parameter 'modelId' when calling modelsModelIdDataBundlesDataBundleIdPatch(Async)");
        }

        // verify the required parameter 'patchDataBundleId' is set
        if (patchDataBundleId == null) {
            throw new ApiException("Missing the required parameter 'patchDataBundleId' when calling modelsModelIdDataBundlesDataBundleIdPatch(Async)");
        }

        return modelsModelIdDataBundlesDataBundleIdPatchCall(dataBundleId, contentType, modelId, patchDataBundleId, _callback);

    }

    /**
     * 
     * 
     * @param dataBundleId  (required)
     * @param contentType  (required)
     * @param modelId  (required)
     * @param patchDataBundleId  (required)
     * @return DataBundle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public DataBundle modelsModelIdDataBundlesDataBundleIdPatch(String dataBundleId, String contentType, String modelId, PatchDataBundleId patchDataBundleId) throws ApiException {
        ApiResponse<DataBundle> localVarResp = modelsModelIdDataBundlesDataBundleIdPatchWithHttpInfo(dataBundleId, contentType, modelId, patchDataBundleId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param dataBundleId  (required)
     * @param contentType  (required)
     * @param modelId  (required)
     * @param patchDataBundleId  (required)
     * @return ApiResponse&lt;DataBundle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<DataBundle> modelsModelIdDataBundlesDataBundleIdPatchWithHttpInfo(String dataBundleId, String contentType, String modelId, PatchDataBundleId patchDataBundleId) throws ApiException {
        okhttp3.Call localVarCall = modelsModelIdDataBundlesDataBundleIdPatchValidateBeforeCall(dataBundleId, contentType, modelId, patchDataBundleId, null);
        Type localVarReturnType = new TypeToken<DataBundle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param dataBundleId  (required)
     * @param contentType  (required)
     * @param modelId  (required)
     * @param patchDataBundleId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call modelsModelIdDataBundlesDataBundleIdPatchAsync(String dataBundleId, String contentType, String modelId, PatchDataBundleId patchDataBundleId, final ApiCallback<DataBundle> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelsModelIdDataBundlesDataBundleIdPatchValidateBeforeCall(dataBundleId, contentType, modelId, patchDataBundleId, _callback);
        Type localVarReturnType = new TypeToken<DataBundle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelsModelIdDataBundlesGet
     * @param modelId  (required)
     * @param status  (optional)
     * @param nextToken  (optional)
     * @param maxResults  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call modelsModelIdDataBundlesGetCall(String modelId, String status, String nextToken, String maxResults, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/models/{modelId}/dataBundles"
            .replace("{" + "modelId" + "}", localVarApiClient.escapeString(modelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelsModelIdDataBundlesGetValidateBeforeCall(String modelId, String status, String nextToken, String maxResults, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modelId' is set
        if (modelId == null) {
            throw new ApiException("Missing the required parameter 'modelId' when calling modelsModelIdDataBundlesGet(Async)");
        }

        return modelsModelIdDataBundlesGetCall(modelId, status, nextToken, maxResults, _callback);

    }

    /**
     * 
     * 
     * @param modelId  (required)
     * @param status  (optional)
     * @param nextToken  (optional)
     * @param maxResults  (optional)
     * @return DataBundles
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public DataBundles modelsModelIdDataBundlesGet(String modelId, String status, String nextToken, String maxResults) throws ApiException {
        ApiResponse<DataBundles> localVarResp = modelsModelIdDataBundlesGetWithHttpInfo(modelId, status, nextToken, maxResults);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param modelId  (required)
     * @param status  (optional)
     * @param nextToken  (optional)
     * @param maxResults  (optional)
     * @return ApiResponse&lt;DataBundles&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<DataBundles> modelsModelIdDataBundlesGetWithHttpInfo(String modelId, String status, String nextToken, String maxResults) throws ApiException {
        okhttp3.Call localVarCall = modelsModelIdDataBundlesGetValidateBeforeCall(modelId, status, nextToken, maxResults, null);
        Type localVarReturnType = new TypeToken<DataBundles>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param modelId  (required)
     * @param status  (optional)
     * @param nextToken  (optional)
     * @param maxResults  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call modelsModelIdDataBundlesGetAsync(String modelId, String status, String nextToken, String maxResults, final ApiCallback<DataBundles> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelsModelIdDataBundlesGetValidateBeforeCall(modelId, status, nextToken, maxResults, _callback);
        Type localVarReturnType = new TypeToken<DataBundles>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelsModelIdDataBundlesOptions
     * @param modelId  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call modelsModelIdDataBundlesOptionsCall(String modelId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/models/{modelId}/dataBundles"
            .replace("{" + "modelId" + "}", localVarApiClient.escapeString(modelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "OPTIONS", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelsModelIdDataBundlesOptionsValidateBeforeCall(String modelId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modelId' is set
        if (modelId == null) {
            throw new ApiException("Missing the required parameter 'modelId' when calling modelsModelIdDataBundlesOptions(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling modelsModelIdDataBundlesOptions(Async)");
        }

        return modelsModelIdDataBundlesOptionsCall(modelId, body, _callback);

    }

    /**
     * 
     * 
     * @param modelId  (required)
     * @param body  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Object modelsModelIdDataBundlesOptions(String modelId, Object body) throws ApiException {
        ApiResponse<Object> localVarResp = modelsModelIdDataBundlesOptionsWithHttpInfo(modelId, body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param modelId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Object> modelsModelIdDataBundlesOptionsWithHttpInfo(String modelId, Object body) throws ApiException {
        okhttp3.Call localVarCall = modelsModelIdDataBundlesOptionsValidateBeforeCall(modelId, body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param modelId  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call modelsModelIdDataBundlesOptionsAsync(String modelId, Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelsModelIdDataBundlesOptionsValidateBeforeCall(modelId, body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelsModelIdDataBundlesPost
     * @param contentType  (required)
     * @param modelId  (required)
     * @param postDataBundles  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call modelsModelIdDataBundlesPostCall(String contentType, String modelId, PostDataBundles postDataBundles, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postDataBundles;

        // create path and map variables
        String localVarPath = "/models/{modelId}/dataBundles"
            .replace("{" + "modelId" + "}", localVarApiClient.escapeString(modelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelsModelIdDataBundlesPostValidateBeforeCall(String contentType, String modelId, PostDataBundles postDataBundles, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling modelsModelIdDataBundlesPost(Async)");
        }

        // verify the required parameter 'modelId' is set
        if (modelId == null) {
            throw new ApiException("Missing the required parameter 'modelId' when calling modelsModelIdDataBundlesPost(Async)");
        }

        // verify the required parameter 'postDataBundles' is set
        if (postDataBundles == null) {
            throw new ApiException("Missing the required parameter 'postDataBundles' when calling modelsModelIdDataBundlesPost(Async)");
        }

        return modelsModelIdDataBundlesPostCall(contentType, modelId, postDataBundles, _callback);

    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param modelId  (required)
     * @param postDataBundles  (required)
     * @return DataBundle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public DataBundle modelsModelIdDataBundlesPost(String contentType, String modelId, PostDataBundles postDataBundles) throws ApiException {
        ApiResponse<DataBundle> localVarResp = modelsModelIdDataBundlesPostWithHttpInfo(contentType, modelId, postDataBundles);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param modelId  (required)
     * @param postDataBundles  (required)
     * @return ApiResponse&lt;DataBundle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<DataBundle> modelsModelIdDataBundlesPostWithHttpInfo(String contentType, String modelId, PostDataBundles postDataBundles) throws ApiException {
        okhttp3.Call localVarCall = modelsModelIdDataBundlesPostValidateBeforeCall(contentType, modelId, postDataBundles, null);
        Type localVarReturnType = new TypeToken<DataBundle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentType  (required)
     * @param modelId  (required)
     * @param postDataBundles  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call modelsModelIdDataBundlesPostAsync(String contentType, String modelId, PostDataBundles postDataBundles, final ApiCallback<DataBundle> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelsModelIdDataBundlesPostValidateBeforeCall(contentType, modelId, postDataBundles, _callback);
        Type localVarReturnType = new TypeToken<DataBundle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelsModelIdDelete
     * @param modelId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call modelsModelIdDeleteCall(String modelId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/models/{modelId}"
            .replace("{" + "modelId" + "}", localVarApiClient.escapeString(modelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelsModelIdDeleteValidateBeforeCall(String modelId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modelId' is set
        if (modelId == null) {
            throw new ApiException("Missing the required parameter 'modelId' when calling modelsModelIdDelete(Async)");
        }

        return modelsModelIdDeleteCall(modelId, _callback);

    }

    /**
     * 
     * 
     * @param modelId  (required)
     * @return Model
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Model modelsModelIdDelete(String modelId) throws ApiException {
        ApiResponse<Model> localVarResp = modelsModelIdDeleteWithHttpInfo(modelId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param modelId  (required)
     * @return ApiResponse&lt;Model&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Model> modelsModelIdDeleteWithHttpInfo(String modelId) throws ApiException {
        okhttp3.Call localVarCall = modelsModelIdDeleteValidateBeforeCall(modelId, null);
        Type localVarReturnType = new TypeToken<Model>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param modelId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call modelsModelIdDeleteAsync(String modelId, final ApiCallback<Model> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelsModelIdDeleteValidateBeforeCall(modelId, _callback);
        Type localVarReturnType = new TypeToken<Model>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelsModelIdGet
     * @param modelId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call modelsModelIdGetCall(String modelId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/models/{modelId}"
            .replace("{" + "modelId" + "}", localVarApiClient.escapeString(modelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelsModelIdGetValidateBeforeCall(String modelId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modelId' is set
        if (modelId == null) {
            throw new ApiException("Missing the required parameter 'modelId' when calling modelsModelIdGet(Async)");
        }

        return modelsModelIdGetCall(modelId, _callback);

    }

    /**
     * 
     * 
     * @param modelId  (required)
     * @return Model
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Model modelsModelIdGet(String modelId) throws ApiException {
        ApiResponse<Model> localVarResp = modelsModelIdGetWithHttpInfo(modelId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param modelId  (required)
     * @return ApiResponse&lt;Model&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Model> modelsModelIdGetWithHttpInfo(String modelId) throws ApiException {
        okhttp3.Call localVarCall = modelsModelIdGetValidateBeforeCall(modelId, null);
        Type localVarReturnType = new TypeToken<Model>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param modelId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call modelsModelIdGetAsync(String modelId, final ApiCallback<Model> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelsModelIdGetValidateBeforeCall(modelId, _callback);
        Type localVarReturnType = new TypeToken<Model>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelsModelIdOptions
     * @param modelId  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call modelsModelIdOptionsCall(String modelId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/models/{modelId}"
            .replace("{" + "modelId" + "}", localVarApiClient.escapeString(modelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "OPTIONS", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelsModelIdOptionsValidateBeforeCall(String modelId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modelId' is set
        if (modelId == null) {
            throw new ApiException("Missing the required parameter 'modelId' when calling modelsModelIdOptions(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling modelsModelIdOptions(Async)");
        }

        return modelsModelIdOptionsCall(modelId, body, _callback);

    }

    /**
     * 
     * 
     * @param modelId  (required)
     * @param body  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Object modelsModelIdOptions(String modelId, Object body) throws ApiException {
        ApiResponse<Object> localVarResp = modelsModelIdOptionsWithHttpInfo(modelId, body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param modelId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Object> modelsModelIdOptionsWithHttpInfo(String modelId, Object body) throws ApiException {
        okhttp3.Call localVarCall = modelsModelIdOptionsValidateBeforeCall(modelId, body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param modelId  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call modelsModelIdOptionsAsync(String modelId, Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelsModelIdOptionsValidateBeforeCall(modelId, body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelsModelIdPatch
     * @param contentType  (required)
     * @param modelId  (required)
     * @param patchModelId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call modelsModelIdPatchCall(String contentType, String modelId, PatchModelId patchModelId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchModelId;

        // create path and map variables
        String localVarPath = "/models/{modelId}"
            .replace("{" + "modelId" + "}", localVarApiClient.escapeString(modelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelsModelIdPatchValidateBeforeCall(String contentType, String modelId, PatchModelId patchModelId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling modelsModelIdPatch(Async)");
        }

        // verify the required parameter 'modelId' is set
        if (modelId == null) {
            throw new ApiException("Missing the required parameter 'modelId' when calling modelsModelIdPatch(Async)");
        }

        // verify the required parameter 'patchModelId' is set
        if (patchModelId == null) {
            throw new ApiException("Missing the required parameter 'patchModelId' when calling modelsModelIdPatch(Async)");
        }

        return modelsModelIdPatchCall(contentType, modelId, patchModelId, _callback);

    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param modelId  (required)
     * @param patchModelId  (required)
     * @return Model
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Model modelsModelIdPatch(String contentType, String modelId, PatchModelId patchModelId) throws ApiException {
        ApiResponse<Model> localVarResp = modelsModelIdPatchWithHttpInfo(contentType, modelId, patchModelId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param modelId  (required)
     * @param patchModelId  (required)
     * @return ApiResponse&lt;Model&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Model> modelsModelIdPatchWithHttpInfo(String contentType, String modelId, PatchModelId patchModelId) throws ApiException {
        okhttp3.Call localVarCall = modelsModelIdPatchValidateBeforeCall(contentType, modelId, patchModelId, null);
        Type localVarReturnType = new TypeToken<Model>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentType  (required)
     * @param modelId  (required)
     * @param patchModelId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call modelsModelIdPatchAsync(String contentType, String modelId, PatchModelId patchModelId, final ApiCallback<Model> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelsModelIdPatchValidateBeforeCall(contentType, modelId, patchModelId, _callback);
        Type localVarReturnType = new TypeToken<Model>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelsModelIdTrainingsGet
     * @param modelId  (required)
     * @param status  (optional)
     * @param nextToken  (optional)
     * @param maxResults  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call modelsModelIdTrainingsGetCall(String modelId, String status, String nextToken, String maxResults, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/models/{modelId}/trainings"
            .replace("{" + "modelId" + "}", localVarApiClient.escapeString(modelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelsModelIdTrainingsGetValidateBeforeCall(String modelId, String status, String nextToken, String maxResults, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modelId' is set
        if (modelId == null) {
            throw new ApiException("Missing the required parameter 'modelId' when calling modelsModelIdTrainingsGet(Async)");
        }

        return modelsModelIdTrainingsGetCall(modelId, status, nextToken, maxResults, _callback);

    }

    /**
     * 
     * 
     * @param modelId  (required)
     * @param status  (optional)
     * @param nextToken  (optional)
     * @param maxResults  (optional)
     * @return Trainings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Trainings modelsModelIdTrainingsGet(String modelId, String status, String nextToken, String maxResults) throws ApiException {
        ApiResponse<Trainings> localVarResp = modelsModelIdTrainingsGetWithHttpInfo(modelId, status, nextToken, maxResults);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param modelId  (required)
     * @param status  (optional)
     * @param nextToken  (optional)
     * @param maxResults  (optional)
     * @return ApiResponse&lt;Trainings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Trainings> modelsModelIdTrainingsGetWithHttpInfo(String modelId, String status, String nextToken, String maxResults) throws ApiException {
        okhttp3.Call localVarCall = modelsModelIdTrainingsGetValidateBeforeCall(modelId, status, nextToken, maxResults, null);
        Type localVarReturnType = new TypeToken<Trainings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param modelId  (required)
     * @param status  (optional)
     * @param nextToken  (optional)
     * @param maxResults  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call modelsModelIdTrainingsGetAsync(String modelId, String status, String nextToken, String maxResults, final ApiCallback<Trainings> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelsModelIdTrainingsGetValidateBeforeCall(modelId, status, nextToken, maxResults, _callback);
        Type localVarReturnType = new TypeToken<Trainings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelsModelIdTrainingsOptions
     * @param modelId  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call modelsModelIdTrainingsOptionsCall(String modelId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/models/{modelId}/trainings"
            .replace("{" + "modelId" + "}", localVarApiClient.escapeString(modelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "OPTIONS", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelsModelIdTrainingsOptionsValidateBeforeCall(String modelId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modelId' is set
        if (modelId == null) {
            throw new ApiException("Missing the required parameter 'modelId' when calling modelsModelIdTrainingsOptions(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling modelsModelIdTrainingsOptions(Async)");
        }

        return modelsModelIdTrainingsOptionsCall(modelId, body, _callback);

    }

    /**
     * 
     * 
     * @param modelId  (required)
     * @param body  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Object modelsModelIdTrainingsOptions(String modelId, Object body) throws ApiException {
        ApiResponse<Object> localVarResp = modelsModelIdTrainingsOptionsWithHttpInfo(modelId, body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param modelId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Object> modelsModelIdTrainingsOptionsWithHttpInfo(String modelId, Object body) throws ApiException {
        okhttp3.Call localVarCall = modelsModelIdTrainingsOptionsValidateBeforeCall(modelId, body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param modelId  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call modelsModelIdTrainingsOptionsAsync(String modelId, Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelsModelIdTrainingsOptionsValidateBeforeCall(modelId, body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelsModelIdTrainingsPost
     * @param contentType  (required)
     * @param modelId  (required)
     * @param postTrainings  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call modelsModelIdTrainingsPostCall(String contentType, String modelId, PostTrainings postTrainings, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postTrainings;

        // create path and map variables
        String localVarPath = "/models/{modelId}/trainings"
            .replace("{" + "modelId" + "}", localVarApiClient.escapeString(modelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelsModelIdTrainingsPostValidateBeforeCall(String contentType, String modelId, PostTrainings postTrainings, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling modelsModelIdTrainingsPost(Async)");
        }

        // verify the required parameter 'modelId' is set
        if (modelId == null) {
            throw new ApiException("Missing the required parameter 'modelId' when calling modelsModelIdTrainingsPost(Async)");
        }

        // verify the required parameter 'postTrainings' is set
        if (postTrainings == null) {
            throw new ApiException("Missing the required parameter 'postTrainings' when calling modelsModelIdTrainingsPost(Async)");
        }

        return modelsModelIdTrainingsPostCall(contentType, modelId, postTrainings, _callback);

    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param modelId  (required)
     * @param postTrainings  (required)
     * @return Training
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Training modelsModelIdTrainingsPost(String contentType, String modelId, PostTrainings postTrainings) throws ApiException {
        ApiResponse<Training> localVarResp = modelsModelIdTrainingsPostWithHttpInfo(contentType, modelId, postTrainings);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param modelId  (required)
     * @param postTrainings  (required)
     * @return ApiResponse&lt;Training&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Training> modelsModelIdTrainingsPostWithHttpInfo(String contentType, String modelId, PostTrainings postTrainings) throws ApiException {
        okhttp3.Call localVarCall = modelsModelIdTrainingsPostValidateBeforeCall(contentType, modelId, postTrainings, null);
        Type localVarReturnType = new TypeToken<Training>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentType  (required)
     * @param modelId  (required)
     * @param postTrainings  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call modelsModelIdTrainingsPostAsync(String contentType, String modelId, PostTrainings postTrainings, final ApiCallback<Training> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelsModelIdTrainingsPostValidateBeforeCall(contentType, modelId, postTrainings, _callback);
        Type localVarReturnType = new TypeToken<Training>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelsModelIdTrainingsTrainingIdOptions
     * @param modelId  (required)
     * @param trainingId  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call modelsModelIdTrainingsTrainingIdOptionsCall(String modelId, String trainingId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/models/{modelId}/trainings/{trainingId}"
            .replace("{" + "modelId" + "}", localVarApiClient.escapeString(modelId.toString()))
            .replace("{" + "trainingId" + "}", localVarApiClient.escapeString(trainingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "OPTIONS", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelsModelIdTrainingsTrainingIdOptionsValidateBeforeCall(String modelId, String trainingId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modelId' is set
        if (modelId == null) {
            throw new ApiException("Missing the required parameter 'modelId' when calling modelsModelIdTrainingsTrainingIdOptions(Async)");
        }

        // verify the required parameter 'trainingId' is set
        if (trainingId == null) {
            throw new ApiException("Missing the required parameter 'trainingId' when calling modelsModelIdTrainingsTrainingIdOptions(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling modelsModelIdTrainingsTrainingIdOptions(Async)");
        }

        return modelsModelIdTrainingsTrainingIdOptionsCall(modelId, trainingId, body, _callback);

    }

    /**
     * 
     * 
     * @param modelId  (required)
     * @param trainingId  (required)
     * @param body  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Object modelsModelIdTrainingsTrainingIdOptions(String modelId, String trainingId, Object body) throws ApiException {
        ApiResponse<Object> localVarResp = modelsModelIdTrainingsTrainingIdOptionsWithHttpInfo(modelId, trainingId, body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param modelId  (required)
     * @param trainingId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Object> modelsModelIdTrainingsTrainingIdOptionsWithHttpInfo(String modelId, String trainingId, Object body) throws ApiException {
        okhttp3.Call localVarCall = modelsModelIdTrainingsTrainingIdOptionsValidateBeforeCall(modelId, trainingId, body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param modelId  (required)
     * @param trainingId  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call modelsModelIdTrainingsTrainingIdOptionsAsync(String modelId, String trainingId, Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelsModelIdTrainingsTrainingIdOptionsValidateBeforeCall(modelId, trainingId, body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelsModelIdTrainingsTrainingIdPatch
     * @param contentType  (required)
     * @param modelId  (required)
     * @param trainingId  (required)
     * @param patchTrainingId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call modelsModelIdTrainingsTrainingIdPatchCall(String contentType, String modelId, String trainingId, PatchTrainingId patchTrainingId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchTrainingId;

        // create path and map variables
        String localVarPath = "/models/{modelId}/trainings/{trainingId}"
            .replace("{" + "modelId" + "}", localVarApiClient.escapeString(modelId.toString()))
            .replace("{" + "trainingId" + "}", localVarApiClient.escapeString(trainingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelsModelIdTrainingsTrainingIdPatchValidateBeforeCall(String contentType, String modelId, String trainingId, PatchTrainingId patchTrainingId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling modelsModelIdTrainingsTrainingIdPatch(Async)");
        }

        // verify the required parameter 'modelId' is set
        if (modelId == null) {
            throw new ApiException("Missing the required parameter 'modelId' when calling modelsModelIdTrainingsTrainingIdPatch(Async)");
        }

        // verify the required parameter 'trainingId' is set
        if (trainingId == null) {
            throw new ApiException("Missing the required parameter 'trainingId' when calling modelsModelIdTrainingsTrainingIdPatch(Async)");
        }

        // verify the required parameter 'patchTrainingId' is set
        if (patchTrainingId == null) {
            throw new ApiException("Missing the required parameter 'patchTrainingId' when calling modelsModelIdTrainingsTrainingIdPatch(Async)");
        }

        return modelsModelIdTrainingsTrainingIdPatchCall(contentType, modelId, trainingId, patchTrainingId, _callback);

    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param modelId  (required)
     * @param trainingId  (required)
     * @param patchTrainingId  (required)
     * @return Training
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Training modelsModelIdTrainingsTrainingIdPatch(String contentType, String modelId, String trainingId, PatchTrainingId patchTrainingId) throws ApiException {
        ApiResponse<Training> localVarResp = modelsModelIdTrainingsTrainingIdPatchWithHttpInfo(contentType, modelId, trainingId, patchTrainingId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param modelId  (required)
     * @param trainingId  (required)
     * @param patchTrainingId  (required)
     * @return ApiResponse&lt;Training&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Training> modelsModelIdTrainingsTrainingIdPatchWithHttpInfo(String contentType, String modelId, String trainingId, PatchTrainingId patchTrainingId) throws ApiException {
        okhttp3.Call localVarCall = modelsModelIdTrainingsTrainingIdPatchValidateBeforeCall(contentType, modelId, trainingId, patchTrainingId, null);
        Type localVarReturnType = new TypeToken<Training>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentType  (required)
     * @param modelId  (required)
     * @param trainingId  (required)
     * @param patchTrainingId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call modelsModelIdTrainingsTrainingIdPatchAsync(String contentType, String modelId, String trainingId, PatchTrainingId patchTrainingId, final ApiCallback<Training> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelsModelIdTrainingsTrainingIdPatchValidateBeforeCall(contentType, modelId, trainingId, patchTrainingId, _callback);
        Type localVarReturnType = new TypeToken<Training>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelsOptions
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call modelsOptionsCall(Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/models";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "OPTIONS", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelsOptionsValidateBeforeCall(Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling modelsOptions(Async)");
        }

        return modelsOptionsCall(body, _callback);

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Object modelsOptions(Object body) throws ApiException {
        ApiResponse<Object> localVarResp = modelsOptionsWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Object> modelsOptionsWithHttpInfo(Object body) throws ApiException {
        okhttp3.Call localVarCall = modelsOptionsValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call modelsOptionsAsync(Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelsOptionsValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelsPost
     * @param contentType  (required)
     * @param postModels  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call modelsPostCall(String contentType, PostModels postModels, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postModels;

        // create path and map variables
        String localVarPath = "/models";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelsPostValidateBeforeCall(String contentType, PostModels postModels, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling modelsPost(Async)");
        }

        // verify the required parameter 'postModels' is set
        if (postModels == null) {
            throw new ApiException("Missing the required parameter 'postModels' when calling modelsPost(Async)");
        }

        return modelsPostCall(contentType, postModels, _callback);

    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param postModels  (required)
     * @return Model
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Model modelsPost(String contentType, PostModels postModels) throws ApiException {
        ApiResponse<Model> localVarResp = modelsPostWithHttpInfo(contentType, postModels);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param postModels  (required)
     * @return ApiResponse&lt;Model&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Model> modelsPostWithHttpInfo(String contentType, PostModels postModels) throws ApiException {
        okhttp3.Call localVarCall = modelsPostValidateBeforeCall(contentType, postModels, null);
        Type localVarReturnType = new TypeToken<Model>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentType  (required)
     * @param postModels  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call modelsPostAsync(String contentType, PostModels postModels, final ApiCallback<Model> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelsPostValidateBeforeCall(contentType, postModels, _callback);
        Type localVarReturnType = new TypeToken<Model>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for organizationsGet
     * @param nextToken  (optional)
     * @param maxResults  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call organizationsGetCall(String nextToken, String maxResults, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organizationsGetValidateBeforeCall(String nextToken, String maxResults, final ApiCallback _callback) throws ApiException {
        return organizationsGetCall(nextToken, maxResults, _callback);

    }

    /**
     * 
     * 
     * @param nextToken  (optional)
     * @param maxResults  (optional)
     * @return Organizations
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Organizations organizationsGet(String nextToken, String maxResults) throws ApiException {
        ApiResponse<Organizations> localVarResp = organizationsGetWithHttpInfo(nextToken, maxResults);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param nextToken  (optional)
     * @param maxResults  (optional)
     * @return ApiResponse&lt;Organizations&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Organizations> organizationsGetWithHttpInfo(String nextToken, String maxResults) throws ApiException {
        okhttp3.Call localVarCall = organizationsGetValidateBeforeCall(nextToken, maxResults, null);
        Type localVarReturnType = new TypeToken<Organizations>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param nextToken  (optional)
     * @param maxResults  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call organizationsGetAsync(String nextToken, String maxResults, final ApiCallback<Organizations> _callback) throws ApiException {

        okhttp3.Call localVarCall = organizationsGetValidateBeforeCall(nextToken, maxResults, _callback);
        Type localVarReturnType = new TypeToken<Organizations>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for organizationsOptions
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call organizationsOptionsCall(Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/organizations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "OPTIONS", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organizationsOptionsValidateBeforeCall(Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling organizationsOptions(Async)");
        }

        return organizationsOptionsCall(body, _callback);

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Object organizationsOptions(Object body) throws ApiException {
        ApiResponse<Object> localVarResp = organizationsOptionsWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Object> organizationsOptionsWithHttpInfo(Object body) throws ApiException {
        okhttp3.Call localVarCall = organizationsOptionsValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call organizationsOptionsAsync(Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = organizationsOptionsValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for organizationsOrganizationIdGet
     * @param organizationId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call organizationsOrganizationIdGetCall(String organizationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organizationsOrganizationIdGetValidateBeforeCall(String organizationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling organizationsOrganizationIdGet(Async)");
        }

        return organizationsOrganizationIdGetCall(organizationId, _callback);

    }

    /**
     * 
     * 
     * @param organizationId  (required)
     * @return Organization
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Organization organizationsOrganizationIdGet(String organizationId) throws ApiException {
        ApiResponse<Organization> localVarResp = organizationsOrganizationIdGetWithHttpInfo(organizationId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param organizationId  (required)
     * @return ApiResponse&lt;Organization&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Organization> organizationsOrganizationIdGetWithHttpInfo(String organizationId) throws ApiException {
        okhttp3.Call localVarCall = organizationsOrganizationIdGetValidateBeforeCall(organizationId, null);
        Type localVarReturnType = new TypeToken<Organization>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param organizationId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call organizationsOrganizationIdGetAsync(String organizationId, final ApiCallback<Organization> _callback) throws ApiException {

        okhttp3.Call localVarCall = organizationsOrganizationIdGetValidateBeforeCall(organizationId, _callback);
        Type localVarReturnType = new TypeToken<Organization>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for organizationsOrganizationIdOptions
     * @param organizationId  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call organizationsOrganizationIdOptionsCall(String organizationId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "OPTIONS", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organizationsOrganizationIdOptionsValidateBeforeCall(String organizationId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling organizationsOrganizationIdOptions(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling organizationsOrganizationIdOptions(Async)");
        }

        return organizationsOrganizationIdOptionsCall(organizationId, body, _callback);

    }

    /**
     * 
     * 
     * @param organizationId  (required)
     * @param body  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Object organizationsOrganizationIdOptions(String organizationId, Object body) throws ApiException {
        ApiResponse<Object> localVarResp = organizationsOrganizationIdOptionsWithHttpInfo(organizationId, body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param organizationId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Object> organizationsOrganizationIdOptionsWithHttpInfo(String organizationId, Object body) throws ApiException {
        okhttp3.Call localVarCall = organizationsOrganizationIdOptionsValidateBeforeCall(organizationId, body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param organizationId  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call organizationsOrganizationIdOptionsAsync(String organizationId, Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = organizationsOrganizationIdOptionsValidateBeforeCall(organizationId, body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for organizationsOrganizationIdPatch
     * @param contentType  (required)
     * @param organizationId  (required)
     * @param patchOrganizationId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call organizationsOrganizationIdPatchCall(String contentType, String organizationId, PatchOrganizationId patchOrganizationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchOrganizationId;

        // create path and map variables
        String localVarPath = "/organizations/{organizationId}"
            .replace("{" + "organizationId" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organizationsOrganizationIdPatchValidateBeforeCall(String contentType, String organizationId, PatchOrganizationId patchOrganizationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling organizationsOrganizationIdPatch(Async)");
        }

        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling organizationsOrganizationIdPatch(Async)");
        }

        // verify the required parameter 'patchOrganizationId' is set
        if (patchOrganizationId == null) {
            throw new ApiException("Missing the required parameter 'patchOrganizationId' when calling organizationsOrganizationIdPatch(Async)");
        }

        return organizationsOrganizationIdPatchCall(contentType, organizationId, patchOrganizationId, _callback);

    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param organizationId  (required)
     * @param patchOrganizationId  (required)
     * @return Organization
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Organization organizationsOrganizationIdPatch(String contentType, String organizationId, PatchOrganizationId patchOrganizationId) throws ApiException {
        ApiResponse<Organization> localVarResp = organizationsOrganizationIdPatchWithHttpInfo(contentType, organizationId, patchOrganizationId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param organizationId  (required)
     * @param patchOrganizationId  (required)
     * @return ApiResponse&lt;Organization&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Organization> organizationsOrganizationIdPatchWithHttpInfo(String contentType, String organizationId, PatchOrganizationId patchOrganizationId) throws ApiException {
        okhttp3.Call localVarCall = organizationsOrganizationIdPatchValidateBeforeCall(contentType, organizationId, patchOrganizationId, null);
        Type localVarReturnType = new TypeToken<Organization>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentType  (required)
     * @param organizationId  (required)
     * @param patchOrganizationId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call organizationsOrganizationIdPatchAsync(String contentType, String organizationId, PatchOrganizationId patchOrganizationId, final ApiCallback<Organization> _callback) throws ApiException {

        okhttp3.Call localVarCall = organizationsOrganizationIdPatchValidateBeforeCall(contentType, organizationId, patchOrganizationId, _callback);
        Type localVarReturnType = new TypeToken<Organization>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for organizationsPost
     * @param contentType  (required)
     * @param postOrganizations  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call organizationsPostCall(String contentType, PostOrganizations postOrganizations, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postOrganizations;

        // create path and map variables
        String localVarPath = "/organizations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organizationsPostValidateBeforeCall(String contentType, PostOrganizations postOrganizations, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling organizationsPost(Async)");
        }

        // verify the required parameter 'postOrganizations' is set
        if (postOrganizations == null) {
            throw new ApiException("Missing the required parameter 'postOrganizations' when calling organizationsPost(Async)");
        }

        return organizationsPostCall(contentType, postOrganizations, _callback);

    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param postOrganizations  (required)
     * @return Organization
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Organization organizationsPost(String contentType, PostOrganizations postOrganizations) throws ApiException {
        ApiResponse<Organization> localVarResp = organizationsPostWithHttpInfo(contentType, postOrganizations);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param postOrganizations  (required)
     * @return ApiResponse&lt;Organization&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Organization> organizationsPostWithHttpInfo(String contentType, PostOrganizations postOrganizations) throws ApiException {
        okhttp3.Call localVarCall = organizationsPostValidateBeforeCall(contentType, postOrganizations, null);
        Type localVarReturnType = new TypeToken<Organization>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentType  (required)
     * @param postOrganizations  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call organizationsPostAsync(String contentType, PostOrganizations postOrganizations, final ApiCallback<Organization> _callback) throws ApiException {

        okhttp3.Call localVarCall = organizationsPostValidateBeforeCall(contentType, postOrganizations, _callback);
        Type localVarReturnType = new TypeToken<Organization>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for paymentMethodsGet
     * @param nextToken  (optional)
     * @param maxResults  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call paymentMethodsGetCall(String nextToken, String maxResults, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/paymentMethods";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call paymentMethodsGetValidateBeforeCall(String nextToken, String maxResults, final ApiCallback _callback) throws ApiException {
        return paymentMethodsGetCall(nextToken, maxResults, _callback);

    }

    /**
     * 
     * 
     * @param nextToken  (optional)
     * @param maxResults  (optional)
     * @return PaymentMethods
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public PaymentMethods paymentMethodsGet(String nextToken, String maxResults) throws ApiException {
        ApiResponse<PaymentMethods> localVarResp = paymentMethodsGetWithHttpInfo(nextToken, maxResults);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param nextToken  (optional)
     * @param maxResults  (optional)
     * @return ApiResponse&lt;PaymentMethods&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<PaymentMethods> paymentMethodsGetWithHttpInfo(String nextToken, String maxResults) throws ApiException {
        okhttp3.Call localVarCall = paymentMethodsGetValidateBeforeCall(nextToken, maxResults, null);
        Type localVarReturnType = new TypeToken<PaymentMethods>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param nextToken  (optional)
     * @param maxResults  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call paymentMethodsGetAsync(String nextToken, String maxResults, final ApiCallback<PaymentMethods> _callback) throws ApiException {

        okhttp3.Call localVarCall = paymentMethodsGetValidateBeforeCall(nextToken, maxResults, _callback);
        Type localVarReturnType = new TypeToken<PaymentMethods>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for paymentMethodsOptions
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call paymentMethodsOptionsCall(Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/paymentMethods";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "OPTIONS", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call paymentMethodsOptionsValidateBeforeCall(Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling paymentMethodsOptions(Async)");
        }

        return paymentMethodsOptionsCall(body, _callback);

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Object paymentMethodsOptions(Object body) throws ApiException {
        ApiResponse<Object> localVarResp = paymentMethodsOptionsWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Object> paymentMethodsOptionsWithHttpInfo(Object body) throws ApiException {
        okhttp3.Call localVarCall = paymentMethodsOptionsValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call paymentMethodsOptionsAsync(Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = paymentMethodsOptionsValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for paymentMethodsPaymentMethodIdDelete
     * @param paymentMethodId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call paymentMethodsPaymentMethodIdDeleteCall(String paymentMethodId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/paymentMethods/{paymentMethodId}"
            .replace("{" + "paymentMethodId" + "}", localVarApiClient.escapeString(paymentMethodId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call paymentMethodsPaymentMethodIdDeleteValidateBeforeCall(String paymentMethodId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'paymentMethodId' is set
        if (paymentMethodId == null) {
            throw new ApiException("Missing the required parameter 'paymentMethodId' when calling paymentMethodsPaymentMethodIdDelete(Async)");
        }

        return paymentMethodsPaymentMethodIdDeleteCall(paymentMethodId, _callback);

    }

    /**
     * 
     * 
     * @param paymentMethodId  (required)
     * @return PaymentMethod
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public PaymentMethod paymentMethodsPaymentMethodIdDelete(String paymentMethodId) throws ApiException {
        ApiResponse<PaymentMethod> localVarResp = paymentMethodsPaymentMethodIdDeleteWithHttpInfo(paymentMethodId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param paymentMethodId  (required)
     * @return ApiResponse&lt;PaymentMethod&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<PaymentMethod> paymentMethodsPaymentMethodIdDeleteWithHttpInfo(String paymentMethodId) throws ApiException {
        okhttp3.Call localVarCall = paymentMethodsPaymentMethodIdDeleteValidateBeforeCall(paymentMethodId, null);
        Type localVarReturnType = new TypeToken<PaymentMethod>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param paymentMethodId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call paymentMethodsPaymentMethodIdDeleteAsync(String paymentMethodId, final ApiCallback<PaymentMethod> _callback) throws ApiException {

        okhttp3.Call localVarCall = paymentMethodsPaymentMethodIdDeleteValidateBeforeCall(paymentMethodId, _callback);
        Type localVarReturnType = new TypeToken<PaymentMethod>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for paymentMethodsPaymentMethodIdGet
     * @param paymentMethodId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call paymentMethodsPaymentMethodIdGetCall(String paymentMethodId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/paymentMethods/{paymentMethodId}"
            .replace("{" + "paymentMethodId" + "}", localVarApiClient.escapeString(paymentMethodId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call paymentMethodsPaymentMethodIdGetValidateBeforeCall(String paymentMethodId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'paymentMethodId' is set
        if (paymentMethodId == null) {
            throw new ApiException("Missing the required parameter 'paymentMethodId' when calling paymentMethodsPaymentMethodIdGet(Async)");
        }

        return paymentMethodsPaymentMethodIdGetCall(paymentMethodId, _callback);

    }

    /**
     * 
     * 
     * @param paymentMethodId  (required)
     * @return PaymentMethod
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public PaymentMethod paymentMethodsPaymentMethodIdGet(String paymentMethodId) throws ApiException {
        ApiResponse<PaymentMethod> localVarResp = paymentMethodsPaymentMethodIdGetWithHttpInfo(paymentMethodId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param paymentMethodId  (required)
     * @return ApiResponse&lt;PaymentMethod&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<PaymentMethod> paymentMethodsPaymentMethodIdGetWithHttpInfo(String paymentMethodId) throws ApiException {
        okhttp3.Call localVarCall = paymentMethodsPaymentMethodIdGetValidateBeforeCall(paymentMethodId, null);
        Type localVarReturnType = new TypeToken<PaymentMethod>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param paymentMethodId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call paymentMethodsPaymentMethodIdGetAsync(String paymentMethodId, final ApiCallback<PaymentMethod> _callback) throws ApiException {

        okhttp3.Call localVarCall = paymentMethodsPaymentMethodIdGetValidateBeforeCall(paymentMethodId, _callback);
        Type localVarReturnType = new TypeToken<PaymentMethod>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for paymentMethodsPaymentMethodIdOptions
     * @param paymentMethodId  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call paymentMethodsPaymentMethodIdOptionsCall(String paymentMethodId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/paymentMethods/{paymentMethodId}"
            .replace("{" + "paymentMethodId" + "}", localVarApiClient.escapeString(paymentMethodId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "OPTIONS", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call paymentMethodsPaymentMethodIdOptionsValidateBeforeCall(String paymentMethodId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'paymentMethodId' is set
        if (paymentMethodId == null) {
            throw new ApiException("Missing the required parameter 'paymentMethodId' when calling paymentMethodsPaymentMethodIdOptions(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling paymentMethodsPaymentMethodIdOptions(Async)");
        }

        return paymentMethodsPaymentMethodIdOptionsCall(paymentMethodId, body, _callback);

    }

    /**
     * 
     * 
     * @param paymentMethodId  (required)
     * @param body  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Object paymentMethodsPaymentMethodIdOptions(String paymentMethodId, Object body) throws ApiException {
        ApiResponse<Object> localVarResp = paymentMethodsPaymentMethodIdOptionsWithHttpInfo(paymentMethodId, body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param paymentMethodId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Object> paymentMethodsPaymentMethodIdOptionsWithHttpInfo(String paymentMethodId, Object body) throws ApiException {
        okhttp3.Call localVarCall = paymentMethodsPaymentMethodIdOptionsValidateBeforeCall(paymentMethodId, body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param paymentMethodId  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call paymentMethodsPaymentMethodIdOptionsAsync(String paymentMethodId, Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = paymentMethodsPaymentMethodIdOptionsValidateBeforeCall(paymentMethodId, body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for paymentMethodsPaymentMethodIdPatch
     * @param contentType  (required)
     * @param paymentMethodId  (required)
     * @param patchPaymentMethodId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call paymentMethodsPaymentMethodIdPatchCall(String contentType, String paymentMethodId, PatchPaymentMethodId patchPaymentMethodId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchPaymentMethodId;

        // create path and map variables
        String localVarPath = "/paymentMethods/{paymentMethodId}"
            .replace("{" + "paymentMethodId" + "}", localVarApiClient.escapeString(paymentMethodId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call paymentMethodsPaymentMethodIdPatchValidateBeforeCall(String contentType, String paymentMethodId, PatchPaymentMethodId patchPaymentMethodId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling paymentMethodsPaymentMethodIdPatch(Async)");
        }

        // verify the required parameter 'paymentMethodId' is set
        if (paymentMethodId == null) {
            throw new ApiException("Missing the required parameter 'paymentMethodId' when calling paymentMethodsPaymentMethodIdPatch(Async)");
        }

        // verify the required parameter 'patchPaymentMethodId' is set
        if (patchPaymentMethodId == null) {
            throw new ApiException("Missing the required parameter 'patchPaymentMethodId' when calling paymentMethodsPaymentMethodIdPatch(Async)");
        }

        return paymentMethodsPaymentMethodIdPatchCall(contentType, paymentMethodId, patchPaymentMethodId, _callback);

    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param paymentMethodId  (required)
     * @param patchPaymentMethodId  (required)
     * @return PaymentMethod
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public PaymentMethod paymentMethodsPaymentMethodIdPatch(String contentType, String paymentMethodId, PatchPaymentMethodId patchPaymentMethodId) throws ApiException {
        ApiResponse<PaymentMethod> localVarResp = paymentMethodsPaymentMethodIdPatchWithHttpInfo(contentType, paymentMethodId, patchPaymentMethodId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param paymentMethodId  (required)
     * @param patchPaymentMethodId  (required)
     * @return ApiResponse&lt;PaymentMethod&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<PaymentMethod> paymentMethodsPaymentMethodIdPatchWithHttpInfo(String contentType, String paymentMethodId, PatchPaymentMethodId patchPaymentMethodId) throws ApiException {
        okhttp3.Call localVarCall = paymentMethodsPaymentMethodIdPatchValidateBeforeCall(contentType, paymentMethodId, patchPaymentMethodId, null);
        Type localVarReturnType = new TypeToken<PaymentMethod>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentType  (required)
     * @param paymentMethodId  (required)
     * @param patchPaymentMethodId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call paymentMethodsPaymentMethodIdPatchAsync(String contentType, String paymentMethodId, PatchPaymentMethodId patchPaymentMethodId, final ApiCallback<PaymentMethod> _callback) throws ApiException {

        okhttp3.Call localVarCall = paymentMethodsPaymentMethodIdPatchValidateBeforeCall(contentType, paymentMethodId, patchPaymentMethodId, _callback);
        Type localVarReturnType = new TypeToken<PaymentMethod>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for paymentMethodsPost
     * @param contentType  (required)
     * @param postPaymentMethods  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call paymentMethodsPostCall(String contentType, PostPaymentMethods postPaymentMethods, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postPaymentMethods;

        // create path and map variables
        String localVarPath = "/paymentMethods";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call paymentMethodsPostValidateBeforeCall(String contentType, PostPaymentMethods postPaymentMethods, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling paymentMethodsPost(Async)");
        }

        // verify the required parameter 'postPaymentMethods' is set
        if (postPaymentMethods == null) {
            throw new ApiException("Missing the required parameter 'postPaymentMethods' when calling paymentMethodsPost(Async)");
        }

        return paymentMethodsPostCall(contentType, postPaymentMethods, _callback);

    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param postPaymentMethods  (required)
     * @return PaymentMethod
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public PaymentMethod paymentMethodsPost(String contentType, PostPaymentMethods postPaymentMethods) throws ApiException {
        ApiResponse<PaymentMethod> localVarResp = paymentMethodsPostWithHttpInfo(contentType, postPaymentMethods);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param postPaymentMethods  (required)
     * @return ApiResponse&lt;PaymentMethod&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<PaymentMethod> paymentMethodsPostWithHttpInfo(String contentType, PostPaymentMethods postPaymentMethods) throws ApiException {
        okhttp3.Call localVarCall = paymentMethodsPostValidateBeforeCall(contentType, postPaymentMethods, null);
        Type localVarReturnType = new TypeToken<PaymentMethod>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentType  (required)
     * @param postPaymentMethods  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call paymentMethodsPostAsync(String contentType, PostPaymentMethods postPaymentMethods, final ApiCallback<PaymentMethod> _callback) throws ApiException {

        okhttp3.Call localVarCall = paymentMethodsPostValidateBeforeCall(contentType, postPaymentMethods, _callback);
        Type localVarReturnType = new TypeToken<PaymentMethod>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for plansGet
     * @param owner  (optional)
     * @param nextToken  (optional)
     * @param maxResults  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call plansGetCall(String owner, String nextToken, String maxResults, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/plans";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (owner != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("owner", owner));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call plansGetValidateBeforeCall(String owner, String nextToken, String maxResults, final ApiCallback _callback) throws ApiException {
        return plansGetCall(owner, nextToken, maxResults, _callback);

    }

    /**
     * 
     * 
     * @param owner  (optional)
     * @param nextToken  (optional)
     * @param maxResults  (optional)
     * @return Plans
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Plans plansGet(String owner, String nextToken, String maxResults) throws ApiException {
        ApiResponse<Plans> localVarResp = plansGetWithHttpInfo(owner, nextToken, maxResults);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param owner  (optional)
     * @param nextToken  (optional)
     * @param maxResults  (optional)
     * @return ApiResponse&lt;Plans&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Plans> plansGetWithHttpInfo(String owner, String nextToken, String maxResults) throws ApiException {
        okhttp3.Call localVarCall = plansGetValidateBeforeCall(owner, nextToken, maxResults, null);
        Type localVarReturnType = new TypeToken<Plans>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param owner  (optional)
     * @param nextToken  (optional)
     * @param maxResults  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call plansGetAsync(String owner, String nextToken, String maxResults, final ApiCallback<Plans> _callback) throws ApiException {

        okhttp3.Call localVarCall = plansGetValidateBeforeCall(owner, nextToken, maxResults, _callback);
        Type localVarReturnType = new TypeToken<Plans>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for plansOptions
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call plansOptionsCall(Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/plans";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "OPTIONS", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call plansOptionsValidateBeforeCall(Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling plansOptions(Async)");
        }

        return plansOptionsCall(body, _callback);

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Object plansOptions(Object body) throws ApiException {
        ApiResponse<Object> localVarResp = plansOptionsWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Object> plansOptionsWithHttpInfo(Object body) throws ApiException {
        okhttp3.Call localVarCall = plansOptionsValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call plansOptionsAsync(Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = plansOptionsValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for plansPlanIdGet
     * @param planId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call plansPlanIdGetCall(String planId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/plans/{planId}"
            .replace("{" + "planId" + "}", localVarApiClient.escapeString(planId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call plansPlanIdGetValidateBeforeCall(String planId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'planId' is set
        if (planId == null) {
            throw new ApiException("Missing the required parameter 'planId' when calling plansPlanIdGet(Async)");
        }

        return plansPlanIdGetCall(planId, _callback);

    }

    /**
     * 
     * 
     * @param planId  (required)
     * @return Plan
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Plan plansPlanIdGet(String planId) throws ApiException {
        ApiResponse<Plan> localVarResp = plansPlanIdGetWithHttpInfo(planId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param planId  (required)
     * @return ApiResponse&lt;Plan&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Plan> plansPlanIdGetWithHttpInfo(String planId) throws ApiException {
        okhttp3.Call localVarCall = plansPlanIdGetValidateBeforeCall(planId, null);
        Type localVarReturnType = new TypeToken<Plan>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param planId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call plansPlanIdGetAsync(String planId, final ApiCallback<Plan> _callback) throws ApiException {

        okhttp3.Call localVarCall = plansPlanIdGetValidateBeforeCall(planId, _callback);
        Type localVarReturnType = new TypeToken<Plan>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for plansPlanIdOptions
     * @param planId  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call plansPlanIdOptionsCall(String planId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/plans/{planId}"
            .replace("{" + "planId" + "}", localVarApiClient.escapeString(planId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "OPTIONS", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call plansPlanIdOptionsValidateBeforeCall(String planId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'planId' is set
        if (planId == null) {
            throw new ApiException("Missing the required parameter 'planId' when calling plansPlanIdOptions(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling plansPlanIdOptions(Async)");
        }

        return plansPlanIdOptionsCall(planId, body, _callback);

    }

    /**
     * 
     * 
     * @param planId  (required)
     * @param body  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Object plansPlanIdOptions(String planId, Object body) throws ApiException {
        ApiResponse<Object> localVarResp = plansPlanIdOptionsWithHttpInfo(planId, body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param planId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Object> plansPlanIdOptionsWithHttpInfo(String planId, Object body) throws ApiException {
        okhttp3.Call localVarCall = plansPlanIdOptionsValidateBeforeCall(planId, body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param planId  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call plansPlanIdOptionsAsync(String planId, Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = plansPlanIdOptionsValidateBeforeCall(planId, body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for predictionsGet
     * @param nextToken  (optional)
     * @param maxResults  (optional)
     * @param sortBy  (optional)
     * @param order  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call predictionsGetCall(String nextToken, String maxResults, String sortBy, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/predictions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call predictionsGetValidateBeforeCall(String nextToken, String maxResults, String sortBy, String order, final ApiCallback _callback) throws ApiException {
        return predictionsGetCall(nextToken, maxResults, sortBy, order, _callback);

    }

    /**
     * 
     * 
     * @param nextToken  (optional)
     * @param maxResults  (optional)
     * @param sortBy  (optional)
     * @param order  (optional)
     * @return Predictions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Predictions predictionsGet(String nextToken, String maxResults, String sortBy, String order) throws ApiException {
        ApiResponse<Predictions> localVarResp = predictionsGetWithHttpInfo(nextToken, maxResults, sortBy, order);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param nextToken  (optional)
     * @param maxResults  (optional)
     * @param sortBy  (optional)
     * @param order  (optional)
     * @return ApiResponse&lt;Predictions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Predictions> predictionsGetWithHttpInfo(String nextToken, String maxResults, String sortBy, String order) throws ApiException {
        okhttp3.Call localVarCall = predictionsGetValidateBeforeCall(nextToken, maxResults, sortBy, order, null);
        Type localVarReturnType = new TypeToken<Predictions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param nextToken  (optional)
     * @param maxResults  (optional)
     * @param sortBy  (optional)
     * @param order  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call predictionsGetAsync(String nextToken, String maxResults, String sortBy, String order, final ApiCallback<Predictions> _callback) throws ApiException {

        okhttp3.Call localVarCall = predictionsGetValidateBeforeCall(nextToken, maxResults, sortBy, order, _callback);
        Type localVarReturnType = new TypeToken<Predictions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for predictionsOptions
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call predictionsOptionsCall(Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/predictions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "OPTIONS", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call predictionsOptionsValidateBeforeCall(Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling predictionsOptions(Async)");
        }

        return predictionsOptionsCall(body, _callback);

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Object predictionsOptions(Object body) throws ApiException {
        ApiResponse<Object> localVarResp = predictionsOptionsWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Object> predictionsOptionsWithHttpInfo(Object body) throws ApiException {
        okhttp3.Call localVarCall = predictionsOptionsValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call predictionsOptionsAsync(Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = predictionsOptionsValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for predictionsPost
     * @param contentType  (required)
     * @param postPredictions  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call predictionsPostCall(String contentType, PostPredictions postPredictions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postPredictions;

        // create path and map variables
        String localVarPath = "/predictions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call predictionsPostValidateBeforeCall(String contentType, PostPredictions postPredictions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling predictionsPost(Async)");
        }

        // verify the required parameter 'postPredictions' is set
        if (postPredictions == null) {
            throw new ApiException("Missing the required parameter 'postPredictions' when calling predictionsPost(Async)");
        }

        return predictionsPostCall(contentType, postPredictions, _callback);

    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param postPredictions  (required)
     * @return Prediction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Prediction predictionsPost(String contentType, PostPredictions postPredictions) throws ApiException {
        ApiResponse<Prediction> localVarResp = predictionsPostWithHttpInfo(contentType, postPredictions);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param postPredictions  (required)
     * @return ApiResponse&lt;Prediction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Prediction> predictionsPostWithHttpInfo(String contentType, PostPredictions postPredictions) throws ApiException {
        okhttp3.Call localVarCall = predictionsPostValidateBeforeCall(contentType, postPredictions, null);
        Type localVarReturnType = new TypeToken<Prediction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentType  (required)
     * @param postPredictions  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call predictionsPostAsync(String contentType, PostPredictions postPredictions, final ApiCallback<Prediction> _callback) throws ApiException {

        okhttp3.Call localVarCall = predictionsPostValidateBeforeCall(contentType, postPredictions, _callback);
        Type localVarReturnType = new TypeToken<Prediction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for profilesProfileIdGet
     * @param profileId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call profilesProfileIdGetCall(String profileId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/profiles/{profileId}"
            .replace("{" + "profileId" + "}", localVarApiClient.escapeString(profileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call profilesProfileIdGetValidateBeforeCall(String profileId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling profilesProfileIdGet(Async)");
        }

        return profilesProfileIdGetCall(profileId, _callback);

    }

    /**
     * 
     * 
     * @param profileId  (required)
     * @return Profile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Profile profilesProfileIdGet(String profileId) throws ApiException {
        ApiResponse<Profile> localVarResp = profilesProfileIdGetWithHttpInfo(profileId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param profileId  (required)
     * @return ApiResponse&lt;Profile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Profile> profilesProfileIdGetWithHttpInfo(String profileId) throws ApiException {
        okhttp3.Call localVarCall = profilesProfileIdGetValidateBeforeCall(profileId, null);
        Type localVarReturnType = new TypeToken<Profile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param profileId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call profilesProfileIdGetAsync(String profileId, final ApiCallback<Profile> _callback) throws ApiException {

        okhttp3.Call localVarCall = profilesProfileIdGetValidateBeforeCall(profileId, _callback);
        Type localVarReturnType = new TypeToken<Profile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for profilesProfileIdOptions
     * @param profileId  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call profilesProfileIdOptionsCall(String profileId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/profiles/{profileId}"
            .replace("{" + "profileId" + "}", localVarApiClient.escapeString(profileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "OPTIONS", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call profilesProfileIdOptionsValidateBeforeCall(String profileId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling profilesProfileIdOptions(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling profilesProfileIdOptions(Async)");
        }

        return profilesProfileIdOptionsCall(profileId, body, _callback);

    }

    /**
     * 
     * 
     * @param profileId  (required)
     * @param body  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Object profilesProfileIdOptions(String profileId, Object body) throws ApiException {
        ApiResponse<Object> localVarResp = profilesProfileIdOptionsWithHttpInfo(profileId, body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param profileId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Object> profilesProfileIdOptionsWithHttpInfo(String profileId, Object body) throws ApiException {
        okhttp3.Call localVarCall = profilesProfileIdOptionsValidateBeforeCall(profileId, body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param profileId  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call profilesProfileIdOptionsAsync(String profileId, Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = profilesProfileIdOptionsValidateBeforeCall(profileId, body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for profilesProfileIdPatch
     * @param profileId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call profilesProfileIdPatchCall(String profileId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/profiles/{profileId}"
            .replace("{" + "profileId" + "}", localVarApiClient.escapeString(profileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call profilesProfileIdPatchValidateBeforeCall(String profileId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling profilesProfileIdPatch(Async)");
        }

        return profilesProfileIdPatchCall(profileId, _callback);

    }

    /**
     * 
     * 
     * @param profileId  (required)
     * @return Profile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Profile profilesProfileIdPatch(String profileId) throws ApiException {
        ApiResponse<Profile> localVarResp = profilesProfileIdPatchWithHttpInfo(profileId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param profileId  (required)
     * @return ApiResponse&lt;Profile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Profile> profilesProfileIdPatchWithHttpInfo(String profileId) throws ApiException {
        okhttp3.Call localVarCall = profilesProfileIdPatchValidateBeforeCall(profileId, null);
        Type localVarReturnType = new TypeToken<Profile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param profileId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call profilesProfileIdPatchAsync(String profileId, final ApiCallback<Profile> _callback) throws ApiException {

        okhttp3.Call localVarCall = profilesProfileIdPatchValidateBeforeCall(profileId, _callback);
        Type localVarReturnType = new TypeToken<Profile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for secretsGet
     * @param nextToken  (optional)
     * @param maxResults  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call secretsGetCall(String nextToken, String maxResults, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/secrets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call secretsGetValidateBeforeCall(String nextToken, String maxResults, final ApiCallback _callback) throws ApiException {
        return secretsGetCall(nextToken, maxResults, _callback);

    }

    /**
     * 
     * 
     * @param nextToken  (optional)
     * @param maxResults  (optional)
     * @return Secrets
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Secrets secretsGet(String nextToken, String maxResults) throws ApiException {
        ApiResponse<Secrets> localVarResp = secretsGetWithHttpInfo(nextToken, maxResults);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param nextToken  (optional)
     * @param maxResults  (optional)
     * @return ApiResponse&lt;Secrets&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Secrets> secretsGetWithHttpInfo(String nextToken, String maxResults) throws ApiException {
        okhttp3.Call localVarCall = secretsGetValidateBeforeCall(nextToken, maxResults, null);
        Type localVarReturnType = new TypeToken<Secrets>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param nextToken  (optional)
     * @param maxResults  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call secretsGetAsync(String nextToken, String maxResults, final ApiCallback<Secrets> _callback) throws ApiException {

        okhttp3.Call localVarCall = secretsGetValidateBeforeCall(nextToken, maxResults, _callback);
        Type localVarReturnType = new TypeToken<Secrets>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for secretsOptions
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call secretsOptionsCall(Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/secrets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "OPTIONS", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call secretsOptionsValidateBeforeCall(Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling secretsOptions(Async)");
        }

        return secretsOptionsCall(body, _callback);

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Object secretsOptions(Object body) throws ApiException {
        ApiResponse<Object> localVarResp = secretsOptionsWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Object> secretsOptionsWithHttpInfo(Object body) throws ApiException {
        okhttp3.Call localVarCall = secretsOptionsValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call secretsOptionsAsync(Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = secretsOptionsValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for secretsPost
     * @param contentType  (required)
     * @param postSecrets  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call secretsPostCall(String contentType, PostSecrets postSecrets, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postSecrets;

        // create path and map variables
        String localVarPath = "/secrets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call secretsPostValidateBeforeCall(String contentType, PostSecrets postSecrets, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling secretsPost(Async)");
        }

        // verify the required parameter 'postSecrets' is set
        if (postSecrets == null) {
            throw new ApiException("Missing the required parameter 'postSecrets' when calling secretsPost(Async)");
        }

        return secretsPostCall(contentType, postSecrets, _callback);

    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param postSecrets  (required)
     * @return Secret
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Secret secretsPost(String contentType, PostSecrets postSecrets) throws ApiException {
        ApiResponse<Secret> localVarResp = secretsPostWithHttpInfo(contentType, postSecrets);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param postSecrets  (required)
     * @return ApiResponse&lt;Secret&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Secret> secretsPostWithHttpInfo(String contentType, PostSecrets postSecrets) throws ApiException {
        okhttp3.Call localVarCall = secretsPostValidateBeforeCall(contentType, postSecrets, null);
        Type localVarReturnType = new TypeToken<Secret>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentType  (required)
     * @param postSecrets  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call secretsPostAsync(String contentType, PostSecrets postSecrets, final ApiCallback<Secret> _callback) throws ApiException {

        okhttp3.Call localVarCall = secretsPostValidateBeforeCall(contentType, postSecrets, _callback);
        Type localVarReturnType = new TypeToken<Secret>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for secretsSecretIdDelete
     * @param secretId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call secretsSecretIdDeleteCall(String secretId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/secrets/{secretId}"
            .replace("{" + "secretId" + "}", localVarApiClient.escapeString(secretId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call secretsSecretIdDeleteValidateBeforeCall(String secretId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'secretId' is set
        if (secretId == null) {
            throw new ApiException("Missing the required parameter 'secretId' when calling secretsSecretIdDelete(Async)");
        }

        return secretsSecretIdDeleteCall(secretId, _callback);

    }

    /**
     * 
     * 
     * @param secretId  (required)
     * @return Secret
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Secret secretsSecretIdDelete(String secretId) throws ApiException {
        ApiResponse<Secret> localVarResp = secretsSecretIdDeleteWithHttpInfo(secretId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param secretId  (required)
     * @return ApiResponse&lt;Secret&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Secret> secretsSecretIdDeleteWithHttpInfo(String secretId) throws ApiException {
        okhttp3.Call localVarCall = secretsSecretIdDeleteValidateBeforeCall(secretId, null);
        Type localVarReturnType = new TypeToken<Secret>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param secretId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call secretsSecretIdDeleteAsync(String secretId, final ApiCallback<Secret> _callback) throws ApiException {

        okhttp3.Call localVarCall = secretsSecretIdDeleteValidateBeforeCall(secretId, _callback);
        Type localVarReturnType = new TypeToken<Secret>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for secretsSecretIdOptions
     * @param secretId  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call secretsSecretIdOptionsCall(String secretId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/secrets/{secretId}"
            .replace("{" + "secretId" + "}", localVarApiClient.escapeString(secretId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "OPTIONS", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call secretsSecretIdOptionsValidateBeforeCall(String secretId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'secretId' is set
        if (secretId == null) {
            throw new ApiException("Missing the required parameter 'secretId' when calling secretsSecretIdOptions(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling secretsSecretIdOptions(Async)");
        }

        return secretsSecretIdOptionsCall(secretId, body, _callback);

    }

    /**
     * 
     * 
     * @param secretId  (required)
     * @param body  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Object secretsSecretIdOptions(String secretId, Object body) throws ApiException {
        ApiResponse<Object> localVarResp = secretsSecretIdOptionsWithHttpInfo(secretId, body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param secretId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Object> secretsSecretIdOptionsWithHttpInfo(String secretId, Object body) throws ApiException {
        okhttp3.Call localVarCall = secretsSecretIdOptionsValidateBeforeCall(secretId, body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param secretId  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call secretsSecretIdOptionsAsync(String secretId, Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = secretsSecretIdOptionsValidateBeforeCall(secretId, body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for secretsSecretIdPatch
     * @param contentType  (required)
     * @param secretId  (required)
     * @param patchSecretId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call secretsSecretIdPatchCall(String contentType, String secretId, PatchSecretId patchSecretId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchSecretId;

        // create path and map variables
        String localVarPath = "/secrets/{secretId}"
            .replace("{" + "secretId" + "}", localVarApiClient.escapeString(secretId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call secretsSecretIdPatchValidateBeforeCall(String contentType, String secretId, PatchSecretId patchSecretId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling secretsSecretIdPatch(Async)");
        }

        // verify the required parameter 'secretId' is set
        if (secretId == null) {
            throw new ApiException("Missing the required parameter 'secretId' when calling secretsSecretIdPatch(Async)");
        }

        // verify the required parameter 'patchSecretId' is set
        if (patchSecretId == null) {
            throw new ApiException("Missing the required parameter 'patchSecretId' when calling secretsSecretIdPatch(Async)");
        }

        return secretsSecretIdPatchCall(contentType, secretId, patchSecretId, _callback);

    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param secretId  (required)
     * @param patchSecretId  (required)
     * @return Secret
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Secret secretsSecretIdPatch(String contentType, String secretId, PatchSecretId patchSecretId) throws ApiException {
        ApiResponse<Secret> localVarResp = secretsSecretIdPatchWithHttpInfo(contentType, secretId, patchSecretId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param secretId  (required)
     * @param patchSecretId  (required)
     * @return ApiResponse&lt;Secret&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Secret> secretsSecretIdPatchWithHttpInfo(String contentType, String secretId, PatchSecretId patchSecretId) throws ApiException {
        okhttp3.Call localVarCall = secretsSecretIdPatchValidateBeforeCall(contentType, secretId, patchSecretId, null);
        Type localVarReturnType = new TypeToken<Secret>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentType  (required)
     * @param secretId  (required)
     * @param patchSecretId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call secretsSecretIdPatchAsync(String contentType, String secretId, PatchSecretId patchSecretId, final ApiCallback<Secret> _callback) throws ApiException {

        okhttp3.Call localVarCall = secretsSecretIdPatchValidateBeforeCall(contentType, secretId, patchSecretId, _callback);
        Type localVarReturnType = new TypeToken<Secret>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transitionsGet
     * @param transitionType  (optional)
     * @param nextToken  (optional)
     * @param maxResults  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call transitionsGetCall(String transitionType, String nextToken, String maxResults, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transitions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (transitionType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("transitionType", transitionType));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transitionsGetValidateBeforeCall(String transitionType, String nextToken, String maxResults, final ApiCallback _callback) throws ApiException {
        return transitionsGetCall(transitionType, nextToken, maxResults, _callback);

    }

    /**
     * 
     * 
     * @param transitionType  (optional)
     * @param nextToken  (optional)
     * @param maxResults  (optional)
     * @return Transitions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Transitions transitionsGet(String transitionType, String nextToken, String maxResults) throws ApiException {
        ApiResponse<Transitions> localVarResp = transitionsGetWithHttpInfo(transitionType, nextToken, maxResults);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param transitionType  (optional)
     * @param nextToken  (optional)
     * @param maxResults  (optional)
     * @return ApiResponse&lt;Transitions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Transitions> transitionsGetWithHttpInfo(String transitionType, String nextToken, String maxResults) throws ApiException {
        okhttp3.Call localVarCall = transitionsGetValidateBeforeCall(transitionType, nextToken, maxResults, null);
        Type localVarReturnType = new TypeToken<Transitions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param transitionType  (optional)
     * @param nextToken  (optional)
     * @param maxResults  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call transitionsGetAsync(String transitionType, String nextToken, String maxResults, final ApiCallback<Transitions> _callback) throws ApiException {

        okhttp3.Call localVarCall = transitionsGetValidateBeforeCall(transitionType, nextToken, maxResults, _callback);
        Type localVarReturnType = new TypeToken<Transitions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transitionsOptions
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call transitionsOptionsCall(Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/transitions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "OPTIONS", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transitionsOptionsValidateBeforeCall(Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling transitionsOptions(Async)");
        }

        return transitionsOptionsCall(body, _callback);

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Object transitionsOptions(Object body) throws ApiException {
        ApiResponse<Object> localVarResp = transitionsOptionsWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Object> transitionsOptionsWithHttpInfo(Object body) throws ApiException {
        okhttp3.Call localVarCall = transitionsOptionsValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call transitionsOptionsAsync(Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = transitionsOptionsValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transitionsPost
     * @param contentType  (required)
     * @param postTransitions  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call transitionsPostCall(String contentType, PostTransitions postTransitions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postTransitions;

        // create path and map variables
        String localVarPath = "/transitions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transitionsPostValidateBeforeCall(String contentType, PostTransitions postTransitions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling transitionsPost(Async)");
        }

        // verify the required parameter 'postTransitions' is set
        if (postTransitions == null) {
            throw new ApiException("Missing the required parameter 'postTransitions' when calling transitionsPost(Async)");
        }

        return transitionsPostCall(contentType, postTransitions, _callback);

    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param postTransitions  (required)
     * @return Transition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Transition transitionsPost(String contentType, PostTransitions postTransitions) throws ApiException {
        ApiResponse<Transition> localVarResp = transitionsPostWithHttpInfo(contentType, postTransitions);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param postTransitions  (required)
     * @return ApiResponse&lt;Transition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Transition> transitionsPostWithHttpInfo(String contentType, PostTransitions postTransitions) throws ApiException {
        okhttp3.Call localVarCall = transitionsPostValidateBeforeCall(contentType, postTransitions, null);
        Type localVarReturnType = new TypeToken<Transition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentType  (required)
     * @param postTransitions  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call transitionsPostAsync(String contentType, PostTransitions postTransitions, final ApiCallback<Transition> _callback) throws ApiException {

        okhttp3.Call localVarCall = transitionsPostValidateBeforeCall(contentType, postTransitions, _callback);
        Type localVarReturnType = new TypeToken<Transition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transitionsTransitionIdDelete
     * @param transitionId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call transitionsTransitionIdDeleteCall(String transitionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transitions/{transitionId}"
            .replace("{" + "transitionId" + "}", localVarApiClient.escapeString(transitionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transitionsTransitionIdDeleteValidateBeforeCall(String transitionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transitionId' is set
        if (transitionId == null) {
            throw new ApiException("Missing the required parameter 'transitionId' when calling transitionsTransitionIdDelete(Async)");
        }

        return transitionsTransitionIdDeleteCall(transitionId, _callback);

    }

    /**
     * 
     * 
     * @param transitionId  (required)
     * @return Transition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Transition transitionsTransitionIdDelete(String transitionId) throws ApiException {
        ApiResponse<Transition> localVarResp = transitionsTransitionIdDeleteWithHttpInfo(transitionId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param transitionId  (required)
     * @return ApiResponse&lt;Transition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Transition> transitionsTransitionIdDeleteWithHttpInfo(String transitionId) throws ApiException {
        okhttp3.Call localVarCall = transitionsTransitionIdDeleteValidateBeforeCall(transitionId, null);
        Type localVarReturnType = new TypeToken<Transition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param transitionId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call transitionsTransitionIdDeleteAsync(String transitionId, final ApiCallback<Transition> _callback) throws ApiException {

        okhttp3.Call localVarCall = transitionsTransitionIdDeleteValidateBeforeCall(transitionId, _callback);
        Type localVarReturnType = new TypeToken<Transition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transitionsTransitionIdExecutionsExecutionIdGet
     * @param transitionId  (required)
     * @param executionId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call transitionsTransitionIdExecutionsExecutionIdGetCall(String transitionId, String executionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transitions/{transitionId}/executions/{executionId}"
            .replace("{" + "transitionId" + "}", localVarApiClient.escapeString(transitionId.toString()))
            .replace("{" + "executionId" + "}", localVarApiClient.escapeString(executionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transitionsTransitionIdExecutionsExecutionIdGetValidateBeforeCall(String transitionId, String executionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transitionId' is set
        if (transitionId == null) {
            throw new ApiException("Missing the required parameter 'transitionId' when calling transitionsTransitionIdExecutionsExecutionIdGet(Async)");
        }

        // verify the required parameter 'executionId' is set
        if (executionId == null) {
            throw new ApiException("Missing the required parameter 'executionId' when calling transitionsTransitionIdExecutionsExecutionIdGet(Async)");
        }

        return transitionsTransitionIdExecutionsExecutionIdGetCall(transitionId, executionId, _callback);

    }

    /**
     * 
     * 
     * @param transitionId  (required)
     * @param executionId  (required)
     * @return TransitionExecution
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public TransitionExecution transitionsTransitionIdExecutionsExecutionIdGet(String transitionId, String executionId) throws ApiException {
        ApiResponse<TransitionExecution> localVarResp = transitionsTransitionIdExecutionsExecutionIdGetWithHttpInfo(transitionId, executionId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param transitionId  (required)
     * @param executionId  (required)
     * @return ApiResponse&lt;TransitionExecution&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<TransitionExecution> transitionsTransitionIdExecutionsExecutionIdGetWithHttpInfo(String transitionId, String executionId) throws ApiException {
        okhttp3.Call localVarCall = transitionsTransitionIdExecutionsExecutionIdGetValidateBeforeCall(transitionId, executionId, null);
        Type localVarReturnType = new TypeToken<TransitionExecution>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param transitionId  (required)
     * @param executionId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call transitionsTransitionIdExecutionsExecutionIdGetAsync(String transitionId, String executionId, final ApiCallback<TransitionExecution> _callback) throws ApiException {

        okhttp3.Call localVarCall = transitionsTransitionIdExecutionsExecutionIdGetValidateBeforeCall(transitionId, executionId, _callback);
        Type localVarReturnType = new TypeToken<TransitionExecution>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transitionsTransitionIdExecutionsExecutionIdHeartbeatsOptions
     * @param transitionId  (required)
     * @param executionId  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call transitionsTransitionIdExecutionsExecutionIdHeartbeatsOptionsCall(String transitionId, String executionId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/transitions/{transitionId}/executions/{executionId}/heartbeats"
            .replace("{" + "transitionId" + "}", localVarApiClient.escapeString(transitionId.toString()))
            .replace("{" + "executionId" + "}", localVarApiClient.escapeString(executionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "OPTIONS", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transitionsTransitionIdExecutionsExecutionIdHeartbeatsOptionsValidateBeforeCall(String transitionId, String executionId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transitionId' is set
        if (transitionId == null) {
            throw new ApiException("Missing the required parameter 'transitionId' when calling transitionsTransitionIdExecutionsExecutionIdHeartbeatsOptions(Async)");
        }

        // verify the required parameter 'executionId' is set
        if (executionId == null) {
            throw new ApiException("Missing the required parameter 'executionId' when calling transitionsTransitionIdExecutionsExecutionIdHeartbeatsOptions(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling transitionsTransitionIdExecutionsExecutionIdHeartbeatsOptions(Async)");
        }

        return transitionsTransitionIdExecutionsExecutionIdHeartbeatsOptionsCall(transitionId, executionId, body, _callback);

    }

    /**
     * 
     * 
     * @param transitionId  (required)
     * @param executionId  (required)
     * @param body  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Object transitionsTransitionIdExecutionsExecutionIdHeartbeatsOptions(String transitionId, String executionId, Object body) throws ApiException {
        ApiResponse<Object> localVarResp = transitionsTransitionIdExecutionsExecutionIdHeartbeatsOptionsWithHttpInfo(transitionId, executionId, body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param transitionId  (required)
     * @param executionId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Object> transitionsTransitionIdExecutionsExecutionIdHeartbeatsOptionsWithHttpInfo(String transitionId, String executionId, Object body) throws ApiException {
        okhttp3.Call localVarCall = transitionsTransitionIdExecutionsExecutionIdHeartbeatsOptionsValidateBeforeCall(transitionId, executionId, body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param transitionId  (required)
     * @param executionId  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call transitionsTransitionIdExecutionsExecutionIdHeartbeatsOptionsAsync(String transitionId, String executionId, Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = transitionsTransitionIdExecutionsExecutionIdHeartbeatsOptionsValidateBeforeCall(transitionId, executionId, body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transitionsTransitionIdExecutionsExecutionIdHeartbeatsPost
     * @param contentType  (required)
     * @param transitionId  (required)
     * @param executionId  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> 204 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call transitionsTransitionIdExecutionsExecutionIdHeartbeatsPostCall(String contentType, String transitionId, String executionId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/transitions/{transitionId}/executions/{executionId}/heartbeats"
            .replace("{" + "transitionId" + "}", localVarApiClient.escapeString(transitionId.toString()))
            .replace("{" + "executionId" + "}", localVarApiClient.escapeString(executionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transitionsTransitionIdExecutionsExecutionIdHeartbeatsPostValidateBeforeCall(String contentType, String transitionId, String executionId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling transitionsTransitionIdExecutionsExecutionIdHeartbeatsPost(Async)");
        }

        // verify the required parameter 'transitionId' is set
        if (transitionId == null) {
            throw new ApiException("Missing the required parameter 'transitionId' when calling transitionsTransitionIdExecutionsExecutionIdHeartbeatsPost(Async)");
        }

        // verify the required parameter 'executionId' is set
        if (executionId == null) {
            throw new ApiException("Missing the required parameter 'executionId' when calling transitionsTransitionIdExecutionsExecutionIdHeartbeatsPost(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling transitionsTransitionIdExecutionsExecutionIdHeartbeatsPost(Async)");
        }

        return transitionsTransitionIdExecutionsExecutionIdHeartbeatsPostCall(contentType, transitionId, executionId, body, _callback);

    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param transitionId  (required)
     * @param executionId  (required)
     * @param body  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> 204 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Object transitionsTransitionIdExecutionsExecutionIdHeartbeatsPost(String contentType, String transitionId, String executionId, Object body) throws ApiException {
        ApiResponse<Object> localVarResp = transitionsTransitionIdExecutionsExecutionIdHeartbeatsPostWithHttpInfo(contentType, transitionId, executionId, body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param transitionId  (required)
     * @param executionId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> 204 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Object> transitionsTransitionIdExecutionsExecutionIdHeartbeatsPostWithHttpInfo(String contentType, String transitionId, String executionId, Object body) throws ApiException {
        okhttp3.Call localVarCall = transitionsTransitionIdExecutionsExecutionIdHeartbeatsPostValidateBeforeCall(contentType, transitionId, executionId, body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentType  (required)
     * @param transitionId  (required)
     * @param executionId  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> 204 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call transitionsTransitionIdExecutionsExecutionIdHeartbeatsPostAsync(String contentType, String transitionId, String executionId, Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = transitionsTransitionIdExecutionsExecutionIdHeartbeatsPostValidateBeforeCall(contentType, transitionId, executionId, body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transitionsTransitionIdExecutionsExecutionIdOptions
     * @param transitionId  (required)
     * @param executionId  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call transitionsTransitionIdExecutionsExecutionIdOptionsCall(String transitionId, String executionId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/transitions/{transitionId}/executions/{executionId}"
            .replace("{" + "transitionId" + "}", localVarApiClient.escapeString(transitionId.toString()))
            .replace("{" + "executionId" + "}", localVarApiClient.escapeString(executionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "OPTIONS", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transitionsTransitionIdExecutionsExecutionIdOptionsValidateBeforeCall(String transitionId, String executionId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transitionId' is set
        if (transitionId == null) {
            throw new ApiException("Missing the required parameter 'transitionId' when calling transitionsTransitionIdExecutionsExecutionIdOptions(Async)");
        }

        // verify the required parameter 'executionId' is set
        if (executionId == null) {
            throw new ApiException("Missing the required parameter 'executionId' when calling transitionsTransitionIdExecutionsExecutionIdOptions(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling transitionsTransitionIdExecutionsExecutionIdOptions(Async)");
        }

        return transitionsTransitionIdExecutionsExecutionIdOptionsCall(transitionId, executionId, body, _callback);

    }

    /**
     * 
     * 
     * @param transitionId  (required)
     * @param executionId  (required)
     * @param body  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Object transitionsTransitionIdExecutionsExecutionIdOptions(String transitionId, String executionId, Object body) throws ApiException {
        ApiResponse<Object> localVarResp = transitionsTransitionIdExecutionsExecutionIdOptionsWithHttpInfo(transitionId, executionId, body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param transitionId  (required)
     * @param executionId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Object> transitionsTransitionIdExecutionsExecutionIdOptionsWithHttpInfo(String transitionId, String executionId, Object body) throws ApiException {
        okhttp3.Call localVarCall = transitionsTransitionIdExecutionsExecutionIdOptionsValidateBeforeCall(transitionId, executionId, body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param transitionId  (required)
     * @param executionId  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call transitionsTransitionIdExecutionsExecutionIdOptionsAsync(String transitionId, String executionId, Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = transitionsTransitionIdExecutionsExecutionIdOptionsValidateBeforeCall(transitionId, executionId, body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transitionsTransitionIdExecutionsExecutionIdPatch
     * @param contentType  (required)
     * @param transitionId  (required)
     * @param executionId  (required)
     * @param patchTransistionExecutionId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call transitionsTransitionIdExecutionsExecutionIdPatchCall(String contentType, String transitionId, String executionId, PatchTransistionExecutionId patchTransistionExecutionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchTransistionExecutionId;

        // create path and map variables
        String localVarPath = "/transitions/{transitionId}/executions/{executionId}"
            .replace("{" + "transitionId" + "}", localVarApiClient.escapeString(transitionId.toString()))
            .replace("{" + "executionId" + "}", localVarApiClient.escapeString(executionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transitionsTransitionIdExecutionsExecutionIdPatchValidateBeforeCall(String contentType, String transitionId, String executionId, PatchTransistionExecutionId patchTransistionExecutionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling transitionsTransitionIdExecutionsExecutionIdPatch(Async)");
        }

        // verify the required parameter 'transitionId' is set
        if (transitionId == null) {
            throw new ApiException("Missing the required parameter 'transitionId' when calling transitionsTransitionIdExecutionsExecutionIdPatch(Async)");
        }

        // verify the required parameter 'executionId' is set
        if (executionId == null) {
            throw new ApiException("Missing the required parameter 'executionId' when calling transitionsTransitionIdExecutionsExecutionIdPatch(Async)");
        }

        // verify the required parameter 'patchTransistionExecutionId' is set
        if (patchTransistionExecutionId == null) {
            throw new ApiException("Missing the required parameter 'patchTransistionExecutionId' when calling transitionsTransitionIdExecutionsExecutionIdPatch(Async)");
        }

        return transitionsTransitionIdExecutionsExecutionIdPatchCall(contentType, transitionId, executionId, patchTransistionExecutionId, _callback);

    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param transitionId  (required)
     * @param executionId  (required)
     * @param patchTransistionExecutionId  (required)
     * @return TransitionExecution
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public TransitionExecution transitionsTransitionIdExecutionsExecutionIdPatch(String contentType, String transitionId, String executionId, PatchTransistionExecutionId patchTransistionExecutionId) throws ApiException {
        ApiResponse<TransitionExecution> localVarResp = transitionsTransitionIdExecutionsExecutionIdPatchWithHttpInfo(contentType, transitionId, executionId, patchTransistionExecutionId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param transitionId  (required)
     * @param executionId  (required)
     * @param patchTransistionExecutionId  (required)
     * @return ApiResponse&lt;TransitionExecution&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<TransitionExecution> transitionsTransitionIdExecutionsExecutionIdPatchWithHttpInfo(String contentType, String transitionId, String executionId, PatchTransistionExecutionId patchTransistionExecutionId) throws ApiException {
        okhttp3.Call localVarCall = transitionsTransitionIdExecutionsExecutionIdPatchValidateBeforeCall(contentType, transitionId, executionId, patchTransistionExecutionId, null);
        Type localVarReturnType = new TypeToken<TransitionExecution>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentType  (required)
     * @param transitionId  (required)
     * @param executionId  (required)
     * @param patchTransistionExecutionId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call transitionsTransitionIdExecutionsExecutionIdPatchAsync(String contentType, String transitionId, String executionId, PatchTransistionExecutionId patchTransistionExecutionId, final ApiCallback<TransitionExecution> _callback) throws ApiException {

        okhttp3.Call localVarCall = transitionsTransitionIdExecutionsExecutionIdPatchValidateBeforeCall(contentType, transitionId, executionId, patchTransistionExecutionId, _callback);
        Type localVarReturnType = new TypeToken<TransitionExecution>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transitionsTransitionIdExecutionsGet
     * @param transitionId  (required)
     * @param nextToken  (optional)
     * @param order  (optional)
     * @param executionId  (optional)
     * @param status  (optional)
     * @param maxResults  (optional)
     * @param sortBy  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call transitionsTransitionIdExecutionsGetCall(String transitionId, String nextToken, String order, String executionId, String status, String maxResults, String sortBy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transitions/{transitionId}/executions"
            .replace("{" + "transitionId" + "}", localVarApiClient.escapeString(transitionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (executionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("executionId", executionId));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transitionsTransitionIdExecutionsGetValidateBeforeCall(String transitionId, String nextToken, String order, String executionId, String status, String maxResults, String sortBy, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transitionId' is set
        if (transitionId == null) {
            throw new ApiException("Missing the required parameter 'transitionId' when calling transitionsTransitionIdExecutionsGet(Async)");
        }

        return transitionsTransitionIdExecutionsGetCall(transitionId, nextToken, order, executionId, status, maxResults, sortBy, _callback);

    }

    /**
     * 
     * 
     * @param transitionId  (required)
     * @param nextToken  (optional)
     * @param order  (optional)
     * @param executionId  (optional)
     * @param status  (optional)
     * @param maxResults  (optional)
     * @param sortBy  (optional)
     * @return TransitionExecutions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public TransitionExecutions transitionsTransitionIdExecutionsGet(String transitionId, String nextToken, String order, String executionId, String status, String maxResults, String sortBy) throws ApiException {
        ApiResponse<TransitionExecutions> localVarResp = transitionsTransitionIdExecutionsGetWithHttpInfo(transitionId, nextToken, order, executionId, status, maxResults, sortBy);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param transitionId  (required)
     * @param nextToken  (optional)
     * @param order  (optional)
     * @param executionId  (optional)
     * @param status  (optional)
     * @param maxResults  (optional)
     * @param sortBy  (optional)
     * @return ApiResponse&lt;TransitionExecutions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<TransitionExecutions> transitionsTransitionIdExecutionsGetWithHttpInfo(String transitionId, String nextToken, String order, String executionId, String status, String maxResults, String sortBy) throws ApiException {
        okhttp3.Call localVarCall = transitionsTransitionIdExecutionsGetValidateBeforeCall(transitionId, nextToken, order, executionId, status, maxResults, sortBy, null);
        Type localVarReturnType = new TypeToken<TransitionExecutions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param transitionId  (required)
     * @param nextToken  (optional)
     * @param order  (optional)
     * @param executionId  (optional)
     * @param status  (optional)
     * @param maxResults  (optional)
     * @param sortBy  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call transitionsTransitionIdExecutionsGetAsync(String transitionId, String nextToken, String order, String executionId, String status, String maxResults, String sortBy, final ApiCallback<TransitionExecutions> _callback) throws ApiException {

        okhttp3.Call localVarCall = transitionsTransitionIdExecutionsGetValidateBeforeCall(transitionId, nextToken, order, executionId, status, maxResults, sortBy, _callback);
        Type localVarReturnType = new TypeToken<TransitionExecutions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transitionsTransitionIdExecutionsOptions
     * @param transitionId  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call transitionsTransitionIdExecutionsOptionsCall(String transitionId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/transitions/{transitionId}/executions"
            .replace("{" + "transitionId" + "}", localVarApiClient.escapeString(transitionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "OPTIONS", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transitionsTransitionIdExecutionsOptionsValidateBeforeCall(String transitionId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transitionId' is set
        if (transitionId == null) {
            throw new ApiException("Missing the required parameter 'transitionId' when calling transitionsTransitionIdExecutionsOptions(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling transitionsTransitionIdExecutionsOptions(Async)");
        }

        return transitionsTransitionIdExecutionsOptionsCall(transitionId, body, _callback);

    }

    /**
     * 
     * 
     * @param transitionId  (required)
     * @param body  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Object transitionsTransitionIdExecutionsOptions(String transitionId, Object body) throws ApiException {
        ApiResponse<Object> localVarResp = transitionsTransitionIdExecutionsOptionsWithHttpInfo(transitionId, body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param transitionId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Object> transitionsTransitionIdExecutionsOptionsWithHttpInfo(String transitionId, Object body) throws ApiException {
        okhttp3.Call localVarCall = transitionsTransitionIdExecutionsOptionsValidateBeforeCall(transitionId, body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param transitionId  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call transitionsTransitionIdExecutionsOptionsAsync(String transitionId, Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = transitionsTransitionIdExecutionsOptionsValidateBeforeCall(transitionId, body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transitionsTransitionIdExecutionsPost
     * @param contentType  (required)
     * @param transitionId  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call transitionsTransitionIdExecutionsPostCall(String contentType, String transitionId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/transitions/{transitionId}/executions"
            .replace("{" + "transitionId" + "}", localVarApiClient.escapeString(transitionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transitionsTransitionIdExecutionsPostValidateBeforeCall(String contentType, String transitionId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling transitionsTransitionIdExecutionsPost(Async)");
        }

        // verify the required parameter 'transitionId' is set
        if (transitionId == null) {
            throw new ApiException("Missing the required parameter 'transitionId' when calling transitionsTransitionIdExecutionsPost(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling transitionsTransitionIdExecutionsPost(Async)");
        }

        return transitionsTransitionIdExecutionsPostCall(contentType, transitionId, body, _callback);

    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param transitionId  (required)
     * @param body  (required)
     * @return TransitionExecution
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public TransitionExecution transitionsTransitionIdExecutionsPost(String contentType, String transitionId, Object body) throws ApiException {
        ApiResponse<TransitionExecution> localVarResp = transitionsTransitionIdExecutionsPostWithHttpInfo(contentType, transitionId, body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param transitionId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;TransitionExecution&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<TransitionExecution> transitionsTransitionIdExecutionsPostWithHttpInfo(String contentType, String transitionId, Object body) throws ApiException {
        okhttp3.Call localVarCall = transitionsTransitionIdExecutionsPostValidateBeforeCall(contentType, transitionId, body, null);
        Type localVarReturnType = new TypeToken<TransitionExecution>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentType  (required)
     * @param transitionId  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call transitionsTransitionIdExecutionsPostAsync(String contentType, String transitionId, Object body, final ApiCallback<TransitionExecution> _callback) throws ApiException {

        okhttp3.Call localVarCall = transitionsTransitionIdExecutionsPostValidateBeforeCall(contentType, transitionId, body, _callback);
        Type localVarReturnType = new TypeToken<TransitionExecution>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transitionsTransitionIdGet
     * @param transitionId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call transitionsTransitionIdGetCall(String transitionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transitions/{transitionId}"
            .replace("{" + "transitionId" + "}", localVarApiClient.escapeString(transitionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transitionsTransitionIdGetValidateBeforeCall(String transitionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transitionId' is set
        if (transitionId == null) {
            throw new ApiException("Missing the required parameter 'transitionId' when calling transitionsTransitionIdGet(Async)");
        }

        return transitionsTransitionIdGetCall(transitionId, _callback);

    }

    /**
     * 
     * 
     * @param transitionId  (required)
     * @return Transition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Transition transitionsTransitionIdGet(String transitionId) throws ApiException {
        ApiResponse<Transition> localVarResp = transitionsTransitionIdGetWithHttpInfo(transitionId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param transitionId  (required)
     * @return ApiResponse&lt;Transition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Transition> transitionsTransitionIdGetWithHttpInfo(String transitionId) throws ApiException {
        okhttp3.Call localVarCall = transitionsTransitionIdGetValidateBeforeCall(transitionId, null);
        Type localVarReturnType = new TypeToken<Transition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param transitionId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call transitionsTransitionIdGetAsync(String transitionId, final ApiCallback<Transition> _callback) throws ApiException {

        okhttp3.Call localVarCall = transitionsTransitionIdGetValidateBeforeCall(transitionId, _callback);
        Type localVarReturnType = new TypeToken<Transition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transitionsTransitionIdOptions
     * @param transitionId  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call transitionsTransitionIdOptionsCall(String transitionId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/transitions/{transitionId}"
            .replace("{" + "transitionId" + "}", localVarApiClient.escapeString(transitionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "OPTIONS", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transitionsTransitionIdOptionsValidateBeforeCall(String transitionId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transitionId' is set
        if (transitionId == null) {
            throw new ApiException("Missing the required parameter 'transitionId' when calling transitionsTransitionIdOptions(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling transitionsTransitionIdOptions(Async)");
        }

        return transitionsTransitionIdOptionsCall(transitionId, body, _callback);

    }

    /**
     * 
     * 
     * @param transitionId  (required)
     * @param body  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Object transitionsTransitionIdOptions(String transitionId, Object body) throws ApiException {
        ApiResponse<Object> localVarResp = transitionsTransitionIdOptionsWithHttpInfo(transitionId, body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param transitionId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Object> transitionsTransitionIdOptionsWithHttpInfo(String transitionId, Object body) throws ApiException {
        okhttp3.Call localVarCall = transitionsTransitionIdOptionsValidateBeforeCall(transitionId, body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param transitionId  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call transitionsTransitionIdOptionsAsync(String transitionId, Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = transitionsTransitionIdOptionsValidateBeforeCall(transitionId, body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transitionsTransitionIdPatch
     * @param contentType  (required)
     * @param transitionId  (required)
     * @param patchTransitionId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call transitionsTransitionIdPatchCall(String contentType, String transitionId, PatchTransitionId patchTransitionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchTransitionId;

        // create path and map variables
        String localVarPath = "/transitions/{transitionId}"
            .replace("{" + "transitionId" + "}", localVarApiClient.escapeString(transitionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transitionsTransitionIdPatchValidateBeforeCall(String contentType, String transitionId, PatchTransitionId patchTransitionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling transitionsTransitionIdPatch(Async)");
        }

        // verify the required parameter 'transitionId' is set
        if (transitionId == null) {
            throw new ApiException("Missing the required parameter 'transitionId' when calling transitionsTransitionIdPatch(Async)");
        }

        // verify the required parameter 'patchTransitionId' is set
        if (patchTransitionId == null) {
            throw new ApiException("Missing the required parameter 'patchTransitionId' when calling transitionsTransitionIdPatch(Async)");
        }

        return transitionsTransitionIdPatchCall(contentType, transitionId, patchTransitionId, _callback);

    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param transitionId  (required)
     * @param patchTransitionId  (required)
     * @return Transition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Transition transitionsTransitionIdPatch(String contentType, String transitionId, PatchTransitionId patchTransitionId) throws ApiException {
        ApiResponse<Transition> localVarResp = transitionsTransitionIdPatchWithHttpInfo(contentType, transitionId, patchTransitionId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param transitionId  (required)
     * @param patchTransitionId  (required)
     * @return ApiResponse&lt;Transition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Transition> transitionsTransitionIdPatchWithHttpInfo(String contentType, String transitionId, PatchTransitionId patchTransitionId) throws ApiException {
        okhttp3.Call localVarCall = transitionsTransitionIdPatchValidateBeforeCall(contentType, transitionId, patchTransitionId, null);
        Type localVarReturnType = new TypeToken<Transition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentType  (required)
     * @param transitionId  (required)
     * @param patchTransitionId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call transitionsTransitionIdPatchAsync(String contentType, String transitionId, PatchTransitionId patchTransitionId, final ApiCallback<Transition> _callback) throws ApiException {

        okhttp3.Call localVarCall = transitionsTransitionIdPatchValidateBeforeCall(contentType, transitionId, patchTransitionId, _callback);
        Type localVarReturnType = new TypeToken<Transition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersGet
     * @param nextToken  (optional)
     * @param maxResults  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call usersGetCall(String nextToken, String maxResults, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersGetValidateBeforeCall(String nextToken, String maxResults, final ApiCallback _callback) throws ApiException {
        return usersGetCall(nextToken, maxResults, _callback);

    }

    /**
     * 
     * 
     * @param nextToken  (optional)
     * @param maxResults  (optional)
     * @return Users
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Users usersGet(String nextToken, String maxResults) throws ApiException {
        ApiResponse<Users> localVarResp = usersGetWithHttpInfo(nextToken, maxResults);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param nextToken  (optional)
     * @param maxResults  (optional)
     * @return ApiResponse&lt;Users&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Users> usersGetWithHttpInfo(String nextToken, String maxResults) throws ApiException {
        okhttp3.Call localVarCall = usersGetValidateBeforeCall(nextToken, maxResults, null);
        Type localVarReturnType = new TypeToken<Users>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param nextToken  (optional)
     * @param maxResults  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call usersGetAsync(String nextToken, String maxResults, final ApiCallback<Users> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersGetValidateBeforeCall(nextToken, maxResults, _callback);
        Type localVarReturnType = new TypeToken<Users>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersOptions
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call usersOptionsCall(Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "OPTIONS", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersOptionsValidateBeforeCall(Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling usersOptions(Async)");
        }

        return usersOptionsCall(body, _callback);

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Object usersOptions(Object body) throws ApiException {
        ApiResponse<Object> localVarResp = usersOptionsWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Object> usersOptionsWithHttpInfo(Object body) throws ApiException {
        okhttp3.Call localVarCall = usersOptionsValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call usersOptionsAsync(Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersOptionsValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersPost
     * @param contentType  (required)
     * @param postUsers  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call usersPostCall(String contentType, PostUsers postUsers, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postUsers;

        // create path and map variables
        String localVarPath = "/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersPostValidateBeforeCall(String contentType, PostUsers postUsers, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling usersPost(Async)");
        }

        // verify the required parameter 'postUsers' is set
        if (postUsers == null) {
            throw new ApiException("Missing the required parameter 'postUsers' when calling usersPost(Async)");
        }

        return usersPostCall(contentType, postUsers, _callback);

    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param postUsers  (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public User usersPost(String contentType, PostUsers postUsers) throws ApiException {
        ApiResponse<User> localVarResp = usersPostWithHttpInfo(contentType, postUsers);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param postUsers  (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<User> usersPostWithHttpInfo(String contentType, PostUsers postUsers) throws ApiException {
        okhttp3.Call localVarCall = usersPostValidateBeforeCall(contentType, postUsers, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentType  (required)
     * @param postUsers  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call usersPostAsync(String contentType, PostUsers postUsers, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersPostValidateBeforeCall(contentType, postUsers, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersUserIdDelete
     * @param userId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call usersUserIdDeleteCall(String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{userId}"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersUserIdDeleteValidateBeforeCall(String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling usersUserIdDelete(Async)");
        }

        return usersUserIdDeleteCall(userId, _callback);

    }

    /**
     * 
     * 
     * @param userId  (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public User usersUserIdDelete(String userId) throws ApiException {
        ApiResponse<User> localVarResp = usersUserIdDeleteWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param userId  (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<User> usersUserIdDeleteWithHttpInfo(String userId) throws ApiException {
        okhttp3.Call localVarCall = usersUserIdDeleteValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param userId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call usersUserIdDeleteAsync(String userId, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersUserIdDeleteValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersUserIdGet
     * @param userId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call usersUserIdGetCall(String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{userId}"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersUserIdGetValidateBeforeCall(String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling usersUserIdGet(Async)");
        }

        return usersUserIdGetCall(userId, _callback);

    }

    /**
     * 
     * 
     * @param userId  (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public User usersUserIdGet(String userId) throws ApiException {
        ApiResponse<User> localVarResp = usersUserIdGetWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param userId  (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<User> usersUserIdGetWithHttpInfo(String userId) throws ApiException {
        okhttp3.Call localVarCall = usersUserIdGetValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param userId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call usersUserIdGetAsync(String userId, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersUserIdGetValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersUserIdOptions
     * @param userId  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call usersUserIdOptionsCall(String userId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/users/{userId}"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "OPTIONS", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersUserIdOptionsValidateBeforeCall(String userId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling usersUserIdOptions(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling usersUserIdOptions(Async)");
        }

        return usersUserIdOptionsCall(userId, body, _callback);

    }

    /**
     * 
     * 
     * @param userId  (required)
     * @param body  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Object usersUserIdOptions(String userId, Object body) throws ApiException {
        ApiResponse<Object> localVarResp = usersUserIdOptionsWithHttpInfo(userId, body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param userId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Object> usersUserIdOptionsWithHttpInfo(String userId, Object body) throws ApiException {
        okhttp3.Call localVarCall = usersUserIdOptionsValidateBeforeCall(userId, body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param userId  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call usersUserIdOptionsAsync(String userId, Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersUserIdOptionsValidateBeforeCall(userId, body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersUserIdPatch
     * @param contentType  (required)
     * @param userId  (required)
     * @param patchUserId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call usersUserIdPatchCall(String contentType, String userId, PatchUserId patchUserId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchUserId;

        // create path and map variables
        String localVarPath = "/users/{userId}"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersUserIdPatchValidateBeforeCall(String contentType, String userId, PatchUserId patchUserId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling usersUserIdPatch(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling usersUserIdPatch(Async)");
        }

        // verify the required parameter 'patchUserId' is set
        if (patchUserId == null) {
            throw new ApiException("Missing the required parameter 'patchUserId' when calling usersUserIdPatch(Async)");
        }

        return usersUserIdPatchCall(contentType, userId, patchUserId, _callback);

    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param userId  (required)
     * @param patchUserId  (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public User usersUserIdPatch(String contentType, String userId, PatchUserId patchUserId) throws ApiException {
        ApiResponse<User> localVarResp = usersUserIdPatchWithHttpInfo(contentType, userId, patchUserId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param userId  (required)
     * @param patchUserId  (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<User> usersUserIdPatchWithHttpInfo(String contentType, String userId, PatchUserId patchUserId) throws ApiException {
        okhttp3.Call localVarCall = usersUserIdPatchValidateBeforeCall(contentType, userId, patchUserId, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentType  (required)
     * @param userId  (required)
     * @param patchUserId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call usersUserIdPatchAsync(String contentType, String userId, PatchUserId patchUserId, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersUserIdPatchValidateBeforeCall(contentType, userId, patchUserId, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workflowsGet
     * @param nextToken  (optional)
     * @param maxResults  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call workflowsGetCall(String nextToken, String maxResults, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workflows";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workflowsGetValidateBeforeCall(String nextToken, String maxResults, final ApiCallback _callback) throws ApiException {
        return workflowsGetCall(nextToken, maxResults, _callback);

    }

    /**
     * 
     * 
     * @param nextToken  (optional)
     * @param maxResults  (optional)
     * @return Workflows
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Workflows workflowsGet(String nextToken, String maxResults) throws ApiException {
        ApiResponse<Workflows> localVarResp = workflowsGetWithHttpInfo(nextToken, maxResults);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param nextToken  (optional)
     * @param maxResults  (optional)
     * @return ApiResponse&lt;Workflows&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Workflows> workflowsGetWithHttpInfo(String nextToken, String maxResults) throws ApiException {
        okhttp3.Call localVarCall = workflowsGetValidateBeforeCall(nextToken, maxResults, null);
        Type localVarReturnType = new TypeToken<Workflows>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param nextToken  (optional)
     * @param maxResults  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call workflowsGetAsync(String nextToken, String maxResults, final ApiCallback<Workflows> _callback) throws ApiException {

        okhttp3.Call localVarCall = workflowsGetValidateBeforeCall(nextToken, maxResults, _callback);
        Type localVarReturnType = new TypeToken<Workflows>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workflowsOptions
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call workflowsOptionsCall(Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/workflows";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "OPTIONS", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workflowsOptionsValidateBeforeCall(Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling workflowsOptions(Async)");
        }

        return workflowsOptionsCall(body, _callback);

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Object workflowsOptions(Object body) throws ApiException {
        ApiResponse<Object> localVarResp = workflowsOptionsWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Object> workflowsOptionsWithHttpInfo(Object body) throws ApiException {
        okhttp3.Call localVarCall = workflowsOptionsValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call workflowsOptionsAsync(Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = workflowsOptionsValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workflowsPost
     * @param contentType  (required)
     * @param postWorkflows  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call workflowsPostCall(String contentType, PostWorkflows postWorkflows, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postWorkflows;

        // create path and map variables
        String localVarPath = "/workflows";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workflowsPostValidateBeforeCall(String contentType, PostWorkflows postWorkflows, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling workflowsPost(Async)");
        }

        // verify the required parameter 'postWorkflows' is set
        if (postWorkflows == null) {
            throw new ApiException("Missing the required parameter 'postWorkflows' when calling workflowsPost(Async)");
        }

        return workflowsPostCall(contentType, postWorkflows, _callback);

    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param postWorkflows  (required)
     * @return Workflow
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Workflow workflowsPost(String contentType, PostWorkflows postWorkflows) throws ApiException {
        ApiResponse<Workflow> localVarResp = workflowsPostWithHttpInfo(contentType, postWorkflows);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param postWorkflows  (required)
     * @return ApiResponse&lt;Workflow&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Workflow> workflowsPostWithHttpInfo(String contentType, PostWorkflows postWorkflows) throws ApiException {
        okhttp3.Call localVarCall = workflowsPostValidateBeforeCall(contentType, postWorkflows, null);
        Type localVarReturnType = new TypeToken<Workflow>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentType  (required)
     * @param postWorkflows  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call workflowsPostAsync(String contentType, PostWorkflows postWorkflows, final ApiCallback<Workflow> _callback) throws ApiException {

        okhttp3.Call localVarCall = workflowsPostValidateBeforeCall(contentType, postWorkflows, _callback);
        Type localVarReturnType = new TypeToken<Workflow>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workflowsWorkflowIdDelete
     * @param workflowId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call workflowsWorkflowIdDeleteCall(String workflowId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workflows/{workflowId}"
            .replace("{" + "workflowId" + "}", localVarApiClient.escapeString(workflowId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workflowsWorkflowIdDeleteValidateBeforeCall(String workflowId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workflowId' is set
        if (workflowId == null) {
            throw new ApiException("Missing the required parameter 'workflowId' when calling workflowsWorkflowIdDelete(Async)");
        }

        return workflowsWorkflowIdDeleteCall(workflowId, _callback);

    }

    /**
     * 
     * 
     * @param workflowId  (required)
     * @return Workflow
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Workflow workflowsWorkflowIdDelete(String workflowId) throws ApiException {
        ApiResponse<Workflow> localVarResp = workflowsWorkflowIdDeleteWithHttpInfo(workflowId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param workflowId  (required)
     * @return ApiResponse&lt;Workflow&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Workflow> workflowsWorkflowIdDeleteWithHttpInfo(String workflowId) throws ApiException {
        okhttp3.Call localVarCall = workflowsWorkflowIdDeleteValidateBeforeCall(workflowId, null);
        Type localVarReturnType = new TypeToken<Workflow>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param workflowId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call workflowsWorkflowIdDeleteAsync(String workflowId, final ApiCallback<Workflow> _callback) throws ApiException {

        okhttp3.Call localVarCall = workflowsWorkflowIdDeleteValidateBeforeCall(workflowId, _callback);
        Type localVarReturnType = new TypeToken<Workflow>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workflowsWorkflowIdExecutionsExecutionIdDelete
     * @param executionId  (required)
     * @param workflowId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call workflowsWorkflowIdExecutionsExecutionIdDeleteCall(String executionId, String workflowId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workflows/{workflowId}/executions/{executionId}"
            .replace("{" + "executionId" + "}", localVarApiClient.escapeString(executionId.toString()))
            .replace("{" + "workflowId" + "}", localVarApiClient.escapeString(workflowId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workflowsWorkflowIdExecutionsExecutionIdDeleteValidateBeforeCall(String executionId, String workflowId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'executionId' is set
        if (executionId == null) {
            throw new ApiException("Missing the required parameter 'executionId' when calling workflowsWorkflowIdExecutionsExecutionIdDelete(Async)");
        }

        // verify the required parameter 'workflowId' is set
        if (workflowId == null) {
            throw new ApiException("Missing the required parameter 'workflowId' when calling workflowsWorkflowIdExecutionsExecutionIdDelete(Async)");
        }

        return workflowsWorkflowIdExecutionsExecutionIdDeleteCall(executionId, workflowId, _callback);

    }

    /**
     * 
     * 
     * @param executionId  (required)
     * @param workflowId  (required)
     * @return WorkflowExecution
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public WorkflowExecution workflowsWorkflowIdExecutionsExecutionIdDelete(String executionId, String workflowId) throws ApiException {
        ApiResponse<WorkflowExecution> localVarResp = workflowsWorkflowIdExecutionsExecutionIdDeleteWithHttpInfo(executionId, workflowId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param executionId  (required)
     * @param workflowId  (required)
     * @return ApiResponse&lt;WorkflowExecution&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<WorkflowExecution> workflowsWorkflowIdExecutionsExecutionIdDeleteWithHttpInfo(String executionId, String workflowId) throws ApiException {
        okhttp3.Call localVarCall = workflowsWorkflowIdExecutionsExecutionIdDeleteValidateBeforeCall(executionId, workflowId, null);
        Type localVarReturnType = new TypeToken<WorkflowExecution>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param executionId  (required)
     * @param workflowId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call workflowsWorkflowIdExecutionsExecutionIdDeleteAsync(String executionId, String workflowId, final ApiCallback<WorkflowExecution> _callback) throws ApiException {

        okhttp3.Call localVarCall = workflowsWorkflowIdExecutionsExecutionIdDeleteValidateBeforeCall(executionId, workflowId, _callback);
        Type localVarReturnType = new TypeToken<WorkflowExecution>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workflowsWorkflowIdExecutionsExecutionIdGet
     * @param executionId  (required)
     * @param workflowId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call workflowsWorkflowIdExecutionsExecutionIdGetCall(String executionId, String workflowId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workflows/{workflowId}/executions/{executionId}"
            .replace("{" + "executionId" + "}", localVarApiClient.escapeString(executionId.toString()))
            .replace("{" + "workflowId" + "}", localVarApiClient.escapeString(workflowId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workflowsWorkflowIdExecutionsExecutionIdGetValidateBeforeCall(String executionId, String workflowId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'executionId' is set
        if (executionId == null) {
            throw new ApiException("Missing the required parameter 'executionId' when calling workflowsWorkflowIdExecutionsExecutionIdGet(Async)");
        }

        // verify the required parameter 'workflowId' is set
        if (workflowId == null) {
            throw new ApiException("Missing the required parameter 'workflowId' when calling workflowsWorkflowIdExecutionsExecutionIdGet(Async)");
        }

        return workflowsWorkflowIdExecutionsExecutionIdGetCall(executionId, workflowId, _callback);

    }

    /**
     * 
     * 
     * @param executionId  (required)
     * @param workflowId  (required)
     * @return WorkflowExecution
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public WorkflowExecution workflowsWorkflowIdExecutionsExecutionIdGet(String executionId, String workflowId) throws ApiException {
        ApiResponse<WorkflowExecution> localVarResp = workflowsWorkflowIdExecutionsExecutionIdGetWithHttpInfo(executionId, workflowId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param executionId  (required)
     * @param workflowId  (required)
     * @return ApiResponse&lt;WorkflowExecution&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<WorkflowExecution> workflowsWorkflowIdExecutionsExecutionIdGetWithHttpInfo(String executionId, String workflowId) throws ApiException {
        okhttp3.Call localVarCall = workflowsWorkflowIdExecutionsExecutionIdGetValidateBeforeCall(executionId, workflowId, null);
        Type localVarReturnType = new TypeToken<WorkflowExecution>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param executionId  (required)
     * @param workflowId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call workflowsWorkflowIdExecutionsExecutionIdGetAsync(String executionId, String workflowId, final ApiCallback<WorkflowExecution> _callback) throws ApiException {

        okhttp3.Call localVarCall = workflowsWorkflowIdExecutionsExecutionIdGetValidateBeforeCall(executionId, workflowId, _callback);
        Type localVarReturnType = new TypeToken<WorkflowExecution>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workflowsWorkflowIdExecutionsExecutionIdOptions
     * @param executionId  (required)
     * @param workflowId  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call workflowsWorkflowIdExecutionsExecutionIdOptionsCall(String executionId, String workflowId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/workflows/{workflowId}/executions/{executionId}"
            .replace("{" + "executionId" + "}", localVarApiClient.escapeString(executionId.toString()))
            .replace("{" + "workflowId" + "}", localVarApiClient.escapeString(workflowId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "OPTIONS", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workflowsWorkflowIdExecutionsExecutionIdOptionsValidateBeforeCall(String executionId, String workflowId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'executionId' is set
        if (executionId == null) {
            throw new ApiException("Missing the required parameter 'executionId' when calling workflowsWorkflowIdExecutionsExecutionIdOptions(Async)");
        }

        // verify the required parameter 'workflowId' is set
        if (workflowId == null) {
            throw new ApiException("Missing the required parameter 'workflowId' when calling workflowsWorkflowIdExecutionsExecutionIdOptions(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling workflowsWorkflowIdExecutionsExecutionIdOptions(Async)");
        }

        return workflowsWorkflowIdExecutionsExecutionIdOptionsCall(executionId, workflowId, body, _callback);

    }

    /**
     * 
     * 
     * @param executionId  (required)
     * @param workflowId  (required)
     * @param body  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Object workflowsWorkflowIdExecutionsExecutionIdOptions(String executionId, String workflowId, Object body) throws ApiException {
        ApiResponse<Object> localVarResp = workflowsWorkflowIdExecutionsExecutionIdOptionsWithHttpInfo(executionId, workflowId, body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param executionId  (required)
     * @param workflowId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Object> workflowsWorkflowIdExecutionsExecutionIdOptionsWithHttpInfo(String executionId, String workflowId, Object body) throws ApiException {
        okhttp3.Call localVarCall = workflowsWorkflowIdExecutionsExecutionIdOptionsValidateBeforeCall(executionId, workflowId, body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param executionId  (required)
     * @param workflowId  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call workflowsWorkflowIdExecutionsExecutionIdOptionsAsync(String executionId, String workflowId, Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = workflowsWorkflowIdExecutionsExecutionIdOptionsValidateBeforeCall(executionId, workflowId, body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workflowsWorkflowIdExecutionsExecutionIdPatch
     * @param contentType  (required)
     * @param executionId  (required)
     * @param workflowId  (required)
     * @param patchWorkflowExecutionId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call workflowsWorkflowIdExecutionsExecutionIdPatchCall(String contentType, String executionId, String workflowId, PatchWorkflowExecutionId patchWorkflowExecutionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchWorkflowExecutionId;

        // create path and map variables
        String localVarPath = "/workflows/{workflowId}/executions/{executionId}"
            .replace("{" + "executionId" + "}", localVarApiClient.escapeString(executionId.toString()))
            .replace("{" + "workflowId" + "}", localVarApiClient.escapeString(workflowId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workflowsWorkflowIdExecutionsExecutionIdPatchValidateBeforeCall(String contentType, String executionId, String workflowId, PatchWorkflowExecutionId patchWorkflowExecutionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling workflowsWorkflowIdExecutionsExecutionIdPatch(Async)");
        }

        // verify the required parameter 'executionId' is set
        if (executionId == null) {
            throw new ApiException("Missing the required parameter 'executionId' when calling workflowsWorkflowIdExecutionsExecutionIdPatch(Async)");
        }

        // verify the required parameter 'workflowId' is set
        if (workflowId == null) {
            throw new ApiException("Missing the required parameter 'workflowId' when calling workflowsWorkflowIdExecutionsExecutionIdPatch(Async)");
        }

        // verify the required parameter 'patchWorkflowExecutionId' is set
        if (patchWorkflowExecutionId == null) {
            throw new ApiException("Missing the required parameter 'patchWorkflowExecutionId' when calling workflowsWorkflowIdExecutionsExecutionIdPatch(Async)");
        }

        return workflowsWorkflowIdExecutionsExecutionIdPatchCall(contentType, executionId, workflowId, patchWorkflowExecutionId, _callback);

    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param executionId  (required)
     * @param workflowId  (required)
     * @param patchWorkflowExecutionId  (required)
     * @return WorkflowExecution
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public WorkflowExecution workflowsWorkflowIdExecutionsExecutionIdPatch(String contentType, String executionId, String workflowId, PatchWorkflowExecutionId patchWorkflowExecutionId) throws ApiException {
        ApiResponse<WorkflowExecution> localVarResp = workflowsWorkflowIdExecutionsExecutionIdPatchWithHttpInfo(contentType, executionId, workflowId, patchWorkflowExecutionId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param executionId  (required)
     * @param workflowId  (required)
     * @param patchWorkflowExecutionId  (required)
     * @return ApiResponse&lt;WorkflowExecution&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<WorkflowExecution> workflowsWorkflowIdExecutionsExecutionIdPatchWithHttpInfo(String contentType, String executionId, String workflowId, PatchWorkflowExecutionId patchWorkflowExecutionId) throws ApiException {
        okhttp3.Call localVarCall = workflowsWorkflowIdExecutionsExecutionIdPatchValidateBeforeCall(contentType, executionId, workflowId, patchWorkflowExecutionId, null);
        Type localVarReturnType = new TypeToken<WorkflowExecution>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentType  (required)
     * @param executionId  (required)
     * @param workflowId  (required)
     * @param patchWorkflowExecutionId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call workflowsWorkflowIdExecutionsExecutionIdPatchAsync(String contentType, String executionId, String workflowId, PatchWorkflowExecutionId patchWorkflowExecutionId, final ApiCallback<WorkflowExecution> _callback) throws ApiException {

        okhttp3.Call localVarCall = workflowsWorkflowIdExecutionsExecutionIdPatchValidateBeforeCall(contentType, executionId, workflowId, patchWorkflowExecutionId, _callback);
        Type localVarReturnType = new TypeToken<WorkflowExecution>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workflowsWorkflowIdExecutionsGet
     * @param workflowId  (required)
     * @param fromStartTime  (optional)
     * @param toStartTime  (optional)
     * @param nextToken  (optional)
     * @param order  (optional)
     * @param status  (optional)
     * @param maxResults  (optional)
     * @param sortBy  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call workflowsWorkflowIdExecutionsGetCall(String workflowId, String fromStartTime, String toStartTime, String nextToken, String order, String status, String maxResults, String sortBy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workflows/{workflowId}/executions"
            .replace("{" + "workflowId" + "}", localVarApiClient.escapeString(workflowId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fromStartTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromStartTime", fromStartTime));
        }

        if (toStartTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toStartTime", toStartTime));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workflowsWorkflowIdExecutionsGetValidateBeforeCall(String workflowId, String fromStartTime, String toStartTime, String nextToken, String order, String status, String maxResults, String sortBy, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workflowId' is set
        if (workflowId == null) {
            throw new ApiException("Missing the required parameter 'workflowId' when calling workflowsWorkflowIdExecutionsGet(Async)");
        }

        return workflowsWorkflowIdExecutionsGetCall(workflowId, fromStartTime, toStartTime, nextToken, order, status, maxResults, sortBy, _callback);

    }

    /**
     * 
     * 
     * @param workflowId  (required)
     * @param fromStartTime  (optional)
     * @param toStartTime  (optional)
     * @param nextToken  (optional)
     * @param order  (optional)
     * @param status  (optional)
     * @param maxResults  (optional)
     * @param sortBy  (optional)
     * @return WorkflowExecutions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public WorkflowExecutions workflowsWorkflowIdExecutionsGet(String workflowId, String fromStartTime, String toStartTime, String nextToken, String order, String status, String maxResults, String sortBy) throws ApiException {
        ApiResponse<WorkflowExecutions> localVarResp = workflowsWorkflowIdExecutionsGetWithHttpInfo(workflowId, fromStartTime, toStartTime, nextToken, order, status, maxResults, sortBy);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param workflowId  (required)
     * @param fromStartTime  (optional)
     * @param toStartTime  (optional)
     * @param nextToken  (optional)
     * @param order  (optional)
     * @param status  (optional)
     * @param maxResults  (optional)
     * @param sortBy  (optional)
     * @return ApiResponse&lt;WorkflowExecutions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<WorkflowExecutions> workflowsWorkflowIdExecutionsGetWithHttpInfo(String workflowId, String fromStartTime, String toStartTime, String nextToken, String order, String status, String maxResults, String sortBy) throws ApiException {
        okhttp3.Call localVarCall = workflowsWorkflowIdExecutionsGetValidateBeforeCall(workflowId, fromStartTime, toStartTime, nextToken, order, status, maxResults, sortBy, null);
        Type localVarReturnType = new TypeToken<WorkflowExecutions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param workflowId  (required)
     * @param fromStartTime  (optional)
     * @param toStartTime  (optional)
     * @param nextToken  (optional)
     * @param order  (optional)
     * @param status  (optional)
     * @param maxResults  (optional)
     * @param sortBy  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call workflowsWorkflowIdExecutionsGetAsync(String workflowId, String fromStartTime, String toStartTime, String nextToken, String order, String status, String maxResults, String sortBy, final ApiCallback<WorkflowExecutions> _callback) throws ApiException {

        okhttp3.Call localVarCall = workflowsWorkflowIdExecutionsGetValidateBeforeCall(workflowId, fromStartTime, toStartTime, nextToken, order, status, maxResults, sortBy, _callback);
        Type localVarReturnType = new TypeToken<WorkflowExecutions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workflowsWorkflowIdExecutionsOptions
     * @param workflowId  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call workflowsWorkflowIdExecutionsOptionsCall(String workflowId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/workflows/{workflowId}/executions"
            .replace("{" + "workflowId" + "}", localVarApiClient.escapeString(workflowId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "OPTIONS", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workflowsWorkflowIdExecutionsOptionsValidateBeforeCall(String workflowId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workflowId' is set
        if (workflowId == null) {
            throw new ApiException("Missing the required parameter 'workflowId' when calling workflowsWorkflowIdExecutionsOptions(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling workflowsWorkflowIdExecutionsOptions(Async)");
        }

        return workflowsWorkflowIdExecutionsOptionsCall(workflowId, body, _callback);

    }

    /**
     * 
     * 
     * @param workflowId  (required)
     * @param body  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Object workflowsWorkflowIdExecutionsOptions(String workflowId, Object body) throws ApiException {
        ApiResponse<Object> localVarResp = workflowsWorkflowIdExecutionsOptionsWithHttpInfo(workflowId, body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param workflowId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Object> workflowsWorkflowIdExecutionsOptionsWithHttpInfo(String workflowId, Object body) throws ApiException {
        okhttp3.Call localVarCall = workflowsWorkflowIdExecutionsOptionsValidateBeforeCall(workflowId, body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param workflowId  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call workflowsWorkflowIdExecutionsOptionsAsync(String workflowId, Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = workflowsWorkflowIdExecutionsOptionsValidateBeforeCall(workflowId, body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workflowsWorkflowIdExecutionsPost
     * @param contentType  (required)
     * @param workflowId  (required)
     * @param postWorkflowExecutions  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call workflowsWorkflowIdExecutionsPostCall(String contentType, String workflowId, PostWorkflowExecutions postWorkflowExecutions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postWorkflowExecutions;

        // create path and map variables
        String localVarPath = "/workflows/{workflowId}/executions"
            .replace("{" + "workflowId" + "}", localVarApiClient.escapeString(workflowId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workflowsWorkflowIdExecutionsPostValidateBeforeCall(String contentType, String workflowId, PostWorkflowExecutions postWorkflowExecutions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling workflowsWorkflowIdExecutionsPost(Async)");
        }

        // verify the required parameter 'workflowId' is set
        if (workflowId == null) {
            throw new ApiException("Missing the required parameter 'workflowId' when calling workflowsWorkflowIdExecutionsPost(Async)");
        }

        // verify the required parameter 'postWorkflowExecutions' is set
        if (postWorkflowExecutions == null) {
            throw new ApiException("Missing the required parameter 'postWorkflowExecutions' when calling workflowsWorkflowIdExecutionsPost(Async)");
        }

        return workflowsWorkflowIdExecutionsPostCall(contentType, workflowId, postWorkflowExecutions, _callback);

    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param workflowId  (required)
     * @param postWorkflowExecutions  (required)
     * @return WorkflowExecution
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public WorkflowExecution workflowsWorkflowIdExecutionsPost(String contentType, String workflowId, PostWorkflowExecutions postWorkflowExecutions) throws ApiException {
        ApiResponse<WorkflowExecution> localVarResp = workflowsWorkflowIdExecutionsPostWithHttpInfo(contentType, workflowId, postWorkflowExecutions);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param workflowId  (required)
     * @param postWorkflowExecutions  (required)
     * @return ApiResponse&lt;WorkflowExecution&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<WorkflowExecution> workflowsWorkflowIdExecutionsPostWithHttpInfo(String contentType, String workflowId, PostWorkflowExecutions postWorkflowExecutions) throws ApiException {
        okhttp3.Call localVarCall = workflowsWorkflowIdExecutionsPostValidateBeforeCall(contentType, workflowId, postWorkflowExecutions, null);
        Type localVarReturnType = new TypeToken<WorkflowExecution>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentType  (required)
     * @param workflowId  (required)
     * @param postWorkflowExecutions  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call workflowsWorkflowIdExecutionsPostAsync(String contentType, String workflowId, PostWorkflowExecutions postWorkflowExecutions, final ApiCallback<WorkflowExecution> _callback) throws ApiException {

        okhttp3.Call localVarCall = workflowsWorkflowIdExecutionsPostValidateBeforeCall(contentType, workflowId, postWorkflowExecutions, _callback);
        Type localVarReturnType = new TypeToken<WorkflowExecution>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workflowsWorkflowIdGet
     * @param workflowId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call workflowsWorkflowIdGetCall(String workflowId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workflows/{workflowId}"
            .replace("{" + "workflowId" + "}", localVarApiClient.escapeString(workflowId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workflowsWorkflowIdGetValidateBeforeCall(String workflowId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workflowId' is set
        if (workflowId == null) {
            throw new ApiException("Missing the required parameter 'workflowId' when calling workflowsWorkflowIdGet(Async)");
        }

        return workflowsWorkflowIdGetCall(workflowId, _callback);

    }

    /**
     * 
     * 
     * @param workflowId  (required)
     * @return Workflow
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Workflow workflowsWorkflowIdGet(String workflowId) throws ApiException {
        ApiResponse<Workflow> localVarResp = workflowsWorkflowIdGetWithHttpInfo(workflowId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param workflowId  (required)
     * @return ApiResponse&lt;Workflow&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Workflow> workflowsWorkflowIdGetWithHttpInfo(String workflowId) throws ApiException {
        okhttp3.Call localVarCall = workflowsWorkflowIdGetValidateBeforeCall(workflowId, null);
        Type localVarReturnType = new TypeToken<Workflow>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param workflowId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call workflowsWorkflowIdGetAsync(String workflowId, final ApiCallback<Workflow> _callback) throws ApiException {

        okhttp3.Call localVarCall = workflowsWorkflowIdGetValidateBeforeCall(workflowId, _callback);
        Type localVarReturnType = new TypeToken<Workflow>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workflowsWorkflowIdOptions
     * @param workflowId  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call workflowsWorkflowIdOptionsCall(String workflowId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/workflows/{workflowId}"
            .replace("{" + "workflowId" + "}", localVarApiClient.escapeString(workflowId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "OPTIONS", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workflowsWorkflowIdOptionsValidateBeforeCall(String workflowId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workflowId' is set
        if (workflowId == null) {
            throw new ApiException("Missing the required parameter 'workflowId' when calling workflowsWorkflowIdOptions(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling workflowsWorkflowIdOptions(Async)");
        }

        return workflowsWorkflowIdOptionsCall(workflowId, body, _callback);

    }

    /**
     * 
     * 
     * @param workflowId  (required)
     * @param body  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Object workflowsWorkflowIdOptions(String workflowId, Object body) throws ApiException {
        ApiResponse<Object> localVarResp = workflowsWorkflowIdOptionsWithHttpInfo(workflowId, body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param workflowId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Object> workflowsWorkflowIdOptionsWithHttpInfo(String workflowId, Object body) throws ApiException {
        okhttp3.Call localVarCall = workflowsWorkflowIdOptionsValidateBeforeCall(workflowId, body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param workflowId  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call workflowsWorkflowIdOptionsAsync(String workflowId, Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = workflowsWorkflowIdOptionsValidateBeforeCall(workflowId, body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workflowsWorkflowIdPatch
     * @param contentType  (required)
     * @param workflowId  (required)
     * @param patchWorkflowId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call workflowsWorkflowIdPatchCall(String contentType, String workflowId, PatchWorkflowId patchWorkflowId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchWorkflowId;

        // create path and map variables
        String localVarPath = "/workflows/{workflowId}"
            .replace("{" + "workflowId" + "}", localVarApiClient.escapeString(workflowId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workflowsWorkflowIdPatchValidateBeforeCall(String contentType, String workflowId, PatchWorkflowId patchWorkflowId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling workflowsWorkflowIdPatch(Async)");
        }

        // verify the required parameter 'workflowId' is set
        if (workflowId == null) {
            throw new ApiException("Missing the required parameter 'workflowId' when calling workflowsWorkflowIdPatch(Async)");
        }

        // verify the required parameter 'patchWorkflowId' is set
        if (patchWorkflowId == null) {
            throw new ApiException("Missing the required parameter 'patchWorkflowId' when calling workflowsWorkflowIdPatch(Async)");
        }

        return workflowsWorkflowIdPatchCall(contentType, workflowId, patchWorkflowId, _callback);

    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param workflowId  (required)
     * @param patchWorkflowId  (required)
     * @return Workflow
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public Workflow workflowsWorkflowIdPatch(String contentType, String workflowId, PatchWorkflowId patchWorkflowId) throws ApiException {
        ApiResponse<Workflow> localVarResp = workflowsWorkflowIdPatchWithHttpInfo(contentType, workflowId, patchWorkflowId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param workflowId  (required)
     * @param patchWorkflowId  (required)
     * @return ApiResponse&lt;Workflow&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Workflow> workflowsWorkflowIdPatchWithHttpInfo(String contentType, String workflowId, PatchWorkflowId patchWorkflowId) throws ApiException {
        okhttp3.Call localVarCall = workflowsWorkflowIdPatchValidateBeforeCall(contentType, workflowId, patchWorkflowId, null);
        Type localVarReturnType = new TypeToken<Workflow>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentType  (required)
     * @param workflowId  (required)
     * @param patchWorkflowId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 404 </td><td> 404 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 415 </td><td> 415 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call workflowsWorkflowIdPatchAsync(String contentType, String workflowId, PatchWorkflowId patchWorkflowId, final ApiCallback<Workflow> _callback) throws ApiException {

        okhttp3.Call localVarCall = workflowsWorkflowIdPatchValidateBeforeCall(contentType, workflowId, patchWorkflowId, _callback);
        Type localVarReturnType = new TypeToken<Workflow>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
