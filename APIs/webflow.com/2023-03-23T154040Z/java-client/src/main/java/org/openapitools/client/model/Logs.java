/*
 * Lucidtech API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-03-23T15:40:40Z
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LogsLogsInner;
import org.openapitools.client.model.LogsTransitionId;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Logs
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:04.127247-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Logs {
  public static final String SERIALIZED_NAME_LOGS = "logs";
  @SerializedName(SERIALIZED_NAME_LOGS)
  private List<LogsLogsInner> logs = new ArrayList<>();

  public static final String SERIALIZED_NAME_NEXT_TOKEN = "nextToken";
  @SerializedName(SERIALIZED_NAME_NEXT_TOKEN)
  private String nextToken;

  /**
   * Gets or Sets order
   */
  @JsonAdapter(OrderEnum.Adapter.class)
  public enum OrderEnum {
    ASCENDING("ascending"),
    
    DESCENDING("descending");

    private String value;

    OrderEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OrderEnum fromValue(String value) {
      for (OrderEnum b : OrderEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OrderEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OrderEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OrderEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OrderEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OrderEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ORDER = "order";
  @SerializedName(SERIALIZED_NAME_ORDER)
  private OrderEnum order;

  public static final String SERIALIZED_NAME_TRANSITION_EXECUTION_ID = "transitionExecutionId";
  @SerializedName(SERIALIZED_NAME_TRANSITION_EXECUTION_ID)
  private String transitionExecutionId;

  public static final String SERIALIZED_NAME_TRANSITION_ID = "transitionId";
  @SerializedName(SERIALIZED_NAME_TRANSITION_ID)
  private LogsTransitionId transitionId;

  public static final String SERIALIZED_NAME_WORKFLOW_EXECUTION_ID = "workflowExecutionId";
  @SerializedName(SERIALIZED_NAME_WORKFLOW_EXECUTION_ID)
  private String workflowExecutionId;

  public static final String SERIALIZED_NAME_WORKFLOW_ID = "workflowId";
  @SerializedName(SERIALIZED_NAME_WORKFLOW_ID)
  private String workflowId;

  public Logs() {
  }

  public Logs logs(List<LogsLogsInner> logs) {
    this.logs = logs;
    return this;
  }

  public Logs addLogsItem(LogsLogsInner logsItem) {
    if (this.logs == null) {
      this.logs = new ArrayList<>();
    }
    this.logs.add(logsItem);
    return this;
  }

  /**
   * Get logs
   * @return logs
   */
  @javax.annotation.Nonnull
  public List<LogsLogsInner> getLogs() {
    return logs;
  }

  public void setLogs(List<LogsLogsInner> logs) {
    this.logs = logs;
  }


  public Logs nextToken(String nextToken) {
    this.nextToken = nextToken;
    return this;
  }

  /**
   * Get nextToken
   * @return nextToken
   */
  @javax.annotation.Nullable
  public String getNextToken() {
    return nextToken;
  }

  public void setNextToken(String nextToken) {
    this.nextToken = nextToken;
  }


  public Logs order(OrderEnum order) {
    this.order = order;
    return this;
  }

  /**
   * Get order
   * @return order
   */
  @javax.annotation.Nullable
  public OrderEnum getOrder() {
    return order;
  }

  public void setOrder(OrderEnum order) {
    this.order = order;
  }


  public Logs transitionExecutionId(String transitionExecutionId) {
    this.transitionExecutionId = transitionExecutionId;
    return this;
  }

  /**
   * Get transitionExecutionId
   * @return transitionExecutionId
   */
  @javax.annotation.Nullable
  public String getTransitionExecutionId() {
    return transitionExecutionId;
  }

  public void setTransitionExecutionId(String transitionExecutionId) {
    this.transitionExecutionId = transitionExecutionId;
  }


  public Logs transitionId(LogsTransitionId transitionId) {
    this.transitionId = transitionId;
    return this;
  }

  /**
   * Get transitionId
   * @return transitionId
   */
  @javax.annotation.Nullable
  public LogsTransitionId getTransitionId() {
    return transitionId;
  }

  public void setTransitionId(LogsTransitionId transitionId) {
    this.transitionId = transitionId;
  }


  public Logs workflowExecutionId(String workflowExecutionId) {
    this.workflowExecutionId = workflowExecutionId;
    return this;
  }

  /**
   * Get workflowExecutionId
   * @return workflowExecutionId
   */
  @javax.annotation.Nullable
  public String getWorkflowExecutionId() {
    return workflowExecutionId;
  }

  public void setWorkflowExecutionId(String workflowExecutionId) {
    this.workflowExecutionId = workflowExecutionId;
  }


  public Logs workflowId(String workflowId) {
    this.workflowId = workflowId;
    return this;
  }

  /**
   * Get workflowId
   * @return workflowId
   */
  @javax.annotation.Nullable
  public String getWorkflowId() {
    return workflowId;
  }

  public void setWorkflowId(String workflowId) {
    this.workflowId = workflowId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Logs logs = (Logs) o;
    return Objects.equals(this.logs, logs.logs) &&
        Objects.equals(this.nextToken, logs.nextToken) &&
        Objects.equals(this.order, logs.order) &&
        Objects.equals(this.transitionExecutionId, logs.transitionExecutionId) &&
        Objects.equals(this.transitionId, logs.transitionId) &&
        Objects.equals(this.workflowExecutionId, logs.workflowExecutionId) &&
        Objects.equals(this.workflowId, logs.workflowId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(logs, nextToken, order, transitionExecutionId, transitionId, workflowExecutionId, workflowId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Logs {\n");
    sb.append("    logs: ").append(toIndentedString(logs)).append("\n");
    sb.append("    nextToken: ").append(toIndentedString(nextToken)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("    transitionExecutionId: ").append(toIndentedString(transitionExecutionId)).append("\n");
    sb.append("    transitionId: ").append(toIndentedString(transitionId)).append("\n");
    sb.append("    workflowExecutionId: ").append(toIndentedString(workflowExecutionId)).append("\n");
    sb.append("    workflowId: ").append(toIndentedString(workflowId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("logs");
    openapiFields.add("nextToken");
    openapiFields.add("order");
    openapiFields.add("transitionExecutionId");
    openapiFields.add("transitionId");
    openapiFields.add("workflowExecutionId");
    openapiFields.add("workflowId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("logs");
    openapiRequiredFields.add("nextToken");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Logs
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Logs.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Logs is not found in the empty JSON string", Logs.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Logs.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Logs` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Logs.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("logs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `logs` to be an array in the JSON string but got `%s`", jsonObj.get("logs").toString()));
      }

      JsonArray jsonArraylogs = jsonObj.getAsJsonArray("logs");
      // validate the required field `logs` (array)
      for (int i = 0; i < jsonArraylogs.size(); i++) {
        LogsLogsInner.validateJsonElement(jsonArraylogs.get(i));
      };
      if ((jsonObj.get("nextToken") != null && !jsonObj.get("nextToken").isJsonNull()) && !jsonObj.get("nextToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nextToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nextToken").toString()));
      }
      if ((jsonObj.get("order") != null && !jsonObj.get("order").isJsonNull()) && !jsonObj.get("order").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `order` to be a primitive type in the JSON string but got `%s`", jsonObj.get("order").toString()));
      }
      // validate the optional field `order`
      if (jsonObj.get("order") != null && !jsonObj.get("order").isJsonNull()) {
        OrderEnum.validateJsonElement(jsonObj.get("order"));
      }
      if ((jsonObj.get("transitionExecutionId") != null && !jsonObj.get("transitionExecutionId").isJsonNull()) && !jsonObj.get("transitionExecutionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transitionExecutionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transitionExecutionId").toString()));
      }
      // validate the optional field `transitionId`
      if (jsonObj.get("transitionId") != null && !jsonObj.get("transitionId").isJsonNull()) {
        LogsTransitionId.validateJsonElement(jsonObj.get("transitionId"));
      }
      if ((jsonObj.get("workflowExecutionId") != null && !jsonObj.get("workflowExecutionId").isJsonNull()) && !jsonObj.get("workflowExecutionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workflowExecutionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workflowExecutionId").toString()));
      }
      if ((jsonObj.get("workflowId") != null && !jsonObj.get("workflowId").isJsonNull()) && !jsonObj.get("workflowId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workflowId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workflowId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Logs.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Logs' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Logs> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Logs.class));

       return (TypeAdapter<T>) new TypeAdapter<Logs>() {
           @Override
           public void write(JsonWriter out, Logs value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Logs read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Logs given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Logs
   * @throws IOException if the JSON string is invalid with respect to Logs
   */
  public static Logs fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Logs.class);
  }

  /**
   * Convert an instance of Logs to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

