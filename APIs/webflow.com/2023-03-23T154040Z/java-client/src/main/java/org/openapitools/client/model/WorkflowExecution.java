/*
 * Lucidtech API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-03-23T15:40:40Z
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.WorkflowExecutionCompletedByInner;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * WorkflowExecution
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:04.127247-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WorkflowExecution {
  public static final String SERIALIZED_NAME_COMPLETED_BY = "completedBy";
  @SerializedName(SERIALIZED_NAME_COMPLETED_BY)
  private List<WorkflowExecutionCompletedByInner> completedBy = new ArrayList<>();

  public static final String SERIALIZED_NAME_COMPLETED_TASK_LOG_ID = "completedTaskLogId";
  @SerializedName(SERIALIZED_NAME_COMPLETED_TASK_LOG_ID)
  private String completedTaskLogId;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private String endTime;

  public static final String SERIALIZED_NAME_EVENTS = "events";
  @SerializedName(SERIALIZED_NAME_EVENTS)
  private List<Object> events = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXECUTION_ID = "executionId";
  @SerializedName(SERIALIZED_NAME_EXECUTION_ID)
  private String executionId;

  public static final String SERIALIZED_NAME_INPUT = "input";
  @SerializedName(SERIALIZED_NAME_INPUT)
  private Object input;

  public static final String SERIALIZED_NAME_LOG_ID = "logId";
  @SerializedName(SERIALIZED_NAME_LOG_ID)
  private String logId;

  public static final String SERIALIZED_NAME_OUTPUT = "output";
  @SerializedName(SERIALIZED_NAME_OUTPUT)
  private Object output;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private String startTime;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    RUNNING("running"),
    
    SUCCEEDED("succeeded"),
    
    FAILED("failed"),
    
    REJECTED("rejected"),
    
    RETRY("retry"),
    
    ERROR("error");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_TRANSITION_EXECUTIONS = "transitionExecutions";
  @SerializedName(SERIALIZED_NAME_TRANSITION_EXECUTIONS)
  private Object transitionExecutions;

  public static final String SERIALIZED_NAME_WORKFLOW_ID = "workflowId";
  @SerializedName(SERIALIZED_NAME_WORKFLOW_ID)
  private String workflowId;

  public WorkflowExecution() {
  }

  public WorkflowExecution completedBy(List<WorkflowExecutionCompletedByInner> completedBy) {
    this.completedBy = completedBy;
    return this;
  }

  public WorkflowExecution addCompletedByItem(WorkflowExecutionCompletedByInner completedByItem) {
    if (this.completedBy == null) {
      this.completedBy = new ArrayList<>();
    }
    this.completedBy.add(completedByItem);
    return this;
  }

  /**
   * Get completedBy
   * @return completedBy
   */
  @javax.annotation.Nullable
  public List<WorkflowExecutionCompletedByInner> getCompletedBy() {
    return completedBy;
  }

  public void setCompletedBy(List<WorkflowExecutionCompletedByInner> completedBy) {
    this.completedBy = completedBy;
  }


  public WorkflowExecution completedTaskLogId(String completedTaskLogId) {
    this.completedTaskLogId = completedTaskLogId;
    return this;
  }

  /**
   * Get completedTaskLogId
   * @return completedTaskLogId
   */
  @javax.annotation.Nullable
  public String getCompletedTaskLogId() {
    return completedTaskLogId;
  }

  public void setCompletedTaskLogId(String completedTaskLogId) {
    this.completedTaskLogId = completedTaskLogId;
  }


  public WorkflowExecution endTime(String endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * Get endTime
   * @return endTime
   */
  @javax.annotation.Nullable
  public String getEndTime() {
    return endTime;
  }

  public void setEndTime(String endTime) {
    this.endTime = endTime;
  }


  public WorkflowExecution events(List<Object> events) {
    this.events = events;
    return this;
  }

  public WorkflowExecution addEventsItem(Object eventsItem) {
    if (this.events == null) {
      this.events = new ArrayList<>();
    }
    this.events.add(eventsItem);
    return this;
  }

  /**
   * Get events
   * @return events
   */
  @javax.annotation.Nullable
  public List<Object> getEvents() {
    return events;
  }

  public void setEvents(List<Object> events) {
    this.events = events;
  }


  public WorkflowExecution executionId(String executionId) {
    this.executionId = executionId;
    return this;
  }

  /**
   * Get executionId
   * @return executionId
   */
  @javax.annotation.Nonnull
  public String getExecutionId() {
    return executionId;
  }

  public void setExecutionId(String executionId) {
    this.executionId = executionId;
  }


  public WorkflowExecution input(Object input) {
    this.input = input;
    return this;
  }

  /**
   * Get input
   * @return input
   */
  @javax.annotation.Nullable
  public Object getInput() {
    return input;
  }

  public void setInput(Object input) {
    this.input = input;
  }


  public WorkflowExecution logId(String logId) {
    this.logId = logId;
    return this;
  }

  /**
   * Get logId
   * @return logId
   */
  @javax.annotation.Nullable
  public String getLogId() {
    return logId;
  }

  public void setLogId(String logId) {
    this.logId = logId;
  }


  public WorkflowExecution output(Object output) {
    this.output = output;
    return this;
  }

  /**
   * Get output
   * @return output
   */
  @javax.annotation.Nullable
  public Object getOutput() {
    return output;
  }

  public void setOutput(Object output) {
    this.output = output;
  }


  public WorkflowExecution startTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Get startTime
   * @return startTime
   */
  @javax.annotation.Nullable
  public String getStartTime() {
    return startTime;
  }

  public void setStartTime(String startTime) {
    this.startTime = startTime;
  }


  public WorkflowExecution status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public WorkflowExecution transitionExecutions(Object transitionExecutions) {
    this.transitionExecutions = transitionExecutions;
    return this;
  }

  /**
   * Get transitionExecutions
   * @return transitionExecutions
   */
  @javax.annotation.Nullable
  public Object getTransitionExecutions() {
    return transitionExecutions;
  }

  public void setTransitionExecutions(Object transitionExecutions) {
    this.transitionExecutions = transitionExecutions;
  }


  public WorkflowExecution workflowId(String workflowId) {
    this.workflowId = workflowId;
    return this;
  }

  /**
   * Get workflowId
   * @return workflowId
   */
  @javax.annotation.Nonnull
  public String getWorkflowId() {
    return workflowId;
  }

  public void setWorkflowId(String workflowId) {
    this.workflowId = workflowId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkflowExecution workflowExecution = (WorkflowExecution) o;
    return Objects.equals(this.completedBy, workflowExecution.completedBy) &&
        Objects.equals(this.completedTaskLogId, workflowExecution.completedTaskLogId) &&
        Objects.equals(this.endTime, workflowExecution.endTime) &&
        Objects.equals(this.events, workflowExecution.events) &&
        Objects.equals(this.executionId, workflowExecution.executionId) &&
        Objects.equals(this.input, workflowExecution.input) &&
        Objects.equals(this.logId, workflowExecution.logId) &&
        Objects.equals(this.output, workflowExecution.output) &&
        Objects.equals(this.startTime, workflowExecution.startTime) &&
        Objects.equals(this.status, workflowExecution.status) &&
        Objects.equals(this.transitionExecutions, workflowExecution.transitionExecutions) &&
        Objects.equals(this.workflowId, workflowExecution.workflowId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(completedBy, completedTaskLogId, endTime, events, executionId, input, logId, output, startTime, status, transitionExecutions, workflowId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkflowExecution {\n");
    sb.append("    completedBy: ").append(toIndentedString(completedBy)).append("\n");
    sb.append("    completedTaskLogId: ").append(toIndentedString(completedTaskLogId)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    events: ").append(toIndentedString(events)).append("\n");
    sb.append("    executionId: ").append(toIndentedString(executionId)).append("\n");
    sb.append("    input: ").append(toIndentedString(input)).append("\n");
    sb.append("    logId: ").append(toIndentedString(logId)).append("\n");
    sb.append("    output: ").append(toIndentedString(output)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    transitionExecutions: ").append(toIndentedString(transitionExecutions)).append("\n");
    sb.append("    workflowId: ").append(toIndentedString(workflowId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("completedBy");
    openapiFields.add("completedTaskLogId");
    openapiFields.add("endTime");
    openapiFields.add("events");
    openapiFields.add("executionId");
    openapiFields.add("input");
    openapiFields.add("logId");
    openapiFields.add("output");
    openapiFields.add("startTime");
    openapiFields.add("status");
    openapiFields.add("transitionExecutions");
    openapiFields.add("workflowId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("endTime");
    openapiRequiredFields.add("executionId");
    openapiRequiredFields.add("input");
    openapiRequiredFields.add("output");
    openapiRequiredFields.add("startTime");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("transitionExecutions");
    openapiRequiredFields.add("workflowId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WorkflowExecution
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WorkflowExecution.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WorkflowExecution is not found in the empty JSON string", WorkflowExecution.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WorkflowExecution.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WorkflowExecution` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WorkflowExecution.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("completedBy") != null && !jsonObj.get("completedBy").isJsonNull()) {
        JsonArray jsonArraycompletedBy = jsonObj.getAsJsonArray("completedBy");
        if (jsonArraycompletedBy != null) {
          // ensure the json data is an array
          if (!jsonObj.get("completedBy").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `completedBy` to be an array in the JSON string but got `%s`", jsonObj.get("completedBy").toString()));
          }

          // validate the optional field `completedBy` (array)
          for (int i = 0; i < jsonArraycompletedBy.size(); i++) {
            WorkflowExecutionCompletedByInner.validateJsonElement(jsonArraycompletedBy.get(i));
          };
        }
      }
      if ((jsonObj.get("completedTaskLogId") != null && !jsonObj.get("completedTaskLogId").isJsonNull()) && !jsonObj.get("completedTaskLogId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `completedTaskLogId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("completedTaskLogId").toString()));
      }
      if ((jsonObj.get("endTime") != null && !jsonObj.get("endTime").isJsonNull()) && !jsonObj.get("endTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endTime").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("events") != null && !jsonObj.get("events").isJsonNull() && !jsonObj.get("events").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `events` to be an array in the JSON string but got `%s`", jsonObj.get("events").toString()));
      }
      if (!jsonObj.get("executionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `executionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("executionId").toString()));
      }
      if ((jsonObj.get("logId") != null && !jsonObj.get("logId").isJsonNull()) && !jsonObj.get("logId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logId").toString()));
      }
      if ((jsonObj.get("startTime") != null && !jsonObj.get("startTime").isJsonNull()) && !jsonObj.get("startTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startTime").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the required field `status`
      StatusEnum.validateJsonElement(jsonObj.get("status"));
      if (!jsonObj.get("workflowId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workflowId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workflowId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WorkflowExecution.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WorkflowExecution' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WorkflowExecution> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WorkflowExecution.class));

       return (TypeAdapter<T>) new TypeAdapter<WorkflowExecution>() {
           @Override
           public void write(JsonWriter out, WorkflowExecution value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WorkflowExecution read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WorkflowExecution given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WorkflowExecution
   * @throws IOException if the JSON string is invalid with respect to WorkflowExecution
   */
  public static WorkflowExecution fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WorkflowExecution.class);
  }

  /**
   * Convert an instance of WorkflowExecution to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

