/*
 * Lucidtech API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-03-23T15:40:40Z
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.LogsTransitionId;
import org.openapitools.client.model.PatchTransitionIdAssets;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TransitionsTransitionsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:04.127247-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TransitionsTransitionsInner {
  public static final String SERIALIZED_NAME_ASSETS = "assets";
  @SerializedName(SERIALIZED_NAME_ASSETS)
  private PatchTransitionIdAssets assets;

  public static final String SERIALIZED_NAME_CREATED_BY = "createdBy";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private String createdBy;

  public static final String SERIALIZED_NAME_CREATED_TIME = "createdTime";
  @SerializedName(SERIALIZED_NAME_CREATED_TIME)
  private String createdTime;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_INPUT_JSON_SCHEMA = "inputJsonSchema";
  @SerializedName(SERIALIZED_NAME_INPUT_JSON_SCHEMA)
  private Object inputJsonSchema;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OUTPUT_JSON_SCHEMA = "outputJsonSchema";
  @SerializedName(SERIALIZED_NAME_OUTPUT_JSON_SCHEMA)
  private Object outputJsonSchema;

  public static final String SERIALIZED_NAME_PARAMETERS = "parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private Object parameters;

  public static final String SERIALIZED_NAME_TIMEOUT_IN_SECONDS = "timeoutInSeconds";
  @SerializedName(SERIALIZED_NAME_TIMEOUT_IN_SECONDS)
  private Integer timeoutInSeconds;

  public static final String SERIALIZED_NAME_TRANSITION_ID = "transitionId";
  @SerializedName(SERIALIZED_NAME_TRANSITION_ID)
  private LogsTransitionId transitionId;

  /**
   * Gets or Sets transitionType
   */
  @JsonAdapter(TransitionTypeEnum.Adapter.class)
  public enum TransitionTypeEnum {
    DOCKER("docker"),
    
    MANUAL("manual");

    private String value;

    TransitionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TransitionTypeEnum fromValue(String value) {
      for (TransitionTypeEnum b : TransitionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TransitionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TransitionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TransitionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TransitionTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TransitionTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TRANSITION_TYPE = "transitionType";
  @SerializedName(SERIALIZED_NAME_TRANSITION_TYPE)
  private TransitionTypeEnum transitionType;

  public static final String SERIALIZED_NAME_UPDATED_BY = "updatedBy";
  @SerializedName(SERIALIZED_NAME_UPDATED_BY)
  private String updatedBy;

  public static final String SERIALIZED_NAME_UPDATED_TIME = "updatedTime";
  @SerializedName(SERIALIZED_NAME_UPDATED_TIME)
  private String updatedTime;

  public TransitionsTransitionsInner() {
  }

  public TransitionsTransitionsInner assets(PatchTransitionIdAssets assets) {
    this.assets = assets;
    return this;
  }

  /**
   * Get assets
   * @return assets
   */
  @javax.annotation.Nullable
  public PatchTransitionIdAssets getAssets() {
    return assets;
  }

  public void setAssets(PatchTransitionIdAssets assets) {
    this.assets = assets;
  }


  public TransitionsTransitionsInner createdBy(String createdBy) {
    this.createdBy = createdBy;
    return this;
  }

  /**
   * Get createdBy
   * @return createdBy
   */
  @javax.annotation.Nullable
  public String getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(String createdBy) {
    this.createdBy = createdBy;
  }


  public TransitionsTransitionsInner createdTime(String createdTime) {
    this.createdTime = createdTime;
    return this;
  }

  /**
   * Get createdTime
   * @return createdTime
   */
  @javax.annotation.Nullable
  public String getCreatedTime() {
    return createdTime;
  }

  public void setCreatedTime(String createdTime) {
    this.createdTime = createdTime;
  }


  public TransitionsTransitionsInner description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public TransitionsTransitionsInner inputJsonSchema(Object inputJsonSchema) {
    this.inputJsonSchema = inputJsonSchema;
    return this;
  }

  /**
   * Get inputJsonSchema
   * @return inputJsonSchema
   */
  @javax.annotation.Nullable
  public Object getInputJsonSchema() {
    return inputJsonSchema;
  }

  public void setInputJsonSchema(Object inputJsonSchema) {
    this.inputJsonSchema = inputJsonSchema;
  }


  public TransitionsTransitionsInner name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public TransitionsTransitionsInner outputJsonSchema(Object outputJsonSchema) {
    this.outputJsonSchema = outputJsonSchema;
    return this;
  }

  /**
   * Get outputJsonSchema
   * @return outputJsonSchema
   */
  @javax.annotation.Nullable
  public Object getOutputJsonSchema() {
    return outputJsonSchema;
  }

  public void setOutputJsonSchema(Object outputJsonSchema) {
    this.outputJsonSchema = outputJsonSchema;
  }


  public TransitionsTransitionsInner parameters(Object parameters) {
    this.parameters = parameters;
    return this;
  }

  /**
   * Get parameters
   * @return parameters
   */
  @javax.annotation.Nonnull
  public Object getParameters() {
    return parameters;
  }

  public void setParameters(Object parameters) {
    this.parameters = parameters;
  }


  public TransitionsTransitionsInner timeoutInSeconds(Integer timeoutInSeconds) {
    this.timeoutInSeconds = timeoutInSeconds;
    return this;
  }

  /**
   * Get timeoutInSeconds
   * minimum: 60
   * maximum: 1800
   * @return timeoutInSeconds
   */
  @javax.annotation.Nonnull
  public Integer getTimeoutInSeconds() {
    return timeoutInSeconds;
  }

  public void setTimeoutInSeconds(Integer timeoutInSeconds) {
    this.timeoutInSeconds = timeoutInSeconds;
  }


  public TransitionsTransitionsInner transitionId(LogsTransitionId transitionId) {
    this.transitionId = transitionId;
    return this;
  }

  /**
   * Get transitionId
   * @return transitionId
   */
  @javax.annotation.Nonnull
  public LogsTransitionId getTransitionId() {
    return transitionId;
  }

  public void setTransitionId(LogsTransitionId transitionId) {
    this.transitionId = transitionId;
  }


  public TransitionsTransitionsInner transitionType(TransitionTypeEnum transitionType) {
    this.transitionType = transitionType;
    return this;
  }

  /**
   * Get transitionType
   * @return transitionType
   */
  @javax.annotation.Nonnull
  public TransitionTypeEnum getTransitionType() {
    return transitionType;
  }

  public void setTransitionType(TransitionTypeEnum transitionType) {
    this.transitionType = transitionType;
  }


  public TransitionsTransitionsInner updatedBy(String updatedBy) {
    this.updatedBy = updatedBy;
    return this;
  }

  /**
   * Get updatedBy
   * @return updatedBy
   */
  @javax.annotation.Nullable
  public String getUpdatedBy() {
    return updatedBy;
  }

  public void setUpdatedBy(String updatedBy) {
    this.updatedBy = updatedBy;
  }


  public TransitionsTransitionsInner updatedTime(String updatedTime) {
    this.updatedTime = updatedTime;
    return this;
  }

  /**
   * Get updatedTime
   * @return updatedTime
   */
  @javax.annotation.Nullable
  public String getUpdatedTime() {
    return updatedTime;
  }

  public void setUpdatedTime(String updatedTime) {
    this.updatedTime = updatedTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransitionsTransitionsInner transitionsTransitionsInner = (TransitionsTransitionsInner) o;
    return Objects.equals(this.assets, transitionsTransitionsInner.assets) &&
        Objects.equals(this.createdBy, transitionsTransitionsInner.createdBy) &&
        Objects.equals(this.createdTime, transitionsTransitionsInner.createdTime) &&
        Objects.equals(this.description, transitionsTransitionsInner.description) &&
        Objects.equals(this.inputJsonSchema, transitionsTransitionsInner.inputJsonSchema) &&
        Objects.equals(this.name, transitionsTransitionsInner.name) &&
        Objects.equals(this.outputJsonSchema, transitionsTransitionsInner.outputJsonSchema) &&
        Objects.equals(this.parameters, transitionsTransitionsInner.parameters) &&
        Objects.equals(this.timeoutInSeconds, transitionsTransitionsInner.timeoutInSeconds) &&
        Objects.equals(this.transitionId, transitionsTransitionsInner.transitionId) &&
        Objects.equals(this.transitionType, transitionsTransitionsInner.transitionType) &&
        Objects.equals(this.updatedBy, transitionsTransitionsInner.updatedBy) &&
        Objects.equals(this.updatedTime, transitionsTransitionsInner.updatedTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assets, createdBy, createdTime, description, inputJsonSchema, name, outputJsonSchema, parameters, timeoutInSeconds, transitionId, transitionType, updatedBy, updatedTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransitionsTransitionsInner {\n");
    sb.append("    assets: ").append(toIndentedString(assets)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    createdTime: ").append(toIndentedString(createdTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    inputJsonSchema: ").append(toIndentedString(inputJsonSchema)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    outputJsonSchema: ").append(toIndentedString(outputJsonSchema)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    timeoutInSeconds: ").append(toIndentedString(timeoutInSeconds)).append("\n");
    sb.append("    transitionId: ").append(toIndentedString(transitionId)).append("\n");
    sb.append("    transitionType: ").append(toIndentedString(transitionType)).append("\n");
    sb.append("    updatedBy: ").append(toIndentedString(updatedBy)).append("\n");
    sb.append("    updatedTime: ").append(toIndentedString(updatedTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("assets");
    openapiFields.add("createdBy");
    openapiFields.add("createdTime");
    openapiFields.add("description");
    openapiFields.add("inputJsonSchema");
    openapiFields.add("name");
    openapiFields.add("outputJsonSchema");
    openapiFields.add("parameters");
    openapiFields.add("timeoutInSeconds");
    openapiFields.add("transitionId");
    openapiFields.add("transitionType");
    openapiFields.add("updatedBy");
    openapiFields.add("updatedTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("createdBy");
    openapiRequiredFields.add("createdTime");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("parameters");
    openapiRequiredFields.add("timeoutInSeconds");
    openapiRequiredFields.add("transitionId");
    openapiRequiredFields.add("transitionType");
    openapiRequiredFields.add("updatedBy");
    openapiRequiredFields.add("updatedTime");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TransitionsTransitionsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TransitionsTransitionsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransitionsTransitionsInner is not found in the empty JSON string", TransitionsTransitionsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TransitionsTransitionsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TransitionsTransitionsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TransitionsTransitionsInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("createdBy") != null && !jsonObj.get("createdBy").isJsonNull()) && !jsonObj.get("createdBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdBy").toString()));
      }
      if ((jsonObj.get("createdTime") != null && !jsonObj.get("createdTime").isJsonNull()) && !jsonObj.get("createdTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdTime").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the required field `transitionId`
      LogsTransitionId.validateJsonElement(jsonObj.get("transitionId"));
      if (!jsonObj.get("transitionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transitionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transitionType").toString()));
      }
      // validate the required field `transitionType`
      TransitionTypeEnum.validateJsonElement(jsonObj.get("transitionType"));
      if ((jsonObj.get("updatedBy") != null && !jsonObj.get("updatedBy").isJsonNull()) && !jsonObj.get("updatedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updatedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updatedBy").toString()));
      }
      if ((jsonObj.get("updatedTime") != null && !jsonObj.get("updatedTime").isJsonNull()) && !jsonObj.get("updatedTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updatedTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updatedTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransitionsTransitionsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransitionsTransitionsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransitionsTransitionsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransitionsTransitionsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<TransitionsTransitionsInner>() {
           @Override
           public void write(JsonWriter out, TransitionsTransitionsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TransitionsTransitionsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TransitionsTransitionsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TransitionsTransitionsInner
   * @throws IOException if the JSON string is invalid with respect to TransitionsTransitionsInner
   */
  public static TransitionsTransitionsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransitionsTransitionsInner.class);
  }

  /**
   * Convert an instance of TransitionsTransitionsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

