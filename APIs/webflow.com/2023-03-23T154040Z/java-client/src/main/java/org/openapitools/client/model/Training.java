/*
 * Lucidtech API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-03-23T15:40:40Z
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TrainingWarmStartConfig;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Training
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:04.127247-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Training {
  public static final String SERIALIZED_NAME_CREATED_BY = "createdBy";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private String createdBy;

  public static final String SERIALIZED_NAME_CREATED_TIME = "createdTime";
  @SerializedName(SERIALIZED_NAME_CREATED_TIME)
  private String createdTime;

  public static final String SERIALIZED_NAME_DATA_BUNDLE_IDS = "dataBundleIds";
  @SerializedName(SERIALIZED_NAME_DATA_BUNDLE_IDS)
  private List<String> dataBundleIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATA_SCIENTIST_ASSISTANCE = "dataScientistAssistance";
  @SerializedName(SERIALIZED_NAME_DATA_SCIENTIST_ASSISTANCE)
  private Boolean dataScientistAssistance;

  public static final String SERIALIZED_NAME_DEPLOYMENT_ENVIRONMENT_ID = "deploymentEnvironmentId";
  @SerializedName(SERIALIZED_NAME_DEPLOYMENT_ENVIRONMENT_ID)
  private String deploymentEnvironmentId;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EVALUATION = "evaluation";
  @SerializedName(SERIALIZED_NAME_EVALUATION)
  private Object evaluation;

  public static final String SERIALIZED_NAME_GPU_HOURS = "gpuHours";
  @SerializedName(SERIALIZED_NAME_GPU_HOURS)
  private BigDecimal gpuHours;

  /**
   * Gets or Sets instanceType
   */
  @JsonAdapter(InstanceTypeEnum.Adapter.class)
  public enum InstanceTypeEnum {
    SMALL_GPU("small-gpu"),
    
    MEDIUM_GPU("medium-gpu"),
    
    LARGE_GPU("large-gpu");

    private String value;

    InstanceTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InstanceTypeEnum fromValue(String value) {
      for (InstanceTypeEnum b : InstanceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InstanceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InstanceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InstanceTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InstanceTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      InstanceTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INSTANCE_TYPE = "instanceType";
  @SerializedName(SERIALIZED_NAME_INSTANCE_TYPE)
  private InstanceTypeEnum instanceType;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Object metadata;

  public static final String SERIALIZED_NAME_MODEL_ID = "modelId";
  @SerializedName(SERIALIZED_NAME_MODEL_ID)
  private String modelId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    WAITING_FOR_APPROVAL("waiting-for-approval"),
    
    PENDING("pending"),
    
    RUNNING("running"),
    
    SUCCEEDED("succeeded"),
    
    FAILED("failed"),
    
    CANCELLED("cancelled");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_TRAINING_ID = "trainingId";
  @SerializedName(SERIALIZED_NAME_TRAINING_ID)
  private String trainingId;

  public static final String SERIALIZED_NAME_UPDATED_BY = "updatedBy";
  @SerializedName(SERIALIZED_NAME_UPDATED_BY)
  private String updatedBy;

  public static final String SERIALIZED_NAME_UPDATED_TIME = "updatedTime";
  @SerializedName(SERIALIZED_NAME_UPDATED_TIME)
  private String updatedTime;

  public static final String SERIALIZED_NAME_WARM_START_CONFIG = "warmStartConfig";
  @SerializedName(SERIALIZED_NAME_WARM_START_CONFIG)
  private TrainingWarmStartConfig warmStartConfig;

  public Training() {
  }

  public Training createdBy(String createdBy) {
    this.createdBy = createdBy;
    return this;
  }

  /**
   * Get createdBy
   * @return createdBy
   */
  @javax.annotation.Nullable
  public String getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(String createdBy) {
    this.createdBy = createdBy;
  }


  public Training createdTime(String createdTime) {
    this.createdTime = createdTime;
    return this;
  }

  /**
   * Get createdTime
   * @return createdTime
   */
  @javax.annotation.Nullable
  public String getCreatedTime() {
    return createdTime;
  }

  public void setCreatedTime(String createdTime) {
    this.createdTime = createdTime;
  }


  public Training dataBundleIds(List<String> dataBundleIds) {
    this.dataBundleIds = dataBundleIds;
    return this;
  }

  public Training addDataBundleIdsItem(String dataBundleIdsItem) {
    if (this.dataBundleIds == null) {
      this.dataBundleIds = new ArrayList<>();
    }
    this.dataBundleIds.add(dataBundleIdsItem);
    return this;
  }

  /**
   * Get dataBundleIds
   * @return dataBundleIds
   */
  @javax.annotation.Nonnull
  public List<String> getDataBundleIds() {
    return dataBundleIds;
  }

  public void setDataBundleIds(List<String> dataBundleIds) {
    this.dataBundleIds = dataBundleIds;
  }


  public Training dataScientistAssistance(Boolean dataScientistAssistance) {
    this.dataScientistAssistance = dataScientistAssistance;
    return this;
  }

  /**
   * Get dataScientistAssistance
   * @return dataScientistAssistance
   */
  @javax.annotation.Nullable
  public Boolean getDataScientistAssistance() {
    return dataScientistAssistance;
  }

  public void setDataScientistAssistance(Boolean dataScientistAssistance) {
    this.dataScientistAssistance = dataScientistAssistance;
  }


  public Training deploymentEnvironmentId(String deploymentEnvironmentId) {
    this.deploymentEnvironmentId = deploymentEnvironmentId;
    return this;
  }

  /**
   * Get deploymentEnvironmentId
   * @return deploymentEnvironmentId
   */
  @javax.annotation.Nullable
  public String getDeploymentEnvironmentId() {
    return deploymentEnvironmentId;
  }

  public void setDeploymentEnvironmentId(String deploymentEnvironmentId) {
    this.deploymentEnvironmentId = deploymentEnvironmentId;
  }


  public Training description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Training evaluation(Object evaluation) {
    this.evaluation = evaluation;
    return this;
  }

  /**
   * Get evaluation
   * @return evaluation
   */
  @javax.annotation.Nonnull
  public Object getEvaluation() {
    return evaluation;
  }

  public void setEvaluation(Object evaluation) {
    this.evaluation = evaluation;
  }


  public Training gpuHours(BigDecimal gpuHours) {
    this.gpuHours = gpuHours;
    return this;
  }

  /**
   * Get gpuHours
   * minimum: 0
   * @return gpuHours
   */
  @javax.annotation.Nullable
  public BigDecimal getGpuHours() {
    return gpuHours;
  }

  public void setGpuHours(BigDecimal gpuHours) {
    this.gpuHours = gpuHours;
  }


  public Training instanceType(InstanceTypeEnum instanceType) {
    this.instanceType = instanceType;
    return this;
  }

  /**
   * Get instanceType
   * @return instanceType
   */
  @javax.annotation.Nonnull
  public InstanceTypeEnum getInstanceType() {
    return instanceType;
  }

  public void setInstanceType(InstanceTypeEnum instanceType) {
    this.instanceType = instanceType;
  }


  public Training metadata(Object metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nullable
  public Object getMetadata() {
    return metadata;
  }

  public void setMetadata(Object metadata) {
    this.metadata = metadata;
  }


  public Training modelId(String modelId) {
    this.modelId = modelId;
    return this;
  }

  /**
   * Get modelId
   * @return modelId
   */
  @javax.annotation.Nonnull
  public String getModelId() {
    return modelId;
  }

  public void setModelId(String modelId) {
    this.modelId = modelId;
  }


  public Training name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Training status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public Training trainingId(String trainingId) {
    this.trainingId = trainingId;
    return this;
  }

  /**
   * Get trainingId
   * @return trainingId
   */
  @javax.annotation.Nonnull
  public String getTrainingId() {
    return trainingId;
  }

  public void setTrainingId(String trainingId) {
    this.trainingId = trainingId;
  }


  public Training updatedBy(String updatedBy) {
    this.updatedBy = updatedBy;
    return this;
  }

  /**
   * Get updatedBy
   * @return updatedBy
   */
  @javax.annotation.Nullable
  public String getUpdatedBy() {
    return updatedBy;
  }

  public void setUpdatedBy(String updatedBy) {
    this.updatedBy = updatedBy;
  }


  public Training updatedTime(String updatedTime) {
    this.updatedTime = updatedTime;
    return this;
  }

  /**
   * Get updatedTime
   * @return updatedTime
   */
  @javax.annotation.Nullable
  public String getUpdatedTime() {
    return updatedTime;
  }

  public void setUpdatedTime(String updatedTime) {
    this.updatedTime = updatedTime;
  }


  public Training warmStartConfig(TrainingWarmStartConfig warmStartConfig) {
    this.warmStartConfig = warmStartConfig;
    return this;
  }

  /**
   * Get warmStartConfig
   * @return warmStartConfig
   */
  @javax.annotation.Nullable
  public TrainingWarmStartConfig getWarmStartConfig() {
    return warmStartConfig;
  }

  public void setWarmStartConfig(TrainingWarmStartConfig warmStartConfig) {
    this.warmStartConfig = warmStartConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Training training = (Training) o;
    return Objects.equals(this.createdBy, training.createdBy) &&
        Objects.equals(this.createdTime, training.createdTime) &&
        Objects.equals(this.dataBundleIds, training.dataBundleIds) &&
        Objects.equals(this.dataScientistAssistance, training.dataScientistAssistance) &&
        Objects.equals(this.deploymentEnvironmentId, training.deploymentEnvironmentId) &&
        Objects.equals(this.description, training.description) &&
        Objects.equals(this.evaluation, training.evaluation) &&
        Objects.equals(this.gpuHours, training.gpuHours) &&
        Objects.equals(this.instanceType, training.instanceType) &&
        Objects.equals(this.metadata, training.metadata) &&
        Objects.equals(this.modelId, training.modelId) &&
        Objects.equals(this.name, training.name) &&
        Objects.equals(this.status, training.status) &&
        Objects.equals(this.trainingId, training.trainingId) &&
        Objects.equals(this.updatedBy, training.updatedBy) &&
        Objects.equals(this.updatedTime, training.updatedTime) &&
        Objects.equals(this.warmStartConfig, training.warmStartConfig);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdBy, createdTime, dataBundleIds, dataScientistAssistance, deploymentEnvironmentId, description, evaluation, gpuHours, instanceType, metadata, modelId, name, status, trainingId, updatedBy, updatedTime, warmStartConfig);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Training {\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    createdTime: ").append(toIndentedString(createdTime)).append("\n");
    sb.append("    dataBundleIds: ").append(toIndentedString(dataBundleIds)).append("\n");
    sb.append("    dataScientistAssistance: ").append(toIndentedString(dataScientistAssistance)).append("\n");
    sb.append("    deploymentEnvironmentId: ").append(toIndentedString(deploymentEnvironmentId)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    evaluation: ").append(toIndentedString(evaluation)).append("\n");
    sb.append("    gpuHours: ").append(toIndentedString(gpuHours)).append("\n");
    sb.append("    instanceType: ").append(toIndentedString(instanceType)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    modelId: ").append(toIndentedString(modelId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    trainingId: ").append(toIndentedString(trainingId)).append("\n");
    sb.append("    updatedBy: ").append(toIndentedString(updatedBy)).append("\n");
    sb.append("    updatedTime: ").append(toIndentedString(updatedTime)).append("\n");
    sb.append("    warmStartConfig: ").append(toIndentedString(warmStartConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createdBy");
    openapiFields.add("createdTime");
    openapiFields.add("dataBundleIds");
    openapiFields.add("dataScientistAssistance");
    openapiFields.add("deploymentEnvironmentId");
    openapiFields.add("description");
    openapiFields.add("evaluation");
    openapiFields.add("gpuHours");
    openapiFields.add("instanceType");
    openapiFields.add("metadata");
    openapiFields.add("modelId");
    openapiFields.add("name");
    openapiFields.add("status");
    openapiFields.add("trainingId");
    openapiFields.add("updatedBy");
    openapiFields.add("updatedTime");
    openapiFields.add("warmStartConfig");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("createdBy");
    openapiRequiredFields.add("createdTime");
    openapiRequiredFields.add("dataBundleIds");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("evaluation");
    openapiRequiredFields.add("gpuHours");
    openapiRequiredFields.add("instanceType");
    openapiRequiredFields.add("metadata");
    openapiRequiredFields.add("modelId");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("trainingId");
    openapiRequiredFields.add("updatedBy");
    openapiRequiredFields.add("updatedTime");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Training
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Training.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Training is not found in the empty JSON string", Training.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Training.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Training` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Training.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("createdBy") != null && !jsonObj.get("createdBy").isJsonNull()) && !jsonObj.get("createdBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdBy").toString()));
      }
      if ((jsonObj.get("createdTime") != null && !jsonObj.get("createdTime").isJsonNull()) && !jsonObj.get("createdTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdTime").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("dataBundleIds") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("dataBundleIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataBundleIds` to be an array in the JSON string but got `%s`", jsonObj.get("dataBundleIds").toString()));
      }
      if ((jsonObj.get("deploymentEnvironmentId") != null && !jsonObj.get("deploymentEnvironmentId").isJsonNull()) && !jsonObj.get("deploymentEnvironmentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deploymentEnvironmentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deploymentEnvironmentId").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("instanceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instanceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instanceType").toString()));
      }
      // validate the required field `instanceType`
      InstanceTypeEnum.validateJsonElement(jsonObj.get("instanceType"));
      if (!jsonObj.get("modelId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modelId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modelId").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the required field `status`
      StatusEnum.validateJsonElement(jsonObj.get("status"));
      if (!jsonObj.get("trainingId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trainingId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trainingId").toString()));
      }
      if ((jsonObj.get("updatedBy") != null && !jsonObj.get("updatedBy").isJsonNull()) && !jsonObj.get("updatedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updatedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updatedBy").toString()));
      }
      if ((jsonObj.get("updatedTime") != null && !jsonObj.get("updatedTime").isJsonNull()) && !jsonObj.get("updatedTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updatedTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updatedTime").toString()));
      }
      // validate the optional field `warmStartConfig`
      if (jsonObj.get("warmStartConfig") != null && !jsonObj.get("warmStartConfig").isJsonNull()) {
        TrainingWarmStartConfig.validateJsonElement(jsonObj.get("warmStartConfig"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Training.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Training' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Training> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Training.class));

       return (TypeAdapter<T>) new TypeAdapter<Training>() {
           @Override
           public void write(JsonWriter out, Training value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Training read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Training given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Training
   * @throws IOException if the JSON string is invalid with respect to Training
   */
  public static Training fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Training.class);
  }

  /**
   * Convert an instance of Training to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

