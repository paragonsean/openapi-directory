/*
 * Lucidtech API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-03-23T15:40:40Z
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AppClient;
import org.openapitools.client.model.AppClients;
import org.openapitools.client.model.Asset;
import org.openapitools.client.model.Assets;
import org.openapitools.client.model.DataBundle;
import org.openapitools.client.model.DataBundles;
import org.openapitools.client.model.Dataset;
import org.openapitools.client.model.Datasets;
import org.openapitools.client.model.DeploymentEnvironment;
import org.openapitools.client.model.DeploymentEnvironments;
import org.openapitools.client.model.Document;
import org.openapitools.client.model.Documents;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.Log;
import org.openapitools.client.model.Logs;
import org.openapitools.client.model.Model;
import org.openapitools.client.model.Models;
import org.openapitools.client.model.Organization;
import org.openapitools.client.model.Organizations;
import org.openapitools.client.model.PatchAppClientId;
import org.openapitools.client.model.PatchAssetId;
import org.openapitools.client.model.PatchDataBundleId;
import org.openapitools.client.model.PatchDatasetId;
import org.openapitools.client.model.PatchDocumentId;
import org.openapitools.client.model.PatchModelId;
import org.openapitools.client.model.PatchOrganizationId;
import org.openapitools.client.model.PatchPaymentMethodId;
import org.openapitools.client.model.PatchSecretId;
import org.openapitools.client.model.PatchTrainingId;
import org.openapitools.client.model.PatchTransistionExecutionId;
import org.openapitools.client.model.PatchTransitionId;
import org.openapitools.client.model.PatchUserId;
import org.openapitools.client.model.PatchWorkflowExecutionId;
import org.openapitools.client.model.PatchWorkflowId;
import org.openapitools.client.model.PaymentMethod;
import org.openapitools.client.model.PaymentMethods;
import org.openapitools.client.model.Plan;
import org.openapitools.client.model.Plans;
import org.openapitools.client.model.PostAppClients;
import org.openapitools.client.model.PostAssets;
import org.openapitools.client.model.PostDataBundles;
import org.openapitools.client.model.PostDatasets;
import org.openapitools.client.model.PostDocuments;
import org.openapitools.client.model.PostModels;
import org.openapitools.client.model.PostOrganizations;
import org.openapitools.client.model.PostPaymentMethods;
import org.openapitools.client.model.PostPredictions;
import org.openapitools.client.model.PostSecrets;
import org.openapitools.client.model.PostTrainings;
import org.openapitools.client.model.PostTransitions;
import org.openapitools.client.model.PostUsers;
import org.openapitools.client.model.PostWorkflowExecutions;
import org.openapitools.client.model.PostWorkflows;
import org.openapitools.client.model.Prediction;
import org.openapitools.client.model.Predictions;
import org.openapitools.client.model.Profile;
import org.openapitools.client.model.Secret;
import org.openapitools.client.model.Secrets;
import org.openapitools.client.model.Training;
import org.openapitools.client.model.Trainings;
import org.openapitools.client.model.Transition;
import org.openapitools.client.model.TransitionExecution;
import org.openapitools.client.model.TransitionExecutions;
import org.openapitools.client.model.Transitions;
import org.openapitools.client.model.User;
import org.openapitools.client.model.Users;
import org.openapitools.client.model.Workflow;
import org.openapitools.client.model.WorkflowExecution;
import org.openapitools.client.model.WorkflowExecutions;
import org.openapitools.client.model.Workflows;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appClientsAppClientIdDeleteTest() throws ApiException {
        String appClientId = null;
        AppClient response = api.appClientsAppClientIdDelete(appClientId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appClientsAppClientIdOptionsTest() throws ApiException {
        String appClientId = null;
        Object body = null;
        Object response = api.appClientsAppClientIdOptions(appClientId, body);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appClientsAppClientIdPatchTest() throws ApiException {
        String appClientId = null;
        String contentType = null;
        PatchAppClientId patchAppClientId = null;
        AppClient response = api.appClientsAppClientIdPatch(appClientId, contentType, patchAppClientId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appClientsGetTest() throws ApiException {
        String nextToken = null;
        String maxResults = null;
        AppClients response = api.appClientsGet(nextToken, maxResults);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appClientsOptionsTest() throws ApiException {
        Object body = null;
        Object response = api.appClientsOptions(body);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appClientsPostTest() throws ApiException {
        String contentType = null;
        PostAppClients postAppClients = null;
        AppClient response = api.appClientsPost(contentType, postAppClients);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assetsAssetIdDeleteTest() throws ApiException {
        String assetId = null;
        Asset response = api.assetsAssetIdDelete(assetId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assetsAssetIdGetTest() throws ApiException {
        String assetId = null;
        Asset response = api.assetsAssetIdGet(assetId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assetsAssetIdOptionsTest() throws ApiException {
        String assetId = null;
        Object body = null;
        Object response = api.assetsAssetIdOptions(assetId, body);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assetsAssetIdPatchTest() throws ApiException {
        String contentType = null;
        String assetId = null;
        PatchAssetId patchAssetId = null;
        Asset response = api.assetsAssetIdPatch(contentType, assetId, patchAssetId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assetsGetTest() throws ApiException {
        String nextToken = null;
        String maxResults = null;
        Assets response = api.assetsGet(nextToken, maxResults);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assetsOptionsTest() throws ApiException {
        Object body = null;
        Object response = api.assetsOptions(body);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assetsPostTest() throws ApiException {
        String contentType = null;
        PostAssets postAssets = null;
        Asset response = api.assetsPost(contentType, postAssets);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datasetsDatasetIdDeleteTest() throws ApiException {
        String datasetId = null;
        Dataset response = api.datasetsDatasetIdDelete(datasetId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datasetsDatasetIdGetTest() throws ApiException {
        String datasetId = null;
        Dataset response = api.datasetsDatasetIdGet(datasetId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datasetsDatasetIdOptionsTest() throws ApiException {
        String datasetId = null;
        Object body = null;
        Object response = api.datasetsDatasetIdOptions(datasetId, body);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datasetsDatasetIdPatchTest() throws ApiException {
        String contentType = null;
        String datasetId = null;
        PatchDatasetId patchDatasetId = null;
        Dataset response = api.datasetsDatasetIdPatch(contentType, datasetId, patchDatasetId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datasetsGetTest() throws ApiException {
        String nextToken = null;
        String maxResults = null;
        Datasets response = api.datasetsGet(nextToken, maxResults);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datasetsOptionsTest() throws ApiException {
        Object body = null;
        Object response = api.datasetsOptions(body);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datasetsPostTest() throws ApiException {
        String contentType = null;
        PostDatasets postDatasets = null;
        Dataset response = api.datasetsPost(contentType, postDatasets);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deploymentEnvironmentsDeploymentEnvironmentIdGetTest() throws ApiException {
        String deploymentEnvironmentId = null;
        DeploymentEnvironment response = api.deploymentEnvironmentsDeploymentEnvironmentIdGet(deploymentEnvironmentId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deploymentEnvironmentsDeploymentEnvironmentIdOptionsTest() throws ApiException {
        String deploymentEnvironmentId = null;
        Object body = null;
        Object response = api.deploymentEnvironmentsDeploymentEnvironmentIdOptions(deploymentEnvironmentId, body);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deploymentEnvironmentsGetTest() throws ApiException {
        String owner = null;
        String nextToken = null;
        String maxResults = null;
        DeploymentEnvironments response = api.deploymentEnvironmentsGet(owner, nextToken, maxResults);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deploymentEnvironmentsOptionsTest() throws ApiException {
        Object body = null;
        Object response = api.deploymentEnvironmentsOptions(body);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void documentsDeleteTest() throws ApiException {
        String consentId = null;
        String datasetId = null;
        String nextToken = null;
        String maxResults = null;
        Documents response = api.documentsDelete(consentId, datasetId, nextToken, maxResults);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void documentsDocumentIdDeleteTest() throws ApiException {
        String documentId = null;
        Document response = api.documentsDocumentIdDelete(documentId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void documentsDocumentIdGetTest() throws ApiException {
        String documentId = null;
        Document response = api.documentsDocumentIdGet(documentId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void documentsDocumentIdOptionsTest() throws ApiException {
        String documentId = null;
        Object body = null;
        Object response = api.documentsDocumentIdOptions(documentId, body);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void documentsDocumentIdPatchTest() throws ApiException {
        String contentType = null;
        String documentId = null;
        PatchDocumentId patchDocumentId = null;
        Document response = api.documentsDocumentIdPatch(contentType, documentId, patchDocumentId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void documentsGetTest() throws ApiException {
        String datasetId = null;
        String nextToken = null;
        String order = null;
        String documentId = null;
        String consentId = null;
        String maxResults = null;
        String sortBy = null;
        Documents response = api.documentsGet(datasetId, nextToken, order, documentId, consentId, maxResults, sortBy);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void documentsOptionsTest() throws ApiException {
        Object body = null;
        Object response = api.documentsOptions(body);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void documentsPostTest() throws ApiException {
        String contentType = null;
        PostDocuments postDocuments = null;
        Document response = api.documentsPost(contentType, postDocuments);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void logsGetTest() throws ApiException {
        String workflowId = null;
        String nextToken = null;
        String order = null;
        String transitionExecutionId = null;
        String transitionId = null;
        String maxResults = null;
        String workflowExecutionId = null;
        Logs response = api.logsGet(workflowId, nextToken, order, transitionExecutionId, transitionId, maxResults, workflowExecutionId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void logsLogIdGetTest() throws ApiException {
        String logId = null;
        Log response = api.logsLogIdGet(logId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void logsLogIdOptionsTest() throws ApiException {
        String logId = null;
        Object body = null;
        Object response = api.logsLogIdOptions(logId, body);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void logsOptionsTest() throws ApiException {
        Object body = null;
        Object response = api.logsOptions(body);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelsGetTest() throws ApiException {
        String owner = null;
        String nextToken = null;
        String maxResults = null;
        Models response = api.modelsGet(owner, nextToken, maxResults);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelsModelIdDataBundlesDataBundleIdDeleteTest() throws ApiException {
        String dataBundleId = null;
        String modelId = null;
        DataBundle response = api.modelsModelIdDataBundlesDataBundleIdDelete(dataBundleId, modelId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelsModelIdDataBundlesDataBundleIdOptionsTest() throws ApiException {
        String dataBundleId = null;
        String modelId = null;
        Object body = null;
        Object response = api.modelsModelIdDataBundlesDataBundleIdOptions(dataBundleId, modelId, body);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelsModelIdDataBundlesDataBundleIdPatchTest() throws ApiException {
        String dataBundleId = null;
        String contentType = null;
        String modelId = null;
        PatchDataBundleId patchDataBundleId = null;
        DataBundle response = api.modelsModelIdDataBundlesDataBundleIdPatch(dataBundleId, contentType, modelId, patchDataBundleId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelsModelIdDataBundlesGetTest() throws ApiException {
        String modelId = null;
        String status = null;
        String nextToken = null;
        String maxResults = null;
        DataBundles response = api.modelsModelIdDataBundlesGet(modelId, status, nextToken, maxResults);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelsModelIdDataBundlesOptionsTest() throws ApiException {
        String modelId = null;
        Object body = null;
        Object response = api.modelsModelIdDataBundlesOptions(modelId, body);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelsModelIdDataBundlesPostTest() throws ApiException {
        String contentType = null;
        String modelId = null;
        PostDataBundles postDataBundles = null;
        DataBundle response = api.modelsModelIdDataBundlesPost(contentType, modelId, postDataBundles);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelsModelIdDeleteTest() throws ApiException {
        String modelId = null;
        Model response = api.modelsModelIdDelete(modelId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelsModelIdGetTest() throws ApiException {
        String modelId = null;
        Model response = api.modelsModelIdGet(modelId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelsModelIdOptionsTest() throws ApiException {
        String modelId = null;
        Object body = null;
        Object response = api.modelsModelIdOptions(modelId, body);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelsModelIdPatchTest() throws ApiException {
        String contentType = null;
        String modelId = null;
        PatchModelId patchModelId = null;
        Model response = api.modelsModelIdPatch(contentType, modelId, patchModelId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelsModelIdTrainingsGetTest() throws ApiException {
        String modelId = null;
        String status = null;
        String nextToken = null;
        String maxResults = null;
        Trainings response = api.modelsModelIdTrainingsGet(modelId, status, nextToken, maxResults);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelsModelIdTrainingsOptionsTest() throws ApiException {
        String modelId = null;
        Object body = null;
        Object response = api.modelsModelIdTrainingsOptions(modelId, body);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelsModelIdTrainingsPostTest() throws ApiException {
        String contentType = null;
        String modelId = null;
        PostTrainings postTrainings = null;
        Training response = api.modelsModelIdTrainingsPost(contentType, modelId, postTrainings);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelsModelIdTrainingsTrainingIdOptionsTest() throws ApiException {
        String modelId = null;
        String trainingId = null;
        Object body = null;
        Object response = api.modelsModelIdTrainingsTrainingIdOptions(modelId, trainingId, body);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelsModelIdTrainingsTrainingIdPatchTest() throws ApiException {
        String contentType = null;
        String modelId = null;
        String trainingId = null;
        PatchTrainingId patchTrainingId = null;
        Training response = api.modelsModelIdTrainingsTrainingIdPatch(contentType, modelId, trainingId, patchTrainingId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelsOptionsTest() throws ApiException {
        Object body = null;
        Object response = api.modelsOptions(body);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelsPostTest() throws ApiException {
        String contentType = null;
        PostModels postModels = null;
        Model response = api.modelsPost(contentType, postModels);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void organizationsGetTest() throws ApiException {
        String nextToken = null;
        String maxResults = null;
        Organizations response = api.organizationsGet(nextToken, maxResults);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void organizationsOptionsTest() throws ApiException {
        Object body = null;
        Object response = api.organizationsOptions(body);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void organizationsOrganizationIdGetTest() throws ApiException {
        String organizationId = null;
        Organization response = api.organizationsOrganizationIdGet(organizationId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void organizationsOrganizationIdOptionsTest() throws ApiException {
        String organizationId = null;
        Object body = null;
        Object response = api.organizationsOrganizationIdOptions(organizationId, body);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void organizationsOrganizationIdPatchTest() throws ApiException {
        String contentType = null;
        String organizationId = null;
        PatchOrganizationId patchOrganizationId = null;
        Organization response = api.organizationsOrganizationIdPatch(contentType, organizationId, patchOrganizationId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void organizationsPostTest() throws ApiException {
        String contentType = null;
        PostOrganizations postOrganizations = null;
        Organization response = api.organizationsPost(contentType, postOrganizations);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void paymentMethodsGetTest() throws ApiException {
        String nextToken = null;
        String maxResults = null;
        PaymentMethods response = api.paymentMethodsGet(nextToken, maxResults);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void paymentMethodsOptionsTest() throws ApiException {
        Object body = null;
        Object response = api.paymentMethodsOptions(body);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void paymentMethodsPaymentMethodIdDeleteTest() throws ApiException {
        String paymentMethodId = null;
        PaymentMethod response = api.paymentMethodsPaymentMethodIdDelete(paymentMethodId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void paymentMethodsPaymentMethodIdGetTest() throws ApiException {
        String paymentMethodId = null;
        PaymentMethod response = api.paymentMethodsPaymentMethodIdGet(paymentMethodId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void paymentMethodsPaymentMethodIdOptionsTest() throws ApiException {
        String paymentMethodId = null;
        Object body = null;
        Object response = api.paymentMethodsPaymentMethodIdOptions(paymentMethodId, body);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void paymentMethodsPaymentMethodIdPatchTest() throws ApiException {
        String contentType = null;
        String paymentMethodId = null;
        PatchPaymentMethodId patchPaymentMethodId = null;
        PaymentMethod response = api.paymentMethodsPaymentMethodIdPatch(contentType, paymentMethodId, patchPaymentMethodId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void paymentMethodsPostTest() throws ApiException {
        String contentType = null;
        PostPaymentMethods postPaymentMethods = null;
        PaymentMethod response = api.paymentMethodsPost(contentType, postPaymentMethods);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void plansGetTest() throws ApiException {
        String owner = null;
        String nextToken = null;
        String maxResults = null;
        Plans response = api.plansGet(owner, nextToken, maxResults);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void plansOptionsTest() throws ApiException {
        Object body = null;
        Object response = api.plansOptions(body);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void plansPlanIdGetTest() throws ApiException {
        String planId = null;
        Plan response = api.plansPlanIdGet(planId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void plansPlanIdOptionsTest() throws ApiException {
        String planId = null;
        Object body = null;
        Object response = api.plansPlanIdOptions(planId, body);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void predictionsGetTest() throws ApiException {
        String nextToken = null;
        String maxResults = null;
        String sortBy = null;
        String order = null;
        Predictions response = api.predictionsGet(nextToken, maxResults, sortBy, order);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void predictionsOptionsTest() throws ApiException {
        Object body = null;
        Object response = api.predictionsOptions(body);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void predictionsPostTest() throws ApiException {
        String contentType = null;
        PostPredictions postPredictions = null;
        Prediction response = api.predictionsPost(contentType, postPredictions);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void profilesProfileIdGetTest() throws ApiException {
        String profileId = null;
        Profile response = api.profilesProfileIdGet(profileId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void profilesProfileIdOptionsTest() throws ApiException {
        String profileId = null;
        Object body = null;
        Object response = api.profilesProfileIdOptions(profileId, body);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void profilesProfileIdPatchTest() throws ApiException {
        String profileId = null;
        Profile response = api.profilesProfileIdPatch(profileId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void secretsGetTest() throws ApiException {
        String nextToken = null;
        String maxResults = null;
        Secrets response = api.secretsGet(nextToken, maxResults);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void secretsOptionsTest() throws ApiException {
        Object body = null;
        Object response = api.secretsOptions(body);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void secretsPostTest() throws ApiException {
        String contentType = null;
        PostSecrets postSecrets = null;
        Secret response = api.secretsPost(contentType, postSecrets);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void secretsSecretIdDeleteTest() throws ApiException {
        String secretId = null;
        Secret response = api.secretsSecretIdDelete(secretId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void secretsSecretIdOptionsTest() throws ApiException {
        String secretId = null;
        Object body = null;
        Object response = api.secretsSecretIdOptions(secretId, body);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void secretsSecretIdPatchTest() throws ApiException {
        String contentType = null;
        String secretId = null;
        PatchSecretId patchSecretId = null;
        Secret response = api.secretsSecretIdPatch(contentType, secretId, patchSecretId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void transitionsGetTest() throws ApiException {
        String transitionType = null;
        String nextToken = null;
        String maxResults = null;
        Transitions response = api.transitionsGet(transitionType, nextToken, maxResults);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void transitionsOptionsTest() throws ApiException {
        Object body = null;
        Object response = api.transitionsOptions(body);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void transitionsPostTest() throws ApiException {
        String contentType = null;
        PostTransitions postTransitions = null;
        Transition response = api.transitionsPost(contentType, postTransitions);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void transitionsTransitionIdDeleteTest() throws ApiException {
        String transitionId = null;
        Transition response = api.transitionsTransitionIdDelete(transitionId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void transitionsTransitionIdExecutionsExecutionIdGetTest() throws ApiException {
        String transitionId = null;
        String executionId = null;
        TransitionExecution response = api.transitionsTransitionIdExecutionsExecutionIdGet(transitionId, executionId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void transitionsTransitionIdExecutionsExecutionIdHeartbeatsOptionsTest() throws ApiException {
        String transitionId = null;
        String executionId = null;
        Object body = null;
        Object response = api.transitionsTransitionIdExecutionsExecutionIdHeartbeatsOptions(transitionId, executionId, body);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void transitionsTransitionIdExecutionsExecutionIdHeartbeatsPostTest() throws ApiException {
        String contentType = null;
        String transitionId = null;
        String executionId = null;
        Object body = null;
        Object response = api.transitionsTransitionIdExecutionsExecutionIdHeartbeatsPost(contentType, transitionId, executionId, body);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void transitionsTransitionIdExecutionsExecutionIdOptionsTest() throws ApiException {
        String transitionId = null;
        String executionId = null;
        Object body = null;
        Object response = api.transitionsTransitionIdExecutionsExecutionIdOptions(transitionId, executionId, body);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void transitionsTransitionIdExecutionsExecutionIdPatchTest() throws ApiException {
        String contentType = null;
        String transitionId = null;
        String executionId = null;
        PatchTransistionExecutionId patchTransistionExecutionId = null;
        TransitionExecution response = api.transitionsTransitionIdExecutionsExecutionIdPatch(contentType, transitionId, executionId, patchTransistionExecutionId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void transitionsTransitionIdExecutionsGetTest() throws ApiException {
        String transitionId = null;
        String nextToken = null;
        String order = null;
        String executionId = null;
        String status = null;
        String maxResults = null;
        String sortBy = null;
        TransitionExecutions response = api.transitionsTransitionIdExecutionsGet(transitionId, nextToken, order, executionId, status, maxResults, sortBy);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void transitionsTransitionIdExecutionsOptionsTest() throws ApiException {
        String transitionId = null;
        Object body = null;
        Object response = api.transitionsTransitionIdExecutionsOptions(transitionId, body);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void transitionsTransitionIdExecutionsPostTest() throws ApiException {
        String contentType = null;
        String transitionId = null;
        Object body = null;
        TransitionExecution response = api.transitionsTransitionIdExecutionsPost(contentType, transitionId, body);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void transitionsTransitionIdGetTest() throws ApiException {
        String transitionId = null;
        Transition response = api.transitionsTransitionIdGet(transitionId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void transitionsTransitionIdOptionsTest() throws ApiException {
        String transitionId = null;
        Object body = null;
        Object response = api.transitionsTransitionIdOptions(transitionId, body);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void transitionsTransitionIdPatchTest() throws ApiException {
        String contentType = null;
        String transitionId = null;
        PatchTransitionId patchTransitionId = null;
        Transition response = api.transitionsTransitionIdPatch(contentType, transitionId, patchTransitionId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersGetTest() throws ApiException {
        String nextToken = null;
        String maxResults = null;
        Users response = api.usersGet(nextToken, maxResults);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersOptionsTest() throws ApiException {
        Object body = null;
        Object response = api.usersOptions(body);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersPostTest() throws ApiException {
        String contentType = null;
        PostUsers postUsers = null;
        User response = api.usersPost(contentType, postUsers);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersUserIdDeleteTest() throws ApiException {
        String userId = null;
        User response = api.usersUserIdDelete(userId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersUserIdGetTest() throws ApiException {
        String userId = null;
        User response = api.usersUserIdGet(userId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersUserIdOptionsTest() throws ApiException {
        String userId = null;
        Object body = null;
        Object response = api.usersUserIdOptions(userId, body);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersUserIdPatchTest() throws ApiException {
        String contentType = null;
        String userId = null;
        PatchUserId patchUserId = null;
        User response = api.usersUserIdPatch(contentType, userId, patchUserId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workflowsGetTest() throws ApiException {
        String nextToken = null;
        String maxResults = null;
        Workflows response = api.workflowsGet(nextToken, maxResults);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workflowsOptionsTest() throws ApiException {
        Object body = null;
        Object response = api.workflowsOptions(body);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workflowsPostTest() throws ApiException {
        String contentType = null;
        PostWorkflows postWorkflows = null;
        Workflow response = api.workflowsPost(contentType, postWorkflows);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workflowsWorkflowIdDeleteTest() throws ApiException {
        String workflowId = null;
        Workflow response = api.workflowsWorkflowIdDelete(workflowId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workflowsWorkflowIdExecutionsExecutionIdDeleteTest() throws ApiException {
        String executionId = null;
        String workflowId = null;
        WorkflowExecution response = api.workflowsWorkflowIdExecutionsExecutionIdDelete(executionId, workflowId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workflowsWorkflowIdExecutionsExecutionIdGetTest() throws ApiException {
        String executionId = null;
        String workflowId = null;
        WorkflowExecution response = api.workflowsWorkflowIdExecutionsExecutionIdGet(executionId, workflowId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workflowsWorkflowIdExecutionsExecutionIdOptionsTest() throws ApiException {
        String executionId = null;
        String workflowId = null;
        Object body = null;
        Object response = api.workflowsWorkflowIdExecutionsExecutionIdOptions(executionId, workflowId, body);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workflowsWorkflowIdExecutionsExecutionIdPatchTest() throws ApiException {
        String contentType = null;
        String executionId = null;
        String workflowId = null;
        PatchWorkflowExecutionId patchWorkflowExecutionId = null;
        WorkflowExecution response = api.workflowsWorkflowIdExecutionsExecutionIdPatch(contentType, executionId, workflowId, patchWorkflowExecutionId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workflowsWorkflowIdExecutionsGetTest() throws ApiException {
        String workflowId = null;
        String fromStartTime = null;
        String toStartTime = null;
        String nextToken = null;
        String order = null;
        String status = null;
        String maxResults = null;
        String sortBy = null;
        WorkflowExecutions response = api.workflowsWorkflowIdExecutionsGet(workflowId, fromStartTime, toStartTime, nextToken, order, status, maxResults, sortBy);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workflowsWorkflowIdExecutionsOptionsTest() throws ApiException {
        String workflowId = null;
        Object body = null;
        Object response = api.workflowsWorkflowIdExecutionsOptions(workflowId, body);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workflowsWorkflowIdExecutionsPostTest() throws ApiException {
        String contentType = null;
        String workflowId = null;
        PostWorkflowExecutions postWorkflowExecutions = null;
        WorkflowExecution response = api.workflowsWorkflowIdExecutionsPost(contentType, workflowId, postWorkflowExecutions);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workflowsWorkflowIdGetTest() throws ApiException {
        String workflowId = null;
        Workflow response = api.workflowsWorkflowIdGet(workflowId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workflowsWorkflowIdOptionsTest() throws ApiException {
        String workflowId = null;
        Object body = null;
        Object response = api.workflowsWorkflowIdOptions(workflowId, body);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workflowsWorkflowIdPatchTest() throws ApiException {
        String contentType = null;
        String workflowId = null;
        PatchWorkflowId patchWorkflowId = null;
        Workflow response = api.workflowsWorkflowIdPatch(contentType, workflowId, patchWorkflowId);
        // TODO: test validations
    }

}
