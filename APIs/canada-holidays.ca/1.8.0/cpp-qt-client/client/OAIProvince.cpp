/**
 * Canada Holidays API
 * This API lists all 31 public holidays for all 13 provinces and territories in Canada, including federal holidays.
 *
 * The version of the OpenAPI document: 1.8.0
 * Contact: paul@pcraig3.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProvince.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProvince::OAIProvince(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProvince::OAIProvince() {
    this->initializeModel();
}

OAIProvince::~OAIProvince() {}

void OAIProvince::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_en_isSet = false;
    m_name_en_isValid = false;

    m_name_fr_isSet = false;
    m_name_fr_isValid = false;

    m_next_holiday_isSet = false;
    m_next_holiday_isValid = false;

    m_optional_isSet = false;
    m_optional_isValid = false;

    m_provinces_isSet = false;
    m_provinces_isValid = false;

    m_source_en_isSet = false;
    m_source_en_isValid = false;

    m_source_link_isSet = false;
    m_source_link_isValid = false;
}

void OAIProvince::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProvince::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_en_isValid = ::OpenAPI::fromJsonValue(m_name_en, json[QString("nameEn")]);
    m_name_en_isSet = !json[QString("nameEn")].isNull() && m_name_en_isValid;

    m_name_fr_isValid = ::OpenAPI::fromJsonValue(m_name_fr, json[QString("nameFr")]);
    m_name_fr_isSet = !json[QString("nameFr")].isNull() && m_name_fr_isValid;

    m_next_holiday_isValid = ::OpenAPI::fromJsonValue(m_next_holiday, json[QString("nextHoliday")]);
    m_next_holiday_isSet = !json[QString("nextHoliday")].isNull() && m_next_holiday_isValid;

    m_optional_isValid = ::OpenAPI::fromJsonValue(m_optional, json[QString("optional")]);
    m_optional_isSet = !json[QString("optional")].isNull() && m_optional_isValid;

    m_provinces_isValid = ::OpenAPI::fromJsonValue(m_provinces, json[QString("provinces")]);
    m_provinces_isSet = !json[QString("provinces")].isNull() && m_provinces_isValid;

    m_source_en_isValid = ::OpenAPI::fromJsonValue(m_source_en, json[QString("sourceEn")]);
    m_source_en_isSet = !json[QString("sourceEn")].isNull() && m_source_en_isValid;

    m_source_link_isValid = ::OpenAPI::fromJsonValue(m_source_link, json[QString("sourceLink")]);
    m_source_link_isSet = !json[QString("sourceLink")].isNull() && m_source_link_isValid;
}

QString OAIProvince::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProvince::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_en_isSet) {
        obj.insert(QString("nameEn"), ::OpenAPI::toJsonValue(m_name_en));
    }
    if (m_name_fr_isSet) {
        obj.insert(QString("nameFr"), ::OpenAPI::toJsonValue(m_name_fr));
    }
    if (m_next_holiday.isSet()) {
        obj.insert(QString("nextHoliday"), ::OpenAPI::toJsonValue(m_next_holiday));
    }
    if (m_optional_isSet) {
        obj.insert(QString("optional"), ::OpenAPI::toJsonValue(m_optional));
    }
    if (m_provinces.size() > 0) {
        obj.insert(QString("provinces"), ::OpenAPI::toJsonValue(m_provinces));
    }
    if (m_source_en_isSet) {
        obj.insert(QString("sourceEn"), ::OpenAPI::toJsonValue(m_source_en));
    }
    if (m_source_link_isSet) {
        obj.insert(QString("sourceLink"), ::OpenAPI::toJsonValue(m_source_link));
    }
    return obj;
}

QString OAIProvince::getId() const {
    return m_id;
}
void OAIProvince::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIProvince::is_id_Set() const{
    return m_id_isSet;
}

bool OAIProvince::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIProvince::getNameEn() const {
    return m_name_en;
}
void OAIProvince::setNameEn(const QString &name_en) {
    m_name_en = name_en;
    m_name_en_isSet = true;
}

bool OAIProvince::is_name_en_Set() const{
    return m_name_en_isSet;
}

bool OAIProvince::is_name_en_Valid() const{
    return m_name_en_isValid;
}

QString OAIProvince::getNameFr() const {
    return m_name_fr;
}
void OAIProvince::setNameFr(const QString &name_fr) {
    m_name_fr = name_fr;
    m_name_fr_isSet = true;
}

bool OAIProvince::is_name_fr_Set() const{
    return m_name_fr_isSet;
}

bool OAIProvince::is_name_fr_Valid() const{
    return m_name_fr_isValid;
}

OAIHoliday OAIProvince::getNextHoliday() const {
    return m_next_holiday;
}
void OAIProvince::setNextHoliday(const OAIHoliday &next_holiday) {
    m_next_holiday = next_holiday;
    m_next_holiday_isSet = true;
}

bool OAIProvince::is_next_holiday_Set() const{
    return m_next_holiday_isSet;
}

bool OAIProvince::is_next_holiday_Valid() const{
    return m_next_holiday_isValid;
}

qint32 OAIProvince::getOptional() const {
    return m_optional;
}
void OAIProvince::setOptional(const qint32 &optional) {
    m_optional = optional;
    m_optional_isSet = true;
}

bool OAIProvince::is_optional_Set() const{
    return m_optional_isSet;
}

bool OAIProvince::is_optional_Valid() const{
    return m_optional_isValid;
}

QList<OAIHoliday> OAIProvince::getProvinces() const {
    return m_provinces;
}
void OAIProvince::setProvinces(const QList<OAIHoliday> &provinces) {
    m_provinces = provinces;
    m_provinces_isSet = true;
}

bool OAIProvince::is_provinces_Set() const{
    return m_provinces_isSet;
}

bool OAIProvince::is_provinces_Valid() const{
    return m_provinces_isValid;
}

QString OAIProvince::getSourceEn() const {
    return m_source_en;
}
void OAIProvince::setSourceEn(const QString &source_en) {
    m_source_en = source_en;
    m_source_en_isSet = true;
}

bool OAIProvince::is_source_en_Set() const{
    return m_source_en_isSet;
}

bool OAIProvince::is_source_en_Valid() const{
    return m_source_en_isValid;
}

QString OAIProvince::getSourceLink() const {
    return m_source_link;
}
void OAIProvince::setSourceLink(const QString &source_link) {
    m_source_link = source_link;
    m_source_link_isSet = true;
}

bool OAIProvince::is_source_link_Set() const{
    return m_source_link_isSet;
}

bool OAIProvince::is_source_link_Valid() const{
    return m_source_link_isValid;
}

bool OAIProvince::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_en_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_fr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_holiday.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_optional_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provinces.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_en_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_link_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProvince::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_name_en_isValid && m_name_fr_isValid && m_source_en_isValid && m_source_link_isValid && true;
}

} // namespace OpenAPI
