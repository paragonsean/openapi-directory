/**
 * Canada Holidays API
 * This API lists all 31 public holidays for all 13 provinces and territories in Canada, including federal holidays.
 *
 * The version of the OpenAPI document: 1.8.0
 * Contact: paul@pcraig3.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHoliday.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHoliday::OAIHoliday(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHoliday::OAIHoliday() {
    this->initializeModel();
}

OAIHoliday::~OAIHoliday() {}

void OAIHoliday::initializeModel() {

    m_date_isSet = false;
    m_date_isValid = false;

    m_federal_isSet = false;
    m_federal_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_en_isSet = false;
    m_name_en_isValid = false;

    m_name_fr_isSet = false;
    m_name_fr_isValid = false;

    m_observed_date_isSet = false;
    m_observed_date_isValid = false;

    m_optional_isSet = false;
    m_optional_isValid = false;

    m_provinces_isSet = false;
    m_provinces_isValid = false;
}

void OAIHoliday::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHoliday::fromJsonObject(QJsonObject json) {

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_federal_isValid = ::OpenAPI::fromJsonValue(m_federal, json[QString("federal")]);
    m_federal_isSet = !json[QString("federal")].isNull() && m_federal_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_en_isValid = ::OpenAPI::fromJsonValue(m_name_en, json[QString("nameEn")]);
    m_name_en_isSet = !json[QString("nameEn")].isNull() && m_name_en_isValid;

    m_name_fr_isValid = ::OpenAPI::fromJsonValue(m_name_fr, json[QString("nameFr")]);
    m_name_fr_isSet = !json[QString("nameFr")].isNull() && m_name_fr_isValid;

    m_observed_date_isValid = ::OpenAPI::fromJsonValue(m_observed_date, json[QString("observedDate")]);
    m_observed_date_isSet = !json[QString("observedDate")].isNull() && m_observed_date_isValid;

    m_optional_isValid = ::OpenAPI::fromJsonValue(m_optional, json[QString("optional")]);
    m_optional_isSet = !json[QString("optional")].isNull() && m_optional_isValid;

    m_provinces_isValid = ::OpenAPI::fromJsonValue(m_provinces, json[QString("provinces")]);
    m_provinces_isSet = !json[QString("provinces")].isNull() && m_provinces_isValid;
}

QString OAIHoliday::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHoliday::asJsonObject() const {
    QJsonObject obj;
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_federal_isSet) {
        obj.insert(QString("federal"), ::OpenAPI::toJsonValue(m_federal));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_en_isSet) {
        obj.insert(QString("nameEn"), ::OpenAPI::toJsonValue(m_name_en));
    }
    if (m_name_fr_isSet) {
        obj.insert(QString("nameFr"), ::OpenAPI::toJsonValue(m_name_fr));
    }
    if (m_observed_date_isSet) {
        obj.insert(QString("observedDate"), ::OpenAPI::toJsonValue(m_observed_date));
    }
    if (m_optional_isSet) {
        obj.insert(QString("optional"), ::OpenAPI::toJsonValue(m_optional));
    }
    if (m_provinces.size() > 0) {
        obj.insert(QString("provinces"), ::OpenAPI::toJsonValue(m_provinces));
    }
    return obj;
}

QDate OAIHoliday::getDate() const {
    return m_date;
}
void OAIHoliday::setDate(const QDate &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIHoliday::is_date_Set() const{
    return m_date_isSet;
}

bool OAIHoliday::is_date_Valid() const{
    return m_date_isValid;
}

qint32 OAIHoliday::getFederal() const {
    return m_federal;
}
void OAIHoliday::setFederal(const qint32 &federal) {
    m_federal = federal;
    m_federal_isSet = true;
}

bool OAIHoliday::is_federal_Set() const{
    return m_federal_isSet;
}

bool OAIHoliday::is_federal_Valid() const{
    return m_federal_isValid;
}

qint32 OAIHoliday::getId() const {
    return m_id;
}
void OAIHoliday::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIHoliday::is_id_Set() const{
    return m_id_isSet;
}

bool OAIHoliday::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIHoliday::getNameEn() const {
    return m_name_en;
}
void OAIHoliday::setNameEn(const QString &name_en) {
    m_name_en = name_en;
    m_name_en_isSet = true;
}

bool OAIHoliday::is_name_en_Set() const{
    return m_name_en_isSet;
}

bool OAIHoliday::is_name_en_Valid() const{
    return m_name_en_isValid;
}

QString OAIHoliday::getNameFr() const {
    return m_name_fr;
}
void OAIHoliday::setNameFr(const QString &name_fr) {
    m_name_fr = name_fr;
    m_name_fr_isSet = true;
}

bool OAIHoliday::is_name_fr_Set() const{
    return m_name_fr_isSet;
}

bool OAIHoliday::is_name_fr_Valid() const{
    return m_name_fr_isValid;
}

QDate OAIHoliday::getObservedDate() const {
    return m_observed_date;
}
void OAIHoliday::setObservedDate(const QDate &observed_date) {
    m_observed_date = observed_date;
    m_observed_date_isSet = true;
}

bool OAIHoliday::is_observed_date_Set() const{
    return m_observed_date_isSet;
}

bool OAIHoliday::is_observed_date_Valid() const{
    return m_observed_date_isValid;
}

qint32 OAIHoliday::getOptional() const {
    return m_optional;
}
void OAIHoliday::setOptional(const qint32 &optional) {
    m_optional = optional;
    m_optional_isSet = true;
}

bool OAIHoliday::is_optional_Set() const{
    return m_optional_isSet;
}

bool OAIHoliday::is_optional_Valid() const{
    return m_optional_isValid;
}

QList<OAIProvince> OAIHoliday::getProvinces() const {
    return m_provinces;
}
void OAIHoliday::setProvinces(const QList<OAIProvince> &provinces) {
    m_provinces = provinces;
    m_provinces_isSet = true;
}

bool OAIHoliday::is_provinces_Set() const{
    return m_provinces_isSet;
}

bool OAIHoliday::is_provinces_Valid() const{
    return m_provinces_isValid;
}

bool OAIHoliday::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_federal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_en_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_fr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_observed_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_optional_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provinces.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHoliday::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_date_isValid && m_federal_isValid && m_id_isValid && m_name_en_isValid && m_name_fr_isValid && m_observed_date_isValid && true;
}

} // namespace OpenAPI
