/*
 * Canada Holidays API
 * This API lists all 31 public holidays for all 13 provinces and territories in Canada, including federal holidays.
 *
 * The version of the OpenAPI document: 1.8.0
 * Contact: paul@pcraig3.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Holiday;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A Canadian province or territory 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:31:53.728202-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Province {
  /**
   * Canadian province abbreviations
   */
  @JsonAdapter(IdEnum.Adapter.class)
  public enum IdEnum {
    AB("AB"),
    
    BC("BC"),
    
    MB("MB"),
    
    NB("NB"),
    
    NL("NL"),
    
    NS("NS"),
    
    NT("NT"),
    
    NU("NU"),
    
    TRUE("true"),
    
    PE("PE"),
    
    QC("QC"),
    
    SK("SK"),
    
    YT("YT");

    private String value;

    IdEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IdEnum fromValue(String value) {
      for (IdEnum b : IdEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IdEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IdEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IdEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IdEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IdEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private IdEnum id;

  public static final String SERIALIZED_NAME_NAME_EN = "nameEn";
  @SerializedName(SERIALIZED_NAME_NAME_EN)
  private String nameEn;

  public static final String SERIALIZED_NAME_NAME_FR = "nameFr";
  @SerializedName(SERIALIZED_NAME_NAME_FR)
  private String nameFr;

  public static final String SERIALIZED_NAME_NEXT_HOLIDAY = "nextHoliday";
  @SerializedName(SERIALIZED_NAME_NEXT_HOLIDAY)
  private Holiday nextHoliday;

  /**
   * Whether this province optionally observes a given holiday.
   */
  @JsonAdapter(OptionalEnum.Adapter.class)
  public enum OptionalEnum {
    NUMBER_1(1);

    private Integer value;

    OptionalEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OptionalEnum fromValue(Integer value) {
      for (OptionalEnum b : OptionalEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OptionalEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OptionalEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OptionalEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return OptionalEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      OptionalEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OPTIONAL = "optional";
  @SerializedName(SERIALIZED_NAME_OPTIONAL)
  private OptionalEnum optional;

  public static final String SERIALIZED_NAME_PROVINCES = "provinces";
  @SerializedName(SERIALIZED_NAME_PROVINCES)
  private List<Holiday> provinces = new ArrayList<>();

  public static final String SERIALIZED_NAME_SOURCE_EN = "sourceEn";
  @SerializedName(SERIALIZED_NAME_SOURCE_EN)
  private String sourceEn;

  public static final String SERIALIZED_NAME_SOURCE_LINK = "sourceLink";
  @SerializedName(SERIALIZED_NAME_SOURCE_LINK)
  private URI sourceLink;

  public Province() {
  }

  public Province id(IdEnum id) {
    this.id = id;
    return this;
  }

  /**
   * Canadian province abbreviations
   * @return id
   */
  @javax.annotation.Nonnull
  public IdEnum getId() {
    return id;
  }

  public void setId(IdEnum id) {
    this.id = id;
  }


  public Province nameEn(String nameEn) {
    this.nameEn = nameEn;
    return this;
  }

  /**
   * English name
   * @return nameEn
   */
  @javax.annotation.Nonnull
  public String getNameEn() {
    return nameEn;
  }

  public void setNameEn(String nameEn) {
    this.nameEn = nameEn;
  }


  public Province nameFr(String nameFr) {
    this.nameFr = nameFr;
    return this;
  }

  /**
   * French name
   * @return nameFr
   */
  @javax.annotation.Nonnull
  public String getNameFr() {
    return nameFr;
  }

  public void setNameFr(String nameFr) {
    this.nameFr = nameFr;
  }


  public Province nextHoliday(Holiday nextHoliday) {
    this.nextHoliday = nextHoliday;
    return this;
  }

  /**
   * Get nextHoliday
   * @return nextHoliday
   */
  @javax.annotation.Nullable
  public Holiday getNextHoliday() {
    return nextHoliday;
  }

  public void setNextHoliday(Holiday nextHoliday) {
    this.nextHoliday = nextHoliday;
  }


  public Province optional(OptionalEnum optional) {
    this.optional = optional;
    return this;
  }

  /**
   * Whether this province optionally observes a given holiday.
   * @return optional
   */
  @javax.annotation.Nullable
  public OptionalEnum getOptional() {
    return optional;
  }

  public void setOptional(OptionalEnum optional) {
    this.optional = optional;
  }


  public Province provinces(List<Holiday> provinces) {
    this.provinces = provinces;
    return this;
  }

  public Province addProvincesItem(Holiday provincesItem) {
    if (this.provinces == null) {
      this.provinces = new ArrayList<>();
    }
    this.provinces.add(provincesItem);
    return this;
  }

  /**
   * Get provinces
   * @return provinces
   */
  @javax.annotation.Nullable
  public List<Holiday> getProvinces() {
    return provinces;
  }

  public void setProvinces(List<Holiday> provinces) {
    this.provinces = provinces;
  }


  public Province sourceEn(String sourceEn) {
    this.sourceEn = sourceEn;
    return this;
  }

  /**
   * Name of reference page with public holidays for this region
   * @return sourceEn
   */
  @javax.annotation.Nonnull
  public String getSourceEn() {
    return sourceEn;
  }

  public void setSourceEn(String sourceEn) {
    this.sourceEn = sourceEn;
  }


  public Province sourceLink(URI sourceLink) {
    this.sourceLink = sourceLink;
    return this;
  }

  /**
   * URL to public holidays reference for this region
   * @return sourceLink
   */
  @javax.annotation.Nonnull
  public URI getSourceLink() {
    return sourceLink;
  }

  public void setSourceLink(URI sourceLink) {
    this.sourceLink = sourceLink;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Province province = (Province) o;
    return Objects.equals(this.id, province.id) &&
        Objects.equals(this.nameEn, province.nameEn) &&
        Objects.equals(this.nameFr, province.nameFr) &&
        Objects.equals(this.nextHoliday, province.nextHoliday) &&
        Objects.equals(this.optional, province.optional) &&
        Objects.equals(this.provinces, province.provinces) &&
        Objects.equals(this.sourceEn, province.sourceEn) &&
        Objects.equals(this.sourceLink, province.sourceLink);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, nameEn, nameFr, nextHoliday, optional, provinces, sourceEn, sourceLink);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Province {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    nameEn: ").append(toIndentedString(nameEn)).append("\n");
    sb.append("    nameFr: ").append(toIndentedString(nameFr)).append("\n");
    sb.append("    nextHoliday: ").append(toIndentedString(nextHoliday)).append("\n");
    sb.append("    optional: ").append(toIndentedString(optional)).append("\n");
    sb.append("    provinces: ").append(toIndentedString(provinces)).append("\n");
    sb.append("    sourceEn: ").append(toIndentedString(sourceEn)).append("\n");
    sb.append("    sourceLink: ").append(toIndentedString(sourceLink)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("nameEn");
    openapiFields.add("nameFr");
    openapiFields.add("nextHoliday");
    openapiFields.add("optional");
    openapiFields.add("provinces");
    openapiFields.add("sourceEn");
    openapiFields.add("sourceLink");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("nameEn");
    openapiRequiredFields.add("nameFr");
    openapiRequiredFields.add("sourceEn");
    openapiRequiredFields.add("sourceLink");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Province
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Province.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Province is not found in the empty JSON string", Province.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Province.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Province` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Province.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the required field `id`
      IdEnum.validateJsonElement(jsonObj.get("id"));
      if (!jsonObj.get("nameEn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nameEn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nameEn").toString()));
      }
      if (!jsonObj.get("nameFr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nameFr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nameFr").toString()));
      }
      // validate the optional field `nextHoliday`
      if (jsonObj.get("nextHoliday") != null && !jsonObj.get("nextHoliday").isJsonNull()) {
        Holiday.validateJsonElement(jsonObj.get("nextHoliday"));
      }
      // validate the optional field `optional`
      if (jsonObj.get("optional") != null && !jsonObj.get("optional").isJsonNull()) {
        OptionalEnum.validateJsonElement(jsonObj.get("optional"));
      }
      if (jsonObj.get("provinces") != null && !jsonObj.get("provinces").isJsonNull()) {
        JsonArray jsonArrayprovinces = jsonObj.getAsJsonArray("provinces");
        if (jsonArrayprovinces != null) {
          // ensure the json data is an array
          if (!jsonObj.get("provinces").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `provinces` to be an array in the JSON string but got `%s`", jsonObj.get("provinces").toString()));
          }

          // validate the optional field `provinces` (array)
          for (int i = 0; i < jsonArrayprovinces.size(); i++) {
            Holiday.validateJsonElement(jsonArrayprovinces.get(i));
          };
        }
      }
      if (!jsonObj.get("sourceEn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceEn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceEn").toString()));
      }
      if (!jsonObj.get("sourceLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceLink").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Province.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Province' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Province> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Province.class));

       return (TypeAdapter<T>) new TypeAdapter<Province>() {
           @Override
           public void write(JsonWriter out, Province value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Province read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Province given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Province
   * @throws IOException if the JSON string is invalid with respect to Province
   */
  public static Province fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Province.class);
  }

  /**
   * Convert an instance of Province to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

