/*
 * Canada Holidays API
 * This API lists all 31 public holidays for all 13 provinces and territories in Canada, including federal holidays.
 *
 * The version of the OpenAPI document: 1.8.0
 * Contact: paul@pcraig3.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Holiday200Response;
import org.openapitools.client.model.Holiday400Response;
import org.openapitools.client.model.Holidays200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class HolidaysApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public HolidaysApi() {
        this(Configuration.getDefaultApiClient());
    }

    public HolidaysApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for holiday
     * @param holidayId Primary key for a holiday (required)
     * @param year A calendar year (optional, default to 2023)
     * @param optional A boolean parameter. If false or 0 (default), will return provinces for which this is a legislated holiday. If true or 1, will return provinces which optionally celebrate this holiday. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call holidayCall(Integer holidayId, Integer year, String optional, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/holidays/{holidayId}"
            .replace("{" + "holidayId" + "}", localVarApiClient.escapeString(holidayId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (year != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year", year));
        }

        if (optional != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("optional", optional));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call holidayValidateBeforeCall(Integer holidayId, Integer year, String optional, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'holidayId' is set
        if (holidayId == null) {
            throw new ApiException("Missing the required parameter 'holidayId' when calling holiday(Async)");
        }

        return holidayCall(holidayId, year, optional, _callback);

    }

    /**
     * Get a holiday by id
     * Returns one Canadian statutory holiday by integer id. Returns a 404 response for invalid ids.
     * @param holidayId Primary key for a holiday (required)
     * @param year A calendar year (optional, default to 2023)
     * @param optional A boolean parameter. If false or 0 (default), will return provinces for which this is a legislated holiday. If true or 1, will return provinces which optionally celebrate this holiday. (optional, default to false)
     * @return Holiday200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public Holiday200Response holiday(Integer holidayId, Integer year, String optional) throws ApiException {
        ApiResponse<Holiday200Response> localVarResp = holidayWithHttpInfo(holidayId, year, optional);
        return localVarResp.getData();
    }

    /**
     * Get a holiday by id
     * Returns one Canadian statutory holiday by integer id. Returns a 404 response for invalid ids.
     * @param holidayId Primary key for a holiday (required)
     * @param year A calendar year (optional, default to 2023)
     * @param optional A boolean parameter. If false or 0 (default), will return provinces for which this is a legislated holiday. If true or 1, will return provinces which optionally celebrate this holiday. (optional, default to false)
     * @return ApiResponse&lt;Holiday200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Holiday200Response> holidayWithHttpInfo(Integer holidayId, Integer year, String optional) throws ApiException {
        okhttp3.Call localVarCall = holidayValidateBeforeCall(holidayId, year, optional, null);
        Type localVarReturnType = new TypeToken<Holiday200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a holiday by id (asynchronously)
     * Returns one Canadian statutory holiday by integer id. Returns a 404 response for invalid ids.
     * @param holidayId Primary key for a holiday (required)
     * @param year A calendar year (optional, default to 2023)
     * @param optional A boolean parameter. If false or 0 (default), will return provinces for which this is a legislated holiday. If true or 1, will return provinces which optionally celebrate this holiday. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call holidayAsync(Integer holidayId, Integer year, String optional, final ApiCallback<Holiday200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = holidayValidateBeforeCall(holidayId, year, optional, _callback);
        Type localVarReturnType = new TypeToken<Holiday200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for holidays
     * @param year A calendar year (optional, default to 2023)
     * @param federal A boolean parameter. If true or 1, will return only federal holidays. If false or 0, will return no federal holidays. (optional)
     * @param optional A boolean parameter. If false or 0 (default), will return only legislated holidays. If true or 1, will return optional holidays from Alberta and BC. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call holidaysCall(Integer year, String federal, String optional, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/holidays";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (year != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year", year));
        }

        if (federal != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("federal", federal));
        }

        if (optional != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("optional", optional));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call holidaysValidateBeforeCall(Integer year, String federal, String optional, final ApiCallback _callback) throws ApiException {
        return holidaysCall(year, federal, optional, _callback);

    }

    /**
     * Get all holidays
     * Returns Canadian public holidays. Each holiday lists the regions that observe it.
     * @param year A calendar year (optional, default to 2023)
     * @param federal A boolean parameter. If true or 1, will return only federal holidays. If false or 0, will return no federal holidays. (optional)
     * @param optional A boolean parameter. If false or 0 (default), will return only legislated holidays. If true or 1, will return optional holidays from Alberta and BC. (optional, default to false)
     * @return Holidays200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Holidays200Response holidays(Integer year, String federal, String optional) throws ApiException {
        ApiResponse<Holidays200Response> localVarResp = holidaysWithHttpInfo(year, federal, optional);
        return localVarResp.getData();
    }

    /**
     * Get all holidays
     * Returns Canadian public holidays. Each holiday lists the regions that observe it.
     * @param year A calendar year (optional, default to 2023)
     * @param federal A boolean parameter. If true or 1, will return only federal holidays. If false or 0, will return no federal holidays. (optional)
     * @param optional A boolean parameter. If false or 0 (default), will return only legislated holidays. If true or 1, will return optional holidays from Alberta and BC. (optional, default to false)
     * @return ApiResponse&lt;Holidays200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Holidays200Response> holidaysWithHttpInfo(Integer year, String federal, String optional) throws ApiException {
        okhttp3.Call localVarCall = holidaysValidateBeforeCall(year, federal, optional, null);
        Type localVarReturnType = new TypeToken<Holidays200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all holidays (asynchronously)
     * Returns Canadian public holidays. Each holiday lists the regions that observe it.
     * @param year A calendar year (optional, default to 2023)
     * @param federal A boolean parameter. If true or 1, will return only federal holidays. If false or 0, will return no federal holidays. (optional)
     * @param optional A boolean parameter. If false or 0 (default), will return only legislated holidays. If true or 1, will return optional holidays from Alberta and BC. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call holidaysAsync(Integer year, String federal, String optional, final ApiCallback<Holidays200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = holidaysValidateBeforeCall(year, federal, optional, _callback);
        Type localVarReturnType = new TypeToken<Holidays200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
