# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.province import Province
from openapi_server import util


class Holiday(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _date: date=None, federal: int=None, id: int=None, name_en: str=None, name_fr: str=None, observed_date: date=None, optional: int=None, provinces: List[Province]=None):
        """Holiday - a model defined in OpenAPI

        :param _date: The _date of this Holiday.
        :param federal: The federal of this Holiday.
        :param id: The id of this Holiday.
        :param name_en: The name_en of this Holiday.
        :param name_fr: The name_fr of this Holiday.
        :param observed_date: The observed_date of this Holiday.
        :param optional: The optional of this Holiday.
        :param provinces: The provinces of this Holiday.
        """
        self.openapi_types = {
            '_date': date,
            'federal': int,
            'id': int,
            'name_en': str,
            'name_fr': str,
            'observed_date': date,
            'optional': int,
            'provinces': List[Province]
        }

        self.attribute_map = {
            '_date': 'date',
            'federal': 'federal',
            'id': 'id',
            'name_en': 'nameEn',
            'name_fr': 'nameFr',
            'observed_date': 'observedDate',
            'optional': 'optional',
            'provinces': 'provinces'
        }

        self.__date = _date
        self._federal = federal
        self._id = id
        self._name_en = name_en
        self._name_fr = name_fr
        self._observed_date = observed_date
        self._optional = optional
        self._provinces = provinces

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Holiday':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Holiday of this Holiday.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _date(self):
        """Gets the _date of this Holiday.

        ISO date: the literal date of the holiday

        :return: The _date of this Holiday.
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this Holiday.

        ISO date: the literal date of the holiday

        :param _date: The _date of this Holiday.
        :type _date: date
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")

        self.__date = _date

    @property
    def federal(self):
        """Gets the federal of this Holiday.

        Whether this holiday is observed by federally-regulated industries.

        :return: The federal of this Holiday.
        :rtype: int
        """
        return self._federal

    @federal.setter
    def federal(self, federal):
        """Sets the federal of this Holiday.

        Whether this holiday is observed by federally-regulated industries.

        :param federal: The federal of this Holiday.
        :type federal: int
        """
        allowed_values = [1, 0]  # noqa: E501
        if federal not in allowed_values:
            raise ValueError(
                "Invalid value for `federal` ({0}), must be one of {1}"
                .format(federal, allowed_values)
            )

        self._federal = federal

    @property
    def id(self):
        """Gets the id of this Holiday.

        Primary key for a holiday

        :return: The id of this Holiday.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Holiday.

        Primary key for a holiday

        :param id: The id of this Holiday.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        if id is not None and id > 32:
            raise ValueError("Invalid value for `id`, must be a value less than or equal to `32`")
        if id is not None and id < 1:
            raise ValueError("Invalid value for `id`, must be a value greater than or equal to `1`")

        self._id = id

    @property
    def name_en(self):
        """Gets the name_en of this Holiday.

        English name

        :return: The name_en of this Holiday.
        :rtype: str
        """
        return self._name_en

    @name_en.setter
    def name_en(self, name_en):
        """Sets the name_en of this Holiday.

        English name

        :param name_en: The name_en of this Holiday.
        :type name_en: str
        """
        if name_en is None:
            raise ValueError("Invalid value for `name_en`, must not be `None`")

        self._name_en = name_en

    @property
    def name_fr(self):
        """Gets the name_fr of this Holiday.

        French name

        :return: The name_fr of this Holiday.
        :rtype: str
        """
        return self._name_fr

    @name_fr.setter
    def name_fr(self, name_fr):
        """Sets the name_fr of this Holiday.

        French name

        :param name_fr: The name_fr of this Holiday.
        :type name_fr: str
        """
        if name_fr is None:
            raise ValueError("Invalid value for `name_fr`, must not be `None`")

        self._name_fr = name_fr

    @property
    def observed_date(self):
        """Gets the observed_date of this Holiday.

        ISO date: when this holiday is observed

        :return: The observed_date of this Holiday.
        :rtype: date
        """
        return self._observed_date

    @observed_date.setter
    def observed_date(self, observed_date):
        """Sets the observed_date of this Holiday.

        ISO date: when this holiday is observed

        :param observed_date: The observed_date of this Holiday.
        :type observed_date: date
        """
        if observed_date is None:
            raise ValueError("Invalid value for `observed_date`, must not be `None`")

        self._observed_date = observed_date

    @property
    def optional(self):
        """Gets the optional of this Holiday.

        Whether this is a province-wide statutory holiday, or one that is optional for employers.

        :return: The optional of this Holiday.
        :rtype: int
        """
        return self._optional

    @optional.setter
    def optional(self, optional):
        """Sets the optional of this Holiday.

        Whether this is a province-wide statutory holiday, or one that is optional for employers.

        :param optional: The optional of this Holiday.
        :type optional: int
        """
        allowed_values = [1]  # noqa: E501
        if optional not in allowed_values:
            raise ValueError(
                "Invalid value for `optional` ({0}), must be one of {1}"
                .format(optional, allowed_values)
            )

        self._optional = optional

    @property
    def provinces(self):
        """Gets the provinces of this Holiday.


        :return: The provinces of this Holiday.
        :rtype: List[Province]
        """
        return self._provinces

    @provinces.setter
    def provinces(self, provinces):
        """Sets the provinces of this Holiday.


        :param provinces: The provinces of this Holiday.
        :type provinces: List[Province]
        """

        self._provinces = provinces
