# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.holiday import Holiday
import re
from openapi_server import util


class Province(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, name_en: str=None, name_fr: str=None, next_holiday: Holiday=None, optional: int=None, provinces: List[Holiday]=None, source_en: str=None, source_link: str=None):
        """Province - a model defined in OpenAPI

        :param id: The id of this Province.
        :param name_en: The name_en of this Province.
        :param name_fr: The name_fr of this Province.
        :param next_holiday: The next_holiday of this Province.
        :param optional: The optional of this Province.
        :param provinces: The provinces of this Province.
        :param source_en: The source_en of this Province.
        :param source_link: The source_link of this Province.
        """
        self.openapi_types = {
            'id': str,
            'name_en': str,
            'name_fr': str,
            'next_holiday': Holiday,
            'optional': int,
            'provinces': List[Holiday],
            'source_en': str,
            'source_link': str
        }

        self.attribute_map = {
            'id': 'id',
            'name_en': 'nameEn',
            'name_fr': 'nameFr',
            'next_holiday': 'nextHoliday',
            'optional': 'optional',
            'provinces': 'provinces',
            'source_en': 'sourceEn',
            'source_link': 'sourceLink'
        }

        self._id = id
        self._name_en = name_en
        self._name_fr = name_fr
        self._next_holiday = next_holiday
        self._optional = optional
        self._provinces = provinces
        self._source_en = source_en
        self._source_link = source_link

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Province':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Province of this Province.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Province.

        Canadian province abbreviations

        :return: The id of this Province.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Province.

        Canadian province abbreviations

        :param id: The id of this Province.
        :type id: str
        """
        allowed_values = ["AB", "BC", "MB", "NB", "NL", "NS", "NT", "NU", "true", "PE", "QC", "SK", "YT"]  # noqa: E501
        if id not in allowed_values:
            raise ValueError(
                "Invalid value for `id` ({0}), must be one of {1}"
                .format(id, allowed_values)
            )

        self._id = id

    @property
    def name_en(self):
        """Gets the name_en of this Province.

        English name

        :return: The name_en of this Province.
        :rtype: str
        """
        return self._name_en

    @name_en.setter
    def name_en(self, name_en):
        """Sets the name_en of this Province.

        English name

        :param name_en: The name_en of this Province.
        :type name_en: str
        """
        if name_en is None:
            raise ValueError("Invalid value for `name_en`, must not be `None`")

        self._name_en = name_en

    @property
    def name_fr(self):
        """Gets the name_fr of this Province.

        French name

        :return: The name_fr of this Province.
        :rtype: str
        """
        return self._name_fr

    @name_fr.setter
    def name_fr(self, name_fr):
        """Sets the name_fr of this Province.

        French name

        :param name_fr: The name_fr of this Province.
        :type name_fr: str
        """
        if name_fr is None:
            raise ValueError("Invalid value for `name_fr`, must not be `None`")

        self._name_fr = name_fr

    @property
    def next_holiday(self):
        """Gets the next_holiday of this Province.


        :return: The next_holiday of this Province.
        :rtype: Holiday
        """
        return self._next_holiday

    @next_holiday.setter
    def next_holiday(self, next_holiday):
        """Sets the next_holiday of this Province.


        :param next_holiday: The next_holiday of this Province.
        :type next_holiday: Holiday
        """

        self._next_holiday = next_holiday

    @property
    def optional(self):
        """Gets the optional of this Province.

        Whether this province optionally observes a given holiday.

        :return: The optional of this Province.
        :rtype: int
        """
        return self._optional

    @optional.setter
    def optional(self, optional):
        """Sets the optional of this Province.

        Whether this province optionally observes a given holiday.

        :param optional: The optional of this Province.
        :type optional: int
        """
        allowed_values = [1]  # noqa: E501
        if optional not in allowed_values:
            raise ValueError(
                "Invalid value for `optional` ({0}), must be one of {1}"
                .format(optional, allowed_values)
            )

        self._optional = optional

    @property
    def provinces(self):
        """Gets the provinces of this Province.


        :return: The provinces of this Province.
        :rtype: List[Holiday]
        """
        return self._provinces

    @provinces.setter
    def provinces(self, provinces):
        """Sets the provinces of this Province.


        :param provinces: The provinces of this Province.
        :type provinces: List[Holiday]
        """

        self._provinces = provinces

    @property
    def source_en(self):
        """Gets the source_en of this Province.

        Name of reference page with public holidays for this region

        :return: The source_en of this Province.
        :rtype: str
        """
        return self._source_en

    @source_en.setter
    def source_en(self, source_en):
        """Sets the source_en of this Province.

        Name of reference page with public holidays for this region

        :param source_en: The source_en of this Province.
        :type source_en: str
        """
        if source_en is None:
            raise ValueError("Invalid value for `source_en`, must not be `None`")

        self._source_en = source_en

    @property
    def source_link(self):
        """Gets the source_link of this Province.

        URL to public holidays reference for this region

        :return: The source_link of this Province.
        :rtype: str
        """
        return self._source_link

    @source_link.setter
    def source_link(self, source_link):
        """Sets the source_link of this Province.

        URL to public holidays reference for this region

        :param source_link: The source_link of this Province.
        :type source_link: str
        """
        if source_link is None:
            raise ValueError("Invalid value for `source_link`, must not be `None`")
        if source_link is not None and not re.search(r'https+', source_link):
            raise ValueError("Invalid value for `source_link`, must be a follow pattern or equal to `/https+/`")

        self._source_link = source_link
