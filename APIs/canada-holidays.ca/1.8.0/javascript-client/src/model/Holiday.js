/**
 * Canada Holidays API
 * This API lists all 31 public holidays for all 13 provinces and territories in Canada, including federal holidays.
 *
 * The version of the OpenAPI document: 1.8.0
 * Contact: paul@pcraig3.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Province from './Province';

/**
 * The Holiday model module.
 * @module model/Holiday
 * @version 1.8.0
 */
class Holiday {
    /**
     * Constructs a new <code>Holiday</code>.
     * A Canadian holiday. Includes a name, the literal date of the holiday, the observed date of the holiday (ie, accommodating for weekends), and a list of regions that observe this holiday.
     * @alias module:model/Holiday
     * @param date {Date} ISO date: the literal date of the holiday
     * @param federal {module:model/Holiday.FederalEnum} Whether this holiday is observed by federally-regulated industries.
     * @param id {Number} Primary key for a holiday
     * @param nameEn {String} English name
     * @param nameFr {String} French name
     * @param observedDate {Date} ISO date: when this holiday is observed
     */
    constructor(date, federal, id, nameEn, nameFr, observedDate) { 
        
        Holiday.initialize(this, date, federal, id, nameEn, nameFr, observedDate);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, date, federal, id, nameEn, nameFr, observedDate) { 
        obj['date'] = date;
        obj['federal'] = federal;
        obj['id'] = id;
        obj['nameEn'] = nameEn;
        obj['nameFr'] = nameFr;
        obj['observedDate'] = observedDate;
    }

    /**
     * Constructs a <code>Holiday</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Holiday} obj Optional instance to populate.
     * @return {module:model/Holiday} The populated <code>Holiday</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Holiday();

            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'Date');
            }
            if (data.hasOwnProperty('federal')) {
                obj['federal'] = ApiClient.convertToType(data['federal'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('nameEn')) {
                obj['nameEn'] = ApiClient.convertToType(data['nameEn'], 'String');
            }
            if (data.hasOwnProperty('nameFr')) {
                obj['nameFr'] = ApiClient.convertToType(data['nameFr'], 'String');
            }
            if (data.hasOwnProperty('observedDate')) {
                obj['observedDate'] = ApiClient.convertToType(data['observedDate'], 'Date');
            }
            if (data.hasOwnProperty('optional')) {
                obj['optional'] = ApiClient.convertToType(data['optional'], 'Number');
            }
            if (data.hasOwnProperty('provinces')) {
                obj['provinces'] = ApiClient.convertToType(data['provinces'], [Province]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Holiday</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Holiday</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Holiday.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['nameEn'] && !(typeof data['nameEn'] === 'string' || data['nameEn'] instanceof String)) {
            throw new Error("Expected the field `nameEn` to be a primitive type in the JSON string but got " + data['nameEn']);
        }
        // ensure the json data is a string
        if (data['nameFr'] && !(typeof data['nameFr'] === 'string' || data['nameFr'] instanceof String)) {
            throw new Error("Expected the field `nameFr` to be a primitive type in the JSON string but got " + data['nameFr']);
        }
        if (data['provinces']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['provinces'])) {
                throw new Error("Expected the field `provinces` to be an array in the JSON data but got " + data['provinces']);
            }
            // validate the optional field `provinces` (array)
            for (const item of data['provinces']) {
                Province.validateJSON(item);
            };
        }

        return true;
    }


}

Holiday.RequiredProperties = ["date", "federal", "id", "nameEn", "nameFr", "observedDate"];

/**
 * ISO date: the literal date of the holiday
 * @member {Date} date
 */
Holiday.prototype['date'] = undefined;

/**
 * Whether this holiday is observed by federally-regulated industries.
 * @member {module:model/Holiday.FederalEnum} federal
 */
Holiday.prototype['federal'] = undefined;

/**
 * Primary key for a holiday
 * @member {Number} id
 */
Holiday.prototype['id'] = undefined;

/**
 * English name
 * @member {String} nameEn
 */
Holiday.prototype['nameEn'] = undefined;

/**
 * French name
 * @member {String} nameFr
 */
Holiday.prototype['nameFr'] = undefined;

/**
 * ISO date: when this holiday is observed
 * @member {Date} observedDate
 */
Holiday.prototype['observedDate'] = undefined;

/**
 * Whether this is a province-wide statutory holiday, or one that is optional for employers.
 * @member {module:model/Holiday.OptionalEnum} optional
 */
Holiday.prototype['optional'] = undefined;

/**
 * @member {Array.<module:model/Province>} provinces
 */
Holiday.prototype['provinces'] = undefined;





/**
 * Allowed values for the <code>federal</code> property.
 * @enum {Number}
 * @readonly
 */
Holiday['FederalEnum'] = {

    /**
     * value: 1
     * @const
     */
    "1": 1,

    /**
     * value: 0
     * @const
     */
    "0": 0
};


/**
 * Allowed values for the <code>optional</code> property.
 * @enum {Number}
 * @readonly
 */
Holiday['OptionalEnum'] = {

    /**
     * value: 1
     * @const
     */
    "1": 1
};



export default Holiday;

