/**
 * Canada Holidays API
 * This API lists all 31 public holidays for all 13 provinces and territories in Canada, including federal holidays.
 *
 * The version of the OpenAPI document: 1.8.0
 * Contact: paul@pcraig3.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Holiday from './Holiday';

/**
 * The Province model module.
 * @module model/Province
 * @version 1.8.0
 */
class Province {
    /**
     * Constructs a new <code>Province</code>.
     * A Canadian province or territory 
     * @alias module:model/Province
     * @param id {module:model/Province.IdEnum} Canadian province abbreviations
     * @param nameEn {String} English name
     * @param nameFr {String} French name
     * @param sourceEn {String} Name of reference page with public holidays for this region
     * @param sourceLink {String} URL to public holidays reference for this region
     */
    constructor(id, nameEn, nameFr, sourceEn, sourceLink) { 
        
        Province.initialize(this, id, nameEn, nameFr, sourceEn, sourceLink);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, nameEn, nameFr, sourceEn, sourceLink) { 
        obj['id'] = id;
        obj['nameEn'] = nameEn;
        obj['nameFr'] = nameFr;
        obj['sourceEn'] = sourceEn;
        obj['sourceLink'] = sourceLink;
    }

    /**
     * Constructs a <code>Province</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Province} obj Optional instance to populate.
     * @return {module:model/Province} The populated <code>Province</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Province();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('nameEn')) {
                obj['nameEn'] = ApiClient.convertToType(data['nameEn'], 'String');
            }
            if (data.hasOwnProperty('nameFr')) {
                obj['nameFr'] = ApiClient.convertToType(data['nameFr'], 'String');
            }
            if (data.hasOwnProperty('nextHoliday')) {
                obj['nextHoliday'] = Holiday.constructFromObject(data['nextHoliday']);
            }
            if (data.hasOwnProperty('optional')) {
                obj['optional'] = ApiClient.convertToType(data['optional'], 'Number');
            }
            if (data.hasOwnProperty('provinces')) {
                obj['provinces'] = ApiClient.convertToType(data['provinces'], [Holiday]);
            }
            if (data.hasOwnProperty('sourceEn')) {
                obj['sourceEn'] = ApiClient.convertToType(data['sourceEn'], 'String');
            }
            if (data.hasOwnProperty('sourceLink')) {
                obj['sourceLink'] = ApiClient.convertToType(data['sourceLink'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Province</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Province</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Province.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['nameEn'] && !(typeof data['nameEn'] === 'string' || data['nameEn'] instanceof String)) {
            throw new Error("Expected the field `nameEn` to be a primitive type in the JSON string but got " + data['nameEn']);
        }
        // ensure the json data is a string
        if (data['nameFr'] && !(typeof data['nameFr'] === 'string' || data['nameFr'] instanceof String)) {
            throw new Error("Expected the field `nameFr` to be a primitive type in the JSON string but got " + data['nameFr']);
        }
        // validate the optional field `nextHoliday`
        if (data['nextHoliday']) { // data not null
          Holiday.validateJSON(data['nextHoliday']);
        }
        if (data['provinces']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['provinces'])) {
                throw new Error("Expected the field `provinces` to be an array in the JSON data but got " + data['provinces']);
            }
            // validate the optional field `provinces` (array)
            for (const item of data['provinces']) {
                Holiday.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['sourceEn'] && !(typeof data['sourceEn'] === 'string' || data['sourceEn'] instanceof String)) {
            throw new Error("Expected the field `sourceEn` to be a primitive type in the JSON string but got " + data['sourceEn']);
        }
        // ensure the json data is a string
        if (data['sourceLink'] && !(typeof data['sourceLink'] === 'string' || data['sourceLink'] instanceof String)) {
            throw new Error("Expected the field `sourceLink` to be a primitive type in the JSON string but got " + data['sourceLink']);
        }

        return true;
    }


}

Province.RequiredProperties = ["id", "nameEn", "nameFr", "sourceEn", "sourceLink"];

/**
 * Canadian province abbreviations
 * @member {module:model/Province.IdEnum} id
 */
Province.prototype['id'] = undefined;

/**
 * English name
 * @member {String} nameEn
 */
Province.prototype['nameEn'] = undefined;

/**
 * French name
 * @member {String} nameFr
 */
Province.prototype['nameFr'] = undefined;

/**
 * @member {module:model/Holiday} nextHoliday
 */
Province.prototype['nextHoliday'] = undefined;

/**
 * Whether this province optionally observes a given holiday.
 * @member {module:model/Province.OptionalEnum} optional
 */
Province.prototype['optional'] = undefined;

/**
 * @member {Array.<module:model/Holiday>} provinces
 */
Province.prototype['provinces'] = undefined;

/**
 * Name of reference page with public holidays for this region
 * @member {String} sourceEn
 */
Province.prototype['sourceEn'] = undefined;

/**
 * URL to public holidays reference for this region
 * @member {String} sourceLink
 */
Province.prototype['sourceLink'] = undefined;





/**
 * Allowed values for the <code>id</code> property.
 * @enum {String}
 * @readonly
 */
Province['IdEnum'] = {

    /**
     * value: "AB"
     * @const
     */
    "AB": "AB",

    /**
     * value: "BC"
     * @const
     */
    "BC": "BC",

    /**
     * value: "MB"
     * @const
     */
    "MB": "MB",

    /**
     * value: "NB"
     * @const
     */
    "NB": "NB",

    /**
     * value: "NL"
     * @const
     */
    "NL": "NL",

    /**
     * value: "NS"
     * @const
     */
    "NS": "NS",

    /**
     * value: "NT"
     * @const
     */
    "NT": "NT",

    /**
     * value: "NU"
     * @const
     */
    "NU": "NU",

    /**
     * value: "true"
     * @const
     */
    "true": "true",

    /**
     * value: "PE"
     * @const
     */
    "PE": "PE",

    /**
     * value: "QC"
     * @const
     */
    "QC": "QC",

    /**
     * value: "SK"
     * @const
     */
    "SK": "SK",

    /**
     * value: "YT"
     * @const
     */
    "YT": "YT"
};


/**
 * Allowed values for the <code>optional</code> property.
 * @enum {Number}
 * @readonly
 */
Province['OptionalEnum'] = {

    /**
     * value: 1
     * @const
     */
    "1": 1
};



export default Province;

