/**
 * Story
 * This API is the main entry point for creating, editing and publishing analytics throught the Presalytics API
 *
 * The version of the OpenAPI document: 0.3.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStory_outline_history.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStory_outline_history::OAIStory_outline_history(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStory_outline_history::OAIStory_outline_history() {
    this->initializeModel();
}

OAIStory_outline_history::~OAIStory_outline_history() {}

void OAIStory_outline_history::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_updated_by_isSet = false;
    m_updated_by_isValid = false;

    m_collaborator_user_id_isSet = false;
    m_collaborator_user_id_isValid = false;

    m_outline_isSet = false;
    m_outline_isValid = false;

    m_revision_number_isSet = false;
    m_revision_number_isValid = false;

    m_story_id_isSet = false;
    m_story_id_isValid = false;
}

void OAIStory_outline_history::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStory_outline_history::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("created_by")]);
    m_created_by_isSet = !json[QString("created_by")].isNull() && m_created_by_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_updated_by_isValid = ::OpenAPI::fromJsonValue(m_updated_by, json[QString("updated_by")]);
    m_updated_by_isSet = !json[QString("updated_by")].isNull() && m_updated_by_isValid;

    m_collaborator_user_id_isValid = ::OpenAPI::fromJsonValue(m_collaborator_user_id, json[QString("collaborator_user_id")]);
    m_collaborator_user_id_isSet = !json[QString("collaborator_user_id")].isNull() && m_collaborator_user_id_isValid;

    m_outline_isValid = ::OpenAPI::fromJsonValue(m_outline, json[QString("outline")]);
    m_outline_isSet = !json[QString("outline")].isNull() && m_outline_isValid;

    m_revision_number_isValid = ::OpenAPI::fromJsonValue(m_revision_number, json[QString("revision_number")]);
    m_revision_number_isSet = !json[QString("revision_number")].isNull() && m_revision_number_isValid;

    m_story_id_isValid = ::OpenAPI::fromJsonValue(m_story_id, json[QString("story_id")]);
    m_story_id_isSet = !json[QString("story_id")].isNull() && m_story_id_isValid;
}

QString OAIStory_outline_history::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStory_outline_history::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_created_by_isSet) {
        obj.insert(QString("created_by"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_updated_by_isSet) {
        obj.insert(QString("updated_by"), ::OpenAPI::toJsonValue(m_updated_by));
    }
    if (m_collaborator_user_id_isSet) {
        obj.insert(QString("collaborator_user_id"), ::OpenAPI::toJsonValue(m_collaborator_user_id));
    }
    if (m_outline_isSet) {
        obj.insert(QString("outline"), ::OpenAPI::toJsonValue(m_outline));
    }
    if (m_revision_number_isSet) {
        obj.insert(QString("revision_number"), ::OpenAPI::toJsonValue(m_revision_number));
    }
    if (m_story_id_isSet) {
        obj.insert(QString("story_id"), ::OpenAPI::toJsonValue(m_story_id));
    }
    return obj;
}

QDateTime OAIStory_outline_history::getCreatedAt() const {
    return m_created_at;
}
void OAIStory_outline_history::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIStory_outline_history::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIStory_outline_history::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIStory_outline_history::getCreatedBy() const {
    return m_created_by;
}
void OAIStory_outline_history::setCreatedBy(const QString &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIStory_outline_history::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIStory_outline_history::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QString OAIStory_outline_history::getId() const {
    return m_id;
}
void OAIStory_outline_history::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIStory_outline_history::is_id_Set() const{
    return m_id_isSet;
}

bool OAIStory_outline_history::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIStory_outline_history::getUpdatedAt() const {
    return m_updated_at;
}
void OAIStory_outline_history::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIStory_outline_history::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIStory_outline_history::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAIStory_outline_history::getUpdatedBy() const {
    return m_updated_by;
}
void OAIStory_outline_history::setUpdatedBy(const QString &updated_by) {
    m_updated_by = updated_by;
    m_updated_by_isSet = true;
}

bool OAIStory_outline_history::is_updated_by_Set() const{
    return m_updated_by_isSet;
}

bool OAIStory_outline_history::is_updated_by_Valid() const{
    return m_updated_by_isValid;
}

QString OAIStory_outline_history::getCollaboratorUserId() const {
    return m_collaborator_user_id;
}
void OAIStory_outline_history::setCollaboratorUserId(const QString &collaborator_user_id) {
    m_collaborator_user_id = collaborator_user_id;
    m_collaborator_user_id_isSet = true;
}

bool OAIStory_outline_history::is_collaborator_user_id_Set() const{
    return m_collaborator_user_id_isSet;
}

bool OAIStory_outline_history::is_collaborator_user_id_Valid() const{
    return m_collaborator_user_id_isValid;
}

QString OAIStory_outline_history::getOutline() const {
    return m_outline;
}
void OAIStory_outline_history::setOutline(const QString &outline) {
    m_outline = outline;
    m_outline_isSet = true;
}

bool OAIStory_outline_history::is_outline_Set() const{
    return m_outline_isSet;
}

bool OAIStory_outline_history::is_outline_Valid() const{
    return m_outline_isValid;
}

qint32 OAIStory_outline_history::getRevisionNumber() const {
    return m_revision_number;
}
void OAIStory_outline_history::setRevisionNumber(const qint32 &revision_number) {
    m_revision_number = revision_number;
    m_revision_number_isSet = true;
}

bool OAIStory_outline_history::is_revision_number_Set() const{
    return m_revision_number_isSet;
}

bool OAIStory_outline_history::is_revision_number_Valid() const{
    return m_revision_number_isValid;
}

QString OAIStory_outline_history::getStoryId() const {
    return m_story_id;
}
void OAIStory_outline_history::setStoryId(const QString &story_id) {
    m_story_id = story_id;
    m_story_id_isSet = true;
}

bool OAIStory_outline_history::is_story_id_Set() const{
    return m_story_id_isSet;
}

bool OAIStory_outline_history::is_story_id_Valid() const{
    return m_story_id_isValid;
}

bool OAIStory_outline_history::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collaborator_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outline_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_story_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStory_outline_history::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
