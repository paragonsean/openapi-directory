/**
 * Story
 * This API is the main entry point for creating, editing and publishing analytics throught the Presalytics API
 *
 * The version of the OpenAPI document: 0.3.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIStoryApi_H
#define OAI_OAIStoryApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIFile_upload.h"
#include "OAIHttpFileElement.h"
#include "OAIOutline.h"
#include "OAIProblem_detail.h"
#include "OAIStatus.h"
#include "OAIStory.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIStoryApi : public QObject {
    Q_OBJECT

public:
    OAIStoryApi(const int timeOut = 0);
    ~OAIStoryApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  include_relationships bool [optional]
    * @param[in]  include_outline bool [optional]
    */
    virtual void storyGet(const ::OpenAPI::OptionalParam<bool> &include_relationships = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_outline = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void storyIdAnalytics(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void storyIdDelete(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  ooxml_automation_id QString [required]
    */
    virtual void storyIdFileOoxmlautomationidDelete(const QString &id, const QString &ooxml_automation_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  ooxml_automation_id QString [required]
    */
    virtual void storyIdFileOoxmlautomationidGet(const QString &id, const QString &ooxml_automation_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  replace_existing bool [optional]
    * @param[in]  obsolete_id QString [optional]
    * @param[in]  include_outline bool [optional]
    * @param[in]  file QList<OAIHttpFileElement> [optional]
    */
    virtual void storyIdFilePost(const QString &id, const ::OpenAPI::OptionalParam<bool> &replace_existing = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &obsolete_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_outline = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<OAIHttpFileElement>> &file = ::OpenAPI::OptionalParam<QList<OAIHttpFileElement>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  include_relationships bool [optional]
    * @param[in]  include_outline bool [optional]
    * @param[in]  full bool [optional]
    * @param[in]  refresh_cache bool [optional]
    */
    virtual void storyIdGet(const QString &id, const ::OpenAPI::OptionalParam<bool> &include_relationships = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_outline = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &full = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &refresh_cache = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void storyIdOutlineGet(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  body QString [required]
    */
    virtual void storyIdOutlinePost(const QString &id, const QString &body);

    /**
    * @param[in]  id QString [required]
    */
    virtual void storyIdPublic(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_story OAIStory [required]
    * @param[in]  include_outline bool [optional]
    */
    virtual void storyIdPut(const QString &id, const OAIStory &oai_story, const ::OpenAPI::OptionalParam<bool> &include_outline = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void storyIdReveal(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void storyIdStatusGet(const QString &id);

    /**
    * @param[in]  oai_outline OAIOutline [required]
    * @param[in]  include_outline bool [optional]
    */
    virtual void storyPost(const OAIOutline &oai_outline, const ::OpenAPI::OptionalParam<bool> &include_outline = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  include_outline bool [optional]
    * @param[in]  file QList<OAIHttpFileElement> [optional]
    */
    virtual void storyPostFile(const ::OpenAPI::OptionalParam<bool> &include_outline = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<OAIHttpFileElement>> &file = ::OpenAPI::OptionalParam<QList<OAIHttpFileElement>>());

    /**
    * @param[in]  include_outline bool [optional]
    * @param[in]  oai_file_upload OAIFile_upload [optional]
    */
    virtual void storyPostFileJson(const ::OpenAPI::OptionalParam<bool> &include_outline = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIFile_upload> &oai_file_upload = ::OpenAPI::OptionalParam<OAIFile_upload>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void storyGetCallback(OAIHttpRequestWorker *worker);
    void storyIdAnalyticsCallback(OAIHttpRequestWorker *worker);
    void storyIdDeleteCallback(OAIHttpRequestWorker *worker);
    void storyIdFileOoxmlautomationidDeleteCallback(OAIHttpRequestWorker *worker);
    void storyIdFileOoxmlautomationidGetCallback(OAIHttpRequestWorker *worker);
    void storyIdFilePostCallback(OAIHttpRequestWorker *worker);
    void storyIdGetCallback(OAIHttpRequestWorker *worker);
    void storyIdOutlineGetCallback(OAIHttpRequestWorker *worker);
    void storyIdOutlinePostCallback(OAIHttpRequestWorker *worker);
    void storyIdPublicCallback(OAIHttpRequestWorker *worker);
    void storyIdPutCallback(OAIHttpRequestWorker *worker);
    void storyIdRevealCallback(OAIHttpRequestWorker *worker);
    void storyIdStatusGetCallback(OAIHttpRequestWorker *worker);
    void storyPostCallback(OAIHttpRequestWorker *worker);
    void storyPostFileCallback(OAIHttpRequestWorker *worker);
    void storyPostFileJsonCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void storyGetSignal(QList<OAIStory> summary);
    void storyIdAnalyticsSignal(QString summary);
    void storyIdDeleteSignal();
    void storyIdFileOoxmlautomationidDeleteSignal();
    void storyIdFileOoxmlautomationidGetSignal(OAIHttpFileElement summary);
    void storyIdFilePostSignal(OAIStory summary);
    void storyIdGetSignal(OAIStory summary);
    void storyIdOutlineGetSignal(QString summary);
    void storyIdOutlinePostSignal();
    void storyIdPublicSignal(QString summary);
    void storyIdPutSignal(OAIStory summary);
    void storyIdRevealSignal(QString summary);
    void storyIdStatusGetSignal(OAIStatus summary);
    void storyPostSignal(OAIStory summary);
    void storyPostFileSignal(OAIStory summary);
    void storyPostFileJsonSignal(OAIStory summary);


    void storyGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIStory> summary);
    void storyIdAnalyticsSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void storyIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void storyIdFileOoxmlautomationidDeleteSignalFull(OAIHttpRequestWorker *worker);
    void storyIdFileOoxmlautomationidGetSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void storyIdFilePostSignalFull(OAIHttpRequestWorker *worker, OAIStory summary);
    void storyIdGetSignalFull(OAIHttpRequestWorker *worker, OAIStory summary);
    void storyIdOutlineGetSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void storyIdOutlinePostSignalFull(OAIHttpRequestWorker *worker);
    void storyIdPublicSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void storyIdPutSignalFull(OAIHttpRequestWorker *worker, OAIStory summary);
    void storyIdRevealSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void storyIdStatusGetSignalFull(OAIHttpRequestWorker *worker, OAIStatus summary);
    void storyPostSignalFull(OAIHttpRequestWorker *worker, OAIStory summary);
    void storyPostFileSignalFull(OAIHttpRequestWorker *worker, OAIStory summary);
    void storyPostFileJsonSignalFull(OAIHttpRequestWorker *worker, OAIStory summary);

    Q_DECL_DEPRECATED_X("Use storyGetSignalError() instead")
    void storyGetSignalE(QList<OAIStory> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void storyGetSignalError(QList<OAIStory> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storyIdAnalyticsSignalError() instead")
    void storyIdAnalyticsSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void storyIdAnalyticsSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storyIdDeleteSignalError() instead")
    void storyIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void storyIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storyIdFileOoxmlautomationidDeleteSignalError() instead")
    void storyIdFileOoxmlautomationidDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void storyIdFileOoxmlautomationidDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storyIdFileOoxmlautomationidGetSignalError() instead")
    void storyIdFileOoxmlautomationidGetSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void storyIdFileOoxmlautomationidGetSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storyIdFilePostSignalError() instead")
    void storyIdFilePostSignalE(OAIStory summary, QNetworkReply::NetworkError error_type, QString error_str);
    void storyIdFilePostSignalError(OAIStory summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storyIdGetSignalError() instead")
    void storyIdGetSignalE(OAIStory summary, QNetworkReply::NetworkError error_type, QString error_str);
    void storyIdGetSignalError(OAIStory summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storyIdOutlineGetSignalError() instead")
    void storyIdOutlineGetSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void storyIdOutlineGetSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storyIdOutlinePostSignalError() instead")
    void storyIdOutlinePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void storyIdOutlinePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storyIdPublicSignalError() instead")
    void storyIdPublicSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void storyIdPublicSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storyIdPutSignalError() instead")
    void storyIdPutSignalE(OAIStory summary, QNetworkReply::NetworkError error_type, QString error_str);
    void storyIdPutSignalError(OAIStory summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storyIdRevealSignalError() instead")
    void storyIdRevealSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void storyIdRevealSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storyIdStatusGetSignalError() instead")
    void storyIdStatusGetSignalE(OAIStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void storyIdStatusGetSignalError(OAIStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storyPostSignalError() instead")
    void storyPostSignalE(OAIStory summary, QNetworkReply::NetworkError error_type, QString error_str);
    void storyPostSignalError(OAIStory summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storyPostFileSignalError() instead")
    void storyPostFileSignalE(OAIStory summary, QNetworkReply::NetworkError error_type, QString error_str);
    void storyPostFileSignalError(OAIStory summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storyPostFileJsonSignalError() instead")
    void storyPostFileJsonSignalE(OAIStory summary, QNetworkReply::NetworkError error_type, QString error_str);
    void storyPostFileJsonSignalError(OAIStory summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use storyGetSignalErrorFull() instead")
    void storyGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storyGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storyIdAnalyticsSignalErrorFull() instead")
    void storyIdAnalyticsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storyIdAnalyticsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storyIdDeleteSignalErrorFull() instead")
    void storyIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storyIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storyIdFileOoxmlautomationidDeleteSignalErrorFull() instead")
    void storyIdFileOoxmlautomationidDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storyIdFileOoxmlautomationidDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storyIdFileOoxmlautomationidGetSignalErrorFull() instead")
    void storyIdFileOoxmlautomationidGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storyIdFileOoxmlautomationidGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storyIdFilePostSignalErrorFull() instead")
    void storyIdFilePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storyIdFilePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storyIdGetSignalErrorFull() instead")
    void storyIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storyIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storyIdOutlineGetSignalErrorFull() instead")
    void storyIdOutlineGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storyIdOutlineGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storyIdOutlinePostSignalErrorFull() instead")
    void storyIdOutlinePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storyIdOutlinePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storyIdPublicSignalErrorFull() instead")
    void storyIdPublicSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storyIdPublicSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storyIdPutSignalErrorFull() instead")
    void storyIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storyIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storyIdRevealSignalErrorFull() instead")
    void storyIdRevealSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storyIdRevealSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storyIdStatusGetSignalErrorFull() instead")
    void storyIdStatusGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storyIdStatusGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storyPostSignalErrorFull() instead")
    void storyPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storyPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storyPostFileSignalErrorFull() instead")
    void storyPostFileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storyPostFileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storyPostFileJsonSignalErrorFull() instead")
    void storyPostFileJsonSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storyPostFileJsonSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
