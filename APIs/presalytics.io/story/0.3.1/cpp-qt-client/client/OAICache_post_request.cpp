/**
 * Story
 * This API is the main entry point for creating, editing and publishing analytics throught the Presalytics API
 *
 * The version of the OpenAPI document: 0.3.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICache_post_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICache_post_request::OAICache_post_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICache_post_request::OAICache_post_request() {
    this->initializeModel();
}

OAICache_post_request::~OAICache_post_request() {}

void OAICache_post_request::initializeModel() {

    m_current_user_id_isSet = false;
    m_current_user_id_isValid = false;

    m_nonce_isSet = false;
    m_nonce_isValid = false;

    m_subdocument_isSet = false;
    m_subdocument_isValid = false;
}

void OAICache_post_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICache_post_request::fromJsonObject(QJsonObject json) {

    m_current_user_id_isValid = ::OpenAPI::fromJsonValue(m_current_user_id, json[QString("current_user_id")]);
    m_current_user_id_isSet = !json[QString("current_user_id")].isNull() && m_current_user_id_isValid;

    m_nonce_isValid = ::OpenAPI::fromJsonValue(m_nonce, json[QString("nonce")]);
    m_nonce_isSet = !json[QString("nonce")].isNull() && m_nonce_isValid;

    m_subdocument_isValid = ::OpenAPI::fromJsonValue(m_subdocument, json[QString("subdocument")]);
    m_subdocument_isSet = !json[QString("subdocument")].isNull() && m_subdocument_isValid;
}

QString OAICache_post_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICache_post_request::asJsonObject() const {
    QJsonObject obj;
    if (m_current_user_id_isSet) {
        obj.insert(QString("current_user_id"), ::OpenAPI::toJsonValue(m_current_user_id));
    }
    if (m_nonce_isSet) {
        obj.insert(QString("nonce"), ::OpenAPI::toJsonValue(m_nonce));
    }
    if (m_subdocument_isSet) {
        obj.insert(QString("subdocument"), ::OpenAPI::toJsonValue(m_subdocument));
    }
    return obj;
}

QString OAICache_post_request::getCurrentUserId() const {
    return m_current_user_id;
}
void OAICache_post_request::setCurrentUserId(const QString &current_user_id) {
    m_current_user_id = current_user_id;
    m_current_user_id_isSet = true;
}

bool OAICache_post_request::is_current_user_id_Set() const{
    return m_current_user_id_isSet;
}

bool OAICache_post_request::is_current_user_id_Valid() const{
    return m_current_user_id_isValid;
}

QString OAICache_post_request::getNonce() const {
    return m_nonce;
}
void OAICache_post_request::setNonce(const QString &nonce) {
    m_nonce = nonce;
    m_nonce_isSet = true;
}

bool OAICache_post_request::is_nonce_Set() const{
    return m_nonce_isSet;
}

bool OAICache_post_request::is_nonce_Valid() const{
    return m_nonce_isValid;
}

QString OAICache_post_request::getSubdocument() const {
    return m_subdocument;
}
void OAICache_post_request::setSubdocument(const QString &subdocument) {
    m_subdocument = subdocument;
    m_subdocument_isSet = true;
}

bool OAICache_post_request::is_subdocument_Set() const{
    return m_subdocument_isSet;
}

bool OAICache_post_request::is_subdocument_Valid() const{
    return m_subdocument_isValid;
}

bool OAICache_post_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nonce_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subdocument_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICache_post_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
