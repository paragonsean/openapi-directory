/**
 * Story
 * This API is the main entry point for creating, editing and publishing analytics throught the Presalytics API
 *
 * The version of the OpenAPI document: 0.3.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMessage::OAIMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMessage::OAIMessage() {
    this->initializeModel();
}

OAIMessage::~OAIMessage() {}

void OAIMessage::initializeModel() {

    m_body_isSet = false;
    m_body_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_remote_isSet = false;
    m_remote_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_user_name_isSet = false;
    m_user_name_isValid = false;
}

void OAIMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMessage::fromJsonObject(QJsonObject json) {

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_remote_isValid = ::OpenAPI::fromJsonValue(m_remote, json[QString("remote")]);
    m_remote_isSet = !json[QString("remote")].isNull() && m_remote_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;

    m_user_name_isValid = ::OpenAPI::fromJsonValue(m_user_name, json[QString("userName")]);
    m_user_name_isSet = !json[QString("userName")].isNull() && m_user_name_isValid;
}

QString OAIMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_remote_isSet) {
        obj.insert(QString("remote"), ::OpenAPI::toJsonValue(m_remote));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_user_name_isSet) {
        obj.insert(QString("userName"), ::OpenAPI::toJsonValue(m_user_name));
    }
    return obj;
}

QString OAIMessage::getBody() const {
    return m_body;
}
void OAIMessage::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAIMessage::is_body_Set() const{
    return m_body_isSet;
}

bool OAIMessage::is_body_Valid() const{
    return m_body_isValid;
}

QString OAIMessage::getId() const {
    return m_id;
}
void OAIMessage::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIMessage::is_id_Set() const{
    return m_id_isSet;
}

bool OAIMessage::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIMessage::isRemote() const {
    return m_remote;
}
void OAIMessage::setRemote(const bool &remote) {
    m_remote = remote;
    m_remote_isSet = true;
}

bool OAIMessage::is_remote_Set() const{
    return m_remote_isSet;
}

bool OAIMessage::is_remote_Valid() const{
    return m_remote_isValid;
}

QDateTime OAIMessage::getTimestamp() const {
    return m_timestamp;
}
void OAIMessage::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIMessage::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIMessage::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

QString OAIMessage::getUserId() const {
    return m_user_id;
}
void OAIMessage::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIMessage::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIMessage::is_user_id_Valid() const{
    return m_user_id_isValid;
}

QString OAIMessage::getUserName() const {
    return m_user_name;
}
void OAIMessage::setUserName(const QString &user_name) {
    m_user_name = user_name;
    m_user_name_isSet = true;
}

bool OAIMessage::is_user_name_Set() const{
    return m_user_name_isSet;
}

bool OAIMessage::is_user_name_Valid() const{
    return m_user_name_isValid;
}

bool OAIMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
