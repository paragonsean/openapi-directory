/**
 * Story
 * This API is the main entry point for creating, editing and publishing analytics throught the Presalytics API
 *
 * The version of the OpenAPI document: 0.3.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPermission_type.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPermission_type::OAIPermission_type(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPermission_type::OAIPermission_type() {
    this->initializeModel();
}

OAIPermission_type::~OAIPermission_type() {}

void OAIPermission_type::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_updated_by_isSet = false;
    m_updated_by_isValid = false;

    m_can_add_collaborators_isSet = false;
    m_can_add_collaborators_isValid = false;

    m_can_delete_isSet = false;
    m_can_delete_isValid = false;

    m_can_edit_isSet = false;
    m_can_edit_isValid = false;

    m_can_view_isSet = false;
    m_can_view_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIPermission_type::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPermission_type::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("created_by")]);
    m_created_by_isSet = !json[QString("created_by")].isNull() && m_created_by_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_updated_by_isValid = ::OpenAPI::fromJsonValue(m_updated_by, json[QString("updated_by")]);
    m_updated_by_isSet = !json[QString("updated_by")].isNull() && m_updated_by_isValid;

    m_can_add_collaborators_isValid = ::OpenAPI::fromJsonValue(m_can_add_collaborators, json[QString("can_add_collaborators")]);
    m_can_add_collaborators_isSet = !json[QString("can_add_collaborators")].isNull() && m_can_add_collaborators_isValid;

    m_can_delete_isValid = ::OpenAPI::fromJsonValue(m_can_delete, json[QString("can_delete")]);
    m_can_delete_isSet = !json[QString("can_delete")].isNull() && m_can_delete_isValid;

    m_can_edit_isValid = ::OpenAPI::fromJsonValue(m_can_edit, json[QString("can_edit")]);
    m_can_edit_isSet = !json[QString("can_edit")].isNull() && m_can_edit_isValid;

    m_can_view_isValid = ::OpenAPI::fromJsonValue(m_can_view, json[QString("can_view")]);
    m_can_view_isSet = !json[QString("can_view")].isNull() && m_can_view_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIPermission_type::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPermission_type::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_created_by_isSet) {
        obj.insert(QString("created_by"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_updated_by_isSet) {
        obj.insert(QString("updated_by"), ::OpenAPI::toJsonValue(m_updated_by));
    }
    if (m_can_add_collaborators_isSet) {
        obj.insert(QString("can_add_collaborators"), ::OpenAPI::toJsonValue(m_can_add_collaborators));
    }
    if (m_can_delete_isSet) {
        obj.insert(QString("can_delete"), ::OpenAPI::toJsonValue(m_can_delete));
    }
    if (m_can_edit_isSet) {
        obj.insert(QString("can_edit"), ::OpenAPI::toJsonValue(m_can_edit));
    }
    if (m_can_view_isSet) {
        obj.insert(QString("can_view"), ::OpenAPI::toJsonValue(m_can_view));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QDateTime OAIPermission_type::getCreatedAt() const {
    return m_created_at;
}
void OAIPermission_type::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIPermission_type::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIPermission_type::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIPermission_type::getCreatedBy() const {
    return m_created_by;
}
void OAIPermission_type::setCreatedBy(const QString &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIPermission_type::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIPermission_type::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QString OAIPermission_type::getId() const {
    return m_id;
}
void OAIPermission_type::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPermission_type::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPermission_type::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIPermission_type::getUpdatedAt() const {
    return m_updated_at;
}
void OAIPermission_type::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIPermission_type::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIPermission_type::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAIPermission_type::getUpdatedBy() const {
    return m_updated_by;
}
void OAIPermission_type::setUpdatedBy(const QString &updated_by) {
    m_updated_by = updated_by;
    m_updated_by_isSet = true;
}

bool OAIPermission_type::is_updated_by_Set() const{
    return m_updated_by_isSet;
}

bool OAIPermission_type::is_updated_by_Valid() const{
    return m_updated_by_isValid;
}

bool OAIPermission_type::isCanAddCollaborators() const {
    return m_can_add_collaborators;
}
void OAIPermission_type::setCanAddCollaborators(const bool &can_add_collaborators) {
    m_can_add_collaborators = can_add_collaborators;
    m_can_add_collaborators_isSet = true;
}

bool OAIPermission_type::is_can_add_collaborators_Set() const{
    return m_can_add_collaborators_isSet;
}

bool OAIPermission_type::is_can_add_collaborators_Valid() const{
    return m_can_add_collaborators_isValid;
}

bool OAIPermission_type::isCanDelete() const {
    return m_can_delete;
}
void OAIPermission_type::setCanDelete(const bool &can_delete) {
    m_can_delete = can_delete;
    m_can_delete_isSet = true;
}

bool OAIPermission_type::is_can_delete_Set() const{
    return m_can_delete_isSet;
}

bool OAIPermission_type::is_can_delete_Valid() const{
    return m_can_delete_isValid;
}

bool OAIPermission_type::isCanEdit() const {
    return m_can_edit;
}
void OAIPermission_type::setCanEdit(const bool &can_edit) {
    m_can_edit = can_edit;
    m_can_edit_isSet = true;
}

bool OAIPermission_type::is_can_edit_Set() const{
    return m_can_edit_isSet;
}

bool OAIPermission_type::is_can_edit_Valid() const{
    return m_can_edit_isValid;
}

bool OAIPermission_type::isCanView() const {
    return m_can_view;
}
void OAIPermission_type::setCanView(const bool &can_view) {
    m_can_view = can_view;
    m_can_view_isSet = true;
}

bool OAIPermission_type::is_can_view_Set() const{
    return m_can_view_isSet;
}

bool OAIPermission_type::is_can_view_Valid() const{
    return m_can_view_isValid;
}

QString OAIPermission_type::getName() const {
    return m_name;
}
void OAIPermission_type::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPermission_type::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPermission_type::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIPermission_type::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_add_collaborators_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_delete_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_edit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_view_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPermission_type::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
