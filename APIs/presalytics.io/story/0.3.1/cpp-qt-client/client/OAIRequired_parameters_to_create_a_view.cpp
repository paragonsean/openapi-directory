/**
 * Story
 * This API is the main entry point for creating, editing and publishing analytics throught the Presalytics API
 *
 * The version of the OpenAPI document: 0.3.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRequired_parameters_to_create_a_view.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRequired_parameters_to_create_a_view::OAIRequired_parameters_to_create_a_view(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRequired_parameters_to_create_a_view::OAIRequired_parameters_to_create_a_view() {
    this->initializeModel();
}

OAIRequired_parameters_to_create_a_view::~OAIRequired_parameters_to_create_a_view() {}

void OAIRequired_parameters_to_create_a_view::initializeModel() {

    m_active_m_secs_isSet = false;
    m_active_m_secs_isValid = false;

    m_additional_isSet = false;
    m_additional_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_page_number_isSet = false;
    m_page_number_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;
}

void OAIRequired_parameters_to_create_a_view::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRequired_parameters_to_create_a_view::fromJsonObject(QJsonObject json) {

    m_active_m_secs_isValid = ::OpenAPI::fromJsonValue(m_active_m_secs, json[QString("activeMSecs")]);
    m_active_m_secs_isSet = !json[QString("activeMSecs")].isNull() && m_active_m_secs_isValid;

    m_additional_isValid = ::OpenAPI::fromJsonValue(m_additional, json[QString("additional")]);
    m_additional_isSet = !json[QString("additional")].isNull() && m_additional_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_page_number_isValid = ::OpenAPI::fromJsonValue(m_page_number, json[QString("pageNumber")]);
    m_page_number_isSet = !json[QString("pageNumber")].isNull() && m_page_number_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;
}

QString OAIRequired_parameters_to_create_a_view::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRequired_parameters_to_create_a_view::asJsonObject() const {
    QJsonObject obj;
    if (m_active_m_secs_isSet) {
        obj.insert(QString("activeMSecs"), ::OpenAPI::toJsonValue(m_active_m_secs));
    }
    if (m_additional_isSet) {
        obj.insert(QString("additional"), ::OpenAPI::toJsonValue(m_additional));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_page_number_isSet) {
        obj.insert(QString("pageNumber"), ::OpenAPI::toJsonValue(m_page_number));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    return obj;
}

qint32 OAIRequired_parameters_to_create_a_view::getActiveMSecs() const {
    return m_active_m_secs;
}
void OAIRequired_parameters_to_create_a_view::setActiveMSecs(const qint32 &active_m_secs) {
    m_active_m_secs = active_m_secs;
    m_active_m_secs_isSet = true;
}

bool OAIRequired_parameters_to_create_a_view::is_active_m_secs_Set() const{
    return m_active_m_secs_isSet;
}

bool OAIRequired_parameters_to_create_a_view::is_active_m_secs_Valid() const{
    return m_active_m_secs_isValid;
}

QString OAIRequired_parameters_to_create_a_view::getAdditional() const {
    return m_additional;
}
void OAIRequired_parameters_to_create_a_view::setAdditional(const QString &additional) {
    m_additional = additional;
    m_additional_isSet = true;
}

bool OAIRequired_parameters_to_create_a_view::is_additional_Set() const{
    return m_additional_isSet;
}

bool OAIRequired_parameters_to_create_a_view::is_additional_Valid() const{
    return m_additional_isValid;
}

QDateTime OAIRequired_parameters_to_create_a_view::getEndTime() const {
    return m_end_time;
}
void OAIRequired_parameters_to_create_a_view::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIRequired_parameters_to_create_a_view::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIRequired_parameters_to_create_a_view::is_end_time_Valid() const{
    return m_end_time_isValid;
}

qint32 OAIRequired_parameters_to_create_a_view::getPageNumber() const {
    return m_page_number;
}
void OAIRequired_parameters_to_create_a_view::setPageNumber(const qint32 &page_number) {
    m_page_number = page_number;
    m_page_number_isSet = true;
}

bool OAIRequired_parameters_to_create_a_view::is_page_number_Set() const{
    return m_page_number_isSet;
}

bool OAIRequired_parameters_to_create_a_view::is_page_number_Valid() const{
    return m_page_number_isValid;
}

QDateTime OAIRequired_parameters_to_create_a_view::getStartTime() const {
    return m_start_time;
}
void OAIRequired_parameters_to_create_a_view::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIRequired_parameters_to_create_a_view::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIRequired_parameters_to_create_a_view::is_start_time_Valid() const{
    return m_start_time_isValid;
}

bool OAIRequired_parameters_to_create_a_view::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_m_secs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRequired_parameters_to_create_a_view::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_end_time_isValid && m_page_number_isValid && m_start_time_isValid && true;
}

} // namespace OpenAPI
