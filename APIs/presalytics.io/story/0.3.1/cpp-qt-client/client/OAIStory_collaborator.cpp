/**
 * Story
 * This API is the main entry point for creating, editing and publishing analytics throught the Presalytics API
 *
 * The version of the OpenAPI document: 0.3.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStory_collaborator.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStory_collaborator::OAIStory_collaborator(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStory_collaborator::OAIStory_collaborator() {
    this->initializeModel();
}

OAIStory_collaborator::~OAIStory_collaborator() {}

void OAIStory_collaborator::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_updated_by_isSet = false;
    m_updated_by_isValid = false;

    m_active_isSet = false;
    m_active_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_lead_id_isSet = false;
    m_lead_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_permission_type_isSet = false;
    m_permission_type_isValid = false;

    m_permission_type_id_isSet = false;
    m_permission_type_id_isValid = false;

    m_story_id_isSet = false;
    m_story_id_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIStory_collaborator::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStory_collaborator::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("created_by")]);
    m_created_by_isSet = !json[QString("created_by")].isNull() && m_created_by_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_updated_by_isValid = ::OpenAPI::fromJsonValue(m_updated_by, json[QString("updated_by")]);
    m_updated_by_isSet = !json[QString("updated_by")].isNull() && m_updated_by_isValid;

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_lead_id_isValid = ::OpenAPI::fromJsonValue(m_lead_id, json[QString("lead_id")]);
    m_lead_id_isSet = !json[QString("lead_id")].isNull() && m_lead_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_permission_type_isValid = ::OpenAPI::fromJsonValue(m_permission_type, json[QString("permission_type")]);
    m_permission_type_isSet = !json[QString("permission_type")].isNull() && m_permission_type_isValid;

    m_permission_type_id_isValid = ::OpenAPI::fromJsonValue(m_permission_type_id, json[QString("permission_type_id")]);
    m_permission_type_id_isSet = !json[QString("permission_type_id")].isNull() && m_permission_type_id_isValid;

    m_story_id_isValid = ::OpenAPI::fromJsonValue(m_story_id, json[QString("story_id")]);
    m_story_id_isSet = !json[QString("story_id")].isNull() && m_story_id_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;
}

QString OAIStory_collaborator::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStory_collaborator::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_created_by_isSet) {
        obj.insert(QString("created_by"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_updated_by_isSet) {
        obj.insert(QString("updated_by"), ::OpenAPI::toJsonValue(m_updated_by));
    }
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_lead_id_isSet) {
        obj.insert(QString("lead_id"), ::OpenAPI::toJsonValue(m_lead_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_permission_type.isSet()) {
        obj.insert(QString("permission_type"), ::OpenAPI::toJsonValue(m_permission_type));
    }
    if (m_permission_type_id_isSet) {
        obj.insert(QString("permission_type_id"), ::OpenAPI::toJsonValue(m_permission_type_id));
    }
    if (m_story_id_isSet) {
        obj.insert(QString("story_id"), ::OpenAPI::toJsonValue(m_story_id));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QDateTime OAIStory_collaborator::getCreatedAt() const {
    return m_created_at;
}
void OAIStory_collaborator::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIStory_collaborator::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIStory_collaborator::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIStory_collaborator::getCreatedBy() const {
    return m_created_by;
}
void OAIStory_collaborator::setCreatedBy(const QString &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIStory_collaborator::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIStory_collaborator::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QString OAIStory_collaborator::getId() const {
    return m_id;
}
void OAIStory_collaborator::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIStory_collaborator::is_id_Set() const{
    return m_id_isSet;
}

bool OAIStory_collaborator::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIStory_collaborator::getUpdatedAt() const {
    return m_updated_at;
}
void OAIStory_collaborator::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIStory_collaborator::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIStory_collaborator::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAIStory_collaborator::getUpdatedBy() const {
    return m_updated_by;
}
void OAIStory_collaborator::setUpdatedBy(const QString &updated_by) {
    m_updated_by = updated_by;
    m_updated_by_isSet = true;
}

bool OAIStory_collaborator::is_updated_by_Set() const{
    return m_updated_by_isSet;
}

bool OAIStory_collaborator::is_updated_by_Valid() const{
    return m_updated_by_isValid;
}

bool OAIStory_collaborator::isActive() const {
    return m_active;
}
void OAIStory_collaborator::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIStory_collaborator::is_active_Set() const{
    return m_active_isSet;
}

bool OAIStory_collaborator::is_active_Valid() const{
    return m_active_isValid;
}

QString OAIStory_collaborator::getEmail() const {
    return m_email;
}
void OAIStory_collaborator::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIStory_collaborator::is_email_Set() const{
    return m_email_isSet;
}

bool OAIStory_collaborator::is_email_Valid() const{
    return m_email_isValid;
}

qint32 OAIStory_collaborator::getLeadId() const {
    return m_lead_id;
}
void OAIStory_collaborator::setLeadId(const qint32 &lead_id) {
    m_lead_id = lead_id;
    m_lead_id_isSet = true;
}

bool OAIStory_collaborator::is_lead_id_Set() const{
    return m_lead_id_isSet;
}

bool OAIStory_collaborator::is_lead_id_Valid() const{
    return m_lead_id_isValid;
}

QString OAIStory_collaborator::getName() const {
    return m_name;
}
void OAIStory_collaborator::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIStory_collaborator::is_name_Set() const{
    return m_name_isSet;
}

bool OAIStory_collaborator::is_name_Valid() const{
    return m_name_isValid;
}

OAIPermission_type OAIStory_collaborator::getPermissionType() const {
    return m_permission_type;
}
void OAIStory_collaborator::setPermissionType(const OAIPermission_type &permission_type) {
    m_permission_type = permission_type;
    m_permission_type_isSet = true;
}

bool OAIStory_collaborator::is_permission_type_Set() const{
    return m_permission_type_isSet;
}

bool OAIStory_collaborator::is_permission_type_Valid() const{
    return m_permission_type_isValid;
}

QString OAIStory_collaborator::getPermissionTypeId() const {
    return m_permission_type_id;
}
void OAIStory_collaborator::setPermissionTypeId(const QString &permission_type_id) {
    m_permission_type_id = permission_type_id;
    m_permission_type_id_isSet = true;
}

bool OAIStory_collaborator::is_permission_type_id_Set() const{
    return m_permission_type_id_isSet;
}

bool OAIStory_collaborator::is_permission_type_id_Valid() const{
    return m_permission_type_id_isValid;
}

QString OAIStory_collaborator::getStoryId() const {
    return m_story_id;
}
void OAIStory_collaborator::setStoryId(const QString &story_id) {
    m_story_id = story_id;
    m_story_id_isSet = true;
}

bool OAIStory_collaborator::is_story_id_Set() const{
    return m_story_id_isSet;
}

bool OAIStory_collaborator::is_story_id_Valid() const{
    return m_story_id_isValid;
}

QString OAIStory_collaborator::getUserId() const {
    return m_user_id;
}
void OAIStory_collaborator::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIStory_collaborator::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIStory_collaborator::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIStory_collaborator::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lead_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permission_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_permission_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_story_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStory_collaborator::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
