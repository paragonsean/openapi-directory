/**
 * Story
 * This API is the main entry point for creating, editing and publishing analytics throught the Presalytics API
 *
 * The version of the OpenAPI document: 0.3.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIStoryCollaboratorsApi_H
#define OAI_OAIStoryCollaboratorsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAdd_new_collaborator_request.h"
#include "OAIModify_inactive_collaborator.h"
#include "OAIProblem_detail.h"
#include "OAIStory_collaborator.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIStoryCollaboratorsApi : public QObject {
    Q_OBJECT

public:
    OAIStoryCollaboratorsApi(const int timeOut = 0);
    ~OAIStoryCollaboratorsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    */
    virtual void storyIdCollaboratorsGet(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_modify_inactive_collaborator OAIModify_inactive_collaborator [required]
    */
    virtual void storyIdCollaboratorsInactivePost(const QString &id, const OAIModify_inactive_collaborator &oai_modify_inactive_collaborator);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_add_new_collaborator_request OAIAdd_new_collaborator_request [required]
    */
    virtual void storyIdCollaboratorsPost(const QString &id, const OAIAdd_new_collaborator_request &oai_add_new_collaborator_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  story_collaborator_userid QString [required]
    */
    virtual void storyIdCollaboratorsUseridDelete(const QString &id, const QString &story_collaborator_userid);

    /**
    * @param[in]  id QString [required]
    * @param[in]  story_collaborator_userid QString [required]
    */
    virtual void storyIdCollaboratorsUseridGet(const QString &id, const QString &story_collaborator_userid);

    /**
    * @param[in]  id QString [required]
    * @param[in]  story_collaborator_userid QString [required]
    * @param[in]  oai_story_collaborator OAIStory_collaborator [required]
    */
    virtual void storyIdCollaboratorsUseridPut(const QString &id, const QString &story_collaborator_userid, const OAIStory_collaborator &oai_story_collaborator);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void storyIdCollaboratorsGetCallback(OAIHttpRequestWorker *worker);
    void storyIdCollaboratorsInactivePostCallback(OAIHttpRequestWorker *worker);
    void storyIdCollaboratorsPostCallback(OAIHttpRequestWorker *worker);
    void storyIdCollaboratorsUseridDeleteCallback(OAIHttpRequestWorker *worker);
    void storyIdCollaboratorsUseridGetCallback(OAIHttpRequestWorker *worker);
    void storyIdCollaboratorsUseridPutCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void storyIdCollaboratorsGetSignal(QList<OAIStory_collaborator> summary);
    void storyIdCollaboratorsInactivePostSignal(OAIStory_collaborator summary);
    void storyIdCollaboratorsPostSignal(OAIStory_collaborator summary);
    void storyIdCollaboratorsUseridDeleteSignal();
    void storyIdCollaboratorsUseridGetSignal(OAIStory_collaborator summary);
    void storyIdCollaboratorsUseridPutSignal(OAIStory_collaborator summary);


    void storyIdCollaboratorsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIStory_collaborator> summary);
    void storyIdCollaboratorsInactivePostSignalFull(OAIHttpRequestWorker *worker, OAIStory_collaborator summary);
    void storyIdCollaboratorsPostSignalFull(OAIHttpRequestWorker *worker, OAIStory_collaborator summary);
    void storyIdCollaboratorsUseridDeleteSignalFull(OAIHttpRequestWorker *worker);
    void storyIdCollaboratorsUseridGetSignalFull(OAIHttpRequestWorker *worker, OAIStory_collaborator summary);
    void storyIdCollaboratorsUseridPutSignalFull(OAIHttpRequestWorker *worker, OAIStory_collaborator summary);

    Q_DECL_DEPRECATED_X("Use storyIdCollaboratorsGetSignalError() instead")
    void storyIdCollaboratorsGetSignalE(QList<OAIStory_collaborator> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void storyIdCollaboratorsGetSignalError(QList<OAIStory_collaborator> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storyIdCollaboratorsInactivePostSignalError() instead")
    void storyIdCollaboratorsInactivePostSignalE(OAIStory_collaborator summary, QNetworkReply::NetworkError error_type, QString error_str);
    void storyIdCollaboratorsInactivePostSignalError(OAIStory_collaborator summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storyIdCollaboratorsPostSignalError() instead")
    void storyIdCollaboratorsPostSignalE(OAIStory_collaborator summary, QNetworkReply::NetworkError error_type, QString error_str);
    void storyIdCollaboratorsPostSignalError(OAIStory_collaborator summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storyIdCollaboratorsUseridDeleteSignalError() instead")
    void storyIdCollaboratorsUseridDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void storyIdCollaboratorsUseridDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storyIdCollaboratorsUseridGetSignalError() instead")
    void storyIdCollaboratorsUseridGetSignalE(OAIStory_collaborator summary, QNetworkReply::NetworkError error_type, QString error_str);
    void storyIdCollaboratorsUseridGetSignalError(OAIStory_collaborator summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storyIdCollaboratorsUseridPutSignalError() instead")
    void storyIdCollaboratorsUseridPutSignalE(OAIStory_collaborator summary, QNetworkReply::NetworkError error_type, QString error_str);
    void storyIdCollaboratorsUseridPutSignalError(OAIStory_collaborator summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use storyIdCollaboratorsGetSignalErrorFull() instead")
    void storyIdCollaboratorsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storyIdCollaboratorsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storyIdCollaboratorsInactivePostSignalErrorFull() instead")
    void storyIdCollaboratorsInactivePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storyIdCollaboratorsInactivePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storyIdCollaboratorsPostSignalErrorFull() instead")
    void storyIdCollaboratorsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storyIdCollaboratorsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storyIdCollaboratorsUseridDeleteSignalErrorFull() instead")
    void storyIdCollaboratorsUseridDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storyIdCollaboratorsUseridDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storyIdCollaboratorsUseridGetSignalErrorFull() instead")
    void storyIdCollaboratorsUseridGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storyIdCollaboratorsUseridGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storyIdCollaboratorsUseridPutSignalErrorFull() instead")
    void storyIdCollaboratorsUseridPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storyIdCollaboratorsUseridPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
