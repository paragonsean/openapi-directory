/**
 * Story
 * This API is the main entry point for creating, editing and publishing analytics throught the Presalytics API
 *
 * The version of the OpenAPI document: 0.3.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreate_session_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreate_session_request::OAICreate_session_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreate_session_request::OAICreate_session_request() {
    this->initializeModel();
}

OAICreate_session_request::~OAICreate_session_request() {}

void OAICreate_session_request::initializeModel() {

    m_collaborator_user_id_isSet = false;
    m_collaborator_user_id_isValid = false;

    m_host_isSet = false;
    m_host_isValid = false;
}

void OAICreate_session_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreate_session_request::fromJsonObject(QJsonObject json) {

    m_collaborator_user_id_isValid = ::OpenAPI::fromJsonValue(m_collaborator_user_id, json[QString("collaboratorUserId")]);
    m_collaborator_user_id_isSet = !json[QString("collaboratorUserId")].isNull() && m_collaborator_user_id_isValid;

    m_host_isValid = ::OpenAPI::fromJsonValue(m_host, json[QString("host")]);
    m_host_isSet = !json[QString("host")].isNull() && m_host_isValid;
}

QString OAICreate_session_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreate_session_request::asJsonObject() const {
    QJsonObject obj;
    if (m_collaborator_user_id_isSet) {
        obj.insert(QString("collaboratorUserId"), ::OpenAPI::toJsonValue(m_collaborator_user_id));
    }
    if (m_host_isSet) {
        obj.insert(QString("host"), ::OpenAPI::toJsonValue(m_host));
    }
    return obj;
}

QString OAICreate_session_request::getCollaboratorUserId() const {
    return m_collaborator_user_id;
}
void OAICreate_session_request::setCollaboratorUserId(const QString &collaborator_user_id) {
    m_collaborator_user_id = collaborator_user_id;
    m_collaborator_user_id_isSet = true;
}

bool OAICreate_session_request::is_collaborator_user_id_Set() const{
    return m_collaborator_user_id_isSet;
}

bool OAICreate_session_request::is_collaborator_user_id_Valid() const{
    return m_collaborator_user_id_isValid;
}

QString OAICreate_session_request::getHost() const {
    return m_host;
}
void OAICreate_session_request::setHost(const QString &host) {
    m_host = host;
    m_host_isSet = true;
}

bool OAICreate_session_request::is_host_Set() const{
    return m_host_isSet;
}

bool OAICreate_session_request::is_host_Valid() const{
    return m_host_isValid;
}

bool OAICreate_session_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_collaborator_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreate_session_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
