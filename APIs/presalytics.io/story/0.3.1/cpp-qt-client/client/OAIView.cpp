/**
 * Story
 * This API is the main entry point for creating, editing and publishing analytics throught the Presalytics API
 *
 * The version of the OpenAPI document: 0.3.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIView.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIView::OAIView(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIView::OAIView() {
    this->initializeModel();
}

OAIView::~OAIView() {}

void OAIView::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_updated_by_isSet = false;
    m_updated_by_isValid = false;

    m_active_msecs_isSet = false;
    m_active_msecs_isValid = false;

    m_additional_isSet = false;
    m_additional_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_page_number_isSet = false;
    m_page_number_isValid = false;

    m_session_id_isSet = false;
    m_session_id_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_total_msecs_isSet = false;
    m_total_msecs_isValid = false;
}

void OAIView::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIView::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("created_by")]);
    m_created_by_isSet = !json[QString("created_by")].isNull() && m_created_by_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_updated_by_isValid = ::OpenAPI::fromJsonValue(m_updated_by, json[QString("updated_by")]);
    m_updated_by_isSet = !json[QString("updated_by")].isNull() && m_updated_by_isValid;

    m_active_msecs_isValid = ::OpenAPI::fromJsonValue(m_active_msecs, json[QString("active_msecs")]);
    m_active_msecs_isSet = !json[QString("active_msecs")].isNull() && m_active_msecs_isValid;

    m_additional_isValid = ::OpenAPI::fromJsonValue(m_additional, json[QString("additional")]);
    m_additional_isSet = !json[QString("additional")].isNull() && m_additional_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("end_time")]);
    m_end_time_isSet = !json[QString("end_time")].isNull() && m_end_time_isValid;

    m_page_number_isValid = ::OpenAPI::fromJsonValue(m_page_number, json[QString("page_number")]);
    m_page_number_isSet = !json[QString("page_number")].isNull() && m_page_number_isValid;

    m_session_id_isValid = ::OpenAPI::fromJsonValue(m_session_id, json[QString("session_id")]);
    m_session_id_isSet = !json[QString("session_id")].isNull() && m_session_id_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("start_time")]);
    m_start_time_isSet = !json[QString("start_time")].isNull() && m_start_time_isValid;

    m_total_msecs_isValid = ::OpenAPI::fromJsonValue(m_total_msecs, json[QString("total_msecs")]);
    m_total_msecs_isSet = !json[QString("total_msecs")].isNull() && m_total_msecs_isValid;
}

QString OAIView::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIView::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_created_by_isSet) {
        obj.insert(QString("created_by"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_updated_by_isSet) {
        obj.insert(QString("updated_by"), ::OpenAPI::toJsonValue(m_updated_by));
    }
    if (m_active_msecs_isSet) {
        obj.insert(QString("active_msecs"), ::OpenAPI::toJsonValue(m_active_msecs));
    }
    if (m_additional_isSet) {
        obj.insert(QString("additional"), ::OpenAPI::toJsonValue(m_additional));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("end_time"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_page_number_isSet) {
        obj.insert(QString("page_number"), ::OpenAPI::toJsonValue(m_page_number));
    }
    if (m_session_id_isSet) {
        obj.insert(QString("session_id"), ::OpenAPI::toJsonValue(m_session_id));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("start_time"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_total_msecs_isSet) {
        obj.insert(QString("total_msecs"), ::OpenAPI::toJsonValue(m_total_msecs));
    }
    return obj;
}

QDateTime OAIView::getCreatedAt() const {
    return m_created_at;
}
void OAIView::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIView::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIView::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIView::getCreatedBy() const {
    return m_created_by;
}
void OAIView::setCreatedBy(const QString &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIView::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIView::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QString OAIView::getId() const {
    return m_id;
}
void OAIView::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIView::is_id_Set() const{
    return m_id_isSet;
}

bool OAIView::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIView::getUpdatedAt() const {
    return m_updated_at;
}
void OAIView::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIView::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIView::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAIView::getUpdatedBy() const {
    return m_updated_by;
}
void OAIView::setUpdatedBy(const QString &updated_by) {
    m_updated_by = updated_by;
    m_updated_by_isSet = true;
}

bool OAIView::is_updated_by_Set() const{
    return m_updated_by_isSet;
}

bool OAIView::is_updated_by_Valid() const{
    return m_updated_by_isValid;
}

qint32 OAIView::getActiveMsecs() const {
    return m_active_msecs;
}
void OAIView::setActiveMsecs(const qint32 &active_msecs) {
    m_active_msecs = active_msecs;
    m_active_msecs_isSet = true;
}

bool OAIView::is_active_msecs_Set() const{
    return m_active_msecs_isSet;
}

bool OAIView::is_active_msecs_Valid() const{
    return m_active_msecs_isValid;
}

QString OAIView::getAdditional() const {
    return m_additional;
}
void OAIView::setAdditional(const QString &additional) {
    m_additional = additional;
    m_additional_isSet = true;
}

bool OAIView::is_additional_Set() const{
    return m_additional_isSet;
}

bool OAIView::is_additional_Valid() const{
    return m_additional_isValid;
}

QDateTime OAIView::getEndTime() const {
    return m_end_time;
}
void OAIView::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIView::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIView::is_end_time_Valid() const{
    return m_end_time_isValid;
}

qint32 OAIView::getPageNumber() const {
    return m_page_number;
}
void OAIView::setPageNumber(const qint32 &page_number) {
    m_page_number = page_number;
    m_page_number_isSet = true;
}

bool OAIView::is_page_number_Set() const{
    return m_page_number_isSet;
}

bool OAIView::is_page_number_Valid() const{
    return m_page_number_isValid;
}

QString OAIView::getSessionId() const {
    return m_session_id;
}
void OAIView::setSessionId(const QString &session_id) {
    m_session_id = session_id;
    m_session_id_isSet = true;
}

bool OAIView::is_session_id_Set() const{
    return m_session_id_isSet;
}

bool OAIView::is_session_id_Valid() const{
    return m_session_id_isValid;
}

QDateTime OAIView::getStartTime() const {
    return m_start_time;
}
void OAIView::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIView::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIView::is_start_time_Valid() const{
    return m_start_time_isValid;
}

qint32 OAIView::getTotalMsecs() const {
    return m_total_msecs;
}
void OAIView::setTotalMsecs(const qint32 &total_msecs) {
    m_total_msecs = total_msecs;
    m_total_msecs_isSet = true;
}

bool OAIView::is_total_msecs_Set() const{
    return m_total_msecs_isSet;
}

bool OAIView::is_total_msecs_Valid() const{
    return m_total_msecs_isValid;
}

bool OAIView::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_msecs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_msecs_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIView::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
