/**
 * Story
 * This API is the main entry point for creating, editing and publishing analytics throught the Presalytics API
 *
 * The version of the OpenAPI document: 0.3.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICollaborator_bulk_update_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICollaborator_bulk_update_request::OAICollaborator_bulk_update_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICollaborator_bulk_update_request::OAICollaborator_bulk_update_request() {
    this->initializeModel();
}

OAICollaborator_bulk_update_request::~OAICollaborator_bulk_update_request() {}

void OAICollaborator_bulk_update_request::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_lead_id_isSet = false;
    m_lead_id_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAICollaborator_bulk_update_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICollaborator_bulk_update_request::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_lead_id_isValid = ::OpenAPI::fromJsonValue(m_lead_id, json[QString("lead_id")]);
    m_lead_id_isSet = !json[QString("lead_id")].isNull() && m_lead_id_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;
}

QString OAICollaborator_bulk_update_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICollaborator_bulk_update_request::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_lead_id_isSet) {
        obj.insert(QString("lead_id"), ::OpenAPI::toJsonValue(m_lead_id));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

bool OAICollaborator_bulk_update_request::isActive() const {
    return m_active;
}
void OAICollaborator_bulk_update_request::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAICollaborator_bulk_update_request::is_active_Set() const{
    return m_active_isSet;
}

bool OAICollaborator_bulk_update_request::is_active_Valid() const{
    return m_active_isValid;
}

qint32 OAICollaborator_bulk_update_request::getLeadId() const {
    return m_lead_id;
}
void OAICollaborator_bulk_update_request::setLeadId(const qint32 &lead_id) {
    m_lead_id = lead_id;
    m_lead_id_isSet = true;
}

bool OAICollaborator_bulk_update_request::is_lead_id_Set() const{
    return m_lead_id_isSet;
}

bool OAICollaborator_bulk_update_request::is_lead_id_Valid() const{
    return m_lead_id_isValid;
}

QString OAICollaborator_bulk_update_request::getUserId() const {
    return m_user_id;
}
void OAICollaborator_bulk_update_request::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAICollaborator_bulk_update_request::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAICollaborator_bulk_update_request::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAICollaborator_bulk_update_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lead_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICollaborator_bulk_update_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
