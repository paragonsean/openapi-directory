/**
 * Story
 * This API is the main entry point for creating, editing and publishing analytics throught the Presalytics API
 *
 * The version of the OpenAPI document: 0.3.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFile_upload.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFile_upload::OAIFile_upload(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFile_upload::OAIFile_upload() {
    this->initializeModel();
}

OAIFile_upload::~OAIFile_upload() {}

void OAIFile_upload::initializeModel() {

    m_content_length_isSet = false;
    m_content_length_isValid = false;

    m_file_isSet = false;
    m_file_isValid = false;

    m_file_name_isSet = false;
    m_file_name_isValid = false;

    m_mimetype_isSet = false;
    m_mimetype_isValid = false;
}

void OAIFile_upload::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFile_upload::fromJsonObject(QJsonObject json) {

    m_content_length_isValid = ::OpenAPI::fromJsonValue(m_content_length, json[QString("content_length")]);
    m_content_length_isSet = !json[QString("content_length")].isNull() && m_content_length_isValid;

    m_file_isValid = ::OpenAPI::fromJsonValue(m_file, json[QString("file")]);
    m_file_isSet = !json[QString("file")].isNull() && m_file_isValid;

    m_file_name_isValid = ::OpenAPI::fromJsonValue(m_file_name, json[QString("file_name")]);
    m_file_name_isSet = !json[QString("file_name")].isNull() && m_file_name_isValid;

    m_mimetype_isValid = ::OpenAPI::fromJsonValue(m_mimetype, json[QString("mimetype")]);
    m_mimetype_isSet = !json[QString("mimetype")].isNull() && m_mimetype_isValid;
}

QString OAIFile_upload::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFile_upload::asJsonObject() const {
    QJsonObject obj;
    if (m_content_length_isSet) {
        obj.insert(QString("content_length"), ::OpenAPI::toJsonValue(m_content_length));
    }
    if (m_file_isSet) {
        obj.insert(QString("file"), ::OpenAPI::toJsonValue(m_file));
    }
    if (m_file_name_isSet) {
        obj.insert(QString("file_name"), ::OpenAPI::toJsonValue(m_file_name));
    }
    if (m_mimetype_isSet) {
        obj.insert(QString("mimetype"), ::OpenAPI::toJsonValue(m_mimetype));
    }
    return obj;
}

qint32 OAIFile_upload::getContentLength() const {
    return m_content_length;
}
void OAIFile_upload::setContentLength(const qint32 &content_length) {
    m_content_length = content_length;
    m_content_length_isSet = true;
}

bool OAIFile_upload::is_content_length_Set() const{
    return m_content_length_isSet;
}

bool OAIFile_upload::is_content_length_Valid() const{
    return m_content_length_isValid;
}

QString OAIFile_upload::getFile() const {
    return m_file;
}
void OAIFile_upload::setFile(const QString &file) {
    m_file = file;
    m_file_isSet = true;
}

bool OAIFile_upload::is_file_Set() const{
    return m_file_isSet;
}

bool OAIFile_upload::is_file_Valid() const{
    return m_file_isValid;
}

QString OAIFile_upload::getFileName() const {
    return m_file_name;
}
void OAIFile_upload::setFileName(const QString &file_name) {
    m_file_name = file_name;
    m_file_name_isSet = true;
}

bool OAIFile_upload::is_file_name_Set() const{
    return m_file_name_isSet;
}

bool OAIFile_upload::is_file_name_Valid() const{
    return m_file_name_isValid;
}

QString OAIFile_upload::getMimetype() const {
    return m_mimetype;
}
void OAIFile_upload::setMimetype(const QString &mimetype) {
    m_mimetype = mimetype;
    m_mimetype_isSet = true;
}

bool OAIFile_upload::is_mimetype_Set() const{
    return m_mimetype_isSet;
}

bool OAIFile_upload::is_mimetype_Valid() const{
    return m_mimetype_isValid;
}

bool OAIFile_upload::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mimetype_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFile_upload::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
