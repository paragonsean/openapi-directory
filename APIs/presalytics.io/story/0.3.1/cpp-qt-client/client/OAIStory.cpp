/**
 * Story
 * This API is the main entry point for creating, editing and publishing analytics throught the Presalytics API
 *
 * The version of the OpenAPI document: 0.3.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStory.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStory::OAIStory(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStory::OAIStory() {
    this->initializeModel();
}

OAIStory::~OAIStory() {}

void OAIStory::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_updated_by_isSet = false;
    m_updated_by_isValid = false;

    m_collaborators_isSet = false;
    m_collaborators_isValid = false;

    m_is_public_isSet = false;
    m_is_public_isValid = false;

    m_ooxml_documents_isSet = false;
    m_ooxml_documents_isValid = false;

    m_outline_isSet = false;
    m_outline_isValid = false;

    m_outline_history_isSet = false;
    m_outline_history_isValid = false;

    m_revision_isSet = false;
    m_revision_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIStory::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStory::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("created_by")]);
    m_created_by_isSet = !json[QString("created_by")].isNull() && m_created_by_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_updated_by_isValid = ::OpenAPI::fromJsonValue(m_updated_by, json[QString("updated_by")]);
    m_updated_by_isSet = !json[QString("updated_by")].isNull() && m_updated_by_isValid;

    m_collaborators_isValid = ::OpenAPI::fromJsonValue(m_collaborators, json[QString("collaborators")]);
    m_collaborators_isSet = !json[QString("collaborators")].isNull() && m_collaborators_isValid;

    m_is_public_isValid = ::OpenAPI::fromJsonValue(m_is_public, json[QString("is_public")]);
    m_is_public_isSet = !json[QString("is_public")].isNull() && m_is_public_isValid;

    m_ooxml_documents_isValid = ::OpenAPI::fromJsonValue(m_ooxml_documents, json[QString("ooxml_documents")]);
    m_ooxml_documents_isSet = !json[QString("ooxml_documents")].isNull() && m_ooxml_documents_isValid;

    m_outline_isValid = ::OpenAPI::fromJsonValue(m_outline, json[QString("outline")]);
    m_outline_isSet = !json[QString("outline")].isNull() && m_outline_isValid;

    m_outline_history_isValid = ::OpenAPI::fromJsonValue(m_outline_history, json[QString("outline_history")]);
    m_outline_history_isSet = !json[QString("outline_history")].isNull() && m_outline_history_isValid;

    m_revision_isValid = ::OpenAPI::fromJsonValue(m_revision, json[QString("revision")]);
    m_revision_isSet = !json[QString("revision")].isNull() && m_revision_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIStory::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStory::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_created_by_isSet) {
        obj.insert(QString("created_by"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_updated_by_isSet) {
        obj.insert(QString("updated_by"), ::OpenAPI::toJsonValue(m_updated_by));
    }
    if (m_collaborators.size() > 0) {
        obj.insert(QString("collaborators"), ::OpenAPI::toJsonValue(m_collaborators));
    }
    if (m_is_public_isSet) {
        obj.insert(QString("is_public"), ::OpenAPI::toJsonValue(m_is_public));
    }
    if (m_ooxml_documents.size() > 0) {
        obj.insert(QString("ooxml_documents"), ::OpenAPI::toJsonValue(m_ooxml_documents));
    }
    if (m_outline_isSet) {
        obj.insert(QString("outline"), ::OpenAPI::toJsonValue(m_outline));
    }
    if (m_outline_history.size() > 0) {
        obj.insert(QString("outline_history"), ::OpenAPI::toJsonValue(m_outline_history));
    }
    if (m_revision_isSet) {
        obj.insert(QString("revision"), ::OpenAPI::toJsonValue(m_revision));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QDateTime OAIStory::getCreatedAt() const {
    return m_created_at;
}
void OAIStory::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIStory::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIStory::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIStory::getCreatedBy() const {
    return m_created_by;
}
void OAIStory::setCreatedBy(const QString &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIStory::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIStory::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QString OAIStory::getId() const {
    return m_id;
}
void OAIStory::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIStory::is_id_Set() const{
    return m_id_isSet;
}

bool OAIStory::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIStory::getUpdatedAt() const {
    return m_updated_at;
}
void OAIStory::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIStory::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIStory::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAIStory::getUpdatedBy() const {
    return m_updated_by;
}
void OAIStory::setUpdatedBy(const QString &updated_by) {
    m_updated_by = updated_by;
    m_updated_by_isSet = true;
}

bool OAIStory::is_updated_by_Set() const{
    return m_updated_by_isSet;
}

bool OAIStory::is_updated_by_Valid() const{
    return m_updated_by_isValid;
}

QList<OAIStory_collaborator> OAIStory::getCollaborators() const {
    return m_collaborators;
}
void OAIStory::setCollaborators(const QList<OAIStory_collaborator> &collaborators) {
    m_collaborators = collaborators;
    m_collaborators_isSet = true;
}

bool OAIStory::is_collaborators_Set() const{
    return m_collaborators_isSet;
}

bool OAIStory::is_collaborators_Valid() const{
    return m_collaborators_isValid;
}

bool OAIStory::isIsPublic() const {
    return m_is_public;
}
void OAIStory::setIsPublic(const bool &is_public) {
    m_is_public = is_public;
    m_is_public_isSet = true;
}

bool OAIStory::is_is_public_Set() const{
    return m_is_public_isSet;
}

bool OAIStory::is_is_public_Valid() const{
    return m_is_public_isValid;
}

QList<OAIOoxml_document> OAIStory::getOoxmlDocuments() const {
    return m_ooxml_documents;
}
void OAIStory::setOoxmlDocuments(const QList<OAIOoxml_document> &ooxml_documents) {
    m_ooxml_documents = ooxml_documents;
    m_ooxml_documents_isSet = true;
}

bool OAIStory::is_ooxml_documents_Set() const{
    return m_ooxml_documents_isSet;
}

bool OAIStory::is_ooxml_documents_Valid() const{
    return m_ooxml_documents_isValid;
}

QString OAIStory::getOutline() const {
    return m_outline;
}
void OAIStory::setOutline(const QString &outline) {
    m_outline = outline;
    m_outline_isSet = true;
}

bool OAIStory::is_outline_Set() const{
    return m_outline_isSet;
}

bool OAIStory::is_outline_Valid() const{
    return m_outline_isValid;
}

QList<OAIStory_outline_history> OAIStory::getOutlineHistory() const {
    return m_outline_history;
}
void OAIStory::setOutlineHistory(const QList<OAIStory_outline_history> &outline_history) {
    m_outline_history = outline_history;
    m_outline_history_isSet = true;
}

bool OAIStory::is_outline_history_Set() const{
    return m_outline_history_isSet;
}

bool OAIStory::is_outline_history_Valid() const{
    return m_outline_history_isValid;
}

qint32 OAIStory::getRevision() const {
    return m_revision;
}
void OAIStory::setRevision(const qint32 &revision) {
    m_revision = revision;
    m_revision_isSet = true;
}

bool OAIStory::is_revision_Set() const{
    return m_revision_isSet;
}

bool OAIStory::is_revision_Valid() const{
    return m_revision_isValid;
}

QString OAIStory::getTitle() const {
    return m_title;
}
void OAIStory::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIStory::is_title_Set() const{
    return m_title_isSet;
}

bool OAIStory::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIStory::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collaborators.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_public_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ooxml_documents.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_outline_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outline_history.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStory::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
