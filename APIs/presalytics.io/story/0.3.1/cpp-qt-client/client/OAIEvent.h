/**
 * Story
 * This API is the main entry point for creating, editing and publishing analytics throught the Presalytics API
 *
 * The version of the OpenAPI document: 0.3.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIEvent.h
 *
 * An Story Event object
 */

#ifndef OAIEvent_H
#define OAIEvent_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIEvent : public OAIObject {
public:
    OAIEvent();
    OAIEvent(QString json);
    ~OAIEvent() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QDateTime getCreatedAt() const;
    void setCreatedAt(const QDateTime &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    QString getCreatedBy() const;
    void setCreatedBy(const QString &created_by);
    bool is_created_by_Set() const;
    bool is_created_by_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QDateTime getUpdatedAt() const;
    void setUpdatedAt(const QDateTime &updated_at);
    bool is_updated_at_Set() const;
    bool is_updated_at_Valid() const;

    QString getUpdatedBy() const;
    void setUpdatedBy(const QString &updated_by);
    bool is_updated_by_Set() const;
    bool is_updated_by_Valid() const;

    QString getAttributes() const;
    void setAttributes(const QString &attributes);
    bool is_attributes_Set() const;
    bool is_attributes_Valid() const;

    QString getChatPrompt() const;
    void setChatPrompt(const QString &chat_prompt);
    bool is_chat_prompt_Set() const;
    bool is_chat_prompt_Valid() const;

    QString getConversationId() const;
    void setConversationId(const QString &conversation_id);
    bool is_conversation_id_Set() const;
    bool is_conversation_id_Valid() const;

    QString getDomSelectors() const;
    void setDomSelectors(const QString &dom_selectors);
    bool is_dom_selectors_Set() const;
    bool is_dom_selectors_Valid() const;

    bool isIsChatHidden() const;
    void setIsChatHidden(const bool &is_chat_hidden);
    bool is_is_chat_hidden_Set() const;
    bool is_is_chat_hidden_Valid() const;

    bool isIsNotifyEnabled() const;
    void setIsNotifyEnabled(const bool &is_notify_enabled);
    bool is_is_notify_enabled_Set() const;
    bool is_is_notify_enabled_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QDateTime m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    QString m_created_by;
    bool m_created_by_isSet;
    bool m_created_by_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QDateTime m_updated_at;
    bool m_updated_at_isSet;
    bool m_updated_at_isValid;

    QString m_updated_by;
    bool m_updated_by_isSet;
    bool m_updated_by_isValid;

    QString m_attributes;
    bool m_attributes_isSet;
    bool m_attributes_isValid;

    QString m_chat_prompt;
    bool m_chat_prompt_isSet;
    bool m_chat_prompt_isValid;

    QString m_conversation_id;
    bool m_conversation_id_isSet;
    bool m_conversation_id_isValid;

    QString m_dom_selectors;
    bool m_dom_selectors_isSet;
    bool m_dom_selectors_isValid;

    bool m_is_chat_hidden;
    bool m_is_chat_hidden_isSet;
    bool m_is_chat_hidden_isValid;

    bool m_is_notify_enabled;
    bool m_is_notify_enabled_isSet;
    bool m_is_notify_enabled_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIEvent)

#endif // OAIEvent_H
