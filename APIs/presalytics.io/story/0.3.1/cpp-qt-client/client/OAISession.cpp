/**
 * Story
 * This API is the main entry point for creating, editing and publishing analytics throught the Presalytics API
 *
 * The version of the OpenAPI document: 0.3.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISession.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISession::OAISession(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISession::OAISession() {
    this->initializeModel();
}

OAISession::~OAISession() {}

void OAISession::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_updated_by_isSet = false;
    m_updated_by_isValid = false;

    m_collaborator_isSet = false;
    m_collaborator_isValid = false;

    m_collaborator_id_isSet = false;
    m_collaborator_id_isValid = false;

    m_host_isSet = false;
    m_host_isValid = false;

    m_outline_revision_isSet = false;
    m_outline_revision_isValid = false;

    m_views_isSet = false;
    m_views_isValid = false;
}

void OAISession::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISession::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("created_by")]);
    m_created_by_isSet = !json[QString("created_by")].isNull() && m_created_by_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_updated_by_isValid = ::OpenAPI::fromJsonValue(m_updated_by, json[QString("updated_by")]);
    m_updated_by_isSet = !json[QString("updated_by")].isNull() && m_updated_by_isValid;

    m_collaborator_isValid = ::OpenAPI::fromJsonValue(m_collaborator, json[QString("collaborator")]);
    m_collaborator_isSet = !json[QString("collaborator")].isNull() && m_collaborator_isValid;

    m_collaborator_id_isValid = ::OpenAPI::fromJsonValue(m_collaborator_id, json[QString("collaborator_id")]);
    m_collaborator_id_isSet = !json[QString("collaborator_id")].isNull() && m_collaborator_id_isValid;

    m_host_isValid = ::OpenAPI::fromJsonValue(m_host, json[QString("host")]);
    m_host_isSet = !json[QString("host")].isNull() && m_host_isValid;

    m_outline_revision_isValid = ::OpenAPI::fromJsonValue(m_outline_revision, json[QString("outline_revision")]);
    m_outline_revision_isSet = !json[QString("outline_revision")].isNull() && m_outline_revision_isValid;

    m_views_isValid = ::OpenAPI::fromJsonValue(m_views, json[QString("views")]);
    m_views_isSet = !json[QString("views")].isNull() && m_views_isValid;
}

QString OAISession::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISession::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_created_by_isSet) {
        obj.insert(QString("created_by"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_updated_by_isSet) {
        obj.insert(QString("updated_by"), ::OpenAPI::toJsonValue(m_updated_by));
    }
    if (m_collaborator.isSet()) {
        obj.insert(QString("collaborator"), ::OpenAPI::toJsonValue(m_collaborator));
    }
    if (m_collaborator_id_isSet) {
        obj.insert(QString("collaborator_id"), ::OpenAPI::toJsonValue(m_collaborator_id));
    }
    if (m_host_isSet) {
        obj.insert(QString("host"), ::OpenAPI::toJsonValue(m_host));
    }
    if (m_outline_revision_isSet) {
        obj.insert(QString("outline_revision"), ::OpenAPI::toJsonValue(m_outline_revision));
    }
    if (m_views.size() > 0) {
        obj.insert(QString("views"), ::OpenAPI::toJsonValue(m_views));
    }
    return obj;
}

QDateTime OAISession::getCreatedAt() const {
    return m_created_at;
}
void OAISession::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAISession::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAISession::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAISession::getCreatedBy() const {
    return m_created_by;
}
void OAISession::setCreatedBy(const QString &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAISession::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAISession::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QString OAISession::getId() const {
    return m_id;
}
void OAISession::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISession::is_id_Set() const{
    return m_id_isSet;
}

bool OAISession::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAISession::getUpdatedAt() const {
    return m_updated_at;
}
void OAISession::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAISession::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAISession::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAISession::getUpdatedBy() const {
    return m_updated_by;
}
void OAISession::setUpdatedBy(const QString &updated_by) {
    m_updated_by = updated_by;
    m_updated_by_isSet = true;
}

bool OAISession::is_updated_by_Set() const{
    return m_updated_by_isSet;
}

bool OAISession::is_updated_by_Valid() const{
    return m_updated_by_isValid;
}

OAIStory_collaborator OAISession::getCollaborator() const {
    return m_collaborator;
}
void OAISession::setCollaborator(const OAIStory_collaborator &collaborator) {
    m_collaborator = collaborator;
    m_collaborator_isSet = true;
}

bool OAISession::is_collaborator_Set() const{
    return m_collaborator_isSet;
}

bool OAISession::is_collaborator_Valid() const{
    return m_collaborator_isValid;
}

QString OAISession::getCollaboratorId() const {
    return m_collaborator_id;
}
void OAISession::setCollaboratorId(const QString &collaborator_id) {
    m_collaborator_id = collaborator_id;
    m_collaborator_id_isSet = true;
}

bool OAISession::is_collaborator_id_Set() const{
    return m_collaborator_id_isSet;
}

bool OAISession::is_collaborator_id_Valid() const{
    return m_collaborator_id_isValid;
}

QString OAISession::getHost() const {
    return m_host;
}
void OAISession::setHost(const QString &host) {
    m_host = host;
    m_host_isSet = true;
}

bool OAISession::is_host_Set() const{
    return m_host_isSet;
}

bool OAISession::is_host_Valid() const{
    return m_host_isValid;
}

qint32 OAISession::getOutlineRevision() const {
    return m_outline_revision;
}
void OAISession::setOutlineRevision(const qint32 &outline_revision) {
    m_outline_revision = outline_revision;
    m_outline_revision_isSet = true;
}

bool OAISession::is_outline_revision_Set() const{
    return m_outline_revision_isSet;
}

bool OAISession::is_outline_revision_Valid() const{
    return m_outline_revision_isValid;
}

QList<OAIView> OAISession::getViews() const {
    return m_views;
}
void OAISession::setViews(const QList<OAIView> &views) {
    m_views = views;
    m_views_isSet = true;
}

bool OAISession::is_views_Set() const{
    return m_views_isSet;
}

bool OAISession::is_views_Valid() const{
    return m_views_isValid;
}

bool OAISession::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collaborator.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_collaborator_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outline_revision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_views.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISession::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
