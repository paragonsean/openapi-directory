/**
 * Story
 * This API is the main entry point for creating, editing and publishing analytics throught the Presalytics API
 *
 * The version of the OpenAPI document: 0.3.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEvent::OAIEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEvent::OAIEvent() {
    this->initializeModel();
}

OAIEvent::~OAIEvent() {}

void OAIEvent::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_updated_by_isSet = false;
    m_updated_by_isValid = false;

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_chat_prompt_isSet = false;
    m_chat_prompt_isValid = false;

    m_conversation_id_isSet = false;
    m_conversation_id_isValid = false;

    m_dom_selectors_isSet = false;
    m_dom_selectors_isValid = false;

    m_is_chat_hidden_isSet = false;
    m_is_chat_hidden_isValid = false;

    m_is_notify_enabled_isSet = false;
    m_is_notify_enabled_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEvent::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("created_by")]);
    m_created_by_isSet = !json[QString("created_by")].isNull() && m_created_by_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_updated_by_isValid = ::OpenAPI::fromJsonValue(m_updated_by, json[QString("updated_by")]);
    m_updated_by_isSet = !json[QString("updated_by")].isNull() && m_updated_by_isValid;

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_chat_prompt_isValid = ::OpenAPI::fromJsonValue(m_chat_prompt, json[QString("chat_prompt")]);
    m_chat_prompt_isSet = !json[QString("chat_prompt")].isNull() && m_chat_prompt_isValid;

    m_conversation_id_isValid = ::OpenAPI::fromJsonValue(m_conversation_id, json[QString("conversation_id")]);
    m_conversation_id_isSet = !json[QString("conversation_id")].isNull() && m_conversation_id_isValid;

    m_dom_selectors_isValid = ::OpenAPI::fromJsonValue(m_dom_selectors, json[QString("dom_selectors")]);
    m_dom_selectors_isSet = !json[QString("dom_selectors")].isNull() && m_dom_selectors_isValid;

    m_is_chat_hidden_isValid = ::OpenAPI::fromJsonValue(m_is_chat_hidden, json[QString("is_chat_hidden")]);
    m_is_chat_hidden_isSet = !json[QString("is_chat_hidden")].isNull() && m_is_chat_hidden_isValid;

    m_is_notify_enabled_isValid = ::OpenAPI::fromJsonValue(m_is_notify_enabled, json[QString("is_notify_enabled")]);
    m_is_notify_enabled_isSet = !json[QString("is_notify_enabled")].isNull() && m_is_notify_enabled_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_created_by_isSet) {
        obj.insert(QString("created_by"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_updated_by_isSet) {
        obj.insert(QString("updated_by"), ::OpenAPI::toJsonValue(m_updated_by));
    }
    if (m_attributes_isSet) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_chat_prompt_isSet) {
        obj.insert(QString("chat_prompt"), ::OpenAPI::toJsonValue(m_chat_prompt));
    }
    if (m_conversation_id_isSet) {
        obj.insert(QString("conversation_id"), ::OpenAPI::toJsonValue(m_conversation_id));
    }
    if (m_dom_selectors_isSet) {
        obj.insert(QString("dom_selectors"), ::OpenAPI::toJsonValue(m_dom_selectors));
    }
    if (m_is_chat_hidden_isSet) {
        obj.insert(QString("is_chat_hidden"), ::OpenAPI::toJsonValue(m_is_chat_hidden));
    }
    if (m_is_notify_enabled_isSet) {
        obj.insert(QString("is_notify_enabled"), ::OpenAPI::toJsonValue(m_is_notify_enabled));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QDateTime OAIEvent::getCreatedAt() const {
    return m_created_at;
}
void OAIEvent::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIEvent::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIEvent::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIEvent::getCreatedBy() const {
    return m_created_by;
}
void OAIEvent::setCreatedBy(const QString &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIEvent::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIEvent::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QString OAIEvent::getId() const {
    return m_id;
}
void OAIEvent::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIEvent::is_id_Set() const{
    return m_id_isSet;
}

bool OAIEvent::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIEvent::getUpdatedAt() const {
    return m_updated_at;
}
void OAIEvent::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIEvent::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIEvent::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAIEvent::getUpdatedBy() const {
    return m_updated_by;
}
void OAIEvent::setUpdatedBy(const QString &updated_by) {
    m_updated_by = updated_by;
    m_updated_by_isSet = true;
}

bool OAIEvent::is_updated_by_Set() const{
    return m_updated_by_isSet;
}

bool OAIEvent::is_updated_by_Valid() const{
    return m_updated_by_isValid;
}

QString OAIEvent::getAttributes() const {
    return m_attributes;
}
void OAIEvent::setAttributes(const QString &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIEvent::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIEvent::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QString OAIEvent::getChatPrompt() const {
    return m_chat_prompt;
}
void OAIEvent::setChatPrompt(const QString &chat_prompt) {
    m_chat_prompt = chat_prompt;
    m_chat_prompt_isSet = true;
}

bool OAIEvent::is_chat_prompt_Set() const{
    return m_chat_prompt_isSet;
}

bool OAIEvent::is_chat_prompt_Valid() const{
    return m_chat_prompt_isValid;
}

QString OAIEvent::getConversationId() const {
    return m_conversation_id;
}
void OAIEvent::setConversationId(const QString &conversation_id) {
    m_conversation_id = conversation_id;
    m_conversation_id_isSet = true;
}

bool OAIEvent::is_conversation_id_Set() const{
    return m_conversation_id_isSet;
}

bool OAIEvent::is_conversation_id_Valid() const{
    return m_conversation_id_isValid;
}

QString OAIEvent::getDomSelectors() const {
    return m_dom_selectors;
}
void OAIEvent::setDomSelectors(const QString &dom_selectors) {
    m_dom_selectors = dom_selectors;
    m_dom_selectors_isSet = true;
}

bool OAIEvent::is_dom_selectors_Set() const{
    return m_dom_selectors_isSet;
}

bool OAIEvent::is_dom_selectors_Valid() const{
    return m_dom_selectors_isValid;
}

bool OAIEvent::isIsChatHidden() const {
    return m_is_chat_hidden;
}
void OAIEvent::setIsChatHidden(const bool &is_chat_hidden) {
    m_is_chat_hidden = is_chat_hidden;
    m_is_chat_hidden_isSet = true;
}

bool OAIEvent::is_is_chat_hidden_Set() const{
    return m_is_chat_hidden_isSet;
}

bool OAIEvent::is_is_chat_hidden_Valid() const{
    return m_is_chat_hidden_isValid;
}

bool OAIEvent::isIsNotifyEnabled() const {
    return m_is_notify_enabled;
}
void OAIEvent::setIsNotifyEnabled(const bool &is_notify_enabled) {
    m_is_notify_enabled = is_notify_enabled;
    m_is_notify_enabled_isSet = true;
}

bool OAIEvent::is_is_notify_enabled_Set() const{
    return m_is_notify_enabled_isSet;
}

bool OAIEvent::is_is_notify_enabled_Valid() const{
    return m_is_notify_enabled_isValid;
}

QString OAIEvent::getName() const {
    return m_name;
}
void OAIEvent::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEvent::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEvent::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_chat_prompt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conversation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dom_selectors_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_chat_hidden_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_notify_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
