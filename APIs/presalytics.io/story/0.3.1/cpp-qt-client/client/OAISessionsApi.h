/**
 * Story
 * This API is the main entry point for creating, editing and publishing analytics throught the Presalytics API
 *
 * The version of the OpenAPI document: 0.3.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISessionsApi_H
#define OAI_OAISessionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreate_session_request.h"
#include "OAIProblem_detail.h"
#include "OAISession.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISessionsApi : public QObject {
    Q_OBJECT

public:
    OAISessionsApi(const int timeOut = 0);
    ~OAISessionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  session_id QString [required]
    */
    virtual void sessionIdDelete(const QString &session_id);

    /**
    * @param[in]  session_id QString [required]
    * @param[in]  include_relationships bool [optional]
    */
    virtual void sessionIdGet(const QString &session_id, const ::OpenAPI::OptionalParam<bool> &include_relationships = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_create_session_request OAICreate_session_request [required]
    */
    virtual void storyIdSessionPost(const QString &id, const OAICreate_session_request &oai_create_session_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  include_relationships bool [optional]
    */
    virtual void storyIdSessionsGet(const QString &id, const ::OpenAPI::OptionalParam<bool> &include_relationships = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void sessionIdDeleteCallback(OAIHttpRequestWorker *worker);
    void sessionIdGetCallback(OAIHttpRequestWorker *worker);
    void storyIdSessionPostCallback(OAIHttpRequestWorker *worker);
    void storyIdSessionsGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void sessionIdDeleteSignal();
    void sessionIdGetSignal(OAISession summary);
    void storyIdSessionPostSignal(OAISession summary);
    void storyIdSessionsGetSignal(QList<OAISession> summary);


    void sessionIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void sessionIdGetSignalFull(OAIHttpRequestWorker *worker, OAISession summary);
    void storyIdSessionPostSignalFull(OAIHttpRequestWorker *worker, OAISession summary);
    void storyIdSessionsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAISession> summary);

    Q_DECL_DEPRECATED_X("Use sessionIdDeleteSignalError() instead")
    void sessionIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void sessionIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sessionIdGetSignalError() instead")
    void sessionIdGetSignalE(OAISession summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sessionIdGetSignalError(OAISession summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storyIdSessionPostSignalError() instead")
    void storyIdSessionPostSignalE(OAISession summary, QNetworkReply::NetworkError error_type, QString error_str);
    void storyIdSessionPostSignalError(OAISession summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storyIdSessionsGetSignalError() instead")
    void storyIdSessionsGetSignalE(QList<OAISession> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void storyIdSessionsGetSignalError(QList<OAISession> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use sessionIdDeleteSignalErrorFull() instead")
    void sessionIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sessionIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sessionIdGetSignalErrorFull() instead")
    void sessionIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sessionIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storyIdSessionPostSignalErrorFull() instead")
    void storyIdSessionPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storyIdSessionPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storyIdSessionsGetSignalErrorFull() instead")
    void storyIdSessionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storyIdSessionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
