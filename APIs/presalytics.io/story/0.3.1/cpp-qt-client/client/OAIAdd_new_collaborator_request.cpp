/**
 * Story
 * This API is the main entry point for creating, editing and publishing analytics throught the Presalytics API
 *
 * The version of the OpenAPI document: 0.3.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdd_new_collaborator_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdd_new_collaborator_request::OAIAdd_new_collaborator_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdd_new_collaborator_request::OAIAdd_new_collaborator_request() {
    this->initializeModel();
}

OAIAdd_new_collaborator_request::~OAIAdd_new_collaborator_request() {}

void OAIAdd_new_collaborator_request::initializeModel() {

    m_collaborator_type_isSet = false;
    m_collaborator_type_isValid = false;

    m_user_email_isSet = false;
    m_user_email_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIAdd_new_collaborator_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdd_new_collaborator_request::fromJsonObject(QJsonObject json) {

    m_collaborator_type_isValid = ::OpenAPI::fromJsonValue(m_collaborator_type, json[QString("collaborator_type")]);
    m_collaborator_type_isSet = !json[QString("collaborator_type")].isNull() && m_collaborator_type_isValid;

    m_user_email_isValid = ::OpenAPI::fromJsonValue(m_user_email, json[QString("user_email")]);
    m_user_email_isSet = !json[QString("user_email")].isNull() && m_user_email_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;
}

QString OAIAdd_new_collaborator_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdd_new_collaborator_request::asJsonObject() const {
    QJsonObject obj;
    if (m_collaborator_type_isSet) {
        obj.insert(QString("collaborator_type"), ::OpenAPI::toJsonValue(m_collaborator_type));
    }
    if (m_user_email_isSet) {
        obj.insert(QString("user_email"), ::OpenAPI::toJsonValue(m_user_email));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QString OAIAdd_new_collaborator_request::getCollaboratorType() const {
    return m_collaborator_type;
}
void OAIAdd_new_collaborator_request::setCollaboratorType(const QString &collaborator_type) {
    m_collaborator_type = collaborator_type;
    m_collaborator_type_isSet = true;
}

bool OAIAdd_new_collaborator_request::is_collaborator_type_Set() const{
    return m_collaborator_type_isSet;
}

bool OAIAdd_new_collaborator_request::is_collaborator_type_Valid() const{
    return m_collaborator_type_isValid;
}

QString OAIAdd_new_collaborator_request::getUserEmail() const {
    return m_user_email;
}
void OAIAdd_new_collaborator_request::setUserEmail(const QString &user_email) {
    m_user_email = user_email;
    m_user_email_isSet = true;
}

bool OAIAdd_new_collaborator_request::is_user_email_Set() const{
    return m_user_email_isSet;
}

bool OAIAdd_new_collaborator_request::is_user_email_Valid() const{
    return m_user_email_isValid;
}

QString OAIAdd_new_collaborator_request::getUserId() const {
    return m_user_id;
}
void OAIAdd_new_collaborator_request::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIAdd_new_collaborator_request::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIAdd_new_collaborator_request::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIAdd_new_collaborator_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_collaborator_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdd_new_collaborator_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
