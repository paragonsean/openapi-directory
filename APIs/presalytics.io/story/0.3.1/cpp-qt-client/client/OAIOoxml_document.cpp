/**
 * Story
 * This API is the main entry point for creating, editing and publishing analytics throught the Presalytics API
 *
 * The version of the OpenAPI document: 0.3.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOoxml_document.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOoxml_document::OAIOoxml_document(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOoxml_document::OAIOoxml_document() {
    this->initializeModel();
}

OAIOoxml_document::~OAIOoxml_document() {}

void OAIOoxml_document::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_updated_by_isSet = false;
    m_updated_by_isValid = false;

    m_delete_target_on_story_delete_isSet = false;
    m_delete_target_on_story_delete_isValid = false;

    m_ooxml_automation_id_isSet = false;
    m_ooxml_automation_id_isValid = false;

    m_story_id_isSet = false;
    m_story_id_isValid = false;
}

void OAIOoxml_document::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOoxml_document::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("created_by")]);
    m_created_by_isSet = !json[QString("created_by")].isNull() && m_created_by_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_updated_by_isValid = ::OpenAPI::fromJsonValue(m_updated_by, json[QString("updated_by")]);
    m_updated_by_isSet = !json[QString("updated_by")].isNull() && m_updated_by_isValid;

    m_delete_target_on_story_delete_isValid = ::OpenAPI::fromJsonValue(m_delete_target_on_story_delete, json[QString("delete_target_on_story_delete")]);
    m_delete_target_on_story_delete_isSet = !json[QString("delete_target_on_story_delete")].isNull() && m_delete_target_on_story_delete_isValid;

    m_ooxml_automation_id_isValid = ::OpenAPI::fromJsonValue(m_ooxml_automation_id, json[QString("ooxml_automation_id")]);
    m_ooxml_automation_id_isSet = !json[QString("ooxml_automation_id")].isNull() && m_ooxml_automation_id_isValid;

    m_story_id_isValid = ::OpenAPI::fromJsonValue(m_story_id, json[QString("story_id")]);
    m_story_id_isSet = !json[QString("story_id")].isNull() && m_story_id_isValid;
}

QString OAIOoxml_document::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOoxml_document::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_created_by_isSet) {
        obj.insert(QString("created_by"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_updated_by_isSet) {
        obj.insert(QString("updated_by"), ::OpenAPI::toJsonValue(m_updated_by));
    }
    if (m_delete_target_on_story_delete_isSet) {
        obj.insert(QString("delete_target_on_story_delete"), ::OpenAPI::toJsonValue(m_delete_target_on_story_delete));
    }
    if (m_ooxml_automation_id_isSet) {
        obj.insert(QString("ooxml_automation_id"), ::OpenAPI::toJsonValue(m_ooxml_automation_id));
    }
    if (m_story_id_isSet) {
        obj.insert(QString("story_id"), ::OpenAPI::toJsonValue(m_story_id));
    }
    return obj;
}

QDateTime OAIOoxml_document::getCreatedAt() const {
    return m_created_at;
}
void OAIOoxml_document::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIOoxml_document::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIOoxml_document::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIOoxml_document::getCreatedBy() const {
    return m_created_by;
}
void OAIOoxml_document::setCreatedBy(const QString &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIOoxml_document::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIOoxml_document::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QString OAIOoxml_document::getId() const {
    return m_id;
}
void OAIOoxml_document::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIOoxml_document::is_id_Set() const{
    return m_id_isSet;
}

bool OAIOoxml_document::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIOoxml_document::getUpdatedAt() const {
    return m_updated_at;
}
void OAIOoxml_document::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIOoxml_document::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIOoxml_document::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAIOoxml_document::getUpdatedBy() const {
    return m_updated_by;
}
void OAIOoxml_document::setUpdatedBy(const QString &updated_by) {
    m_updated_by = updated_by;
    m_updated_by_isSet = true;
}

bool OAIOoxml_document::is_updated_by_Set() const{
    return m_updated_by_isSet;
}

bool OAIOoxml_document::is_updated_by_Valid() const{
    return m_updated_by_isValid;
}

bool OAIOoxml_document::isDeleteTargetOnStoryDelete() const {
    return m_delete_target_on_story_delete;
}
void OAIOoxml_document::setDeleteTargetOnStoryDelete(const bool &delete_target_on_story_delete) {
    m_delete_target_on_story_delete = delete_target_on_story_delete;
    m_delete_target_on_story_delete_isSet = true;
}

bool OAIOoxml_document::is_delete_target_on_story_delete_Set() const{
    return m_delete_target_on_story_delete_isSet;
}

bool OAIOoxml_document::is_delete_target_on_story_delete_Valid() const{
    return m_delete_target_on_story_delete_isValid;
}

QString OAIOoxml_document::getOoxmlAutomationId() const {
    return m_ooxml_automation_id;
}
void OAIOoxml_document::setOoxmlAutomationId(const QString &ooxml_automation_id) {
    m_ooxml_automation_id = ooxml_automation_id;
    m_ooxml_automation_id_isSet = true;
}

bool OAIOoxml_document::is_ooxml_automation_id_Set() const{
    return m_ooxml_automation_id_isSet;
}

bool OAIOoxml_document::is_ooxml_automation_id_Valid() const{
    return m_ooxml_automation_id_isValid;
}

QString OAIOoxml_document::getStoryId() const {
    return m_story_id;
}
void OAIOoxml_document::setStoryId(const QString &story_id) {
    m_story_id = story_id;
    m_story_id_isSet = true;
}

bool OAIOoxml_document::is_story_id_Set() const{
    return m_story_id_isSet;
}

bool OAIOoxml_document::is_story_id_Valid() const{
    return m_story_id_isValid;
}

bool OAIOoxml_document::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_target_on_story_delete_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ooxml_automation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_story_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOoxml_document::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
