/**
 * Story
 * This API is the main entry point for creating, editing and publishing analytics throught the Presalytics API
 *
 * The version of the OpenAPI document: 0.3.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIViewsApi_H
#define OAI_OAIViewsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIProblem_detail.h"
#include "OAIRequired_parameters_to_create_a_view.h"
#include "OAIView.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIViewsApi : public QObject {
    Q_OBJECT

public:
    OAIViewsApi(const int timeOut = 0);
    ~OAIViewsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  session_id QString [required]
    */
    virtual void sessionsIdViewsGet(const QString &session_id);

    /**
    * @param[in]  session_id QString [required]
    * @param[in]  oai_required_parameters_to_create_a_view OAIRequired_parameters_to_create_a_view [required]
    */
    virtual void sessionsIdViewsPost(const QString &session_id, const OAIRequired_parameters_to_create_a_view &oai_required_parameters_to_create_a_view);

    /**
    * @param[in]  view_id QString [required]
    */
    virtual void viewsIdDelete(const QString &view_id);

    /**
    * @param[in]  view_id QString [required]
    */
    virtual void viewsIdGet(const QString &view_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void sessionsIdViewsGetCallback(OAIHttpRequestWorker *worker);
    void sessionsIdViewsPostCallback(OAIHttpRequestWorker *worker);
    void viewsIdDeleteCallback(OAIHttpRequestWorker *worker);
    void viewsIdGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void sessionsIdViewsGetSignal(QList<OAIView> summary);
    void sessionsIdViewsPostSignal(OAIView summary);
    void viewsIdDeleteSignal();
    void viewsIdGetSignal(OAIView summary);


    void sessionsIdViewsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIView> summary);
    void sessionsIdViewsPostSignalFull(OAIHttpRequestWorker *worker, OAIView summary);
    void viewsIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void viewsIdGetSignalFull(OAIHttpRequestWorker *worker, OAIView summary);

    Q_DECL_DEPRECATED_X("Use sessionsIdViewsGetSignalError() instead")
    void sessionsIdViewsGetSignalE(QList<OAIView> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sessionsIdViewsGetSignalError(QList<OAIView> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sessionsIdViewsPostSignalError() instead")
    void sessionsIdViewsPostSignalE(OAIView summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sessionsIdViewsPostSignalError(OAIView summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use viewsIdDeleteSignalError() instead")
    void viewsIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void viewsIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use viewsIdGetSignalError() instead")
    void viewsIdGetSignalE(OAIView summary, QNetworkReply::NetworkError error_type, QString error_str);
    void viewsIdGetSignalError(OAIView summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use sessionsIdViewsGetSignalErrorFull() instead")
    void sessionsIdViewsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sessionsIdViewsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sessionsIdViewsPostSignalErrorFull() instead")
    void sessionsIdViewsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sessionsIdViewsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use viewsIdDeleteSignalErrorFull() instead")
    void viewsIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void viewsIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use viewsIdGetSignalErrorFull() instead")
    void viewsIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void viewsIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
