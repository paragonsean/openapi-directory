# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Event(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, created_by: str=None, id: str=None, updated_at: datetime=None, updated_by: str=None, attributes: str=None, chat_prompt: str=None, conversation_id: str=None, dom_selectors: str=None, is_chat_hidden: bool=None, is_notify_enabled: bool=None, name: str=None):
        """Event - a model defined in OpenAPI

        :param created_at: The created_at of this Event.
        :param created_by: The created_by of this Event.
        :param id: The id of this Event.
        :param updated_at: The updated_at of this Event.
        :param updated_by: The updated_by of this Event.
        :param attributes: The attributes of this Event.
        :param chat_prompt: The chat_prompt of this Event.
        :param conversation_id: The conversation_id of this Event.
        :param dom_selectors: The dom_selectors of this Event.
        :param is_chat_hidden: The is_chat_hidden of this Event.
        :param is_notify_enabled: The is_notify_enabled of this Event.
        :param name: The name of this Event.
        """
        self.openapi_types = {
            'created_at': datetime,
            'created_by': str,
            'id': str,
            'updated_at': datetime,
            'updated_by': str,
            'attributes': str,
            'chat_prompt': str,
            'conversation_id': str,
            'dom_selectors': str,
            'is_chat_hidden': bool,
            'is_notify_enabled': bool,
            'name': str
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'created_by': 'created_by',
            'id': 'id',
            'updated_at': 'updated_at',
            'updated_by': 'updated_by',
            'attributes': 'attributes',
            'chat_prompt': 'chat_prompt',
            'conversation_id': 'conversation_id',
            'dom_selectors': 'dom_selectors',
            'is_chat_hidden': 'is_chat_hidden',
            'is_notify_enabled': 'is_notify_enabled',
            'name': 'name'
        }

        self._created_at = created_at
        self._created_by = created_by
        self._id = id
        self._updated_at = updated_at
        self._updated_by = updated_by
        self._attributes = attributes
        self._chat_prompt = chat_prompt
        self._conversation_id = conversation_id
        self._dom_selectors = dom_selectors
        self._is_chat_hidden = is_chat_hidden
        self._is_notify_enabled = is_notify_enabled
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Event':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The event of this Event.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this Event.


        :return: The created_at of this Event.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Event.


        :param created_at: The created_at of this Event.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this Event.


        :return: The created_by of this Event.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Event.


        :param created_by: The created_by of this Event.
        :type created_by: str
        """

        self._created_by = created_by

    @property
    def id(self):
        """Gets the id of this Event.


        :return: The id of this Event.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Event.


        :param id: The id of this Event.
        :type id: str
        """

        self._id = id

    @property
    def updated_at(self):
        """Gets the updated_at of this Event.


        :return: The updated_at of this Event.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Event.


        :param updated_at: The updated_at of this Event.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def updated_by(self):
        """Gets the updated_by of this Event.


        :return: The updated_by of this Event.
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this Event.


        :param updated_by: The updated_by of this Event.
        :type updated_by: str
        """

        self._updated_by = updated_by

    @property
    def attributes(self):
        """Gets the attributes of this Event.


        :return: The attributes of this Event.
        :rtype: str
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this Event.


        :param attributes: The attributes of this Event.
        :type attributes: str
        """

        self._attributes = attributes

    @property
    def chat_prompt(self):
        """Gets the chat_prompt of this Event.


        :return: The chat_prompt of this Event.
        :rtype: str
        """
        return self._chat_prompt

    @chat_prompt.setter
    def chat_prompt(self, chat_prompt):
        """Sets the chat_prompt of this Event.


        :param chat_prompt: The chat_prompt of this Event.
        :type chat_prompt: str
        """

        self._chat_prompt = chat_prompt

    @property
    def conversation_id(self):
        """Gets the conversation_id of this Event.


        :return: The conversation_id of this Event.
        :rtype: str
        """
        return self._conversation_id

    @conversation_id.setter
    def conversation_id(self, conversation_id):
        """Sets the conversation_id of this Event.


        :param conversation_id: The conversation_id of this Event.
        :type conversation_id: str
        """

        self._conversation_id = conversation_id

    @property
    def dom_selectors(self):
        """Gets the dom_selectors of this Event.


        :return: The dom_selectors of this Event.
        :rtype: str
        """
        return self._dom_selectors

    @dom_selectors.setter
    def dom_selectors(self, dom_selectors):
        """Sets the dom_selectors of this Event.


        :param dom_selectors: The dom_selectors of this Event.
        :type dom_selectors: str
        """

        self._dom_selectors = dom_selectors

    @property
    def is_chat_hidden(self):
        """Gets the is_chat_hidden of this Event.


        :return: The is_chat_hidden of this Event.
        :rtype: bool
        """
        return self._is_chat_hidden

    @is_chat_hidden.setter
    def is_chat_hidden(self, is_chat_hidden):
        """Sets the is_chat_hidden of this Event.


        :param is_chat_hidden: The is_chat_hidden of this Event.
        :type is_chat_hidden: bool
        """

        self._is_chat_hidden = is_chat_hidden

    @property
    def is_notify_enabled(self):
        """Gets the is_notify_enabled of this Event.


        :return: The is_notify_enabled of this Event.
        :rtype: bool
        """
        return self._is_notify_enabled

    @is_notify_enabled.setter
    def is_notify_enabled(self, is_notify_enabled):
        """Sets the is_notify_enabled of this Event.


        :param is_notify_enabled: The is_notify_enabled of this Event.
        :type is_notify_enabled: bool
        """

        self._is_notify_enabled = is_notify_enabled

    @property
    def name(self):
        """Gets the name of this Event.


        :return: The name of this Event.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Event.


        :param name: The name of this Event.
        :type name: str
        """

        self._name = name
