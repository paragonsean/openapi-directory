# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CachePostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, current_user_id: str=None, nonce: str=None, subdocument: str=None):
        """CachePostRequest - a model defined in OpenAPI

        :param current_user_id: The current_user_id of this CachePostRequest.
        :param nonce: The nonce of this CachePostRequest.
        :param subdocument: The subdocument of this CachePostRequest.
        """
        self.openapi_types = {
            'current_user_id': str,
            'nonce': str,
            'subdocument': str
        }

        self.attribute_map = {
            'current_user_id': 'current_user_id',
            'nonce': 'nonce',
            'subdocument': 'subdocument'
        }

        self._current_user_id = current_user_id
        self._nonce = nonce
        self._subdocument = subdocument

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CachePostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The cache_post_request of this CachePostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def current_user_id(self):
        """Gets the current_user_id of this CachePostRequest.


        :return: The current_user_id of this CachePostRequest.
        :rtype: str
        """
        return self._current_user_id

    @current_user_id.setter
    def current_user_id(self, current_user_id):
        """Sets the current_user_id of this CachePostRequest.


        :param current_user_id: The current_user_id of this CachePostRequest.
        :type current_user_id: str
        """

        self._current_user_id = current_user_id

    @property
    def nonce(self):
        """Gets the nonce of this CachePostRequest.


        :return: The nonce of this CachePostRequest.
        :rtype: str
        """
        return self._nonce

    @nonce.setter
    def nonce(self, nonce):
        """Sets the nonce of this CachePostRequest.


        :param nonce: The nonce of this CachePostRequest.
        :type nonce: str
        """

        self._nonce = nonce

    @property
    def subdocument(self):
        """Gets the subdocument of this CachePostRequest.


        :return: The subdocument of this CachePostRequest.
        :rtype: str
        """
        return self._subdocument

    @subdocument.setter
    def subdocument(self, subdocument):
        """Sets the subdocument of this CachePostRequest.


        :param subdocument: The subdocument of this CachePostRequest.
        :type subdocument: str
        """

        self._subdocument = subdocument
