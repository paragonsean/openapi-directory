/*
 * Story
 * This API is the main entry point for creating, editing and publishing analytics throught the Presalytics API
 *
 * The version of the OpenAPI document: 0.3.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AddNewCollaboratorRequest;
import org.openapitools.client.model.ModifyInactiveCollaborator;
import org.openapitools.client.model.ProblemDetail;
import org.openapitools.client.model.StoryCollaborator;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for StoryCollaboratorsApi
 */
@Disabled
public class StoryCollaboratorsApiTest {

    private final StoryCollaboratorsApi api = new StoryCollaboratorsApi();

    /**
     * Story Collaborators: List
     *
     * Gets a list users that can read or edit this story
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storyIdCollaboratorsGetTest() throws ApiException {
        UUID id = null;
        List<StoryCollaborator> response = api.storyIdCollaboratorsGet(id);
        // TODO: test validations
    }

    /**
     * Story Collaborators: Edit Inactive User Permission
     *
     * Edit story permissions for inactive users.  Requires admin rights.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storyIdCollaboratorsInactivePostTest() throws ApiException {
        UUID id = null;
        ModifyInactiveCollaborator modifyInactiveCollaborator = null;
        StoryCollaborator response = api.storyIdCollaboratorsInactivePost(id, modifyInactiveCollaborator);
        // TODO: test validations
    }

    /**
     * Story Collaborators: Add New User
     *
     * Add a colloborator to this story
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storyIdCollaboratorsPostTest() throws ApiException {
        UUID id = null;
        AddNewCollaboratorRequest addNewCollaboratorRequest = null;
        StoryCollaborator response = api.storyIdCollaboratorsPost(id, addNewCollaboratorRequest);
        // TODO: test validations
    }

    /**
     * Story Collaborators: Remove User
     *
     * Remove a collaborator from this story
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storyIdCollaboratorsUseridDeleteTest() throws ApiException {
        UUID id = null;
        UUID storyCollaboratorUserid = null;
        api.storyIdCollaboratorsUseridDelete(id, storyCollaboratorUserid);
        // TODO: test validations
    }

    /**
     * Story Collaborators: Access Permissions
     *
     * Data to help you understand the access rights of a particular collaborator on this story
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storyIdCollaboratorsUseridGetTest() throws ApiException {
        UUID id = null;
        UUID storyCollaboratorUserid = null;
        StoryCollaborator response = api.storyIdCollaboratorsUseridGet(id, storyCollaboratorUserid);
        // TODO: test validations
    }

    /**
     * Story Collaborators: Edit Access Rights
     *
     * Modify a user&#39;s access right to this story (e.g., grant edit permissions)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storyIdCollaboratorsUseridPutTest() throws ApiException {
        UUID id = null;
        UUID storyCollaboratorUserid = null;
        StoryCollaborator storyCollaborator = null;
        StoryCollaborator response = api.storyIdCollaboratorsUseridPut(id, storyCollaboratorUserid, storyCollaborator);
        // TODO: test validations
    }

}
