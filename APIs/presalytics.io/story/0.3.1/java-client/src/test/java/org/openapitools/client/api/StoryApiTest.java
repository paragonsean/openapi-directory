/*
 * Story
 * This API is the main entry point for creating, editing and publishing analytics throught the Presalytics API
 *
 * The version of the OpenAPI document: 0.3.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.io.File;
import org.openapitools.client.model.FileUpload;
import org.openapitools.client.model.Outline;
import org.openapitools.client.model.ProblemDetail;
import org.openapitools.client.model.Status;
import org.openapitools.client.model.Story;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for StoryApi
 */
@Disabled
public class StoryApiTest {

    private final StoryApi api = new StoryApi();

    /**
     * Story: Get List of User Stories
     *
     * Returns a list of stories for this user identifie via the access token presentated to the api
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storyGetTest() throws ApiException {
        Boolean includeRelationships = null;
        Boolean includeOutline = null;
        List<Story> response = api.storyGet(includeRelationships, includeOutline);
        // TODO: test validations
    }

    /**
     * Story: View Analytics
     *
     * returns an html document containing session and event metrics for the story
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storyIdAnalyticsTest() throws ApiException {
        UUID id = null;
        String response = api.storyIdAnalytics(id);
        // TODO: test validations
    }

    /**
     * Story: Delete by Id
     *
     * Remove a story and dependant data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storyIdDeleteTest() throws ApiException {
        UUID id = null;
        api.storyIdDelete(id);
        // TODO: test validations
    }

    /**
     * Story: Delete Subdocument
     *
     * Deletes a subdcoument of this story (e.g., .pptx, .docx, .xlsx)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storyIdFileOoxmlautomationidDeleteTest() throws ApiException {
        UUID id = null;
        UUID ooxmlAutomationId = null;
        api.storyIdFileOoxmlautomationidDelete(id, ooxmlAutomationId);
        // TODO: test validations
    }

    /**
     * Story: Download Updated File
     *
     * Redtreives updated story as open office xml file (e.g., .pptx, .docx, .xlsx)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storyIdFileOoxmlautomationidGetTest() throws ApiException {
        UUID id = null;
        UUID ooxmlAutomationId = null;
        File response = api.storyIdFileOoxmlautomationidGet(id, ooxmlAutomationId);
        // TODO: test validations
    }

    /**
     * Story: Upload a File To Existing Story
     *
     * Upload a file to an existing story
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storyIdFilePostTest() throws ApiException {
        UUID id = null;
        Boolean replaceExisting = null;
        UUID obsoleteId = null;
        Boolean includeOutline = null;
        List<File> _file = null;
        Story response = api.storyIdFilePost(id, replaceExisting, obsoleteId, includeOutline, _file);
        // TODO: test validations
    }

    /**
     * Story: Get by Id
     *
     * Returns story metadata, inlcuding json object with story outline
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storyIdGetTest() throws ApiException {
        UUID id = null;
        Boolean includeRelationships = null;
        Boolean includeOutline = null;
        Boolean full = null;
        Boolean refreshCache = null;
        Story response = api.storyIdGet(id, includeRelationships, includeOutline, full, refreshCache);
        // TODO: test validations
    }

    /**
     * Story: Get Story Outline
     *
     * Returns Story&#39;s outline
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storyIdOutlineGetTest() throws ApiException {
        UUID id = null;
        String response = api.storyIdOutlineGet(id);
        // TODO: test validations
    }

    /**
     * Story: Post Story Outline
     *
     * Update a story outline.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storyIdOutlinePostTest() throws ApiException {
        UUID id = null;
        String body = null;
        api.storyIdOutlinePost(id, body);
        // TODO: test validations
    }

    /**
     * Story: Public Link to Story Reveal.js Document
     *
     * returns an html document containing a reveal.js epresentation of the story, if the story if set to is_public &#x3D; True
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storyIdPublicTest() throws ApiException {
        UUID id = null;
        String response = api.storyIdPublic(id);
        // TODO: test validations
    }

    /**
     * Story: Modify
     *
     * Update story metadata, including story outline
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storyIdPutTest() throws ApiException {
        UUID id = null;
        Story story = null;
        Boolean includeOutline = null;
        Story response = api.storyIdPut(id, story, includeOutline);
        // TODO: test validations
    }

    /**
     * Story: Get Story at Reveal.js Document
     *
     * returns an html document containing a reveal.js epresentation of the story
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storyIdRevealTest() throws ApiException {
        UUID id = null;
        String response = api.storyIdReveal(id);
        // TODO: test validations
    }

    /**
     * Story: Get Story Status
     *
     * Returns code indicating whether story has active running background and is healthy (e.g., the latest outline is valid)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storyIdStatusGetTest() throws ApiException {
        UUID id = null;
        Status response = api.storyIdStatusGet(id);
        // TODO: test validations
    }

    /**
     * Story: Upload
     *
     * Upload new story to presalytics api
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storyPostTest() throws ApiException {
        Outline outline = null;
        Boolean includeOutline = null;
        Story response = api.storyPost(outline, includeOutline);
        // TODO: test validations
    }

    /**
     * Story: Upload a File
     *
     * Upload new story to presalytics api via an Open Office Xml file
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storyPostFileTest() throws ApiException {
        Boolean includeOutline = null;
        List<File> _file = null;
        Story response = api.storyPostFile(includeOutline, _file);
        // TODO: test validations
    }

    /**
     * Story: Upload a File (base64)
     *
     * Upload new story to presalytics api via an Open Office Xml file
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storyPostFileJsonTest() throws ApiException {
        Boolean includeOutline = null;
        FileUpload fileUpload = null;
        Story response = api.storyPostFileJson(includeOutline, fileUpload);
        // TODO: test validations
    }

}
