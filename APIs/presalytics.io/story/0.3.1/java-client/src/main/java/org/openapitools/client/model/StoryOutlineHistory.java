/*
 * Story
 * This API is the main entry point for creating, editing and publishing analytics throught the Presalytics API
 *
 * The version of the OpenAPI document: 0.3.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A revision repository for story outlines
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:17.561584-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StoryOutlineHistory {
  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_CREATED_BY = "created_by";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private UUID createdBy;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_UPDATED_BY = "updated_by";
  @SerializedName(SERIALIZED_NAME_UPDATED_BY)
  private UUID updatedBy;

  public static final String SERIALIZED_NAME_COLLABORATOR_USER_ID = "collaborator_user_id";
  @SerializedName(SERIALIZED_NAME_COLLABORATOR_USER_ID)
  private UUID collaboratorUserId;

  public static final String SERIALIZED_NAME_OUTLINE = "outline";
  @SerializedName(SERIALIZED_NAME_OUTLINE)
  private String outline;

  public static final String SERIALIZED_NAME_REVISION_NUMBER = "revision_number";
  @SerializedName(SERIALIZED_NAME_REVISION_NUMBER)
  private Integer revisionNumber;

  public static final String SERIALIZED_NAME_STORY_ID = "story_id";
  @SerializedName(SERIALIZED_NAME_STORY_ID)
  private UUID storyId;

  public StoryOutlineHistory() {
  }

  public StoryOutlineHistory createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public StoryOutlineHistory createdBy(UUID createdBy) {
    this.createdBy = createdBy;
    return this;
  }

  /**
   * Get createdBy
   * @return createdBy
   */
  @javax.annotation.Nullable
  public UUID getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(UUID createdBy) {
    this.createdBy = createdBy;
  }


  public StoryOutlineHistory id(UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }


  public StoryOutlineHistory updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public StoryOutlineHistory updatedBy(UUID updatedBy) {
    this.updatedBy = updatedBy;
    return this;
  }

  /**
   * Get updatedBy
   * @return updatedBy
   */
  @javax.annotation.Nullable
  public UUID getUpdatedBy() {
    return updatedBy;
  }

  public void setUpdatedBy(UUID updatedBy) {
    this.updatedBy = updatedBy;
  }


  public StoryOutlineHistory collaboratorUserId(UUID collaboratorUserId) {
    this.collaboratorUserId = collaboratorUserId;
    return this;
  }

  /**
   * Get collaboratorUserId
   * @return collaboratorUserId
   */
  @javax.annotation.Nullable
  public UUID getCollaboratorUserId() {
    return collaboratorUserId;
  }

  public void setCollaboratorUserId(UUID collaboratorUserId) {
    this.collaboratorUserId = collaboratorUserId;
  }


  public StoryOutlineHistory outline(String outline) {
    this.outline = outline;
    return this;
  }

  /**
   * Get outline
   * @return outline
   */
  @javax.annotation.Nullable
  public String getOutline() {
    return outline;
  }

  public void setOutline(String outline) {
    this.outline = outline;
  }


  public StoryOutlineHistory revisionNumber(Integer revisionNumber) {
    this.revisionNumber = revisionNumber;
    return this;
  }

  /**
   * Get revisionNumber
   * @return revisionNumber
   */
  @javax.annotation.Nullable
  public Integer getRevisionNumber() {
    return revisionNumber;
  }

  public void setRevisionNumber(Integer revisionNumber) {
    this.revisionNumber = revisionNumber;
  }


  public StoryOutlineHistory storyId(UUID storyId) {
    this.storyId = storyId;
    return this;
  }

  /**
   * Get storyId
   * @return storyId
   */
  @javax.annotation.Nullable
  public UUID getStoryId() {
    return storyId;
  }

  public void setStoryId(UUID storyId) {
    this.storyId = storyId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StoryOutlineHistory storyOutlineHistory = (StoryOutlineHistory) o;
    return Objects.equals(this.createdAt, storyOutlineHistory.createdAt) &&
        Objects.equals(this.createdBy, storyOutlineHistory.createdBy) &&
        Objects.equals(this.id, storyOutlineHistory.id) &&
        Objects.equals(this.updatedAt, storyOutlineHistory.updatedAt) &&
        Objects.equals(this.updatedBy, storyOutlineHistory.updatedBy) &&
        Objects.equals(this.collaboratorUserId, storyOutlineHistory.collaboratorUserId) &&
        Objects.equals(this.outline, storyOutlineHistory.outline) &&
        Objects.equals(this.revisionNumber, storyOutlineHistory.revisionNumber) &&
        Objects.equals(this.storyId, storyOutlineHistory.storyId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdAt, createdBy, id, updatedAt, updatedBy, collaboratorUserId, outline, revisionNumber, storyId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StoryOutlineHistory {\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    updatedBy: ").append(toIndentedString(updatedBy)).append("\n");
    sb.append("    collaboratorUserId: ").append(toIndentedString(collaboratorUserId)).append("\n");
    sb.append("    outline: ").append(toIndentedString(outline)).append("\n");
    sb.append("    revisionNumber: ").append(toIndentedString(revisionNumber)).append("\n");
    sb.append("    storyId: ").append(toIndentedString(storyId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("created_at");
    openapiFields.add("created_by");
    openapiFields.add("id");
    openapiFields.add("updated_at");
    openapiFields.add("updated_by");
    openapiFields.add("collaborator_user_id");
    openapiFields.add("outline");
    openapiFields.add("revision_number");
    openapiFields.add("story_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StoryOutlineHistory
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StoryOutlineHistory.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StoryOutlineHistory is not found in the empty JSON string", StoryOutlineHistory.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StoryOutlineHistory.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StoryOutlineHistory` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("created_by") != null && !jsonObj.get("created_by").isJsonNull()) && !jsonObj.get("created_by").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_by` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_by").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("updated_by") != null && !jsonObj.get("updated_by").isJsonNull()) && !jsonObj.get("updated_by").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated_by` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated_by").toString()));
      }
      if ((jsonObj.get("collaborator_user_id") != null && !jsonObj.get("collaborator_user_id").isJsonNull()) && !jsonObj.get("collaborator_user_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `collaborator_user_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("collaborator_user_id").toString()));
      }
      if ((jsonObj.get("outline") != null && !jsonObj.get("outline").isJsonNull()) && !jsonObj.get("outline").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `outline` to be a primitive type in the JSON string but got `%s`", jsonObj.get("outline").toString()));
      }
      if ((jsonObj.get("story_id") != null && !jsonObj.get("story_id").isJsonNull()) && !jsonObj.get("story_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `story_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("story_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StoryOutlineHistory.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StoryOutlineHistory' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StoryOutlineHistory> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StoryOutlineHistory.class));

       return (TypeAdapter<T>) new TypeAdapter<StoryOutlineHistory>() {
           @Override
           public void write(JsonWriter out, StoryOutlineHistory value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StoryOutlineHistory read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StoryOutlineHistory given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StoryOutlineHistory
   * @throws IOException if the JSON string is invalid with respect to StoryOutlineHistory
   */
  public static StoryOutlineHistory fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StoryOutlineHistory.class);
  }

  /**
   * Convert an instance of StoryOutlineHistory to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

