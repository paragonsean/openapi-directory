/*
 * Story
 * This API is the main entry point for creating, editing and publishing analytics throught the Presalytics API
 *
 * The version of the OpenAPI document: 0.3.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CachePostRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:17.561584-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CachePostRequest {
  public static final String SERIALIZED_NAME_CURRENT_USER_ID = "current_user_id";
  @SerializedName(SERIALIZED_NAME_CURRENT_USER_ID)
  private UUID currentUserId;

  public static final String SERIALIZED_NAME_NONCE = "nonce";
  @SerializedName(SERIALIZED_NAME_NONCE)
  private UUID nonce;

  public static final String SERIALIZED_NAME_SUBDOCUMENT = "subdocument";
  @SerializedName(SERIALIZED_NAME_SUBDOCUMENT)
  private String subdocument;

  public CachePostRequest() {
  }

  public CachePostRequest currentUserId(UUID currentUserId) {
    this.currentUserId = currentUserId;
    return this;
  }

  /**
   * Get currentUserId
   * @return currentUserId
   */
  @javax.annotation.Nullable
  public UUID getCurrentUserId() {
    return currentUserId;
  }

  public void setCurrentUserId(UUID currentUserId) {
    this.currentUserId = currentUserId;
  }


  public CachePostRequest nonce(UUID nonce) {
    this.nonce = nonce;
    return this;
  }

  /**
   * Get nonce
   * @return nonce
   */
  @javax.annotation.Nullable
  public UUID getNonce() {
    return nonce;
  }

  public void setNonce(UUID nonce) {
    this.nonce = nonce;
  }


  public CachePostRequest subdocument(String subdocument) {
    this.subdocument = subdocument;
    return this;
  }

  /**
   * Get subdocument
   * @return subdocument
   */
  @javax.annotation.Nullable
  public String getSubdocument() {
    return subdocument;
  }

  public void setSubdocument(String subdocument) {
    this.subdocument = subdocument;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CachePostRequest cachePostRequest = (CachePostRequest) o;
    return Objects.equals(this.currentUserId, cachePostRequest.currentUserId) &&
        Objects.equals(this.nonce, cachePostRequest.nonce) &&
        Objects.equals(this.subdocument, cachePostRequest.subdocument);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currentUserId, nonce, subdocument);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CachePostRequest {\n");
    sb.append("    currentUserId: ").append(toIndentedString(currentUserId)).append("\n");
    sb.append("    nonce: ").append(toIndentedString(nonce)).append("\n");
    sb.append("    subdocument: ").append(toIndentedString(subdocument)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("current_user_id");
    openapiFields.add("nonce");
    openapiFields.add("subdocument");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CachePostRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CachePostRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CachePostRequest is not found in the empty JSON string", CachePostRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CachePostRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CachePostRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("current_user_id") != null && !jsonObj.get("current_user_id").isJsonNull()) && !jsonObj.get("current_user_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `current_user_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("current_user_id").toString()));
      }
      if ((jsonObj.get("nonce") != null && !jsonObj.get("nonce").isJsonNull()) && !jsonObj.get("nonce").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nonce` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nonce").toString()));
      }
      if ((jsonObj.get("subdocument") != null && !jsonObj.get("subdocument").isJsonNull()) && !jsonObj.get("subdocument").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subdocument` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subdocument").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CachePostRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CachePostRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CachePostRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CachePostRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CachePostRequest>() {
           @Override
           public void write(JsonWriter out, CachePostRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CachePostRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CachePostRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CachePostRequest
   * @throws IOException if the JSON string is invalid with respect to CachePostRequest
   */
  public static CachePostRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CachePostRequest.class);
  }

  /**
   * Convert an instance of CachePostRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

