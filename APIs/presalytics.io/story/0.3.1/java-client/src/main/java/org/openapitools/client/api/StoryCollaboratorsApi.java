/*
 * Story
 * This API is the main entry point for creating, editing and publishing analytics throught the Presalytics API
 *
 * The version of the OpenAPI document: 0.3.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AddNewCollaboratorRequest;
import org.openapitools.client.model.ModifyInactiveCollaborator;
import org.openapitools.client.model.ProblemDetail;
import org.openapitools.client.model.StoryCollaborator;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StoryCollaboratorsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public StoryCollaboratorsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StoryCollaboratorsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for storyIdCollaboratorsGet
     * @param id the id from the story object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of collaborators on the story </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storyIdCollaboratorsGetCall(UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{id}/collaborators"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storyIdCollaboratorsGetValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling storyIdCollaboratorsGet(Async)");
        }

        return storyIdCollaboratorsGetCall(id, _callback);

    }

    /**
     * Story Collaborators: List
     * Gets a list users that can read or edit this story
     * @param id the id from the story object (required)
     * @return List&lt;StoryCollaborator&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of collaborators on the story </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<StoryCollaborator> storyIdCollaboratorsGet(UUID id) throws ApiException {
        ApiResponse<List<StoryCollaborator>> localVarResp = storyIdCollaboratorsGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Story Collaborators: List
     * Gets a list users that can read or edit this story
     * @param id the id from the story object (required)
     * @return ApiResponse&lt;List&lt;StoryCollaborator&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of collaborators on the story </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<StoryCollaborator>> storyIdCollaboratorsGetWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = storyIdCollaboratorsGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<StoryCollaborator>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Story Collaborators: List (asynchronously)
     * Gets a list users that can read or edit this story
     * @param id the id from the story object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of collaborators on the story </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storyIdCollaboratorsGetAsync(UUID id, final ApiCallback<List<StoryCollaborator>> _callback) throws ApiException {

        okhttp3.Call localVarCall = storyIdCollaboratorsGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<StoryCollaborator>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for storyIdCollaboratorsInactivePost
     * @param id the id from the story object (required)
     * @param modifyInactiveCollaborator Collaborator user id and permission type (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collaborator data </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storyIdCollaboratorsInactivePostCall(UUID id, ModifyInactiveCollaborator modifyInactiveCollaborator, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modifyInactiveCollaborator;

        // create path and map variables
        String localVarPath = "/{id}/collaborators/inactive"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storyIdCollaboratorsInactivePostValidateBeforeCall(UUID id, ModifyInactiveCollaborator modifyInactiveCollaborator, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling storyIdCollaboratorsInactivePost(Async)");
        }

        // verify the required parameter 'modifyInactiveCollaborator' is set
        if (modifyInactiveCollaborator == null) {
            throw new ApiException("Missing the required parameter 'modifyInactiveCollaborator' when calling storyIdCollaboratorsInactivePost(Async)");
        }

        return storyIdCollaboratorsInactivePostCall(id, modifyInactiveCollaborator, _callback);

    }

    /**
     * Story Collaborators: Edit Inactive User Permission
     * Edit story permissions for inactive users.  Requires admin rights.
     * @param id the id from the story object (required)
     * @param modifyInactiveCollaborator Collaborator user id and permission type (required)
     * @return StoryCollaborator
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collaborator data </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public StoryCollaborator storyIdCollaboratorsInactivePost(UUID id, ModifyInactiveCollaborator modifyInactiveCollaborator) throws ApiException {
        ApiResponse<StoryCollaborator> localVarResp = storyIdCollaboratorsInactivePostWithHttpInfo(id, modifyInactiveCollaborator);
        return localVarResp.getData();
    }

    /**
     * Story Collaborators: Edit Inactive User Permission
     * Edit story permissions for inactive users.  Requires admin rights.
     * @param id the id from the story object (required)
     * @param modifyInactiveCollaborator Collaborator user id and permission type (required)
     * @return ApiResponse&lt;StoryCollaborator&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collaborator data </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StoryCollaborator> storyIdCollaboratorsInactivePostWithHttpInfo(UUID id, ModifyInactiveCollaborator modifyInactiveCollaborator) throws ApiException {
        okhttp3.Call localVarCall = storyIdCollaboratorsInactivePostValidateBeforeCall(id, modifyInactiveCollaborator, null);
        Type localVarReturnType = new TypeToken<StoryCollaborator>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Story Collaborators: Edit Inactive User Permission (asynchronously)
     * Edit story permissions for inactive users.  Requires admin rights.
     * @param id the id from the story object (required)
     * @param modifyInactiveCollaborator Collaborator user id and permission type (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collaborator data </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storyIdCollaboratorsInactivePostAsync(UUID id, ModifyInactiveCollaborator modifyInactiveCollaborator, final ApiCallback<StoryCollaborator> _callback) throws ApiException {

        okhttp3.Call localVarCall = storyIdCollaboratorsInactivePostValidateBeforeCall(id, modifyInactiveCollaborator, _callback);
        Type localVarReturnType = new TypeToken<StoryCollaborator>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for storyIdCollaboratorsPost
     * @param id the id from the story object (required)
     * @param addNewCollaboratorRequest Collaborator user id and permission type (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collaborator data </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storyIdCollaboratorsPostCall(UUID id, AddNewCollaboratorRequest addNewCollaboratorRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addNewCollaboratorRequest;

        // create path and map variables
        String localVarPath = "/{id}/collaborators"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storyIdCollaboratorsPostValidateBeforeCall(UUID id, AddNewCollaboratorRequest addNewCollaboratorRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling storyIdCollaboratorsPost(Async)");
        }

        // verify the required parameter 'addNewCollaboratorRequest' is set
        if (addNewCollaboratorRequest == null) {
            throw new ApiException("Missing the required parameter 'addNewCollaboratorRequest' when calling storyIdCollaboratorsPost(Async)");
        }

        return storyIdCollaboratorsPostCall(id, addNewCollaboratorRequest, _callback);

    }

    /**
     * Story Collaborators: Add New User
     * Add a colloborator to this story
     * @param id the id from the story object (required)
     * @param addNewCollaboratorRequest Collaborator user id and permission type (required)
     * @return StoryCollaborator
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collaborator data </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public StoryCollaborator storyIdCollaboratorsPost(UUID id, AddNewCollaboratorRequest addNewCollaboratorRequest) throws ApiException {
        ApiResponse<StoryCollaborator> localVarResp = storyIdCollaboratorsPostWithHttpInfo(id, addNewCollaboratorRequest);
        return localVarResp.getData();
    }

    /**
     * Story Collaborators: Add New User
     * Add a colloborator to this story
     * @param id the id from the story object (required)
     * @param addNewCollaboratorRequest Collaborator user id and permission type (required)
     * @return ApiResponse&lt;StoryCollaborator&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collaborator data </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StoryCollaborator> storyIdCollaboratorsPostWithHttpInfo(UUID id, AddNewCollaboratorRequest addNewCollaboratorRequest) throws ApiException {
        okhttp3.Call localVarCall = storyIdCollaboratorsPostValidateBeforeCall(id, addNewCollaboratorRequest, null);
        Type localVarReturnType = new TypeToken<StoryCollaborator>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Story Collaborators: Add New User (asynchronously)
     * Add a colloborator to this story
     * @param id the id from the story object (required)
     * @param addNewCollaboratorRequest Collaborator user id and permission type (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collaborator data </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storyIdCollaboratorsPostAsync(UUID id, AddNewCollaboratorRequest addNewCollaboratorRequest, final ApiCallback<StoryCollaborator> _callback) throws ApiException {

        okhttp3.Call localVarCall = storyIdCollaboratorsPostValidateBeforeCall(id, addNewCollaboratorRequest, _callback);
        Type localVarReturnType = new TypeToken<StoryCollaborator>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for storyIdCollaboratorsUseridDelete
     * @param id the id from the story object (required)
     * @param storyCollaboratorUserid The presalytics userid (NOT the Id of the story_collaborator object) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storyIdCollaboratorsUseridDeleteCall(UUID id, UUID storyCollaboratorUserid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{id}/collaborators/{story_collaborator_userid}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "story_collaborator_userid" + "}", localVarApiClient.escapeString(storyCollaboratorUserid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storyIdCollaboratorsUseridDeleteValidateBeforeCall(UUID id, UUID storyCollaboratorUserid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling storyIdCollaboratorsUseridDelete(Async)");
        }

        // verify the required parameter 'storyCollaboratorUserid' is set
        if (storyCollaboratorUserid == null) {
            throw new ApiException("Missing the required parameter 'storyCollaboratorUserid' when calling storyIdCollaboratorsUseridDelete(Async)");
        }

        return storyIdCollaboratorsUseridDeleteCall(id, storyCollaboratorUserid, _callback);

    }

    /**
     * Story Collaborators: Remove User
     * Remove a collaborator from this story
     * @param id the id from the story object (required)
     * @param storyCollaboratorUserid The presalytics userid (NOT the Id of the story_collaborator object) (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public void storyIdCollaboratorsUseridDelete(UUID id, UUID storyCollaboratorUserid) throws ApiException {
        storyIdCollaboratorsUseridDeleteWithHttpInfo(id, storyCollaboratorUserid);
    }

    /**
     * Story Collaborators: Remove User
     * Remove a collaborator from this story
     * @param id the id from the story object (required)
     * @param storyCollaboratorUserid The presalytics userid (NOT the Id of the story_collaborator object) (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> storyIdCollaboratorsUseridDeleteWithHttpInfo(UUID id, UUID storyCollaboratorUserid) throws ApiException {
        okhttp3.Call localVarCall = storyIdCollaboratorsUseridDeleteValidateBeforeCall(id, storyCollaboratorUserid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Story Collaborators: Remove User (asynchronously)
     * Remove a collaborator from this story
     * @param id the id from the story object (required)
     * @param storyCollaboratorUserid The presalytics userid (NOT the Id of the story_collaborator object) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storyIdCollaboratorsUseridDeleteAsync(UUID id, UUID storyCollaboratorUserid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = storyIdCollaboratorsUseridDeleteValidateBeforeCall(id, storyCollaboratorUserid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for storyIdCollaboratorsUseridGet
     * @param id the id from the story object (required)
     * @param storyCollaboratorUserid The presalytics userid (NOT the Id of the story_collaborator object) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collaborator data </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storyIdCollaboratorsUseridGetCall(UUID id, UUID storyCollaboratorUserid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{id}/collaborators/{story_collaborator_userid}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "story_collaborator_userid" + "}", localVarApiClient.escapeString(storyCollaboratorUserid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storyIdCollaboratorsUseridGetValidateBeforeCall(UUID id, UUID storyCollaboratorUserid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling storyIdCollaboratorsUseridGet(Async)");
        }

        // verify the required parameter 'storyCollaboratorUserid' is set
        if (storyCollaboratorUserid == null) {
            throw new ApiException("Missing the required parameter 'storyCollaboratorUserid' when calling storyIdCollaboratorsUseridGet(Async)");
        }

        return storyIdCollaboratorsUseridGetCall(id, storyCollaboratorUserid, _callback);

    }

    /**
     * Story Collaborators: Access Permissions
     * Data to help you understand the access rights of a particular collaborator on this story
     * @param id the id from the story object (required)
     * @param storyCollaboratorUserid The presalytics userid (NOT the Id of the story_collaborator object) (required)
     * @return StoryCollaborator
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collaborator data </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public StoryCollaborator storyIdCollaboratorsUseridGet(UUID id, UUID storyCollaboratorUserid) throws ApiException {
        ApiResponse<StoryCollaborator> localVarResp = storyIdCollaboratorsUseridGetWithHttpInfo(id, storyCollaboratorUserid);
        return localVarResp.getData();
    }

    /**
     * Story Collaborators: Access Permissions
     * Data to help you understand the access rights of a particular collaborator on this story
     * @param id the id from the story object (required)
     * @param storyCollaboratorUserid The presalytics userid (NOT the Id of the story_collaborator object) (required)
     * @return ApiResponse&lt;StoryCollaborator&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collaborator data </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StoryCollaborator> storyIdCollaboratorsUseridGetWithHttpInfo(UUID id, UUID storyCollaboratorUserid) throws ApiException {
        okhttp3.Call localVarCall = storyIdCollaboratorsUseridGetValidateBeforeCall(id, storyCollaboratorUserid, null);
        Type localVarReturnType = new TypeToken<StoryCollaborator>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Story Collaborators: Access Permissions (asynchronously)
     * Data to help you understand the access rights of a particular collaborator on this story
     * @param id the id from the story object (required)
     * @param storyCollaboratorUserid The presalytics userid (NOT the Id of the story_collaborator object) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collaborator data </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storyIdCollaboratorsUseridGetAsync(UUID id, UUID storyCollaboratorUserid, final ApiCallback<StoryCollaborator> _callback) throws ApiException {

        okhttp3.Call localVarCall = storyIdCollaboratorsUseridGetValidateBeforeCall(id, storyCollaboratorUserid, _callback);
        Type localVarReturnType = new TypeToken<StoryCollaborator>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for storyIdCollaboratorsUseridPut
     * @param id the id from the story object (required)
     * @param storyCollaboratorUserid The presalytics userid (NOT the Id of the story_collaborator object) (required)
     * @param storyCollaborator Collaborator user id (presalytics userid) and permission type (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collaborator data </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storyIdCollaboratorsUseridPutCall(UUID id, UUID storyCollaboratorUserid, StoryCollaborator storyCollaborator, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = storyCollaborator;

        // create path and map variables
        String localVarPath = "/{id}/collaborators/{story_collaborator_userid}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "story_collaborator_userid" + "}", localVarApiClient.escapeString(storyCollaboratorUserid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storyIdCollaboratorsUseridPutValidateBeforeCall(UUID id, UUID storyCollaboratorUserid, StoryCollaborator storyCollaborator, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling storyIdCollaboratorsUseridPut(Async)");
        }

        // verify the required parameter 'storyCollaboratorUserid' is set
        if (storyCollaboratorUserid == null) {
            throw new ApiException("Missing the required parameter 'storyCollaboratorUserid' when calling storyIdCollaboratorsUseridPut(Async)");
        }

        // verify the required parameter 'storyCollaborator' is set
        if (storyCollaborator == null) {
            throw new ApiException("Missing the required parameter 'storyCollaborator' when calling storyIdCollaboratorsUseridPut(Async)");
        }

        return storyIdCollaboratorsUseridPutCall(id, storyCollaboratorUserid, storyCollaborator, _callback);

    }

    /**
     * Story Collaborators: Edit Access Rights
     * Modify a user&#39;s access right to this story (e.g., grant edit permissions)
     * @param id the id from the story object (required)
     * @param storyCollaboratorUserid The presalytics userid (NOT the Id of the story_collaborator object) (required)
     * @param storyCollaborator Collaborator user id (presalytics userid) and permission type (required)
     * @return StoryCollaborator
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collaborator data </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public StoryCollaborator storyIdCollaboratorsUseridPut(UUID id, UUID storyCollaboratorUserid, StoryCollaborator storyCollaborator) throws ApiException {
        ApiResponse<StoryCollaborator> localVarResp = storyIdCollaboratorsUseridPutWithHttpInfo(id, storyCollaboratorUserid, storyCollaborator);
        return localVarResp.getData();
    }

    /**
     * Story Collaborators: Edit Access Rights
     * Modify a user&#39;s access right to this story (e.g., grant edit permissions)
     * @param id the id from the story object (required)
     * @param storyCollaboratorUserid The presalytics userid (NOT the Id of the story_collaborator object) (required)
     * @param storyCollaborator Collaborator user id (presalytics userid) and permission type (required)
     * @return ApiResponse&lt;StoryCollaborator&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collaborator data </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StoryCollaborator> storyIdCollaboratorsUseridPutWithHttpInfo(UUID id, UUID storyCollaboratorUserid, StoryCollaborator storyCollaborator) throws ApiException {
        okhttp3.Call localVarCall = storyIdCollaboratorsUseridPutValidateBeforeCall(id, storyCollaboratorUserid, storyCollaborator, null);
        Type localVarReturnType = new TypeToken<StoryCollaborator>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Story Collaborators: Edit Access Rights (asynchronously)
     * Modify a user&#39;s access right to this story (e.g., grant edit permissions)
     * @param id the id from the story object (required)
     * @param storyCollaboratorUserid The presalytics userid (NOT the Id of the story_collaborator object) (required)
     * @param storyCollaborator Collaborator user id (presalytics userid) and permission type (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collaborator data </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storyIdCollaboratorsUseridPutAsync(UUID id, UUID storyCollaboratorUserid, StoryCollaborator storyCollaborator, final ApiCallback<StoryCollaborator> _callback) throws ApiException {

        okhttp3.Call localVarCall = storyIdCollaboratorsUseridPutValidateBeforeCall(id, storyCollaboratorUserid, storyCollaborator, _callback);
        Type localVarReturnType = new TypeToken<StoryCollaborator>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
