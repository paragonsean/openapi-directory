/**
 * Story
 * This API is the main entry point for creating, editing and publishing analytics throught the Presalytics API
 *
 * The version of the OpenAPI document: 0.3.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BaseModel from './BaseModel';

/**
 * The Event model module.
 * @module model/Event
 * @version 0.3.1
 */
class Event {
    /**
     * Constructs a new <code>Event</code>.
     * An Story Event object
     * @alias module:model/Event
     * @implements module:model/BaseModel
     */
    constructor() { 
        BaseModel.initialize(this);
        Event.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Event</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Event} obj Optional instance to populate.
     * @return {module:model/Event} The populated <code>Event</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Event();
            BaseModel.constructFromObject(data, obj);

            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('created_by')) {
                obj['created_by'] = ApiClient.convertToType(data['created_by'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
            if (data.hasOwnProperty('updated_by')) {
                obj['updated_by'] = ApiClient.convertToType(data['updated_by'], 'String');
            }
            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = ApiClient.convertToType(data['attributes'], 'String');
            }
            if (data.hasOwnProperty('chat_prompt')) {
                obj['chat_prompt'] = ApiClient.convertToType(data['chat_prompt'], 'String');
            }
            if (data.hasOwnProperty('conversation_id')) {
                obj['conversation_id'] = ApiClient.convertToType(data['conversation_id'], 'String');
            }
            if (data.hasOwnProperty('dom_selectors')) {
                obj['dom_selectors'] = ApiClient.convertToType(data['dom_selectors'], 'String');
            }
            if (data.hasOwnProperty('is_chat_hidden')) {
                obj['is_chat_hidden'] = ApiClient.convertToType(data['is_chat_hidden'], 'Boolean');
            }
            if (data.hasOwnProperty('is_notify_enabled')) {
                obj['is_notify_enabled'] = ApiClient.convertToType(data['is_notify_enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Event</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Event</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['created_by'] && !(typeof data['created_by'] === 'string' || data['created_by'] instanceof String)) {
            throw new Error("Expected the field `created_by` to be a primitive type in the JSON string but got " + data['created_by']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['updated_by'] && !(typeof data['updated_by'] === 'string' || data['updated_by'] instanceof String)) {
            throw new Error("Expected the field `updated_by` to be a primitive type in the JSON string but got " + data['updated_by']);
        }
        // ensure the json data is a string
        if (data['attributes'] && !(typeof data['attributes'] === 'string' || data['attributes'] instanceof String)) {
            throw new Error("Expected the field `attributes` to be a primitive type in the JSON string but got " + data['attributes']);
        }
        // ensure the json data is a string
        if (data['chat_prompt'] && !(typeof data['chat_prompt'] === 'string' || data['chat_prompt'] instanceof String)) {
            throw new Error("Expected the field `chat_prompt` to be a primitive type in the JSON string but got " + data['chat_prompt']);
        }
        // ensure the json data is a string
        if (data['conversation_id'] && !(typeof data['conversation_id'] === 'string' || data['conversation_id'] instanceof String)) {
            throw new Error("Expected the field `conversation_id` to be a primitive type in the JSON string but got " + data['conversation_id']);
        }
        // ensure the json data is a string
        if (data['dom_selectors'] && !(typeof data['dom_selectors'] === 'string' || data['dom_selectors'] instanceof String)) {
            throw new Error("Expected the field `dom_selectors` to be a primitive type in the JSON string but got " + data['dom_selectors']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}



/**
 * @member {Date} created_at
 */
Event.prototype['created_at'] = undefined;

/**
 * @member {String} created_by
 */
Event.prototype['created_by'] = undefined;

/**
 * @member {String} id
 */
Event.prototype['id'] = undefined;

/**
 * @member {Date} updated_at
 */
Event.prototype['updated_at'] = undefined;

/**
 * @member {String} updated_by
 */
Event.prototype['updated_by'] = undefined;

/**
 * @member {String} attributes
 */
Event.prototype['attributes'] = undefined;

/**
 * @member {String} chat_prompt
 */
Event.prototype['chat_prompt'] = undefined;

/**
 * @member {String} conversation_id
 */
Event.prototype['conversation_id'] = undefined;

/**
 * @member {String} dom_selectors
 */
Event.prototype['dom_selectors'] = undefined;

/**
 * @member {Boolean} is_chat_hidden
 */
Event.prototype['is_chat_hidden'] = undefined;

/**
 * @member {Boolean} is_notify_enabled
 */
Event.prototype['is_notify_enabled'] = undefined;

/**
 * @member {String} name
 */
Event.prototype['name'] = undefined;


// Implement BaseModel interface:
/**
 * @member {Date} created_at
 */
BaseModel.prototype['created_at'] = undefined;
/**
 * @member {String} created_by
 */
BaseModel.prototype['created_by'] = undefined;
/**
 * @member {String} id
 */
BaseModel.prototype['id'] = undefined;
/**
 * @member {Date} updated_at
 */
BaseModel.prototype['updated_at'] = undefined;
/**
 * @member {String} updated_by
 */
BaseModel.prototype['updated_by'] = undefined;




export default Event;

