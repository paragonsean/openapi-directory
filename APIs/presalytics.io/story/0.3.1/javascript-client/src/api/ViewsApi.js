/**
 * Story
 * This API is the main entry point for creating, editing and publishing analytics throught the Presalytics API
 *
 * The version of the OpenAPI document: 0.3.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ProblemDetail from '../model/ProblemDetail';
import RequiredParametersToCreateAView from '../model/RequiredParametersToCreateAView';
import View from '../model/View';

/**
* Views service.
* @module api/ViewsApi
* @version 0.3.1
*/
export default class ViewsApi {

    /**
    * Constructs a new ViewsApi. 
    * @alias module:api/ViewsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the sessionsIdViewsGet operation.
     * @callback module:api/ViewsApi~sessionsIdViewsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/View>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Views: List Session Views
     * Get data for all views in a session
     * @param {String} sessionId The primary key for a view session
     * @param {module:api/ViewsApi~sessionsIdViewsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/View>}
     */
    sessionsIdViewsGet(sessionId, callback) {
      let postBody = null;
      // verify the required parameter 'sessionId' is set
      if (sessionId === undefined || sessionId === null) {
        throw new Error("Missing the required parameter 'sessionId' when calling sessionsIdViewsGet");
      }

      let pathParams = {
        'session_id': sessionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [View];
      return this.apiClient.callApi(
        '/sessions/{session_id}/views', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionsIdViewsPost operation.
     * @callback module:api/ViewsApi~sessionsIdViewsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/View} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Views: Create A Session View
     * Create a page view object for a viewing session
     * @param {String} sessionId The primary key for a view session
     * @param {module:model/RequiredParametersToCreateAView} requiredParametersToCreateAView Collaborator user id and permission type
     * @param {module:api/ViewsApi~sessionsIdViewsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/View}
     */
    sessionsIdViewsPost(sessionId, requiredParametersToCreateAView, callback) {
      let postBody = requiredParametersToCreateAView;
      // verify the required parameter 'sessionId' is set
      if (sessionId === undefined || sessionId === null) {
        throw new Error("Missing the required parameter 'sessionId' when calling sessionsIdViewsPost");
      }
      // verify the required parameter 'requiredParametersToCreateAView' is set
      if (requiredParametersToCreateAView === undefined || requiredParametersToCreateAView === null) {
        throw new Error("Missing the required parameter 'requiredParametersToCreateAView' when calling sessionsIdViewsPost");
      }

      let pathParams = {
        'session_id': sessionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = View;
      return this.apiClient.callApi(
        '/sessions/{session_id}/views', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the viewsIdDelete operation.
     * @callback module:api/ViewsApi~viewsIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Views: Delete by Id
     * Remove a view and dependant data.
     * @param {String} viewId The primary key for a page view within a session
     * @param {module:api/ViewsApi~viewsIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    viewsIdDelete(viewId, callback) {
      let postBody = null;
      // verify the required parameter 'viewId' is set
      if (viewId === undefined || viewId === null) {
        throw new Error("Missing the required parameter 'viewId' when calling viewsIdDelete");
      }

      let pathParams = {
        'view_id': viewId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/views/{view_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the viewsIdGet operation.
     * @callback module:api/ViewsApi~viewsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/View} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Views: Get View
     * Get view meta data
     * @param {String} viewId The primary key for a page view within a session
     * @param {module:api/ViewsApi~viewsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/View}
     */
    viewsIdGet(viewId, callback) {
      let postBody = null;
      // verify the required parameter 'viewId' is set
      if (viewId === undefined || viewId === null) {
        throw new Error("Missing the required parameter 'viewId' when calling viewsIdGet");
      }

      let pathParams = {
        'view_id': viewId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = View;
      return this.apiClient.callApi(
        '/views/{view_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
