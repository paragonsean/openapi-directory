/**
 * Story
 * This API is the main entry point for creating, editing and publishing analytics throught the Presalytics API
 *
 * The version of the OpenAPI document: 0.3.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddNewCollaboratorRequest from '../model/AddNewCollaboratorRequest';
import ModifyInactiveCollaborator from '../model/ModifyInactiveCollaborator';
import ProblemDetail from '../model/ProblemDetail';
import StoryCollaborator from '../model/StoryCollaborator';

/**
* StoryCollaborators service.
* @module api/StoryCollaboratorsApi
* @version 0.3.1
*/
export default class StoryCollaboratorsApi {

    /**
    * Constructs a new StoryCollaboratorsApi. 
    * @alias module:api/StoryCollaboratorsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the storyIdCollaboratorsGet operation.
     * @callback module:api/StoryCollaboratorsApi~storyIdCollaboratorsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/StoryCollaborator>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Story Collaborators: List
     * Gets a list users that can read or edit this story
     * @param {String} id the id from the story object
     * @param {module:api/StoryCollaboratorsApi~storyIdCollaboratorsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/StoryCollaborator>}
     */
    storyIdCollaboratorsGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling storyIdCollaboratorsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [StoryCollaborator];
      return this.apiClient.callApi(
        '/{id}/collaborators', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storyIdCollaboratorsInactivePost operation.
     * @callback module:api/StoryCollaboratorsApi~storyIdCollaboratorsInactivePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StoryCollaborator} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Story Collaborators: Edit Inactive User Permission
     * Edit story permissions for inactive users.  Requires admin rights.
     * @param {String} id the id from the story object
     * @param {module:model/ModifyInactiveCollaborator} modifyInactiveCollaborator Collaborator user id and permission type
     * @param {module:api/StoryCollaboratorsApi~storyIdCollaboratorsInactivePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StoryCollaborator}
     */
    storyIdCollaboratorsInactivePost(id, modifyInactiveCollaborator, callback) {
      let postBody = modifyInactiveCollaborator;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling storyIdCollaboratorsInactivePost");
      }
      // verify the required parameter 'modifyInactiveCollaborator' is set
      if (modifyInactiveCollaborator === undefined || modifyInactiveCollaborator === null) {
        throw new Error("Missing the required parameter 'modifyInactiveCollaborator' when calling storyIdCollaboratorsInactivePost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StoryCollaborator;
      return this.apiClient.callApi(
        '/{id}/collaborators/inactive', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storyIdCollaboratorsPost operation.
     * @callback module:api/StoryCollaboratorsApi~storyIdCollaboratorsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StoryCollaborator} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Story Collaborators: Add New User
     * Add a colloborator to this story
     * @param {String} id the id from the story object
     * @param {module:model/AddNewCollaboratorRequest} addNewCollaboratorRequest Collaborator user id and permission type
     * @param {module:api/StoryCollaboratorsApi~storyIdCollaboratorsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StoryCollaborator}
     */
    storyIdCollaboratorsPost(id, addNewCollaboratorRequest, callback) {
      let postBody = addNewCollaboratorRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling storyIdCollaboratorsPost");
      }
      // verify the required parameter 'addNewCollaboratorRequest' is set
      if (addNewCollaboratorRequest === undefined || addNewCollaboratorRequest === null) {
        throw new Error("Missing the required parameter 'addNewCollaboratorRequest' when calling storyIdCollaboratorsPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StoryCollaborator;
      return this.apiClient.callApi(
        '/{id}/collaborators', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storyIdCollaboratorsUseridDelete operation.
     * @callback module:api/StoryCollaboratorsApi~storyIdCollaboratorsUseridDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Story Collaborators: Remove User
     * Remove a collaborator from this story
     * @param {String} id the id from the story object
     * @param {String} storyCollaboratorUserid The presalytics userid (NOT the Id of the story_collaborator object)
     * @param {module:api/StoryCollaboratorsApi~storyIdCollaboratorsUseridDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    storyIdCollaboratorsUseridDelete(id, storyCollaboratorUserid, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling storyIdCollaboratorsUseridDelete");
      }
      // verify the required parameter 'storyCollaboratorUserid' is set
      if (storyCollaboratorUserid === undefined || storyCollaboratorUserid === null) {
        throw new Error("Missing the required parameter 'storyCollaboratorUserid' when calling storyIdCollaboratorsUseridDelete");
      }

      let pathParams = {
        'id': id,
        'story_collaborator_userid': storyCollaboratorUserid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/{id}/collaborators/{story_collaborator_userid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storyIdCollaboratorsUseridGet operation.
     * @callback module:api/StoryCollaboratorsApi~storyIdCollaboratorsUseridGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StoryCollaborator} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Story Collaborators: Access Permissions
     * Data to help you understand the access rights of a particular collaborator on this story
     * @param {String} id the id from the story object
     * @param {String} storyCollaboratorUserid The presalytics userid (NOT the Id of the story_collaborator object)
     * @param {module:api/StoryCollaboratorsApi~storyIdCollaboratorsUseridGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StoryCollaborator}
     */
    storyIdCollaboratorsUseridGet(id, storyCollaboratorUserid, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling storyIdCollaboratorsUseridGet");
      }
      // verify the required parameter 'storyCollaboratorUserid' is set
      if (storyCollaboratorUserid === undefined || storyCollaboratorUserid === null) {
        throw new Error("Missing the required parameter 'storyCollaboratorUserid' when calling storyIdCollaboratorsUseridGet");
      }

      let pathParams = {
        'id': id,
        'story_collaborator_userid': storyCollaboratorUserid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StoryCollaborator;
      return this.apiClient.callApi(
        '/{id}/collaborators/{story_collaborator_userid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storyIdCollaboratorsUseridPut operation.
     * @callback module:api/StoryCollaboratorsApi~storyIdCollaboratorsUseridPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StoryCollaborator} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Story Collaborators: Edit Access Rights
     * Modify a user's access right to this story (e.g., grant edit permissions)
     * @param {String} id the id from the story object
     * @param {String} storyCollaboratorUserid The presalytics userid (NOT the Id of the story_collaborator object)
     * @param {module:model/StoryCollaborator} storyCollaborator Collaborator user id (presalytics userid) and permission type
     * @param {module:api/StoryCollaboratorsApi~storyIdCollaboratorsUseridPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StoryCollaborator}
     */
    storyIdCollaboratorsUseridPut(id, storyCollaboratorUserid, storyCollaborator, callback) {
      let postBody = storyCollaborator;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling storyIdCollaboratorsUseridPut");
      }
      // verify the required parameter 'storyCollaboratorUserid' is set
      if (storyCollaboratorUserid === undefined || storyCollaboratorUserid === null) {
        throw new Error("Missing the required parameter 'storyCollaboratorUserid' when calling storyIdCollaboratorsUseridPut");
      }
      // verify the required parameter 'storyCollaborator' is set
      if (storyCollaborator === undefined || storyCollaborator === null) {
        throw new Error("Missing the required parameter 'storyCollaborator' when calling storyIdCollaboratorsUseridPut");
      }

      let pathParams = {
        'id': id,
        'story_collaborator_userid': storyCollaboratorUserid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StoryCollaborator;
      return this.apiClient.callApi(
        '/{id}/collaborators/{story_collaborator_userid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
