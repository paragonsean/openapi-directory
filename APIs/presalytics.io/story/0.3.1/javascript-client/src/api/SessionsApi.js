/**
 * Story
 * This API is the main entry point for creating, editing and publishing analytics throught the Presalytics API
 *
 * The version of the OpenAPI document: 0.3.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateSessionRequest from '../model/CreateSessionRequest';
import ProblemDetail from '../model/ProblemDetail';
import Session from '../model/Session';

/**
* Sessions service.
* @module api/SessionsApi
* @version 0.3.1
*/
export default class SessionsApi {

    /**
    * Constructs a new SessionsApi. 
    * @alias module:api/SessionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the sessionIdDelete operation.
     * @callback module:api/SessionsApi~sessionIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sessions: Delete by Id
     * Remove a session and dependant data.
     * @param {String} sessionId The primary key for a view session
     * @param {module:api/SessionsApi~sessionIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sessionIdDelete(sessionId, callback) {
      let postBody = null;
      // verify the required parameter 'sessionId' is set
      if (sessionId === undefined || sessionId === null) {
        throw new Error("Missing the required parameter 'sessionId' when calling sessionIdDelete");
      }

      let pathParams = {
        'session_id': sessionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/sessions/{session_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionIdGet operation.
     * @callback module:api/SessionsApi~sessionIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Session} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sessions: Get
     * Get session metadata
     * @param {String} sessionId The primary key for a view session
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includeRelationships] Indicate whether the returned object should include child relationships
     * @param {module:api/SessionsApi~sessionIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Session}
     */
    sessionIdGet(sessionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sessionId' is set
      if (sessionId === undefined || sessionId === null) {
        throw new Error("Missing the required parameter 'sessionId' when calling sessionIdGet");
      }

      let pathParams = {
        'session_id': sessionId
      };
      let queryParams = {
        'include_relationships': opts['includeRelationships']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Session;
      return this.apiClient.callApi(
        '/sessions/{session_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storyIdSessionPost operation.
     * @callback module:api/SessionsApi~storyIdSessionPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Session} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sessions: Create a Session
     * Create a new session
     * @param {String} id the id from the story object
     * @param {module:model/CreateSessionRequest} createSessionRequest Collaborator user id and permission type
     * @param {module:api/SessionsApi~storyIdSessionPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Session}
     */
    storyIdSessionPost(id, createSessionRequest, callback) {
      let postBody = createSessionRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling storyIdSessionPost");
      }
      // verify the required parameter 'createSessionRequest' is set
      if (createSessionRequest === undefined || createSessionRequest === null) {
        throw new Error("Missing the required parameter 'createSessionRequest' when calling storyIdSessionPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Session;
      return this.apiClient.callApi(
        '/{id}/sessions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storyIdSessionsGet operation.
     * @callback module:api/SessionsApi~storyIdSessionsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Session>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sessions: List Story Sessions
     * Get a list of sessions asscoaited with this story
     * @param {String} id the id from the story object
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includeRelationships] Indicate whether the returned object should include child relationships
     * @param {module:api/SessionsApi~storyIdSessionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Session>}
     */
    storyIdSessionsGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling storyIdSessionsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'include_relationships': opts['includeRelationships']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Session];
      return this.apiClient.callApi(
        '/{id}/sessions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
