/**
 * Story
 * This API is the main entry point for creating, editing and publishing analytics throught the Presalytics API
 *
 * The version of the OpenAPI document: 0.3.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CachePostRequest from '../model/CachePostRequest';
import ProblemDetail from '../model/ProblemDetail';

/**
* Cache service.
* @module api/CacheApi
* @version 0.3.1
*/
export default class CacheApi {

    /**
    * Constructs a new CacheApi. 
    * @alias module:api/CacheApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cacheNonceGet operation.
     * @callback module:api/CacheApi~cacheNonceGetCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cache: Get Subdocument
     * An endpoint for broswer retreive html documents that were cached durin the rendering process via a nonce (token)
     * @param {String} nonce A one-time use token for retieving items in the users cache
     * @param {module:api/CacheApi~cacheNonceGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    cacheNonceGet(nonce, callback) {
      let postBody = null;
      // verify the required parameter 'nonce' is set
      if (nonce === undefined || nonce === null) {
        throw new Error("Missing the required parameter 'nonce' when calling cacheNonceGet");
      }

      let pathParams = {
        'nonce': nonce
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/html', 'application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/cache/{nonce}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cachePost operation.
     * @callback module:api/CacheApi~cachePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cache: Store Subdocument
     * An endpoint for Presalytics Renderers to cache html subdocuments for subsequent retrieval by the browser.  Documents Are retrieved via token expire after 1 minute.
     * @param {module:model/CachePostRequest} cachePostRequest parameters to identify an update a collaborator across multiple stories
     * @param {module:api/CacheApi~cachePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cachePost(cachePostRequest, callback) {
      let postBody = cachePostRequest;
      // verify the required parameter 'cachePostRequest' is set
      if (cachePostRequest === undefined || cachePostRequest === null) {
        throw new Error("Missing the required parameter 'cachePostRequest' when calling cachePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/cache', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
