/**
 * Story
 * This API is the main entry point for creating, editing and publishing analytics throught the Presalytics API
 *
 * The version of the OpenAPI document: 0.3.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import FileUpload from '../model/FileUpload';
import Outline from '../model/Outline';
import ProblemDetail from '../model/ProblemDetail';
import Status from '../model/Status';
import Story from '../model/Story';

/**
* Story service.
* @module api/StoryApi
* @version 0.3.1
*/
export default class StoryApi {

    /**
    * Constructs a new StoryApi. 
    * @alias module:api/StoryApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the storyGet operation.
     * @callback module:api/StoryApi~storyGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Story>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Story: Get List of User Stories
     * Returns a list of stories for this user identifie via the access token presentated to the api
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includeRelationships] Indicate whether the returned object should include child relationships
     * @param {Boolean} [includeOutline] Determines whether a repsonse including story objects should include the story outline.  Defaults to true. Useful for speeding up processing times.
     * @param {module:api/StoryApi~storyGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Story>}
     */
    storyGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'include_relationships': opts['includeRelationships'],
        'include_outline': opts['includeOutline']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Story];
      return this.apiClient.callApi(
        '/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storyIdAnalytics operation.
     * @callback module:api/StoryApi~storyIdAnalyticsCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Story: View Analytics
     * returns an html document containing session and event metrics for the story
     * @param {String} id the id from the story object
     * @param {module:api/StoryApi~storyIdAnalyticsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    storyIdAnalytics(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling storyIdAnalytics");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/{id}/analytics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storyIdDelete operation.
     * @callback module:api/StoryApi~storyIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Story: Delete by Id
     * Remove a story and dependant data.
     * @param {String} id the id from the story object
     * @param {module:api/StoryApi~storyIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    storyIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling storyIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storyIdFileOoxmlautomationidDelete operation.
     * @callback module:api/StoryApi~storyIdFileOoxmlautomationidDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Story: Delete Subdocument
     * Deletes a subdcoument of this story (e.g., .pptx, .docx, .xlsx)
     * @param {String} id the id from the story object
     * @param {String} ooxmlAutomationId the id of the ooxml_automation object
     * @param {module:api/StoryApi~storyIdFileOoxmlautomationidDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    storyIdFileOoxmlautomationidDelete(id, ooxmlAutomationId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling storyIdFileOoxmlautomationidDelete");
      }
      // verify the required parameter 'ooxmlAutomationId' is set
      if (ooxmlAutomationId === undefined || ooxmlAutomationId === null) {
        throw new Error("Missing the required parameter 'ooxmlAutomationId' when calling storyIdFileOoxmlautomationidDelete");
      }

      let pathParams = {
        'id': id,
        'ooxml_automation_id': ooxmlAutomationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/{id}/file/{ooxml_automation_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storyIdFileOoxmlautomationidGet operation.
     * @callback module:api/StoryApi~storyIdFileOoxmlautomationidGetCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Story: Download Updated File
     * Redtreives updated story as open office xml file (e.g., .pptx, .docx, .xlsx)
     * @param {String} id the id from the story object
     * @param {String} ooxmlAutomationId the id of the ooxml_automation object
     * @param {module:api/StoryApi~storyIdFileOoxmlautomationidGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    storyIdFileOoxmlautomationidGet(id, ooxmlAutomationId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling storyIdFileOoxmlautomationidGet");
      }
      // verify the required parameter 'ooxmlAutomationId' is set
      if (ooxmlAutomationId === undefined || ooxmlAutomationId === null) {
        throw new Error("Missing the required parameter 'ooxmlAutomationId' when calling storyIdFileOoxmlautomationidGet");
      }

      let pathParams = {
        'id': id,
        'ooxml_automation_id': ooxmlAutomationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/vnd.openxmlformats-officedocument.presentationml.presentation', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/{id}/file/{ooxml_automation_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storyIdFilePost operation.
     * @callback module:api/StoryApi~storyIdFilePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Story} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Story: Upload a File To Existing Story
     * Upload a file to an existing story
     * @param {String} id the id from the story object
     * @param {Object} opts Optional parameters
     * @param {Boolean} [replaceExisting] Indicates whether a put or post method would replace the existing contents
     * @param {String} [obsoleteId] A primary key pointing to an obsolete item in the story. Item type is context-dependent
     * @param {Boolean} [includeOutline] Determines whether a repsonse including story objects should include the story outline.  Defaults to true. Useful for speeding up processing times.
     * @param {Array.<File>} [file] 
     * @param {module:api/StoryApi~storyIdFilePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Story}
     */
    storyIdFilePost(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling storyIdFilePost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'replace_existing': opts['replaceExisting'],
        'obsolete_id': opts['obsoleteId'],
        'include_outline': opts['includeOutline']
      };
      let headerParams = {
      };
      let formParams = {
        'file': this.apiClient.buildCollectionParam(opts['file'], 'passthrough')
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Story;
      return this.apiClient.callApi(
        '/{id}/file', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storyIdGet operation.
     * @callback module:api/StoryApi~storyIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Story} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Story: Get by Id
     * Returns story metadata, inlcuding json object with story outline
     * @param {String} id the id from the story object
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includeRelationships] Indicate whether the returned object should include child relationships
     * @param {Boolean} [includeOutline] Determines whether a repsonse including story objects should include the story outline.  Defaults to true. Useful for speeding up processing times.
     * @param {Boolean} [full] Pull a story object with associated collaborator user, permission, and session data(faster if cached from prior api call)
     * @param {Boolean} [refreshCache] Force the api reload the `Story full` object
     * @param {module:api/StoryApi~storyIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Story}
     */
    storyIdGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling storyIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'include_relationships': opts['includeRelationships'],
        'include_outline': opts['includeOutline'],
        'full': opts['full'],
        'refresh_cache': opts['refreshCache']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Story;
      return this.apiClient.callApi(
        '/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storyIdOutlineGet operation.
     * @callback module:api/StoryApi~storyIdOutlineGetCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Story: Get Story Outline
     * Returns Story's outline
     * @param {String} id the id from the story object
     * @param {module:api/StoryApi~storyIdOutlineGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    storyIdOutlineGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling storyIdOutlineGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/{id}/outline', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storyIdOutlinePost operation.
     * @callback module:api/StoryApi~storyIdOutlinePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Story: Post Story Outline
     * Update a story outline.
     * @param {String} id the id from the story object
     * @param {String} body A story outline object
     * @param {module:api/StoryApi~storyIdOutlinePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    storyIdOutlinePost(id, body, callback) {
      let postBody = body;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling storyIdOutlinePost");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling storyIdOutlinePost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/{id}/outline', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storyIdPublic operation.
     * @callback module:api/StoryApi~storyIdPublicCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Story: Public Link to Story Reveal.js Document
     * returns an html document containing a reveal.js epresentation of the story, if the story if set to is_public = True
     * @param {String} id the id from the story object
     * @param {module:api/StoryApi~storyIdPublicCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    storyIdPublic(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling storyIdPublic");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/{id}/public/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storyIdPut operation.
     * @callback module:api/StoryApi~storyIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Story} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Story: Modify
     * Update story metadata, including story outline
     * @param {String} id the id from the story object
     * @param {module:model/Story} story The updated story object
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includeOutline] Determines whether a repsonse including story objects should include the story outline.  Defaults to true. Useful for speeding up processing times.
     * @param {module:api/StoryApi~storyIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Story}
     */
    storyIdPut(id, story, opts, callback) {
      opts = opts || {};
      let postBody = story;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling storyIdPut");
      }
      // verify the required parameter 'story' is set
      if (story === undefined || story === null) {
        throw new Error("Missing the required parameter 'story' when calling storyIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'include_outline': opts['includeOutline']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Story;
      return this.apiClient.callApi(
        '/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storyIdReveal operation.
     * @callback module:api/StoryApi~storyIdRevealCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Story: Get Story at Reveal.js Document
     * returns an html document containing a reveal.js epresentation of the story
     * @param {String} id the id from the story object
     * @param {module:api/StoryApi~storyIdRevealCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    storyIdReveal(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling storyIdReveal");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/{id}/reveal', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storyIdStatusGet operation.
     * @callback module:api/StoryApi~storyIdStatusGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Status} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Story: Get Story Status
     * Returns code indicating whether story has active running background and is healthy (e.g., the latest outline is valid)
     * @param {String} id the id from the story object
     * @param {module:api/StoryApi~storyIdStatusGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Status}
     */
    storyIdStatusGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling storyIdStatusGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Status;
      return this.apiClient.callApi(
        '/{id}/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storyPost operation.
     * @callback module:api/StoryApi~storyPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Story} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Story: Upload
     * Upload new story to presalytics api
     * @param {module:model/Outline} outline A story outline json object
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includeOutline] Determines whether a repsonse including story objects should include the story outline.  Defaults to true. Useful for speeding up processing times.
     * @param {module:api/StoryApi~storyPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Story}
     */
    storyPost(outline, opts, callback) {
      opts = opts || {};
      let postBody = outline;
      // verify the required parameter 'outline' is set
      if (outline === undefined || outline === null) {
        throw new Error("Missing the required parameter 'outline' when calling storyPost");
      }

      let pathParams = {
      };
      let queryParams = {
        'include_outline': opts['includeOutline']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Story;
      return this.apiClient.callApi(
        '/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storyPostFile operation.
     * @callback module:api/StoryApi~storyPostFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Story} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Story: Upload a File
     * Upload new story to presalytics api via an Open Office Xml file
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includeOutline] Determines whether a repsonse including story objects should include the story outline.  Defaults to true. Useful for speeding up processing times.
     * @param {Array.<File>} [file] 
     * @param {module:api/StoryApi~storyPostFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Story}
     */
    storyPostFile(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'include_outline': opts['includeOutline']
      };
      let headerParams = {
      };
      let formParams = {
        'file': this.apiClient.buildCollectionParam(opts['file'], 'passthrough')
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Story;
      return this.apiClient.callApi(
        '/file', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storyPostFileJson operation.
     * @callback module:api/StoryApi~storyPostFileJsonCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Story} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Story: Upload a File (base64)
     * Upload new story to presalytics api via an Open Office Xml file
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includeOutline] Determines whether a repsonse including story objects should include the story outline.  Defaults to true. Useful for speeding up processing times.
     * @param {module:model/FileUpload} [fileUpload] A json-formatted object that includes a base64 encoded file (file encoded utf-8)
     * @param {module:api/StoryApi~storyPostFileJsonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Story}
     */
    storyPostFileJson(opts, callback) {
      opts = opts || {};
      let postBody = opts['fileUpload'];

      let pathParams = {
      };
      let queryParams = {
        'include_outline': opts['includeOutline']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Story;
      return this.apiClient.callApi(
        '/file/json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
