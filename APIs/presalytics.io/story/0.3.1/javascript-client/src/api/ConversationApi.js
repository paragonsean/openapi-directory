/**
 * Story
 * This API is the main entry point for creating, editing and publishing analytics throught the Presalytics API
 *
 * The version of the OpenAPI document: 0.3.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Message from '../model/Message';
import ProblemDetail from '../model/ProblemDetail';

/**
* Conversation service.
* @module api/ConversationApi
* @version 0.3.1
*/
export default class ConversationApi {

    /**
    * Constructs a new ConversationApi. 
    * @alias module:api/ConversationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the storyIdMessagesGet operation.
     * @callback module:api/ConversationApi~storyIdMessagesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Message>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Conversation: List Conversation Messages
     * Get a list of messages that have been send in this story
     * @param {String} id the id from the story object
     * @param {module:api/ConversationApi~storyIdMessagesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Message>}
     */
    storyIdMessagesGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling storyIdMessagesGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Message];
      return this.apiClient.callApi(
        '/{id}/messages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storyIdMessagesPost operation.
     * @callback module:api/ConversationApi~storyIdMessagesPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Conversation: Send a Message
     * Add a message to the Story's conversation
     * @param {String} id the id from the story object
     * @param {String} body The message text
     * @param {module:api/ConversationApi~storyIdMessagesPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    storyIdMessagesPost(id, body, callback) {
      let postBody = body;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling storyIdMessagesPost");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling storyIdMessagesPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/{id}/messages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
