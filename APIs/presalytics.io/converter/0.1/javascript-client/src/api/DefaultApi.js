/**
 * Doc Converter
 * This api converts file formats of OpenXml and OpenOffice documents formats to vector files (e.g., svg)
 *
 * The version of the OpenAPI document: 0.1
 * Contact: kevin@presalytics.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import FileUrl from '../model/FileUrl';

/**
* Default service.
* @module api/DefaultApi
* @version 0.1
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the svgconvert operation.
     * @callback module:api/DefaultApi~svgconvertCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileUrl} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * converts pptx file to svg image
     * @param {Object} opts Optional parameters
     * @param {File} [file] 
     * @param {module:api/DefaultApi~svgconvertCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileUrl}
     */
    svgconvert(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': opts['file']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = FileUrl;
      return this.apiClient.callApi(
        '/svgconvert', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
