/**
 * Doc Converter
 * This api converts file formats of OpenXml and OpenOffice documents formats to vector files (e.g., svg)
 *
 * The version of the OpenAPI document: 0.1
 * Contact: kevin@presalytics.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FileUrl model module.
 * @module model/FileUrl
 * @version 0.1
 */
class FileUrl {
    /**
     * Constructs a new <code>FileUrl</code>.
     * @alias module:model/FileUrl
     */
    constructor() { 
        
        FileUrl.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FileUrl</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FileUrl} obj Optional instance to populate.
     * @return {module:model/FileUrl} The populated <code>FileUrl</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FileUrl();

            if (data.hasOwnProperty('blob_name')) {
                obj['blob_name'] = ApiClient.convertToType(data['blob_name'], 'String');
            }
            if (data.hasOwnProperty('blob_url')) {
                obj['blob_url'] = ApiClient.convertToType(data['blob_url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FileUrl</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FileUrl</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['blob_name'] && !(typeof data['blob_name'] === 'string' || data['blob_name'] instanceof String)) {
            throw new Error("Expected the field `blob_name` to be a primitive type in the JSON string but got " + data['blob_name']);
        }
        // ensure the json data is a string
        if (data['blob_url'] && !(typeof data['blob_url'] === 'string' || data['blob_url'] instanceof String)) {
            throw new Error("Expected the field `blob_url` to be a primitive type in the JSON string but got " + data['blob_url']);
        }

        return true;
    }


}



/**
 * @member {String} blob_name
 */
FileUrl.prototype['blob_name'] = undefined;

/**
 * @member {String} blob_url
 */
FileUrl.prototype['blob_url'] = undefined;






export default FileUrl;

