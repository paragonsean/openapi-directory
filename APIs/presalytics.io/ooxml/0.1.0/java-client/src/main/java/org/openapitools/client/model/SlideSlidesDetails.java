/*
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.DocumentDetails;
import org.openapitools.client.model.SlideShapeTreesDetails;
import org.openapitools.client.model.SlideSlideMastersDetails;
import org.openapitools.client.model.ThemeThemesDetails;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SlideSlidesDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:20.731713-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SlideSlidesDetails {
  public static final String SERIALIZED_NAME_BASE_ELEMENT_BLOB_URL = "baseElementBlobUrl";
  @SerializedName(SERIALIZED_NAME_BASE_ELEMENT_BLOB_URL)
  private String baseElementBlobUrl;

  public static final String SERIALIZED_NAME_CHANGED_BASE_ELEMENT_BLOB_URL = "changedBaseElementBlobUrl";
  @SerializedName(SERIALIZED_NAME_CHANGED_BASE_ELEMENT_BLOB_URL)
  private String changedBaseElementBlobUrl;

  public static final String SERIALIZED_NAME_DATE_CREATED = "dateCreated";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private OffsetDateTime dateCreated;

  public static final String SERIALIZED_NAME_DATE_MODIFIED = "dateModified";
  @SerializedName(SERIALIZED_NAME_DATE_MODIFIED)
  private OffsetDateTime dateModified;

  public static final String SERIALIZED_NAME_DOCUMENT = "document";
  @SerializedName(SERIALIZED_NAME_DOCUMENT)
  private DocumentDetails document;

  public static final String SERIALIZED_NAME_DOCUMENT_ID = "documentId";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_ID)
  private UUID documentId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NUMBER = "number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private Integer number;

  public static final String SERIALIZED_NAME_OOXML_ID = "ooxmlId";
  @SerializedName(SERIALIZED_NAME_OOXML_ID)
  private Integer ooxmlId;

  public static final String SERIALIZED_NAME_PACKAGE_URI = "packageUri";
  @SerializedName(SERIALIZED_NAME_PACKAGE_URI)
  private String packageUri;

  public static final String SERIALIZED_NAME_SHAPE_TREE = "shapeTree";
  @SerializedName(SERIALIZED_NAME_SHAPE_TREE)
  private SlideShapeTreesDetails shapeTree;

  public static final String SERIALIZED_NAME_SLIDE_DOCUMENT_URL = "slideDocumentUrl";
  @SerializedName(SERIALIZED_NAME_SLIDE_DOCUMENT_URL)
  private String slideDocumentUrl;

  public static final String SERIALIZED_NAME_SLIDE_MASTER = "slideMaster";
  @SerializedName(SERIALIZED_NAME_SLIDE_MASTER)
  private SlideSlideMastersDetails slideMaster;

  public static final String SERIALIZED_NAME_SVG_BLOB_URL = "svgBlobUrl";
  @SerializedName(SERIALIZED_NAME_SVG_BLOB_URL)
  private String svgBlobUrl;

  public static final String SERIALIZED_NAME_THEME = "theme";
  @SerializedName(SERIALIZED_NAME_THEME)
  private ThemeThemesDetails theme;

  public static final String SERIALIZED_NAME_USER_CREATED = "userCreated";
  @SerializedName(SERIALIZED_NAME_USER_CREATED)
  private UUID userCreated;

  public static final String SERIALIZED_NAME_USER_MODIFIED = "userModified";
  @SerializedName(SERIALIZED_NAME_USER_MODIFIED)
  private UUID userModified;

  public SlideSlidesDetails() {
  }

  public SlideSlidesDetails baseElementBlobUrl(String baseElementBlobUrl) {
    this.baseElementBlobUrl = baseElementBlobUrl;
    return this;
  }

  /**
   * Get baseElementBlobUrl
   * @return baseElementBlobUrl
   */
  @javax.annotation.Nullable
  public String getBaseElementBlobUrl() {
    return baseElementBlobUrl;
  }

  public void setBaseElementBlobUrl(String baseElementBlobUrl) {
    this.baseElementBlobUrl = baseElementBlobUrl;
  }


  public SlideSlidesDetails changedBaseElementBlobUrl(String changedBaseElementBlobUrl) {
    this.changedBaseElementBlobUrl = changedBaseElementBlobUrl;
    return this;
  }

  /**
   * Get changedBaseElementBlobUrl
   * @return changedBaseElementBlobUrl
   */
  @javax.annotation.Nullable
  public String getChangedBaseElementBlobUrl() {
    return changedBaseElementBlobUrl;
  }

  public void setChangedBaseElementBlobUrl(String changedBaseElementBlobUrl) {
    this.changedBaseElementBlobUrl = changedBaseElementBlobUrl;
  }


  public SlideSlidesDetails dateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
    return this;
  }

  /**
   * Get dateCreated
   * @return dateCreated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }

  public void setDateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
  }


  public SlideSlidesDetails dateModified(OffsetDateTime dateModified) {
    this.dateModified = dateModified;
    return this;
  }

  /**
   * Get dateModified
   * @return dateModified
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateModified() {
    return dateModified;
  }

  public void setDateModified(OffsetDateTime dateModified) {
    this.dateModified = dateModified;
  }


  public SlideSlidesDetails document(DocumentDetails document) {
    this.document = document;
    return this;
  }

  /**
   * Get document
   * @return document
   */
  @javax.annotation.Nullable
  public DocumentDetails getDocument() {
    return document;
  }

  public void setDocument(DocumentDetails document) {
    this.document = document;
  }


  public SlideSlidesDetails documentId(UUID documentId) {
    this.documentId = documentId;
    return this;
  }

  /**
   * Get documentId
   * @return documentId
   */
  @javax.annotation.Nullable
  public UUID getDocumentId() {
    return documentId;
  }

  public void setDocumentId(UUID documentId) {
    this.documentId = documentId;
  }


  public SlideSlidesDetails id(UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }


  public SlideSlidesDetails name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public SlideSlidesDetails number(Integer number) {
    this.number = number;
    return this;
  }

  /**
   * Get number
   * @return number
   */
  @javax.annotation.Nullable
  public Integer getNumber() {
    return number;
  }

  public void setNumber(Integer number) {
    this.number = number;
  }


  public SlideSlidesDetails ooxmlId(Integer ooxmlId) {
    this.ooxmlId = ooxmlId;
    return this;
  }

  /**
   * Get ooxmlId
   * @return ooxmlId
   */
  @javax.annotation.Nullable
  public Integer getOoxmlId() {
    return ooxmlId;
  }

  public void setOoxmlId(Integer ooxmlId) {
    this.ooxmlId = ooxmlId;
  }


  public SlideSlidesDetails packageUri(String packageUri) {
    this.packageUri = packageUri;
    return this;
  }

  /**
   * Get packageUri
   * @return packageUri
   */
  @javax.annotation.Nullable
  public String getPackageUri() {
    return packageUri;
  }

  public void setPackageUri(String packageUri) {
    this.packageUri = packageUri;
  }


  public SlideSlidesDetails shapeTree(SlideShapeTreesDetails shapeTree) {
    this.shapeTree = shapeTree;
    return this;
  }

  /**
   * Get shapeTree
   * @return shapeTree
   */
  @javax.annotation.Nullable
  public SlideShapeTreesDetails getShapeTree() {
    return shapeTree;
  }

  public void setShapeTree(SlideShapeTreesDetails shapeTree) {
    this.shapeTree = shapeTree;
  }


  public SlideSlidesDetails slideDocumentUrl(String slideDocumentUrl) {
    this.slideDocumentUrl = slideDocumentUrl;
    return this;
  }

  /**
   * Get slideDocumentUrl
   * @return slideDocumentUrl
   */
  @javax.annotation.Nullable
  public String getSlideDocumentUrl() {
    return slideDocumentUrl;
  }

  public void setSlideDocumentUrl(String slideDocumentUrl) {
    this.slideDocumentUrl = slideDocumentUrl;
  }


  public SlideSlidesDetails slideMaster(SlideSlideMastersDetails slideMaster) {
    this.slideMaster = slideMaster;
    return this;
  }

  /**
   * Get slideMaster
   * @return slideMaster
   */
  @javax.annotation.Nullable
  public SlideSlideMastersDetails getSlideMaster() {
    return slideMaster;
  }

  public void setSlideMaster(SlideSlideMastersDetails slideMaster) {
    this.slideMaster = slideMaster;
  }


  public SlideSlidesDetails svgBlobUrl(String svgBlobUrl) {
    this.svgBlobUrl = svgBlobUrl;
    return this;
  }

  /**
   * Get svgBlobUrl
   * @return svgBlobUrl
   */
  @javax.annotation.Nullable
  public String getSvgBlobUrl() {
    return svgBlobUrl;
  }

  public void setSvgBlobUrl(String svgBlobUrl) {
    this.svgBlobUrl = svgBlobUrl;
  }


  public SlideSlidesDetails theme(ThemeThemesDetails theme) {
    this.theme = theme;
    return this;
  }

  /**
   * Get theme
   * @return theme
   */
  @javax.annotation.Nullable
  public ThemeThemesDetails getTheme() {
    return theme;
  }

  public void setTheme(ThemeThemesDetails theme) {
    this.theme = theme;
  }


  public SlideSlidesDetails userCreated(UUID userCreated) {
    this.userCreated = userCreated;
    return this;
  }

  /**
   * Get userCreated
   * @return userCreated
   */
  @javax.annotation.Nullable
  public UUID getUserCreated() {
    return userCreated;
  }

  public void setUserCreated(UUID userCreated) {
    this.userCreated = userCreated;
  }


  public SlideSlidesDetails userModified(UUID userModified) {
    this.userModified = userModified;
    return this;
  }

  /**
   * Get userModified
   * @return userModified
   */
  @javax.annotation.Nullable
  public UUID getUserModified() {
    return userModified;
  }

  public void setUserModified(UUID userModified) {
    this.userModified = userModified;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SlideSlidesDetails slideSlidesDetails = (SlideSlidesDetails) o;
    return Objects.equals(this.baseElementBlobUrl, slideSlidesDetails.baseElementBlobUrl) &&
        Objects.equals(this.changedBaseElementBlobUrl, slideSlidesDetails.changedBaseElementBlobUrl) &&
        Objects.equals(this.dateCreated, slideSlidesDetails.dateCreated) &&
        Objects.equals(this.dateModified, slideSlidesDetails.dateModified) &&
        Objects.equals(this.document, slideSlidesDetails.document) &&
        Objects.equals(this.documentId, slideSlidesDetails.documentId) &&
        Objects.equals(this.id, slideSlidesDetails.id) &&
        Objects.equals(this.name, slideSlidesDetails.name) &&
        Objects.equals(this.number, slideSlidesDetails.number) &&
        Objects.equals(this.ooxmlId, slideSlidesDetails.ooxmlId) &&
        Objects.equals(this.packageUri, slideSlidesDetails.packageUri) &&
        Objects.equals(this.shapeTree, slideSlidesDetails.shapeTree) &&
        Objects.equals(this.slideDocumentUrl, slideSlidesDetails.slideDocumentUrl) &&
        Objects.equals(this.slideMaster, slideSlidesDetails.slideMaster) &&
        Objects.equals(this.svgBlobUrl, slideSlidesDetails.svgBlobUrl) &&
        Objects.equals(this.theme, slideSlidesDetails.theme) &&
        Objects.equals(this.userCreated, slideSlidesDetails.userCreated) &&
        Objects.equals(this.userModified, slideSlidesDetails.userModified);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(baseElementBlobUrl, changedBaseElementBlobUrl, dateCreated, dateModified, document, documentId, id, name, number, ooxmlId, packageUri, shapeTree, slideDocumentUrl, slideMaster, svgBlobUrl, theme, userCreated, userModified);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SlideSlidesDetails {\n");
    sb.append("    baseElementBlobUrl: ").append(toIndentedString(baseElementBlobUrl)).append("\n");
    sb.append("    changedBaseElementBlobUrl: ").append(toIndentedString(changedBaseElementBlobUrl)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateModified: ").append(toIndentedString(dateModified)).append("\n");
    sb.append("    document: ").append(toIndentedString(document)).append("\n");
    sb.append("    documentId: ").append(toIndentedString(documentId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    ooxmlId: ").append(toIndentedString(ooxmlId)).append("\n");
    sb.append("    packageUri: ").append(toIndentedString(packageUri)).append("\n");
    sb.append("    shapeTree: ").append(toIndentedString(shapeTree)).append("\n");
    sb.append("    slideDocumentUrl: ").append(toIndentedString(slideDocumentUrl)).append("\n");
    sb.append("    slideMaster: ").append(toIndentedString(slideMaster)).append("\n");
    sb.append("    svgBlobUrl: ").append(toIndentedString(svgBlobUrl)).append("\n");
    sb.append("    theme: ").append(toIndentedString(theme)).append("\n");
    sb.append("    userCreated: ").append(toIndentedString(userCreated)).append("\n");
    sb.append("    userModified: ").append(toIndentedString(userModified)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("baseElementBlobUrl");
    openapiFields.add("changedBaseElementBlobUrl");
    openapiFields.add("dateCreated");
    openapiFields.add("dateModified");
    openapiFields.add("document");
    openapiFields.add("documentId");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("number");
    openapiFields.add("ooxmlId");
    openapiFields.add("packageUri");
    openapiFields.add("shapeTree");
    openapiFields.add("slideDocumentUrl");
    openapiFields.add("slideMaster");
    openapiFields.add("svgBlobUrl");
    openapiFields.add("theme");
    openapiFields.add("userCreated");
    openapiFields.add("userModified");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SlideSlidesDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SlideSlidesDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SlideSlidesDetails is not found in the empty JSON string", SlideSlidesDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SlideSlidesDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SlideSlidesDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("baseElementBlobUrl") != null && !jsonObj.get("baseElementBlobUrl").isJsonNull()) && !jsonObj.get("baseElementBlobUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `baseElementBlobUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("baseElementBlobUrl").toString()));
      }
      if ((jsonObj.get("changedBaseElementBlobUrl") != null && !jsonObj.get("changedBaseElementBlobUrl").isJsonNull()) && !jsonObj.get("changedBaseElementBlobUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `changedBaseElementBlobUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("changedBaseElementBlobUrl").toString()));
      }
      // validate the optional field `document`
      if (jsonObj.get("document") != null && !jsonObj.get("document").isJsonNull()) {
        DocumentDetails.validateJsonElement(jsonObj.get("document"));
      }
      if ((jsonObj.get("documentId") != null && !jsonObj.get("documentId").isJsonNull()) && !jsonObj.get("documentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentId").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("packageUri") != null && !jsonObj.get("packageUri").isJsonNull()) && !jsonObj.get("packageUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `packageUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("packageUri").toString()));
      }
      // validate the optional field `shapeTree`
      if (jsonObj.get("shapeTree") != null && !jsonObj.get("shapeTree").isJsonNull()) {
        SlideShapeTreesDetails.validateJsonElement(jsonObj.get("shapeTree"));
      }
      if ((jsonObj.get("slideDocumentUrl") != null && !jsonObj.get("slideDocumentUrl").isJsonNull()) && !jsonObj.get("slideDocumentUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slideDocumentUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slideDocumentUrl").toString()));
      }
      // validate the optional field `slideMaster`
      if (jsonObj.get("slideMaster") != null && !jsonObj.get("slideMaster").isJsonNull()) {
        SlideSlideMastersDetails.validateJsonElement(jsonObj.get("slideMaster"));
      }
      if ((jsonObj.get("svgBlobUrl") != null && !jsonObj.get("svgBlobUrl").isJsonNull()) && !jsonObj.get("svgBlobUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `svgBlobUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("svgBlobUrl").toString()));
      }
      // validate the optional field `theme`
      if (jsonObj.get("theme") != null && !jsonObj.get("theme").isJsonNull()) {
        ThemeThemesDetails.validateJsonElement(jsonObj.get("theme"));
      }
      if ((jsonObj.get("userCreated") != null && !jsonObj.get("userCreated").isJsonNull()) && !jsonObj.get("userCreated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userCreated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userCreated").toString()));
      }
      if ((jsonObj.get("userModified") != null && !jsonObj.get("userModified").isJsonNull()) && !jsonObj.get("userModified").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userModified` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userModified").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SlideSlidesDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SlideSlidesDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SlideSlidesDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SlideSlidesDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<SlideSlidesDetails>() {
           @Override
           public void write(JsonWriter out, SlideSlidesDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SlideSlidesDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SlideSlidesDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SlideSlidesDetails
   * @throws IOException if the JSON string is invalid with respect to SlideSlidesDetails
   */
  public static SlideSlidesDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SlideSlidesDetails.class);
  }

  /**
   * Convert an instance of SlideSlidesDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

