/*
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ChartColumns
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:20.731713-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ChartColumns {
  public static final String SERIALIZED_NAME_AXIS_ID = "axisId";
  @SerializedName(SERIALIZED_NAME_AXIS_ID)
  private UUID axisId;

  public static final String SERIALIZED_NAME_COLUMN_COLLECTION_ID = "columnCollectionId";
  @SerializedName(SERIALIZED_NAME_COLUMN_COLLECTION_ID)
  private UUID columnCollectionId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_INDEX = "index";
  @SerializedName(SERIALIZED_NAME_INDEX)
  private Integer index;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public ChartColumns() {
  }

  public ChartColumns axisId(UUID axisId) {
    this.axisId = axisId;
    return this;
  }

  /**
   * Get axisId
   * @return axisId
   */
  @javax.annotation.Nullable
  public UUID getAxisId() {
    return axisId;
  }

  public void setAxisId(UUID axisId) {
    this.axisId = axisId;
  }


  public ChartColumns columnCollectionId(UUID columnCollectionId) {
    this.columnCollectionId = columnCollectionId;
    return this;
  }

  /**
   * Get columnCollectionId
   * @return columnCollectionId
   */
  @javax.annotation.Nullable
  public UUID getColumnCollectionId() {
    return columnCollectionId;
  }

  public void setColumnCollectionId(UUID columnCollectionId) {
    this.columnCollectionId = columnCollectionId;
  }


  public ChartColumns id(UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }


  public ChartColumns index(Integer index) {
    this.index = index;
    return this;
  }

  /**
   * Get index
   * @return index
   */
  @javax.annotation.Nullable
  public Integer getIndex() {
    return index;
  }

  public void setIndex(Integer index) {
    this.index = index;
  }


  public ChartColumns name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChartColumns chartColumns = (ChartColumns) o;
    return Objects.equals(this.axisId, chartColumns.axisId) &&
        Objects.equals(this.columnCollectionId, chartColumns.columnCollectionId) &&
        Objects.equals(this.id, chartColumns.id) &&
        Objects.equals(this.index, chartColumns.index) &&
        Objects.equals(this.name, chartColumns.name);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(axisId, columnCollectionId, id, index, name);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChartColumns {\n");
    sb.append("    axisId: ").append(toIndentedString(axisId)).append("\n");
    sb.append("    columnCollectionId: ").append(toIndentedString(columnCollectionId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("axisId");
    openapiFields.add("columnCollectionId");
    openapiFields.add("id");
    openapiFields.add("index");
    openapiFields.add("name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ChartColumns
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ChartColumns.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChartColumns is not found in the empty JSON string", ChartColumns.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ChartColumns.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChartColumns` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("axisId") != null && !jsonObj.get("axisId").isJsonNull()) && !jsonObj.get("axisId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `axisId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("axisId").toString()));
      }
      if ((jsonObj.get("columnCollectionId") != null && !jsonObj.get("columnCollectionId").isJsonNull()) && !jsonObj.get("columnCollectionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `columnCollectionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("columnCollectionId").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChartColumns.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChartColumns' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChartColumns> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChartColumns.class));

       return (TypeAdapter<T>) new TypeAdapter<ChartColumns>() {
           @Override
           public void write(JsonWriter out, ChartColumns value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChartColumns read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ChartColumns given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ChartColumns
   * @throws IOException if the JSON string is invalid with respect to ChartColumns
   */
  public static ChartColumns fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChartColumns.class);
  }

  /**
   * Convert an instance of ChartColumns to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

