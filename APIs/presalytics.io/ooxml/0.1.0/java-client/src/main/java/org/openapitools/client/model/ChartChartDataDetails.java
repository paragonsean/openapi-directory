/*
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.ChartChartsDetails;
import org.openapitools.client.model.ChartColumnCollectionsDetails;
import org.openapitools.client.model.ChartDataPointsDetails;
import org.openapitools.client.model.ChartRowCollectionsDetails;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ChartChartDataDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:20.731713-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ChartChartDataDetails {
  public static final String SERIALIZED_NAME_CHART = "chart";
  @SerializedName(SERIALIZED_NAME_CHART)
  private ChartChartsDetails chart;

  public static final String SERIALIZED_NAME_CHART_ID = "chartId";
  @SerializedName(SERIALIZED_NAME_CHART_ID)
  private UUID chartId;

  public static final String SERIALIZED_NAME_COLUMN_COLLECTION = "columnCollection";
  @SerializedName(SERIALIZED_NAME_COLUMN_COLLECTION)
  private ChartColumnCollectionsDetails columnCollection;

  public static final String SERIALIZED_NAME_DATA_POINTS = "dataPoints";
  @SerializedName(SERIALIZED_NAME_DATA_POINTS)
  private List<ChartDataPointsDetails> dataPoints;

  public static final String SERIALIZED_NAME_DATE_CREATED = "dateCreated";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private OffsetDateTime dateCreated;

  public static final String SERIALIZED_NAME_DATE_MODIFIED = "dateModified";
  @SerializedName(SERIALIZED_NAME_DATE_MODIFIED)
  private OffsetDateTime dateModified;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_ROW_COLLECTION = "rowCollection";
  @SerializedName(SERIALIZED_NAME_ROW_COLLECTION)
  private ChartRowCollectionsDetails rowCollection;

  public static final String SERIALIZED_NAME_USER_CREATED = "userCreated";
  @SerializedName(SERIALIZED_NAME_USER_CREATED)
  private UUID userCreated;

  public static final String SERIALIZED_NAME_USER_MODIFIED = "userModified";
  @SerializedName(SERIALIZED_NAME_USER_MODIFIED)
  private UUID userModified;

  public ChartChartDataDetails() {
  }

  public ChartChartDataDetails chart(ChartChartsDetails chart) {
    this.chart = chart;
    return this;
  }

  /**
   * Get chart
   * @return chart
   */
  @javax.annotation.Nullable
  public ChartChartsDetails getChart() {
    return chart;
  }

  public void setChart(ChartChartsDetails chart) {
    this.chart = chart;
  }


  public ChartChartDataDetails chartId(UUID chartId) {
    this.chartId = chartId;
    return this;
  }

  /**
   * Get chartId
   * @return chartId
   */
  @javax.annotation.Nullable
  public UUID getChartId() {
    return chartId;
  }

  public void setChartId(UUID chartId) {
    this.chartId = chartId;
  }


  public ChartChartDataDetails columnCollection(ChartColumnCollectionsDetails columnCollection) {
    this.columnCollection = columnCollection;
    return this;
  }

  /**
   * Get columnCollection
   * @return columnCollection
   */
  @javax.annotation.Nullable
  public ChartColumnCollectionsDetails getColumnCollection() {
    return columnCollection;
  }

  public void setColumnCollection(ChartColumnCollectionsDetails columnCollection) {
    this.columnCollection = columnCollection;
  }


  public ChartChartDataDetails dataPoints(List<ChartDataPointsDetails> dataPoints) {
    this.dataPoints = dataPoints;
    return this;
  }

  public ChartChartDataDetails addDataPointsItem(ChartDataPointsDetails dataPointsItem) {
    if (this.dataPoints == null) {
      this.dataPoints = new ArrayList<>();
    }
    this.dataPoints.add(dataPointsItem);
    return this;
  }

  /**
   * Get dataPoints
   * @return dataPoints
   */
  @javax.annotation.Nullable
  public List<ChartDataPointsDetails> getDataPoints() {
    return dataPoints;
  }

  public void setDataPoints(List<ChartDataPointsDetails> dataPoints) {
    this.dataPoints = dataPoints;
  }


  public ChartChartDataDetails dateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
    return this;
  }

  /**
   * Get dateCreated
   * @return dateCreated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }

  public void setDateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
  }


  public ChartChartDataDetails dateModified(OffsetDateTime dateModified) {
    this.dateModified = dateModified;
    return this;
  }

  /**
   * Get dateModified
   * @return dateModified
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateModified() {
    return dateModified;
  }

  public void setDateModified(OffsetDateTime dateModified) {
    this.dateModified = dateModified;
  }


  public ChartChartDataDetails id(UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }


  public ChartChartDataDetails rowCollection(ChartRowCollectionsDetails rowCollection) {
    this.rowCollection = rowCollection;
    return this;
  }

  /**
   * Get rowCollection
   * @return rowCollection
   */
  @javax.annotation.Nullable
  public ChartRowCollectionsDetails getRowCollection() {
    return rowCollection;
  }

  public void setRowCollection(ChartRowCollectionsDetails rowCollection) {
    this.rowCollection = rowCollection;
  }


  public ChartChartDataDetails userCreated(UUID userCreated) {
    this.userCreated = userCreated;
    return this;
  }

  /**
   * Get userCreated
   * @return userCreated
   */
  @javax.annotation.Nullable
  public UUID getUserCreated() {
    return userCreated;
  }

  public void setUserCreated(UUID userCreated) {
    this.userCreated = userCreated;
  }


  public ChartChartDataDetails userModified(UUID userModified) {
    this.userModified = userModified;
    return this;
  }

  /**
   * Get userModified
   * @return userModified
   */
  @javax.annotation.Nullable
  public UUID getUserModified() {
    return userModified;
  }

  public void setUserModified(UUID userModified) {
    this.userModified = userModified;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChartChartDataDetails chartChartDataDetails = (ChartChartDataDetails) o;
    return Objects.equals(this.chart, chartChartDataDetails.chart) &&
        Objects.equals(this.chartId, chartChartDataDetails.chartId) &&
        Objects.equals(this.columnCollection, chartChartDataDetails.columnCollection) &&
        Objects.equals(this.dataPoints, chartChartDataDetails.dataPoints) &&
        Objects.equals(this.dateCreated, chartChartDataDetails.dateCreated) &&
        Objects.equals(this.dateModified, chartChartDataDetails.dateModified) &&
        Objects.equals(this.id, chartChartDataDetails.id) &&
        Objects.equals(this.rowCollection, chartChartDataDetails.rowCollection) &&
        Objects.equals(this.userCreated, chartChartDataDetails.userCreated) &&
        Objects.equals(this.userModified, chartChartDataDetails.userModified);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(chart, chartId, columnCollection, dataPoints, dateCreated, dateModified, id, rowCollection, userCreated, userModified);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChartChartDataDetails {\n");
    sb.append("    chart: ").append(toIndentedString(chart)).append("\n");
    sb.append("    chartId: ").append(toIndentedString(chartId)).append("\n");
    sb.append("    columnCollection: ").append(toIndentedString(columnCollection)).append("\n");
    sb.append("    dataPoints: ").append(toIndentedString(dataPoints)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateModified: ").append(toIndentedString(dateModified)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    rowCollection: ").append(toIndentedString(rowCollection)).append("\n");
    sb.append("    userCreated: ").append(toIndentedString(userCreated)).append("\n");
    sb.append("    userModified: ").append(toIndentedString(userModified)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("chart");
    openapiFields.add("chartId");
    openapiFields.add("columnCollection");
    openapiFields.add("dataPoints");
    openapiFields.add("dateCreated");
    openapiFields.add("dateModified");
    openapiFields.add("id");
    openapiFields.add("rowCollection");
    openapiFields.add("userCreated");
    openapiFields.add("userModified");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ChartChartDataDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ChartChartDataDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChartChartDataDetails is not found in the empty JSON string", ChartChartDataDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ChartChartDataDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChartChartDataDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `chart`
      if (jsonObj.get("chart") != null && !jsonObj.get("chart").isJsonNull()) {
        ChartChartsDetails.validateJsonElement(jsonObj.get("chart"));
      }
      if ((jsonObj.get("chartId") != null && !jsonObj.get("chartId").isJsonNull()) && !jsonObj.get("chartId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chartId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chartId").toString()));
      }
      // validate the optional field `columnCollection`
      if (jsonObj.get("columnCollection") != null && !jsonObj.get("columnCollection").isJsonNull()) {
        ChartColumnCollectionsDetails.validateJsonElement(jsonObj.get("columnCollection"));
      }
      if (jsonObj.get("dataPoints") != null && !jsonObj.get("dataPoints").isJsonNull()) {
        JsonArray jsonArraydataPoints = jsonObj.getAsJsonArray("dataPoints");
        if (jsonArraydataPoints != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dataPoints").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dataPoints` to be an array in the JSON string but got `%s`", jsonObj.get("dataPoints").toString()));
          }

          // validate the optional field `dataPoints` (array)
          for (int i = 0; i < jsonArraydataPoints.size(); i++) {
            ChartDataPointsDetails.validateJsonElement(jsonArraydataPoints.get(i));
          };
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `rowCollection`
      if (jsonObj.get("rowCollection") != null && !jsonObj.get("rowCollection").isJsonNull()) {
        ChartRowCollectionsDetails.validateJsonElement(jsonObj.get("rowCollection"));
      }
      if ((jsonObj.get("userCreated") != null && !jsonObj.get("userCreated").isJsonNull()) && !jsonObj.get("userCreated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userCreated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userCreated").toString()));
      }
      if ((jsonObj.get("userModified") != null && !jsonObj.get("userModified").isJsonNull()) && !jsonObj.get("userModified").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userModified` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userModified").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChartChartDataDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChartChartDataDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChartChartDataDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChartChartDataDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<ChartChartDataDetails>() {
           @Override
           public void write(JsonWriter out, ChartChartDataDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChartChartDataDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ChartChartDataDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ChartChartDataDetails
   * @throws IOException if the JSON string is invalid with respect to ChartChartDataDetails
   */
  public static ChartChartDataDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChartChartDataDetails.class);
  }

  /**
   * Convert an instance of ChartChartDataDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

