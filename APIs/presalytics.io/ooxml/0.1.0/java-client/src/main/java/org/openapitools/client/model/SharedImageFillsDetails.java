/*
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.SharedFillMapDetails;
import org.openapitools.client.model.SharedPicturesDetails;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SharedImageFillsDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:20.731713-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SharedImageFillsDetails {
  public static final String SERIALIZED_NAME_COMPRESSION_STATE = "compressionState";
  @SerializedName(SERIALIZED_NAME_COMPRESSION_STATE)
  private String compressionState;

  public static final String SERIALIZED_NAME_DATE_CREATED = "dateCreated";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private OffsetDateTime dateCreated;

  public static final String SERIALIZED_NAME_DATE_MODIFIED = "dateModified";
  @SerializedName(SERIALIZED_NAME_DATE_MODIFIED)
  private OffsetDateTime dateModified;

  public static final String SERIALIZED_NAME_DPI = "dpi";
  @SerializedName(SERIALIZED_NAME_DPI)
  private Integer dpi;

  public static final String SERIALIZED_NAME_EFFECTS_JSON = "effectsJson";
  @SerializedName(SERIALIZED_NAME_EFFECTS_JSON)
  private String effectsJson;

  public static final String SERIALIZED_NAME_FILL_MAP = "fillMap";
  @SerializedName(SERIALIZED_NAME_FILL_MAP)
  private SharedFillMapDetails fillMap;

  public static final String SERIALIZED_NAME_FILL_MAP_ID = "fillMapId";
  @SerializedName(SERIALIZED_NAME_FILL_MAP_ID)
  private UUID fillMapId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_PICTURE = "picture";
  @SerializedName(SERIALIZED_NAME_PICTURE)
  private SharedPicturesDetails picture;

  public static final String SERIALIZED_NAME_ROTATE_WITH_SHAPE = "rotateWithShape";
  @SerializedName(SERIALIZED_NAME_ROTATE_WITH_SHAPE)
  private Boolean rotateWithShape;

  public static final String SERIALIZED_NAME_SOURCE_RECTANGLE = "sourceRectangle";
  @SerializedName(SERIALIZED_NAME_SOURCE_RECTANGLE)
  private String sourceRectangle;

  public static final String SERIALIZED_NAME_STRETCH = "stretch";
  @SerializedName(SERIALIZED_NAME_STRETCH)
  private Boolean stretch;

  public static final String SERIALIZED_NAME_TILE = "tile";
  @SerializedName(SERIALIZED_NAME_TILE)
  private String tile;

  public static final String SERIALIZED_NAME_USER_CREATED = "userCreated";
  @SerializedName(SERIALIZED_NAME_USER_CREATED)
  private UUID userCreated;

  public static final String SERIALIZED_NAME_USER_MODIFIED = "userModified";
  @SerializedName(SERIALIZED_NAME_USER_MODIFIED)
  private UUID userModified;

  public SharedImageFillsDetails() {
  }

  public SharedImageFillsDetails compressionState(String compressionState) {
    this.compressionState = compressionState;
    return this;
  }

  /**
   * Get compressionState
   * @return compressionState
   */
  @javax.annotation.Nullable
  public String getCompressionState() {
    return compressionState;
  }

  public void setCompressionState(String compressionState) {
    this.compressionState = compressionState;
  }


  public SharedImageFillsDetails dateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
    return this;
  }

  /**
   * Get dateCreated
   * @return dateCreated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }

  public void setDateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
  }


  public SharedImageFillsDetails dateModified(OffsetDateTime dateModified) {
    this.dateModified = dateModified;
    return this;
  }

  /**
   * Get dateModified
   * @return dateModified
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateModified() {
    return dateModified;
  }

  public void setDateModified(OffsetDateTime dateModified) {
    this.dateModified = dateModified;
  }


  public SharedImageFillsDetails dpi(Integer dpi) {
    this.dpi = dpi;
    return this;
  }

  /**
   * Get dpi
   * @return dpi
   */
  @javax.annotation.Nullable
  public Integer getDpi() {
    return dpi;
  }

  public void setDpi(Integer dpi) {
    this.dpi = dpi;
  }


  public SharedImageFillsDetails effectsJson(String effectsJson) {
    this.effectsJson = effectsJson;
    return this;
  }

  /**
   * Get effectsJson
   * @return effectsJson
   */
  @javax.annotation.Nullable
  public String getEffectsJson() {
    return effectsJson;
  }

  public void setEffectsJson(String effectsJson) {
    this.effectsJson = effectsJson;
  }


  public SharedImageFillsDetails fillMap(SharedFillMapDetails fillMap) {
    this.fillMap = fillMap;
    return this;
  }

  /**
   * Get fillMap
   * @return fillMap
   */
  @javax.annotation.Nullable
  public SharedFillMapDetails getFillMap() {
    return fillMap;
  }

  public void setFillMap(SharedFillMapDetails fillMap) {
    this.fillMap = fillMap;
  }


  public SharedImageFillsDetails fillMapId(UUID fillMapId) {
    this.fillMapId = fillMapId;
    return this;
  }

  /**
   * Get fillMapId
   * @return fillMapId
   */
  @javax.annotation.Nullable
  public UUID getFillMapId() {
    return fillMapId;
  }

  public void setFillMapId(UUID fillMapId) {
    this.fillMapId = fillMapId;
  }


  public SharedImageFillsDetails id(UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }


  public SharedImageFillsDetails picture(SharedPicturesDetails picture) {
    this.picture = picture;
    return this;
  }

  /**
   * Get picture
   * @return picture
   */
  @javax.annotation.Nullable
  public SharedPicturesDetails getPicture() {
    return picture;
  }

  public void setPicture(SharedPicturesDetails picture) {
    this.picture = picture;
  }


  public SharedImageFillsDetails rotateWithShape(Boolean rotateWithShape) {
    this.rotateWithShape = rotateWithShape;
    return this;
  }

  /**
   * Get rotateWithShape
   * @return rotateWithShape
   */
  @javax.annotation.Nullable
  public Boolean getRotateWithShape() {
    return rotateWithShape;
  }

  public void setRotateWithShape(Boolean rotateWithShape) {
    this.rotateWithShape = rotateWithShape;
  }


  public SharedImageFillsDetails sourceRectangle(String sourceRectangle) {
    this.sourceRectangle = sourceRectangle;
    return this;
  }

  /**
   * Get sourceRectangle
   * @return sourceRectangle
   */
  @javax.annotation.Nullable
  public String getSourceRectangle() {
    return sourceRectangle;
  }

  public void setSourceRectangle(String sourceRectangle) {
    this.sourceRectangle = sourceRectangle;
  }


  public SharedImageFillsDetails stretch(Boolean stretch) {
    this.stretch = stretch;
    return this;
  }

  /**
   * Get stretch
   * @return stretch
   */
  @javax.annotation.Nullable
  public Boolean getStretch() {
    return stretch;
  }

  public void setStretch(Boolean stretch) {
    this.stretch = stretch;
  }


  public SharedImageFillsDetails tile(String tile) {
    this.tile = tile;
    return this;
  }

  /**
   * Get tile
   * @return tile
   */
  @javax.annotation.Nullable
  public String getTile() {
    return tile;
  }

  public void setTile(String tile) {
    this.tile = tile;
  }


  public SharedImageFillsDetails userCreated(UUID userCreated) {
    this.userCreated = userCreated;
    return this;
  }

  /**
   * Get userCreated
   * @return userCreated
   */
  @javax.annotation.Nullable
  public UUID getUserCreated() {
    return userCreated;
  }

  public void setUserCreated(UUID userCreated) {
    this.userCreated = userCreated;
  }


  public SharedImageFillsDetails userModified(UUID userModified) {
    this.userModified = userModified;
    return this;
  }

  /**
   * Get userModified
   * @return userModified
   */
  @javax.annotation.Nullable
  public UUID getUserModified() {
    return userModified;
  }

  public void setUserModified(UUID userModified) {
    this.userModified = userModified;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SharedImageFillsDetails sharedImageFillsDetails = (SharedImageFillsDetails) o;
    return Objects.equals(this.compressionState, sharedImageFillsDetails.compressionState) &&
        Objects.equals(this.dateCreated, sharedImageFillsDetails.dateCreated) &&
        Objects.equals(this.dateModified, sharedImageFillsDetails.dateModified) &&
        Objects.equals(this.dpi, sharedImageFillsDetails.dpi) &&
        Objects.equals(this.effectsJson, sharedImageFillsDetails.effectsJson) &&
        Objects.equals(this.fillMap, sharedImageFillsDetails.fillMap) &&
        Objects.equals(this.fillMapId, sharedImageFillsDetails.fillMapId) &&
        Objects.equals(this.id, sharedImageFillsDetails.id) &&
        Objects.equals(this.picture, sharedImageFillsDetails.picture) &&
        Objects.equals(this.rotateWithShape, sharedImageFillsDetails.rotateWithShape) &&
        Objects.equals(this.sourceRectangle, sharedImageFillsDetails.sourceRectangle) &&
        Objects.equals(this.stretch, sharedImageFillsDetails.stretch) &&
        Objects.equals(this.tile, sharedImageFillsDetails.tile) &&
        Objects.equals(this.userCreated, sharedImageFillsDetails.userCreated) &&
        Objects.equals(this.userModified, sharedImageFillsDetails.userModified);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(compressionState, dateCreated, dateModified, dpi, effectsJson, fillMap, fillMapId, id, picture, rotateWithShape, sourceRectangle, stretch, tile, userCreated, userModified);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SharedImageFillsDetails {\n");
    sb.append("    compressionState: ").append(toIndentedString(compressionState)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateModified: ").append(toIndentedString(dateModified)).append("\n");
    sb.append("    dpi: ").append(toIndentedString(dpi)).append("\n");
    sb.append("    effectsJson: ").append(toIndentedString(effectsJson)).append("\n");
    sb.append("    fillMap: ").append(toIndentedString(fillMap)).append("\n");
    sb.append("    fillMapId: ").append(toIndentedString(fillMapId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    picture: ").append(toIndentedString(picture)).append("\n");
    sb.append("    rotateWithShape: ").append(toIndentedString(rotateWithShape)).append("\n");
    sb.append("    sourceRectangle: ").append(toIndentedString(sourceRectangle)).append("\n");
    sb.append("    stretch: ").append(toIndentedString(stretch)).append("\n");
    sb.append("    tile: ").append(toIndentedString(tile)).append("\n");
    sb.append("    userCreated: ").append(toIndentedString(userCreated)).append("\n");
    sb.append("    userModified: ").append(toIndentedString(userModified)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("compressionState");
    openapiFields.add("dateCreated");
    openapiFields.add("dateModified");
    openapiFields.add("dpi");
    openapiFields.add("effectsJson");
    openapiFields.add("fillMap");
    openapiFields.add("fillMapId");
    openapiFields.add("id");
    openapiFields.add("picture");
    openapiFields.add("rotateWithShape");
    openapiFields.add("sourceRectangle");
    openapiFields.add("stretch");
    openapiFields.add("tile");
    openapiFields.add("userCreated");
    openapiFields.add("userModified");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SharedImageFillsDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SharedImageFillsDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SharedImageFillsDetails is not found in the empty JSON string", SharedImageFillsDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SharedImageFillsDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SharedImageFillsDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("compressionState") != null && !jsonObj.get("compressionState").isJsonNull()) && !jsonObj.get("compressionState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `compressionState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("compressionState").toString()));
      }
      if ((jsonObj.get("effectsJson") != null && !jsonObj.get("effectsJson").isJsonNull()) && !jsonObj.get("effectsJson").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `effectsJson` to be a primitive type in the JSON string but got `%s`", jsonObj.get("effectsJson").toString()));
      }
      // validate the optional field `fillMap`
      if (jsonObj.get("fillMap") != null && !jsonObj.get("fillMap").isJsonNull()) {
        SharedFillMapDetails.validateJsonElement(jsonObj.get("fillMap"));
      }
      if ((jsonObj.get("fillMapId") != null && !jsonObj.get("fillMapId").isJsonNull()) && !jsonObj.get("fillMapId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fillMapId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fillMapId").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `picture`
      if (jsonObj.get("picture") != null && !jsonObj.get("picture").isJsonNull()) {
        SharedPicturesDetails.validateJsonElement(jsonObj.get("picture"));
      }
      if ((jsonObj.get("sourceRectangle") != null && !jsonObj.get("sourceRectangle").isJsonNull()) && !jsonObj.get("sourceRectangle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceRectangle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceRectangle").toString()));
      }
      if ((jsonObj.get("tile") != null && !jsonObj.get("tile").isJsonNull()) && !jsonObj.get("tile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tile").toString()));
      }
      if ((jsonObj.get("userCreated") != null && !jsonObj.get("userCreated").isJsonNull()) && !jsonObj.get("userCreated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userCreated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userCreated").toString()));
      }
      if ((jsonObj.get("userModified") != null && !jsonObj.get("userModified").isJsonNull()) && !jsonObj.get("userModified").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userModified` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userModified").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SharedImageFillsDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SharedImageFillsDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SharedImageFillsDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SharedImageFillsDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<SharedImageFillsDetails>() {
           @Override
           public void write(JsonWriter out, SharedImageFillsDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SharedImageFillsDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SharedImageFillsDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SharedImageFillsDetails
   * @throws IOException if the JSON string is invalid with respect to SharedImageFillsDetails
   */
  public static SharedImageFillsDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SharedImageFillsDetails.class);
  }

  /**
   * Convert an instance of SharedImageFillsDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

