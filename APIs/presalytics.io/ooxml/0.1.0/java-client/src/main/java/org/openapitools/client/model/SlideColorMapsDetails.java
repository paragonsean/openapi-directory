/*
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.SlideSlideMastersDetails;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SlideColorMapsDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:20.731713-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SlideColorMapsDetails {
  public static final String SERIALIZED_NAME_ACCENT1 = "accent1";
  @SerializedName(SERIALIZED_NAME_ACCENT1)
  private Integer accent1;

  public static final String SERIALIZED_NAME_ACCENT2 = "accent2";
  @SerializedName(SERIALIZED_NAME_ACCENT2)
  private Integer accent2;

  public static final String SERIALIZED_NAME_ACCENT3 = "accent3";
  @SerializedName(SERIALIZED_NAME_ACCENT3)
  private Integer accent3;

  public static final String SERIALIZED_NAME_ACCENT4 = "accent4";
  @SerializedName(SERIALIZED_NAME_ACCENT4)
  private Integer accent4;

  public static final String SERIALIZED_NAME_ACCENT5 = "accent5";
  @SerializedName(SERIALIZED_NAME_ACCENT5)
  private Integer accent5;

  public static final String SERIALIZED_NAME_ACCENT6 = "accent6";
  @SerializedName(SERIALIZED_NAME_ACCENT6)
  private Integer accent6;

  public static final String SERIALIZED_NAME_BACKGROUND1 = "background1";
  @SerializedName(SERIALIZED_NAME_BACKGROUND1)
  private Integer background1;

  public static final String SERIALIZED_NAME_BACKGROUND2 = "background2";
  @SerializedName(SERIALIZED_NAME_BACKGROUND2)
  private Integer background2;

  public static final String SERIALIZED_NAME_DATE_CREATED = "dateCreated";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private OffsetDateTime dateCreated;

  public static final String SERIALIZED_NAME_DATE_MODIFIED = "dateModified";
  @SerializedName(SERIALIZED_NAME_DATE_MODIFIED)
  private OffsetDateTime dateModified;

  public static final String SERIALIZED_NAME_FOLLOWED_HYPERLINK = "followedHyperlink";
  @SerializedName(SERIALIZED_NAME_FOLLOWED_HYPERLINK)
  private Integer followedHyperlink;

  public static final String SERIALIZED_NAME_HYPERLINK = "hyperlink";
  @SerializedName(SERIALIZED_NAME_HYPERLINK)
  private Integer hyperlink;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_SLIDE_MASTER = "slideMaster";
  @SerializedName(SERIALIZED_NAME_SLIDE_MASTER)
  private SlideSlideMastersDetails slideMaster;

  public static final String SERIALIZED_NAME_SLIDE_MASTER_ID = "slideMasterId";
  @SerializedName(SERIALIZED_NAME_SLIDE_MASTER_ID)
  private UUID slideMasterId;

  public static final String SERIALIZED_NAME_TEXT1 = "text1";
  @SerializedName(SERIALIZED_NAME_TEXT1)
  private Integer text1;

  public static final String SERIALIZED_NAME_TEXT2 = "text2";
  @SerializedName(SERIALIZED_NAME_TEXT2)
  private Integer text2;

  public static final String SERIALIZED_NAME_USER_CREATED = "userCreated";
  @SerializedName(SERIALIZED_NAME_USER_CREATED)
  private UUID userCreated;

  public static final String SERIALIZED_NAME_USER_MODIFIED = "userModified";
  @SerializedName(SERIALIZED_NAME_USER_MODIFIED)
  private UUID userModified;

  public SlideColorMapsDetails() {
  }

  public SlideColorMapsDetails accent1(Integer accent1) {
    this.accent1 = accent1;
    return this;
  }

  /**
   * Get accent1
   * @return accent1
   */
  @javax.annotation.Nullable
  public Integer getAccent1() {
    return accent1;
  }

  public void setAccent1(Integer accent1) {
    this.accent1 = accent1;
  }


  public SlideColorMapsDetails accent2(Integer accent2) {
    this.accent2 = accent2;
    return this;
  }

  /**
   * Get accent2
   * @return accent2
   */
  @javax.annotation.Nullable
  public Integer getAccent2() {
    return accent2;
  }

  public void setAccent2(Integer accent2) {
    this.accent2 = accent2;
  }


  public SlideColorMapsDetails accent3(Integer accent3) {
    this.accent3 = accent3;
    return this;
  }

  /**
   * Get accent3
   * @return accent3
   */
  @javax.annotation.Nullable
  public Integer getAccent3() {
    return accent3;
  }

  public void setAccent3(Integer accent3) {
    this.accent3 = accent3;
  }


  public SlideColorMapsDetails accent4(Integer accent4) {
    this.accent4 = accent4;
    return this;
  }

  /**
   * Get accent4
   * @return accent4
   */
  @javax.annotation.Nullable
  public Integer getAccent4() {
    return accent4;
  }

  public void setAccent4(Integer accent4) {
    this.accent4 = accent4;
  }


  public SlideColorMapsDetails accent5(Integer accent5) {
    this.accent5 = accent5;
    return this;
  }

  /**
   * Get accent5
   * @return accent5
   */
  @javax.annotation.Nullable
  public Integer getAccent5() {
    return accent5;
  }

  public void setAccent5(Integer accent5) {
    this.accent5 = accent5;
  }


  public SlideColorMapsDetails accent6(Integer accent6) {
    this.accent6 = accent6;
    return this;
  }

  /**
   * Get accent6
   * @return accent6
   */
  @javax.annotation.Nullable
  public Integer getAccent6() {
    return accent6;
  }

  public void setAccent6(Integer accent6) {
    this.accent6 = accent6;
  }


  public SlideColorMapsDetails background1(Integer background1) {
    this.background1 = background1;
    return this;
  }

  /**
   * Get background1
   * @return background1
   */
  @javax.annotation.Nullable
  public Integer getBackground1() {
    return background1;
  }

  public void setBackground1(Integer background1) {
    this.background1 = background1;
  }


  public SlideColorMapsDetails background2(Integer background2) {
    this.background2 = background2;
    return this;
  }

  /**
   * Get background2
   * @return background2
   */
  @javax.annotation.Nullable
  public Integer getBackground2() {
    return background2;
  }

  public void setBackground2(Integer background2) {
    this.background2 = background2;
  }


  public SlideColorMapsDetails dateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
    return this;
  }

  /**
   * Get dateCreated
   * @return dateCreated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }

  public void setDateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
  }


  public SlideColorMapsDetails dateModified(OffsetDateTime dateModified) {
    this.dateModified = dateModified;
    return this;
  }

  /**
   * Get dateModified
   * @return dateModified
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateModified() {
    return dateModified;
  }

  public void setDateModified(OffsetDateTime dateModified) {
    this.dateModified = dateModified;
  }


  public SlideColorMapsDetails followedHyperlink(Integer followedHyperlink) {
    this.followedHyperlink = followedHyperlink;
    return this;
  }

  /**
   * Get followedHyperlink
   * @return followedHyperlink
   */
  @javax.annotation.Nullable
  public Integer getFollowedHyperlink() {
    return followedHyperlink;
  }

  public void setFollowedHyperlink(Integer followedHyperlink) {
    this.followedHyperlink = followedHyperlink;
  }


  public SlideColorMapsDetails hyperlink(Integer hyperlink) {
    this.hyperlink = hyperlink;
    return this;
  }

  /**
   * Get hyperlink
   * @return hyperlink
   */
  @javax.annotation.Nullable
  public Integer getHyperlink() {
    return hyperlink;
  }

  public void setHyperlink(Integer hyperlink) {
    this.hyperlink = hyperlink;
  }


  public SlideColorMapsDetails id(UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }


  public SlideColorMapsDetails slideMaster(SlideSlideMastersDetails slideMaster) {
    this.slideMaster = slideMaster;
    return this;
  }

  /**
   * Get slideMaster
   * @return slideMaster
   */
  @javax.annotation.Nullable
  public SlideSlideMastersDetails getSlideMaster() {
    return slideMaster;
  }

  public void setSlideMaster(SlideSlideMastersDetails slideMaster) {
    this.slideMaster = slideMaster;
  }


  public SlideColorMapsDetails slideMasterId(UUID slideMasterId) {
    this.slideMasterId = slideMasterId;
    return this;
  }

  /**
   * Get slideMasterId
   * @return slideMasterId
   */
  @javax.annotation.Nullable
  public UUID getSlideMasterId() {
    return slideMasterId;
  }

  public void setSlideMasterId(UUID slideMasterId) {
    this.slideMasterId = slideMasterId;
  }


  public SlideColorMapsDetails text1(Integer text1) {
    this.text1 = text1;
    return this;
  }

  /**
   * Get text1
   * @return text1
   */
  @javax.annotation.Nullable
  public Integer getText1() {
    return text1;
  }

  public void setText1(Integer text1) {
    this.text1 = text1;
  }


  public SlideColorMapsDetails text2(Integer text2) {
    this.text2 = text2;
    return this;
  }

  /**
   * Get text2
   * @return text2
   */
  @javax.annotation.Nullable
  public Integer getText2() {
    return text2;
  }

  public void setText2(Integer text2) {
    this.text2 = text2;
  }


  public SlideColorMapsDetails userCreated(UUID userCreated) {
    this.userCreated = userCreated;
    return this;
  }

  /**
   * Get userCreated
   * @return userCreated
   */
  @javax.annotation.Nullable
  public UUID getUserCreated() {
    return userCreated;
  }

  public void setUserCreated(UUID userCreated) {
    this.userCreated = userCreated;
  }


  public SlideColorMapsDetails userModified(UUID userModified) {
    this.userModified = userModified;
    return this;
  }

  /**
   * Get userModified
   * @return userModified
   */
  @javax.annotation.Nullable
  public UUID getUserModified() {
    return userModified;
  }

  public void setUserModified(UUID userModified) {
    this.userModified = userModified;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SlideColorMapsDetails slideColorMapsDetails = (SlideColorMapsDetails) o;
    return Objects.equals(this.accent1, slideColorMapsDetails.accent1) &&
        Objects.equals(this.accent2, slideColorMapsDetails.accent2) &&
        Objects.equals(this.accent3, slideColorMapsDetails.accent3) &&
        Objects.equals(this.accent4, slideColorMapsDetails.accent4) &&
        Objects.equals(this.accent5, slideColorMapsDetails.accent5) &&
        Objects.equals(this.accent6, slideColorMapsDetails.accent6) &&
        Objects.equals(this.background1, slideColorMapsDetails.background1) &&
        Objects.equals(this.background2, slideColorMapsDetails.background2) &&
        Objects.equals(this.dateCreated, slideColorMapsDetails.dateCreated) &&
        Objects.equals(this.dateModified, slideColorMapsDetails.dateModified) &&
        Objects.equals(this.followedHyperlink, slideColorMapsDetails.followedHyperlink) &&
        Objects.equals(this.hyperlink, slideColorMapsDetails.hyperlink) &&
        Objects.equals(this.id, slideColorMapsDetails.id) &&
        Objects.equals(this.slideMaster, slideColorMapsDetails.slideMaster) &&
        Objects.equals(this.slideMasterId, slideColorMapsDetails.slideMasterId) &&
        Objects.equals(this.text1, slideColorMapsDetails.text1) &&
        Objects.equals(this.text2, slideColorMapsDetails.text2) &&
        Objects.equals(this.userCreated, slideColorMapsDetails.userCreated) &&
        Objects.equals(this.userModified, slideColorMapsDetails.userModified);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(accent1, accent2, accent3, accent4, accent5, accent6, background1, background2, dateCreated, dateModified, followedHyperlink, hyperlink, id, slideMaster, slideMasterId, text1, text2, userCreated, userModified);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SlideColorMapsDetails {\n");
    sb.append("    accent1: ").append(toIndentedString(accent1)).append("\n");
    sb.append("    accent2: ").append(toIndentedString(accent2)).append("\n");
    sb.append("    accent3: ").append(toIndentedString(accent3)).append("\n");
    sb.append("    accent4: ").append(toIndentedString(accent4)).append("\n");
    sb.append("    accent5: ").append(toIndentedString(accent5)).append("\n");
    sb.append("    accent6: ").append(toIndentedString(accent6)).append("\n");
    sb.append("    background1: ").append(toIndentedString(background1)).append("\n");
    sb.append("    background2: ").append(toIndentedString(background2)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateModified: ").append(toIndentedString(dateModified)).append("\n");
    sb.append("    followedHyperlink: ").append(toIndentedString(followedHyperlink)).append("\n");
    sb.append("    hyperlink: ").append(toIndentedString(hyperlink)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    slideMaster: ").append(toIndentedString(slideMaster)).append("\n");
    sb.append("    slideMasterId: ").append(toIndentedString(slideMasterId)).append("\n");
    sb.append("    text1: ").append(toIndentedString(text1)).append("\n");
    sb.append("    text2: ").append(toIndentedString(text2)).append("\n");
    sb.append("    userCreated: ").append(toIndentedString(userCreated)).append("\n");
    sb.append("    userModified: ").append(toIndentedString(userModified)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accent1");
    openapiFields.add("accent2");
    openapiFields.add("accent3");
    openapiFields.add("accent4");
    openapiFields.add("accent5");
    openapiFields.add("accent6");
    openapiFields.add("background1");
    openapiFields.add("background2");
    openapiFields.add("dateCreated");
    openapiFields.add("dateModified");
    openapiFields.add("followedHyperlink");
    openapiFields.add("hyperlink");
    openapiFields.add("id");
    openapiFields.add("slideMaster");
    openapiFields.add("slideMasterId");
    openapiFields.add("text1");
    openapiFields.add("text2");
    openapiFields.add("userCreated");
    openapiFields.add("userModified");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SlideColorMapsDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SlideColorMapsDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SlideColorMapsDetails is not found in the empty JSON string", SlideColorMapsDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SlideColorMapsDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SlideColorMapsDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `slideMaster`
      if (jsonObj.get("slideMaster") != null && !jsonObj.get("slideMaster").isJsonNull()) {
        SlideSlideMastersDetails.validateJsonElement(jsonObj.get("slideMaster"));
      }
      if ((jsonObj.get("slideMasterId") != null && !jsonObj.get("slideMasterId").isJsonNull()) && !jsonObj.get("slideMasterId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slideMasterId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slideMasterId").toString()));
      }
      if ((jsonObj.get("userCreated") != null && !jsonObj.get("userCreated").isJsonNull()) && !jsonObj.get("userCreated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userCreated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userCreated").toString()));
      }
      if ((jsonObj.get("userModified") != null && !jsonObj.get("userModified").isJsonNull()) && !jsonObj.get("userModified").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userModified` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userModified").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SlideColorMapsDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SlideColorMapsDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SlideColorMapsDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SlideColorMapsDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<SlideColorMapsDetails>() {
           @Override
           public void write(JsonWriter out, SlideColorMapsDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SlideColorMapsDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SlideColorMapsDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SlideColorMapsDetails
   * @throws IOException if the JSON string is invalid with respect to SlideColorMapsDetails
   */
  public static SlideColorMapsDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SlideColorMapsDetails.class);
  }

  /**
   * Convert an instance of SlideColorMapsDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

