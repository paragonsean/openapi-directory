/*
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.SharedLinesDetails;
import org.openapitools.client.model.TableCellsDetails;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TableBordersDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:20.731713-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TableBordersDetails {
  public static final String SERIALIZED_NAME_B_LTO_T_R = "bLtoTR";
  @SerializedName(SERIALIZED_NAME_B_LTO_T_R)
  private SharedLinesDetails bLtoTR;

  public static final String SERIALIZED_NAME_BOTTOM = "bottom";
  @SerializedName(SERIALIZED_NAME_BOTTOM)
  private SharedLinesDetails bottom;

  public static final String SERIALIZED_NAME_CELL = "cell";
  @SerializedName(SERIALIZED_NAME_CELL)
  private TableCellsDetails cell;

  public static final String SERIALIZED_NAME_CELL_ID = "cellId";
  @SerializedName(SERIALIZED_NAME_CELL_ID)
  private UUID cellId;

  public static final String SERIALIZED_NAME_DATE_CREATED = "dateCreated";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private OffsetDateTime dateCreated;

  public static final String SERIALIZED_NAME_DATE_MODIFIED = "dateModified";
  @SerializedName(SERIALIZED_NAME_DATE_MODIFIED)
  private OffsetDateTime dateModified;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_LEFT = "left";
  @SerializedName(SERIALIZED_NAME_LEFT)
  private SharedLinesDetails left;

  public static final String SERIALIZED_NAME_RIGHT = "right";
  @SerializedName(SERIALIZED_NAME_RIGHT)
  private SharedLinesDetails right;

  public static final String SERIALIZED_NAME_T_LTO_B_R = "tLtoBR";
  @SerializedName(SERIALIZED_NAME_T_LTO_B_R)
  private SharedLinesDetails tLtoBR;

  public static final String SERIALIZED_NAME_TOP = "top";
  @SerializedName(SERIALIZED_NAME_TOP)
  private SharedLinesDetails top;

  public static final String SERIALIZED_NAME_USER_CREATED = "userCreated";
  @SerializedName(SERIALIZED_NAME_USER_CREATED)
  private UUID userCreated;

  public static final String SERIALIZED_NAME_USER_MODIFIED = "userModified";
  @SerializedName(SERIALIZED_NAME_USER_MODIFIED)
  private UUID userModified;

  public TableBordersDetails() {
  }

  public TableBordersDetails bLtoTR(SharedLinesDetails bLtoTR) {
    this.bLtoTR = bLtoTR;
    return this;
  }

  /**
   * Get bLtoTR
   * @return bLtoTR
   */
  @javax.annotation.Nullable
  public SharedLinesDetails getbLtoTR() {
    return bLtoTR;
  }

  public void setbLtoTR(SharedLinesDetails bLtoTR) {
    this.bLtoTR = bLtoTR;
  }


  public TableBordersDetails bottom(SharedLinesDetails bottom) {
    this.bottom = bottom;
    return this;
  }

  /**
   * Get bottom
   * @return bottom
   */
  @javax.annotation.Nullable
  public SharedLinesDetails getBottom() {
    return bottom;
  }

  public void setBottom(SharedLinesDetails bottom) {
    this.bottom = bottom;
  }


  public TableBordersDetails cell(TableCellsDetails cell) {
    this.cell = cell;
    return this;
  }

  /**
   * Get cell
   * @return cell
   */
  @javax.annotation.Nullable
  public TableCellsDetails getCell() {
    return cell;
  }

  public void setCell(TableCellsDetails cell) {
    this.cell = cell;
  }


  public TableBordersDetails cellId(UUID cellId) {
    this.cellId = cellId;
    return this;
  }

  /**
   * Get cellId
   * @return cellId
   */
  @javax.annotation.Nullable
  public UUID getCellId() {
    return cellId;
  }

  public void setCellId(UUID cellId) {
    this.cellId = cellId;
  }


  public TableBordersDetails dateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
    return this;
  }

  /**
   * Get dateCreated
   * @return dateCreated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }

  public void setDateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
  }


  public TableBordersDetails dateModified(OffsetDateTime dateModified) {
    this.dateModified = dateModified;
    return this;
  }

  /**
   * Get dateModified
   * @return dateModified
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateModified() {
    return dateModified;
  }

  public void setDateModified(OffsetDateTime dateModified) {
    this.dateModified = dateModified;
  }


  public TableBordersDetails id(UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }


  public TableBordersDetails left(SharedLinesDetails left) {
    this.left = left;
    return this;
  }

  /**
   * Get left
   * @return left
   */
  @javax.annotation.Nullable
  public SharedLinesDetails getLeft() {
    return left;
  }

  public void setLeft(SharedLinesDetails left) {
    this.left = left;
  }


  public TableBordersDetails right(SharedLinesDetails right) {
    this.right = right;
    return this;
  }

  /**
   * Get right
   * @return right
   */
  @javax.annotation.Nullable
  public SharedLinesDetails getRight() {
    return right;
  }

  public void setRight(SharedLinesDetails right) {
    this.right = right;
  }


  public TableBordersDetails tLtoBR(SharedLinesDetails tLtoBR) {
    this.tLtoBR = tLtoBR;
    return this;
  }

  /**
   * Get tLtoBR
   * @return tLtoBR
   */
  @javax.annotation.Nullable
  public SharedLinesDetails gettLtoBR() {
    return tLtoBR;
  }

  public void settLtoBR(SharedLinesDetails tLtoBR) {
    this.tLtoBR = tLtoBR;
  }


  public TableBordersDetails top(SharedLinesDetails top) {
    this.top = top;
    return this;
  }

  /**
   * Get top
   * @return top
   */
  @javax.annotation.Nullable
  public SharedLinesDetails getTop() {
    return top;
  }

  public void setTop(SharedLinesDetails top) {
    this.top = top;
  }


  public TableBordersDetails userCreated(UUID userCreated) {
    this.userCreated = userCreated;
    return this;
  }

  /**
   * Get userCreated
   * @return userCreated
   */
  @javax.annotation.Nullable
  public UUID getUserCreated() {
    return userCreated;
  }

  public void setUserCreated(UUID userCreated) {
    this.userCreated = userCreated;
  }


  public TableBordersDetails userModified(UUID userModified) {
    this.userModified = userModified;
    return this;
  }

  /**
   * Get userModified
   * @return userModified
   */
  @javax.annotation.Nullable
  public UUID getUserModified() {
    return userModified;
  }

  public void setUserModified(UUID userModified) {
    this.userModified = userModified;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TableBordersDetails tableBordersDetails = (TableBordersDetails) o;
    return Objects.equals(this.bLtoTR, tableBordersDetails.bLtoTR) &&
        Objects.equals(this.bottom, tableBordersDetails.bottom) &&
        Objects.equals(this.cell, tableBordersDetails.cell) &&
        Objects.equals(this.cellId, tableBordersDetails.cellId) &&
        Objects.equals(this.dateCreated, tableBordersDetails.dateCreated) &&
        Objects.equals(this.dateModified, tableBordersDetails.dateModified) &&
        Objects.equals(this.id, tableBordersDetails.id) &&
        Objects.equals(this.left, tableBordersDetails.left) &&
        Objects.equals(this.right, tableBordersDetails.right) &&
        Objects.equals(this.tLtoBR, tableBordersDetails.tLtoBR) &&
        Objects.equals(this.top, tableBordersDetails.top) &&
        Objects.equals(this.userCreated, tableBordersDetails.userCreated) &&
        Objects.equals(this.userModified, tableBordersDetails.userModified);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(bLtoTR, bottom, cell, cellId, dateCreated, dateModified, id, left, right, tLtoBR, top, userCreated, userModified);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TableBordersDetails {\n");
    sb.append("    bLtoTR: ").append(toIndentedString(bLtoTR)).append("\n");
    sb.append("    bottom: ").append(toIndentedString(bottom)).append("\n");
    sb.append("    cell: ").append(toIndentedString(cell)).append("\n");
    sb.append("    cellId: ").append(toIndentedString(cellId)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateModified: ").append(toIndentedString(dateModified)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    left: ").append(toIndentedString(left)).append("\n");
    sb.append("    right: ").append(toIndentedString(right)).append("\n");
    sb.append("    tLtoBR: ").append(toIndentedString(tLtoBR)).append("\n");
    sb.append("    top: ").append(toIndentedString(top)).append("\n");
    sb.append("    userCreated: ").append(toIndentedString(userCreated)).append("\n");
    sb.append("    userModified: ").append(toIndentedString(userModified)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bLtoTR");
    openapiFields.add("bottom");
    openapiFields.add("cell");
    openapiFields.add("cellId");
    openapiFields.add("dateCreated");
    openapiFields.add("dateModified");
    openapiFields.add("id");
    openapiFields.add("left");
    openapiFields.add("right");
    openapiFields.add("tLtoBR");
    openapiFields.add("top");
    openapiFields.add("userCreated");
    openapiFields.add("userModified");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TableBordersDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TableBordersDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TableBordersDetails is not found in the empty JSON string", TableBordersDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TableBordersDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TableBordersDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `bLtoTR`
      if (jsonObj.get("bLtoTR") != null && !jsonObj.get("bLtoTR").isJsonNull()) {
        SharedLinesDetails.validateJsonElement(jsonObj.get("bLtoTR"));
      }
      // validate the optional field `bottom`
      if (jsonObj.get("bottom") != null && !jsonObj.get("bottom").isJsonNull()) {
        SharedLinesDetails.validateJsonElement(jsonObj.get("bottom"));
      }
      // validate the optional field `cell`
      if (jsonObj.get("cell") != null && !jsonObj.get("cell").isJsonNull()) {
        TableCellsDetails.validateJsonElement(jsonObj.get("cell"));
      }
      if ((jsonObj.get("cellId") != null && !jsonObj.get("cellId").isJsonNull()) && !jsonObj.get("cellId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cellId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cellId").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `left`
      if (jsonObj.get("left") != null && !jsonObj.get("left").isJsonNull()) {
        SharedLinesDetails.validateJsonElement(jsonObj.get("left"));
      }
      // validate the optional field `right`
      if (jsonObj.get("right") != null && !jsonObj.get("right").isJsonNull()) {
        SharedLinesDetails.validateJsonElement(jsonObj.get("right"));
      }
      // validate the optional field `tLtoBR`
      if (jsonObj.get("tLtoBR") != null && !jsonObj.get("tLtoBR").isJsonNull()) {
        SharedLinesDetails.validateJsonElement(jsonObj.get("tLtoBR"));
      }
      // validate the optional field `top`
      if (jsonObj.get("top") != null && !jsonObj.get("top").isJsonNull()) {
        SharedLinesDetails.validateJsonElement(jsonObj.get("top"));
      }
      if ((jsonObj.get("userCreated") != null && !jsonObj.get("userCreated").isJsonNull()) && !jsonObj.get("userCreated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userCreated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userCreated").toString()));
      }
      if ((jsonObj.get("userModified") != null && !jsonObj.get("userModified").isJsonNull()) && !jsonObj.get("userModified").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userModified` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userModified").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TableBordersDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TableBordersDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TableBordersDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TableBordersDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<TableBordersDetails>() {
           @Override
           public void write(JsonWriter out, TableBordersDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TableBordersDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TableBordersDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TableBordersDetails
   * @throws IOException if the JSON string is invalid with respect to TableBordersDetails
   */
  public static TableBordersDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TableBordersDetails.class);
  }

  /**
   * Convert an instance of TableBordersDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

