/*
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.SlideConnectorDetails;
import org.openapitools.client.model.SlideGraphicsDetails;
import org.openapitools.client.model.SlideGroupElementTypesDetails;
import org.openapitools.client.model.SlideGroupsDetails;
import org.openapitools.client.model.SlideShapeTreesDetails;
import org.openapitools.client.model.SlideShapesDetails;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SlideGroupElementsDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:20.731713-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SlideGroupElementsDetails {
  public static final String SERIALIZED_NAME_CHILD_GROUP_ELEMENTS = "childGroupElements";
  @SerializedName(SERIALIZED_NAME_CHILD_GROUP_ELEMENTS)
  private List<SlideGroupElementsDetails> childGroupElements;

  public static final String SERIALIZED_NAME_CONNECTOR = "connector";
  @SerializedName(SERIALIZED_NAME_CONNECTOR)
  private SlideConnectorDetails connector;

  public static final String SERIALIZED_NAME_DATE_CREATED = "dateCreated";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private OffsetDateTime dateCreated;

  public static final String SERIALIZED_NAME_DATE_MODIFIED = "dateModified";
  @SerializedName(SERIALIZED_NAME_DATE_MODIFIED)
  private OffsetDateTime dateModified;

  public static final String SERIALIZED_NAME_GRAPHIC = "graphic";
  @SerializedName(SERIALIZED_NAME_GRAPHIC)
  private SlideGraphicsDetails graphic;

  public static final String SERIALIZED_NAME_GROUP = "group";
  @SerializedName(SERIALIZED_NAME_GROUP)
  private SlideGroupsDetails group;

  public static final String SERIALIZED_NAME_GROUP_ELEMENT_TYPE_ID = "groupElementTypeId";
  @SerializedName(SERIALIZED_NAME_GROUP_ELEMENT_TYPE_ID)
  private Integer groupElementTypeId;

  public static final String SERIALIZED_NAME_GROUP_ELEMENT_TYPE_PK = "groupElementTypePk";
  @SerializedName(SERIALIZED_NAME_GROUP_ELEMENT_TYPE_PK)
  private UUID groupElementTypePk;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_PARENT_GROUP_ELEMENT = "parentGroupElement";
  @SerializedName(SERIALIZED_NAME_PARENT_GROUP_ELEMENT)
  private SlideGroupElementsDetails parentGroupElement;

  public static final String SERIALIZED_NAME_PARENT_GROUP_ELEMENT_ID = "parentGroupElementId";
  @SerializedName(SERIALIZED_NAME_PARENT_GROUP_ELEMENT_ID)
  private UUID parentGroupElementId;

  public static final String SERIALIZED_NAME_SHAPE = "shape";
  @SerializedName(SERIALIZED_NAME_SHAPE)
  private SlideShapesDetails shape;

  public static final String SERIALIZED_NAME_SHAPE_TREE = "shapeTree";
  @SerializedName(SERIALIZED_NAME_SHAPE_TREE)
  private SlideShapeTreesDetails shapeTree;

  public static final String SERIALIZED_NAME_SHAPE_TREE_ID = "shapeTreeId";
  @SerializedName(SERIALIZED_NAME_SHAPE_TREE_ID)
  private UUID shapeTreeId;

  public static final String SERIALIZED_NAME_TYPE_INFO = "typeInfo";
  @SerializedName(SERIALIZED_NAME_TYPE_INFO)
  private SlideGroupElementTypesDetails typeInfo;

  public static final String SERIALIZED_NAME_ULTIMATE_PARENT_SHAPE_TREE_ID = "ultimateParentShapeTreeId";
  @SerializedName(SERIALIZED_NAME_ULTIMATE_PARENT_SHAPE_TREE_ID)
  private UUID ultimateParentShapeTreeId;

  public static final String SERIALIZED_NAME_USER_CREATED = "userCreated";
  @SerializedName(SERIALIZED_NAME_USER_CREATED)
  private UUID userCreated;

  public static final String SERIALIZED_NAME_USER_MODIFIED = "userModified";
  @SerializedName(SERIALIZED_NAME_USER_MODIFIED)
  private UUID userModified;

  public SlideGroupElementsDetails() {
  }

  public SlideGroupElementsDetails childGroupElements(List<SlideGroupElementsDetails> childGroupElements) {
    this.childGroupElements = childGroupElements;
    return this;
  }

  public SlideGroupElementsDetails addChildGroupElementsItem(SlideGroupElementsDetails childGroupElementsItem) {
    if (this.childGroupElements == null) {
      this.childGroupElements = new ArrayList<>();
    }
    this.childGroupElements.add(childGroupElementsItem);
    return this;
  }

  /**
   * Get childGroupElements
   * @return childGroupElements
   */
  @javax.annotation.Nullable
  public List<SlideGroupElementsDetails> getChildGroupElements() {
    return childGroupElements;
  }

  public void setChildGroupElements(List<SlideGroupElementsDetails> childGroupElements) {
    this.childGroupElements = childGroupElements;
  }


  public SlideGroupElementsDetails connector(SlideConnectorDetails connector) {
    this.connector = connector;
    return this;
  }

  /**
   * Get connector
   * @return connector
   */
  @javax.annotation.Nullable
  public SlideConnectorDetails getConnector() {
    return connector;
  }

  public void setConnector(SlideConnectorDetails connector) {
    this.connector = connector;
  }


  public SlideGroupElementsDetails dateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
    return this;
  }

  /**
   * Get dateCreated
   * @return dateCreated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }

  public void setDateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
  }


  public SlideGroupElementsDetails dateModified(OffsetDateTime dateModified) {
    this.dateModified = dateModified;
    return this;
  }

  /**
   * Get dateModified
   * @return dateModified
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateModified() {
    return dateModified;
  }

  public void setDateModified(OffsetDateTime dateModified) {
    this.dateModified = dateModified;
  }


  public SlideGroupElementsDetails graphic(SlideGraphicsDetails graphic) {
    this.graphic = graphic;
    return this;
  }

  /**
   * Get graphic
   * @return graphic
   */
  @javax.annotation.Nullable
  public SlideGraphicsDetails getGraphic() {
    return graphic;
  }

  public void setGraphic(SlideGraphicsDetails graphic) {
    this.graphic = graphic;
  }


  public SlideGroupElementsDetails group(SlideGroupsDetails group) {
    this.group = group;
    return this;
  }

  /**
   * Get group
   * @return group
   */
  @javax.annotation.Nullable
  public SlideGroupsDetails getGroup() {
    return group;
  }

  public void setGroup(SlideGroupsDetails group) {
    this.group = group;
  }


  public SlideGroupElementsDetails groupElementTypeId(Integer groupElementTypeId) {
    this.groupElementTypeId = groupElementTypeId;
    return this;
  }

  /**
   * Get groupElementTypeId
   * @return groupElementTypeId
   */
  @javax.annotation.Nullable
  public Integer getGroupElementTypeId() {
    return groupElementTypeId;
  }

  public void setGroupElementTypeId(Integer groupElementTypeId) {
    this.groupElementTypeId = groupElementTypeId;
  }


  public SlideGroupElementsDetails groupElementTypePk(UUID groupElementTypePk) {
    this.groupElementTypePk = groupElementTypePk;
    return this;
  }

  /**
   * Get groupElementTypePk
   * @return groupElementTypePk
   */
  @javax.annotation.Nullable
  public UUID getGroupElementTypePk() {
    return groupElementTypePk;
  }

  public void setGroupElementTypePk(UUID groupElementTypePk) {
    this.groupElementTypePk = groupElementTypePk;
  }


  public SlideGroupElementsDetails id(UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }


  public SlideGroupElementsDetails parentGroupElement(SlideGroupElementsDetails parentGroupElement) {
    this.parentGroupElement = parentGroupElement;
    return this;
  }

  /**
   * Get parentGroupElement
   * @return parentGroupElement
   */
  @javax.annotation.Nullable
  public SlideGroupElementsDetails getParentGroupElement() {
    return parentGroupElement;
  }

  public void setParentGroupElement(SlideGroupElementsDetails parentGroupElement) {
    this.parentGroupElement = parentGroupElement;
  }


  public SlideGroupElementsDetails parentGroupElementId(UUID parentGroupElementId) {
    this.parentGroupElementId = parentGroupElementId;
    return this;
  }

  /**
   * Get parentGroupElementId
   * @return parentGroupElementId
   */
  @javax.annotation.Nullable
  public UUID getParentGroupElementId() {
    return parentGroupElementId;
  }

  public void setParentGroupElementId(UUID parentGroupElementId) {
    this.parentGroupElementId = parentGroupElementId;
  }


  public SlideGroupElementsDetails shape(SlideShapesDetails shape) {
    this.shape = shape;
    return this;
  }

  /**
   * Get shape
   * @return shape
   */
  @javax.annotation.Nullable
  public SlideShapesDetails getShape() {
    return shape;
  }

  public void setShape(SlideShapesDetails shape) {
    this.shape = shape;
  }


  public SlideGroupElementsDetails shapeTree(SlideShapeTreesDetails shapeTree) {
    this.shapeTree = shapeTree;
    return this;
  }

  /**
   * Get shapeTree
   * @return shapeTree
   */
  @javax.annotation.Nullable
  public SlideShapeTreesDetails getShapeTree() {
    return shapeTree;
  }

  public void setShapeTree(SlideShapeTreesDetails shapeTree) {
    this.shapeTree = shapeTree;
  }


  public SlideGroupElementsDetails shapeTreeId(UUID shapeTreeId) {
    this.shapeTreeId = shapeTreeId;
    return this;
  }

  /**
   * Get shapeTreeId
   * @return shapeTreeId
   */
  @javax.annotation.Nullable
  public UUID getShapeTreeId() {
    return shapeTreeId;
  }

  public void setShapeTreeId(UUID shapeTreeId) {
    this.shapeTreeId = shapeTreeId;
  }


  public SlideGroupElementsDetails typeInfo(SlideGroupElementTypesDetails typeInfo) {
    this.typeInfo = typeInfo;
    return this;
  }

  /**
   * Get typeInfo
   * @return typeInfo
   */
  @javax.annotation.Nullable
  public SlideGroupElementTypesDetails getTypeInfo() {
    return typeInfo;
  }

  public void setTypeInfo(SlideGroupElementTypesDetails typeInfo) {
    this.typeInfo = typeInfo;
  }


  public SlideGroupElementsDetails ultimateParentShapeTreeId(UUID ultimateParentShapeTreeId) {
    this.ultimateParentShapeTreeId = ultimateParentShapeTreeId;
    return this;
  }

  /**
   * Get ultimateParentShapeTreeId
   * @return ultimateParentShapeTreeId
   */
  @javax.annotation.Nullable
  public UUID getUltimateParentShapeTreeId() {
    return ultimateParentShapeTreeId;
  }

  public void setUltimateParentShapeTreeId(UUID ultimateParentShapeTreeId) {
    this.ultimateParentShapeTreeId = ultimateParentShapeTreeId;
  }


  public SlideGroupElementsDetails userCreated(UUID userCreated) {
    this.userCreated = userCreated;
    return this;
  }

  /**
   * Get userCreated
   * @return userCreated
   */
  @javax.annotation.Nullable
  public UUID getUserCreated() {
    return userCreated;
  }

  public void setUserCreated(UUID userCreated) {
    this.userCreated = userCreated;
  }


  public SlideGroupElementsDetails userModified(UUID userModified) {
    this.userModified = userModified;
    return this;
  }

  /**
   * Get userModified
   * @return userModified
   */
  @javax.annotation.Nullable
  public UUID getUserModified() {
    return userModified;
  }

  public void setUserModified(UUID userModified) {
    this.userModified = userModified;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SlideGroupElementsDetails slideGroupElementsDetails = (SlideGroupElementsDetails) o;
    return Objects.equals(this.childGroupElements, slideGroupElementsDetails.childGroupElements) &&
        Objects.equals(this.connector, slideGroupElementsDetails.connector) &&
        Objects.equals(this.dateCreated, slideGroupElementsDetails.dateCreated) &&
        Objects.equals(this.dateModified, slideGroupElementsDetails.dateModified) &&
        Objects.equals(this.graphic, slideGroupElementsDetails.graphic) &&
        Objects.equals(this.group, slideGroupElementsDetails.group) &&
        Objects.equals(this.groupElementTypeId, slideGroupElementsDetails.groupElementTypeId) &&
        Objects.equals(this.groupElementTypePk, slideGroupElementsDetails.groupElementTypePk) &&
        Objects.equals(this.id, slideGroupElementsDetails.id) &&
        Objects.equals(this.parentGroupElement, slideGroupElementsDetails.parentGroupElement) &&
        Objects.equals(this.parentGroupElementId, slideGroupElementsDetails.parentGroupElementId) &&
        Objects.equals(this.shape, slideGroupElementsDetails.shape) &&
        Objects.equals(this.shapeTree, slideGroupElementsDetails.shapeTree) &&
        Objects.equals(this.shapeTreeId, slideGroupElementsDetails.shapeTreeId) &&
        Objects.equals(this.typeInfo, slideGroupElementsDetails.typeInfo) &&
        Objects.equals(this.ultimateParentShapeTreeId, slideGroupElementsDetails.ultimateParentShapeTreeId) &&
        Objects.equals(this.userCreated, slideGroupElementsDetails.userCreated) &&
        Objects.equals(this.userModified, slideGroupElementsDetails.userModified);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(childGroupElements, connector, dateCreated, dateModified, graphic, group, groupElementTypeId, groupElementTypePk, id, parentGroupElement, parentGroupElementId, shape, shapeTree, shapeTreeId, typeInfo, ultimateParentShapeTreeId, userCreated, userModified);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SlideGroupElementsDetails {\n");
    sb.append("    childGroupElements: ").append(toIndentedString(childGroupElements)).append("\n");
    sb.append("    connector: ").append(toIndentedString(connector)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateModified: ").append(toIndentedString(dateModified)).append("\n");
    sb.append("    graphic: ").append(toIndentedString(graphic)).append("\n");
    sb.append("    group: ").append(toIndentedString(group)).append("\n");
    sb.append("    groupElementTypeId: ").append(toIndentedString(groupElementTypeId)).append("\n");
    sb.append("    groupElementTypePk: ").append(toIndentedString(groupElementTypePk)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    parentGroupElement: ").append(toIndentedString(parentGroupElement)).append("\n");
    sb.append("    parentGroupElementId: ").append(toIndentedString(parentGroupElementId)).append("\n");
    sb.append("    shape: ").append(toIndentedString(shape)).append("\n");
    sb.append("    shapeTree: ").append(toIndentedString(shapeTree)).append("\n");
    sb.append("    shapeTreeId: ").append(toIndentedString(shapeTreeId)).append("\n");
    sb.append("    typeInfo: ").append(toIndentedString(typeInfo)).append("\n");
    sb.append("    ultimateParentShapeTreeId: ").append(toIndentedString(ultimateParentShapeTreeId)).append("\n");
    sb.append("    userCreated: ").append(toIndentedString(userCreated)).append("\n");
    sb.append("    userModified: ").append(toIndentedString(userModified)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("childGroupElements");
    openapiFields.add("connector");
    openapiFields.add("dateCreated");
    openapiFields.add("dateModified");
    openapiFields.add("graphic");
    openapiFields.add("group");
    openapiFields.add("groupElementTypeId");
    openapiFields.add("groupElementTypePk");
    openapiFields.add("id");
    openapiFields.add("parentGroupElement");
    openapiFields.add("parentGroupElementId");
    openapiFields.add("shape");
    openapiFields.add("shapeTree");
    openapiFields.add("shapeTreeId");
    openapiFields.add("typeInfo");
    openapiFields.add("ultimateParentShapeTreeId");
    openapiFields.add("userCreated");
    openapiFields.add("userModified");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SlideGroupElementsDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SlideGroupElementsDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SlideGroupElementsDetails is not found in the empty JSON string", SlideGroupElementsDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SlideGroupElementsDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SlideGroupElementsDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("childGroupElements") != null && !jsonObj.get("childGroupElements").isJsonNull()) {
        JsonArray jsonArraychildGroupElements = jsonObj.getAsJsonArray("childGroupElements");
        if (jsonArraychildGroupElements != null) {
          // ensure the json data is an array
          if (!jsonObj.get("childGroupElements").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `childGroupElements` to be an array in the JSON string but got `%s`", jsonObj.get("childGroupElements").toString()));
          }

          // validate the optional field `childGroupElements` (array)
          for (int i = 0; i < jsonArraychildGroupElements.size(); i++) {
            SlideGroupElementsDetails.validateJsonElement(jsonArraychildGroupElements.get(i));
          };
        }
      }
      // validate the optional field `connector`
      if (jsonObj.get("connector") != null && !jsonObj.get("connector").isJsonNull()) {
        SlideConnectorDetails.validateJsonElement(jsonObj.get("connector"));
      }
      // validate the optional field `graphic`
      if (jsonObj.get("graphic") != null && !jsonObj.get("graphic").isJsonNull()) {
        SlideGraphicsDetails.validateJsonElement(jsonObj.get("graphic"));
      }
      // validate the optional field `group`
      if (jsonObj.get("group") != null && !jsonObj.get("group").isJsonNull()) {
        SlideGroupsDetails.validateJsonElement(jsonObj.get("group"));
      }
      if ((jsonObj.get("groupElementTypePk") != null && !jsonObj.get("groupElementTypePk").isJsonNull()) && !jsonObj.get("groupElementTypePk").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupElementTypePk` to be a primitive type in the JSON string but got `%s`", jsonObj.get("groupElementTypePk").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `parentGroupElement`
      if (jsonObj.get("parentGroupElement") != null && !jsonObj.get("parentGroupElement").isJsonNull()) {
        SlideGroupElementsDetails.validateJsonElement(jsonObj.get("parentGroupElement"));
      }
      if ((jsonObj.get("parentGroupElementId") != null && !jsonObj.get("parentGroupElementId").isJsonNull()) && !jsonObj.get("parentGroupElementId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentGroupElementId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentGroupElementId").toString()));
      }
      // validate the optional field `shape`
      if (jsonObj.get("shape") != null && !jsonObj.get("shape").isJsonNull()) {
        SlideShapesDetails.validateJsonElement(jsonObj.get("shape"));
      }
      // validate the optional field `shapeTree`
      if (jsonObj.get("shapeTree") != null && !jsonObj.get("shapeTree").isJsonNull()) {
        SlideShapeTreesDetails.validateJsonElement(jsonObj.get("shapeTree"));
      }
      if ((jsonObj.get("shapeTreeId") != null && !jsonObj.get("shapeTreeId").isJsonNull()) && !jsonObj.get("shapeTreeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shapeTreeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shapeTreeId").toString()));
      }
      // validate the optional field `typeInfo`
      if (jsonObj.get("typeInfo") != null && !jsonObj.get("typeInfo").isJsonNull()) {
        SlideGroupElementTypesDetails.validateJsonElement(jsonObj.get("typeInfo"));
      }
      if ((jsonObj.get("ultimateParentShapeTreeId") != null && !jsonObj.get("ultimateParentShapeTreeId").isJsonNull()) && !jsonObj.get("ultimateParentShapeTreeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ultimateParentShapeTreeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ultimateParentShapeTreeId").toString()));
      }
      if ((jsonObj.get("userCreated") != null && !jsonObj.get("userCreated").isJsonNull()) && !jsonObj.get("userCreated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userCreated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userCreated").toString()));
      }
      if ((jsonObj.get("userModified") != null && !jsonObj.get("userModified").isJsonNull()) && !jsonObj.get("userModified").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userModified` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userModified").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SlideGroupElementsDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SlideGroupElementsDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SlideGroupElementsDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SlideGroupElementsDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<SlideGroupElementsDetails>() {
           @Override
           public void write(JsonWriter out, SlideGroupElementsDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SlideGroupElementsDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SlideGroupElementsDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SlideGroupElementsDetails
   * @throws IOException if the JSON string is invalid with respect to SlideGroupElementsDetails
   */
  public static SlideGroupElementsDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SlideGroupElementsDetails.class);
  }

  /**
   * Convert an instance of SlideGroupElementsDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

