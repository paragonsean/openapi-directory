/*
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.ChartChartsDetails;
import org.openapitools.client.model.SharedTextContainerDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ChartAxesDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:20.731713-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ChartAxesDetails {
  public static final String SERIALIZED_NAME_AXIS_DATA_TYPE_ID = "axisDataTypeId";
  @SerializedName(SERIALIZED_NAME_AXIS_DATA_TYPE_ID)
  private Integer axisDataTypeId;

  public static final String SERIALIZED_NAME_CHART = "chart";
  @SerializedName(SERIALIZED_NAME_CHART)
  private ChartChartsDetails chart;

  public static final String SERIALIZED_NAME_CHARTS_ID = "chartsId";
  @SerializedName(SERIALIZED_NAME_CHARTS_ID)
  private UUID chartsId;

  public static final String SERIALIZED_NAME_DATE_CREATED = "dateCreated";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private OffsetDateTime dateCreated;

  public static final String SERIALIZED_NAME_DATE_MODIFIED = "dateModified";
  @SerializedName(SERIALIZED_NAME_DATE_MODIFIED)
  private OffsetDateTime dateModified;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_OOXML_ID = "ooxmlId";
  @SerializedName(SERIALIZED_NAME_OOXML_ID)
  private Integer ooxmlId;

  public static final String SERIALIZED_NAME_TITLE_TEXT_CONTAINER = "titleTextContainer";
  @SerializedName(SERIALIZED_NAME_TITLE_TEXT_CONTAINER)
  private SharedTextContainerDetails titleTextContainer;

  public static final String SERIALIZED_NAME_USER_CREATED = "userCreated";
  @SerializedName(SERIALIZED_NAME_USER_CREATED)
  private UUID userCreated;

  public static final String SERIALIZED_NAME_USER_MODIFIED = "userModified";
  @SerializedName(SERIALIZED_NAME_USER_MODIFIED)
  private UUID userModified;

  public ChartAxesDetails() {
  }

  public ChartAxesDetails axisDataTypeId(Integer axisDataTypeId) {
    this.axisDataTypeId = axisDataTypeId;
    return this;
  }

  /**
   * Get axisDataTypeId
   * @return axisDataTypeId
   */
  @javax.annotation.Nullable
  public Integer getAxisDataTypeId() {
    return axisDataTypeId;
  }

  public void setAxisDataTypeId(Integer axisDataTypeId) {
    this.axisDataTypeId = axisDataTypeId;
  }


  public ChartAxesDetails chart(ChartChartsDetails chart) {
    this.chart = chart;
    return this;
  }

  /**
   * Get chart
   * @return chart
   */
  @javax.annotation.Nullable
  public ChartChartsDetails getChart() {
    return chart;
  }

  public void setChart(ChartChartsDetails chart) {
    this.chart = chart;
  }


  public ChartAxesDetails chartsId(UUID chartsId) {
    this.chartsId = chartsId;
    return this;
  }

  /**
   * Get chartsId
   * @return chartsId
   */
  @javax.annotation.Nullable
  public UUID getChartsId() {
    return chartsId;
  }

  public void setChartsId(UUID chartsId) {
    this.chartsId = chartsId;
  }


  public ChartAxesDetails dateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
    return this;
  }

  /**
   * Get dateCreated
   * @return dateCreated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }

  public void setDateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
  }


  public ChartAxesDetails dateModified(OffsetDateTime dateModified) {
    this.dateModified = dateModified;
    return this;
  }

  /**
   * Get dateModified
   * @return dateModified
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateModified() {
    return dateModified;
  }

  public void setDateModified(OffsetDateTime dateModified) {
    this.dateModified = dateModified;
  }


  public ChartAxesDetails id(UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }


  public ChartAxesDetails ooxmlId(Integer ooxmlId) {
    this.ooxmlId = ooxmlId;
    return this;
  }

  /**
   * Get ooxmlId
   * @return ooxmlId
   */
  @javax.annotation.Nullable
  public Integer getOoxmlId() {
    return ooxmlId;
  }

  public void setOoxmlId(Integer ooxmlId) {
    this.ooxmlId = ooxmlId;
  }


  public ChartAxesDetails titleTextContainer(SharedTextContainerDetails titleTextContainer) {
    this.titleTextContainer = titleTextContainer;
    return this;
  }

  /**
   * Get titleTextContainer
   * @return titleTextContainer
   */
  @javax.annotation.Nullable
  public SharedTextContainerDetails getTitleTextContainer() {
    return titleTextContainer;
  }

  public void setTitleTextContainer(SharedTextContainerDetails titleTextContainer) {
    this.titleTextContainer = titleTextContainer;
  }


  public ChartAxesDetails userCreated(UUID userCreated) {
    this.userCreated = userCreated;
    return this;
  }

  /**
   * Get userCreated
   * @return userCreated
   */
  @javax.annotation.Nullable
  public UUID getUserCreated() {
    return userCreated;
  }

  public void setUserCreated(UUID userCreated) {
    this.userCreated = userCreated;
  }


  public ChartAxesDetails userModified(UUID userModified) {
    this.userModified = userModified;
    return this;
  }

  /**
   * Get userModified
   * @return userModified
   */
  @javax.annotation.Nullable
  public UUID getUserModified() {
    return userModified;
  }

  public void setUserModified(UUID userModified) {
    this.userModified = userModified;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChartAxesDetails chartAxesDetails = (ChartAxesDetails) o;
    return Objects.equals(this.axisDataTypeId, chartAxesDetails.axisDataTypeId) &&
        Objects.equals(this.chart, chartAxesDetails.chart) &&
        Objects.equals(this.chartsId, chartAxesDetails.chartsId) &&
        Objects.equals(this.dateCreated, chartAxesDetails.dateCreated) &&
        Objects.equals(this.dateModified, chartAxesDetails.dateModified) &&
        Objects.equals(this.id, chartAxesDetails.id) &&
        Objects.equals(this.ooxmlId, chartAxesDetails.ooxmlId) &&
        Objects.equals(this.titleTextContainer, chartAxesDetails.titleTextContainer) &&
        Objects.equals(this.userCreated, chartAxesDetails.userCreated) &&
        Objects.equals(this.userModified, chartAxesDetails.userModified);
  }

  @Override
  public int hashCode() {
    return Objects.hash(axisDataTypeId, chart, chartsId, dateCreated, dateModified, id, ooxmlId, titleTextContainer, userCreated, userModified);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChartAxesDetails {\n");
    sb.append("    axisDataTypeId: ").append(toIndentedString(axisDataTypeId)).append("\n");
    sb.append("    chart: ").append(toIndentedString(chart)).append("\n");
    sb.append("    chartsId: ").append(toIndentedString(chartsId)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateModified: ").append(toIndentedString(dateModified)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    ooxmlId: ").append(toIndentedString(ooxmlId)).append("\n");
    sb.append("    titleTextContainer: ").append(toIndentedString(titleTextContainer)).append("\n");
    sb.append("    userCreated: ").append(toIndentedString(userCreated)).append("\n");
    sb.append("    userModified: ").append(toIndentedString(userModified)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("axisDataTypeId");
    openapiFields.add("chart");
    openapiFields.add("chartsId");
    openapiFields.add("dateCreated");
    openapiFields.add("dateModified");
    openapiFields.add("id");
    openapiFields.add("ooxmlId");
    openapiFields.add("titleTextContainer");
    openapiFields.add("userCreated");
    openapiFields.add("userModified");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ChartAxesDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ChartAxesDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChartAxesDetails is not found in the empty JSON string", ChartAxesDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ChartAxesDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChartAxesDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `chart`
      if (jsonObj.get("chart") != null && !jsonObj.get("chart").isJsonNull()) {
        ChartChartsDetails.validateJsonElement(jsonObj.get("chart"));
      }
      if ((jsonObj.get("chartsId") != null && !jsonObj.get("chartsId").isJsonNull()) && !jsonObj.get("chartsId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chartsId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chartsId").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `titleTextContainer`
      if (jsonObj.get("titleTextContainer") != null && !jsonObj.get("titleTextContainer").isJsonNull()) {
        SharedTextContainerDetails.validateJsonElement(jsonObj.get("titleTextContainer"));
      }
      if ((jsonObj.get("userCreated") != null && !jsonObj.get("userCreated").isJsonNull()) && !jsonObj.get("userCreated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userCreated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userCreated").toString()));
      }
      if ((jsonObj.get("userModified") != null && !jsonObj.get("userModified").isJsonNull()) && !jsonObj.get("userModified").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userModified` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userModified").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChartAxesDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChartAxesDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChartAxesDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChartAxesDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<ChartAxesDetails>() {
           @Override
           public void write(JsonWriter out, ChartAxesDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChartAxesDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ChartAxesDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ChartAxesDetails
   * @throws IOException if the JSON string is invalid with respect to ChartAxesDetails
   */
  public static ChartAxesDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChartAxesDetails.class);
  }

  /**
   * Convert an instance of ChartAxesDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

