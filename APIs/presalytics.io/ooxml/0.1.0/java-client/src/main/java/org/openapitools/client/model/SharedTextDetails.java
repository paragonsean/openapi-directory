/*
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.SharedParagraphDetails;
import org.openapitools.client.model.SharedSolidFillsDetails;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SharedTextDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:20.731713-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SharedTextDetails {
  public static final String SERIALIZED_NAME_COLOR_SOLID_FILL = "colorSolidFill";
  @SerializedName(SERIALIZED_NAME_COLOR_SOLID_FILL)
  private SharedSolidFillsDetails colorSolidFill;

  public static final String SERIALIZED_NAME_COLOR_SOLID_FILLS_ID = "colorSolidFillsId";
  @SerializedName(SERIALIZED_NAME_COLOR_SOLID_FILLS_ID)
  private UUID colorSolidFillsId;

  public static final String SERIALIZED_NAME_DATE_CREATED = "dateCreated";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private OffsetDateTime dateCreated;

  public static final String SERIALIZED_NAME_DATE_MODIFIED = "dateModified";
  @SerializedName(SERIALIZED_NAME_DATE_MODIFIED)
  private OffsetDateTime dateModified;

  public static final String SERIALIZED_NAME_FONT = "font";
  @SerializedName(SERIALIZED_NAME_FONT)
  private String font;

  public static final String SERIALIZED_NAME_FONT_SIZE = "fontSize";
  @SerializedName(SERIALIZED_NAME_FONT_SIZE)
  private Integer fontSize;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_IS_BOLD = "isBold";
  @SerializedName(SERIALIZED_NAME_IS_BOLD)
  private Boolean isBold;

  public static final String SERIALIZED_NAME_IS_ITALIC = "isItalic";
  @SerializedName(SERIALIZED_NAME_IS_ITALIC)
  private Boolean isItalic;

  public static final String SERIALIZED_NAME_IS_THEME_FONT = "isThemeFont";
  @SerializedName(SERIALIZED_NAME_IS_THEME_FONT)
  private Boolean isThemeFont;

  public static final String SERIALIZED_NAME_IS_UNDERLINE = "isUnderline";
  @SerializedName(SERIALIZED_NAME_IS_UNDERLINE)
  private Boolean isUnderline;

  public static final String SERIALIZED_NAME_PARAGRAPH = "paragraph";
  @SerializedName(SERIALIZED_NAME_PARAGRAPH)
  private SharedParagraphDetails paragraph;

  public static final String SERIALIZED_NAME_PARAGRAPH_ID = "paragraphId";
  @SerializedName(SERIALIZED_NAME_PARAGRAPH_ID)
  private UUID paragraphId;

  public static final String SERIALIZED_NAME_RAW_TEXT = "rawText";
  @SerializedName(SERIALIZED_NAME_RAW_TEXT)
  private String rawText;

  public static final String SERIALIZED_NAME_SEQUENCE = "sequence";
  @SerializedName(SERIALIZED_NAME_SEQUENCE)
  private Integer sequence;

  public static final String SERIALIZED_NAME_USER_CREATED = "userCreated";
  @SerializedName(SERIALIZED_NAME_USER_CREATED)
  private UUID userCreated;

  public static final String SERIALIZED_NAME_USER_MODIFIED = "userModified";
  @SerializedName(SERIALIZED_NAME_USER_MODIFIED)
  private UUID userModified;

  public SharedTextDetails() {
  }

  public SharedTextDetails colorSolidFill(SharedSolidFillsDetails colorSolidFill) {
    this.colorSolidFill = colorSolidFill;
    return this;
  }

  /**
   * Get colorSolidFill
   * @return colorSolidFill
   */
  @javax.annotation.Nullable
  public SharedSolidFillsDetails getColorSolidFill() {
    return colorSolidFill;
  }

  public void setColorSolidFill(SharedSolidFillsDetails colorSolidFill) {
    this.colorSolidFill = colorSolidFill;
  }


  public SharedTextDetails colorSolidFillsId(UUID colorSolidFillsId) {
    this.colorSolidFillsId = colorSolidFillsId;
    return this;
  }

  /**
   * Get colorSolidFillsId
   * @return colorSolidFillsId
   */
  @javax.annotation.Nullable
  public UUID getColorSolidFillsId() {
    return colorSolidFillsId;
  }

  public void setColorSolidFillsId(UUID colorSolidFillsId) {
    this.colorSolidFillsId = colorSolidFillsId;
  }


  public SharedTextDetails dateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
    return this;
  }

  /**
   * Get dateCreated
   * @return dateCreated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }

  public void setDateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
  }


  public SharedTextDetails dateModified(OffsetDateTime dateModified) {
    this.dateModified = dateModified;
    return this;
  }

  /**
   * Get dateModified
   * @return dateModified
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateModified() {
    return dateModified;
  }

  public void setDateModified(OffsetDateTime dateModified) {
    this.dateModified = dateModified;
  }


  public SharedTextDetails font(String font) {
    this.font = font;
    return this;
  }

  /**
   * Get font
   * @return font
   */
  @javax.annotation.Nullable
  public String getFont() {
    return font;
  }

  public void setFont(String font) {
    this.font = font;
  }


  public SharedTextDetails fontSize(Integer fontSize) {
    this.fontSize = fontSize;
    return this;
  }

  /**
   * Get fontSize
   * @return fontSize
   */
  @javax.annotation.Nullable
  public Integer getFontSize() {
    return fontSize;
  }

  public void setFontSize(Integer fontSize) {
    this.fontSize = fontSize;
  }


  public SharedTextDetails id(UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }


  public SharedTextDetails isBold(Boolean isBold) {
    this.isBold = isBold;
    return this;
  }

  /**
   * Get isBold
   * @return isBold
   */
  @javax.annotation.Nullable
  public Boolean getIsBold() {
    return isBold;
  }

  public void setIsBold(Boolean isBold) {
    this.isBold = isBold;
  }


  public SharedTextDetails isItalic(Boolean isItalic) {
    this.isItalic = isItalic;
    return this;
  }

  /**
   * Get isItalic
   * @return isItalic
   */
  @javax.annotation.Nullable
  public Boolean getIsItalic() {
    return isItalic;
  }

  public void setIsItalic(Boolean isItalic) {
    this.isItalic = isItalic;
  }


  public SharedTextDetails isThemeFont(Boolean isThemeFont) {
    this.isThemeFont = isThemeFont;
    return this;
  }

  /**
   * Get isThemeFont
   * @return isThemeFont
   */
  @javax.annotation.Nullable
  public Boolean getIsThemeFont() {
    return isThemeFont;
  }

  public void setIsThemeFont(Boolean isThemeFont) {
    this.isThemeFont = isThemeFont;
  }


  public SharedTextDetails isUnderline(Boolean isUnderline) {
    this.isUnderline = isUnderline;
    return this;
  }

  /**
   * Get isUnderline
   * @return isUnderline
   */
  @javax.annotation.Nullable
  public Boolean getIsUnderline() {
    return isUnderline;
  }

  public void setIsUnderline(Boolean isUnderline) {
    this.isUnderline = isUnderline;
  }


  public SharedTextDetails paragraph(SharedParagraphDetails paragraph) {
    this.paragraph = paragraph;
    return this;
  }

  /**
   * Get paragraph
   * @return paragraph
   */
  @javax.annotation.Nullable
  public SharedParagraphDetails getParagraph() {
    return paragraph;
  }

  public void setParagraph(SharedParagraphDetails paragraph) {
    this.paragraph = paragraph;
  }


  public SharedTextDetails paragraphId(UUID paragraphId) {
    this.paragraphId = paragraphId;
    return this;
  }

  /**
   * Get paragraphId
   * @return paragraphId
   */
  @javax.annotation.Nullable
  public UUID getParagraphId() {
    return paragraphId;
  }

  public void setParagraphId(UUID paragraphId) {
    this.paragraphId = paragraphId;
  }


  public SharedTextDetails rawText(String rawText) {
    this.rawText = rawText;
    return this;
  }

  /**
   * Get rawText
   * @return rawText
   */
  @javax.annotation.Nullable
  public String getRawText() {
    return rawText;
  }

  public void setRawText(String rawText) {
    this.rawText = rawText;
  }


  public SharedTextDetails sequence(Integer sequence) {
    this.sequence = sequence;
    return this;
  }

  /**
   * Get sequence
   * @return sequence
   */
  @javax.annotation.Nullable
  public Integer getSequence() {
    return sequence;
  }

  public void setSequence(Integer sequence) {
    this.sequence = sequence;
  }


  public SharedTextDetails userCreated(UUID userCreated) {
    this.userCreated = userCreated;
    return this;
  }

  /**
   * Get userCreated
   * @return userCreated
   */
  @javax.annotation.Nullable
  public UUID getUserCreated() {
    return userCreated;
  }

  public void setUserCreated(UUID userCreated) {
    this.userCreated = userCreated;
  }


  public SharedTextDetails userModified(UUID userModified) {
    this.userModified = userModified;
    return this;
  }

  /**
   * Get userModified
   * @return userModified
   */
  @javax.annotation.Nullable
  public UUID getUserModified() {
    return userModified;
  }

  public void setUserModified(UUID userModified) {
    this.userModified = userModified;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SharedTextDetails sharedTextDetails = (SharedTextDetails) o;
    return Objects.equals(this.colorSolidFill, sharedTextDetails.colorSolidFill) &&
        Objects.equals(this.colorSolidFillsId, sharedTextDetails.colorSolidFillsId) &&
        Objects.equals(this.dateCreated, sharedTextDetails.dateCreated) &&
        Objects.equals(this.dateModified, sharedTextDetails.dateModified) &&
        Objects.equals(this.font, sharedTextDetails.font) &&
        Objects.equals(this.fontSize, sharedTextDetails.fontSize) &&
        Objects.equals(this.id, sharedTextDetails.id) &&
        Objects.equals(this.isBold, sharedTextDetails.isBold) &&
        Objects.equals(this.isItalic, sharedTextDetails.isItalic) &&
        Objects.equals(this.isThemeFont, sharedTextDetails.isThemeFont) &&
        Objects.equals(this.isUnderline, sharedTextDetails.isUnderline) &&
        Objects.equals(this.paragraph, sharedTextDetails.paragraph) &&
        Objects.equals(this.paragraphId, sharedTextDetails.paragraphId) &&
        Objects.equals(this.rawText, sharedTextDetails.rawText) &&
        Objects.equals(this.sequence, sharedTextDetails.sequence) &&
        Objects.equals(this.userCreated, sharedTextDetails.userCreated) &&
        Objects.equals(this.userModified, sharedTextDetails.userModified);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(colorSolidFill, colorSolidFillsId, dateCreated, dateModified, font, fontSize, id, isBold, isItalic, isThemeFont, isUnderline, paragraph, paragraphId, rawText, sequence, userCreated, userModified);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SharedTextDetails {\n");
    sb.append("    colorSolidFill: ").append(toIndentedString(colorSolidFill)).append("\n");
    sb.append("    colorSolidFillsId: ").append(toIndentedString(colorSolidFillsId)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateModified: ").append(toIndentedString(dateModified)).append("\n");
    sb.append("    font: ").append(toIndentedString(font)).append("\n");
    sb.append("    fontSize: ").append(toIndentedString(fontSize)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isBold: ").append(toIndentedString(isBold)).append("\n");
    sb.append("    isItalic: ").append(toIndentedString(isItalic)).append("\n");
    sb.append("    isThemeFont: ").append(toIndentedString(isThemeFont)).append("\n");
    sb.append("    isUnderline: ").append(toIndentedString(isUnderline)).append("\n");
    sb.append("    paragraph: ").append(toIndentedString(paragraph)).append("\n");
    sb.append("    paragraphId: ").append(toIndentedString(paragraphId)).append("\n");
    sb.append("    rawText: ").append(toIndentedString(rawText)).append("\n");
    sb.append("    sequence: ").append(toIndentedString(sequence)).append("\n");
    sb.append("    userCreated: ").append(toIndentedString(userCreated)).append("\n");
    sb.append("    userModified: ").append(toIndentedString(userModified)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("colorSolidFill");
    openapiFields.add("colorSolidFillsId");
    openapiFields.add("dateCreated");
    openapiFields.add("dateModified");
    openapiFields.add("font");
    openapiFields.add("fontSize");
    openapiFields.add("id");
    openapiFields.add("isBold");
    openapiFields.add("isItalic");
    openapiFields.add("isThemeFont");
    openapiFields.add("isUnderline");
    openapiFields.add("paragraph");
    openapiFields.add("paragraphId");
    openapiFields.add("rawText");
    openapiFields.add("sequence");
    openapiFields.add("userCreated");
    openapiFields.add("userModified");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SharedTextDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SharedTextDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SharedTextDetails is not found in the empty JSON string", SharedTextDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SharedTextDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SharedTextDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `colorSolidFill`
      if (jsonObj.get("colorSolidFill") != null && !jsonObj.get("colorSolidFill").isJsonNull()) {
        SharedSolidFillsDetails.validateJsonElement(jsonObj.get("colorSolidFill"));
      }
      if ((jsonObj.get("colorSolidFillsId") != null && !jsonObj.get("colorSolidFillsId").isJsonNull()) && !jsonObj.get("colorSolidFillsId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `colorSolidFillsId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("colorSolidFillsId").toString()));
      }
      if ((jsonObj.get("font") != null && !jsonObj.get("font").isJsonNull()) && !jsonObj.get("font").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `font` to be a primitive type in the JSON string but got `%s`", jsonObj.get("font").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `paragraph`
      if (jsonObj.get("paragraph") != null && !jsonObj.get("paragraph").isJsonNull()) {
        SharedParagraphDetails.validateJsonElement(jsonObj.get("paragraph"));
      }
      if ((jsonObj.get("paragraphId") != null && !jsonObj.get("paragraphId").isJsonNull()) && !jsonObj.get("paragraphId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paragraphId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paragraphId").toString()));
      }
      if ((jsonObj.get("rawText") != null && !jsonObj.get("rawText").isJsonNull()) && !jsonObj.get("rawText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rawText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rawText").toString()));
      }
      if ((jsonObj.get("userCreated") != null && !jsonObj.get("userCreated").isJsonNull()) && !jsonObj.get("userCreated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userCreated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userCreated").toString()));
      }
      if ((jsonObj.get("userModified") != null && !jsonObj.get("userModified").isJsonNull()) && !jsonObj.get("userModified").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userModified` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userModified").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SharedTextDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SharedTextDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SharedTextDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SharedTextDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<SharedTextDetails>() {
           @Override
           public void write(JsonWriter out, SharedTextDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SharedTextDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SharedTextDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SharedTextDetails
   * @throws IOException if the JSON string is invalid with respect to SharedTextDetails
   */
  public static SharedTextDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SharedTextDetails.class);
  }

  /**
   * Convert an instance of SharedTextDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

