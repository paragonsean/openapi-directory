/*
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.SharedEffectAttributesDetails;
import org.openapitools.client.model.SharedGradientFillsDetails;
import org.openapitools.client.model.SharedImageFillsDetails;
import org.openapitools.client.model.SharedSolidFillsDetails;
import org.openapitools.client.model.SlideConnectorDetails;
import org.openapitools.client.model.SlideShapesDetails;
import org.openapitools.client.model.TableCellsDetails;
import org.openapitools.client.model.ThemeBackgroundFillsDetails;
import org.openapitools.client.model.ThemeFillsDetails;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SharedFillMapDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:20.731713-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SharedFillMapDetails {
  public static final String SERIALIZED_NAME_CONNECTOR = "connector";
  @SerializedName(SERIALIZED_NAME_CONNECTOR)
  private SlideConnectorDetails connector;

  public static final String SERIALIZED_NAME_CONNECTOR_ID = "connectorId";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_ID)
  private UUID connectorId;

  public static final String SERIALIZED_NAME_DATE_CREATED = "dateCreated";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private OffsetDateTime dateCreated;

  public static final String SERIALIZED_NAME_DATE_MODIFIED = "dateModified";
  @SerializedName(SERIALIZED_NAME_DATE_MODIFIED)
  private OffsetDateTime dateModified;

  public static final String SERIALIZED_NAME_EFFECT_ATTRIBUTE = "effectAttribute";
  @SerializedName(SERIALIZED_NAME_EFFECT_ATTRIBUTE)
  private SharedEffectAttributesDetails effectAttribute;

  public static final String SERIALIZED_NAME_EFFECT_ATTRIBUTE_ID = "effectAttributeId";
  @SerializedName(SERIALIZED_NAME_EFFECT_ATTRIBUTE_ID)
  private UUID effectAttributeId;

  public static final String SERIALIZED_NAME_FILL_TYPE_ID = "fillTypeId";
  @SerializedName(SERIALIZED_NAME_FILL_TYPE_ID)
  private Integer fillTypeId;

  public static final String SERIALIZED_NAME_GRADIENT_FILL = "gradientFill";
  @SerializedName(SERIALIZED_NAME_GRADIENT_FILL)
  private SharedGradientFillsDetails gradientFill;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_IMAGE_FILL = "imageFill";
  @SerializedName(SERIALIZED_NAME_IMAGE_FILL)
  private SharedImageFillsDetails imageFill;

  public static final String SERIALIZED_NAME_SHAPE = "shape";
  @SerializedName(SERIALIZED_NAME_SHAPE)
  private SlideShapesDetails shape;

  public static final String SERIALIZED_NAME_SHAPE_ID = "shapeId";
  @SerializedName(SERIALIZED_NAME_SHAPE_ID)
  private UUID shapeId;

  public static final String SERIALIZED_NAME_SOLID_FILL = "solidFill";
  @SerializedName(SERIALIZED_NAME_SOLID_FILL)
  private SharedSolidFillsDetails solidFill;

  public static final String SERIALIZED_NAME_TABLE_CELL = "tableCell";
  @SerializedName(SERIALIZED_NAME_TABLE_CELL)
  private TableCellsDetails tableCell;

  public static final String SERIALIZED_NAME_TABLE_CELL_ID = "tableCellId";
  @SerializedName(SERIALIZED_NAME_TABLE_CELL_ID)
  private UUID tableCellId;

  public static final String SERIALIZED_NAME_THEME_BACKGROUND_FILL = "themeBackgroundFill";
  @SerializedName(SERIALIZED_NAME_THEME_BACKGROUND_FILL)
  private ThemeBackgroundFillsDetails themeBackgroundFill;

  public static final String SERIALIZED_NAME_THEME_BACKGROUND_FILL_ID = "themeBackgroundFillId";
  @SerializedName(SERIALIZED_NAME_THEME_BACKGROUND_FILL_ID)
  private UUID themeBackgroundFillId;

  public static final String SERIALIZED_NAME_THEME_FILL = "themeFill";
  @SerializedName(SERIALIZED_NAME_THEME_FILL)
  private ThemeFillsDetails themeFill;

  public static final String SERIALIZED_NAME_THEME_FILL_ID = "themeFillId";
  @SerializedName(SERIALIZED_NAME_THEME_FILL_ID)
  private UUID themeFillId;

  public static final String SERIALIZED_NAME_USER_CREATED = "userCreated";
  @SerializedName(SERIALIZED_NAME_USER_CREATED)
  private UUID userCreated;

  public static final String SERIALIZED_NAME_USER_MODIFIED = "userModified";
  @SerializedName(SERIALIZED_NAME_USER_MODIFIED)
  private UUID userModified;

  public SharedFillMapDetails() {
  }

  public SharedFillMapDetails connector(SlideConnectorDetails connector) {
    this.connector = connector;
    return this;
  }

  /**
   * Get connector
   * @return connector
   */
  @javax.annotation.Nullable
  public SlideConnectorDetails getConnector() {
    return connector;
  }

  public void setConnector(SlideConnectorDetails connector) {
    this.connector = connector;
  }


  public SharedFillMapDetails connectorId(UUID connectorId) {
    this.connectorId = connectorId;
    return this;
  }

  /**
   * Get connectorId
   * @return connectorId
   */
  @javax.annotation.Nullable
  public UUID getConnectorId() {
    return connectorId;
  }

  public void setConnectorId(UUID connectorId) {
    this.connectorId = connectorId;
  }


  public SharedFillMapDetails dateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
    return this;
  }

  /**
   * Get dateCreated
   * @return dateCreated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }

  public void setDateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
  }


  public SharedFillMapDetails dateModified(OffsetDateTime dateModified) {
    this.dateModified = dateModified;
    return this;
  }

  /**
   * Get dateModified
   * @return dateModified
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateModified() {
    return dateModified;
  }

  public void setDateModified(OffsetDateTime dateModified) {
    this.dateModified = dateModified;
  }


  public SharedFillMapDetails effectAttribute(SharedEffectAttributesDetails effectAttribute) {
    this.effectAttribute = effectAttribute;
    return this;
  }

  /**
   * Get effectAttribute
   * @return effectAttribute
   */
  @javax.annotation.Nullable
  public SharedEffectAttributesDetails getEffectAttribute() {
    return effectAttribute;
  }

  public void setEffectAttribute(SharedEffectAttributesDetails effectAttribute) {
    this.effectAttribute = effectAttribute;
  }


  public SharedFillMapDetails effectAttributeId(UUID effectAttributeId) {
    this.effectAttributeId = effectAttributeId;
    return this;
  }

  /**
   * Get effectAttributeId
   * @return effectAttributeId
   */
  @javax.annotation.Nullable
  public UUID getEffectAttributeId() {
    return effectAttributeId;
  }

  public void setEffectAttributeId(UUID effectAttributeId) {
    this.effectAttributeId = effectAttributeId;
  }


  public SharedFillMapDetails fillTypeId(Integer fillTypeId) {
    this.fillTypeId = fillTypeId;
    return this;
  }

  /**
   * Get fillTypeId
   * @return fillTypeId
   */
  @javax.annotation.Nullable
  public Integer getFillTypeId() {
    return fillTypeId;
  }

  public void setFillTypeId(Integer fillTypeId) {
    this.fillTypeId = fillTypeId;
  }


  public SharedFillMapDetails gradientFill(SharedGradientFillsDetails gradientFill) {
    this.gradientFill = gradientFill;
    return this;
  }

  /**
   * Get gradientFill
   * @return gradientFill
   */
  @javax.annotation.Nullable
  public SharedGradientFillsDetails getGradientFill() {
    return gradientFill;
  }

  public void setGradientFill(SharedGradientFillsDetails gradientFill) {
    this.gradientFill = gradientFill;
  }


  public SharedFillMapDetails id(UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }


  public SharedFillMapDetails imageFill(SharedImageFillsDetails imageFill) {
    this.imageFill = imageFill;
    return this;
  }

  /**
   * Get imageFill
   * @return imageFill
   */
  @javax.annotation.Nullable
  public SharedImageFillsDetails getImageFill() {
    return imageFill;
  }

  public void setImageFill(SharedImageFillsDetails imageFill) {
    this.imageFill = imageFill;
  }


  public SharedFillMapDetails shape(SlideShapesDetails shape) {
    this.shape = shape;
    return this;
  }

  /**
   * Get shape
   * @return shape
   */
  @javax.annotation.Nullable
  public SlideShapesDetails getShape() {
    return shape;
  }

  public void setShape(SlideShapesDetails shape) {
    this.shape = shape;
  }


  public SharedFillMapDetails shapeId(UUID shapeId) {
    this.shapeId = shapeId;
    return this;
  }

  /**
   * Get shapeId
   * @return shapeId
   */
  @javax.annotation.Nullable
  public UUID getShapeId() {
    return shapeId;
  }

  public void setShapeId(UUID shapeId) {
    this.shapeId = shapeId;
  }


  public SharedFillMapDetails solidFill(SharedSolidFillsDetails solidFill) {
    this.solidFill = solidFill;
    return this;
  }

  /**
   * Get solidFill
   * @return solidFill
   */
  @javax.annotation.Nullable
  public SharedSolidFillsDetails getSolidFill() {
    return solidFill;
  }

  public void setSolidFill(SharedSolidFillsDetails solidFill) {
    this.solidFill = solidFill;
  }


  public SharedFillMapDetails tableCell(TableCellsDetails tableCell) {
    this.tableCell = tableCell;
    return this;
  }

  /**
   * Get tableCell
   * @return tableCell
   */
  @javax.annotation.Nullable
  public TableCellsDetails getTableCell() {
    return tableCell;
  }

  public void setTableCell(TableCellsDetails tableCell) {
    this.tableCell = tableCell;
  }


  public SharedFillMapDetails tableCellId(UUID tableCellId) {
    this.tableCellId = tableCellId;
    return this;
  }

  /**
   * Get tableCellId
   * @return tableCellId
   */
  @javax.annotation.Nullable
  public UUID getTableCellId() {
    return tableCellId;
  }

  public void setTableCellId(UUID tableCellId) {
    this.tableCellId = tableCellId;
  }


  public SharedFillMapDetails themeBackgroundFill(ThemeBackgroundFillsDetails themeBackgroundFill) {
    this.themeBackgroundFill = themeBackgroundFill;
    return this;
  }

  /**
   * Get themeBackgroundFill
   * @return themeBackgroundFill
   */
  @javax.annotation.Nullable
  public ThemeBackgroundFillsDetails getThemeBackgroundFill() {
    return themeBackgroundFill;
  }

  public void setThemeBackgroundFill(ThemeBackgroundFillsDetails themeBackgroundFill) {
    this.themeBackgroundFill = themeBackgroundFill;
  }


  public SharedFillMapDetails themeBackgroundFillId(UUID themeBackgroundFillId) {
    this.themeBackgroundFillId = themeBackgroundFillId;
    return this;
  }

  /**
   * Get themeBackgroundFillId
   * @return themeBackgroundFillId
   */
  @javax.annotation.Nullable
  public UUID getThemeBackgroundFillId() {
    return themeBackgroundFillId;
  }

  public void setThemeBackgroundFillId(UUID themeBackgroundFillId) {
    this.themeBackgroundFillId = themeBackgroundFillId;
  }


  public SharedFillMapDetails themeFill(ThemeFillsDetails themeFill) {
    this.themeFill = themeFill;
    return this;
  }

  /**
   * Get themeFill
   * @return themeFill
   */
  @javax.annotation.Nullable
  public ThemeFillsDetails getThemeFill() {
    return themeFill;
  }

  public void setThemeFill(ThemeFillsDetails themeFill) {
    this.themeFill = themeFill;
  }


  public SharedFillMapDetails themeFillId(UUID themeFillId) {
    this.themeFillId = themeFillId;
    return this;
  }

  /**
   * Get themeFillId
   * @return themeFillId
   */
  @javax.annotation.Nullable
  public UUID getThemeFillId() {
    return themeFillId;
  }

  public void setThemeFillId(UUID themeFillId) {
    this.themeFillId = themeFillId;
  }


  public SharedFillMapDetails userCreated(UUID userCreated) {
    this.userCreated = userCreated;
    return this;
  }

  /**
   * Get userCreated
   * @return userCreated
   */
  @javax.annotation.Nullable
  public UUID getUserCreated() {
    return userCreated;
  }

  public void setUserCreated(UUID userCreated) {
    this.userCreated = userCreated;
  }


  public SharedFillMapDetails userModified(UUID userModified) {
    this.userModified = userModified;
    return this;
  }

  /**
   * Get userModified
   * @return userModified
   */
  @javax.annotation.Nullable
  public UUID getUserModified() {
    return userModified;
  }

  public void setUserModified(UUID userModified) {
    this.userModified = userModified;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SharedFillMapDetails sharedFillMapDetails = (SharedFillMapDetails) o;
    return Objects.equals(this.connector, sharedFillMapDetails.connector) &&
        Objects.equals(this.connectorId, sharedFillMapDetails.connectorId) &&
        Objects.equals(this.dateCreated, sharedFillMapDetails.dateCreated) &&
        Objects.equals(this.dateModified, sharedFillMapDetails.dateModified) &&
        Objects.equals(this.effectAttribute, sharedFillMapDetails.effectAttribute) &&
        Objects.equals(this.effectAttributeId, sharedFillMapDetails.effectAttributeId) &&
        Objects.equals(this.fillTypeId, sharedFillMapDetails.fillTypeId) &&
        Objects.equals(this.gradientFill, sharedFillMapDetails.gradientFill) &&
        Objects.equals(this.id, sharedFillMapDetails.id) &&
        Objects.equals(this.imageFill, sharedFillMapDetails.imageFill) &&
        Objects.equals(this.shape, sharedFillMapDetails.shape) &&
        Objects.equals(this.shapeId, sharedFillMapDetails.shapeId) &&
        Objects.equals(this.solidFill, sharedFillMapDetails.solidFill) &&
        Objects.equals(this.tableCell, sharedFillMapDetails.tableCell) &&
        Objects.equals(this.tableCellId, sharedFillMapDetails.tableCellId) &&
        Objects.equals(this.themeBackgroundFill, sharedFillMapDetails.themeBackgroundFill) &&
        Objects.equals(this.themeBackgroundFillId, sharedFillMapDetails.themeBackgroundFillId) &&
        Objects.equals(this.themeFill, sharedFillMapDetails.themeFill) &&
        Objects.equals(this.themeFillId, sharedFillMapDetails.themeFillId) &&
        Objects.equals(this.userCreated, sharedFillMapDetails.userCreated) &&
        Objects.equals(this.userModified, sharedFillMapDetails.userModified);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(connector, connectorId, dateCreated, dateModified, effectAttribute, effectAttributeId, fillTypeId, gradientFill, id, imageFill, shape, shapeId, solidFill, tableCell, tableCellId, themeBackgroundFill, themeBackgroundFillId, themeFill, themeFillId, userCreated, userModified);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SharedFillMapDetails {\n");
    sb.append("    connector: ").append(toIndentedString(connector)).append("\n");
    sb.append("    connectorId: ").append(toIndentedString(connectorId)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateModified: ").append(toIndentedString(dateModified)).append("\n");
    sb.append("    effectAttribute: ").append(toIndentedString(effectAttribute)).append("\n");
    sb.append("    effectAttributeId: ").append(toIndentedString(effectAttributeId)).append("\n");
    sb.append("    fillTypeId: ").append(toIndentedString(fillTypeId)).append("\n");
    sb.append("    gradientFill: ").append(toIndentedString(gradientFill)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    imageFill: ").append(toIndentedString(imageFill)).append("\n");
    sb.append("    shape: ").append(toIndentedString(shape)).append("\n");
    sb.append("    shapeId: ").append(toIndentedString(shapeId)).append("\n");
    sb.append("    solidFill: ").append(toIndentedString(solidFill)).append("\n");
    sb.append("    tableCell: ").append(toIndentedString(tableCell)).append("\n");
    sb.append("    tableCellId: ").append(toIndentedString(tableCellId)).append("\n");
    sb.append("    themeBackgroundFill: ").append(toIndentedString(themeBackgroundFill)).append("\n");
    sb.append("    themeBackgroundFillId: ").append(toIndentedString(themeBackgroundFillId)).append("\n");
    sb.append("    themeFill: ").append(toIndentedString(themeFill)).append("\n");
    sb.append("    themeFillId: ").append(toIndentedString(themeFillId)).append("\n");
    sb.append("    userCreated: ").append(toIndentedString(userCreated)).append("\n");
    sb.append("    userModified: ").append(toIndentedString(userModified)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("connector");
    openapiFields.add("connectorId");
    openapiFields.add("dateCreated");
    openapiFields.add("dateModified");
    openapiFields.add("effectAttribute");
    openapiFields.add("effectAttributeId");
    openapiFields.add("fillTypeId");
    openapiFields.add("gradientFill");
    openapiFields.add("id");
    openapiFields.add("imageFill");
    openapiFields.add("shape");
    openapiFields.add("shapeId");
    openapiFields.add("solidFill");
    openapiFields.add("tableCell");
    openapiFields.add("tableCellId");
    openapiFields.add("themeBackgroundFill");
    openapiFields.add("themeBackgroundFillId");
    openapiFields.add("themeFill");
    openapiFields.add("themeFillId");
    openapiFields.add("userCreated");
    openapiFields.add("userModified");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SharedFillMapDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SharedFillMapDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SharedFillMapDetails is not found in the empty JSON string", SharedFillMapDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SharedFillMapDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SharedFillMapDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `connector`
      if (jsonObj.get("connector") != null && !jsonObj.get("connector").isJsonNull()) {
        SlideConnectorDetails.validateJsonElement(jsonObj.get("connector"));
      }
      if ((jsonObj.get("connectorId") != null && !jsonObj.get("connectorId").isJsonNull()) && !jsonObj.get("connectorId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectorId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectorId").toString()));
      }
      // validate the optional field `effectAttribute`
      if (jsonObj.get("effectAttribute") != null && !jsonObj.get("effectAttribute").isJsonNull()) {
        SharedEffectAttributesDetails.validateJsonElement(jsonObj.get("effectAttribute"));
      }
      if ((jsonObj.get("effectAttributeId") != null && !jsonObj.get("effectAttributeId").isJsonNull()) && !jsonObj.get("effectAttributeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `effectAttributeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("effectAttributeId").toString()));
      }
      // validate the optional field `gradientFill`
      if (jsonObj.get("gradientFill") != null && !jsonObj.get("gradientFill").isJsonNull()) {
        SharedGradientFillsDetails.validateJsonElement(jsonObj.get("gradientFill"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `imageFill`
      if (jsonObj.get("imageFill") != null && !jsonObj.get("imageFill").isJsonNull()) {
        SharedImageFillsDetails.validateJsonElement(jsonObj.get("imageFill"));
      }
      // validate the optional field `shape`
      if (jsonObj.get("shape") != null && !jsonObj.get("shape").isJsonNull()) {
        SlideShapesDetails.validateJsonElement(jsonObj.get("shape"));
      }
      if ((jsonObj.get("shapeId") != null && !jsonObj.get("shapeId").isJsonNull()) && !jsonObj.get("shapeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shapeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shapeId").toString()));
      }
      // validate the optional field `solidFill`
      if (jsonObj.get("solidFill") != null && !jsonObj.get("solidFill").isJsonNull()) {
        SharedSolidFillsDetails.validateJsonElement(jsonObj.get("solidFill"));
      }
      // validate the optional field `tableCell`
      if (jsonObj.get("tableCell") != null && !jsonObj.get("tableCell").isJsonNull()) {
        TableCellsDetails.validateJsonElement(jsonObj.get("tableCell"));
      }
      if ((jsonObj.get("tableCellId") != null && !jsonObj.get("tableCellId").isJsonNull()) && !jsonObj.get("tableCellId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tableCellId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tableCellId").toString()));
      }
      // validate the optional field `themeBackgroundFill`
      if (jsonObj.get("themeBackgroundFill") != null && !jsonObj.get("themeBackgroundFill").isJsonNull()) {
        ThemeBackgroundFillsDetails.validateJsonElement(jsonObj.get("themeBackgroundFill"));
      }
      if ((jsonObj.get("themeBackgroundFillId") != null && !jsonObj.get("themeBackgroundFillId").isJsonNull()) && !jsonObj.get("themeBackgroundFillId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `themeBackgroundFillId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("themeBackgroundFillId").toString()));
      }
      // validate the optional field `themeFill`
      if (jsonObj.get("themeFill") != null && !jsonObj.get("themeFill").isJsonNull()) {
        ThemeFillsDetails.validateJsonElement(jsonObj.get("themeFill"));
      }
      if ((jsonObj.get("themeFillId") != null && !jsonObj.get("themeFillId").isJsonNull()) && !jsonObj.get("themeFillId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `themeFillId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("themeFillId").toString()));
      }
      if ((jsonObj.get("userCreated") != null && !jsonObj.get("userCreated").isJsonNull()) && !jsonObj.get("userCreated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userCreated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userCreated").toString()));
      }
      if ((jsonObj.get("userModified") != null && !jsonObj.get("userModified").isJsonNull()) && !jsonObj.get("userModified").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userModified` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userModified").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SharedFillMapDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SharedFillMapDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SharedFillMapDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SharedFillMapDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<SharedFillMapDetails>() {
           @Override
           public void write(JsonWriter out, SharedFillMapDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SharedFillMapDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SharedFillMapDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SharedFillMapDetails
   * @throws IOException if the JSON string is invalid with respect to SharedFillMapDetails
   */
  public static SharedFillMapDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SharedFillMapDetails.class);
  }

  /**
   * Convert an instance of SharedFillMapDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

