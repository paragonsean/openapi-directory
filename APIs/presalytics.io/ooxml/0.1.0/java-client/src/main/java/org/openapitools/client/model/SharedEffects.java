/*
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SharedEffects
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:20.731713-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SharedEffects {
  public static final String SERIALIZED_NAME_CONNECTOR_ID = "connectorId";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_ID)
  private UUID connectorId;

  public static final String SERIALIZED_NAME_EFFECT_MAP_ID = "effectMapId";
  @SerializedName(SERIALIZED_NAME_EFFECT_MAP_ID)
  private UUID effectMapId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SHAPE_ID = "shapeId";
  @SerializedName(SERIALIZED_NAME_SHAPE_ID)
  private UUID shapeId;

  public SharedEffects() {
  }

  public SharedEffects connectorId(UUID connectorId) {
    this.connectorId = connectorId;
    return this;
  }

  /**
   * Get connectorId
   * @return connectorId
   */
  @javax.annotation.Nullable
  public UUID getConnectorId() {
    return connectorId;
  }

  public void setConnectorId(UUID connectorId) {
    this.connectorId = connectorId;
  }


  public SharedEffects effectMapId(UUID effectMapId) {
    this.effectMapId = effectMapId;
    return this;
  }

  /**
   * Get effectMapId
   * @return effectMapId
   */
  @javax.annotation.Nullable
  public UUID getEffectMapId() {
    return effectMapId;
  }

  public void setEffectMapId(UUID effectMapId) {
    this.effectMapId = effectMapId;
  }


  public SharedEffects id(UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }


  public SharedEffects name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public SharedEffects shapeId(UUID shapeId) {
    this.shapeId = shapeId;
    return this;
  }

  /**
   * Get shapeId
   * @return shapeId
   */
  @javax.annotation.Nullable
  public UUID getShapeId() {
    return shapeId;
  }

  public void setShapeId(UUID shapeId) {
    this.shapeId = shapeId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SharedEffects sharedEffects = (SharedEffects) o;
    return Objects.equals(this.connectorId, sharedEffects.connectorId) &&
        Objects.equals(this.effectMapId, sharedEffects.effectMapId) &&
        Objects.equals(this.id, sharedEffects.id) &&
        Objects.equals(this.name, sharedEffects.name) &&
        Objects.equals(this.shapeId, sharedEffects.shapeId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(connectorId, effectMapId, id, name, shapeId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SharedEffects {\n");
    sb.append("    connectorId: ").append(toIndentedString(connectorId)).append("\n");
    sb.append("    effectMapId: ").append(toIndentedString(effectMapId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    shapeId: ").append(toIndentedString(shapeId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("connectorId");
    openapiFields.add("effectMapId");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("shapeId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SharedEffects
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SharedEffects.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SharedEffects is not found in the empty JSON string", SharedEffects.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SharedEffects.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SharedEffects` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("connectorId") != null && !jsonObj.get("connectorId").isJsonNull()) && !jsonObj.get("connectorId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectorId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectorId").toString()));
      }
      if ((jsonObj.get("effectMapId") != null && !jsonObj.get("effectMapId").isJsonNull()) && !jsonObj.get("effectMapId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `effectMapId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("effectMapId").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("shapeId") != null && !jsonObj.get("shapeId").isJsonNull()) && !jsonObj.get("shapeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shapeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shapeId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SharedEffects.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SharedEffects' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SharedEffects> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SharedEffects.class));

       return (TypeAdapter<T>) new TypeAdapter<SharedEffects>() {
           @Override
           public void write(JsonWriter out, SharedEffects value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SharedEffects read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SharedEffects given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SharedEffects
   * @throws IOException if the JSON string is invalid with respect to SharedEffects
   */
  public static SharedEffects fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SharedEffects.class);
  }

  /**
   * Convert an instance of SharedEffects to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

