/*
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ChartChartDataDTO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:20.731713-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ChartChartDataDTO {
  public static final String SERIALIZED_NAME_CATEGORY_NAMES = "categoryNames";
  @SerializedName(SERIALIZED_NAME_CATEGORY_NAMES)
  private List<String> categoryNames;

  public static final String SERIALIZED_NAME_CHART_ID = "chartId";
  @SerializedName(SERIALIZED_NAME_CHART_ID)
  private UUID chartId;

  public static final String SERIALIZED_NAME_DATA_POINTS = "dataPoints";
  @SerializedName(SERIALIZED_NAME_DATA_POINTS)
  private List<List<Double>> dataPoints;

  public static final String SERIALIZED_NAME_SERIES_NAMES = "seriesNames";
  @SerializedName(SERIALIZED_NAME_SERIES_NAMES)
  private List<String> seriesNames;

  public ChartChartDataDTO() {
  }

  public ChartChartDataDTO categoryNames(List<String> categoryNames) {
    this.categoryNames = categoryNames;
    return this;
  }

  public ChartChartDataDTO addCategoryNamesItem(String categoryNamesItem) {
    if (this.categoryNames == null) {
      this.categoryNames = new ArrayList<>();
    }
    this.categoryNames.add(categoryNamesItem);
    return this;
  }

  /**
   * Get categoryNames
   * @return categoryNames
   */
  @javax.annotation.Nullable
  public List<String> getCategoryNames() {
    return categoryNames;
  }

  public void setCategoryNames(List<String> categoryNames) {
    this.categoryNames = categoryNames;
  }


  public ChartChartDataDTO chartId(UUID chartId) {
    this.chartId = chartId;
    return this;
  }

  /**
   * Get chartId
   * @return chartId
   */
  @javax.annotation.Nullable
  public UUID getChartId() {
    return chartId;
  }

  public void setChartId(UUID chartId) {
    this.chartId = chartId;
  }


  public ChartChartDataDTO dataPoints(List<List<Double>> dataPoints) {
    this.dataPoints = dataPoints;
    return this;
  }

  public ChartChartDataDTO addDataPointsItem(List<Double> dataPointsItem) {
    if (this.dataPoints == null) {
      this.dataPoints = new ArrayList<>();
    }
    this.dataPoints.add(dataPointsItem);
    return this;
  }

  /**
   * Get dataPoints
   * @return dataPoints
   */
  @javax.annotation.Nullable
  public List<List<Double>> getDataPoints() {
    return dataPoints;
  }

  public void setDataPoints(List<List<Double>> dataPoints) {
    this.dataPoints = dataPoints;
  }


  public ChartChartDataDTO seriesNames(List<String> seriesNames) {
    this.seriesNames = seriesNames;
    return this;
  }

  public ChartChartDataDTO addSeriesNamesItem(String seriesNamesItem) {
    if (this.seriesNames == null) {
      this.seriesNames = new ArrayList<>();
    }
    this.seriesNames.add(seriesNamesItem);
    return this;
  }

  /**
   * Get seriesNames
   * @return seriesNames
   */
  @javax.annotation.Nullable
  public List<String> getSeriesNames() {
    return seriesNames;
  }

  public void setSeriesNames(List<String> seriesNames) {
    this.seriesNames = seriesNames;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChartChartDataDTO chartChartDataDTO = (ChartChartDataDTO) o;
    return Objects.equals(this.categoryNames, chartChartDataDTO.categoryNames) &&
        Objects.equals(this.chartId, chartChartDataDTO.chartId) &&
        Objects.equals(this.dataPoints, chartChartDataDTO.dataPoints) &&
        Objects.equals(this.seriesNames, chartChartDataDTO.seriesNames);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(categoryNames, chartId, dataPoints, seriesNames);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChartChartDataDTO {\n");
    sb.append("    categoryNames: ").append(toIndentedString(categoryNames)).append("\n");
    sb.append("    chartId: ").append(toIndentedString(chartId)).append("\n");
    sb.append("    dataPoints: ").append(toIndentedString(dataPoints)).append("\n");
    sb.append("    seriesNames: ").append(toIndentedString(seriesNames)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("categoryNames");
    openapiFields.add("chartId");
    openapiFields.add("dataPoints");
    openapiFields.add("seriesNames");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ChartChartDataDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ChartChartDataDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChartChartDataDTO is not found in the empty JSON string", ChartChartDataDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ChartChartDataDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChartChartDataDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("categoryNames") != null && !jsonObj.get("categoryNames").isJsonNull() && !jsonObj.get("categoryNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `categoryNames` to be an array in the JSON string but got `%s`", jsonObj.get("categoryNames").toString()));
      }
      if ((jsonObj.get("chartId") != null && !jsonObj.get("chartId").isJsonNull()) && !jsonObj.get("chartId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chartId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chartId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("dataPoints") != null && !jsonObj.get("dataPoints").isJsonNull() && !jsonObj.get("dataPoints").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataPoints` to be an array in the JSON string but got `%s`", jsonObj.get("dataPoints").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("seriesNames") != null && !jsonObj.get("seriesNames").isJsonNull() && !jsonObj.get("seriesNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `seriesNames` to be an array in the JSON string but got `%s`", jsonObj.get("seriesNames").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChartChartDataDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChartChartDataDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChartChartDataDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChartChartDataDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<ChartChartDataDTO>() {
           @Override
           public void write(JsonWriter out, ChartChartDataDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChartChartDataDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ChartChartDataDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ChartChartDataDTO
   * @throws IOException if the JSON string is invalid with respect to ChartChartDataDTO
   */
  public static ChartChartDataDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChartChartDataDTO.class);
  }

  /**
   * Convert an instance of ChartChartDataDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

