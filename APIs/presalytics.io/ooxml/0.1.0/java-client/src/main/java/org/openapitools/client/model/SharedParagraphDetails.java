/*
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.SharedTextContainerDetails;
import org.openapitools.client.model.SharedTextDetails;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SharedParagraphDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:20.731713-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SharedParagraphDetails {
  public static final String SERIALIZED_NAME_DATE_CREATED = "dateCreated";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private OffsetDateTime dateCreated;

  public static final String SERIALIZED_NAME_DATE_MODIFIED = "dateModified";
  @SerializedName(SERIALIZED_NAME_DATE_MODIFIED)
  private OffsetDateTime dateModified;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_NUMBER = "number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private Integer number;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private List<SharedTextDetails> text;

  public static final String SERIALIZED_NAME_TEXT_CONTAINER = "textContainer";
  @SerializedName(SERIALIZED_NAME_TEXT_CONTAINER)
  private SharedTextContainerDetails textContainer;

  public static final String SERIALIZED_NAME_TEXT_CONTAINER_ID = "textContainerId";
  @SerializedName(SERIALIZED_NAME_TEXT_CONTAINER_ID)
  private UUID textContainerId;

  public static final String SERIALIZED_NAME_USER_CREATED = "userCreated";
  @SerializedName(SERIALIZED_NAME_USER_CREATED)
  private UUID userCreated;

  public static final String SERIALIZED_NAME_USER_MODIFIED = "userModified";
  @SerializedName(SERIALIZED_NAME_USER_MODIFIED)
  private UUID userModified;

  public SharedParagraphDetails() {
  }

  public SharedParagraphDetails dateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
    return this;
  }

  /**
   * Get dateCreated
   * @return dateCreated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }

  public void setDateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
  }


  public SharedParagraphDetails dateModified(OffsetDateTime dateModified) {
    this.dateModified = dateModified;
    return this;
  }

  /**
   * Get dateModified
   * @return dateModified
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateModified() {
    return dateModified;
  }

  public void setDateModified(OffsetDateTime dateModified) {
    this.dateModified = dateModified;
  }


  public SharedParagraphDetails id(UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }


  public SharedParagraphDetails number(Integer number) {
    this.number = number;
    return this;
  }

  /**
   * Get number
   * @return number
   */
  @javax.annotation.Nullable
  public Integer getNumber() {
    return number;
  }

  public void setNumber(Integer number) {
    this.number = number;
  }


  public SharedParagraphDetails text(List<SharedTextDetails> text) {
    this.text = text;
    return this;
  }

  public SharedParagraphDetails addTextItem(SharedTextDetails textItem) {
    if (this.text == null) {
      this.text = new ArrayList<>();
    }
    this.text.add(textItem);
    return this;
  }

  /**
   * Get text
   * @return text
   */
  @javax.annotation.Nullable
  public List<SharedTextDetails> getText() {
    return text;
  }

  public void setText(List<SharedTextDetails> text) {
    this.text = text;
  }


  public SharedParagraphDetails textContainer(SharedTextContainerDetails textContainer) {
    this.textContainer = textContainer;
    return this;
  }

  /**
   * Get textContainer
   * @return textContainer
   */
  @javax.annotation.Nullable
  public SharedTextContainerDetails getTextContainer() {
    return textContainer;
  }

  public void setTextContainer(SharedTextContainerDetails textContainer) {
    this.textContainer = textContainer;
  }


  public SharedParagraphDetails textContainerId(UUID textContainerId) {
    this.textContainerId = textContainerId;
    return this;
  }

  /**
   * Get textContainerId
   * @return textContainerId
   */
  @javax.annotation.Nullable
  public UUID getTextContainerId() {
    return textContainerId;
  }

  public void setTextContainerId(UUID textContainerId) {
    this.textContainerId = textContainerId;
  }


  public SharedParagraphDetails userCreated(UUID userCreated) {
    this.userCreated = userCreated;
    return this;
  }

  /**
   * Get userCreated
   * @return userCreated
   */
  @javax.annotation.Nullable
  public UUID getUserCreated() {
    return userCreated;
  }

  public void setUserCreated(UUID userCreated) {
    this.userCreated = userCreated;
  }


  public SharedParagraphDetails userModified(UUID userModified) {
    this.userModified = userModified;
    return this;
  }

  /**
   * Get userModified
   * @return userModified
   */
  @javax.annotation.Nullable
  public UUID getUserModified() {
    return userModified;
  }

  public void setUserModified(UUID userModified) {
    this.userModified = userModified;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SharedParagraphDetails sharedParagraphDetails = (SharedParagraphDetails) o;
    return Objects.equals(this.dateCreated, sharedParagraphDetails.dateCreated) &&
        Objects.equals(this.dateModified, sharedParagraphDetails.dateModified) &&
        Objects.equals(this.id, sharedParagraphDetails.id) &&
        Objects.equals(this.number, sharedParagraphDetails.number) &&
        Objects.equals(this.text, sharedParagraphDetails.text) &&
        Objects.equals(this.textContainer, sharedParagraphDetails.textContainer) &&
        Objects.equals(this.textContainerId, sharedParagraphDetails.textContainerId) &&
        Objects.equals(this.userCreated, sharedParagraphDetails.userCreated) &&
        Objects.equals(this.userModified, sharedParagraphDetails.userModified);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(dateCreated, dateModified, id, number, text, textContainer, textContainerId, userCreated, userModified);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SharedParagraphDetails {\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateModified: ").append(toIndentedString(dateModified)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    textContainer: ").append(toIndentedString(textContainer)).append("\n");
    sb.append("    textContainerId: ").append(toIndentedString(textContainerId)).append("\n");
    sb.append("    userCreated: ").append(toIndentedString(userCreated)).append("\n");
    sb.append("    userModified: ").append(toIndentedString(userModified)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dateCreated");
    openapiFields.add("dateModified");
    openapiFields.add("id");
    openapiFields.add("number");
    openapiFields.add("text");
    openapiFields.add("textContainer");
    openapiFields.add("textContainerId");
    openapiFields.add("userCreated");
    openapiFields.add("userModified");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SharedParagraphDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SharedParagraphDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SharedParagraphDetails is not found in the empty JSON string", SharedParagraphDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SharedParagraphDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SharedParagraphDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull()) {
        JsonArray jsonArraytext = jsonObj.getAsJsonArray("text");
        if (jsonArraytext != null) {
          // ensure the json data is an array
          if (!jsonObj.get("text").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `text` to be an array in the JSON string but got `%s`", jsonObj.get("text").toString()));
          }

          // validate the optional field `text` (array)
          for (int i = 0; i < jsonArraytext.size(); i++) {
            SharedTextDetails.validateJsonElement(jsonArraytext.get(i));
          };
        }
      }
      // validate the optional field `textContainer`
      if (jsonObj.get("textContainer") != null && !jsonObj.get("textContainer").isJsonNull()) {
        SharedTextContainerDetails.validateJsonElement(jsonObj.get("textContainer"));
      }
      if ((jsonObj.get("textContainerId") != null && !jsonObj.get("textContainerId").isJsonNull()) && !jsonObj.get("textContainerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `textContainerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("textContainerId").toString()));
      }
      if ((jsonObj.get("userCreated") != null && !jsonObj.get("userCreated").isJsonNull()) && !jsonObj.get("userCreated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userCreated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userCreated").toString()));
      }
      if ((jsonObj.get("userModified") != null && !jsonObj.get("userModified").isJsonNull()) && !jsonObj.get("userModified").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userModified` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userModified").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SharedParagraphDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SharedParagraphDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SharedParagraphDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SharedParagraphDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<SharedParagraphDetails>() {
           @Override
           public void write(JsonWriter out, SharedParagraphDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SharedParagraphDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SharedParagraphDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SharedParagraphDetails
   * @throws IOException if the JSON string is invalid with respect to SharedParagraphDetails
   */
  public static SharedParagraphDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SharedParagraphDetails.class);
  }

  /**
   * Convert an instance of SharedParagraphDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

