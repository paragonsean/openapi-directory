/*
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ThemeColors
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:20.731713-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ThemeColors {
  public static final String SERIALIZED_NAME_ACCENT1 = "accent1";
  @SerializedName(SERIALIZED_NAME_ACCENT1)
  private String accent1;

  public static final String SERIALIZED_NAME_ACCENT2 = "accent2";
  @SerializedName(SERIALIZED_NAME_ACCENT2)
  private String accent2;

  public static final String SERIALIZED_NAME_ACCENT3 = "accent3";
  @SerializedName(SERIALIZED_NAME_ACCENT3)
  private String accent3;

  public static final String SERIALIZED_NAME_ACCENT4 = "accent4";
  @SerializedName(SERIALIZED_NAME_ACCENT4)
  private String accent4;

  public static final String SERIALIZED_NAME_ACCENT5 = "accent5";
  @SerializedName(SERIALIZED_NAME_ACCENT5)
  private String accent5;

  public static final String SERIALIZED_NAME_ACCENT6 = "accent6";
  @SerializedName(SERIALIZED_NAME_ACCENT6)
  private String accent6;

  public static final String SERIALIZED_NAME_DARK1 = "dark1";
  @SerializedName(SERIALIZED_NAME_DARK1)
  private String dark1;

  public static final String SERIALIZED_NAME_DARK2 = "dark2";
  @SerializedName(SERIALIZED_NAME_DARK2)
  private String dark2;

  public static final String SERIALIZED_NAME_FOLLOWED_HYPERLINK = "followedHyperlink";
  @SerializedName(SERIALIZED_NAME_FOLLOWED_HYPERLINK)
  private String followedHyperlink;

  public static final String SERIALIZED_NAME_HYPERLINK = "hyperlink";
  @SerializedName(SERIALIZED_NAME_HYPERLINK)
  private String hyperlink;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_LIGHT1 = "light1";
  @SerializedName(SERIALIZED_NAME_LIGHT1)
  private String light1;

  public static final String SERIALIZED_NAME_LIGHT2 = "light2";
  @SerializedName(SERIALIZED_NAME_LIGHT2)
  private String light2;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_THEME_ID = "themeId";
  @SerializedName(SERIALIZED_NAME_THEME_ID)
  private UUID themeId;

  public ThemeColors() {
  }

  public ThemeColors accent1(String accent1) {
    this.accent1 = accent1;
    return this;
  }

  /**
   * Get accent1
   * @return accent1
   */
  @javax.annotation.Nullable
  public String getAccent1() {
    return accent1;
  }

  public void setAccent1(String accent1) {
    this.accent1 = accent1;
  }


  public ThemeColors accent2(String accent2) {
    this.accent2 = accent2;
    return this;
  }

  /**
   * Get accent2
   * @return accent2
   */
  @javax.annotation.Nullable
  public String getAccent2() {
    return accent2;
  }

  public void setAccent2(String accent2) {
    this.accent2 = accent2;
  }


  public ThemeColors accent3(String accent3) {
    this.accent3 = accent3;
    return this;
  }

  /**
   * Get accent3
   * @return accent3
   */
  @javax.annotation.Nullable
  public String getAccent3() {
    return accent3;
  }

  public void setAccent3(String accent3) {
    this.accent3 = accent3;
  }


  public ThemeColors accent4(String accent4) {
    this.accent4 = accent4;
    return this;
  }

  /**
   * Get accent4
   * @return accent4
   */
  @javax.annotation.Nullable
  public String getAccent4() {
    return accent4;
  }

  public void setAccent4(String accent4) {
    this.accent4 = accent4;
  }


  public ThemeColors accent5(String accent5) {
    this.accent5 = accent5;
    return this;
  }

  /**
   * Get accent5
   * @return accent5
   */
  @javax.annotation.Nullable
  public String getAccent5() {
    return accent5;
  }

  public void setAccent5(String accent5) {
    this.accent5 = accent5;
  }


  public ThemeColors accent6(String accent6) {
    this.accent6 = accent6;
    return this;
  }

  /**
   * Get accent6
   * @return accent6
   */
  @javax.annotation.Nullable
  public String getAccent6() {
    return accent6;
  }

  public void setAccent6(String accent6) {
    this.accent6 = accent6;
  }


  public ThemeColors dark1(String dark1) {
    this.dark1 = dark1;
    return this;
  }

  /**
   * Get dark1
   * @return dark1
   */
  @javax.annotation.Nullable
  public String getDark1() {
    return dark1;
  }

  public void setDark1(String dark1) {
    this.dark1 = dark1;
  }


  public ThemeColors dark2(String dark2) {
    this.dark2 = dark2;
    return this;
  }

  /**
   * Get dark2
   * @return dark2
   */
  @javax.annotation.Nullable
  public String getDark2() {
    return dark2;
  }

  public void setDark2(String dark2) {
    this.dark2 = dark2;
  }


  public ThemeColors followedHyperlink(String followedHyperlink) {
    this.followedHyperlink = followedHyperlink;
    return this;
  }

  /**
   * Get followedHyperlink
   * @return followedHyperlink
   */
  @javax.annotation.Nullable
  public String getFollowedHyperlink() {
    return followedHyperlink;
  }

  public void setFollowedHyperlink(String followedHyperlink) {
    this.followedHyperlink = followedHyperlink;
  }


  public ThemeColors hyperlink(String hyperlink) {
    this.hyperlink = hyperlink;
    return this;
  }

  /**
   * Get hyperlink
   * @return hyperlink
   */
  @javax.annotation.Nullable
  public String getHyperlink() {
    return hyperlink;
  }

  public void setHyperlink(String hyperlink) {
    this.hyperlink = hyperlink;
  }


  public ThemeColors id(UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }


  public ThemeColors light1(String light1) {
    this.light1 = light1;
    return this;
  }

  /**
   * Get light1
   * @return light1
   */
  @javax.annotation.Nullable
  public String getLight1() {
    return light1;
  }

  public void setLight1(String light1) {
    this.light1 = light1;
  }


  public ThemeColors light2(String light2) {
    this.light2 = light2;
    return this;
  }

  /**
   * Get light2
   * @return light2
   */
  @javax.annotation.Nullable
  public String getLight2() {
    return light2;
  }

  public void setLight2(String light2) {
    this.light2 = light2;
  }


  public ThemeColors name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ThemeColors themeId(UUID themeId) {
    this.themeId = themeId;
    return this;
  }

  /**
   * Get themeId
   * @return themeId
   */
  @javax.annotation.Nullable
  public UUID getThemeId() {
    return themeId;
  }

  public void setThemeId(UUID themeId) {
    this.themeId = themeId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ThemeColors themeColors = (ThemeColors) o;
    return Objects.equals(this.accent1, themeColors.accent1) &&
        Objects.equals(this.accent2, themeColors.accent2) &&
        Objects.equals(this.accent3, themeColors.accent3) &&
        Objects.equals(this.accent4, themeColors.accent4) &&
        Objects.equals(this.accent5, themeColors.accent5) &&
        Objects.equals(this.accent6, themeColors.accent6) &&
        Objects.equals(this.dark1, themeColors.dark1) &&
        Objects.equals(this.dark2, themeColors.dark2) &&
        Objects.equals(this.followedHyperlink, themeColors.followedHyperlink) &&
        Objects.equals(this.hyperlink, themeColors.hyperlink) &&
        Objects.equals(this.id, themeColors.id) &&
        Objects.equals(this.light1, themeColors.light1) &&
        Objects.equals(this.light2, themeColors.light2) &&
        Objects.equals(this.name, themeColors.name) &&
        Objects.equals(this.themeId, themeColors.themeId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(accent1, accent2, accent3, accent4, accent5, accent6, dark1, dark2, followedHyperlink, hyperlink, id, light1, light2, name, themeId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ThemeColors {\n");
    sb.append("    accent1: ").append(toIndentedString(accent1)).append("\n");
    sb.append("    accent2: ").append(toIndentedString(accent2)).append("\n");
    sb.append("    accent3: ").append(toIndentedString(accent3)).append("\n");
    sb.append("    accent4: ").append(toIndentedString(accent4)).append("\n");
    sb.append("    accent5: ").append(toIndentedString(accent5)).append("\n");
    sb.append("    accent6: ").append(toIndentedString(accent6)).append("\n");
    sb.append("    dark1: ").append(toIndentedString(dark1)).append("\n");
    sb.append("    dark2: ").append(toIndentedString(dark2)).append("\n");
    sb.append("    followedHyperlink: ").append(toIndentedString(followedHyperlink)).append("\n");
    sb.append("    hyperlink: ").append(toIndentedString(hyperlink)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    light1: ").append(toIndentedString(light1)).append("\n");
    sb.append("    light2: ").append(toIndentedString(light2)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    themeId: ").append(toIndentedString(themeId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accent1");
    openapiFields.add("accent2");
    openapiFields.add("accent3");
    openapiFields.add("accent4");
    openapiFields.add("accent5");
    openapiFields.add("accent6");
    openapiFields.add("dark1");
    openapiFields.add("dark2");
    openapiFields.add("followedHyperlink");
    openapiFields.add("hyperlink");
    openapiFields.add("id");
    openapiFields.add("light1");
    openapiFields.add("light2");
    openapiFields.add("name");
    openapiFields.add("themeId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ThemeColors
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ThemeColors.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ThemeColors is not found in the empty JSON string", ThemeColors.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ThemeColors.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ThemeColors` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accent1") != null && !jsonObj.get("accent1").isJsonNull()) && !jsonObj.get("accent1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accent1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accent1").toString()));
      }
      if ((jsonObj.get("accent2") != null && !jsonObj.get("accent2").isJsonNull()) && !jsonObj.get("accent2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accent2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accent2").toString()));
      }
      if ((jsonObj.get("accent3") != null && !jsonObj.get("accent3").isJsonNull()) && !jsonObj.get("accent3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accent3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accent3").toString()));
      }
      if ((jsonObj.get("accent4") != null && !jsonObj.get("accent4").isJsonNull()) && !jsonObj.get("accent4").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accent4` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accent4").toString()));
      }
      if ((jsonObj.get("accent5") != null && !jsonObj.get("accent5").isJsonNull()) && !jsonObj.get("accent5").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accent5` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accent5").toString()));
      }
      if ((jsonObj.get("accent6") != null && !jsonObj.get("accent6").isJsonNull()) && !jsonObj.get("accent6").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accent6` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accent6").toString()));
      }
      if ((jsonObj.get("dark1") != null && !jsonObj.get("dark1").isJsonNull()) && !jsonObj.get("dark1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dark1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dark1").toString()));
      }
      if ((jsonObj.get("dark2") != null && !jsonObj.get("dark2").isJsonNull()) && !jsonObj.get("dark2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dark2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dark2").toString()));
      }
      if ((jsonObj.get("followedHyperlink") != null && !jsonObj.get("followedHyperlink").isJsonNull()) && !jsonObj.get("followedHyperlink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `followedHyperlink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("followedHyperlink").toString()));
      }
      if ((jsonObj.get("hyperlink") != null && !jsonObj.get("hyperlink").isJsonNull()) && !jsonObj.get("hyperlink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hyperlink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hyperlink").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("light1") != null && !jsonObj.get("light1").isJsonNull()) && !jsonObj.get("light1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `light1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("light1").toString()));
      }
      if ((jsonObj.get("light2") != null && !jsonObj.get("light2").isJsonNull()) && !jsonObj.get("light2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `light2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("light2").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("themeId") != null && !jsonObj.get("themeId").isJsonNull()) && !jsonObj.get("themeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `themeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("themeId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ThemeColors.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ThemeColors' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ThemeColors> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ThemeColors.class));

       return (TypeAdapter<T>) new TypeAdapter<ThemeColors>() {
           @Override
           public void write(JsonWriter out, ThemeColors value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ThemeColors read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ThemeColors given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ThemeColors
   * @throws IOException if the JSON string is invalid with respect to ThemeColors
   */
  public static ThemeColors fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ThemeColors.class);
  }

  /**
   * Convert an instance of ThemeColors to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

