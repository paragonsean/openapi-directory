/*
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.SharedFillMapDetails;
import org.openapitools.client.model.SharedTextContainerDetails;
import org.openapitools.client.model.TableBordersDetails;
import org.openapitools.client.model.TableColumnsDetails;
import org.openapitools.client.model.TableRowsDetails;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TableCellsDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:20.731713-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TableCellsDetails {
  public static final String SERIALIZED_NAME_BORDER = "border";
  @SerializedName(SERIALIZED_NAME_BORDER)
  private TableBordersDetails border;

  public static final String SERIALIZED_NAME_COLUMN = "column";
  @SerializedName(SERIALIZED_NAME_COLUMN)
  private TableColumnsDetails column;

  public static final String SERIALIZED_NAME_COLUMN_ID = "columnId";
  @SerializedName(SERIALIZED_NAME_COLUMN_ID)
  private UUID columnId;

  public static final String SERIALIZED_NAME_COLUMN_SPAN = "columnSpan";
  @SerializedName(SERIALIZED_NAME_COLUMN_SPAN)
  private Integer columnSpan;

  public static final String SERIALIZED_NAME_DATE_CREATED = "dateCreated";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private OffsetDateTime dateCreated;

  public static final String SERIALIZED_NAME_DATE_MODIFIED = "dateModified";
  @SerializedName(SERIALIZED_NAME_DATE_MODIFIED)
  private OffsetDateTime dateModified;

  public static final String SERIALIZED_NAME_FILL_MAP = "fillMap";
  @SerializedName(SERIALIZED_NAME_FILL_MAP)
  private SharedFillMapDetails fillMap;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_IS_MERGED_HOROZONTAL = "isMergedHorozontal";
  @SerializedName(SERIALIZED_NAME_IS_MERGED_HOROZONTAL)
  private Boolean isMergedHorozontal;

  public static final String SERIALIZED_NAME_IS_MERGED_VERTICAL = "isMergedVertical";
  @SerializedName(SERIALIZED_NAME_IS_MERGED_VERTICAL)
  private Boolean isMergedVertical;

  public static final String SERIALIZED_NAME_ROW = "row";
  @SerializedName(SERIALIZED_NAME_ROW)
  private TableRowsDetails row;

  public static final String SERIALIZED_NAME_ROW_ID = "rowId";
  @SerializedName(SERIALIZED_NAME_ROW_ID)
  private UUID rowId;

  public static final String SERIALIZED_NAME_ROW_SPAN = "rowSpan";
  @SerializedName(SERIALIZED_NAME_ROW_SPAN)
  private Integer rowSpan;

  public static final String SERIALIZED_NAME_TEXT_CONTAINER = "textContainer";
  @SerializedName(SERIALIZED_NAME_TEXT_CONTAINER)
  private SharedTextContainerDetails textContainer;

  public static final String SERIALIZED_NAME_USER_CREATED = "userCreated";
  @SerializedName(SERIALIZED_NAME_USER_CREATED)
  private UUID userCreated;

  public static final String SERIALIZED_NAME_USER_MODIFIED = "userModified";
  @SerializedName(SERIALIZED_NAME_USER_MODIFIED)
  private UUID userModified;

  public TableCellsDetails() {
  }

  public TableCellsDetails border(TableBordersDetails border) {
    this.border = border;
    return this;
  }

  /**
   * Get border
   * @return border
   */
  @javax.annotation.Nullable
  public TableBordersDetails getBorder() {
    return border;
  }

  public void setBorder(TableBordersDetails border) {
    this.border = border;
  }


  public TableCellsDetails column(TableColumnsDetails column) {
    this.column = column;
    return this;
  }

  /**
   * Get column
   * @return column
   */
  @javax.annotation.Nullable
  public TableColumnsDetails getColumn() {
    return column;
  }

  public void setColumn(TableColumnsDetails column) {
    this.column = column;
  }


  public TableCellsDetails columnId(UUID columnId) {
    this.columnId = columnId;
    return this;
  }

  /**
   * Get columnId
   * @return columnId
   */
  @javax.annotation.Nullable
  public UUID getColumnId() {
    return columnId;
  }

  public void setColumnId(UUID columnId) {
    this.columnId = columnId;
  }


  public TableCellsDetails columnSpan(Integer columnSpan) {
    this.columnSpan = columnSpan;
    return this;
  }

  /**
   * Get columnSpan
   * @return columnSpan
   */
  @javax.annotation.Nullable
  public Integer getColumnSpan() {
    return columnSpan;
  }

  public void setColumnSpan(Integer columnSpan) {
    this.columnSpan = columnSpan;
  }


  public TableCellsDetails dateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
    return this;
  }

  /**
   * Get dateCreated
   * @return dateCreated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }

  public void setDateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
  }


  public TableCellsDetails dateModified(OffsetDateTime dateModified) {
    this.dateModified = dateModified;
    return this;
  }

  /**
   * Get dateModified
   * @return dateModified
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateModified() {
    return dateModified;
  }

  public void setDateModified(OffsetDateTime dateModified) {
    this.dateModified = dateModified;
  }


  public TableCellsDetails fillMap(SharedFillMapDetails fillMap) {
    this.fillMap = fillMap;
    return this;
  }

  /**
   * Get fillMap
   * @return fillMap
   */
  @javax.annotation.Nullable
  public SharedFillMapDetails getFillMap() {
    return fillMap;
  }

  public void setFillMap(SharedFillMapDetails fillMap) {
    this.fillMap = fillMap;
  }


  public TableCellsDetails id(UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }


  public TableCellsDetails isMergedHorozontal(Boolean isMergedHorozontal) {
    this.isMergedHorozontal = isMergedHorozontal;
    return this;
  }

  /**
   * Get isMergedHorozontal
   * @return isMergedHorozontal
   */
  @javax.annotation.Nullable
  public Boolean getIsMergedHorozontal() {
    return isMergedHorozontal;
  }

  public void setIsMergedHorozontal(Boolean isMergedHorozontal) {
    this.isMergedHorozontal = isMergedHorozontal;
  }


  public TableCellsDetails isMergedVertical(Boolean isMergedVertical) {
    this.isMergedVertical = isMergedVertical;
    return this;
  }

  /**
   * Get isMergedVertical
   * @return isMergedVertical
   */
  @javax.annotation.Nullable
  public Boolean getIsMergedVertical() {
    return isMergedVertical;
  }

  public void setIsMergedVertical(Boolean isMergedVertical) {
    this.isMergedVertical = isMergedVertical;
  }


  public TableCellsDetails row(TableRowsDetails row) {
    this.row = row;
    return this;
  }

  /**
   * Get row
   * @return row
   */
  @javax.annotation.Nullable
  public TableRowsDetails getRow() {
    return row;
  }

  public void setRow(TableRowsDetails row) {
    this.row = row;
  }


  public TableCellsDetails rowId(UUID rowId) {
    this.rowId = rowId;
    return this;
  }

  /**
   * Get rowId
   * @return rowId
   */
  @javax.annotation.Nullable
  public UUID getRowId() {
    return rowId;
  }

  public void setRowId(UUID rowId) {
    this.rowId = rowId;
  }


  public TableCellsDetails rowSpan(Integer rowSpan) {
    this.rowSpan = rowSpan;
    return this;
  }

  /**
   * Get rowSpan
   * @return rowSpan
   */
  @javax.annotation.Nullable
  public Integer getRowSpan() {
    return rowSpan;
  }

  public void setRowSpan(Integer rowSpan) {
    this.rowSpan = rowSpan;
  }


  public TableCellsDetails textContainer(SharedTextContainerDetails textContainer) {
    this.textContainer = textContainer;
    return this;
  }

  /**
   * Get textContainer
   * @return textContainer
   */
  @javax.annotation.Nullable
  public SharedTextContainerDetails getTextContainer() {
    return textContainer;
  }

  public void setTextContainer(SharedTextContainerDetails textContainer) {
    this.textContainer = textContainer;
  }


  public TableCellsDetails userCreated(UUID userCreated) {
    this.userCreated = userCreated;
    return this;
  }

  /**
   * Get userCreated
   * @return userCreated
   */
  @javax.annotation.Nullable
  public UUID getUserCreated() {
    return userCreated;
  }

  public void setUserCreated(UUID userCreated) {
    this.userCreated = userCreated;
  }


  public TableCellsDetails userModified(UUID userModified) {
    this.userModified = userModified;
    return this;
  }

  /**
   * Get userModified
   * @return userModified
   */
  @javax.annotation.Nullable
  public UUID getUserModified() {
    return userModified;
  }

  public void setUserModified(UUID userModified) {
    this.userModified = userModified;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TableCellsDetails tableCellsDetails = (TableCellsDetails) o;
    return Objects.equals(this.border, tableCellsDetails.border) &&
        Objects.equals(this.column, tableCellsDetails.column) &&
        Objects.equals(this.columnId, tableCellsDetails.columnId) &&
        Objects.equals(this.columnSpan, tableCellsDetails.columnSpan) &&
        Objects.equals(this.dateCreated, tableCellsDetails.dateCreated) &&
        Objects.equals(this.dateModified, tableCellsDetails.dateModified) &&
        Objects.equals(this.fillMap, tableCellsDetails.fillMap) &&
        Objects.equals(this.id, tableCellsDetails.id) &&
        Objects.equals(this.isMergedHorozontal, tableCellsDetails.isMergedHorozontal) &&
        Objects.equals(this.isMergedVertical, tableCellsDetails.isMergedVertical) &&
        Objects.equals(this.row, tableCellsDetails.row) &&
        Objects.equals(this.rowId, tableCellsDetails.rowId) &&
        Objects.equals(this.rowSpan, tableCellsDetails.rowSpan) &&
        Objects.equals(this.textContainer, tableCellsDetails.textContainer) &&
        Objects.equals(this.userCreated, tableCellsDetails.userCreated) &&
        Objects.equals(this.userModified, tableCellsDetails.userModified);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(border, column, columnId, columnSpan, dateCreated, dateModified, fillMap, id, isMergedHorozontal, isMergedVertical, row, rowId, rowSpan, textContainer, userCreated, userModified);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TableCellsDetails {\n");
    sb.append("    border: ").append(toIndentedString(border)).append("\n");
    sb.append("    column: ").append(toIndentedString(column)).append("\n");
    sb.append("    columnId: ").append(toIndentedString(columnId)).append("\n");
    sb.append("    columnSpan: ").append(toIndentedString(columnSpan)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateModified: ").append(toIndentedString(dateModified)).append("\n");
    sb.append("    fillMap: ").append(toIndentedString(fillMap)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isMergedHorozontal: ").append(toIndentedString(isMergedHorozontal)).append("\n");
    sb.append("    isMergedVertical: ").append(toIndentedString(isMergedVertical)).append("\n");
    sb.append("    row: ").append(toIndentedString(row)).append("\n");
    sb.append("    rowId: ").append(toIndentedString(rowId)).append("\n");
    sb.append("    rowSpan: ").append(toIndentedString(rowSpan)).append("\n");
    sb.append("    textContainer: ").append(toIndentedString(textContainer)).append("\n");
    sb.append("    userCreated: ").append(toIndentedString(userCreated)).append("\n");
    sb.append("    userModified: ").append(toIndentedString(userModified)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("border");
    openapiFields.add("column");
    openapiFields.add("columnId");
    openapiFields.add("columnSpan");
    openapiFields.add("dateCreated");
    openapiFields.add("dateModified");
    openapiFields.add("fillMap");
    openapiFields.add("id");
    openapiFields.add("isMergedHorozontal");
    openapiFields.add("isMergedVertical");
    openapiFields.add("row");
    openapiFields.add("rowId");
    openapiFields.add("rowSpan");
    openapiFields.add("textContainer");
    openapiFields.add("userCreated");
    openapiFields.add("userModified");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TableCellsDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TableCellsDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TableCellsDetails is not found in the empty JSON string", TableCellsDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TableCellsDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TableCellsDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `border`
      if (jsonObj.get("border") != null && !jsonObj.get("border").isJsonNull()) {
        TableBordersDetails.validateJsonElement(jsonObj.get("border"));
      }
      // validate the optional field `column`
      if (jsonObj.get("column") != null && !jsonObj.get("column").isJsonNull()) {
        TableColumnsDetails.validateJsonElement(jsonObj.get("column"));
      }
      if ((jsonObj.get("columnId") != null && !jsonObj.get("columnId").isJsonNull()) && !jsonObj.get("columnId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `columnId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("columnId").toString()));
      }
      // validate the optional field `fillMap`
      if (jsonObj.get("fillMap") != null && !jsonObj.get("fillMap").isJsonNull()) {
        SharedFillMapDetails.validateJsonElement(jsonObj.get("fillMap"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `row`
      if (jsonObj.get("row") != null && !jsonObj.get("row").isJsonNull()) {
        TableRowsDetails.validateJsonElement(jsonObj.get("row"));
      }
      if ((jsonObj.get("rowId") != null && !jsonObj.get("rowId").isJsonNull()) && !jsonObj.get("rowId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rowId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rowId").toString()));
      }
      // validate the optional field `textContainer`
      if (jsonObj.get("textContainer") != null && !jsonObj.get("textContainer").isJsonNull()) {
        SharedTextContainerDetails.validateJsonElement(jsonObj.get("textContainer"));
      }
      if ((jsonObj.get("userCreated") != null && !jsonObj.get("userCreated").isJsonNull()) && !jsonObj.get("userCreated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userCreated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userCreated").toString()));
      }
      if ((jsonObj.get("userModified") != null && !jsonObj.get("userModified").isJsonNull()) && !jsonObj.get("userModified").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userModified` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userModified").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TableCellsDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TableCellsDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TableCellsDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TableCellsDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<TableCellsDetails>() {
           @Override
           public void write(JsonWriter out, TableCellsDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TableCellsDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TableCellsDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TableCellsDetails
   * @throws IOException if the JSON string is invalid with respect to TableCellsDetails
   */
  public static TableCellsDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TableCellsDetails.class);
  }

  /**
   * Convert an instance of TableCellsDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

