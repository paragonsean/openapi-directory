/*
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.ChartAxesDetails;
import org.openapitools.client.model.ChartColumnCollectionsDetails;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ChartColumnsDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:20.731713-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ChartColumnsDetails {
  public static final String SERIALIZED_NAME_AXIS = "axis";
  @SerializedName(SERIALIZED_NAME_AXIS)
  private ChartAxesDetails axis;

  public static final String SERIALIZED_NAME_AXIS_ID = "axisId";
  @SerializedName(SERIALIZED_NAME_AXIS_ID)
  private UUID axisId;

  public static final String SERIALIZED_NAME_COLUMN_COLLECTION = "columnCollection";
  @SerializedName(SERIALIZED_NAME_COLUMN_COLLECTION)
  private ChartColumnCollectionsDetails columnCollection;

  public static final String SERIALIZED_NAME_COLUMN_COLLECTION_ID = "columnCollectionId";
  @SerializedName(SERIALIZED_NAME_COLUMN_COLLECTION_ID)
  private UUID columnCollectionId;

  public static final String SERIALIZED_NAME_DATE_CREATED = "dateCreated";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private OffsetDateTime dateCreated;

  public static final String SERIALIZED_NAME_DATE_MODIFIED = "dateModified";
  @SerializedName(SERIALIZED_NAME_DATE_MODIFIED)
  private OffsetDateTime dateModified;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_INDEX = "index";
  @SerializedName(SERIALIZED_NAME_INDEX)
  private Integer index;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_USER_CREATED = "userCreated";
  @SerializedName(SERIALIZED_NAME_USER_CREATED)
  private UUID userCreated;

  public static final String SERIALIZED_NAME_USER_MODIFIED = "userModified";
  @SerializedName(SERIALIZED_NAME_USER_MODIFIED)
  private UUID userModified;

  public ChartColumnsDetails() {
  }

  public ChartColumnsDetails axis(ChartAxesDetails axis) {
    this.axis = axis;
    return this;
  }

  /**
   * Get axis
   * @return axis
   */
  @javax.annotation.Nullable
  public ChartAxesDetails getAxis() {
    return axis;
  }

  public void setAxis(ChartAxesDetails axis) {
    this.axis = axis;
  }


  public ChartColumnsDetails axisId(UUID axisId) {
    this.axisId = axisId;
    return this;
  }

  /**
   * Get axisId
   * @return axisId
   */
  @javax.annotation.Nullable
  public UUID getAxisId() {
    return axisId;
  }

  public void setAxisId(UUID axisId) {
    this.axisId = axisId;
  }


  public ChartColumnsDetails columnCollection(ChartColumnCollectionsDetails columnCollection) {
    this.columnCollection = columnCollection;
    return this;
  }

  /**
   * Get columnCollection
   * @return columnCollection
   */
  @javax.annotation.Nullable
  public ChartColumnCollectionsDetails getColumnCollection() {
    return columnCollection;
  }

  public void setColumnCollection(ChartColumnCollectionsDetails columnCollection) {
    this.columnCollection = columnCollection;
  }


  public ChartColumnsDetails columnCollectionId(UUID columnCollectionId) {
    this.columnCollectionId = columnCollectionId;
    return this;
  }

  /**
   * Get columnCollectionId
   * @return columnCollectionId
   */
  @javax.annotation.Nullable
  public UUID getColumnCollectionId() {
    return columnCollectionId;
  }

  public void setColumnCollectionId(UUID columnCollectionId) {
    this.columnCollectionId = columnCollectionId;
  }


  public ChartColumnsDetails dateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
    return this;
  }

  /**
   * Get dateCreated
   * @return dateCreated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }

  public void setDateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
  }


  public ChartColumnsDetails dateModified(OffsetDateTime dateModified) {
    this.dateModified = dateModified;
    return this;
  }

  /**
   * Get dateModified
   * @return dateModified
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateModified() {
    return dateModified;
  }

  public void setDateModified(OffsetDateTime dateModified) {
    this.dateModified = dateModified;
  }


  public ChartColumnsDetails id(UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }


  public ChartColumnsDetails index(Integer index) {
    this.index = index;
    return this;
  }

  /**
   * Get index
   * @return index
   */
  @javax.annotation.Nullable
  public Integer getIndex() {
    return index;
  }

  public void setIndex(Integer index) {
    this.index = index;
  }


  public ChartColumnsDetails name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ChartColumnsDetails userCreated(UUID userCreated) {
    this.userCreated = userCreated;
    return this;
  }

  /**
   * Get userCreated
   * @return userCreated
   */
  @javax.annotation.Nullable
  public UUID getUserCreated() {
    return userCreated;
  }

  public void setUserCreated(UUID userCreated) {
    this.userCreated = userCreated;
  }


  public ChartColumnsDetails userModified(UUID userModified) {
    this.userModified = userModified;
    return this;
  }

  /**
   * Get userModified
   * @return userModified
   */
  @javax.annotation.Nullable
  public UUID getUserModified() {
    return userModified;
  }

  public void setUserModified(UUID userModified) {
    this.userModified = userModified;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChartColumnsDetails chartColumnsDetails = (ChartColumnsDetails) o;
    return Objects.equals(this.axis, chartColumnsDetails.axis) &&
        Objects.equals(this.axisId, chartColumnsDetails.axisId) &&
        Objects.equals(this.columnCollection, chartColumnsDetails.columnCollection) &&
        Objects.equals(this.columnCollectionId, chartColumnsDetails.columnCollectionId) &&
        Objects.equals(this.dateCreated, chartColumnsDetails.dateCreated) &&
        Objects.equals(this.dateModified, chartColumnsDetails.dateModified) &&
        Objects.equals(this.id, chartColumnsDetails.id) &&
        Objects.equals(this.index, chartColumnsDetails.index) &&
        Objects.equals(this.name, chartColumnsDetails.name) &&
        Objects.equals(this.userCreated, chartColumnsDetails.userCreated) &&
        Objects.equals(this.userModified, chartColumnsDetails.userModified);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(axis, axisId, columnCollection, columnCollectionId, dateCreated, dateModified, id, index, name, userCreated, userModified);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChartColumnsDetails {\n");
    sb.append("    axis: ").append(toIndentedString(axis)).append("\n");
    sb.append("    axisId: ").append(toIndentedString(axisId)).append("\n");
    sb.append("    columnCollection: ").append(toIndentedString(columnCollection)).append("\n");
    sb.append("    columnCollectionId: ").append(toIndentedString(columnCollectionId)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateModified: ").append(toIndentedString(dateModified)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    userCreated: ").append(toIndentedString(userCreated)).append("\n");
    sb.append("    userModified: ").append(toIndentedString(userModified)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("axis");
    openapiFields.add("axisId");
    openapiFields.add("columnCollection");
    openapiFields.add("columnCollectionId");
    openapiFields.add("dateCreated");
    openapiFields.add("dateModified");
    openapiFields.add("id");
    openapiFields.add("index");
    openapiFields.add("name");
    openapiFields.add("userCreated");
    openapiFields.add("userModified");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ChartColumnsDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ChartColumnsDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChartColumnsDetails is not found in the empty JSON string", ChartColumnsDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ChartColumnsDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChartColumnsDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `axis`
      if (jsonObj.get("axis") != null && !jsonObj.get("axis").isJsonNull()) {
        ChartAxesDetails.validateJsonElement(jsonObj.get("axis"));
      }
      if ((jsonObj.get("axisId") != null && !jsonObj.get("axisId").isJsonNull()) && !jsonObj.get("axisId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `axisId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("axisId").toString()));
      }
      // validate the optional field `columnCollection`
      if (jsonObj.get("columnCollection") != null && !jsonObj.get("columnCollection").isJsonNull()) {
        ChartColumnCollectionsDetails.validateJsonElement(jsonObj.get("columnCollection"));
      }
      if ((jsonObj.get("columnCollectionId") != null && !jsonObj.get("columnCollectionId").isJsonNull()) && !jsonObj.get("columnCollectionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `columnCollectionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("columnCollectionId").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("userCreated") != null && !jsonObj.get("userCreated").isJsonNull()) && !jsonObj.get("userCreated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userCreated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userCreated").toString()));
      }
      if ((jsonObj.get("userModified") != null && !jsonObj.get("userModified").isJsonNull()) && !jsonObj.get("userModified").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userModified` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userModified").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChartColumnsDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChartColumnsDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChartColumnsDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChartColumnsDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<ChartColumnsDetails>() {
           @Override
           public void write(JsonWriter out, ChartColumnsDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChartColumnsDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ChartColumnsDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ChartColumnsDetails
   * @throws IOException if the JSON string is invalid with respect to ChartColumnsDetails
   */
  public static ChartColumnsDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChartColumnsDetails.class);
  }

  /**
   * Convert an instance of ChartColumnsDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

