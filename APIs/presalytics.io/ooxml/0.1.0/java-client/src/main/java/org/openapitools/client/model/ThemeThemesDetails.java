/*
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.SlideSlidesDetails;
import org.openapitools.client.model.ThemeBackgroundFillsDetails;
import org.openapitools.client.model.ThemeColorsDetails;
import org.openapitools.client.model.ThemeCustomColorsDetails;
import org.openapitools.client.model.ThemeEffectMapDetails;
import org.openapitools.client.model.ThemeFillsDetails;
import org.openapitools.client.model.ThemeFontsDetails;
import org.openapitools.client.model.ThemeLineMapDetails;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ThemeThemesDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:20.731713-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ThemeThemesDetails {
  public static final String SERIALIZED_NAME_BACKGROUND_FILLS = "backgroundFills";
  @SerializedName(SERIALIZED_NAME_BACKGROUND_FILLS)
  private List<ThemeBackgroundFillsDetails> backgroundFills;

  public static final String SERIALIZED_NAME_BASE_ELEMENT_BLOB_URL = "baseElementBlobUrl";
  @SerializedName(SERIALIZED_NAME_BASE_ELEMENT_BLOB_URL)
  private String baseElementBlobUrl;

  public static final String SERIALIZED_NAME_CHANGED_BASE_ELEMENT_BLOB_URL = "changedBaseElementBlobUrl";
  @SerializedName(SERIALIZED_NAME_CHANGED_BASE_ELEMENT_BLOB_URL)
  private String changedBaseElementBlobUrl;

  public static final String SERIALIZED_NAME_COLORS = "colors";
  @SerializedName(SERIALIZED_NAME_COLORS)
  private ThemeColorsDetails colors;

  public static final String SERIALIZED_NAME_CUSTOM_COLORS = "customColors";
  @SerializedName(SERIALIZED_NAME_CUSTOM_COLORS)
  private List<ThemeCustomColorsDetails> customColors;

  public static final String SERIALIZED_NAME_DATE_CREATED = "dateCreated";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private OffsetDateTime dateCreated;

  public static final String SERIALIZED_NAME_DATE_MODIFIED = "dateModified";
  @SerializedName(SERIALIZED_NAME_DATE_MODIFIED)
  private OffsetDateTime dateModified;

  public static final String SERIALIZED_NAME_EFFECT_MAPS = "effectMaps";
  @SerializedName(SERIALIZED_NAME_EFFECT_MAPS)
  private List<ThemeEffectMapDetails> effectMaps;

  public static final String SERIALIZED_NAME_FILLS = "fills";
  @SerializedName(SERIALIZED_NAME_FILLS)
  private List<ThemeFillsDetails> fills;

  public static final String SERIALIZED_NAME_FONTS = "fonts";
  @SerializedName(SERIALIZED_NAME_FONTS)
  private ThemeFontsDetails fonts;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_LINE_MAPS = "lineMaps";
  @SerializedName(SERIALIZED_NAME_LINE_MAPS)
  private List<ThemeLineMapDetails> lineMaps;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PACKAGE_URI = "packageUri";
  @SerializedName(SERIALIZED_NAME_PACKAGE_URI)
  private String packageUri;

  public static final String SERIALIZED_NAME_SLIDE = "slide";
  @SerializedName(SERIALIZED_NAME_SLIDE)
  private SlideSlidesDetails slide;

  public static final String SERIALIZED_NAME_SLIDE_ID = "slideId";
  @SerializedName(SERIALIZED_NAME_SLIDE_ID)
  private UUID slideId;

  public static final String SERIALIZED_NAME_USER_CREATED = "userCreated";
  @SerializedName(SERIALIZED_NAME_USER_CREATED)
  private UUID userCreated;

  public static final String SERIALIZED_NAME_USER_MODIFIED = "userModified";
  @SerializedName(SERIALIZED_NAME_USER_MODIFIED)
  private UUID userModified;

  public ThemeThemesDetails() {
  }

  public ThemeThemesDetails backgroundFills(List<ThemeBackgroundFillsDetails> backgroundFills) {
    this.backgroundFills = backgroundFills;
    return this;
  }

  public ThemeThemesDetails addBackgroundFillsItem(ThemeBackgroundFillsDetails backgroundFillsItem) {
    if (this.backgroundFills == null) {
      this.backgroundFills = new ArrayList<>();
    }
    this.backgroundFills.add(backgroundFillsItem);
    return this;
  }

  /**
   * Get backgroundFills
   * @return backgroundFills
   */
  @javax.annotation.Nullable
  public List<ThemeBackgroundFillsDetails> getBackgroundFills() {
    return backgroundFills;
  }

  public void setBackgroundFills(List<ThemeBackgroundFillsDetails> backgroundFills) {
    this.backgroundFills = backgroundFills;
  }


  public ThemeThemesDetails baseElementBlobUrl(String baseElementBlobUrl) {
    this.baseElementBlobUrl = baseElementBlobUrl;
    return this;
  }

  /**
   * Get baseElementBlobUrl
   * @return baseElementBlobUrl
   */
  @javax.annotation.Nullable
  public String getBaseElementBlobUrl() {
    return baseElementBlobUrl;
  }

  public void setBaseElementBlobUrl(String baseElementBlobUrl) {
    this.baseElementBlobUrl = baseElementBlobUrl;
  }


  public ThemeThemesDetails changedBaseElementBlobUrl(String changedBaseElementBlobUrl) {
    this.changedBaseElementBlobUrl = changedBaseElementBlobUrl;
    return this;
  }

  /**
   * Get changedBaseElementBlobUrl
   * @return changedBaseElementBlobUrl
   */
  @javax.annotation.Nullable
  public String getChangedBaseElementBlobUrl() {
    return changedBaseElementBlobUrl;
  }

  public void setChangedBaseElementBlobUrl(String changedBaseElementBlobUrl) {
    this.changedBaseElementBlobUrl = changedBaseElementBlobUrl;
  }


  public ThemeThemesDetails colors(ThemeColorsDetails colors) {
    this.colors = colors;
    return this;
  }

  /**
   * Get colors
   * @return colors
   */
  @javax.annotation.Nullable
  public ThemeColorsDetails getColors() {
    return colors;
  }

  public void setColors(ThemeColorsDetails colors) {
    this.colors = colors;
  }


  public ThemeThemesDetails customColors(List<ThemeCustomColorsDetails> customColors) {
    this.customColors = customColors;
    return this;
  }

  public ThemeThemesDetails addCustomColorsItem(ThemeCustomColorsDetails customColorsItem) {
    if (this.customColors == null) {
      this.customColors = new ArrayList<>();
    }
    this.customColors.add(customColorsItem);
    return this;
  }

  /**
   * Get customColors
   * @return customColors
   */
  @javax.annotation.Nullable
  public List<ThemeCustomColorsDetails> getCustomColors() {
    return customColors;
  }

  public void setCustomColors(List<ThemeCustomColorsDetails> customColors) {
    this.customColors = customColors;
  }


  public ThemeThemesDetails dateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
    return this;
  }

  /**
   * Get dateCreated
   * @return dateCreated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }

  public void setDateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
  }


  public ThemeThemesDetails dateModified(OffsetDateTime dateModified) {
    this.dateModified = dateModified;
    return this;
  }

  /**
   * Get dateModified
   * @return dateModified
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateModified() {
    return dateModified;
  }

  public void setDateModified(OffsetDateTime dateModified) {
    this.dateModified = dateModified;
  }


  public ThemeThemesDetails effectMaps(List<ThemeEffectMapDetails> effectMaps) {
    this.effectMaps = effectMaps;
    return this;
  }

  public ThemeThemesDetails addEffectMapsItem(ThemeEffectMapDetails effectMapsItem) {
    if (this.effectMaps == null) {
      this.effectMaps = new ArrayList<>();
    }
    this.effectMaps.add(effectMapsItem);
    return this;
  }

  /**
   * Get effectMaps
   * @return effectMaps
   */
  @javax.annotation.Nullable
  public List<ThemeEffectMapDetails> getEffectMaps() {
    return effectMaps;
  }

  public void setEffectMaps(List<ThemeEffectMapDetails> effectMaps) {
    this.effectMaps = effectMaps;
  }


  public ThemeThemesDetails fills(List<ThemeFillsDetails> fills) {
    this.fills = fills;
    return this;
  }

  public ThemeThemesDetails addFillsItem(ThemeFillsDetails fillsItem) {
    if (this.fills == null) {
      this.fills = new ArrayList<>();
    }
    this.fills.add(fillsItem);
    return this;
  }

  /**
   * Get fills
   * @return fills
   */
  @javax.annotation.Nullable
  public List<ThemeFillsDetails> getFills() {
    return fills;
  }

  public void setFills(List<ThemeFillsDetails> fills) {
    this.fills = fills;
  }


  public ThemeThemesDetails fonts(ThemeFontsDetails fonts) {
    this.fonts = fonts;
    return this;
  }

  /**
   * Get fonts
   * @return fonts
   */
  @javax.annotation.Nullable
  public ThemeFontsDetails getFonts() {
    return fonts;
  }

  public void setFonts(ThemeFontsDetails fonts) {
    this.fonts = fonts;
  }


  public ThemeThemesDetails id(UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }


  public ThemeThemesDetails lineMaps(List<ThemeLineMapDetails> lineMaps) {
    this.lineMaps = lineMaps;
    return this;
  }

  public ThemeThemesDetails addLineMapsItem(ThemeLineMapDetails lineMapsItem) {
    if (this.lineMaps == null) {
      this.lineMaps = new ArrayList<>();
    }
    this.lineMaps.add(lineMapsItem);
    return this;
  }

  /**
   * Get lineMaps
   * @return lineMaps
   */
  @javax.annotation.Nullable
  public List<ThemeLineMapDetails> getLineMaps() {
    return lineMaps;
  }

  public void setLineMaps(List<ThemeLineMapDetails> lineMaps) {
    this.lineMaps = lineMaps;
  }


  public ThemeThemesDetails name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ThemeThemesDetails packageUri(String packageUri) {
    this.packageUri = packageUri;
    return this;
  }

  /**
   * Get packageUri
   * @return packageUri
   */
  @javax.annotation.Nullable
  public String getPackageUri() {
    return packageUri;
  }

  public void setPackageUri(String packageUri) {
    this.packageUri = packageUri;
  }


  public ThemeThemesDetails slide(SlideSlidesDetails slide) {
    this.slide = slide;
    return this;
  }

  /**
   * Get slide
   * @return slide
   */
  @javax.annotation.Nullable
  public SlideSlidesDetails getSlide() {
    return slide;
  }

  public void setSlide(SlideSlidesDetails slide) {
    this.slide = slide;
  }


  public ThemeThemesDetails slideId(UUID slideId) {
    this.slideId = slideId;
    return this;
  }

  /**
   * Get slideId
   * @return slideId
   */
  @javax.annotation.Nullable
  public UUID getSlideId() {
    return slideId;
  }

  public void setSlideId(UUID slideId) {
    this.slideId = slideId;
  }


  public ThemeThemesDetails userCreated(UUID userCreated) {
    this.userCreated = userCreated;
    return this;
  }

  /**
   * Get userCreated
   * @return userCreated
   */
  @javax.annotation.Nullable
  public UUID getUserCreated() {
    return userCreated;
  }

  public void setUserCreated(UUID userCreated) {
    this.userCreated = userCreated;
  }


  public ThemeThemesDetails userModified(UUID userModified) {
    this.userModified = userModified;
    return this;
  }

  /**
   * Get userModified
   * @return userModified
   */
  @javax.annotation.Nullable
  public UUID getUserModified() {
    return userModified;
  }

  public void setUserModified(UUID userModified) {
    this.userModified = userModified;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ThemeThemesDetails themeThemesDetails = (ThemeThemesDetails) o;
    return Objects.equals(this.backgroundFills, themeThemesDetails.backgroundFills) &&
        Objects.equals(this.baseElementBlobUrl, themeThemesDetails.baseElementBlobUrl) &&
        Objects.equals(this.changedBaseElementBlobUrl, themeThemesDetails.changedBaseElementBlobUrl) &&
        Objects.equals(this.colors, themeThemesDetails.colors) &&
        Objects.equals(this.customColors, themeThemesDetails.customColors) &&
        Objects.equals(this.dateCreated, themeThemesDetails.dateCreated) &&
        Objects.equals(this.dateModified, themeThemesDetails.dateModified) &&
        Objects.equals(this.effectMaps, themeThemesDetails.effectMaps) &&
        Objects.equals(this.fills, themeThemesDetails.fills) &&
        Objects.equals(this.fonts, themeThemesDetails.fonts) &&
        Objects.equals(this.id, themeThemesDetails.id) &&
        Objects.equals(this.lineMaps, themeThemesDetails.lineMaps) &&
        Objects.equals(this.name, themeThemesDetails.name) &&
        Objects.equals(this.packageUri, themeThemesDetails.packageUri) &&
        Objects.equals(this.slide, themeThemesDetails.slide) &&
        Objects.equals(this.slideId, themeThemesDetails.slideId) &&
        Objects.equals(this.userCreated, themeThemesDetails.userCreated) &&
        Objects.equals(this.userModified, themeThemesDetails.userModified);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(backgroundFills, baseElementBlobUrl, changedBaseElementBlobUrl, colors, customColors, dateCreated, dateModified, effectMaps, fills, fonts, id, lineMaps, name, packageUri, slide, slideId, userCreated, userModified);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ThemeThemesDetails {\n");
    sb.append("    backgroundFills: ").append(toIndentedString(backgroundFills)).append("\n");
    sb.append("    baseElementBlobUrl: ").append(toIndentedString(baseElementBlobUrl)).append("\n");
    sb.append("    changedBaseElementBlobUrl: ").append(toIndentedString(changedBaseElementBlobUrl)).append("\n");
    sb.append("    colors: ").append(toIndentedString(colors)).append("\n");
    sb.append("    customColors: ").append(toIndentedString(customColors)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateModified: ").append(toIndentedString(dateModified)).append("\n");
    sb.append("    effectMaps: ").append(toIndentedString(effectMaps)).append("\n");
    sb.append("    fills: ").append(toIndentedString(fills)).append("\n");
    sb.append("    fonts: ").append(toIndentedString(fonts)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lineMaps: ").append(toIndentedString(lineMaps)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    packageUri: ").append(toIndentedString(packageUri)).append("\n");
    sb.append("    slide: ").append(toIndentedString(slide)).append("\n");
    sb.append("    slideId: ").append(toIndentedString(slideId)).append("\n");
    sb.append("    userCreated: ").append(toIndentedString(userCreated)).append("\n");
    sb.append("    userModified: ").append(toIndentedString(userModified)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backgroundFills");
    openapiFields.add("baseElementBlobUrl");
    openapiFields.add("changedBaseElementBlobUrl");
    openapiFields.add("colors");
    openapiFields.add("customColors");
    openapiFields.add("dateCreated");
    openapiFields.add("dateModified");
    openapiFields.add("effectMaps");
    openapiFields.add("fills");
    openapiFields.add("fonts");
    openapiFields.add("id");
    openapiFields.add("lineMaps");
    openapiFields.add("name");
    openapiFields.add("packageUri");
    openapiFields.add("slide");
    openapiFields.add("slideId");
    openapiFields.add("userCreated");
    openapiFields.add("userModified");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ThemeThemesDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ThemeThemesDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ThemeThemesDetails is not found in the empty JSON string", ThemeThemesDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ThemeThemesDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ThemeThemesDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("backgroundFills") != null && !jsonObj.get("backgroundFills").isJsonNull()) {
        JsonArray jsonArraybackgroundFills = jsonObj.getAsJsonArray("backgroundFills");
        if (jsonArraybackgroundFills != null) {
          // ensure the json data is an array
          if (!jsonObj.get("backgroundFills").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `backgroundFills` to be an array in the JSON string but got `%s`", jsonObj.get("backgroundFills").toString()));
          }

          // validate the optional field `backgroundFills` (array)
          for (int i = 0; i < jsonArraybackgroundFills.size(); i++) {
            ThemeBackgroundFillsDetails.validateJsonElement(jsonArraybackgroundFills.get(i));
          };
        }
      }
      if ((jsonObj.get("baseElementBlobUrl") != null && !jsonObj.get("baseElementBlobUrl").isJsonNull()) && !jsonObj.get("baseElementBlobUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `baseElementBlobUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("baseElementBlobUrl").toString()));
      }
      if ((jsonObj.get("changedBaseElementBlobUrl") != null && !jsonObj.get("changedBaseElementBlobUrl").isJsonNull()) && !jsonObj.get("changedBaseElementBlobUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `changedBaseElementBlobUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("changedBaseElementBlobUrl").toString()));
      }
      // validate the optional field `colors`
      if (jsonObj.get("colors") != null && !jsonObj.get("colors").isJsonNull()) {
        ThemeColorsDetails.validateJsonElement(jsonObj.get("colors"));
      }
      if (jsonObj.get("customColors") != null && !jsonObj.get("customColors").isJsonNull()) {
        JsonArray jsonArraycustomColors = jsonObj.getAsJsonArray("customColors");
        if (jsonArraycustomColors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("customColors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `customColors` to be an array in the JSON string but got `%s`", jsonObj.get("customColors").toString()));
          }

          // validate the optional field `customColors` (array)
          for (int i = 0; i < jsonArraycustomColors.size(); i++) {
            ThemeCustomColorsDetails.validateJsonElement(jsonArraycustomColors.get(i));
          };
        }
      }
      if (jsonObj.get("effectMaps") != null && !jsonObj.get("effectMaps").isJsonNull()) {
        JsonArray jsonArrayeffectMaps = jsonObj.getAsJsonArray("effectMaps");
        if (jsonArrayeffectMaps != null) {
          // ensure the json data is an array
          if (!jsonObj.get("effectMaps").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `effectMaps` to be an array in the JSON string but got `%s`", jsonObj.get("effectMaps").toString()));
          }

          // validate the optional field `effectMaps` (array)
          for (int i = 0; i < jsonArrayeffectMaps.size(); i++) {
            ThemeEffectMapDetails.validateJsonElement(jsonArrayeffectMaps.get(i));
          };
        }
      }
      if (jsonObj.get("fills") != null && !jsonObj.get("fills").isJsonNull()) {
        JsonArray jsonArrayfills = jsonObj.getAsJsonArray("fills");
        if (jsonArrayfills != null) {
          // ensure the json data is an array
          if (!jsonObj.get("fills").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `fills` to be an array in the JSON string but got `%s`", jsonObj.get("fills").toString()));
          }

          // validate the optional field `fills` (array)
          for (int i = 0; i < jsonArrayfills.size(); i++) {
            ThemeFillsDetails.validateJsonElement(jsonArrayfills.get(i));
          };
        }
      }
      // validate the optional field `fonts`
      if (jsonObj.get("fonts") != null && !jsonObj.get("fonts").isJsonNull()) {
        ThemeFontsDetails.validateJsonElement(jsonObj.get("fonts"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("lineMaps") != null && !jsonObj.get("lineMaps").isJsonNull()) {
        JsonArray jsonArraylineMaps = jsonObj.getAsJsonArray("lineMaps");
        if (jsonArraylineMaps != null) {
          // ensure the json data is an array
          if (!jsonObj.get("lineMaps").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `lineMaps` to be an array in the JSON string but got `%s`", jsonObj.get("lineMaps").toString()));
          }

          // validate the optional field `lineMaps` (array)
          for (int i = 0; i < jsonArraylineMaps.size(); i++) {
            ThemeLineMapDetails.validateJsonElement(jsonArraylineMaps.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("packageUri") != null && !jsonObj.get("packageUri").isJsonNull()) && !jsonObj.get("packageUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `packageUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("packageUri").toString()));
      }
      // validate the optional field `slide`
      if (jsonObj.get("slide") != null && !jsonObj.get("slide").isJsonNull()) {
        SlideSlidesDetails.validateJsonElement(jsonObj.get("slide"));
      }
      if ((jsonObj.get("slideId") != null && !jsonObj.get("slideId").isJsonNull()) && !jsonObj.get("slideId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slideId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slideId").toString()));
      }
      if ((jsonObj.get("userCreated") != null && !jsonObj.get("userCreated").isJsonNull()) && !jsonObj.get("userCreated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userCreated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userCreated").toString()));
      }
      if ((jsonObj.get("userModified") != null && !jsonObj.get("userModified").isJsonNull()) && !jsonObj.get("userModified").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userModified` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userModified").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ThemeThemesDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ThemeThemesDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ThemeThemesDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ThemeThemesDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<ThemeThemesDetails>() {
           @Override
           public void write(JsonWriter out, ThemeThemesDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ThemeThemesDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ThemeThemesDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ThemeThemesDetails
   * @throws IOException if the JSON string is invalid with respect to ThemeThemesDetails
   */
  public static ThemeThemesDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ThemeThemesDetails.class);
  }

  /**
   * Convert an instance of ThemeThemesDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

