/*
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SlideGroupElements
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:20.731713-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SlideGroupElements {
  public static final String SERIALIZED_NAME_GROUP_ELEMENT_TYPE_ID = "groupElementTypeId";
  @SerializedName(SERIALIZED_NAME_GROUP_ELEMENT_TYPE_ID)
  private Integer groupElementTypeId;

  public static final String SERIALIZED_NAME_GROUP_ELEMENT_TYPE_PK = "groupElementTypePk";
  @SerializedName(SERIALIZED_NAME_GROUP_ELEMENT_TYPE_PK)
  private UUID groupElementTypePk;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_PARENT_GROUP_ELEMENT_ID = "parentGroupElementId";
  @SerializedName(SERIALIZED_NAME_PARENT_GROUP_ELEMENT_ID)
  private UUID parentGroupElementId;

  public static final String SERIALIZED_NAME_SHAPE_TREE_ID = "shapeTreeId";
  @SerializedName(SERIALIZED_NAME_SHAPE_TREE_ID)
  private UUID shapeTreeId;

  public static final String SERIALIZED_NAME_ULTIMATE_PARENT_SHAPE_TREE_ID = "ultimateParentShapeTreeId";
  @SerializedName(SERIALIZED_NAME_ULTIMATE_PARENT_SHAPE_TREE_ID)
  private UUID ultimateParentShapeTreeId;

  public SlideGroupElements() {
  }

  public SlideGroupElements groupElementTypeId(Integer groupElementTypeId) {
    this.groupElementTypeId = groupElementTypeId;
    return this;
  }

  /**
   * Get groupElementTypeId
   * @return groupElementTypeId
   */
  @javax.annotation.Nullable
  public Integer getGroupElementTypeId() {
    return groupElementTypeId;
  }

  public void setGroupElementTypeId(Integer groupElementTypeId) {
    this.groupElementTypeId = groupElementTypeId;
  }


  public SlideGroupElements groupElementTypePk(UUID groupElementTypePk) {
    this.groupElementTypePk = groupElementTypePk;
    return this;
  }

  /**
   * Get groupElementTypePk
   * @return groupElementTypePk
   */
  @javax.annotation.Nullable
  public UUID getGroupElementTypePk() {
    return groupElementTypePk;
  }

  public void setGroupElementTypePk(UUID groupElementTypePk) {
    this.groupElementTypePk = groupElementTypePk;
  }


  public SlideGroupElements id(UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }


  public SlideGroupElements parentGroupElementId(UUID parentGroupElementId) {
    this.parentGroupElementId = parentGroupElementId;
    return this;
  }

  /**
   * Get parentGroupElementId
   * @return parentGroupElementId
   */
  @javax.annotation.Nullable
  public UUID getParentGroupElementId() {
    return parentGroupElementId;
  }

  public void setParentGroupElementId(UUID parentGroupElementId) {
    this.parentGroupElementId = parentGroupElementId;
  }


  public SlideGroupElements shapeTreeId(UUID shapeTreeId) {
    this.shapeTreeId = shapeTreeId;
    return this;
  }

  /**
   * Get shapeTreeId
   * @return shapeTreeId
   */
  @javax.annotation.Nullable
  public UUID getShapeTreeId() {
    return shapeTreeId;
  }

  public void setShapeTreeId(UUID shapeTreeId) {
    this.shapeTreeId = shapeTreeId;
  }


  public SlideGroupElements ultimateParentShapeTreeId(UUID ultimateParentShapeTreeId) {
    this.ultimateParentShapeTreeId = ultimateParentShapeTreeId;
    return this;
  }

  /**
   * Get ultimateParentShapeTreeId
   * @return ultimateParentShapeTreeId
   */
  @javax.annotation.Nullable
  public UUID getUltimateParentShapeTreeId() {
    return ultimateParentShapeTreeId;
  }

  public void setUltimateParentShapeTreeId(UUID ultimateParentShapeTreeId) {
    this.ultimateParentShapeTreeId = ultimateParentShapeTreeId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SlideGroupElements slideGroupElements = (SlideGroupElements) o;
    return Objects.equals(this.groupElementTypeId, slideGroupElements.groupElementTypeId) &&
        Objects.equals(this.groupElementTypePk, slideGroupElements.groupElementTypePk) &&
        Objects.equals(this.id, slideGroupElements.id) &&
        Objects.equals(this.parentGroupElementId, slideGroupElements.parentGroupElementId) &&
        Objects.equals(this.shapeTreeId, slideGroupElements.shapeTreeId) &&
        Objects.equals(this.ultimateParentShapeTreeId, slideGroupElements.ultimateParentShapeTreeId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(groupElementTypeId, groupElementTypePk, id, parentGroupElementId, shapeTreeId, ultimateParentShapeTreeId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SlideGroupElements {\n");
    sb.append("    groupElementTypeId: ").append(toIndentedString(groupElementTypeId)).append("\n");
    sb.append("    groupElementTypePk: ").append(toIndentedString(groupElementTypePk)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    parentGroupElementId: ").append(toIndentedString(parentGroupElementId)).append("\n");
    sb.append("    shapeTreeId: ").append(toIndentedString(shapeTreeId)).append("\n");
    sb.append("    ultimateParentShapeTreeId: ").append(toIndentedString(ultimateParentShapeTreeId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("groupElementTypeId");
    openapiFields.add("groupElementTypePk");
    openapiFields.add("id");
    openapiFields.add("parentGroupElementId");
    openapiFields.add("shapeTreeId");
    openapiFields.add("ultimateParentShapeTreeId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SlideGroupElements
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SlideGroupElements.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SlideGroupElements is not found in the empty JSON string", SlideGroupElements.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SlideGroupElements.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SlideGroupElements` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("groupElementTypePk") != null && !jsonObj.get("groupElementTypePk").isJsonNull()) && !jsonObj.get("groupElementTypePk").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupElementTypePk` to be a primitive type in the JSON string but got `%s`", jsonObj.get("groupElementTypePk").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("parentGroupElementId") != null && !jsonObj.get("parentGroupElementId").isJsonNull()) && !jsonObj.get("parentGroupElementId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentGroupElementId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentGroupElementId").toString()));
      }
      if ((jsonObj.get("shapeTreeId") != null && !jsonObj.get("shapeTreeId").isJsonNull()) && !jsonObj.get("shapeTreeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shapeTreeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shapeTreeId").toString()));
      }
      if ((jsonObj.get("ultimateParentShapeTreeId") != null && !jsonObj.get("ultimateParentShapeTreeId").isJsonNull()) && !jsonObj.get("ultimateParentShapeTreeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ultimateParentShapeTreeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ultimateParentShapeTreeId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SlideGroupElements.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SlideGroupElements' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SlideGroupElements> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SlideGroupElements.class));

       return (TypeAdapter<T>) new TypeAdapter<SlideGroupElements>() {
           @Override
           public void write(JsonWriter out, SlideGroupElements value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SlideGroupElements read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SlideGroupElements given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SlideGroupElements
   * @throws IOException if the JSON string is invalid with respect to SlideGroupElements
   */
  public static SlideGroupElements fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SlideGroupElements.class);
  }

  /**
   * Convert an instance of SlideGroupElements to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

