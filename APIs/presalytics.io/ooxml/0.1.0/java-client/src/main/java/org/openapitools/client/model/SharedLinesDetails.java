/*
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.SharedSolidFillsDetails;
import org.openapitools.client.model.SlideConnectorDetails;
import org.openapitools.client.model.SlideShapesDetails;
import org.openapitools.client.model.TableBordersDetails;
import org.openapitools.client.model.ThemeLineMapDetails;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SharedLinesDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:20.731713-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SharedLinesDetails {
  public static final String SERIALIZED_NAME_B_LTO_T_R_BORDER = "bLtoTRBorder";
  @SerializedName(SERIALIZED_NAME_B_LTO_T_R_BORDER)
  private TableBordersDetails bLtoTRBorder;

  public static final String SERIALIZED_NAME_B_LTO_T_R_BORDER_ID = "bLtoTRBorderId";
  @SerializedName(SERIALIZED_NAME_B_LTO_T_R_BORDER_ID)
  private UUID bLtoTRBorderId;

  public static final String SERIALIZED_NAME_BOTTOM_BORDER = "bottomBorder";
  @SerializedName(SERIALIZED_NAME_BOTTOM_BORDER)
  private TableBordersDetails bottomBorder;

  public static final String SERIALIZED_NAME_BOTTOM_BORDER_ID = "bottomBorderId";
  @SerializedName(SERIALIZED_NAME_BOTTOM_BORDER_ID)
  private UUID bottomBorderId;

  public static final String SERIALIZED_NAME_CONNECTOR_ID = "connectorId";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_ID)
  private UUID connectorId;

  public static final String SERIALIZED_NAME_DASH_TYPE_ID = "dashTypeId";
  @SerializedName(SERIALIZED_NAME_DASH_TYPE_ID)
  private Integer dashTypeId;

  public static final String SERIALIZED_NAME_DATE_CREATED = "dateCreated";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private OffsetDateTime dateCreated;

  public static final String SERIALIZED_NAME_DATE_MODIFIED = "dateModified";
  @SerializedName(SERIALIZED_NAME_DATE_MODIFIED)
  private OffsetDateTime dateModified;

  public static final String SERIALIZED_NAME_HEAD_END_HEIGHT_ID = "headEndHeightId";
  @SerializedName(SERIALIZED_NAME_HEAD_END_HEIGHT_ID)
  private Integer headEndHeightId;

  public static final String SERIALIZED_NAME_HEAD_END_TYPE_ID = "headEndTypeId";
  @SerializedName(SERIALIZED_NAME_HEAD_END_TYPE_ID)
  private Integer headEndTypeId;

  public static final String SERIALIZED_NAME_HEAD_END_WIDTH_ID = "headEndWidthId";
  @SerializedName(SERIALIZED_NAME_HEAD_END_WIDTH_ID)
  private Integer headEndWidthId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_LEFT_BORDER = "leftBorder";
  @SerializedName(SERIALIZED_NAME_LEFT_BORDER)
  private TableBordersDetails leftBorder;

  public static final String SERIALIZED_NAME_LEFT_BORDER_ID = "leftBorderId";
  @SerializedName(SERIALIZED_NAME_LEFT_BORDER_ID)
  private UUID leftBorderId;

  public static final String SERIALIZED_NAME_LINE_COLOR_SOLID_FILL = "lineColorSolidFill";
  @SerializedName(SERIALIZED_NAME_LINE_COLOR_SOLID_FILL)
  private SharedSolidFillsDetails lineColorSolidFill;

  public static final String SERIALIZED_NAME_LINE_MAP = "lineMap";
  @SerializedName(SERIALIZED_NAME_LINE_MAP)
  private ThemeLineMapDetails lineMap;

  public static final String SERIALIZED_NAME_LINE_MAP_ID = "lineMapId";
  @SerializedName(SERIALIZED_NAME_LINE_MAP_ID)
  private UUID lineMapId;

  public static final String SERIALIZED_NAME_PARENT_CONNECTOR = "parentConnector";
  @SerializedName(SERIALIZED_NAME_PARENT_CONNECTOR)
  private SlideConnectorDetails parentConnector;

  public static final String SERIALIZED_NAME_PARENT_SHAPE = "parentShape";
  @SerializedName(SERIALIZED_NAME_PARENT_SHAPE)
  private SlideShapesDetails parentShape;

  public static final String SERIALIZED_NAME_RIGHT_BORDER = "rightBorder";
  @SerializedName(SERIALIZED_NAME_RIGHT_BORDER)
  private TableBordersDetails rightBorder;

  public static final String SERIALIZED_NAME_RIGHT_BORDER_ID = "rightBorderId";
  @SerializedName(SERIALIZED_NAME_RIGHT_BORDER_ID)
  private UUID rightBorderId;

  public static final String SERIALIZED_NAME_SHAPE_ID = "shapeId";
  @SerializedName(SERIALIZED_NAME_SHAPE_ID)
  private UUID shapeId;

  public static final String SERIALIZED_NAME_T_LTO_B_R_BORDER = "tLtoBRBorder";
  @SerializedName(SERIALIZED_NAME_T_LTO_B_R_BORDER)
  private TableBordersDetails tLtoBRBorder;

  public static final String SERIALIZED_NAME_T_LTO_B_R_BORDER_ID = "tLtoBRBorderId";
  @SerializedName(SERIALIZED_NAME_T_LTO_B_R_BORDER_ID)
  private UUID tLtoBRBorderId;

  public static final String SERIALIZED_NAME_TAIL_END_HEIGHT_ID = "tailEndHeightId";
  @SerializedName(SERIALIZED_NAME_TAIL_END_HEIGHT_ID)
  private Integer tailEndHeightId;

  public static final String SERIALIZED_NAME_TAIL_END_TYPE_ID = "tailEndTypeId";
  @SerializedName(SERIALIZED_NAME_TAIL_END_TYPE_ID)
  private Integer tailEndTypeId;

  public static final String SERIALIZED_NAME_TAIL_END_WIDTH_ID = "tailEndWidthId";
  @SerializedName(SERIALIZED_NAME_TAIL_END_WIDTH_ID)
  private Integer tailEndWidthId;

  public static final String SERIALIZED_NAME_TOP_BORDER = "topBorder";
  @SerializedName(SERIALIZED_NAME_TOP_BORDER)
  private TableBordersDetails topBorder;

  public static final String SERIALIZED_NAME_TOP_BORDER_ID = "topBorderId";
  @SerializedName(SERIALIZED_NAME_TOP_BORDER_ID)
  private UUID topBorderId;

  public static final String SERIALIZED_NAME_USER_CREATED = "userCreated";
  @SerializedName(SERIALIZED_NAME_USER_CREATED)
  private UUID userCreated;

  public static final String SERIALIZED_NAME_USER_MODIFIED = "userModified";
  @SerializedName(SERIALIZED_NAME_USER_MODIFIED)
  private UUID userModified;

  public static final String SERIALIZED_NAME_WEIGHT = "weight";
  @SerializedName(SERIALIZED_NAME_WEIGHT)
  private Integer weight;

  public SharedLinesDetails() {
  }

  public SharedLinesDetails bLtoTRBorder(TableBordersDetails bLtoTRBorder) {
    this.bLtoTRBorder = bLtoTRBorder;
    return this;
  }

  /**
   * Get bLtoTRBorder
   * @return bLtoTRBorder
   */
  @javax.annotation.Nullable
  public TableBordersDetails getbLtoTRBorder() {
    return bLtoTRBorder;
  }

  public void setbLtoTRBorder(TableBordersDetails bLtoTRBorder) {
    this.bLtoTRBorder = bLtoTRBorder;
  }


  public SharedLinesDetails bLtoTRBorderId(UUID bLtoTRBorderId) {
    this.bLtoTRBorderId = bLtoTRBorderId;
    return this;
  }

  /**
   * Get bLtoTRBorderId
   * @return bLtoTRBorderId
   */
  @javax.annotation.Nullable
  public UUID getbLtoTRBorderId() {
    return bLtoTRBorderId;
  }

  public void setbLtoTRBorderId(UUID bLtoTRBorderId) {
    this.bLtoTRBorderId = bLtoTRBorderId;
  }


  public SharedLinesDetails bottomBorder(TableBordersDetails bottomBorder) {
    this.bottomBorder = bottomBorder;
    return this;
  }

  /**
   * Get bottomBorder
   * @return bottomBorder
   */
  @javax.annotation.Nullable
  public TableBordersDetails getBottomBorder() {
    return bottomBorder;
  }

  public void setBottomBorder(TableBordersDetails bottomBorder) {
    this.bottomBorder = bottomBorder;
  }


  public SharedLinesDetails bottomBorderId(UUID bottomBorderId) {
    this.bottomBorderId = bottomBorderId;
    return this;
  }

  /**
   * Get bottomBorderId
   * @return bottomBorderId
   */
  @javax.annotation.Nullable
  public UUID getBottomBorderId() {
    return bottomBorderId;
  }

  public void setBottomBorderId(UUID bottomBorderId) {
    this.bottomBorderId = bottomBorderId;
  }


  public SharedLinesDetails connectorId(UUID connectorId) {
    this.connectorId = connectorId;
    return this;
  }

  /**
   * Get connectorId
   * @return connectorId
   */
  @javax.annotation.Nullable
  public UUID getConnectorId() {
    return connectorId;
  }

  public void setConnectorId(UUID connectorId) {
    this.connectorId = connectorId;
  }


  public SharedLinesDetails dashTypeId(Integer dashTypeId) {
    this.dashTypeId = dashTypeId;
    return this;
  }

  /**
   * Get dashTypeId
   * @return dashTypeId
   */
  @javax.annotation.Nullable
  public Integer getDashTypeId() {
    return dashTypeId;
  }

  public void setDashTypeId(Integer dashTypeId) {
    this.dashTypeId = dashTypeId;
  }


  public SharedLinesDetails dateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
    return this;
  }

  /**
   * Get dateCreated
   * @return dateCreated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }

  public void setDateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
  }


  public SharedLinesDetails dateModified(OffsetDateTime dateModified) {
    this.dateModified = dateModified;
    return this;
  }

  /**
   * Get dateModified
   * @return dateModified
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateModified() {
    return dateModified;
  }

  public void setDateModified(OffsetDateTime dateModified) {
    this.dateModified = dateModified;
  }


  public SharedLinesDetails headEndHeightId(Integer headEndHeightId) {
    this.headEndHeightId = headEndHeightId;
    return this;
  }

  /**
   * Get headEndHeightId
   * @return headEndHeightId
   */
  @javax.annotation.Nullable
  public Integer getHeadEndHeightId() {
    return headEndHeightId;
  }

  public void setHeadEndHeightId(Integer headEndHeightId) {
    this.headEndHeightId = headEndHeightId;
  }


  public SharedLinesDetails headEndTypeId(Integer headEndTypeId) {
    this.headEndTypeId = headEndTypeId;
    return this;
  }

  /**
   * Get headEndTypeId
   * @return headEndTypeId
   */
  @javax.annotation.Nullable
  public Integer getHeadEndTypeId() {
    return headEndTypeId;
  }

  public void setHeadEndTypeId(Integer headEndTypeId) {
    this.headEndTypeId = headEndTypeId;
  }


  public SharedLinesDetails headEndWidthId(Integer headEndWidthId) {
    this.headEndWidthId = headEndWidthId;
    return this;
  }

  /**
   * Get headEndWidthId
   * @return headEndWidthId
   */
  @javax.annotation.Nullable
  public Integer getHeadEndWidthId() {
    return headEndWidthId;
  }

  public void setHeadEndWidthId(Integer headEndWidthId) {
    this.headEndWidthId = headEndWidthId;
  }


  public SharedLinesDetails id(UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }


  public SharedLinesDetails leftBorder(TableBordersDetails leftBorder) {
    this.leftBorder = leftBorder;
    return this;
  }

  /**
   * Get leftBorder
   * @return leftBorder
   */
  @javax.annotation.Nullable
  public TableBordersDetails getLeftBorder() {
    return leftBorder;
  }

  public void setLeftBorder(TableBordersDetails leftBorder) {
    this.leftBorder = leftBorder;
  }


  public SharedLinesDetails leftBorderId(UUID leftBorderId) {
    this.leftBorderId = leftBorderId;
    return this;
  }

  /**
   * Get leftBorderId
   * @return leftBorderId
   */
  @javax.annotation.Nullable
  public UUID getLeftBorderId() {
    return leftBorderId;
  }

  public void setLeftBorderId(UUID leftBorderId) {
    this.leftBorderId = leftBorderId;
  }


  public SharedLinesDetails lineColorSolidFill(SharedSolidFillsDetails lineColorSolidFill) {
    this.lineColorSolidFill = lineColorSolidFill;
    return this;
  }

  /**
   * Get lineColorSolidFill
   * @return lineColorSolidFill
   */
  @javax.annotation.Nullable
  public SharedSolidFillsDetails getLineColorSolidFill() {
    return lineColorSolidFill;
  }

  public void setLineColorSolidFill(SharedSolidFillsDetails lineColorSolidFill) {
    this.lineColorSolidFill = lineColorSolidFill;
  }


  public SharedLinesDetails lineMap(ThemeLineMapDetails lineMap) {
    this.lineMap = lineMap;
    return this;
  }

  /**
   * Get lineMap
   * @return lineMap
   */
  @javax.annotation.Nullable
  public ThemeLineMapDetails getLineMap() {
    return lineMap;
  }

  public void setLineMap(ThemeLineMapDetails lineMap) {
    this.lineMap = lineMap;
  }


  public SharedLinesDetails lineMapId(UUID lineMapId) {
    this.lineMapId = lineMapId;
    return this;
  }

  /**
   * Get lineMapId
   * @return lineMapId
   */
  @javax.annotation.Nullable
  public UUID getLineMapId() {
    return lineMapId;
  }

  public void setLineMapId(UUID lineMapId) {
    this.lineMapId = lineMapId;
  }


  public SharedLinesDetails parentConnector(SlideConnectorDetails parentConnector) {
    this.parentConnector = parentConnector;
    return this;
  }

  /**
   * Get parentConnector
   * @return parentConnector
   */
  @javax.annotation.Nullable
  public SlideConnectorDetails getParentConnector() {
    return parentConnector;
  }

  public void setParentConnector(SlideConnectorDetails parentConnector) {
    this.parentConnector = parentConnector;
  }


  public SharedLinesDetails parentShape(SlideShapesDetails parentShape) {
    this.parentShape = parentShape;
    return this;
  }

  /**
   * Get parentShape
   * @return parentShape
   */
  @javax.annotation.Nullable
  public SlideShapesDetails getParentShape() {
    return parentShape;
  }

  public void setParentShape(SlideShapesDetails parentShape) {
    this.parentShape = parentShape;
  }


  public SharedLinesDetails rightBorder(TableBordersDetails rightBorder) {
    this.rightBorder = rightBorder;
    return this;
  }

  /**
   * Get rightBorder
   * @return rightBorder
   */
  @javax.annotation.Nullable
  public TableBordersDetails getRightBorder() {
    return rightBorder;
  }

  public void setRightBorder(TableBordersDetails rightBorder) {
    this.rightBorder = rightBorder;
  }


  public SharedLinesDetails rightBorderId(UUID rightBorderId) {
    this.rightBorderId = rightBorderId;
    return this;
  }

  /**
   * Get rightBorderId
   * @return rightBorderId
   */
  @javax.annotation.Nullable
  public UUID getRightBorderId() {
    return rightBorderId;
  }

  public void setRightBorderId(UUID rightBorderId) {
    this.rightBorderId = rightBorderId;
  }


  public SharedLinesDetails shapeId(UUID shapeId) {
    this.shapeId = shapeId;
    return this;
  }

  /**
   * Get shapeId
   * @return shapeId
   */
  @javax.annotation.Nullable
  public UUID getShapeId() {
    return shapeId;
  }

  public void setShapeId(UUID shapeId) {
    this.shapeId = shapeId;
  }


  public SharedLinesDetails tLtoBRBorder(TableBordersDetails tLtoBRBorder) {
    this.tLtoBRBorder = tLtoBRBorder;
    return this;
  }

  /**
   * Get tLtoBRBorder
   * @return tLtoBRBorder
   */
  @javax.annotation.Nullable
  public TableBordersDetails gettLtoBRBorder() {
    return tLtoBRBorder;
  }

  public void settLtoBRBorder(TableBordersDetails tLtoBRBorder) {
    this.tLtoBRBorder = tLtoBRBorder;
  }


  public SharedLinesDetails tLtoBRBorderId(UUID tLtoBRBorderId) {
    this.tLtoBRBorderId = tLtoBRBorderId;
    return this;
  }

  /**
   * Get tLtoBRBorderId
   * @return tLtoBRBorderId
   */
  @javax.annotation.Nullable
  public UUID gettLtoBRBorderId() {
    return tLtoBRBorderId;
  }

  public void settLtoBRBorderId(UUID tLtoBRBorderId) {
    this.tLtoBRBorderId = tLtoBRBorderId;
  }


  public SharedLinesDetails tailEndHeightId(Integer tailEndHeightId) {
    this.tailEndHeightId = tailEndHeightId;
    return this;
  }

  /**
   * Get tailEndHeightId
   * @return tailEndHeightId
   */
  @javax.annotation.Nullable
  public Integer getTailEndHeightId() {
    return tailEndHeightId;
  }

  public void setTailEndHeightId(Integer tailEndHeightId) {
    this.tailEndHeightId = tailEndHeightId;
  }


  public SharedLinesDetails tailEndTypeId(Integer tailEndTypeId) {
    this.tailEndTypeId = tailEndTypeId;
    return this;
  }

  /**
   * Get tailEndTypeId
   * @return tailEndTypeId
   */
  @javax.annotation.Nullable
  public Integer getTailEndTypeId() {
    return tailEndTypeId;
  }

  public void setTailEndTypeId(Integer tailEndTypeId) {
    this.tailEndTypeId = tailEndTypeId;
  }


  public SharedLinesDetails tailEndWidthId(Integer tailEndWidthId) {
    this.tailEndWidthId = tailEndWidthId;
    return this;
  }

  /**
   * Get tailEndWidthId
   * @return tailEndWidthId
   */
  @javax.annotation.Nullable
  public Integer getTailEndWidthId() {
    return tailEndWidthId;
  }

  public void setTailEndWidthId(Integer tailEndWidthId) {
    this.tailEndWidthId = tailEndWidthId;
  }


  public SharedLinesDetails topBorder(TableBordersDetails topBorder) {
    this.topBorder = topBorder;
    return this;
  }

  /**
   * Get topBorder
   * @return topBorder
   */
  @javax.annotation.Nullable
  public TableBordersDetails getTopBorder() {
    return topBorder;
  }

  public void setTopBorder(TableBordersDetails topBorder) {
    this.topBorder = topBorder;
  }


  public SharedLinesDetails topBorderId(UUID topBorderId) {
    this.topBorderId = topBorderId;
    return this;
  }

  /**
   * Get topBorderId
   * @return topBorderId
   */
  @javax.annotation.Nullable
  public UUID getTopBorderId() {
    return topBorderId;
  }

  public void setTopBorderId(UUID topBorderId) {
    this.topBorderId = topBorderId;
  }


  public SharedLinesDetails userCreated(UUID userCreated) {
    this.userCreated = userCreated;
    return this;
  }

  /**
   * Get userCreated
   * @return userCreated
   */
  @javax.annotation.Nullable
  public UUID getUserCreated() {
    return userCreated;
  }

  public void setUserCreated(UUID userCreated) {
    this.userCreated = userCreated;
  }


  public SharedLinesDetails userModified(UUID userModified) {
    this.userModified = userModified;
    return this;
  }

  /**
   * Get userModified
   * @return userModified
   */
  @javax.annotation.Nullable
  public UUID getUserModified() {
    return userModified;
  }

  public void setUserModified(UUID userModified) {
    this.userModified = userModified;
  }


  public SharedLinesDetails weight(Integer weight) {
    this.weight = weight;
    return this;
  }

  /**
   * Get weight
   * @return weight
   */
  @javax.annotation.Nullable
  public Integer getWeight() {
    return weight;
  }

  public void setWeight(Integer weight) {
    this.weight = weight;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SharedLinesDetails sharedLinesDetails = (SharedLinesDetails) o;
    return Objects.equals(this.bLtoTRBorder, sharedLinesDetails.bLtoTRBorder) &&
        Objects.equals(this.bLtoTRBorderId, sharedLinesDetails.bLtoTRBorderId) &&
        Objects.equals(this.bottomBorder, sharedLinesDetails.bottomBorder) &&
        Objects.equals(this.bottomBorderId, sharedLinesDetails.bottomBorderId) &&
        Objects.equals(this.connectorId, sharedLinesDetails.connectorId) &&
        Objects.equals(this.dashTypeId, sharedLinesDetails.dashTypeId) &&
        Objects.equals(this.dateCreated, sharedLinesDetails.dateCreated) &&
        Objects.equals(this.dateModified, sharedLinesDetails.dateModified) &&
        Objects.equals(this.headEndHeightId, sharedLinesDetails.headEndHeightId) &&
        Objects.equals(this.headEndTypeId, sharedLinesDetails.headEndTypeId) &&
        Objects.equals(this.headEndWidthId, sharedLinesDetails.headEndWidthId) &&
        Objects.equals(this.id, sharedLinesDetails.id) &&
        Objects.equals(this.leftBorder, sharedLinesDetails.leftBorder) &&
        Objects.equals(this.leftBorderId, sharedLinesDetails.leftBorderId) &&
        Objects.equals(this.lineColorSolidFill, sharedLinesDetails.lineColorSolidFill) &&
        Objects.equals(this.lineMap, sharedLinesDetails.lineMap) &&
        Objects.equals(this.lineMapId, sharedLinesDetails.lineMapId) &&
        Objects.equals(this.parentConnector, sharedLinesDetails.parentConnector) &&
        Objects.equals(this.parentShape, sharedLinesDetails.parentShape) &&
        Objects.equals(this.rightBorder, sharedLinesDetails.rightBorder) &&
        Objects.equals(this.rightBorderId, sharedLinesDetails.rightBorderId) &&
        Objects.equals(this.shapeId, sharedLinesDetails.shapeId) &&
        Objects.equals(this.tLtoBRBorder, sharedLinesDetails.tLtoBRBorder) &&
        Objects.equals(this.tLtoBRBorderId, sharedLinesDetails.tLtoBRBorderId) &&
        Objects.equals(this.tailEndHeightId, sharedLinesDetails.tailEndHeightId) &&
        Objects.equals(this.tailEndTypeId, sharedLinesDetails.tailEndTypeId) &&
        Objects.equals(this.tailEndWidthId, sharedLinesDetails.tailEndWidthId) &&
        Objects.equals(this.topBorder, sharedLinesDetails.topBorder) &&
        Objects.equals(this.topBorderId, sharedLinesDetails.topBorderId) &&
        Objects.equals(this.userCreated, sharedLinesDetails.userCreated) &&
        Objects.equals(this.userModified, sharedLinesDetails.userModified) &&
        Objects.equals(this.weight, sharedLinesDetails.weight);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(bLtoTRBorder, bLtoTRBorderId, bottomBorder, bottomBorderId, connectorId, dashTypeId, dateCreated, dateModified, headEndHeightId, headEndTypeId, headEndWidthId, id, leftBorder, leftBorderId, lineColorSolidFill, lineMap, lineMapId, parentConnector, parentShape, rightBorder, rightBorderId, shapeId, tLtoBRBorder, tLtoBRBorderId, tailEndHeightId, tailEndTypeId, tailEndWidthId, topBorder, topBorderId, userCreated, userModified, weight);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SharedLinesDetails {\n");
    sb.append("    bLtoTRBorder: ").append(toIndentedString(bLtoTRBorder)).append("\n");
    sb.append("    bLtoTRBorderId: ").append(toIndentedString(bLtoTRBorderId)).append("\n");
    sb.append("    bottomBorder: ").append(toIndentedString(bottomBorder)).append("\n");
    sb.append("    bottomBorderId: ").append(toIndentedString(bottomBorderId)).append("\n");
    sb.append("    connectorId: ").append(toIndentedString(connectorId)).append("\n");
    sb.append("    dashTypeId: ").append(toIndentedString(dashTypeId)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateModified: ").append(toIndentedString(dateModified)).append("\n");
    sb.append("    headEndHeightId: ").append(toIndentedString(headEndHeightId)).append("\n");
    sb.append("    headEndTypeId: ").append(toIndentedString(headEndTypeId)).append("\n");
    sb.append("    headEndWidthId: ").append(toIndentedString(headEndWidthId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    leftBorder: ").append(toIndentedString(leftBorder)).append("\n");
    sb.append("    leftBorderId: ").append(toIndentedString(leftBorderId)).append("\n");
    sb.append("    lineColorSolidFill: ").append(toIndentedString(lineColorSolidFill)).append("\n");
    sb.append("    lineMap: ").append(toIndentedString(lineMap)).append("\n");
    sb.append("    lineMapId: ").append(toIndentedString(lineMapId)).append("\n");
    sb.append("    parentConnector: ").append(toIndentedString(parentConnector)).append("\n");
    sb.append("    parentShape: ").append(toIndentedString(parentShape)).append("\n");
    sb.append("    rightBorder: ").append(toIndentedString(rightBorder)).append("\n");
    sb.append("    rightBorderId: ").append(toIndentedString(rightBorderId)).append("\n");
    sb.append("    shapeId: ").append(toIndentedString(shapeId)).append("\n");
    sb.append("    tLtoBRBorder: ").append(toIndentedString(tLtoBRBorder)).append("\n");
    sb.append("    tLtoBRBorderId: ").append(toIndentedString(tLtoBRBorderId)).append("\n");
    sb.append("    tailEndHeightId: ").append(toIndentedString(tailEndHeightId)).append("\n");
    sb.append("    tailEndTypeId: ").append(toIndentedString(tailEndTypeId)).append("\n");
    sb.append("    tailEndWidthId: ").append(toIndentedString(tailEndWidthId)).append("\n");
    sb.append("    topBorder: ").append(toIndentedString(topBorder)).append("\n");
    sb.append("    topBorderId: ").append(toIndentedString(topBorderId)).append("\n");
    sb.append("    userCreated: ").append(toIndentedString(userCreated)).append("\n");
    sb.append("    userModified: ").append(toIndentedString(userModified)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bLtoTRBorder");
    openapiFields.add("bLtoTRBorderId");
    openapiFields.add("bottomBorder");
    openapiFields.add("bottomBorderId");
    openapiFields.add("connectorId");
    openapiFields.add("dashTypeId");
    openapiFields.add("dateCreated");
    openapiFields.add("dateModified");
    openapiFields.add("headEndHeightId");
    openapiFields.add("headEndTypeId");
    openapiFields.add("headEndWidthId");
    openapiFields.add("id");
    openapiFields.add("leftBorder");
    openapiFields.add("leftBorderId");
    openapiFields.add("lineColorSolidFill");
    openapiFields.add("lineMap");
    openapiFields.add("lineMapId");
    openapiFields.add("parentConnector");
    openapiFields.add("parentShape");
    openapiFields.add("rightBorder");
    openapiFields.add("rightBorderId");
    openapiFields.add("shapeId");
    openapiFields.add("tLtoBRBorder");
    openapiFields.add("tLtoBRBorderId");
    openapiFields.add("tailEndHeightId");
    openapiFields.add("tailEndTypeId");
    openapiFields.add("tailEndWidthId");
    openapiFields.add("topBorder");
    openapiFields.add("topBorderId");
    openapiFields.add("userCreated");
    openapiFields.add("userModified");
    openapiFields.add("weight");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SharedLinesDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SharedLinesDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SharedLinesDetails is not found in the empty JSON string", SharedLinesDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SharedLinesDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SharedLinesDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `bLtoTRBorder`
      if (jsonObj.get("bLtoTRBorder") != null && !jsonObj.get("bLtoTRBorder").isJsonNull()) {
        TableBordersDetails.validateJsonElement(jsonObj.get("bLtoTRBorder"));
      }
      if ((jsonObj.get("bLtoTRBorderId") != null && !jsonObj.get("bLtoTRBorderId").isJsonNull()) && !jsonObj.get("bLtoTRBorderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bLtoTRBorderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bLtoTRBorderId").toString()));
      }
      // validate the optional field `bottomBorder`
      if (jsonObj.get("bottomBorder") != null && !jsonObj.get("bottomBorder").isJsonNull()) {
        TableBordersDetails.validateJsonElement(jsonObj.get("bottomBorder"));
      }
      if ((jsonObj.get("bottomBorderId") != null && !jsonObj.get("bottomBorderId").isJsonNull()) && !jsonObj.get("bottomBorderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bottomBorderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bottomBorderId").toString()));
      }
      if ((jsonObj.get("connectorId") != null && !jsonObj.get("connectorId").isJsonNull()) && !jsonObj.get("connectorId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectorId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectorId").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `leftBorder`
      if (jsonObj.get("leftBorder") != null && !jsonObj.get("leftBorder").isJsonNull()) {
        TableBordersDetails.validateJsonElement(jsonObj.get("leftBorder"));
      }
      if ((jsonObj.get("leftBorderId") != null && !jsonObj.get("leftBorderId").isJsonNull()) && !jsonObj.get("leftBorderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `leftBorderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("leftBorderId").toString()));
      }
      // validate the optional field `lineColorSolidFill`
      if (jsonObj.get("lineColorSolidFill") != null && !jsonObj.get("lineColorSolidFill").isJsonNull()) {
        SharedSolidFillsDetails.validateJsonElement(jsonObj.get("lineColorSolidFill"));
      }
      // validate the optional field `lineMap`
      if (jsonObj.get("lineMap") != null && !jsonObj.get("lineMap").isJsonNull()) {
        ThemeLineMapDetails.validateJsonElement(jsonObj.get("lineMap"));
      }
      if ((jsonObj.get("lineMapId") != null && !jsonObj.get("lineMapId").isJsonNull()) && !jsonObj.get("lineMapId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lineMapId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lineMapId").toString()));
      }
      // validate the optional field `parentConnector`
      if (jsonObj.get("parentConnector") != null && !jsonObj.get("parentConnector").isJsonNull()) {
        SlideConnectorDetails.validateJsonElement(jsonObj.get("parentConnector"));
      }
      // validate the optional field `parentShape`
      if (jsonObj.get("parentShape") != null && !jsonObj.get("parentShape").isJsonNull()) {
        SlideShapesDetails.validateJsonElement(jsonObj.get("parentShape"));
      }
      // validate the optional field `rightBorder`
      if (jsonObj.get("rightBorder") != null && !jsonObj.get("rightBorder").isJsonNull()) {
        TableBordersDetails.validateJsonElement(jsonObj.get("rightBorder"));
      }
      if ((jsonObj.get("rightBorderId") != null && !jsonObj.get("rightBorderId").isJsonNull()) && !jsonObj.get("rightBorderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rightBorderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rightBorderId").toString()));
      }
      if ((jsonObj.get("shapeId") != null && !jsonObj.get("shapeId").isJsonNull()) && !jsonObj.get("shapeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shapeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shapeId").toString()));
      }
      // validate the optional field `tLtoBRBorder`
      if (jsonObj.get("tLtoBRBorder") != null && !jsonObj.get("tLtoBRBorder").isJsonNull()) {
        TableBordersDetails.validateJsonElement(jsonObj.get("tLtoBRBorder"));
      }
      if ((jsonObj.get("tLtoBRBorderId") != null && !jsonObj.get("tLtoBRBorderId").isJsonNull()) && !jsonObj.get("tLtoBRBorderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tLtoBRBorderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tLtoBRBorderId").toString()));
      }
      // validate the optional field `topBorder`
      if (jsonObj.get("topBorder") != null && !jsonObj.get("topBorder").isJsonNull()) {
        TableBordersDetails.validateJsonElement(jsonObj.get("topBorder"));
      }
      if ((jsonObj.get("topBorderId") != null && !jsonObj.get("topBorderId").isJsonNull()) && !jsonObj.get("topBorderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `topBorderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("topBorderId").toString()));
      }
      if ((jsonObj.get("userCreated") != null && !jsonObj.get("userCreated").isJsonNull()) && !jsonObj.get("userCreated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userCreated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userCreated").toString()));
      }
      if ((jsonObj.get("userModified") != null && !jsonObj.get("userModified").isJsonNull()) && !jsonObj.get("userModified").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userModified` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userModified").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SharedLinesDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SharedLinesDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SharedLinesDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SharedLinesDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<SharedLinesDetails>() {
           @Override
           public void write(JsonWriter out, SharedLinesDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SharedLinesDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SharedLinesDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SharedLinesDetails
   * @throws IOException if the JSON string is invalid with respect to SharedLinesDetails
   */
  public static SharedLinesDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SharedLinesDetails.class);
  }

  /**
   * Convert an instance of SharedLinesDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

