/*
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.SharedEffectAttributesDetails;
import org.openapitools.client.model.SlideConnectorDetails;
import org.openapitools.client.model.SlideShapesDetails;
import org.openapitools.client.model.ThemeEffectMapDetails;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SharedEffectsDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:20.731713-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SharedEffectsDetails {
  public static final String SERIALIZED_NAME_CONNECTOR_ID = "connectorId";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_ID)
  private UUID connectorId;

  public static final String SERIALIZED_NAME_DATE_CREATED = "dateCreated";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private OffsetDateTime dateCreated;

  public static final String SERIALIZED_NAME_DATE_MODIFIED = "dateModified";
  @SerializedName(SERIALIZED_NAME_DATE_MODIFIED)
  private OffsetDateTime dateModified;

  public static final String SERIALIZED_NAME_EFFECT_ATTRIBUTES = "effectAttributes";
  @SerializedName(SERIALIZED_NAME_EFFECT_ATTRIBUTES)
  private List<SharedEffectAttributesDetails> effectAttributes;

  public static final String SERIALIZED_NAME_EFFECT_MAP = "effectMap";
  @SerializedName(SERIALIZED_NAME_EFFECT_MAP)
  private ThemeEffectMapDetails effectMap;

  public static final String SERIALIZED_NAME_EFFECT_MAP_ID = "effectMapId";
  @SerializedName(SERIALIZED_NAME_EFFECT_MAP_ID)
  private UUID effectMapId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PARENT_CONNECTOR = "parentConnector";
  @SerializedName(SERIALIZED_NAME_PARENT_CONNECTOR)
  private SlideConnectorDetails parentConnector;

  public static final String SERIALIZED_NAME_PARENT_SHAPE = "parentShape";
  @SerializedName(SERIALIZED_NAME_PARENT_SHAPE)
  private SlideShapesDetails parentShape;

  public static final String SERIALIZED_NAME_SHAPE_ID = "shapeId";
  @SerializedName(SERIALIZED_NAME_SHAPE_ID)
  private UUID shapeId;

  public static final String SERIALIZED_NAME_USER_CREATED = "userCreated";
  @SerializedName(SERIALIZED_NAME_USER_CREATED)
  private UUID userCreated;

  public static final String SERIALIZED_NAME_USER_MODIFIED = "userModified";
  @SerializedName(SERIALIZED_NAME_USER_MODIFIED)
  private UUID userModified;

  public SharedEffectsDetails() {
  }

  public SharedEffectsDetails connectorId(UUID connectorId) {
    this.connectorId = connectorId;
    return this;
  }

  /**
   * Get connectorId
   * @return connectorId
   */
  @javax.annotation.Nullable
  public UUID getConnectorId() {
    return connectorId;
  }

  public void setConnectorId(UUID connectorId) {
    this.connectorId = connectorId;
  }


  public SharedEffectsDetails dateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
    return this;
  }

  /**
   * Get dateCreated
   * @return dateCreated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }

  public void setDateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
  }


  public SharedEffectsDetails dateModified(OffsetDateTime dateModified) {
    this.dateModified = dateModified;
    return this;
  }

  /**
   * Get dateModified
   * @return dateModified
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateModified() {
    return dateModified;
  }

  public void setDateModified(OffsetDateTime dateModified) {
    this.dateModified = dateModified;
  }


  public SharedEffectsDetails effectAttributes(List<SharedEffectAttributesDetails> effectAttributes) {
    this.effectAttributes = effectAttributes;
    return this;
  }

  public SharedEffectsDetails addEffectAttributesItem(SharedEffectAttributesDetails effectAttributesItem) {
    if (this.effectAttributes == null) {
      this.effectAttributes = new ArrayList<>();
    }
    this.effectAttributes.add(effectAttributesItem);
    return this;
  }

  /**
   * Get effectAttributes
   * @return effectAttributes
   */
  @javax.annotation.Nullable
  public List<SharedEffectAttributesDetails> getEffectAttributes() {
    return effectAttributes;
  }

  public void setEffectAttributes(List<SharedEffectAttributesDetails> effectAttributes) {
    this.effectAttributes = effectAttributes;
  }


  public SharedEffectsDetails effectMap(ThemeEffectMapDetails effectMap) {
    this.effectMap = effectMap;
    return this;
  }

  /**
   * Get effectMap
   * @return effectMap
   */
  @javax.annotation.Nullable
  public ThemeEffectMapDetails getEffectMap() {
    return effectMap;
  }

  public void setEffectMap(ThemeEffectMapDetails effectMap) {
    this.effectMap = effectMap;
  }


  public SharedEffectsDetails effectMapId(UUID effectMapId) {
    this.effectMapId = effectMapId;
    return this;
  }

  /**
   * Get effectMapId
   * @return effectMapId
   */
  @javax.annotation.Nullable
  public UUID getEffectMapId() {
    return effectMapId;
  }

  public void setEffectMapId(UUID effectMapId) {
    this.effectMapId = effectMapId;
  }


  public SharedEffectsDetails id(UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }


  public SharedEffectsDetails name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public SharedEffectsDetails parentConnector(SlideConnectorDetails parentConnector) {
    this.parentConnector = parentConnector;
    return this;
  }

  /**
   * Get parentConnector
   * @return parentConnector
   */
  @javax.annotation.Nullable
  public SlideConnectorDetails getParentConnector() {
    return parentConnector;
  }

  public void setParentConnector(SlideConnectorDetails parentConnector) {
    this.parentConnector = parentConnector;
  }


  public SharedEffectsDetails parentShape(SlideShapesDetails parentShape) {
    this.parentShape = parentShape;
    return this;
  }

  /**
   * Get parentShape
   * @return parentShape
   */
  @javax.annotation.Nullable
  public SlideShapesDetails getParentShape() {
    return parentShape;
  }

  public void setParentShape(SlideShapesDetails parentShape) {
    this.parentShape = parentShape;
  }


  public SharedEffectsDetails shapeId(UUID shapeId) {
    this.shapeId = shapeId;
    return this;
  }

  /**
   * Get shapeId
   * @return shapeId
   */
  @javax.annotation.Nullable
  public UUID getShapeId() {
    return shapeId;
  }

  public void setShapeId(UUID shapeId) {
    this.shapeId = shapeId;
  }


  public SharedEffectsDetails userCreated(UUID userCreated) {
    this.userCreated = userCreated;
    return this;
  }

  /**
   * Get userCreated
   * @return userCreated
   */
  @javax.annotation.Nullable
  public UUID getUserCreated() {
    return userCreated;
  }

  public void setUserCreated(UUID userCreated) {
    this.userCreated = userCreated;
  }


  public SharedEffectsDetails userModified(UUID userModified) {
    this.userModified = userModified;
    return this;
  }

  /**
   * Get userModified
   * @return userModified
   */
  @javax.annotation.Nullable
  public UUID getUserModified() {
    return userModified;
  }

  public void setUserModified(UUID userModified) {
    this.userModified = userModified;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SharedEffectsDetails sharedEffectsDetails = (SharedEffectsDetails) o;
    return Objects.equals(this.connectorId, sharedEffectsDetails.connectorId) &&
        Objects.equals(this.dateCreated, sharedEffectsDetails.dateCreated) &&
        Objects.equals(this.dateModified, sharedEffectsDetails.dateModified) &&
        Objects.equals(this.effectAttributes, sharedEffectsDetails.effectAttributes) &&
        Objects.equals(this.effectMap, sharedEffectsDetails.effectMap) &&
        Objects.equals(this.effectMapId, sharedEffectsDetails.effectMapId) &&
        Objects.equals(this.id, sharedEffectsDetails.id) &&
        Objects.equals(this.name, sharedEffectsDetails.name) &&
        Objects.equals(this.parentConnector, sharedEffectsDetails.parentConnector) &&
        Objects.equals(this.parentShape, sharedEffectsDetails.parentShape) &&
        Objects.equals(this.shapeId, sharedEffectsDetails.shapeId) &&
        Objects.equals(this.userCreated, sharedEffectsDetails.userCreated) &&
        Objects.equals(this.userModified, sharedEffectsDetails.userModified);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(connectorId, dateCreated, dateModified, effectAttributes, effectMap, effectMapId, id, name, parentConnector, parentShape, shapeId, userCreated, userModified);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SharedEffectsDetails {\n");
    sb.append("    connectorId: ").append(toIndentedString(connectorId)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateModified: ").append(toIndentedString(dateModified)).append("\n");
    sb.append("    effectAttributes: ").append(toIndentedString(effectAttributes)).append("\n");
    sb.append("    effectMap: ").append(toIndentedString(effectMap)).append("\n");
    sb.append("    effectMapId: ").append(toIndentedString(effectMapId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    parentConnector: ").append(toIndentedString(parentConnector)).append("\n");
    sb.append("    parentShape: ").append(toIndentedString(parentShape)).append("\n");
    sb.append("    shapeId: ").append(toIndentedString(shapeId)).append("\n");
    sb.append("    userCreated: ").append(toIndentedString(userCreated)).append("\n");
    sb.append("    userModified: ").append(toIndentedString(userModified)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("connectorId");
    openapiFields.add("dateCreated");
    openapiFields.add("dateModified");
    openapiFields.add("effectAttributes");
    openapiFields.add("effectMap");
    openapiFields.add("effectMapId");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("parentConnector");
    openapiFields.add("parentShape");
    openapiFields.add("shapeId");
    openapiFields.add("userCreated");
    openapiFields.add("userModified");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SharedEffectsDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SharedEffectsDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SharedEffectsDetails is not found in the empty JSON string", SharedEffectsDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SharedEffectsDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SharedEffectsDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("connectorId") != null && !jsonObj.get("connectorId").isJsonNull()) && !jsonObj.get("connectorId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectorId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectorId").toString()));
      }
      if (jsonObj.get("effectAttributes") != null && !jsonObj.get("effectAttributes").isJsonNull()) {
        JsonArray jsonArrayeffectAttributes = jsonObj.getAsJsonArray("effectAttributes");
        if (jsonArrayeffectAttributes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("effectAttributes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `effectAttributes` to be an array in the JSON string but got `%s`", jsonObj.get("effectAttributes").toString()));
          }

          // validate the optional field `effectAttributes` (array)
          for (int i = 0; i < jsonArrayeffectAttributes.size(); i++) {
            SharedEffectAttributesDetails.validateJsonElement(jsonArrayeffectAttributes.get(i));
          };
        }
      }
      // validate the optional field `effectMap`
      if (jsonObj.get("effectMap") != null && !jsonObj.get("effectMap").isJsonNull()) {
        ThemeEffectMapDetails.validateJsonElement(jsonObj.get("effectMap"));
      }
      if ((jsonObj.get("effectMapId") != null && !jsonObj.get("effectMapId").isJsonNull()) && !jsonObj.get("effectMapId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `effectMapId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("effectMapId").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `parentConnector`
      if (jsonObj.get("parentConnector") != null && !jsonObj.get("parentConnector").isJsonNull()) {
        SlideConnectorDetails.validateJsonElement(jsonObj.get("parentConnector"));
      }
      // validate the optional field `parentShape`
      if (jsonObj.get("parentShape") != null && !jsonObj.get("parentShape").isJsonNull()) {
        SlideShapesDetails.validateJsonElement(jsonObj.get("parentShape"));
      }
      if ((jsonObj.get("shapeId") != null && !jsonObj.get("shapeId").isJsonNull()) && !jsonObj.get("shapeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shapeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shapeId").toString()));
      }
      if ((jsonObj.get("userCreated") != null && !jsonObj.get("userCreated").isJsonNull()) && !jsonObj.get("userCreated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userCreated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userCreated").toString()));
      }
      if ((jsonObj.get("userModified") != null && !jsonObj.get("userModified").isJsonNull()) && !jsonObj.get("userModified").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userModified` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userModified").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SharedEffectsDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SharedEffectsDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SharedEffectsDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SharedEffectsDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<SharedEffectsDetails>() {
           @Override
           public void write(JsonWriter out, SharedEffectsDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SharedEffectsDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SharedEffectsDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SharedEffectsDetails
   * @throws IOException if the JSON string is invalid with respect to SharedEffectsDetails
   */
  public static SharedEffectsDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SharedEffectsDetails.class);
  }

  /**
   * Convert an instance of SharedEffectsDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

