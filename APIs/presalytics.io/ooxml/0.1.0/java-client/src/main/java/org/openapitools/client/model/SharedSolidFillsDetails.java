/*
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.SharedColorTransformationsDetails;
import org.openapitools.client.model.SharedFillMapDetails;
import org.openapitools.client.model.SharedGradientStopsDetails;
import org.openapitools.client.model.SharedLinesDetails;
import org.openapitools.client.model.SharedTextDetails;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SharedSolidFillsDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:20.731713-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SharedSolidFillsDetails {
  public static final String SERIALIZED_NAME_COLOR_TRANSFORMATIONS = "colorTransformations";
  @SerializedName(SERIALIZED_NAME_COLOR_TRANSFORMATIONS)
  private SharedColorTransformationsDetails colorTransformations;

  public static final String SERIALIZED_NAME_COLOR_TYPE_ID = "colorTypeId";
  @SerializedName(SERIALIZED_NAME_COLOR_TYPE_ID)
  private Integer colorTypeId;

  public static final String SERIALIZED_NAME_DATE_CREATED = "dateCreated";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private OffsetDateTime dateCreated;

  public static final String SERIALIZED_NAME_DATE_MODIFIED = "dateModified";
  @SerializedName(SERIALIZED_NAME_DATE_MODIFIED)
  private OffsetDateTime dateModified;

  public static final String SERIALIZED_NAME_FILL_MAP_ID = "fillMapId";
  @SerializedName(SERIALIZED_NAME_FILL_MAP_ID)
  private UUID fillMapId;

  public static final String SERIALIZED_NAME_HEX_VALUE = "hexValue";
  @SerializedName(SERIALIZED_NAME_HEX_VALUE)
  private String hexValue;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_IS_USER_COLOR = "isUserColor";
  @SerializedName(SERIALIZED_NAME_IS_USER_COLOR)
  private Boolean isUserColor;

  public static final String SERIALIZED_NAME_PARENT_FILL_MAP = "parentFillMap";
  @SerializedName(SERIALIZED_NAME_PARENT_FILL_MAP)
  private SharedFillMapDetails parentFillMap;

  public static final String SERIALIZED_NAME_PARENT_GRADIENT_STOP = "parentGradientStop";
  @SerializedName(SERIALIZED_NAME_PARENT_GRADIENT_STOP)
  private SharedGradientStopsDetails parentGradientStop;

  public static final String SERIALIZED_NAME_PARENT_GRADIENT_STOP_ID = "parentGradientStopId";
  @SerializedName(SERIALIZED_NAME_PARENT_GRADIENT_STOP_ID)
  private UUID parentGradientStopId;

  public static final String SERIALIZED_NAME_PARENT_LINE = "parentLine";
  @SerializedName(SERIALIZED_NAME_PARENT_LINE)
  private SharedLinesDetails parentLine;

  public static final String SERIALIZED_NAME_PARENT_LINE_ID = "parentLineId";
  @SerializedName(SERIALIZED_NAME_PARENT_LINE_ID)
  private UUID parentLineId;

  public static final String SERIALIZED_NAME_PARENT_TEXT = "parentText";
  @SerializedName(SERIALIZED_NAME_PARENT_TEXT)
  private SharedTextDetails parentText;

  public static final String SERIALIZED_NAME_PARENT_TEXT_ID = "parentTextId";
  @SerializedName(SERIALIZED_NAME_PARENT_TEXT_ID)
  private UUID parentTextId;

  public static final String SERIALIZED_NAME_USER_CREATED = "userCreated";
  @SerializedName(SERIALIZED_NAME_USER_CREATED)
  private UUID userCreated;

  public static final String SERIALIZED_NAME_USER_MODIFIED = "userModified";
  @SerializedName(SERIALIZED_NAME_USER_MODIFIED)
  private UUID userModified;

  public SharedSolidFillsDetails() {
  }

  public SharedSolidFillsDetails colorTransformations(SharedColorTransformationsDetails colorTransformations) {
    this.colorTransformations = colorTransformations;
    return this;
  }

  /**
   * Get colorTransformations
   * @return colorTransformations
   */
  @javax.annotation.Nullable
  public SharedColorTransformationsDetails getColorTransformations() {
    return colorTransformations;
  }

  public void setColorTransformations(SharedColorTransformationsDetails colorTransformations) {
    this.colorTransformations = colorTransformations;
  }


  public SharedSolidFillsDetails colorTypeId(Integer colorTypeId) {
    this.colorTypeId = colorTypeId;
    return this;
  }

  /**
   * Get colorTypeId
   * @return colorTypeId
   */
  @javax.annotation.Nullable
  public Integer getColorTypeId() {
    return colorTypeId;
  }

  public void setColorTypeId(Integer colorTypeId) {
    this.colorTypeId = colorTypeId;
  }


  public SharedSolidFillsDetails dateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
    return this;
  }

  /**
   * Get dateCreated
   * @return dateCreated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }

  public void setDateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
  }


  public SharedSolidFillsDetails dateModified(OffsetDateTime dateModified) {
    this.dateModified = dateModified;
    return this;
  }

  /**
   * Get dateModified
   * @return dateModified
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateModified() {
    return dateModified;
  }

  public void setDateModified(OffsetDateTime dateModified) {
    this.dateModified = dateModified;
  }


  public SharedSolidFillsDetails fillMapId(UUID fillMapId) {
    this.fillMapId = fillMapId;
    return this;
  }

  /**
   * Get fillMapId
   * @return fillMapId
   */
  @javax.annotation.Nullable
  public UUID getFillMapId() {
    return fillMapId;
  }

  public void setFillMapId(UUID fillMapId) {
    this.fillMapId = fillMapId;
  }


  public SharedSolidFillsDetails hexValue(String hexValue) {
    this.hexValue = hexValue;
    return this;
  }

  /**
   * Get hexValue
   * @return hexValue
   */
  @javax.annotation.Nullable
  public String getHexValue() {
    return hexValue;
  }

  public void setHexValue(String hexValue) {
    this.hexValue = hexValue;
  }


  public SharedSolidFillsDetails id(UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }


  public SharedSolidFillsDetails isUserColor(Boolean isUserColor) {
    this.isUserColor = isUserColor;
    return this;
  }

  /**
   * Get isUserColor
   * @return isUserColor
   */
  @javax.annotation.Nullable
  public Boolean getIsUserColor() {
    return isUserColor;
  }

  public void setIsUserColor(Boolean isUserColor) {
    this.isUserColor = isUserColor;
  }


  public SharedSolidFillsDetails parentFillMap(SharedFillMapDetails parentFillMap) {
    this.parentFillMap = parentFillMap;
    return this;
  }

  /**
   * Get parentFillMap
   * @return parentFillMap
   */
  @javax.annotation.Nullable
  public SharedFillMapDetails getParentFillMap() {
    return parentFillMap;
  }

  public void setParentFillMap(SharedFillMapDetails parentFillMap) {
    this.parentFillMap = parentFillMap;
  }


  public SharedSolidFillsDetails parentGradientStop(SharedGradientStopsDetails parentGradientStop) {
    this.parentGradientStop = parentGradientStop;
    return this;
  }

  /**
   * Get parentGradientStop
   * @return parentGradientStop
   */
  @javax.annotation.Nullable
  public SharedGradientStopsDetails getParentGradientStop() {
    return parentGradientStop;
  }

  public void setParentGradientStop(SharedGradientStopsDetails parentGradientStop) {
    this.parentGradientStop = parentGradientStop;
  }


  public SharedSolidFillsDetails parentGradientStopId(UUID parentGradientStopId) {
    this.parentGradientStopId = parentGradientStopId;
    return this;
  }

  /**
   * Get parentGradientStopId
   * @return parentGradientStopId
   */
  @javax.annotation.Nullable
  public UUID getParentGradientStopId() {
    return parentGradientStopId;
  }

  public void setParentGradientStopId(UUID parentGradientStopId) {
    this.parentGradientStopId = parentGradientStopId;
  }


  public SharedSolidFillsDetails parentLine(SharedLinesDetails parentLine) {
    this.parentLine = parentLine;
    return this;
  }

  /**
   * Get parentLine
   * @return parentLine
   */
  @javax.annotation.Nullable
  public SharedLinesDetails getParentLine() {
    return parentLine;
  }

  public void setParentLine(SharedLinesDetails parentLine) {
    this.parentLine = parentLine;
  }


  public SharedSolidFillsDetails parentLineId(UUID parentLineId) {
    this.parentLineId = parentLineId;
    return this;
  }

  /**
   * Get parentLineId
   * @return parentLineId
   */
  @javax.annotation.Nullable
  public UUID getParentLineId() {
    return parentLineId;
  }

  public void setParentLineId(UUID parentLineId) {
    this.parentLineId = parentLineId;
  }


  public SharedSolidFillsDetails parentText(SharedTextDetails parentText) {
    this.parentText = parentText;
    return this;
  }

  /**
   * Get parentText
   * @return parentText
   */
  @javax.annotation.Nullable
  public SharedTextDetails getParentText() {
    return parentText;
  }

  public void setParentText(SharedTextDetails parentText) {
    this.parentText = parentText;
  }


  public SharedSolidFillsDetails parentTextId(UUID parentTextId) {
    this.parentTextId = parentTextId;
    return this;
  }

  /**
   * Get parentTextId
   * @return parentTextId
   */
  @javax.annotation.Nullable
  public UUID getParentTextId() {
    return parentTextId;
  }

  public void setParentTextId(UUID parentTextId) {
    this.parentTextId = parentTextId;
  }


  public SharedSolidFillsDetails userCreated(UUID userCreated) {
    this.userCreated = userCreated;
    return this;
  }

  /**
   * Get userCreated
   * @return userCreated
   */
  @javax.annotation.Nullable
  public UUID getUserCreated() {
    return userCreated;
  }

  public void setUserCreated(UUID userCreated) {
    this.userCreated = userCreated;
  }


  public SharedSolidFillsDetails userModified(UUID userModified) {
    this.userModified = userModified;
    return this;
  }

  /**
   * Get userModified
   * @return userModified
   */
  @javax.annotation.Nullable
  public UUID getUserModified() {
    return userModified;
  }

  public void setUserModified(UUID userModified) {
    this.userModified = userModified;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SharedSolidFillsDetails sharedSolidFillsDetails = (SharedSolidFillsDetails) o;
    return Objects.equals(this.colorTransformations, sharedSolidFillsDetails.colorTransformations) &&
        Objects.equals(this.colorTypeId, sharedSolidFillsDetails.colorTypeId) &&
        Objects.equals(this.dateCreated, sharedSolidFillsDetails.dateCreated) &&
        Objects.equals(this.dateModified, sharedSolidFillsDetails.dateModified) &&
        Objects.equals(this.fillMapId, sharedSolidFillsDetails.fillMapId) &&
        Objects.equals(this.hexValue, sharedSolidFillsDetails.hexValue) &&
        Objects.equals(this.id, sharedSolidFillsDetails.id) &&
        Objects.equals(this.isUserColor, sharedSolidFillsDetails.isUserColor) &&
        Objects.equals(this.parentFillMap, sharedSolidFillsDetails.parentFillMap) &&
        Objects.equals(this.parentGradientStop, sharedSolidFillsDetails.parentGradientStop) &&
        Objects.equals(this.parentGradientStopId, sharedSolidFillsDetails.parentGradientStopId) &&
        Objects.equals(this.parentLine, sharedSolidFillsDetails.parentLine) &&
        Objects.equals(this.parentLineId, sharedSolidFillsDetails.parentLineId) &&
        Objects.equals(this.parentText, sharedSolidFillsDetails.parentText) &&
        Objects.equals(this.parentTextId, sharedSolidFillsDetails.parentTextId) &&
        Objects.equals(this.userCreated, sharedSolidFillsDetails.userCreated) &&
        Objects.equals(this.userModified, sharedSolidFillsDetails.userModified);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(colorTransformations, colorTypeId, dateCreated, dateModified, fillMapId, hexValue, id, isUserColor, parentFillMap, parentGradientStop, parentGradientStopId, parentLine, parentLineId, parentText, parentTextId, userCreated, userModified);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SharedSolidFillsDetails {\n");
    sb.append("    colorTransformations: ").append(toIndentedString(colorTransformations)).append("\n");
    sb.append("    colorTypeId: ").append(toIndentedString(colorTypeId)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateModified: ").append(toIndentedString(dateModified)).append("\n");
    sb.append("    fillMapId: ").append(toIndentedString(fillMapId)).append("\n");
    sb.append("    hexValue: ").append(toIndentedString(hexValue)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isUserColor: ").append(toIndentedString(isUserColor)).append("\n");
    sb.append("    parentFillMap: ").append(toIndentedString(parentFillMap)).append("\n");
    sb.append("    parentGradientStop: ").append(toIndentedString(parentGradientStop)).append("\n");
    sb.append("    parentGradientStopId: ").append(toIndentedString(parentGradientStopId)).append("\n");
    sb.append("    parentLine: ").append(toIndentedString(parentLine)).append("\n");
    sb.append("    parentLineId: ").append(toIndentedString(parentLineId)).append("\n");
    sb.append("    parentText: ").append(toIndentedString(parentText)).append("\n");
    sb.append("    parentTextId: ").append(toIndentedString(parentTextId)).append("\n");
    sb.append("    userCreated: ").append(toIndentedString(userCreated)).append("\n");
    sb.append("    userModified: ").append(toIndentedString(userModified)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("colorTransformations");
    openapiFields.add("colorTypeId");
    openapiFields.add("dateCreated");
    openapiFields.add("dateModified");
    openapiFields.add("fillMapId");
    openapiFields.add("hexValue");
    openapiFields.add("id");
    openapiFields.add("isUserColor");
    openapiFields.add("parentFillMap");
    openapiFields.add("parentGradientStop");
    openapiFields.add("parentGradientStopId");
    openapiFields.add("parentLine");
    openapiFields.add("parentLineId");
    openapiFields.add("parentText");
    openapiFields.add("parentTextId");
    openapiFields.add("userCreated");
    openapiFields.add("userModified");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SharedSolidFillsDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SharedSolidFillsDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SharedSolidFillsDetails is not found in the empty JSON string", SharedSolidFillsDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SharedSolidFillsDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SharedSolidFillsDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `colorTransformations`
      if (jsonObj.get("colorTransformations") != null && !jsonObj.get("colorTransformations").isJsonNull()) {
        SharedColorTransformationsDetails.validateJsonElement(jsonObj.get("colorTransformations"));
      }
      if ((jsonObj.get("fillMapId") != null && !jsonObj.get("fillMapId").isJsonNull()) && !jsonObj.get("fillMapId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fillMapId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fillMapId").toString()));
      }
      if ((jsonObj.get("hexValue") != null && !jsonObj.get("hexValue").isJsonNull()) && !jsonObj.get("hexValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hexValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hexValue").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `parentFillMap`
      if (jsonObj.get("parentFillMap") != null && !jsonObj.get("parentFillMap").isJsonNull()) {
        SharedFillMapDetails.validateJsonElement(jsonObj.get("parentFillMap"));
      }
      // validate the optional field `parentGradientStop`
      if (jsonObj.get("parentGradientStop") != null && !jsonObj.get("parentGradientStop").isJsonNull()) {
        SharedGradientStopsDetails.validateJsonElement(jsonObj.get("parentGradientStop"));
      }
      if ((jsonObj.get("parentGradientStopId") != null && !jsonObj.get("parentGradientStopId").isJsonNull()) && !jsonObj.get("parentGradientStopId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentGradientStopId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentGradientStopId").toString()));
      }
      // validate the optional field `parentLine`
      if (jsonObj.get("parentLine") != null && !jsonObj.get("parentLine").isJsonNull()) {
        SharedLinesDetails.validateJsonElement(jsonObj.get("parentLine"));
      }
      if ((jsonObj.get("parentLineId") != null && !jsonObj.get("parentLineId").isJsonNull()) && !jsonObj.get("parentLineId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentLineId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentLineId").toString()));
      }
      // validate the optional field `parentText`
      if (jsonObj.get("parentText") != null && !jsonObj.get("parentText").isJsonNull()) {
        SharedTextDetails.validateJsonElement(jsonObj.get("parentText"));
      }
      if ((jsonObj.get("parentTextId") != null && !jsonObj.get("parentTextId").isJsonNull()) && !jsonObj.get("parentTextId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentTextId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentTextId").toString()));
      }
      if ((jsonObj.get("userCreated") != null && !jsonObj.get("userCreated").isJsonNull()) && !jsonObj.get("userCreated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userCreated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userCreated").toString()));
      }
      if ((jsonObj.get("userModified") != null && !jsonObj.get("userModified").isJsonNull()) && !jsonObj.get("userModified").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userModified` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userModified").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SharedSolidFillsDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SharedSolidFillsDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SharedSolidFillsDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SharedSolidFillsDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<SharedSolidFillsDetails>() {
           @Override
           public void write(JsonWriter out, SharedSolidFillsDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SharedSolidFillsDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SharedSolidFillsDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SharedSolidFillsDetails
   * @throws IOException if the JSON string is invalid with respect to SharedSolidFillsDetails
   */
  public static SharedSolidFillsDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SharedSolidFillsDetails.class);
  }

  /**
   * Convert an instance of SharedSolidFillsDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

