/*
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SharedText
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:20.731713-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SharedText {
  public static final String SERIALIZED_NAME_COLOR_SOLID_FILLS_ID = "colorSolidFillsId";
  @SerializedName(SERIALIZED_NAME_COLOR_SOLID_FILLS_ID)
  private UUID colorSolidFillsId;

  public static final String SERIALIZED_NAME_FONT = "font";
  @SerializedName(SERIALIZED_NAME_FONT)
  private String font;

  public static final String SERIALIZED_NAME_FONT_SIZE = "fontSize";
  @SerializedName(SERIALIZED_NAME_FONT_SIZE)
  private Integer fontSize;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_IS_BOLD = "isBold";
  @SerializedName(SERIALIZED_NAME_IS_BOLD)
  private Boolean isBold;

  public static final String SERIALIZED_NAME_IS_ITALIC = "isItalic";
  @SerializedName(SERIALIZED_NAME_IS_ITALIC)
  private Boolean isItalic;

  public static final String SERIALIZED_NAME_IS_THEME_FONT = "isThemeFont";
  @SerializedName(SERIALIZED_NAME_IS_THEME_FONT)
  private Boolean isThemeFont;

  public static final String SERIALIZED_NAME_IS_UNDERLINE = "isUnderline";
  @SerializedName(SERIALIZED_NAME_IS_UNDERLINE)
  private Boolean isUnderline;

  public static final String SERIALIZED_NAME_PARAGRAPH_ID = "paragraphId";
  @SerializedName(SERIALIZED_NAME_PARAGRAPH_ID)
  private UUID paragraphId;

  public static final String SERIALIZED_NAME_RAW_TEXT = "rawText";
  @SerializedName(SERIALIZED_NAME_RAW_TEXT)
  private String rawText;

  public static final String SERIALIZED_NAME_SEQUENCE = "sequence";
  @SerializedName(SERIALIZED_NAME_SEQUENCE)
  private Integer sequence;

  public SharedText() {
  }

  public SharedText colorSolidFillsId(UUID colorSolidFillsId) {
    this.colorSolidFillsId = colorSolidFillsId;
    return this;
  }

  /**
   * Get colorSolidFillsId
   * @return colorSolidFillsId
   */
  @javax.annotation.Nullable
  public UUID getColorSolidFillsId() {
    return colorSolidFillsId;
  }

  public void setColorSolidFillsId(UUID colorSolidFillsId) {
    this.colorSolidFillsId = colorSolidFillsId;
  }


  public SharedText font(String font) {
    this.font = font;
    return this;
  }

  /**
   * Get font
   * @return font
   */
  @javax.annotation.Nullable
  public String getFont() {
    return font;
  }

  public void setFont(String font) {
    this.font = font;
  }


  public SharedText fontSize(Integer fontSize) {
    this.fontSize = fontSize;
    return this;
  }

  /**
   * Get fontSize
   * @return fontSize
   */
  @javax.annotation.Nullable
  public Integer getFontSize() {
    return fontSize;
  }

  public void setFontSize(Integer fontSize) {
    this.fontSize = fontSize;
  }


  public SharedText id(UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }


  public SharedText isBold(Boolean isBold) {
    this.isBold = isBold;
    return this;
  }

  /**
   * Get isBold
   * @return isBold
   */
  @javax.annotation.Nullable
  public Boolean getIsBold() {
    return isBold;
  }

  public void setIsBold(Boolean isBold) {
    this.isBold = isBold;
  }


  public SharedText isItalic(Boolean isItalic) {
    this.isItalic = isItalic;
    return this;
  }

  /**
   * Get isItalic
   * @return isItalic
   */
  @javax.annotation.Nullable
  public Boolean getIsItalic() {
    return isItalic;
  }

  public void setIsItalic(Boolean isItalic) {
    this.isItalic = isItalic;
  }


  public SharedText isThemeFont(Boolean isThemeFont) {
    this.isThemeFont = isThemeFont;
    return this;
  }

  /**
   * Get isThemeFont
   * @return isThemeFont
   */
  @javax.annotation.Nullable
  public Boolean getIsThemeFont() {
    return isThemeFont;
  }

  public void setIsThemeFont(Boolean isThemeFont) {
    this.isThemeFont = isThemeFont;
  }


  public SharedText isUnderline(Boolean isUnderline) {
    this.isUnderline = isUnderline;
    return this;
  }

  /**
   * Get isUnderline
   * @return isUnderline
   */
  @javax.annotation.Nullable
  public Boolean getIsUnderline() {
    return isUnderline;
  }

  public void setIsUnderline(Boolean isUnderline) {
    this.isUnderline = isUnderline;
  }


  public SharedText paragraphId(UUID paragraphId) {
    this.paragraphId = paragraphId;
    return this;
  }

  /**
   * Get paragraphId
   * @return paragraphId
   */
  @javax.annotation.Nullable
  public UUID getParagraphId() {
    return paragraphId;
  }

  public void setParagraphId(UUID paragraphId) {
    this.paragraphId = paragraphId;
  }


  public SharedText rawText(String rawText) {
    this.rawText = rawText;
    return this;
  }

  /**
   * Get rawText
   * @return rawText
   */
  @javax.annotation.Nullable
  public String getRawText() {
    return rawText;
  }

  public void setRawText(String rawText) {
    this.rawText = rawText;
  }


  public SharedText sequence(Integer sequence) {
    this.sequence = sequence;
    return this;
  }

  /**
   * Get sequence
   * @return sequence
   */
  @javax.annotation.Nullable
  public Integer getSequence() {
    return sequence;
  }

  public void setSequence(Integer sequence) {
    this.sequence = sequence;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SharedText sharedText = (SharedText) o;
    return Objects.equals(this.colorSolidFillsId, sharedText.colorSolidFillsId) &&
        Objects.equals(this.font, sharedText.font) &&
        Objects.equals(this.fontSize, sharedText.fontSize) &&
        Objects.equals(this.id, sharedText.id) &&
        Objects.equals(this.isBold, sharedText.isBold) &&
        Objects.equals(this.isItalic, sharedText.isItalic) &&
        Objects.equals(this.isThemeFont, sharedText.isThemeFont) &&
        Objects.equals(this.isUnderline, sharedText.isUnderline) &&
        Objects.equals(this.paragraphId, sharedText.paragraphId) &&
        Objects.equals(this.rawText, sharedText.rawText) &&
        Objects.equals(this.sequence, sharedText.sequence);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(colorSolidFillsId, font, fontSize, id, isBold, isItalic, isThemeFont, isUnderline, paragraphId, rawText, sequence);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SharedText {\n");
    sb.append("    colorSolidFillsId: ").append(toIndentedString(colorSolidFillsId)).append("\n");
    sb.append("    font: ").append(toIndentedString(font)).append("\n");
    sb.append("    fontSize: ").append(toIndentedString(fontSize)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isBold: ").append(toIndentedString(isBold)).append("\n");
    sb.append("    isItalic: ").append(toIndentedString(isItalic)).append("\n");
    sb.append("    isThemeFont: ").append(toIndentedString(isThemeFont)).append("\n");
    sb.append("    isUnderline: ").append(toIndentedString(isUnderline)).append("\n");
    sb.append("    paragraphId: ").append(toIndentedString(paragraphId)).append("\n");
    sb.append("    rawText: ").append(toIndentedString(rawText)).append("\n");
    sb.append("    sequence: ").append(toIndentedString(sequence)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("colorSolidFillsId");
    openapiFields.add("font");
    openapiFields.add("fontSize");
    openapiFields.add("id");
    openapiFields.add("isBold");
    openapiFields.add("isItalic");
    openapiFields.add("isThemeFont");
    openapiFields.add("isUnderline");
    openapiFields.add("paragraphId");
    openapiFields.add("rawText");
    openapiFields.add("sequence");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SharedText
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SharedText.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SharedText is not found in the empty JSON string", SharedText.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SharedText.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SharedText` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("colorSolidFillsId") != null && !jsonObj.get("colorSolidFillsId").isJsonNull()) && !jsonObj.get("colorSolidFillsId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `colorSolidFillsId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("colorSolidFillsId").toString()));
      }
      if ((jsonObj.get("font") != null && !jsonObj.get("font").isJsonNull()) && !jsonObj.get("font").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `font` to be a primitive type in the JSON string but got `%s`", jsonObj.get("font").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("paragraphId") != null && !jsonObj.get("paragraphId").isJsonNull()) && !jsonObj.get("paragraphId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paragraphId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paragraphId").toString()));
      }
      if ((jsonObj.get("rawText") != null && !jsonObj.get("rawText").isJsonNull()) && !jsonObj.get("rawText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rawText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rawText").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SharedText.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SharedText' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SharedText> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SharedText.class));

       return (TypeAdapter<T>) new TypeAdapter<SharedText>() {
           @Override
           public void write(JsonWriter out, SharedText value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SharedText read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SharedText given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SharedText
   * @throws IOException if the JSON string is invalid with respect to SharedText
   */
  public static SharedText fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SharedText.class);
  }

  /**
   * Convert an instance of SharedText to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

