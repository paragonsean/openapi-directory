/*
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SharedFillMap
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:20.731713-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SharedFillMap {
  public static final String SERIALIZED_NAME_CONNECTOR_ID = "connectorId";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_ID)
  private UUID connectorId;

  public static final String SERIALIZED_NAME_EFFECT_ATTRIBUTE_ID = "effectAttributeId";
  @SerializedName(SERIALIZED_NAME_EFFECT_ATTRIBUTE_ID)
  private UUID effectAttributeId;

  public static final String SERIALIZED_NAME_FILL_TYPE_ID = "fillTypeId";
  @SerializedName(SERIALIZED_NAME_FILL_TYPE_ID)
  private Integer fillTypeId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_SHAPE_ID = "shapeId";
  @SerializedName(SERIALIZED_NAME_SHAPE_ID)
  private UUID shapeId;

  public static final String SERIALIZED_NAME_TABLE_CELL_ID = "tableCellId";
  @SerializedName(SERIALIZED_NAME_TABLE_CELL_ID)
  private UUID tableCellId;

  public static final String SERIALIZED_NAME_THEME_BACKGROUND_FILL_ID = "themeBackgroundFillId";
  @SerializedName(SERIALIZED_NAME_THEME_BACKGROUND_FILL_ID)
  private UUID themeBackgroundFillId;

  public static final String SERIALIZED_NAME_THEME_FILL_ID = "themeFillId";
  @SerializedName(SERIALIZED_NAME_THEME_FILL_ID)
  private UUID themeFillId;

  public SharedFillMap() {
  }

  public SharedFillMap connectorId(UUID connectorId) {
    this.connectorId = connectorId;
    return this;
  }

  /**
   * Get connectorId
   * @return connectorId
   */
  @javax.annotation.Nullable
  public UUID getConnectorId() {
    return connectorId;
  }

  public void setConnectorId(UUID connectorId) {
    this.connectorId = connectorId;
  }


  public SharedFillMap effectAttributeId(UUID effectAttributeId) {
    this.effectAttributeId = effectAttributeId;
    return this;
  }

  /**
   * Get effectAttributeId
   * @return effectAttributeId
   */
  @javax.annotation.Nullable
  public UUID getEffectAttributeId() {
    return effectAttributeId;
  }

  public void setEffectAttributeId(UUID effectAttributeId) {
    this.effectAttributeId = effectAttributeId;
  }


  public SharedFillMap fillTypeId(Integer fillTypeId) {
    this.fillTypeId = fillTypeId;
    return this;
  }

  /**
   * Get fillTypeId
   * @return fillTypeId
   */
  @javax.annotation.Nullable
  public Integer getFillTypeId() {
    return fillTypeId;
  }

  public void setFillTypeId(Integer fillTypeId) {
    this.fillTypeId = fillTypeId;
  }


  public SharedFillMap id(UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }


  public SharedFillMap shapeId(UUID shapeId) {
    this.shapeId = shapeId;
    return this;
  }

  /**
   * Get shapeId
   * @return shapeId
   */
  @javax.annotation.Nullable
  public UUID getShapeId() {
    return shapeId;
  }

  public void setShapeId(UUID shapeId) {
    this.shapeId = shapeId;
  }


  public SharedFillMap tableCellId(UUID tableCellId) {
    this.tableCellId = tableCellId;
    return this;
  }

  /**
   * Get tableCellId
   * @return tableCellId
   */
  @javax.annotation.Nullable
  public UUID getTableCellId() {
    return tableCellId;
  }

  public void setTableCellId(UUID tableCellId) {
    this.tableCellId = tableCellId;
  }


  public SharedFillMap themeBackgroundFillId(UUID themeBackgroundFillId) {
    this.themeBackgroundFillId = themeBackgroundFillId;
    return this;
  }

  /**
   * Get themeBackgroundFillId
   * @return themeBackgroundFillId
   */
  @javax.annotation.Nullable
  public UUID getThemeBackgroundFillId() {
    return themeBackgroundFillId;
  }

  public void setThemeBackgroundFillId(UUID themeBackgroundFillId) {
    this.themeBackgroundFillId = themeBackgroundFillId;
  }


  public SharedFillMap themeFillId(UUID themeFillId) {
    this.themeFillId = themeFillId;
    return this;
  }

  /**
   * Get themeFillId
   * @return themeFillId
   */
  @javax.annotation.Nullable
  public UUID getThemeFillId() {
    return themeFillId;
  }

  public void setThemeFillId(UUID themeFillId) {
    this.themeFillId = themeFillId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SharedFillMap sharedFillMap = (SharedFillMap) o;
    return Objects.equals(this.connectorId, sharedFillMap.connectorId) &&
        Objects.equals(this.effectAttributeId, sharedFillMap.effectAttributeId) &&
        Objects.equals(this.fillTypeId, sharedFillMap.fillTypeId) &&
        Objects.equals(this.id, sharedFillMap.id) &&
        Objects.equals(this.shapeId, sharedFillMap.shapeId) &&
        Objects.equals(this.tableCellId, sharedFillMap.tableCellId) &&
        Objects.equals(this.themeBackgroundFillId, sharedFillMap.themeBackgroundFillId) &&
        Objects.equals(this.themeFillId, sharedFillMap.themeFillId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(connectorId, effectAttributeId, fillTypeId, id, shapeId, tableCellId, themeBackgroundFillId, themeFillId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SharedFillMap {\n");
    sb.append("    connectorId: ").append(toIndentedString(connectorId)).append("\n");
    sb.append("    effectAttributeId: ").append(toIndentedString(effectAttributeId)).append("\n");
    sb.append("    fillTypeId: ").append(toIndentedString(fillTypeId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    shapeId: ").append(toIndentedString(shapeId)).append("\n");
    sb.append("    tableCellId: ").append(toIndentedString(tableCellId)).append("\n");
    sb.append("    themeBackgroundFillId: ").append(toIndentedString(themeBackgroundFillId)).append("\n");
    sb.append("    themeFillId: ").append(toIndentedString(themeFillId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("connectorId");
    openapiFields.add("effectAttributeId");
    openapiFields.add("fillTypeId");
    openapiFields.add("id");
    openapiFields.add("shapeId");
    openapiFields.add("tableCellId");
    openapiFields.add("themeBackgroundFillId");
    openapiFields.add("themeFillId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SharedFillMap
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SharedFillMap.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SharedFillMap is not found in the empty JSON string", SharedFillMap.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SharedFillMap.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SharedFillMap` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("connectorId") != null && !jsonObj.get("connectorId").isJsonNull()) && !jsonObj.get("connectorId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectorId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectorId").toString()));
      }
      if ((jsonObj.get("effectAttributeId") != null && !jsonObj.get("effectAttributeId").isJsonNull()) && !jsonObj.get("effectAttributeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `effectAttributeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("effectAttributeId").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("shapeId") != null && !jsonObj.get("shapeId").isJsonNull()) && !jsonObj.get("shapeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shapeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shapeId").toString()));
      }
      if ((jsonObj.get("tableCellId") != null && !jsonObj.get("tableCellId").isJsonNull()) && !jsonObj.get("tableCellId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tableCellId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tableCellId").toString()));
      }
      if ((jsonObj.get("themeBackgroundFillId") != null && !jsonObj.get("themeBackgroundFillId").isJsonNull()) && !jsonObj.get("themeBackgroundFillId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `themeBackgroundFillId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("themeBackgroundFillId").toString()));
      }
      if ((jsonObj.get("themeFillId") != null && !jsonObj.get("themeFillId").isJsonNull()) && !jsonObj.get("themeFillId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `themeFillId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("themeFillId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SharedFillMap.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SharedFillMap' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SharedFillMap> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SharedFillMap.class));

       return (TypeAdapter<T>) new TypeAdapter<SharedFillMap>() {
           @Override
           public void write(JsonWriter out, SharedFillMap value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SharedFillMap read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SharedFillMap given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SharedFillMap
   * @throws IOException if the JSON string is invalid with respect to SharedFillMap
   */
  public static SharedFillMap fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SharedFillMap.class);
  }

  /**
   * Convert an instance of SharedFillMap to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

