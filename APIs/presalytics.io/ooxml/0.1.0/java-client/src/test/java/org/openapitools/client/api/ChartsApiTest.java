/*
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ChartChartDataDTO;
import org.openapitools.client.model.ChartCharts;
import org.openapitools.client.model.ChartChartsDetails;
import org.openapitools.client.model.ChildObjects;
import java.io.File;
import org.openapitools.client.model.OoxmlDTO;
import org.openapitools.client.model.ProblemDetails;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ChartsApi
 */
@Disabled
public class ChartsApiTest {

    private final ChartsApi api = new ChartsApi();

    /**
     * Charts: Get Chart Data
     *
     * Gets a ChartDataDTO object, usually used for downstream analytics and chart updates
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chartsChartsChartupdateGetIdTest() throws ApiException {
        UUID id = null;
        ChartChartDataDTO response = api.chartsChartsChartupdateGetId(id);
        // TODO: test validations
    }

    /**
     * Charts: Update Chart Data
     *
     * Simplifies chart update by allowing users to supply data via ChartDataDTO
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chartsChartsChartupdatePutIdTest() throws ApiException {
        UUID id = null;
        ChartChartDataDTO chartChartDataDTO = null;
        api.chartsChartsChartupdatePutId(id, chartChartDataDTO);
        // TODO: test validations
    }

    /**
     * Charts: Get Dependent Objects Tree
     *
     * This endpoint is helpful for helping users and bots identify dependent objects to this Chart and retreive their corresponding metadata in order to make modifications to those objects in downstream operations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chartsChartsChildobjectsGetIdTest() throws ApiException {
        UUID id = null;
        List<ChildObjects> response = api.chartsChartsChildobjectsGetId(id);
        // TODO: test validations
    }

    /**
     * Charts: Get Details
     *
     * Returns object metadata and information about relative dependent objects 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chartsChartsDetailsGetIdTest() throws ApiException {
        UUID id = null;
        ChartChartsDetails response = api.chartsChartsDetailsGetId(id);
        // TODO: test validations
    }

    /**
     * Charts: Get by Id
     *
     * Get by Id: Use this method to retrieve a Charts object by its primary key (id)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chartsChartsGetIdTest() throws ApiException {
        UUID id = null;
        ChartCharts response = api.chartsChartsGetId(id);
        // TODO: test validations
    }

    /**
     * Charts: Get Underlying Xml
     *
     * Return the subset of the xml content from within the latest edited version of the OpenXmlDocument from this Chart object.  The returned xml data conforms to the [Ecma-376 standard](http://www.ecma-international.org/publications/standards/Ecma-376.htm).  Use this endpoint a starting point for building client-side extensions that modify Presalytics widgets containing Chart objects.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chartsChartsOpenofficexmlGetIdUpdatedTest() throws ApiException {
        UUID id = null;
        Boolean updated = null;
        OoxmlDTO response = api.chartsChartsOpenofficexmlGetIdUpdated(id, updated);
        // TODO: test validations
    }

    /**
     * Charts: Modify Underlying Xml
     *
     * Directly eidt the underlying xml of a Chart object within an OpenOpenXml (e.g. Excel, Powerpoint) document. This endpoint will validatate the submitted xml against the [Ecma-376 standard](http://www.ecma-international.org/publications/standards/Ecma-376.htm) prior to saving modification.  Invalid xml will rejected by this endpoint and a (hopefully) helpful error message will be returned.  Use this endpoint for client-side automation of modifications ot Chart objects.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chartsChartsOpenofficexmlPutIdTest() throws ApiException {
        String id = null;
        OoxmlDTO ooxmlDTO = null;
        api.chartsChartsOpenofficexmlPutId(id, ooxmlDTO);
        // TODO: test validations
    }

    /**
     * Charts: Get Svg file
     *
     * This endpoint is helpful for rending this Chart as an svg or image object that can then be rendered in a story, dashboard or website.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chartsChartsSvgGetIdUseCacheTest() throws ApiException {
        UUID id = null;
        Boolean useCache = null;
        File response = api.chartsChartsSvgGetIdUseCache(id, useCache);
        // TODO: test validations
    }

}
