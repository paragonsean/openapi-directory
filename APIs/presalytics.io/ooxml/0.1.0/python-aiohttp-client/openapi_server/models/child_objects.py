# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ChildObjects(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, entity_id: str=None, entity_name: str=None, object_type: str=None, parent_entity_id: str=None, parent_object_type: str=None):
        """ChildObjects - a model defined in OpenAPI

        :param entity_id: The entity_id of this ChildObjects.
        :param entity_name: The entity_name of this ChildObjects.
        :param object_type: The object_type of this ChildObjects.
        :param parent_entity_id: The parent_entity_id of this ChildObjects.
        :param parent_object_type: The parent_object_type of this ChildObjects.
        """
        self.openapi_types = {
            'entity_id': str,
            'entity_name': str,
            'object_type': str,
            'parent_entity_id': str,
            'parent_object_type': str
        }

        self.attribute_map = {
            'entity_id': 'entityId',
            'entity_name': 'entityName',
            'object_type': 'objectType',
            'parent_entity_id': 'parentEntityId',
            'parent_object_type': 'parentObjectType'
        }

        self._entity_id = entity_id
        self._entity_name = entity_name
        self._object_type = object_type
        self._parent_entity_id = parent_entity_id
        self._parent_object_type = parent_object_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChildObjects':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChildObjects of this ChildObjects.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def entity_id(self):
        """Gets the entity_id of this ChildObjects.


        :return: The entity_id of this ChildObjects.
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this ChildObjects.


        :param entity_id: The entity_id of this ChildObjects.
        :type entity_id: str
        """

        self._entity_id = entity_id

    @property
    def entity_name(self):
        """Gets the entity_name of this ChildObjects.


        :return: The entity_name of this ChildObjects.
        :rtype: str
        """
        return self._entity_name

    @entity_name.setter
    def entity_name(self, entity_name):
        """Sets the entity_name of this ChildObjects.


        :param entity_name: The entity_name of this ChildObjects.
        :type entity_name: str
        """

        self._entity_name = entity_name

    @property
    def object_type(self):
        """Gets the object_type of this ChildObjects.


        :return: The object_type of this ChildObjects.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """Sets the object_type of this ChildObjects.


        :param object_type: The object_type of this ChildObjects.
        :type object_type: str
        """

        self._object_type = object_type

    @property
    def parent_entity_id(self):
        """Gets the parent_entity_id of this ChildObjects.


        :return: The parent_entity_id of this ChildObjects.
        :rtype: str
        """
        return self._parent_entity_id

    @parent_entity_id.setter
    def parent_entity_id(self, parent_entity_id):
        """Sets the parent_entity_id of this ChildObjects.


        :param parent_entity_id: The parent_entity_id of this ChildObjects.
        :type parent_entity_id: str
        """

        self._parent_entity_id = parent_entity_id

    @property
    def parent_object_type(self):
        """Gets the parent_object_type of this ChildObjects.


        :return: The parent_object_type of this ChildObjects.
        :rtype: str
        """
        return self._parent_object_type

    @parent_object_type.setter
    def parent_object_type(self, parent_object_type):
        """Sets the parent_object_type of this ChildObjects.


        :param parent_object_type: The parent_object_type of this ChildObjects.
        :type parent_object_type: str
        """

        self._parent_object_type = parent_object_type
