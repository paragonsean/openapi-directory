# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.shared_effect_attributes_details import SharedEffectAttributesDetails
from openapi_server.models.slide_connector_details import SlideConnectorDetails
from openapi_server.models.slide_shapes_details import SlideShapesDetails
from openapi_server.models.theme_effect_map_details import ThemeEffectMapDetails
from openapi_server import util


class SharedEffectsDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connector_id: str=None, date_created: datetime=None, date_modified: datetime=None, effect_attributes: List[SharedEffectAttributesDetails]=None, effect_map: ThemeEffectMapDetails=None, effect_map_id: str=None, id: str=None, name: str=None, parent_connector: SlideConnectorDetails=None, parent_shape: SlideShapesDetails=None, shape_id: str=None, user_created: str=None, user_modified: str=None):
        """SharedEffectsDetails - a model defined in OpenAPI

        :param connector_id: The connector_id of this SharedEffectsDetails.
        :param date_created: The date_created of this SharedEffectsDetails.
        :param date_modified: The date_modified of this SharedEffectsDetails.
        :param effect_attributes: The effect_attributes of this SharedEffectsDetails.
        :param effect_map: The effect_map of this SharedEffectsDetails.
        :param effect_map_id: The effect_map_id of this SharedEffectsDetails.
        :param id: The id of this SharedEffectsDetails.
        :param name: The name of this SharedEffectsDetails.
        :param parent_connector: The parent_connector of this SharedEffectsDetails.
        :param parent_shape: The parent_shape of this SharedEffectsDetails.
        :param shape_id: The shape_id of this SharedEffectsDetails.
        :param user_created: The user_created of this SharedEffectsDetails.
        :param user_modified: The user_modified of this SharedEffectsDetails.
        """
        self.openapi_types = {
            'connector_id': str,
            'date_created': datetime,
            'date_modified': datetime,
            'effect_attributes': List[SharedEffectAttributesDetails],
            'effect_map': ThemeEffectMapDetails,
            'effect_map_id': str,
            'id': str,
            'name': str,
            'parent_connector': SlideConnectorDetails,
            'parent_shape': SlideShapesDetails,
            'shape_id': str,
            'user_created': str,
            'user_modified': str
        }

        self.attribute_map = {
            'connector_id': 'connectorId',
            'date_created': 'dateCreated',
            'date_modified': 'dateModified',
            'effect_attributes': 'effectAttributes',
            'effect_map': 'effectMap',
            'effect_map_id': 'effectMapId',
            'id': 'id',
            'name': 'name',
            'parent_connector': 'parentConnector',
            'parent_shape': 'parentShape',
            'shape_id': 'shapeId',
            'user_created': 'userCreated',
            'user_modified': 'userModified'
        }

        self._connector_id = connector_id
        self._date_created = date_created
        self._date_modified = date_modified
        self._effect_attributes = effect_attributes
        self._effect_map = effect_map
        self._effect_map_id = effect_map_id
        self._id = id
        self._name = name
        self._parent_connector = parent_connector
        self._parent_shape = parent_shape
        self._shape_id = shape_id
        self._user_created = user_created
        self._user_modified = user_modified

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SharedEffectsDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Shared.Effects.Details of this SharedEffectsDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connector_id(self):
        """Gets the connector_id of this SharedEffectsDetails.


        :return: The connector_id of this SharedEffectsDetails.
        :rtype: str
        """
        return self._connector_id

    @connector_id.setter
    def connector_id(self, connector_id):
        """Sets the connector_id of this SharedEffectsDetails.


        :param connector_id: The connector_id of this SharedEffectsDetails.
        :type connector_id: str
        """

        self._connector_id = connector_id

    @property
    def date_created(self):
        """Gets the date_created of this SharedEffectsDetails.


        :return: The date_created of this SharedEffectsDetails.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this SharedEffectsDetails.


        :param date_created: The date_created of this SharedEffectsDetails.
        :type date_created: datetime
        """

        self._date_created = date_created

    @property
    def date_modified(self):
        """Gets the date_modified of this SharedEffectsDetails.


        :return: The date_modified of this SharedEffectsDetails.
        :rtype: datetime
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this SharedEffectsDetails.


        :param date_modified: The date_modified of this SharedEffectsDetails.
        :type date_modified: datetime
        """

        self._date_modified = date_modified

    @property
    def effect_attributes(self):
        """Gets the effect_attributes of this SharedEffectsDetails.


        :return: The effect_attributes of this SharedEffectsDetails.
        :rtype: List[SharedEffectAttributesDetails]
        """
        return self._effect_attributes

    @effect_attributes.setter
    def effect_attributes(self, effect_attributes):
        """Sets the effect_attributes of this SharedEffectsDetails.


        :param effect_attributes: The effect_attributes of this SharedEffectsDetails.
        :type effect_attributes: List[SharedEffectAttributesDetails]
        """

        self._effect_attributes = effect_attributes

    @property
    def effect_map(self):
        """Gets the effect_map of this SharedEffectsDetails.


        :return: The effect_map of this SharedEffectsDetails.
        :rtype: ThemeEffectMapDetails
        """
        return self._effect_map

    @effect_map.setter
    def effect_map(self, effect_map):
        """Sets the effect_map of this SharedEffectsDetails.


        :param effect_map: The effect_map of this SharedEffectsDetails.
        :type effect_map: ThemeEffectMapDetails
        """

        self._effect_map = effect_map

    @property
    def effect_map_id(self):
        """Gets the effect_map_id of this SharedEffectsDetails.


        :return: The effect_map_id of this SharedEffectsDetails.
        :rtype: str
        """
        return self._effect_map_id

    @effect_map_id.setter
    def effect_map_id(self, effect_map_id):
        """Sets the effect_map_id of this SharedEffectsDetails.


        :param effect_map_id: The effect_map_id of this SharedEffectsDetails.
        :type effect_map_id: str
        """

        self._effect_map_id = effect_map_id

    @property
    def id(self):
        """Gets the id of this SharedEffectsDetails.


        :return: The id of this SharedEffectsDetails.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SharedEffectsDetails.


        :param id: The id of this SharedEffectsDetails.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this SharedEffectsDetails.


        :return: The name of this SharedEffectsDetails.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SharedEffectsDetails.


        :param name: The name of this SharedEffectsDetails.
        :type name: str
        """

        self._name = name

    @property
    def parent_connector(self):
        """Gets the parent_connector of this SharedEffectsDetails.


        :return: The parent_connector of this SharedEffectsDetails.
        :rtype: SlideConnectorDetails
        """
        return self._parent_connector

    @parent_connector.setter
    def parent_connector(self, parent_connector):
        """Sets the parent_connector of this SharedEffectsDetails.


        :param parent_connector: The parent_connector of this SharedEffectsDetails.
        :type parent_connector: SlideConnectorDetails
        """

        self._parent_connector = parent_connector

    @property
    def parent_shape(self):
        """Gets the parent_shape of this SharedEffectsDetails.


        :return: The parent_shape of this SharedEffectsDetails.
        :rtype: SlideShapesDetails
        """
        return self._parent_shape

    @parent_shape.setter
    def parent_shape(self, parent_shape):
        """Sets the parent_shape of this SharedEffectsDetails.


        :param parent_shape: The parent_shape of this SharedEffectsDetails.
        :type parent_shape: SlideShapesDetails
        """

        self._parent_shape = parent_shape

    @property
    def shape_id(self):
        """Gets the shape_id of this SharedEffectsDetails.


        :return: The shape_id of this SharedEffectsDetails.
        :rtype: str
        """
        return self._shape_id

    @shape_id.setter
    def shape_id(self, shape_id):
        """Sets the shape_id of this SharedEffectsDetails.


        :param shape_id: The shape_id of this SharedEffectsDetails.
        :type shape_id: str
        """

        self._shape_id = shape_id

    @property
    def user_created(self):
        """Gets the user_created of this SharedEffectsDetails.


        :return: The user_created of this SharedEffectsDetails.
        :rtype: str
        """
        return self._user_created

    @user_created.setter
    def user_created(self, user_created):
        """Sets the user_created of this SharedEffectsDetails.


        :param user_created: The user_created of this SharedEffectsDetails.
        :type user_created: str
        """

        self._user_created = user_created

    @property
    def user_modified(self):
        """Gets the user_modified of this SharedEffectsDetails.


        :return: The user_modified of this SharedEffectsDetails.
        :rtype: str
        """
        return self._user_modified

    @user_modified.setter
    def user_modified(self, user_modified):
        """Sets the user_modified of this SharedEffectsDetails.


        :param user_modified: The user_modified of this SharedEffectsDetails.
        :type user_modified: str
        """

        self._user_modified = user_modified
