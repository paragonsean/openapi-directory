# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SharedEffects(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connector_id: str=None, effect_map_id: str=None, id: str=None, name: str=None, shape_id: str=None):
        """SharedEffects - a model defined in OpenAPI

        :param connector_id: The connector_id of this SharedEffects.
        :param effect_map_id: The effect_map_id of this SharedEffects.
        :param id: The id of this SharedEffects.
        :param name: The name of this SharedEffects.
        :param shape_id: The shape_id of this SharedEffects.
        """
        self.openapi_types = {
            'connector_id': str,
            'effect_map_id': str,
            'id': str,
            'name': str,
            'shape_id': str
        }

        self.attribute_map = {
            'connector_id': 'connectorId',
            'effect_map_id': 'effectMapId',
            'id': 'id',
            'name': 'name',
            'shape_id': 'shapeId'
        }

        self._connector_id = connector_id
        self._effect_map_id = effect_map_id
        self._id = id
        self._name = name
        self._shape_id = shape_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SharedEffects':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Shared.Effects of this SharedEffects.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connector_id(self):
        """Gets the connector_id of this SharedEffects.


        :return: The connector_id of this SharedEffects.
        :rtype: str
        """
        return self._connector_id

    @connector_id.setter
    def connector_id(self, connector_id):
        """Sets the connector_id of this SharedEffects.


        :param connector_id: The connector_id of this SharedEffects.
        :type connector_id: str
        """

        self._connector_id = connector_id

    @property
    def effect_map_id(self):
        """Gets the effect_map_id of this SharedEffects.


        :return: The effect_map_id of this SharedEffects.
        :rtype: str
        """
        return self._effect_map_id

    @effect_map_id.setter
    def effect_map_id(self, effect_map_id):
        """Sets the effect_map_id of this SharedEffects.


        :param effect_map_id: The effect_map_id of this SharedEffects.
        :type effect_map_id: str
        """

        self._effect_map_id = effect_map_id

    @property
    def id(self):
        """Gets the id of this SharedEffects.


        :return: The id of this SharedEffects.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SharedEffects.


        :param id: The id of this SharedEffects.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this SharedEffects.


        :return: The name of this SharedEffects.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SharedEffects.


        :param name: The name of this SharedEffects.
        :type name: str
        """

        self._name = name

    @property
    def shape_id(self):
        """Gets the shape_id of this SharedEffects.


        :return: The shape_id of this SharedEffects.
        :rtype: str
        """
        return self._shape_id

    @shape_id.setter
    def shape_id(self, shape_id):
        """Sets the shape_id of this SharedEffects.


        :param shape_id: The shape_id of this SharedEffects.
        :type shape_id: str
        """

        self._shape_id = shape_id
