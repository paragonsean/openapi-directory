# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ThemeColors(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accent1: str=None, accent2: str=None, accent3: str=None, accent4: str=None, accent5: str=None, accent6: str=None, dark1: str=None, dark2: str=None, followed_hyperlink: str=None, hyperlink: str=None, id: str=None, light1: str=None, light2: str=None, name: str=None, theme_id: str=None):
        """ThemeColors - a model defined in OpenAPI

        :param accent1: The accent1 of this ThemeColors.
        :param accent2: The accent2 of this ThemeColors.
        :param accent3: The accent3 of this ThemeColors.
        :param accent4: The accent4 of this ThemeColors.
        :param accent5: The accent5 of this ThemeColors.
        :param accent6: The accent6 of this ThemeColors.
        :param dark1: The dark1 of this ThemeColors.
        :param dark2: The dark2 of this ThemeColors.
        :param followed_hyperlink: The followed_hyperlink of this ThemeColors.
        :param hyperlink: The hyperlink of this ThemeColors.
        :param id: The id of this ThemeColors.
        :param light1: The light1 of this ThemeColors.
        :param light2: The light2 of this ThemeColors.
        :param name: The name of this ThemeColors.
        :param theme_id: The theme_id of this ThemeColors.
        """
        self.openapi_types = {
            'accent1': str,
            'accent2': str,
            'accent3': str,
            'accent4': str,
            'accent5': str,
            'accent6': str,
            'dark1': str,
            'dark2': str,
            'followed_hyperlink': str,
            'hyperlink': str,
            'id': str,
            'light1': str,
            'light2': str,
            'name': str,
            'theme_id': str
        }

        self.attribute_map = {
            'accent1': 'accent1',
            'accent2': 'accent2',
            'accent3': 'accent3',
            'accent4': 'accent4',
            'accent5': 'accent5',
            'accent6': 'accent6',
            'dark1': 'dark1',
            'dark2': 'dark2',
            'followed_hyperlink': 'followedHyperlink',
            'hyperlink': 'hyperlink',
            'id': 'id',
            'light1': 'light1',
            'light2': 'light2',
            'name': 'name',
            'theme_id': 'themeId'
        }

        self._accent1 = accent1
        self._accent2 = accent2
        self._accent3 = accent3
        self._accent4 = accent4
        self._accent5 = accent5
        self._accent6 = accent6
        self._dark1 = dark1
        self._dark2 = dark2
        self._followed_hyperlink = followed_hyperlink
        self._hyperlink = hyperlink
        self._id = id
        self._light1 = light1
        self._light2 = light2
        self._name = name
        self._theme_id = theme_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ThemeColors':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Theme.Colors of this ThemeColors.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accent1(self):
        """Gets the accent1 of this ThemeColors.


        :return: The accent1 of this ThemeColors.
        :rtype: str
        """
        return self._accent1

    @accent1.setter
    def accent1(self, accent1):
        """Sets the accent1 of this ThemeColors.


        :param accent1: The accent1 of this ThemeColors.
        :type accent1: str
        """

        self._accent1 = accent1

    @property
    def accent2(self):
        """Gets the accent2 of this ThemeColors.


        :return: The accent2 of this ThemeColors.
        :rtype: str
        """
        return self._accent2

    @accent2.setter
    def accent2(self, accent2):
        """Sets the accent2 of this ThemeColors.


        :param accent2: The accent2 of this ThemeColors.
        :type accent2: str
        """

        self._accent2 = accent2

    @property
    def accent3(self):
        """Gets the accent3 of this ThemeColors.


        :return: The accent3 of this ThemeColors.
        :rtype: str
        """
        return self._accent3

    @accent3.setter
    def accent3(self, accent3):
        """Sets the accent3 of this ThemeColors.


        :param accent3: The accent3 of this ThemeColors.
        :type accent3: str
        """

        self._accent3 = accent3

    @property
    def accent4(self):
        """Gets the accent4 of this ThemeColors.


        :return: The accent4 of this ThemeColors.
        :rtype: str
        """
        return self._accent4

    @accent4.setter
    def accent4(self, accent4):
        """Sets the accent4 of this ThemeColors.


        :param accent4: The accent4 of this ThemeColors.
        :type accent4: str
        """

        self._accent4 = accent4

    @property
    def accent5(self):
        """Gets the accent5 of this ThemeColors.


        :return: The accent5 of this ThemeColors.
        :rtype: str
        """
        return self._accent5

    @accent5.setter
    def accent5(self, accent5):
        """Sets the accent5 of this ThemeColors.


        :param accent5: The accent5 of this ThemeColors.
        :type accent5: str
        """

        self._accent5 = accent5

    @property
    def accent6(self):
        """Gets the accent6 of this ThemeColors.


        :return: The accent6 of this ThemeColors.
        :rtype: str
        """
        return self._accent6

    @accent6.setter
    def accent6(self, accent6):
        """Sets the accent6 of this ThemeColors.


        :param accent6: The accent6 of this ThemeColors.
        :type accent6: str
        """

        self._accent6 = accent6

    @property
    def dark1(self):
        """Gets the dark1 of this ThemeColors.


        :return: The dark1 of this ThemeColors.
        :rtype: str
        """
        return self._dark1

    @dark1.setter
    def dark1(self, dark1):
        """Sets the dark1 of this ThemeColors.


        :param dark1: The dark1 of this ThemeColors.
        :type dark1: str
        """

        self._dark1 = dark1

    @property
    def dark2(self):
        """Gets the dark2 of this ThemeColors.


        :return: The dark2 of this ThemeColors.
        :rtype: str
        """
        return self._dark2

    @dark2.setter
    def dark2(self, dark2):
        """Sets the dark2 of this ThemeColors.


        :param dark2: The dark2 of this ThemeColors.
        :type dark2: str
        """

        self._dark2 = dark2

    @property
    def followed_hyperlink(self):
        """Gets the followed_hyperlink of this ThemeColors.


        :return: The followed_hyperlink of this ThemeColors.
        :rtype: str
        """
        return self._followed_hyperlink

    @followed_hyperlink.setter
    def followed_hyperlink(self, followed_hyperlink):
        """Sets the followed_hyperlink of this ThemeColors.


        :param followed_hyperlink: The followed_hyperlink of this ThemeColors.
        :type followed_hyperlink: str
        """

        self._followed_hyperlink = followed_hyperlink

    @property
    def hyperlink(self):
        """Gets the hyperlink of this ThemeColors.


        :return: The hyperlink of this ThemeColors.
        :rtype: str
        """
        return self._hyperlink

    @hyperlink.setter
    def hyperlink(self, hyperlink):
        """Sets the hyperlink of this ThemeColors.


        :param hyperlink: The hyperlink of this ThemeColors.
        :type hyperlink: str
        """

        self._hyperlink = hyperlink

    @property
    def id(self):
        """Gets the id of this ThemeColors.


        :return: The id of this ThemeColors.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ThemeColors.


        :param id: The id of this ThemeColors.
        :type id: str
        """

        self._id = id

    @property
    def light1(self):
        """Gets the light1 of this ThemeColors.


        :return: The light1 of this ThemeColors.
        :rtype: str
        """
        return self._light1

    @light1.setter
    def light1(self, light1):
        """Sets the light1 of this ThemeColors.


        :param light1: The light1 of this ThemeColors.
        :type light1: str
        """

        self._light1 = light1

    @property
    def light2(self):
        """Gets the light2 of this ThemeColors.


        :return: The light2 of this ThemeColors.
        :rtype: str
        """
        return self._light2

    @light2.setter
    def light2(self, light2):
        """Sets the light2 of this ThemeColors.


        :param light2: The light2 of this ThemeColors.
        :type light2: str
        """

        self._light2 = light2

    @property
    def name(self):
        """Gets the name of this ThemeColors.


        :return: The name of this ThemeColors.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ThemeColors.


        :param name: The name of this ThemeColors.
        :type name: str
        """

        self._name = name

    @property
    def theme_id(self):
        """Gets the theme_id of this ThemeColors.


        :return: The theme_id of this ThemeColors.
        :rtype: str
        """
        return self._theme_id

    @theme_id.setter
    def theme_id(self, theme_id):
        """Sets the theme_id of this ThemeColors.


        :param theme_id: The theme_id of this ThemeColors.
        :type theme_id: str
        """

        self._theme_id = theme_id
