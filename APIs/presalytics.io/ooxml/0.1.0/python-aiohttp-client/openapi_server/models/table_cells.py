# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TableCells(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, column_id: str=None, column_span: int=None, id: str=None, is_merged_horozontal: bool=None, is_merged_vertical: bool=None, row_id: str=None, row_span: int=None):
        """TableCells - a model defined in OpenAPI

        :param column_id: The column_id of this TableCells.
        :param column_span: The column_span of this TableCells.
        :param id: The id of this TableCells.
        :param is_merged_horozontal: The is_merged_horozontal of this TableCells.
        :param is_merged_vertical: The is_merged_vertical of this TableCells.
        :param row_id: The row_id of this TableCells.
        :param row_span: The row_span of this TableCells.
        """
        self.openapi_types = {
            'column_id': str,
            'column_span': int,
            'id': str,
            'is_merged_horozontal': bool,
            'is_merged_vertical': bool,
            'row_id': str,
            'row_span': int
        }

        self.attribute_map = {
            'column_id': 'columnId',
            'column_span': 'columnSpan',
            'id': 'id',
            'is_merged_horozontal': 'isMergedHorozontal',
            'is_merged_vertical': 'isMergedVertical',
            'row_id': 'rowId',
            'row_span': 'rowSpan'
        }

        self._column_id = column_id
        self._column_span = column_span
        self._id = id
        self._is_merged_horozontal = is_merged_horozontal
        self._is_merged_vertical = is_merged_vertical
        self._row_id = row_id
        self._row_span = row_span

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TableCells':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Table.Cells of this TableCells.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def column_id(self):
        """Gets the column_id of this TableCells.


        :return: The column_id of this TableCells.
        :rtype: str
        """
        return self._column_id

    @column_id.setter
    def column_id(self, column_id):
        """Sets the column_id of this TableCells.


        :param column_id: The column_id of this TableCells.
        :type column_id: str
        """

        self._column_id = column_id

    @property
    def column_span(self):
        """Gets the column_span of this TableCells.


        :return: The column_span of this TableCells.
        :rtype: int
        """
        return self._column_span

    @column_span.setter
    def column_span(self, column_span):
        """Sets the column_span of this TableCells.


        :param column_span: The column_span of this TableCells.
        :type column_span: int
        """

        self._column_span = column_span

    @property
    def id(self):
        """Gets the id of this TableCells.


        :return: The id of this TableCells.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TableCells.


        :param id: The id of this TableCells.
        :type id: str
        """

        self._id = id

    @property
    def is_merged_horozontal(self):
        """Gets the is_merged_horozontal of this TableCells.


        :return: The is_merged_horozontal of this TableCells.
        :rtype: bool
        """
        return self._is_merged_horozontal

    @is_merged_horozontal.setter
    def is_merged_horozontal(self, is_merged_horozontal):
        """Sets the is_merged_horozontal of this TableCells.


        :param is_merged_horozontal: The is_merged_horozontal of this TableCells.
        :type is_merged_horozontal: bool
        """

        self._is_merged_horozontal = is_merged_horozontal

    @property
    def is_merged_vertical(self):
        """Gets the is_merged_vertical of this TableCells.


        :return: The is_merged_vertical of this TableCells.
        :rtype: bool
        """
        return self._is_merged_vertical

    @is_merged_vertical.setter
    def is_merged_vertical(self, is_merged_vertical):
        """Sets the is_merged_vertical of this TableCells.


        :param is_merged_vertical: The is_merged_vertical of this TableCells.
        :type is_merged_vertical: bool
        """

        self._is_merged_vertical = is_merged_vertical

    @property
    def row_id(self):
        """Gets the row_id of this TableCells.


        :return: The row_id of this TableCells.
        :rtype: str
        """
        return self._row_id

    @row_id.setter
    def row_id(self, row_id):
        """Sets the row_id of this TableCells.


        :param row_id: The row_id of this TableCells.
        :type row_id: str
        """

        self._row_id = row_id

    @property
    def row_span(self):
        """Gets the row_span of this TableCells.


        :return: The row_span of this TableCells.
        :rtype: int
        """
        return self._row_span

    @row_span.setter
    def row_span(self, row_span):
        """Sets the row_span of this TableCells.


        :param row_span: The row_span of this TableCells.
        :type row_span: int
        """

        self._row_span = row_span
