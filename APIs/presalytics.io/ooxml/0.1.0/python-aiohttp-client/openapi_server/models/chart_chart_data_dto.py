# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ChartChartDataDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category_names: List[str]=None, chart_id: str=None, data_points: List[List[float]]=None, series_names: List[str]=None):
        """ChartChartDataDTO - a model defined in OpenAPI

        :param category_names: The category_names of this ChartChartDataDTO.
        :param chart_id: The chart_id of this ChartChartDataDTO.
        :param data_points: The data_points of this ChartChartDataDTO.
        :param series_names: The series_names of this ChartChartDataDTO.
        """
        self.openapi_types = {
            'category_names': List[str],
            'chart_id': str,
            'data_points': List[List[float]],
            'series_names': List[str]
        }

        self.attribute_map = {
            'category_names': 'categoryNames',
            'chart_id': 'chartId',
            'data_points': 'dataPoints',
            'series_names': 'seriesNames'
        }

        self._category_names = category_names
        self._chart_id = chart_id
        self._data_points = data_points
        self._series_names = series_names

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChartChartDataDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Chart.ChartDataDTO of this ChartChartDataDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category_names(self):
        """Gets the category_names of this ChartChartDataDTO.


        :return: The category_names of this ChartChartDataDTO.
        :rtype: List[str]
        """
        return self._category_names

    @category_names.setter
    def category_names(self, category_names):
        """Sets the category_names of this ChartChartDataDTO.


        :param category_names: The category_names of this ChartChartDataDTO.
        :type category_names: List[str]
        """

        self._category_names = category_names

    @property
    def chart_id(self):
        """Gets the chart_id of this ChartChartDataDTO.


        :return: The chart_id of this ChartChartDataDTO.
        :rtype: str
        """
        return self._chart_id

    @chart_id.setter
    def chart_id(self, chart_id):
        """Sets the chart_id of this ChartChartDataDTO.


        :param chart_id: The chart_id of this ChartChartDataDTO.
        :type chart_id: str
        """

        self._chart_id = chart_id

    @property
    def data_points(self):
        """Gets the data_points of this ChartChartDataDTO.


        :return: The data_points of this ChartChartDataDTO.
        :rtype: List[List[float]]
        """
        return self._data_points

    @data_points.setter
    def data_points(self, data_points):
        """Sets the data_points of this ChartChartDataDTO.


        :param data_points: The data_points of this ChartChartDataDTO.
        :type data_points: List[List[float]]
        """

        self._data_points = data_points

    @property
    def series_names(self):
        """Gets the series_names of this ChartChartDataDTO.


        :return: The series_names of this ChartChartDataDTO.
        :rtype: List[str]
        """
        return self._series_names

    @series_names.setter
    def series_names(self, series_names):
        """Sets the series_names of this ChartChartDataDTO.


        :param series_names: The series_names of this ChartChartDataDTO.
        :type series_names: List[str]
        """

        self._series_names = series_names
