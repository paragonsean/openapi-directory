# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ThemeCustomColors(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, hex_value: str=None, id: str=None, name: str=None, theme_id: str=None):
        """ThemeCustomColors - a model defined in OpenAPI

        :param hex_value: The hex_value of this ThemeCustomColors.
        :param id: The id of this ThemeCustomColors.
        :param name: The name of this ThemeCustomColors.
        :param theme_id: The theme_id of this ThemeCustomColors.
        """
        self.openapi_types = {
            'hex_value': str,
            'id': str,
            'name': str,
            'theme_id': str
        }

        self.attribute_map = {
            'hex_value': 'hexValue',
            'id': 'id',
            'name': 'name',
            'theme_id': 'themeId'
        }

        self._hex_value = hex_value
        self._id = id
        self._name = name
        self._theme_id = theme_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ThemeCustomColors':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Theme.CustomColors of this ThemeCustomColors.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hex_value(self):
        """Gets the hex_value of this ThemeCustomColors.


        :return: The hex_value of this ThemeCustomColors.
        :rtype: str
        """
        return self._hex_value

    @hex_value.setter
    def hex_value(self, hex_value):
        """Sets the hex_value of this ThemeCustomColors.


        :param hex_value: The hex_value of this ThemeCustomColors.
        :type hex_value: str
        """

        self._hex_value = hex_value

    @property
    def id(self):
        """Gets the id of this ThemeCustomColors.


        :return: The id of this ThemeCustomColors.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ThemeCustomColors.


        :param id: The id of this ThemeCustomColors.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ThemeCustomColors.


        :return: The name of this ThemeCustomColors.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ThemeCustomColors.


        :param name: The name of this ThemeCustomColors.
        :type name: str
        """

        self._name = name

    @property
    def theme_id(self):
        """Gets the theme_id of this ThemeCustomColors.


        :return: The theme_id of this ThemeCustomColors.
        :rtype: str
        """
        return self._theme_id

    @theme_id.setter
    def theme_id(self, theme_id):
        """Sets the theme_id of this ThemeCustomColors.


        :param theme_id: The theme_id of this ThemeCustomColors.
        :type theme_id: str
        """

        self._theme_id = theme_id
