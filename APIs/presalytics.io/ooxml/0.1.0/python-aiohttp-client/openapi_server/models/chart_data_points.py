# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ChartDataPoints(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, chart_data_id: str=None, column_id: str=None, id: str=None, row_id: str=None, value: float=None):
        """ChartDataPoints - a model defined in OpenAPI

        :param chart_data_id: The chart_data_id of this ChartDataPoints.
        :param column_id: The column_id of this ChartDataPoints.
        :param id: The id of this ChartDataPoints.
        :param row_id: The row_id of this ChartDataPoints.
        :param value: The value of this ChartDataPoints.
        """
        self.openapi_types = {
            'chart_data_id': str,
            'column_id': str,
            'id': str,
            'row_id': str,
            'value': float
        }

        self.attribute_map = {
            'chart_data_id': 'chartDataId',
            'column_id': 'columnId',
            'id': 'id',
            'row_id': 'rowId',
            'value': 'value'
        }

        self._chart_data_id = chart_data_id
        self._column_id = column_id
        self._id = id
        self._row_id = row_id
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChartDataPoints':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Chart.DataPoints of this ChartDataPoints.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def chart_data_id(self):
        """Gets the chart_data_id of this ChartDataPoints.


        :return: The chart_data_id of this ChartDataPoints.
        :rtype: str
        """
        return self._chart_data_id

    @chart_data_id.setter
    def chart_data_id(self, chart_data_id):
        """Sets the chart_data_id of this ChartDataPoints.


        :param chart_data_id: The chart_data_id of this ChartDataPoints.
        :type chart_data_id: str
        """

        self._chart_data_id = chart_data_id

    @property
    def column_id(self):
        """Gets the column_id of this ChartDataPoints.


        :return: The column_id of this ChartDataPoints.
        :rtype: str
        """
        return self._column_id

    @column_id.setter
    def column_id(self, column_id):
        """Sets the column_id of this ChartDataPoints.


        :param column_id: The column_id of this ChartDataPoints.
        :type column_id: str
        """

        self._column_id = column_id

    @property
    def id(self):
        """Gets the id of this ChartDataPoints.


        :return: The id of this ChartDataPoints.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ChartDataPoints.


        :param id: The id of this ChartDataPoints.
        :type id: str
        """

        self._id = id

    @property
    def row_id(self):
        """Gets the row_id of this ChartDataPoints.


        :return: The row_id of this ChartDataPoints.
        :rtype: str
        """
        return self._row_id

    @row_id.setter
    def row_id(self, row_id):
        """Sets the row_id of this ChartDataPoints.


        :param row_id: The row_id of this ChartDataPoints.
        :type row_id: str
        """

        self._row_id = row_id

    @property
    def value(self):
        """Gets the value of this ChartDataPoints.


        :return: The value of this ChartDataPoints.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ChartDataPoints.


        :param value: The value of this ChartDataPoints.
        :type value: float
        """

        self._value = value
