/**
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDocumentsApi_H
#define OAI_OAIDocumentsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIChildObjects.h"
#include "OAIDocument.h"
#include "OAIDocumentCloneDTO.h"
#include "OAIHttpFileElement.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDocumentsApi : public QObject {
    Q_OBJECT

public:
    OAIDocumentsApi(const int timeOut = 0);
    ~OAIDocumentsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    */
    virtual void documentsChildobjectsGetId(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_document_clone_dto OAIDocumentCloneDTO [optional]
    */
    virtual void documentsClonePostId(const QString &id, const ::OpenAPI::OptionalParam<OAIDocumentCloneDTO> &oai_document_clone_dto = ::OpenAPI::OptionalParam<OAIDocumentCloneDTO>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void documentsDeleteId(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  orginal bool [optional]
    */
    virtual void documentsDownloadGetIdOrginal(const QString &id, const ::OpenAPI::OptionalParam<bool> &orginal = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void documentsGetId(const QString &id);

    /**
    * @param[in]  file OAIHttpFileElement [required]
    * @param[in]  story_id QString [required]
    */
    virtual void documentsPost(const OAIHttpFileElement &file, const QString &story_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void documentsChildobjectsGetIdCallback(OAIHttpRequestWorker *worker);
    void documentsClonePostIdCallback(OAIHttpRequestWorker *worker);
    void documentsDeleteIdCallback(OAIHttpRequestWorker *worker);
    void documentsDownloadGetIdOrginalCallback(OAIHttpRequestWorker *worker);
    void documentsGetIdCallback(OAIHttpRequestWorker *worker);
    void documentsPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void documentsChildobjectsGetIdSignal(QList<OAIChildObjects> summary);
    void documentsClonePostIdSignal(OAIDocument summary);
    void documentsDeleteIdSignal();
    void documentsDownloadGetIdOrginalSignal(OAIHttpFileElement summary);
    void documentsGetIdSignal(OAIDocument summary);
    void documentsPostSignal(QList<OAIDocument> summary);


    void documentsChildobjectsGetIdSignalFull(OAIHttpRequestWorker *worker, QList<OAIChildObjects> summary);
    void documentsClonePostIdSignalFull(OAIHttpRequestWorker *worker, OAIDocument summary);
    void documentsDeleteIdSignalFull(OAIHttpRequestWorker *worker);
    void documentsDownloadGetIdOrginalSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void documentsGetIdSignalFull(OAIHttpRequestWorker *worker, OAIDocument summary);
    void documentsPostSignalFull(OAIHttpRequestWorker *worker, QList<OAIDocument> summary);

    Q_DECL_DEPRECATED_X("Use documentsChildobjectsGetIdSignalError() instead")
    void documentsChildobjectsGetIdSignalE(QList<OAIChildObjects> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void documentsChildobjectsGetIdSignalError(QList<OAIChildObjects> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use documentsClonePostIdSignalError() instead")
    void documentsClonePostIdSignalE(OAIDocument summary, QNetworkReply::NetworkError error_type, QString error_str);
    void documentsClonePostIdSignalError(OAIDocument summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use documentsDeleteIdSignalError() instead")
    void documentsDeleteIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void documentsDeleteIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use documentsDownloadGetIdOrginalSignalError() instead")
    void documentsDownloadGetIdOrginalSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void documentsDownloadGetIdOrginalSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use documentsGetIdSignalError() instead")
    void documentsGetIdSignalE(OAIDocument summary, QNetworkReply::NetworkError error_type, QString error_str);
    void documentsGetIdSignalError(OAIDocument summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use documentsPostSignalError() instead")
    void documentsPostSignalE(QList<OAIDocument> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void documentsPostSignalError(QList<OAIDocument> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use documentsChildobjectsGetIdSignalErrorFull() instead")
    void documentsChildobjectsGetIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void documentsChildobjectsGetIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use documentsClonePostIdSignalErrorFull() instead")
    void documentsClonePostIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void documentsClonePostIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use documentsDeleteIdSignalErrorFull() instead")
    void documentsDeleteIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void documentsDeleteIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use documentsDownloadGetIdOrginalSignalErrorFull() instead")
    void documentsDownloadGetIdOrginalSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void documentsDownloadGetIdOrginalSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use documentsGetIdSignalErrorFull() instead")
    void documentsGetIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void documentsGetIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use documentsPostSignalErrorFull() instead")
    void documentsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void documentsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
