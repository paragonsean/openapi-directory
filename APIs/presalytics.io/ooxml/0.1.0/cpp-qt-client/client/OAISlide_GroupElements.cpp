/**
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISlide_GroupElements.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISlide_GroupElements::OAISlide_GroupElements(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISlide_GroupElements::OAISlide_GroupElements() {
    this->initializeModel();
}

OAISlide_GroupElements::~OAISlide_GroupElements() {}

void OAISlide_GroupElements::initializeModel() {

    m_group_element_type_id_isSet = false;
    m_group_element_type_id_isValid = false;

    m_group_element_type_pk_isSet = false;
    m_group_element_type_pk_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_parent_group_element_id_isSet = false;
    m_parent_group_element_id_isValid = false;

    m_shape_tree_id_isSet = false;
    m_shape_tree_id_isValid = false;

    m_ultimate_parent_shape_tree_id_isSet = false;
    m_ultimate_parent_shape_tree_id_isValid = false;
}

void OAISlide_GroupElements::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISlide_GroupElements::fromJsonObject(QJsonObject json) {

    m_group_element_type_id_isValid = ::OpenAPI::fromJsonValue(m_group_element_type_id, json[QString("groupElementTypeId")]);
    m_group_element_type_id_isSet = !json[QString("groupElementTypeId")].isNull() && m_group_element_type_id_isValid;

    m_group_element_type_pk_isValid = ::OpenAPI::fromJsonValue(m_group_element_type_pk, json[QString("groupElementTypePk")]);
    m_group_element_type_pk_isSet = !json[QString("groupElementTypePk")].isNull() && m_group_element_type_pk_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_parent_group_element_id_isValid = ::OpenAPI::fromJsonValue(m_parent_group_element_id, json[QString("parentGroupElementId")]);
    m_parent_group_element_id_isSet = !json[QString("parentGroupElementId")].isNull() && m_parent_group_element_id_isValid;

    m_shape_tree_id_isValid = ::OpenAPI::fromJsonValue(m_shape_tree_id, json[QString("shapeTreeId")]);
    m_shape_tree_id_isSet = !json[QString("shapeTreeId")].isNull() && m_shape_tree_id_isValid;

    m_ultimate_parent_shape_tree_id_isValid = ::OpenAPI::fromJsonValue(m_ultimate_parent_shape_tree_id, json[QString("ultimateParentShapeTreeId")]);
    m_ultimate_parent_shape_tree_id_isSet = !json[QString("ultimateParentShapeTreeId")].isNull() && m_ultimate_parent_shape_tree_id_isValid;
}

QString OAISlide_GroupElements::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISlide_GroupElements::asJsonObject() const {
    QJsonObject obj;
    if (m_group_element_type_id_isSet) {
        obj.insert(QString("groupElementTypeId"), ::OpenAPI::toJsonValue(m_group_element_type_id));
    }
    if (m_group_element_type_pk_isSet) {
        obj.insert(QString("groupElementTypePk"), ::OpenAPI::toJsonValue(m_group_element_type_pk));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_parent_group_element_id_isSet) {
        obj.insert(QString("parentGroupElementId"), ::OpenAPI::toJsonValue(m_parent_group_element_id));
    }
    if (m_shape_tree_id_isSet) {
        obj.insert(QString("shapeTreeId"), ::OpenAPI::toJsonValue(m_shape_tree_id));
    }
    if (m_ultimate_parent_shape_tree_id_isSet) {
        obj.insert(QString("ultimateParentShapeTreeId"), ::OpenAPI::toJsonValue(m_ultimate_parent_shape_tree_id));
    }
    return obj;
}

qint32 OAISlide_GroupElements::getGroupElementTypeId() const {
    return m_group_element_type_id;
}
void OAISlide_GroupElements::setGroupElementTypeId(const qint32 &group_element_type_id) {
    m_group_element_type_id = group_element_type_id;
    m_group_element_type_id_isSet = true;
}

bool OAISlide_GroupElements::is_group_element_type_id_Set() const{
    return m_group_element_type_id_isSet;
}

bool OAISlide_GroupElements::is_group_element_type_id_Valid() const{
    return m_group_element_type_id_isValid;
}

QString OAISlide_GroupElements::getGroupElementTypePk() const {
    return m_group_element_type_pk;
}
void OAISlide_GroupElements::setGroupElementTypePk(const QString &group_element_type_pk) {
    m_group_element_type_pk = group_element_type_pk;
    m_group_element_type_pk_isSet = true;
}

bool OAISlide_GroupElements::is_group_element_type_pk_Set() const{
    return m_group_element_type_pk_isSet;
}

bool OAISlide_GroupElements::is_group_element_type_pk_Valid() const{
    return m_group_element_type_pk_isValid;
}

QString OAISlide_GroupElements::getId() const {
    return m_id;
}
void OAISlide_GroupElements::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISlide_GroupElements::is_id_Set() const{
    return m_id_isSet;
}

bool OAISlide_GroupElements::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISlide_GroupElements::getParentGroupElementId() const {
    return m_parent_group_element_id;
}
void OAISlide_GroupElements::setParentGroupElementId(const QString &parent_group_element_id) {
    m_parent_group_element_id = parent_group_element_id;
    m_parent_group_element_id_isSet = true;
}

bool OAISlide_GroupElements::is_parent_group_element_id_Set() const{
    return m_parent_group_element_id_isSet;
}

bool OAISlide_GroupElements::is_parent_group_element_id_Valid() const{
    return m_parent_group_element_id_isValid;
}

QString OAISlide_GroupElements::getShapeTreeId() const {
    return m_shape_tree_id;
}
void OAISlide_GroupElements::setShapeTreeId(const QString &shape_tree_id) {
    m_shape_tree_id = shape_tree_id;
    m_shape_tree_id_isSet = true;
}

bool OAISlide_GroupElements::is_shape_tree_id_Set() const{
    return m_shape_tree_id_isSet;
}

bool OAISlide_GroupElements::is_shape_tree_id_Valid() const{
    return m_shape_tree_id_isValid;
}

QString OAISlide_GroupElements::getUltimateParentShapeTreeId() const {
    return m_ultimate_parent_shape_tree_id;
}
void OAISlide_GroupElements::setUltimateParentShapeTreeId(const QString &ultimate_parent_shape_tree_id) {
    m_ultimate_parent_shape_tree_id = ultimate_parent_shape_tree_id;
    m_ultimate_parent_shape_tree_id_isSet = true;
}

bool OAISlide_GroupElements::is_ultimate_parent_shape_tree_id_Set() const{
    return m_ultimate_parent_shape_tree_id_isSet;
}

bool OAISlide_GroupElements::is_ultimate_parent_shape_tree_id_Valid() const{
    return m_ultimate_parent_shape_tree_id_isValid;
}

bool OAISlide_GroupElements::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_group_element_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_element_type_pk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_group_element_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shape_tree_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ultimate_parent_shape_tree_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISlide_GroupElements::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
