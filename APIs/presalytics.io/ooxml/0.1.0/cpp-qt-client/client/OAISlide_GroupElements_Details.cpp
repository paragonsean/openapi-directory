/**
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISlide_GroupElements_Details.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISlide_GroupElements_Details::OAISlide_GroupElements_Details(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISlide_GroupElements_Details::OAISlide_GroupElements_Details() {
    this->initializeModel();
}

OAISlide_GroupElements_Details::~OAISlide_GroupElements_Details() {}

void OAISlide_GroupElements_Details::initializeModel() {

    m_child_group_elements_isSet = false;
    m_child_group_elements_isValid = false;

    m_connector_isSet = false;
    m_connector_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_modified_isSet = false;
    m_date_modified_isValid = false;

    m_graphic_isSet = false;
    m_graphic_isValid = false;

    m_group_isSet = false;
    m_group_isValid = false;

    m_group_element_type_id_isSet = false;
    m_group_element_type_id_isValid = false;

    m_group_element_type_pk_isSet = false;
    m_group_element_type_pk_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_parent_group_element_isSet = false;
    m_parent_group_element_isValid = false;

    m_parent_group_element_id_isSet = false;
    m_parent_group_element_id_isValid = false;

    m_shape_isSet = false;
    m_shape_isValid = false;

    m_shape_tree_isSet = false;
    m_shape_tree_isValid = false;

    m_shape_tree_id_isSet = false;
    m_shape_tree_id_isValid = false;

    m_type_info_isSet = false;
    m_type_info_isValid = false;

    m_ultimate_parent_shape_tree_id_isSet = false;
    m_ultimate_parent_shape_tree_id_isValid = false;

    m_user_created_isSet = false;
    m_user_created_isValid = false;

    m_user_modified_isSet = false;
    m_user_modified_isValid = false;
}

void OAISlide_GroupElements_Details::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISlide_GroupElements_Details::fromJsonObject(QJsonObject json) {

    m_child_group_elements_isValid = ::OpenAPI::fromJsonValue(m_child_group_elements, json[QString("childGroupElements")]);
    m_child_group_elements_isSet = !json[QString("childGroupElements")].isNull() && m_child_group_elements_isValid;

    m_connector_isValid = ::OpenAPI::fromJsonValue(m_connector, json[QString("connector")]);
    m_connector_isSet = !json[QString("connector")].isNull() && m_connector_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("dateCreated")]);
    m_date_created_isSet = !json[QString("dateCreated")].isNull() && m_date_created_isValid;

    m_date_modified_isValid = ::OpenAPI::fromJsonValue(m_date_modified, json[QString("dateModified")]);
    m_date_modified_isSet = !json[QString("dateModified")].isNull() && m_date_modified_isValid;

    m_graphic_isValid = ::OpenAPI::fromJsonValue(m_graphic, json[QString("graphic")]);
    m_graphic_isSet = !json[QString("graphic")].isNull() && m_graphic_isValid;

    m_group_isValid = ::OpenAPI::fromJsonValue(m_group, json[QString("group")]);
    m_group_isSet = !json[QString("group")].isNull() && m_group_isValid;

    m_group_element_type_id_isValid = ::OpenAPI::fromJsonValue(m_group_element_type_id, json[QString("groupElementTypeId")]);
    m_group_element_type_id_isSet = !json[QString("groupElementTypeId")].isNull() && m_group_element_type_id_isValid;

    m_group_element_type_pk_isValid = ::OpenAPI::fromJsonValue(m_group_element_type_pk, json[QString("groupElementTypePk")]);
    m_group_element_type_pk_isSet = !json[QString("groupElementTypePk")].isNull() && m_group_element_type_pk_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_parent_group_element_isValid = ::OpenAPI::fromJsonValue(m_parent_group_element, json[QString("parentGroupElement")]);
    m_parent_group_element_isSet = !json[QString("parentGroupElement")].isNull() && m_parent_group_element_isValid;

    m_parent_group_element_id_isValid = ::OpenAPI::fromJsonValue(m_parent_group_element_id, json[QString("parentGroupElementId")]);
    m_parent_group_element_id_isSet = !json[QString("parentGroupElementId")].isNull() && m_parent_group_element_id_isValid;

    m_shape_isValid = ::OpenAPI::fromJsonValue(m_shape, json[QString("shape")]);
    m_shape_isSet = !json[QString("shape")].isNull() && m_shape_isValid;

    m_shape_tree_isValid = ::OpenAPI::fromJsonValue(m_shape_tree, json[QString("shapeTree")]);
    m_shape_tree_isSet = !json[QString("shapeTree")].isNull() && m_shape_tree_isValid;

    m_shape_tree_id_isValid = ::OpenAPI::fromJsonValue(m_shape_tree_id, json[QString("shapeTreeId")]);
    m_shape_tree_id_isSet = !json[QString("shapeTreeId")].isNull() && m_shape_tree_id_isValid;

    m_type_info_isValid = ::OpenAPI::fromJsonValue(m_type_info, json[QString("typeInfo")]);
    m_type_info_isSet = !json[QString("typeInfo")].isNull() && m_type_info_isValid;

    m_ultimate_parent_shape_tree_id_isValid = ::OpenAPI::fromJsonValue(m_ultimate_parent_shape_tree_id, json[QString("ultimateParentShapeTreeId")]);
    m_ultimate_parent_shape_tree_id_isSet = !json[QString("ultimateParentShapeTreeId")].isNull() && m_ultimate_parent_shape_tree_id_isValid;

    m_user_created_isValid = ::OpenAPI::fromJsonValue(m_user_created, json[QString("userCreated")]);
    m_user_created_isSet = !json[QString("userCreated")].isNull() && m_user_created_isValid;

    m_user_modified_isValid = ::OpenAPI::fromJsonValue(m_user_modified, json[QString("userModified")]);
    m_user_modified_isSet = !json[QString("userModified")].isNull() && m_user_modified_isValid;
}

QString OAISlide_GroupElements_Details::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISlide_GroupElements_Details::asJsonObject() const {
    QJsonObject obj;
    if (m_child_group_elements.size() > 0) {
        obj.insert(QString("childGroupElements"), ::OpenAPI::toJsonValue(m_child_group_elements));
    }
    if (m_connector.isSet()) {
        obj.insert(QString("connector"), ::OpenAPI::toJsonValue(m_connector));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("dateCreated"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_modified_isSet) {
        obj.insert(QString("dateModified"), ::OpenAPI::toJsonValue(m_date_modified));
    }
    if (m_graphic.isSet()) {
        obj.insert(QString("graphic"), ::OpenAPI::toJsonValue(m_graphic));
    }
    if (m_group.isSet()) {
        obj.insert(QString("group"), ::OpenAPI::toJsonValue(m_group));
    }
    if (m_group_element_type_id_isSet) {
        obj.insert(QString("groupElementTypeId"), ::OpenAPI::toJsonValue(m_group_element_type_id));
    }
    if (m_group_element_type_pk_isSet) {
        obj.insert(QString("groupElementTypePk"), ::OpenAPI::toJsonValue(m_group_element_type_pk));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_parent_group_element.isSet()) {
        obj.insert(QString("parentGroupElement"), ::OpenAPI::toJsonValue(m_parent_group_element));
    }
    if (m_parent_group_element_id_isSet) {
        obj.insert(QString("parentGroupElementId"), ::OpenAPI::toJsonValue(m_parent_group_element_id));
    }
    if (m_shape.isSet()) {
        obj.insert(QString("shape"), ::OpenAPI::toJsonValue(m_shape));
    }
    if (m_shape_tree.isSet()) {
        obj.insert(QString("shapeTree"), ::OpenAPI::toJsonValue(m_shape_tree));
    }
    if (m_shape_tree_id_isSet) {
        obj.insert(QString("shapeTreeId"), ::OpenAPI::toJsonValue(m_shape_tree_id));
    }
    if (m_type_info.isSet()) {
        obj.insert(QString("typeInfo"), ::OpenAPI::toJsonValue(m_type_info));
    }
    if (m_ultimate_parent_shape_tree_id_isSet) {
        obj.insert(QString("ultimateParentShapeTreeId"), ::OpenAPI::toJsonValue(m_ultimate_parent_shape_tree_id));
    }
    if (m_user_created_isSet) {
        obj.insert(QString("userCreated"), ::OpenAPI::toJsonValue(m_user_created));
    }
    if (m_user_modified_isSet) {
        obj.insert(QString("userModified"), ::OpenAPI::toJsonValue(m_user_modified));
    }
    return obj;
}

QList<OAISlide_GroupElements_Details> OAISlide_GroupElements_Details::getChildGroupElements() const {
    return m_child_group_elements;
}
void OAISlide_GroupElements_Details::setChildGroupElements(const QList<OAISlide_GroupElements_Details> &child_group_elements) {
    m_child_group_elements = child_group_elements;
    m_child_group_elements_isSet = true;
}

bool OAISlide_GroupElements_Details::is_child_group_elements_Set() const{
    return m_child_group_elements_isSet;
}

bool OAISlide_GroupElements_Details::is_child_group_elements_Valid() const{
    return m_child_group_elements_isValid;
}

OAISlide_Connector_Details OAISlide_GroupElements_Details::getConnector() const {
    return m_connector;
}
void OAISlide_GroupElements_Details::setConnector(const OAISlide_Connector_Details &connector) {
    m_connector = connector;
    m_connector_isSet = true;
}

bool OAISlide_GroupElements_Details::is_connector_Set() const{
    return m_connector_isSet;
}

bool OAISlide_GroupElements_Details::is_connector_Valid() const{
    return m_connector_isValid;
}

QDateTime OAISlide_GroupElements_Details::getDateCreated() const {
    return m_date_created;
}
void OAISlide_GroupElements_Details::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAISlide_GroupElements_Details::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAISlide_GroupElements_Details::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAISlide_GroupElements_Details::getDateModified() const {
    return m_date_modified;
}
void OAISlide_GroupElements_Details::setDateModified(const QDateTime &date_modified) {
    m_date_modified = date_modified;
    m_date_modified_isSet = true;
}

bool OAISlide_GroupElements_Details::is_date_modified_Set() const{
    return m_date_modified_isSet;
}

bool OAISlide_GroupElements_Details::is_date_modified_Valid() const{
    return m_date_modified_isValid;
}

OAISlide_Graphics_Details OAISlide_GroupElements_Details::getGraphic() const {
    return m_graphic;
}
void OAISlide_GroupElements_Details::setGraphic(const OAISlide_Graphics_Details &graphic) {
    m_graphic = graphic;
    m_graphic_isSet = true;
}

bool OAISlide_GroupElements_Details::is_graphic_Set() const{
    return m_graphic_isSet;
}

bool OAISlide_GroupElements_Details::is_graphic_Valid() const{
    return m_graphic_isValid;
}

OAISlide_Groups_Details OAISlide_GroupElements_Details::getGroup() const {
    return m_group;
}
void OAISlide_GroupElements_Details::setGroup(const OAISlide_Groups_Details &group) {
    m_group = group;
    m_group_isSet = true;
}

bool OAISlide_GroupElements_Details::is_group_Set() const{
    return m_group_isSet;
}

bool OAISlide_GroupElements_Details::is_group_Valid() const{
    return m_group_isValid;
}

qint32 OAISlide_GroupElements_Details::getGroupElementTypeId() const {
    return m_group_element_type_id;
}
void OAISlide_GroupElements_Details::setGroupElementTypeId(const qint32 &group_element_type_id) {
    m_group_element_type_id = group_element_type_id;
    m_group_element_type_id_isSet = true;
}

bool OAISlide_GroupElements_Details::is_group_element_type_id_Set() const{
    return m_group_element_type_id_isSet;
}

bool OAISlide_GroupElements_Details::is_group_element_type_id_Valid() const{
    return m_group_element_type_id_isValid;
}

QString OAISlide_GroupElements_Details::getGroupElementTypePk() const {
    return m_group_element_type_pk;
}
void OAISlide_GroupElements_Details::setGroupElementTypePk(const QString &group_element_type_pk) {
    m_group_element_type_pk = group_element_type_pk;
    m_group_element_type_pk_isSet = true;
}

bool OAISlide_GroupElements_Details::is_group_element_type_pk_Set() const{
    return m_group_element_type_pk_isSet;
}

bool OAISlide_GroupElements_Details::is_group_element_type_pk_Valid() const{
    return m_group_element_type_pk_isValid;
}

QString OAISlide_GroupElements_Details::getId() const {
    return m_id;
}
void OAISlide_GroupElements_Details::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISlide_GroupElements_Details::is_id_Set() const{
    return m_id_isSet;
}

bool OAISlide_GroupElements_Details::is_id_Valid() const{
    return m_id_isValid;
}

OAISlide_GroupElements_Details OAISlide_GroupElements_Details::getParentGroupElement() const {
    return m_parent_group_element;
}
void OAISlide_GroupElements_Details::setParentGroupElement(const OAISlide_GroupElements_Details &parent_group_element) {
    m_parent_group_element = parent_group_element;
    m_parent_group_element_isSet = true;
}

bool OAISlide_GroupElements_Details::is_parent_group_element_Set() const{
    return m_parent_group_element_isSet;
}

bool OAISlide_GroupElements_Details::is_parent_group_element_Valid() const{
    return m_parent_group_element_isValid;
}

QString OAISlide_GroupElements_Details::getParentGroupElementId() const {
    return m_parent_group_element_id;
}
void OAISlide_GroupElements_Details::setParentGroupElementId(const QString &parent_group_element_id) {
    m_parent_group_element_id = parent_group_element_id;
    m_parent_group_element_id_isSet = true;
}

bool OAISlide_GroupElements_Details::is_parent_group_element_id_Set() const{
    return m_parent_group_element_id_isSet;
}

bool OAISlide_GroupElements_Details::is_parent_group_element_id_Valid() const{
    return m_parent_group_element_id_isValid;
}

OAISlide_Shapes_Details OAISlide_GroupElements_Details::getShape() const {
    return m_shape;
}
void OAISlide_GroupElements_Details::setShape(const OAISlide_Shapes_Details &shape) {
    m_shape = shape;
    m_shape_isSet = true;
}

bool OAISlide_GroupElements_Details::is_shape_Set() const{
    return m_shape_isSet;
}

bool OAISlide_GroupElements_Details::is_shape_Valid() const{
    return m_shape_isValid;
}

OAISlide_ShapeTrees_Details OAISlide_GroupElements_Details::getShapeTree() const {
    return m_shape_tree;
}
void OAISlide_GroupElements_Details::setShapeTree(const OAISlide_ShapeTrees_Details &shape_tree) {
    m_shape_tree = shape_tree;
    m_shape_tree_isSet = true;
}

bool OAISlide_GroupElements_Details::is_shape_tree_Set() const{
    return m_shape_tree_isSet;
}

bool OAISlide_GroupElements_Details::is_shape_tree_Valid() const{
    return m_shape_tree_isValid;
}

QString OAISlide_GroupElements_Details::getShapeTreeId() const {
    return m_shape_tree_id;
}
void OAISlide_GroupElements_Details::setShapeTreeId(const QString &shape_tree_id) {
    m_shape_tree_id = shape_tree_id;
    m_shape_tree_id_isSet = true;
}

bool OAISlide_GroupElements_Details::is_shape_tree_id_Set() const{
    return m_shape_tree_id_isSet;
}

bool OAISlide_GroupElements_Details::is_shape_tree_id_Valid() const{
    return m_shape_tree_id_isValid;
}

OAISlide_GroupElementTypes_Details OAISlide_GroupElements_Details::getTypeInfo() const {
    return m_type_info;
}
void OAISlide_GroupElements_Details::setTypeInfo(const OAISlide_GroupElementTypes_Details &type_info) {
    m_type_info = type_info;
    m_type_info_isSet = true;
}

bool OAISlide_GroupElements_Details::is_type_info_Set() const{
    return m_type_info_isSet;
}

bool OAISlide_GroupElements_Details::is_type_info_Valid() const{
    return m_type_info_isValid;
}

QString OAISlide_GroupElements_Details::getUltimateParentShapeTreeId() const {
    return m_ultimate_parent_shape_tree_id;
}
void OAISlide_GroupElements_Details::setUltimateParentShapeTreeId(const QString &ultimate_parent_shape_tree_id) {
    m_ultimate_parent_shape_tree_id = ultimate_parent_shape_tree_id;
    m_ultimate_parent_shape_tree_id_isSet = true;
}

bool OAISlide_GroupElements_Details::is_ultimate_parent_shape_tree_id_Set() const{
    return m_ultimate_parent_shape_tree_id_isSet;
}

bool OAISlide_GroupElements_Details::is_ultimate_parent_shape_tree_id_Valid() const{
    return m_ultimate_parent_shape_tree_id_isValid;
}

QString OAISlide_GroupElements_Details::getUserCreated() const {
    return m_user_created;
}
void OAISlide_GroupElements_Details::setUserCreated(const QString &user_created) {
    m_user_created = user_created;
    m_user_created_isSet = true;
}

bool OAISlide_GroupElements_Details::is_user_created_Set() const{
    return m_user_created_isSet;
}

bool OAISlide_GroupElements_Details::is_user_created_Valid() const{
    return m_user_created_isValid;
}

QString OAISlide_GroupElements_Details::getUserModified() const {
    return m_user_modified;
}
void OAISlide_GroupElements_Details::setUserModified(const QString &user_modified) {
    m_user_modified = user_modified;
    m_user_modified_isSet = true;
}

bool OAISlide_GroupElements_Details::is_user_modified_Set() const{
    return m_user_modified_isSet;
}

bool OAISlide_GroupElements_Details::is_user_modified_Valid() const{
    return m_user_modified_isValid;
}

bool OAISlide_GroupElements_Details::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_child_group_elements.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_connector.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_graphic.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_group.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_element_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_element_type_pk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_group_element.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_group_element_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shape.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shape_tree.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shape_tree_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ultimate_parent_shape_tree_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_modified_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISlide_GroupElements_Details::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
