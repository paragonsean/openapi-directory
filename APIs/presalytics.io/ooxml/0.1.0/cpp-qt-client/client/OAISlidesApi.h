/**
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISlidesApi_H
#define OAI_OAISlidesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIChildObjects.h"
#include "OAIHttpFileElement.h"
#include "OAIOoxmlDTO.h"
#include "OAIProblemDetails.h"
#include "OAISlide_Slides.h"
#include "OAISlide_Slides_Details.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISlidesApi : public QObject {
    Q_OBJECT

public:
    OAISlidesApi(const int timeOut = 0);
    ~OAISlidesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    */
    virtual void slidesSlidesChildobjectsGetId(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void slidesSlidesDetailsGetId(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void slidesSlidesGetId(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  updated bool [optional]
    */
    virtual void slidesSlidesOpenofficexmlGetIdUpdated(const QString &id, const ::OpenAPI::OptionalParam<bool> &updated = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_ooxml_dto OAIOoxmlDTO [optional]
    */
    virtual void slidesSlidesOpenofficexmlPutId(const QString &id, const ::OpenAPI::OptionalParam<OAIOoxmlDTO> &oai_ooxml_dto = ::OpenAPI::OptionalParam<OAIOoxmlDTO>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  use_cache bool [optional]
    */
    virtual void slidesSlidesSvgGetIdUseCache(const QString &id, const ::OpenAPI::OptionalParam<bool> &use_cache = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void slidesSlidesChildobjectsGetIdCallback(OAIHttpRequestWorker *worker);
    void slidesSlidesDetailsGetIdCallback(OAIHttpRequestWorker *worker);
    void slidesSlidesGetIdCallback(OAIHttpRequestWorker *worker);
    void slidesSlidesOpenofficexmlGetIdUpdatedCallback(OAIHttpRequestWorker *worker);
    void slidesSlidesOpenofficexmlPutIdCallback(OAIHttpRequestWorker *worker);
    void slidesSlidesSvgGetIdUseCacheCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void slidesSlidesChildobjectsGetIdSignal(QList<OAIChildObjects> summary);
    void slidesSlidesDetailsGetIdSignal(OAISlide_Slides_Details summary);
    void slidesSlidesGetIdSignal(OAISlide_Slides summary);
    void slidesSlidesOpenofficexmlGetIdUpdatedSignal(OAIOoxmlDTO summary);
    void slidesSlidesOpenofficexmlPutIdSignal();
    void slidesSlidesSvgGetIdUseCacheSignal(OAIHttpFileElement summary);


    void slidesSlidesChildobjectsGetIdSignalFull(OAIHttpRequestWorker *worker, QList<OAIChildObjects> summary);
    void slidesSlidesDetailsGetIdSignalFull(OAIHttpRequestWorker *worker, OAISlide_Slides_Details summary);
    void slidesSlidesGetIdSignalFull(OAIHttpRequestWorker *worker, OAISlide_Slides summary);
    void slidesSlidesOpenofficexmlGetIdUpdatedSignalFull(OAIHttpRequestWorker *worker, OAIOoxmlDTO summary);
    void slidesSlidesOpenofficexmlPutIdSignalFull(OAIHttpRequestWorker *worker);
    void slidesSlidesSvgGetIdUseCacheSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);

    Q_DECL_DEPRECATED_X("Use slidesSlidesChildobjectsGetIdSignalError() instead")
    void slidesSlidesChildobjectsGetIdSignalE(QList<OAIChildObjects> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slidesSlidesChildobjectsGetIdSignalError(QList<OAIChildObjects> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slidesSlidesDetailsGetIdSignalError() instead")
    void slidesSlidesDetailsGetIdSignalE(OAISlide_Slides_Details summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slidesSlidesDetailsGetIdSignalError(OAISlide_Slides_Details summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slidesSlidesGetIdSignalError() instead")
    void slidesSlidesGetIdSignalE(OAISlide_Slides summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slidesSlidesGetIdSignalError(OAISlide_Slides summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slidesSlidesOpenofficexmlGetIdUpdatedSignalError() instead")
    void slidesSlidesOpenofficexmlGetIdUpdatedSignalE(OAIOoxmlDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slidesSlidesOpenofficexmlGetIdUpdatedSignalError(OAIOoxmlDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slidesSlidesOpenofficexmlPutIdSignalError() instead")
    void slidesSlidesOpenofficexmlPutIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void slidesSlidesOpenofficexmlPutIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slidesSlidesSvgGetIdUseCacheSignalError() instead")
    void slidesSlidesSvgGetIdUseCacheSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slidesSlidesSvgGetIdUseCacheSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use slidesSlidesChildobjectsGetIdSignalErrorFull() instead")
    void slidesSlidesChildobjectsGetIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slidesSlidesChildobjectsGetIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slidesSlidesDetailsGetIdSignalErrorFull() instead")
    void slidesSlidesDetailsGetIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slidesSlidesDetailsGetIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slidesSlidesGetIdSignalErrorFull() instead")
    void slidesSlidesGetIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slidesSlidesGetIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slidesSlidesOpenofficexmlGetIdUpdatedSignalErrorFull() instead")
    void slidesSlidesOpenofficexmlGetIdUpdatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slidesSlidesOpenofficexmlGetIdUpdatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slidesSlidesOpenofficexmlPutIdSignalErrorFull() instead")
    void slidesSlidesOpenofficexmlPutIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slidesSlidesOpenofficexmlPutIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slidesSlidesSvgGetIdUseCacheSignalErrorFull() instead")
    void slidesSlidesSvgGetIdUseCacheSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slidesSlidesSvgGetIdUseCacheSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
