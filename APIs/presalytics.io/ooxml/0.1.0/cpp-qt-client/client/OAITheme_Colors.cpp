/**
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITheme_Colors.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITheme_Colors::OAITheme_Colors(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITheme_Colors::OAITheme_Colors() {
    this->initializeModel();
}

OAITheme_Colors::~OAITheme_Colors() {}

void OAITheme_Colors::initializeModel() {

    m_accent1_isSet = false;
    m_accent1_isValid = false;

    m_accent2_isSet = false;
    m_accent2_isValid = false;

    m_accent3_isSet = false;
    m_accent3_isValid = false;

    m_accent4_isSet = false;
    m_accent4_isValid = false;

    m_accent5_isSet = false;
    m_accent5_isValid = false;

    m_accent6_isSet = false;
    m_accent6_isValid = false;

    m_dark1_isSet = false;
    m_dark1_isValid = false;

    m_dark2_isSet = false;
    m_dark2_isValid = false;

    m_followed_hyperlink_isSet = false;
    m_followed_hyperlink_isValid = false;

    m_hyperlink_isSet = false;
    m_hyperlink_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_light1_isSet = false;
    m_light1_isValid = false;

    m_light2_isSet = false;
    m_light2_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_theme_id_isSet = false;
    m_theme_id_isValid = false;
}

void OAITheme_Colors::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITheme_Colors::fromJsonObject(QJsonObject json) {

    m_accent1_isValid = ::OpenAPI::fromJsonValue(m_accent1, json[QString("accent1")]);
    m_accent1_isSet = !json[QString("accent1")].isNull() && m_accent1_isValid;

    m_accent2_isValid = ::OpenAPI::fromJsonValue(m_accent2, json[QString("accent2")]);
    m_accent2_isSet = !json[QString("accent2")].isNull() && m_accent2_isValid;

    m_accent3_isValid = ::OpenAPI::fromJsonValue(m_accent3, json[QString("accent3")]);
    m_accent3_isSet = !json[QString("accent3")].isNull() && m_accent3_isValid;

    m_accent4_isValid = ::OpenAPI::fromJsonValue(m_accent4, json[QString("accent4")]);
    m_accent4_isSet = !json[QString("accent4")].isNull() && m_accent4_isValid;

    m_accent5_isValid = ::OpenAPI::fromJsonValue(m_accent5, json[QString("accent5")]);
    m_accent5_isSet = !json[QString("accent5")].isNull() && m_accent5_isValid;

    m_accent6_isValid = ::OpenAPI::fromJsonValue(m_accent6, json[QString("accent6")]);
    m_accent6_isSet = !json[QString("accent6")].isNull() && m_accent6_isValid;

    m_dark1_isValid = ::OpenAPI::fromJsonValue(m_dark1, json[QString("dark1")]);
    m_dark1_isSet = !json[QString("dark1")].isNull() && m_dark1_isValid;

    m_dark2_isValid = ::OpenAPI::fromJsonValue(m_dark2, json[QString("dark2")]);
    m_dark2_isSet = !json[QString("dark2")].isNull() && m_dark2_isValid;

    m_followed_hyperlink_isValid = ::OpenAPI::fromJsonValue(m_followed_hyperlink, json[QString("followedHyperlink")]);
    m_followed_hyperlink_isSet = !json[QString("followedHyperlink")].isNull() && m_followed_hyperlink_isValid;

    m_hyperlink_isValid = ::OpenAPI::fromJsonValue(m_hyperlink, json[QString("hyperlink")]);
    m_hyperlink_isSet = !json[QString("hyperlink")].isNull() && m_hyperlink_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_light1_isValid = ::OpenAPI::fromJsonValue(m_light1, json[QString("light1")]);
    m_light1_isSet = !json[QString("light1")].isNull() && m_light1_isValid;

    m_light2_isValid = ::OpenAPI::fromJsonValue(m_light2, json[QString("light2")]);
    m_light2_isSet = !json[QString("light2")].isNull() && m_light2_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_theme_id_isValid = ::OpenAPI::fromJsonValue(m_theme_id, json[QString("themeId")]);
    m_theme_id_isSet = !json[QString("themeId")].isNull() && m_theme_id_isValid;
}

QString OAITheme_Colors::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITheme_Colors::asJsonObject() const {
    QJsonObject obj;
    if (m_accent1_isSet) {
        obj.insert(QString("accent1"), ::OpenAPI::toJsonValue(m_accent1));
    }
    if (m_accent2_isSet) {
        obj.insert(QString("accent2"), ::OpenAPI::toJsonValue(m_accent2));
    }
    if (m_accent3_isSet) {
        obj.insert(QString("accent3"), ::OpenAPI::toJsonValue(m_accent3));
    }
    if (m_accent4_isSet) {
        obj.insert(QString("accent4"), ::OpenAPI::toJsonValue(m_accent4));
    }
    if (m_accent5_isSet) {
        obj.insert(QString("accent5"), ::OpenAPI::toJsonValue(m_accent5));
    }
    if (m_accent6_isSet) {
        obj.insert(QString("accent6"), ::OpenAPI::toJsonValue(m_accent6));
    }
    if (m_dark1_isSet) {
        obj.insert(QString("dark1"), ::OpenAPI::toJsonValue(m_dark1));
    }
    if (m_dark2_isSet) {
        obj.insert(QString("dark2"), ::OpenAPI::toJsonValue(m_dark2));
    }
    if (m_followed_hyperlink_isSet) {
        obj.insert(QString("followedHyperlink"), ::OpenAPI::toJsonValue(m_followed_hyperlink));
    }
    if (m_hyperlink_isSet) {
        obj.insert(QString("hyperlink"), ::OpenAPI::toJsonValue(m_hyperlink));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_light1_isSet) {
        obj.insert(QString("light1"), ::OpenAPI::toJsonValue(m_light1));
    }
    if (m_light2_isSet) {
        obj.insert(QString("light2"), ::OpenAPI::toJsonValue(m_light2));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_theme_id_isSet) {
        obj.insert(QString("themeId"), ::OpenAPI::toJsonValue(m_theme_id));
    }
    return obj;
}

QString OAITheme_Colors::getAccent1() const {
    return m_accent1;
}
void OAITheme_Colors::setAccent1(const QString &accent1) {
    m_accent1 = accent1;
    m_accent1_isSet = true;
}

bool OAITheme_Colors::is_accent1_Set() const{
    return m_accent1_isSet;
}

bool OAITheme_Colors::is_accent1_Valid() const{
    return m_accent1_isValid;
}

QString OAITheme_Colors::getAccent2() const {
    return m_accent2;
}
void OAITheme_Colors::setAccent2(const QString &accent2) {
    m_accent2 = accent2;
    m_accent2_isSet = true;
}

bool OAITheme_Colors::is_accent2_Set() const{
    return m_accent2_isSet;
}

bool OAITheme_Colors::is_accent2_Valid() const{
    return m_accent2_isValid;
}

QString OAITheme_Colors::getAccent3() const {
    return m_accent3;
}
void OAITheme_Colors::setAccent3(const QString &accent3) {
    m_accent3 = accent3;
    m_accent3_isSet = true;
}

bool OAITheme_Colors::is_accent3_Set() const{
    return m_accent3_isSet;
}

bool OAITheme_Colors::is_accent3_Valid() const{
    return m_accent3_isValid;
}

QString OAITheme_Colors::getAccent4() const {
    return m_accent4;
}
void OAITheme_Colors::setAccent4(const QString &accent4) {
    m_accent4 = accent4;
    m_accent4_isSet = true;
}

bool OAITheme_Colors::is_accent4_Set() const{
    return m_accent4_isSet;
}

bool OAITheme_Colors::is_accent4_Valid() const{
    return m_accent4_isValid;
}

QString OAITheme_Colors::getAccent5() const {
    return m_accent5;
}
void OAITheme_Colors::setAccent5(const QString &accent5) {
    m_accent5 = accent5;
    m_accent5_isSet = true;
}

bool OAITheme_Colors::is_accent5_Set() const{
    return m_accent5_isSet;
}

bool OAITheme_Colors::is_accent5_Valid() const{
    return m_accent5_isValid;
}

QString OAITheme_Colors::getAccent6() const {
    return m_accent6;
}
void OAITheme_Colors::setAccent6(const QString &accent6) {
    m_accent6 = accent6;
    m_accent6_isSet = true;
}

bool OAITheme_Colors::is_accent6_Set() const{
    return m_accent6_isSet;
}

bool OAITheme_Colors::is_accent6_Valid() const{
    return m_accent6_isValid;
}

QString OAITheme_Colors::getDark1() const {
    return m_dark1;
}
void OAITheme_Colors::setDark1(const QString &dark1) {
    m_dark1 = dark1;
    m_dark1_isSet = true;
}

bool OAITheme_Colors::is_dark1_Set() const{
    return m_dark1_isSet;
}

bool OAITheme_Colors::is_dark1_Valid() const{
    return m_dark1_isValid;
}

QString OAITheme_Colors::getDark2() const {
    return m_dark2;
}
void OAITheme_Colors::setDark2(const QString &dark2) {
    m_dark2 = dark2;
    m_dark2_isSet = true;
}

bool OAITheme_Colors::is_dark2_Set() const{
    return m_dark2_isSet;
}

bool OAITheme_Colors::is_dark2_Valid() const{
    return m_dark2_isValid;
}

QString OAITheme_Colors::getFollowedHyperlink() const {
    return m_followed_hyperlink;
}
void OAITheme_Colors::setFollowedHyperlink(const QString &followed_hyperlink) {
    m_followed_hyperlink = followed_hyperlink;
    m_followed_hyperlink_isSet = true;
}

bool OAITheme_Colors::is_followed_hyperlink_Set() const{
    return m_followed_hyperlink_isSet;
}

bool OAITheme_Colors::is_followed_hyperlink_Valid() const{
    return m_followed_hyperlink_isValid;
}

QString OAITheme_Colors::getHyperlink() const {
    return m_hyperlink;
}
void OAITheme_Colors::setHyperlink(const QString &hyperlink) {
    m_hyperlink = hyperlink;
    m_hyperlink_isSet = true;
}

bool OAITheme_Colors::is_hyperlink_Set() const{
    return m_hyperlink_isSet;
}

bool OAITheme_Colors::is_hyperlink_Valid() const{
    return m_hyperlink_isValid;
}

QString OAITheme_Colors::getId() const {
    return m_id;
}
void OAITheme_Colors::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITheme_Colors::is_id_Set() const{
    return m_id_isSet;
}

bool OAITheme_Colors::is_id_Valid() const{
    return m_id_isValid;
}

QString OAITheme_Colors::getLight1() const {
    return m_light1;
}
void OAITheme_Colors::setLight1(const QString &light1) {
    m_light1 = light1;
    m_light1_isSet = true;
}

bool OAITheme_Colors::is_light1_Set() const{
    return m_light1_isSet;
}

bool OAITheme_Colors::is_light1_Valid() const{
    return m_light1_isValid;
}

QString OAITheme_Colors::getLight2() const {
    return m_light2;
}
void OAITheme_Colors::setLight2(const QString &light2) {
    m_light2 = light2;
    m_light2_isSet = true;
}

bool OAITheme_Colors::is_light2_Set() const{
    return m_light2_isSet;
}

bool OAITheme_Colors::is_light2_Valid() const{
    return m_light2_isValid;
}

QString OAITheme_Colors::getName() const {
    return m_name;
}
void OAITheme_Colors::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITheme_Colors::is_name_Set() const{
    return m_name_isSet;
}

bool OAITheme_Colors::is_name_Valid() const{
    return m_name_isValid;
}

QString OAITheme_Colors::getThemeId() const {
    return m_theme_id;
}
void OAITheme_Colors::setThemeId(const QString &theme_id) {
    m_theme_id = theme_id;
    m_theme_id_isSet = true;
}

bool OAITheme_Colors::is_theme_id_Set() const{
    return m_theme_id_isSet;
}

bool OAITheme_Colors::is_theme_id_Valid() const{
    return m_theme_id_isValid;
}

bool OAITheme_Colors::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accent1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_accent2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_accent3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_accent4_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_accent5_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_accent6_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dark1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dark2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_followed_hyperlink_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hyperlink_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_light1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_light2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_theme_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITheme_Colors::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
