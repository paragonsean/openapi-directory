/**
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShared_GradientFills.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShared_GradientFills::OAIShared_GradientFills(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShared_GradientFills::OAIShared_GradientFills() {
    this->initializeModel();
}

OAIShared_GradientFills::~OAIShared_GradientFills() {}

void OAIShared_GradientFills::initializeModel() {

    m_angle_isSet = false;
    m_angle_isValid = false;

    m_fill_map_id_isSet = false;
    m_fill_map_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_path_isSet = false;
    m_is_path_isValid = false;

    m_path_type_isSet = false;
    m_path_type_isValid = false;

    m_rotate_with_shape_isSet = false;
    m_rotate_with_shape_isValid = false;
}

void OAIShared_GradientFills::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShared_GradientFills::fromJsonObject(QJsonObject json) {

    m_angle_isValid = ::OpenAPI::fromJsonValue(m_angle, json[QString("angle")]);
    m_angle_isSet = !json[QString("angle")].isNull() && m_angle_isValid;

    m_fill_map_id_isValid = ::OpenAPI::fromJsonValue(m_fill_map_id, json[QString("fillMapId")]);
    m_fill_map_id_isSet = !json[QString("fillMapId")].isNull() && m_fill_map_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_path_isValid = ::OpenAPI::fromJsonValue(m_is_path, json[QString("isPath")]);
    m_is_path_isSet = !json[QString("isPath")].isNull() && m_is_path_isValid;

    m_path_type_isValid = ::OpenAPI::fromJsonValue(m_path_type, json[QString("pathType")]);
    m_path_type_isSet = !json[QString("pathType")].isNull() && m_path_type_isValid;

    m_rotate_with_shape_isValid = ::OpenAPI::fromJsonValue(m_rotate_with_shape, json[QString("rotateWithShape")]);
    m_rotate_with_shape_isSet = !json[QString("rotateWithShape")].isNull() && m_rotate_with_shape_isValid;
}

QString OAIShared_GradientFills::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShared_GradientFills::asJsonObject() const {
    QJsonObject obj;
    if (m_angle_isSet) {
        obj.insert(QString("angle"), ::OpenAPI::toJsonValue(m_angle));
    }
    if (m_fill_map_id_isSet) {
        obj.insert(QString("fillMapId"), ::OpenAPI::toJsonValue(m_fill_map_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_path_isSet) {
        obj.insert(QString("isPath"), ::OpenAPI::toJsonValue(m_is_path));
    }
    if (m_path_type_isSet) {
        obj.insert(QString("pathType"), ::OpenAPI::toJsonValue(m_path_type));
    }
    if (m_rotate_with_shape_isSet) {
        obj.insert(QString("rotateWithShape"), ::OpenAPI::toJsonValue(m_rotate_with_shape));
    }
    return obj;
}

qint32 OAIShared_GradientFills::getAngle() const {
    return m_angle;
}
void OAIShared_GradientFills::setAngle(const qint32 &angle) {
    m_angle = angle;
    m_angle_isSet = true;
}

bool OAIShared_GradientFills::is_angle_Set() const{
    return m_angle_isSet;
}

bool OAIShared_GradientFills::is_angle_Valid() const{
    return m_angle_isValid;
}

QString OAIShared_GradientFills::getFillMapId() const {
    return m_fill_map_id;
}
void OAIShared_GradientFills::setFillMapId(const QString &fill_map_id) {
    m_fill_map_id = fill_map_id;
    m_fill_map_id_isSet = true;
}

bool OAIShared_GradientFills::is_fill_map_id_Set() const{
    return m_fill_map_id_isSet;
}

bool OAIShared_GradientFills::is_fill_map_id_Valid() const{
    return m_fill_map_id_isValid;
}

QString OAIShared_GradientFills::getId() const {
    return m_id;
}
void OAIShared_GradientFills::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIShared_GradientFills::is_id_Set() const{
    return m_id_isSet;
}

bool OAIShared_GradientFills::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIShared_GradientFills::isIsPath() const {
    return m_is_path;
}
void OAIShared_GradientFills::setIsPath(const bool &is_path) {
    m_is_path = is_path;
    m_is_path_isSet = true;
}

bool OAIShared_GradientFills::is_is_path_Set() const{
    return m_is_path_isSet;
}

bool OAIShared_GradientFills::is_is_path_Valid() const{
    return m_is_path_isValid;
}

QString OAIShared_GradientFills::getPathType() const {
    return m_path_type;
}
void OAIShared_GradientFills::setPathType(const QString &path_type) {
    m_path_type = path_type;
    m_path_type_isSet = true;
}

bool OAIShared_GradientFills::is_path_type_Set() const{
    return m_path_type_isSet;
}

bool OAIShared_GradientFills::is_path_type_Valid() const{
    return m_path_type_isValid;
}

bool OAIShared_GradientFills::isRotateWithShape() const {
    return m_rotate_with_shape;
}
void OAIShared_GradientFills::setRotateWithShape(const bool &rotate_with_shape) {
    m_rotate_with_shape = rotate_with_shape;
    m_rotate_with_shape_isSet = true;
}

bool OAIShared_GradientFills::is_rotate_with_shape_Set() const{
    return m_rotate_with_shape_isSet;
}

bool OAIShared_GradientFills::is_rotate_with_shape_Valid() const{
    return m_rotate_with_shape_isValid;
}

bool OAIShared_GradientFills::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_angle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fill_map_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rotate_with_shape_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShared_GradientFills::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
