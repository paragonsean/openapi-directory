/**
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIImagesApi_H
#define OAI_OAIImagesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIChildObjects.h"
#include "OAIHttpFileElement.h"
#include "OAIOoxmlDTO.h"
#include "OAIProblemDetails.h"
#include "OAIShared_Pictures.h"
#include "OAIShared_Pictures_Details.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIImagesApi : public QObject {
    Q_OBJECT

public:
    OAIImagesApi(const int timeOut = 0);
    ~OAIImagesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    */
    virtual void sharedImagesChildobjectsGetId(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void sharedImagesDetailsGetId(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void sharedImagesGetId(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void sharedImagesGetimagePutId(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  updated bool [optional]
    */
    virtual void sharedImagesOpenofficexmlGetIdUpdated(const QString &id, const ::OpenAPI::OptionalParam<bool> &updated = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_ooxml_dto OAIOoxmlDTO [optional]
    */
    virtual void sharedImagesOpenofficexmlPutId(const QString &id, const ::OpenAPI::OptionalParam<OAIOoxmlDTO> &oai_ooxml_dto = ::OpenAPI::OptionalParam<OAIOoxmlDTO>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  use_cache bool [optional]
    */
    virtual void sharedImagesSvgGetIdUseCache(const QString &id, const ::OpenAPI::OptionalParam<bool> &use_cache = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void sharedImagesChildobjectsGetIdCallback(OAIHttpRequestWorker *worker);
    void sharedImagesDetailsGetIdCallback(OAIHttpRequestWorker *worker);
    void sharedImagesGetIdCallback(OAIHttpRequestWorker *worker);
    void sharedImagesGetimagePutIdCallback(OAIHttpRequestWorker *worker);
    void sharedImagesOpenofficexmlGetIdUpdatedCallback(OAIHttpRequestWorker *worker);
    void sharedImagesOpenofficexmlPutIdCallback(OAIHttpRequestWorker *worker);
    void sharedImagesSvgGetIdUseCacheCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void sharedImagesChildobjectsGetIdSignal(QList<OAIChildObjects> summary);
    void sharedImagesDetailsGetIdSignal(OAIShared_Pictures_Details summary);
    void sharedImagesGetIdSignal(OAIShared_Pictures summary);
    void sharedImagesGetimagePutIdSignal();
    void sharedImagesOpenofficexmlGetIdUpdatedSignal(OAIOoxmlDTO summary);
    void sharedImagesOpenofficexmlPutIdSignal();
    void sharedImagesSvgGetIdUseCacheSignal(OAIHttpFileElement summary);


    void sharedImagesChildobjectsGetIdSignalFull(OAIHttpRequestWorker *worker, QList<OAIChildObjects> summary);
    void sharedImagesDetailsGetIdSignalFull(OAIHttpRequestWorker *worker, OAIShared_Pictures_Details summary);
    void sharedImagesGetIdSignalFull(OAIHttpRequestWorker *worker, OAIShared_Pictures summary);
    void sharedImagesGetimagePutIdSignalFull(OAIHttpRequestWorker *worker);
    void sharedImagesOpenofficexmlGetIdUpdatedSignalFull(OAIHttpRequestWorker *worker, OAIOoxmlDTO summary);
    void sharedImagesOpenofficexmlPutIdSignalFull(OAIHttpRequestWorker *worker);
    void sharedImagesSvgGetIdUseCacheSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);

    Q_DECL_DEPRECATED_X("Use sharedImagesChildobjectsGetIdSignalError() instead")
    void sharedImagesChildobjectsGetIdSignalE(QList<OAIChildObjects> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sharedImagesChildobjectsGetIdSignalError(QList<OAIChildObjects> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sharedImagesDetailsGetIdSignalError() instead")
    void sharedImagesDetailsGetIdSignalE(OAIShared_Pictures_Details summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sharedImagesDetailsGetIdSignalError(OAIShared_Pictures_Details summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sharedImagesGetIdSignalError() instead")
    void sharedImagesGetIdSignalE(OAIShared_Pictures summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sharedImagesGetIdSignalError(OAIShared_Pictures summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sharedImagesGetimagePutIdSignalError() instead")
    void sharedImagesGetimagePutIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void sharedImagesGetimagePutIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sharedImagesOpenofficexmlGetIdUpdatedSignalError() instead")
    void sharedImagesOpenofficexmlGetIdUpdatedSignalE(OAIOoxmlDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sharedImagesOpenofficexmlGetIdUpdatedSignalError(OAIOoxmlDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sharedImagesOpenofficexmlPutIdSignalError() instead")
    void sharedImagesOpenofficexmlPutIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void sharedImagesOpenofficexmlPutIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sharedImagesSvgGetIdUseCacheSignalError() instead")
    void sharedImagesSvgGetIdUseCacheSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sharedImagesSvgGetIdUseCacheSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use sharedImagesChildobjectsGetIdSignalErrorFull() instead")
    void sharedImagesChildobjectsGetIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sharedImagesChildobjectsGetIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sharedImagesDetailsGetIdSignalErrorFull() instead")
    void sharedImagesDetailsGetIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sharedImagesDetailsGetIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sharedImagesGetIdSignalErrorFull() instead")
    void sharedImagesGetIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sharedImagesGetIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sharedImagesGetimagePutIdSignalErrorFull() instead")
    void sharedImagesGetimagePutIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sharedImagesGetimagePutIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sharedImagesOpenofficexmlGetIdUpdatedSignalErrorFull() instead")
    void sharedImagesOpenofficexmlGetIdUpdatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sharedImagesOpenofficexmlGetIdUpdatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sharedImagesOpenofficexmlPutIdSignalErrorFull() instead")
    void sharedImagesOpenofficexmlPutIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sharedImagesOpenofficexmlPutIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sharedImagesSvgGetIdUseCacheSignalErrorFull() instead")
    void sharedImagesSvgGetIdUseCacheSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sharedImagesSvgGetIdUseCacheSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
