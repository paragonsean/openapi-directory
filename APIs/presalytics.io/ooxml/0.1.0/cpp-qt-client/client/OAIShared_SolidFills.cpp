/**
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShared_SolidFills.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShared_SolidFills::OAIShared_SolidFills(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShared_SolidFills::OAIShared_SolidFills() {
    this->initializeModel();
}

OAIShared_SolidFills::~OAIShared_SolidFills() {}

void OAIShared_SolidFills::initializeModel() {

    m_color_type_id_isSet = false;
    m_color_type_id_isValid = false;

    m_fill_map_id_isSet = false;
    m_fill_map_id_isValid = false;

    m_hex_value_isSet = false;
    m_hex_value_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_user_color_isSet = false;
    m_is_user_color_isValid = false;

    m_parent_gradient_stop_id_isSet = false;
    m_parent_gradient_stop_id_isValid = false;

    m_parent_line_id_isSet = false;
    m_parent_line_id_isValid = false;

    m_parent_text_id_isSet = false;
    m_parent_text_id_isValid = false;
}

void OAIShared_SolidFills::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShared_SolidFills::fromJsonObject(QJsonObject json) {

    m_color_type_id_isValid = ::OpenAPI::fromJsonValue(m_color_type_id, json[QString("colorTypeId")]);
    m_color_type_id_isSet = !json[QString("colorTypeId")].isNull() && m_color_type_id_isValid;

    m_fill_map_id_isValid = ::OpenAPI::fromJsonValue(m_fill_map_id, json[QString("fillMapId")]);
    m_fill_map_id_isSet = !json[QString("fillMapId")].isNull() && m_fill_map_id_isValid;

    m_hex_value_isValid = ::OpenAPI::fromJsonValue(m_hex_value, json[QString("hexValue")]);
    m_hex_value_isSet = !json[QString("hexValue")].isNull() && m_hex_value_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_user_color_isValid = ::OpenAPI::fromJsonValue(m_is_user_color, json[QString("isUserColor")]);
    m_is_user_color_isSet = !json[QString("isUserColor")].isNull() && m_is_user_color_isValid;

    m_parent_gradient_stop_id_isValid = ::OpenAPI::fromJsonValue(m_parent_gradient_stop_id, json[QString("parentGradientStopId")]);
    m_parent_gradient_stop_id_isSet = !json[QString("parentGradientStopId")].isNull() && m_parent_gradient_stop_id_isValid;

    m_parent_line_id_isValid = ::OpenAPI::fromJsonValue(m_parent_line_id, json[QString("parentLineId")]);
    m_parent_line_id_isSet = !json[QString("parentLineId")].isNull() && m_parent_line_id_isValid;

    m_parent_text_id_isValid = ::OpenAPI::fromJsonValue(m_parent_text_id, json[QString("parentTextId")]);
    m_parent_text_id_isSet = !json[QString("parentTextId")].isNull() && m_parent_text_id_isValid;
}

QString OAIShared_SolidFills::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShared_SolidFills::asJsonObject() const {
    QJsonObject obj;
    if (m_color_type_id_isSet) {
        obj.insert(QString("colorTypeId"), ::OpenAPI::toJsonValue(m_color_type_id));
    }
    if (m_fill_map_id_isSet) {
        obj.insert(QString("fillMapId"), ::OpenAPI::toJsonValue(m_fill_map_id));
    }
    if (m_hex_value_isSet) {
        obj.insert(QString("hexValue"), ::OpenAPI::toJsonValue(m_hex_value));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_user_color_isSet) {
        obj.insert(QString("isUserColor"), ::OpenAPI::toJsonValue(m_is_user_color));
    }
    if (m_parent_gradient_stop_id_isSet) {
        obj.insert(QString("parentGradientStopId"), ::OpenAPI::toJsonValue(m_parent_gradient_stop_id));
    }
    if (m_parent_line_id_isSet) {
        obj.insert(QString("parentLineId"), ::OpenAPI::toJsonValue(m_parent_line_id));
    }
    if (m_parent_text_id_isSet) {
        obj.insert(QString("parentTextId"), ::OpenAPI::toJsonValue(m_parent_text_id));
    }
    return obj;
}

qint32 OAIShared_SolidFills::getColorTypeId() const {
    return m_color_type_id;
}
void OAIShared_SolidFills::setColorTypeId(const qint32 &color_type_id) {
    m_color_type_id = color_type_id;
    m_color_type_id_isSet = true;
}

bool OAIShared_SolidFills::is_color_type_id_Set() const{
    return m_color_type_id_isSet;
}

bool OAIShared_SolidFills::is_color_type_id_Valid() const{
    return m_color_type_id_isValid;
}

QString OAIShared_SolidFills::getFillMapId() const {
    return m_fill_map_id;
}
void OAIShared_SolidFills::setFillMapId(const QString &fill_map_id) {
    m_fill_map_id = fill_map_id;
    m_fill_map_id_isSet = true;
}

bool OAIShared_SolidFills::is_fill_map_id_Set() const{
    return m_fill_map_id_isSet;
}

bool OAIShared_SolidFills::is_fill_map_id_Valid() const{
    return m_fill_map_id_isValid;
}

QString OAIShared_SolidFills::getHexValue() const {
    return m_hex_value;
}
void OAIShared_SolidFills::setHexValue(const QString &hex_value) {
    m_hex_value = hex_value;
    m_hex_value_isSet = true;
}

bool OAIShared_SolidFills::is_hex_value_Set() const{
    return m_hex_value_isSet;
}

bool OAIShared_SolidFills::is_hex_value_Valid() const{
    return m_hex_value_isValid;
}

QString OAIShared_SolidFills::getId() const {
    return m_id;
}
void OAIShared_SolidFills::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIShared_SolidFills::is_id_Set() const{
    return m_id_isSet;
}

bool OAIShared_SolidFills::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIShared_SolidFills::isIsUserColor() const {
    return m_is_user_color;
}
void OAIShared_SolidFills::setIsUserColor(const bool &is_user_color) {
    m_is_user_color = is_user_color;
    m_is_user_color_isSet = true;
}

bool OAIShared_SolidFills::is_is_user_color_Set() const{
    return m_is_user_color_isSet;
}

bool OAIShared_SolidFills::is_is_user_color_Valid() const{
    return m_is_user_color_isValid;
}

QString OAIShared_SolidFills::getParentGradientStopId() const {
    return m_parent_gradient_stop_id;
}
void OAIShared_SolidFills::setParentGradientStopId(const QString &parent_gradient_stop_id) {
    m_parent_gradient_stop_id = parent_gradient_stop_id;
    m_parent_gradient_stop_id_isSet = true;
}

bool OAIShared_SolidFills::is_parent_gradient_stop_id_Set() const{
    return m_parent_gradient_stop_id_isSet;
}

bool OAIShared_SolidFills::is_parent_gradient_stop_id_Valid() const{
    return m_parent_gradient_stop_id_isValid;
}

QString OAIShared_SolidFills::getParentLineId() const {
    return m_parent_line_id;
}
void OAIShared_SolidFills::setParentLineId(const QString &parent_line_id) {
    m_parent_line_id = parent_line_id;
    m_parent_line_id_isSet = true;
}

bool OAIShared_SolidFills::is_parent_line_id_Set() const{
    return m_parent_line_id_isSet;
}

bool OAIShared_SolidFills::is_parent_line_id_Valid() const{
    return m_parent_line_id_isValid;
}

QString OAIShared_SolidFills::getParentTextId() const {
    return m_parent_text_id;
}
void OAIShared_SolidFills::setParentTextId(const QString &parent_text_id) {
    m_parent_text_id = parent_text_id;
    m_parent_text_id_isSet = true;
}

bool OAIShared_SolidFills::is_parent_text_id_Set() const{
    return m_parent_text_id_isSet;
}

bool OAIShared_SolidFills::is_parent_text_id_Valid() const{
    return m_parent_text_id_isValid;
}

bool OAIShared_SolidFills::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_color_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fill_map_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hex_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_user_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_gradient_stop_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_line_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_text_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShared_SolidFills::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
