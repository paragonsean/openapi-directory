/**
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShared_FillMap.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShared_FillMap::OAIShared_FillMap(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShared_FillMap::OAIShared_FillMap() {
    this->initializeModel();
}

OAIShared_FillMap::~OAIShared_FillMap() {}

void OAIShared_FillMap::initializeModel() {

    m_connector_id_isSet = false;
    m_connector_id_isValid = false;

    m_effect_attribute_id_isSet = false;
    m_effect_attribute_id_isValid = false;

    m_fill_type_id_isSet = false;
    m_fill_type_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_shape_id_isSet = false;
    m_shape_id_isValid = false;

    m_table_cell_id_isSet = false;
    m_table_cell_id_isValid = false;

    m_theme_background_fill_id_isSet = false;
    m_theme_background_fill_id_isValid = false;

    m_theme_fill_id_isSet = false;
    m_theme_fill_id_isValid = false;
}

void OAIShared_FillMap::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShared_FillMap::fromJsonObject(QJsonObject json) {

    m_connector_id_isValid = ::OpenAPI::fromJsonValue(m_connector_id, json[QString("connectorId")]);
    m_connector_id_isSet = !json[QString("connectorId")].isNull() && m_connector_id_isValid;

    m_effect_attribute_id_isValid = ::OpenAPI::fromJsonValue(m_effect_attribute_id, json[QString("effectAttributeId")]);
    m_effect_attribute_id_isSet = !json[QString("effectAttributeId")].isNull() && m_effect_attribute_id_isValid;

    m_fill_type_id_isValid = ::OpenAPI::fromJsonValue(m_fill_type_id, json[QString("fillTypeId")]);
    m_fill_type_id_isSet = !json[QString("fillTypeId")].isNull() && m_fill_type_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_shape_id_isValid = ::OpenAPI::fromJsonValue(m_shape_id, json[QString("shapeId")]);
    m_shape_id_isSet = !json[QString("shapeId")].isNull() && m_shape_id_isValid;

    m_table_cell_id_isValid = ::OpenAPI::fromJsonValue(m_table_cell_id, json[QString("tableCellId")]);
    m_table_cell_id_isSet = !json[QString("tableCellId")].isNull() && m_table_cell_id_isValid;

    m_theme_background_fill_id_isValid = ::OpenAPI::fromJsonValue(m_theme_background_fill_id, json[QString("themeBackgroundFillId")]);
    m_theme_background_fill_id_isSet = !json[QString("themeBackgroundFillId")].isNull() && m_theme_background_fill_id_isValid;

    m_theme_fill_id_isValid = ::OpenAPI::fromJsonValue(m_theme_fill_id, json[QString("themeFillId")]);
    m_theme_fill_id_isSet = !json[QString("themeFillId")].isNull() && m_theme_fill_id_isValid;
}

QString OAIShared_FillMap::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShared_FillMap::asJsonObject() const {
    QJsonObject obj;
    if (m_connector_id_isSet) {
        obj.insert(QString("connectorId"), ::OpenAPI::toJsonValue(m_connector_id));
    }
    if (m_effect_attribute_id_isSet) {
        obj.insert(QString("effectAttributeId"), ::OpenAPI::toJsonValue(m_effect_attribute_id));
    }
    if (m_fill_type_id_isSet) {
        obj.insert(QString("fillTypeId"), ::OpenAPI::toJsonValue(m_fill_type_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_shape_id_isSet) {
        obj.insert(QString("shapeId"), ::OpenAPI::toJsonValue(m_shape_id));
    }
    if (m_table_cell_id_isSet) {
        obj.insert(QString("tableCellId"), ::OpenAPI::toJsonValue(m_table_cell_id));
    }
    if (m_theme_background_fill_id_isSet) {
        obj.insert(QString("themeBackgroundFillId"), ::OpenAPI::toJsonValue(m_theme_background_fill_id));
    }
    if (m_theme_fill_id_isSet) {
        obj.insert(QString("themeFillId"), ::OpenAPI::toJsonValue(m_theme_fill_id));
    }
    return obj;
}

QString OAIShared_FillMap::getConnectorId() const {
    return m_connector_id;
}
void OAIShared_FillMap::setConnectorId(const QString &connector_id) {
    m_connector_id = connector_id;
    m_connector_id_isSet = true;
}

bool OAIShared_FillMap::is_connector_id_Set() const{
    return m_connector_id_isSet;
}

bool OAIShared_FillMap::is_connector_id_Valid() const{
    return m_connector_id_isValid;
}

QString OAIShared_FillMap::getEffectAttributeId() const {
    return m_effect_attribute_id;
}
void OAIShared_FillMap::setEffectAttributeId(const QString &effect_attribute_id) {
    m_effect_attribute_id = effect_attribute_id;
    m_effect_attribute_id_isSet = true;
}

bool OAIShared_FillMap::is_effect_attribute_id_Set() const{
    return m_effect_attribute_id_isSet;
}

bool OAIShared_FillMap::is_effect_attribute_id_Valid() const{
    return m_effect_attribute_id_isValid;
}

qint32 OAIShared_FillMap::getFillTypeId() const {
    return m_fill_type_id;
}
void OAIShared_FillMap::setFillTypeId(const qint32 &fill_type_id) {
    m_fill_type_id = fill_type_id;
    m_fill_type_id_isSet = true;
}

bool OAIShared_FillMap::is_fill_type_id_Set() const{
    return m_fill_type_id_isSet;
}

bool OAIShared_FillMap::is_fill_type_id_Valid() const{
    return m_fill_type_id_isValid;
}

QString OAIShared_FillMap::getId() const {
    return m_id;
}
void OAIShared_FillMap::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIShared_FillMap::is_id_Set() const{
    return m_id_isSet;
}

bool OAIShared_FillMap::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIShared_FillMap::getShapeId() const {
    return m_shape_id;
}
void OAIShared_FillMap::setShapeId(const QString &shape_id) {
    m_shape_id = shape_id;
    m_shape_id_isSet = true;
}

bool OAIShared_FillMap::is_shape_id_Set() const{
    return m_shape_id_isSet;
}

bool OAIShared_FillMap::is_shape_id_Valid() const{
    return m_shape_id_isValid;
}

QString OAIShared_FillMap::getTableCellId() const {
    return m_table_cell_id;
}
void OAIShared_FillMap::setTableCellId(const QString &table_cell_id) {
    m_table_cell_id = table_cell_id;
    m_table_cell_id_isSet = true;
}

bool OAIShared_FillMap::is_table_cell_id_Set() const{
    return m_table_cell_id_isSet;
}

bool OAIShared_FillMap::is_table_cell_id_Valid() const{
    return m_table_cell_id_isValid;
}

QString OAIShared_FillMap::getThemeBackgroundFillId() const {
    return m_theme_background_fill_id;
}
void OAIShared_FillMap::setThemeBackgroundFillId(const QString &theme_background_fill_id) {
    m_theme_background_fill_id = theme_background_fill_id;
    m_theme_background_fill_id_isSet = true;
}

bool OAIShared_FillMap::is_theme_background_fill_id_Set() const{
    return m_theme_background_fill_id_isSet;
}

bool OAIShared_FillMap::is_theme_background_fill_id_Valid() const{
    return m_theme_background_fill_id_isValid;
}

QString OAIShared_FillMap::getThemeFillId() const {
    return m_theme_fill_id;
}
void OAIShared_FillMap::setThemeFillId(const QString &theme_fill_id) {
    m_theme_fill_id = theme_fill_id;
    m_theme_fill_id_isSet = true;
}

bool OAIShared_FillMap::is_theme_fill_id_Set() const{
    return m_theme_fill_id_isSet;
}

bool OAIShared_FillMap::is_theme_fill_id_Valid() const{
    return m_theme_fill_id_isValid;
}

bool OAIShared_FillMap::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_connector_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_effect_attribute_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fill_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shape_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_cell_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_theme_background_fill_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_theme_fill_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShared_FillMap::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
