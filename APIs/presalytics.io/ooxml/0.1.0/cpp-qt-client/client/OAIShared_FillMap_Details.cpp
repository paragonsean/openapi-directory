/**
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShared_FillMap_Details.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShared_FillMap_Details::OAIShared_FillMap_Details(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShared_FillMap_Details::OAIShared_FillMap_Details() {
    this->initializeModel();
}

OAIShared_FillMap_Details::~OAIShared_FillMap_Details() {}

void OAIShared_FillMap_Details::initializeModel() {

    m_connector_isSet = false;
    m_connector_isValid = false;

    m_connector_id_isSet = false;
    m_connector_id_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_modified_isSet = false;
    m_date_modified_isValid = false;

    m_effect_attribute_isSet = false;
    m_effect_attribute_isValid = false;

    m_effect_attribute_id_isSet = false;
    m_effect_attribute_id_isValid = false;

    m_fill_type_id_isSet = false;
    m_fill_type_id_isValid = false;

    m_gradient_fill_isSet = false;
    m_gradient_fill_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_image_fill_isSet = false;
    m_image_fill_isValid = false;

    m_shape_isSet = false;
    m_shape_isValid = false;

    m_shape_id_isSet = false;
    m_shape_id_isValid = false;

    m_solid_fill_isSet = false;
    m_solid_fill_isValid = false;

    m_table_cell_isSet = false;
    m_table_cell_isValid = false;

    m_table_cell_id_isSet = false;
    m_table_cell_id_isValid = false;

    m_theme_background_fill_isSet = false;
    m_theme_background_fill_isValid = false;

    m_theme_background_fill_id_isSet = false;
    m_theme_background_fill_id_isValid = false;

    m_theme_fill_isSet = false;
    m_theme_fill_isValid = false;

    m_theme_fill_id_isSet = false;
    m_theme_fill_id_isValid = false;

    m_user_created_isSet = false;
    m_user_created_isValid = false;

    m_user_modified_isSet = false;
    m_user_modified_isValid = false;
}

void OAIShared_FillMap_Details::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShared_FillMap_Details::fromJsonObject(QJsonObject json) {

    m_connector_isValid = ::OpenAPI::fromJsonValue(m_connector, json[QString("connector")]);
    m_connector_isSet = !json[QString("connector")].isNull() && m_connector_isValid;

    m_connector_id_isValid = ::OpenAPI::fromJsonValue(m_connector_id, json[QString("connectorId")]);
    m_connector_id_isSet = !json[QString("connectorId")].isNull() && m_connector_id_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("dateCreated")]);
    m_date_created_isSet = !json[QString("dateCreated")].isNull() && m_date_created_isValid;

    m_date_modified_isValid = ::OpenAPI::fromJsonValue(m_date_modified, json[QString("dateModified")]);
    m_date_modified_isSet = !json[QString("dateModified")].isNull() && m_date_modified_isValid;

    m_effect_attribute_isValid = ::OpenAPI::fromJsonValue(m_effect_attribute, json[QString("effectAttribute")]);
    m_effect_attribute_isSet = !json[QString("effectAttribute")].isNull() && m_effect_attribute_isValid;

    m_effect_attribute_id_isValid = ::OpenAPI::fromJsonValue(m_effect_attribute_id, json[QString("effectAttributeId")]);
    m_effect_attribute_id_isSet = !json[QString("effectAttributeId")].isNull() && m_effect_attribute_id_isValid;

    m_fill_type_id_isValid = ::OpenAPI::fromJsonValue(m_fill_type_id, json[QString("fillTypeId")]);
    m_fill_type_id_isSet = !json[QString("fillTypeId")].isNull() && m_fill_type_id_isValid;

    m_gradient_fill_isValid = ::OpenAPI::fromJsonValue(m_gradient_fill, json[QString("gradientFill")]);
    m_gradient_fill_isSet = !json[QString("gradientFill")].isNull() && m_gradient_fill_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_image_fill_isValid = ::OpenAPI::fromJsonValue(m_image_fill, json[QString("imageFill")]);
    m_image_fill_isSet = !json[QString("imageFill")].isNull() && m_image_fill_isValid;

    m_shape_isValid = ::OpenAPI::fromJsonValue(m_shape, json[QString("shape")]);
    m_shape_isSet = !json[QString("shape")].isNull() && m_shape_isValid;

    m_shape_id_isValid = ::OpenAPI::fromJsonValue(m_shape_id, json[QString("shapeId")]);
    m_shape_id_isSet = !json[QString("shapeId")].isNull() && m_shape_id_isValid;

    m_solid_fill_isValid = ::OpenAPI::fromJsonValue(m_solid_fill, json[QString("solidFill")]);
    m_solid_fill_isSet = !json[QString("solidFill")].isNull() && m_solid_fill_isValid;

    m_table_cell_isValid = ::OpenAPI::fromJsonValue(m_table_cell, json[QString("tableCell")]);
    m_table_cell_isSet = !json[QString("tableCell")].isNull() && m_table_cell_isValid;

    m_table_cell_id_isValid = ::OpenAPI::fromJsonValue(m_table_cell_id, json[QString("tableCellId")]);
    m_table_cell_id_isSet = !json[QString("tableCellId")].isNull() && m_table_cell_id_isValid;

    m_theme_background_fill_isValid = ::OpenAPI::fromJsonValue(m_theme_background_fill, json[QString("themeBackgroundFill")]);
    m_theme_background_fill_isSet = !json[QString("themeBackgroundFill")].isNull() && m_theme_background_fill_isValid;

    m_theme_background_fill_id_isValid = ::OpenAPI::fromJsonValue(m_theme_background_fill_id, json[QString("themeBackgroundFillId")]);
    m_theme_background_fill_id_isSet = !json[QString("themeBackgroundFillId")].isNull() && m_theme_background_fill_id_isValid;

    m_theme_fill_isValid = ::OpenAPI::fromJsonValue(m_theme_fill, json[QString("themeFill")]);
    m_theme_fill_isSet = !json[QString("themeFill")].isNull() && m_theme_fill_isValid;

    m_theme_fill_id_isValid = ::OpenAPI::fromJsonValue(m_theme_fill_id, json[QString("themeFillId")]);
    m_theme_fill_id_isSet = !json[QString("themeFillId")].isNull() && m_theme_fill_id_isValid;

    m_user_created_isValid = ::OpenAPI::fromJsonValue(m_user_created, json[QString("userCreated")]);
    m_user_created_isSet = !json[QString("userCreated")].isNull() && m_user_created_isValid;

    m_user_modified_isValid = ::OpenAPI::fromJsonValue(m_user_modified, json[QString("userModified")]);
    m_user_modified_isSet = !json[QString("userModified")].isNull() && m_user_modified_isValid;
}

QString OAIShared_FillMap_Details::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShared_FillMap_Details::asJsonObject() const {
    QJsonObject obj;
    if (m_connector.isSet()) {
        obj.insert(QString("connector"), ::OpenAPI::toJsonValue(m_connector));
    }
    if (m_connector_id_isSet) {
        obj.insert(QString("connectorId"), ::OpenAPI::toJsonValue(m_connector_id));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("dateCreated"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_modified_isSet) {
        obj.insert(QString("dateModified"), ::OpenAPI::toJsonValue(m_date_modified));
    }
    if (m_effect_attribute.isSet()) {
        obj.insert(QString("effectAttribute"), ::OpenAPI::toJsonValue(m_effect_attribute));
    }
    if (m_effect_attribute_id_isSet) {
        obj.insert(QString("effectAttributeId"), ::OpenAPI::toJsonValue(m_effect_attribute_id));
    }
    if (m_fill_type_id_isSet) {
        obj.insert(QString("fillTypeId"), ::OpenAPI::toJsonValue(m_fill_type_id));
    }
    if (m_gradient_fill.isSet()) {
        obj.insert(QString("gradientFill"), ::OpenAPI::toJsonValue(m_gradient_fill));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_image_fill.isSet()) {
        obj.insert(QString("imageFill"), ::OpenAPI::toJsonValue(m_image_fill));
    }
    if (m_shape.isSet()) {
        obj.insert(QString("shape"), ::OpenAPI::toJsonValue(m_shape));
    }
    if (m_shape_id_isSet) {
        obj.insert(QString("shapeId"), ::OpenAPI::toJsonValue(m_shape_id));
    }
    if (m_solid_fill.isSet()) {
        obj.insert(QString("solidFill"), ::OpenAPI::toJsonValue(m_solid_fill));
    }
    if (m_table_cell.isSet()) {
        obj.insert(QString("tableCell"), ::OpenAPI::toJsonValue(m_table_cell));
    }
    if (m_table_cell_id_isSet) {
        obj.insert(QString("tableCellId"), ::OpenAPI::toJsonValue(m_table_cell_id));
    }
    if (m_theme_background_fill.isSet()) {
        obj.insert(QString("themeBackgroundFill"), ::OpenAPI::toJsonValue(m_theme_background_fill));
    }
    if (m_theme_background_fill_id_isSet) {
        obj.insert(QString("themeBackgroundFillId"), ::OpenAPI::toJsonValue(m_theme_background_fill_id));
    }
    if (m_theme_fill.isSet()) {
        obj.insert(QString("themeFill"), ::OpenAPI::toJsonValue(m_theme_fill));
    }
    if (m_theme_fill_id_isSet) {
        obj.insert(QString("themeFillId"), ::OpenAPI::toJsonValue(m_theme_fill_id));
    }
    if (m_user_created_isSet) {
        obj.insert(QString("userCreated"), ::OpenAPI::toJsonValue(m_user_created));
    }
    if (m_user_modified_isSet) {
        obj.insert(QString("userModified"), ::OpenAPI::toJsonValue(m_user_modified));
    }
    return obj;
}

OAISlide_Connector_Details OAIShared_FillMap_Details::getConnector() const {
    return m_connector;
}
void OAIShared_FillMap_Details::setConnector(const OAISlide_Connector_Details &connector) {
    m_connector = connector;
    m_connector_isSet = true;
}

bool OAIShared_FillMap_Details::is_connector_Set() const{
    return m_connector_isSet;
}

bool OAIShared_FillMap_Details::is_connector_Valid() const{
    return m_connector_isValid;
}

QString OAIShared_FillMap_Details::getConnectorId() const {
    return m_connector_id;
}
void OAIShared_FillMap_Details::setConnectorId(const QString &connector_id) {
    m_connector_id = connector_id;
    m_connector_id_isSet = true;
}

bool OAIShared_FillMap_Details::is_connector_id_Set() const{
    return m_connector_id_isSet;
}

bool OAIShared_FillMap_Details::is_connector_id_Valid() const{
    return m_connector_id_isValid;
}

QDateTime OAIShared_FillMap_Details::getDateCreated() const {
    return m_date_created;
}
void OAIShared_FillMap_Details::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIShared_FillMap_Details::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIShared_FillMap_Details::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAIShared_FillMap_Details::getDateModified() const {
    return m_date_modified;
}
void OAIShared_FillMap_Details::setDateModified(const QDateTime &date_modified) {
    m_date_modified = date_modified;
    m_date_modified_isSet = true;
}

bool OAIShared_FillMap_Details::is_date_modified_Set() const{
    return m_date_modified_isSet;
}

bool OAIShared_FillMap_Details::is_date_modified_Valid() const{
    return m_date_modified_isValid;
}

OAIShared_EffectAttributes_Details OAIShared_FillMap_Details::getEffectAttribute() const {
    return m_effect_attribute;
}
void OAIShared_FillMap_Details::setEffectAttribute(const OAIShared_EffectAttributes_Details &effect_attribute) {
    m_effect_attribute = effect_attribute;
    m_effect_attribute_isSet = true;
}

bool OAIShared_FillMap_Details::is_effect_attribute_Set() const{
    return m_effect_attribute_isSet;
}

bool OAIShared_FillMap_Details::is_effect_attribute_Valid() const{
    return m_effect_attribute_isValid;
}

QString OAIShared_FillMap_Details::getEffectAttributeId() const {
    return m_effect_attribute_id;
}
void OAIShared_FillMap_Details::setEffectAttributeId(const QString &effect_attribute_id) {
    m_effect_attribute_id = effect_attribute_id;
    m_effect_attribute_id_isSet = true;
}

bool OAIShared_FillMap_Details::is_effect_attribute_id_Set() const{
    return m_effect_attribute_id_isSet;
}

bool OAIShared_FillMap_Details::is_effect_attribute_id_Valid() const{
    return m_effect_attribute_id_isValid;
}

qint32 OAIShared_FillMap_Details::getFillTypeId() const {
    return m_fill_type_id;
}
void OAIShared_FillMap_Details::setFillTypeId(const qint32 &fill_type_id) {
    m_fill_type_id = fill_type_id;
    m_fill_type_id_isSet = true;
}

bool OAIShared_FillMap_Details::is_fill_type_id_Set() const{
    return m_fill_type_id_isSet;
}

bool OAIShared_FillMap_Details::is_fill_type_id_Valid() const{
    return m_fill_type_id_isValid;
}

OAIShared_GradientFills_Details OAIShared_FillMap_Details::getGradientFill() const {
    return m_gradient_fill;
}
void OAIShared_FillMap_Details::setGradientFill(const OAIShared_GradientFills_Details &gradient_fill) {
    m_gradient_fill = gradient_fill;
    m_gradient_fill_isSet = true;
}

bool OAIShared_FillMap_Details::is_gradient_fill_Set() const{
    return m_gradient_fill_isSet;
}

bool OAIShared_FillMap_Details::is_gradient_fill_Valid() const{
    return m_gradient_fill_isValid;
}

QString OAIShared_FillMap_Details::getId() const {
    return m_id;
}
void OAIShared_FillMap_Details::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIShared_FillMap_Details::is_id_Set() const{
    return m_id_isSet;
}

bool OAIShared_FillMap_Details::is_id_Valid() const{
    return m_id_isValid;
}

OAIShared_ImageFills_Details OAIShared_FillMap_Details::getImageFill() const {
    return m_image_fill;
}
void OAIShared_FillMap_Details::setImageFill(const OAIShared_ImageFills_Details &image_fill) {
    m_image_fill = image_fill;
    m_image_fill_isSet = true;
}

bool OAIShared_FillMap_Details::is_image_fill_Set() const{
    return m_image_fill_isSet;
}

bool OAIShared_FillMap_Details::is_image_fill_Valid() const{
    return m_image_fill_isValid;
}

OAISlide_Shapes_Details OAIShared_FillMap_Details::getShape() const {
    return m_shape;
}
void OAIShared_FillMap_Details::setShape(const OAISlide_Shapes_Details &shape) {
    m_shape = shape;
    m_shape_isSet = true;
}

bool OAIShared_FillMap_Details::is_shape_Set() const{
    return m_shape_isSet;
}

bool OAIShared_FillMap_Details::is_shape_Valid() const{
    return m_shape_isValid;
}

QString OAIShared_FillMap_Details::getShapeId() const {
    return m_shape_id;
}
void OAIShared_FillMap_Details::setShapeId(const QString &shape_id) {
    m_shape_id = shape_id;
    m_shape_id_isSet = true;
}

bool OAIShared_FillMap_Details::is_shape_id_Set() const{
    return m_shape_id_isSet;
}

bool OAIShared_FillMap_Details::is_shape_id_Valid() const{
    return m_shape_id_isValid;
}

OAIShared_SolidFills_Details OAIShared_FillMap_Details::getSolidFill() const {
    return m_solid_fill;
}
void OAIShared_FillMap_Details::setSolidFill(const OAIShared_SolidFills_Details &solid_fill) {
    m_solid_fill = solid_fill;
    m_solid_fill_isSet = true;
}

bool OAIShared_FillMap_Details::is_solid_fill_Set() const{
    return m_solid_fill_isSet;
}

bool OAIShared_FillMap_Details::is_solid_fill_Valid() const{
    return m_solid_fill_isValid;
}

OAITable_Cells_Details OAIShared_FillMap_Details::getTableCell() const {
    return m_table_cell;
}
void OAIShared_FillMap_Details::setTableCell(const OAITable_Cells_Details &table_cell) {
    m_table_cell = table_cell;
    m_table_cell_isSet = true;
}

bool OAIShared_FillMap_Details::is_table_cell_Set() const{
    return m_table_cell_isSet;
}

bool OAIShared_FillMap_Details::is_table_cell_Valid() const{
    return m_table_cell_isValid;
}

QString OAIShared_FillMap_Details::getTableCellId() const {
    return m_table_cell_id;
}
void OAIShared_FillMap_Details::setTableCellId(const QString &table_cell_id) {
    m_table_cell_id = table_cell_id;
    m_table_cell_id_isSet = true;
}

bool OAIShared_FillMap_Details::is_table_cell_id_Set() const{
    return m_table_cell_id_isSet;
}

bool OAIShared_FillMap_Details::is_table_cell_id_Valid() const{
    return m_table_cell_id_isValid;
}

OAITheme_BackgroundFills_Details OAIShared_FillMap_Details::getThemeBackgroundFill() const {
    return m_theme_background_fill;
}
void OAIShared_FillMap_Details::setThemeBackgroundFill(const OAITheme_BackgroundFills_Details &theme_background_fill) {
    m_theme_background_fill = theme_background_fill;
    m_theme_background_fill_isSet = true;
}

bool OAIShared_FillMap_Details::is_theme_background_fill_Set() const{
    return m_theme_background_fill_isSet;
}

bool OAIShared_FillMap_Details::is_theme_background_fill_Valid() const{
    return m_theme_background_fill_isValid;
}

QString OAIShared_FillMap_Details::getThemeBackgroundFillId() const {
    return m_theme_background_fill_id;
}
void OAIShared_FillMap_Details::setThemeBackgroundFillId(const QString &theme_background_fill_id) {
    m_theme_background_fill_id = theme_background_fill_id;
    m_theme_background_fill_id_isSet = true;
}

bool OAIShared_FillMap_Details::is_theme_background_fill_id_Set() const{
    return m_theme_background_fill_id_isSet;
}

bool OAIShared_FillMap_Details::is_theme_background_fill_id_Valid() const{
    return m_theme_background_fill_id_isValid;
}

OAITheme_Fills_Details OAIShared_FillMap_Details::getThemeFill() const {
    return m_theme_fill;
}
void OAIShared_FillMap_Details::setThemeFill(const OAITheme_Fills_Details &theme_fill) {
    m_theme_fill = theme_fill;
    m_theme_fill_isSet = true;
}

bool OAIShared_FillMap_Details::is_theme_fill_Set() const{
    return m_theme_fill_isSet;
}

bool OAIShared_FillMap_Details::is_theme_fill_Valid() const{
    return m_theme_fill_isValid;
}

QString OAIShared_FillMap_Details::getThemeFillId() const {
    return m_theme_fill_id;
}
void OAIShared_FillMap_Details::setThemeFillId(const QString &theme_fill_id) {
    m_theme_fill_id = theme_fill_id;
    m_theme_fill_id_isSet = true;
}

bool OAIShared_FillMap_Details::is_theme_fill_id_Set() const{
    return m_theme_fill_id_isSet;
}

bool OAIShared_FillMap_Details::is_theme_fill_id_Valid() const{
    return m_theme_fill_id_isValid;
}

QString OAIShared_FillMap_Details::getUserCreated() const {
    return m_user_created;
}
void OAIShared_FillMap_Details::setUserCreated(const QString &user_created) {
    m_user_created = user_created;
    m_user_created_isSet = true;
}

bool OAIShared_FillMap_Details::is_user_created_Set() const{
    return m_user_created_isSet;
}

bool OAIShared_FillMap_Details::is_user_created_Valid() const{
    return m_user_created_isValid;
}

QString OAIShared_FillMap_Details::getUserModified() const {
    return m_user_modified;
}
void OAIShared_FillMap_Details::setUserModified(const QString &user_modified) {
    m_user_modified = user_modified;
    m_user_modified_isSet = true;
}

bool OAIShared_FillMap_Details::is_user_modified_Set() const{
    return m_user_modified_isSet;
}

bool OAIShared_FillMap_Details::is_user_modified_Valid() const{
    return m_user_modified_isValid;
}

bool OAIShared_FillMap_Details::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_connector.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_connector_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_effect_attribute.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_effect_attribute_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fill_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gradient_fill.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_fill.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shape.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shape_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_solid_fill.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_cell.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_cell_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_theme_background_fill.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_theme_background_fill_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_theme_fill.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_theme_fill_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_modified_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShared_FillMap_Details::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
