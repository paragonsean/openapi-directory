/**
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChart_Charts_Details.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChart_Charts_Details::OAIChart_Charts_Details(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChart_Charts_Details::OAIChart_Charts_Details() {
    this->initializeModel();
}

OAIChart_Charts_Details::~OAIChart_Charts_Details() {}

void OAIChart_Charts_Details::initializeModel() {

    m_axes_isSet = false;
    m_axes_isValid = false;

    m_base_element_blob_url_isSet = false;
    m_base_element_blob_url_isValid = false;

    m_changed_base_element_blob_url_isSet = false;
    m_changed_base_element_blob_url_isValid = false;

    m_chart_data_isSet = false;
    m_chart_data_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_modified_isSet = false;
    m_date_modified_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_package_uri_isSet = false;
    m_package_uri_isValid = false;

    m_parent_graphic_isSet = false;
    m_parent_graphic_isValid = false;

    m_parent_graphic_id_isSet = false;
    m_parent_graphic_id_isValid = false;

    m_svg_blob_url_isSet = false;
    m_svg_blob_url_isValid = false;

    m_title_text_container_isSet = false;
    m_title_text_container_isValid = false;

    m_user_created_isSet = false;
    m_user_created_isValid = false;

    m_user_modified_isSet = false;
    m_user_modified_isValid = false;
}

void OAIChart_Charts_Details::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChart_Charts_Details::fromJsonObject(QJsonObject json) {

    m_axes_isValid = ::OpenAPI::fromJsonValue(m_axes, json[QString("axes")]);
    m_axes_isSet = !json[QString("axes")].isNull() && m_axes_isValid;

    m_base_element_blob_url_isValid = ::OpenAPI::fromJsonValue(m_base_element_blob_url, json[QString("baseElementBlobUrl")]);
    m_base_element_blob_url_isSet = !json[QString("baseElementBlobUrl")].isNull() && m_base_element_blob_url_isValid;

    m_changed_base_element_blob_url_isValid = ::OpenAPI::fromJsonValue(m_changed_base_element_blob_url, json[QString("changedBaseElementBlobUrl")]);
    m_changed_base_element_blob_url_isSet = !json[QString("changedBaseElementBlobUrl")].isNull() && m_changed_base_element_blob_url_isValid;

    m_chart_data_isValid = ::OpenAPI::fromJsonValue(m_chart_data, json[QString("chartData")]);
    m_chart_data_isSet = !json[QString("chartData")].isNull() && m_chart_data_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("dateCreated")]);
    m_date_created_isSet = !json[QString("dateCreated")].isNull() && m_date_created_isValid;

    m_date_modified_isValid = ::OpenAPI::fromJsonValue(m_date_modified, json[QString("dateModified")]);
    m_date_modified_isSet = !json[QString("dateModified")].isNull() && m_date_modified_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_package_uri_isValid = ::OpenAPI::fromJsonValue(m_package_uri, json[QString("packageUri")]);
    m_package_uri_isSet = !json[QString("packageUri")].isNull() && m_package_uri_isValid;

    m_parent_graphic_isValid = ::OpenAPI::fromJsonValue(m_parent_graphic, json[QString("parentGraphic")]);
    m_parent_graphic_isSet = !json[QString("parentGraphic")].isNull() && m_parent_graphic_isValid;

    m_parent_graphic_id_isValid = ::OpenAPI::fromJsonValue(m_parent_graphic_id, json[QString("parentGraphicId")]);
    m_parent_graphic_id_isSet = !json[QString("parentGraphicId")].isNull() && m_parent_graphic_id_isValid;

    m_svg_blob_url_isValid = ::OpenAPI::fromJsonValue(m_svg_blob_url, json[QString("svgBlobUrl")]);
    m_svg_blob_url_isSet = !json[QString("svgBlobUrl")].isNull() && m_svg_blob_url_isValid;

    m_title_text_container_isValid = ::OpenAPI::fromJsonValue(m_title_text_container, json[QString("titleTextContainer")]);
    m_title_text_container_isSet = !json[QString("titleTextContainer")].isNull() && m_title_text_container_isValid;

    m_user_created_isValid = ::OpenAPI::fromJsonValue(m_user_created, json[QString("userCreated")]);
    m_user_created_isSet = !json[QString("userCreated")].isNull() && m_user_created_isValid;

    m_user_modified_isValid = ::OpenAPI::fromJsonValue(m_user_modified, json[QString("userModified")]);
    m_user_modified_isSet = !json[QString("userModified")].isNull() && m_user_modified_isValid;
}

QString OAIChart_Charts_Details::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChart_Charts_Details::asJsonObject() const {
    QJsonObject obj;
    if (m_axes.size() > 0) {
        obj.insert(QString("axes"), ::OpenAPI::toJsonValue(m_axes));
    }
    if (m_base_element_blob_url_isSet) {
        obj.insert(QString("baseElementBlobUrl"), ::OpenAPI::toJsonValue(m_base_element_blob_url));
    }
    if (m_changed_base_element_blob_url_isSet) {
        obj.insert(QString("changedBaseElementBlobUrl"), ::OpenAPI::toJsonValue(m_changed_base_element_blob_url));
    }
    if (m_chart_data.isSet()) {
        obj.insert(QString("chartData"), ::OpenAPI::toJsonValue(m_chart_data));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("dateCreated"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_modified_isSet) {
        obj.insert(QString("dateModified"), ::OpenAPI::toJsonValue(m_date_modified));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_package_uri_isSet) {
        obj.insert(QString("packageUri"), ::OpenAPI::toJsonValue(m_package_uri));
    }
    if (m_parent_graphic.isSet()) {
        obj.insert(QString("parentGraphic"), ::OpenAPI::toJsonValue(m_parent_graphic));
    }
    if (m_parent_graphic_id_isSet) {
        obj.insert(QString("parentGraphicId"), ::OpenAPI::toJsonValue(m_parent_graphic_id));
    }
    if (m_svg_blob_url_isSet) {
        obj.insert(QString("svgBlobUrl"), ::OpenAPI::toJsonValue(m_svg_blob_url));
    }
    if (m_title_text_container.isSet()) {
        obj.insert(QString("titleTextContainer"), ::OpenAPI::toJsonValue(m_title_text_container));
    }
    if (m_user_created_isSet) {
        obj.insert(QString("userCreated"), ::OpenAPI::toJsonValue(m_user_created));
    }
    if (m_user_modified_isSet) {
        obj.insert(QString("userModified"), ::OpenAPI::toJsonValue(m_user_modified));
    }
    return obj;
}

QList<OAIChart_Axes_Details> OAIChart_Charts_Details::getAxes() const {
    return m_axes;
}
void OAIChart_Charts_Details::setAxes(const QList<OAIChart_Axes_Details> &axes) {
    m_axes = axes;
    m_axes_isSet = true;
}

bool OAIChart_Charts_Details::is_axes_Set() const{
    return m_axes_isSet;
}

bool OAIChart_Charts_Details::is_axes_Valid() const{
    return m_axes_isValid;
}

QString OAIChart_Charts_Details::getBaseElementBlobUrl() const {
    return m_base_element_blob_url;
}
void OAIChart_Charts_Details::setBaseElementBlobUrl(const QString &base_element_blob_url) {
    m_base_element_blob_url = base_element_blob_url;
    m_base_element_blob_url_isSet = true;
}

bool OAIChart_Charts_Details::is_base_element_blob_url_Set() const{
    return m_base_element_blob_url_isSet;
}

bool OAIChart_Charts_Details::is_base_element_blob_url_Valid() const{
    return m_base_element_blob_url_isValid;
}

QString OAIChart_Charts_Details::getChangedBaseElementBlobUrl() const {
    return m_changed_base_element_blob_url;
}
void OAIChart_Charts_Details::setChangedBaseElementBlobUrl(const QString &changed_base_element_blob_url) {
    m_changed_base_element_blob_url = changed_base_element_blob_url;
    m_changed_base_element_blob_url_isSet = true;
}

bool OAIChart_Charts_Details::is_changed_base_element_blob_url_Set() const{
    return m_changed_base_element_blob_url_isSet;
}

bool OAIChart_Charts_Details::is_changed_base_element_blob_url_Valid() const{
    return m_changed_base_element_blob_url_isValid;
}

OAIChart_ChartData_Details OAIChart_Charts_Details::getChartData() const {
    return m_chart_data;
}
void OAIChart_Charts_Details::setChartData(const OAIChart_ChartData_Details &chart_data) {
    m_chart_data = chart_data;
    m_chart_data_isSet = true;
}

bool OAIChart_Charts_Details::is_chart_data_Set() const{
    return m_chart_data_isSet;
}

bool OAIChart_Charts_Details::is_chart_data_Valid() const{
    return m_chart_data_isValid;
}

QDateTime OAIChart_Charts_Details::getDateCreated() const {
    return m_date_created;
}
void OAIChart_Charts_Details::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIChart_Charts_Details::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIChart_Charts_Details::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAIChart_Charts_Details::getDateModified() const {
    return m_date_modified;
}
void OAIChart_Charts_Details::setDateModified(const QDateTime &date_modified) {
    m_date_modified = date_modified;
    m_date_modified_isSet = true;
}

bool OAIChart_Charts_Details::is_date_modified_Set() const{
    return m_date_modified_isSet;
}

bool OAIChart_Charts_Details::is_date_modified_Valid() const{
    return m_date_modified_isValid;
}

QString OAIChart_Charts_Details::getId() const {
    return m_id;
}
void OAIChart_Charts_Details::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIChart_Charts_Details::is_id_Set() const{
    return m_id_isSet;
}

bool OAIChart_Charts_Details::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIChart_Charts_Details::getName() const {
    return m_name;
}
void OAIChart_Charts_Details::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIChart_Charts_Details::is_name_Set() const{
    return m_name_isSet;
}

bool OAIChart_Charts_Details::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIChart_Charts_Details::getPackageUri() const {
    return m_package_uri;
}
void OAIChart_Charts_Details::setPackageUri(const QString &package_uri) {
    m_package_uri = package_uri;
    m_package_uri_isSet = true;
}

bool OAIChart_Charts_Details::is_package_uri_Set() const{
    return m_package_uri_isSet;
}

bool OAIChart_Charts_Details::is_package_uri_Valid() const{
    return m_package_uri_isValid;
}

OAISlide_Graphics_Details OAIChart_Charts_Details::getParentGraphic() const {
    return m_parent_graphic;
}
void OAIChart_Charts_Details::setParentGraphic(const OAISlide_Graphics_Details &parent_graphic) {
    m_parent_graphic = parent_graphic;
    m_parent_graphic_isSet = true;
}

bool OAIChart_Charts_Details::is_parent_graphic_Set() const{
    return m_parent_graphic_isSet;
}

bool OAIChart_Charts_Details::is_parent_graphic_Valid() const{
    return m_parent_graphic_isValid;
}

QString OAIChart_Charts_Details::getParentGraphicId() const {
    return m_parent_graphic_id;
}
void OAIChart_Charts_Details::setParentGraphicId(const QString &parent_graphic_id) {
    m_parent_graphic_id = parent_graphic_id;
    m_parent_graphic_id_isSet = true;
}

bool OAIChart_Charts_Details::is_parent_graphic_id_Set() const{
    return m_parent_graphic_id_isSet;
}

bool OAIChart_Charts_Details::is_parent_graphic_id_Valid() const{
    return m_parent_graphic_id_isValid;
}

QString OAIChart_Charts_Details::getSvgBlobUrl() const {
    return m_svg_blob_url;
}
void OAIChart_Charts_Details::setSvgBlobUrl(const QString &svg_blob_url) {
    m_svg_blob_url = svg_blob_url;
    m_svg_blob_url_isSet = true;
}

bool OAIChart_Charts_Details::is_svg_blob_url_Set() const{
    return m_svg_blob_url_isSet;
}

bool OAIChart_Charts_Details::is_svg_blob_url_Valid() const{
    return m_svg_blob_url_isValid;
}

OAIShared_TextContainer_Details OAIChart_Charts_Details::getTitleTextContainer() const {
    return m_title_text_container;
}
void OAIChart_Charts_Details::setTitleTextContainer(const OAIShared_TextContainer_Details &title_text_container) {
    m_title_text_container = title_text_container;
    m_title_text_container_isSet = true;
}

bool OAIChart_Charts_Details::is_title_text_container_Set() const{
    return m_title_text_container_isSet;
}

bool OAIChart_Charts_Details::is_title_text_container_Valid() const{
    return m_title_text_container_isValid;
}

QString OAIChart_Charts_Details::getUserCreated() const {
    return m_user_created;
}
void OAIChart_Charts_Details::setUserCreated(const QString &user_created) {
    m_user_created = user_created;
    m_user_created_isSet = true;
}

bool OAIChart_Charts_Details::is_user_created_Set() const{
    return m_user_created_isSet;
}

bool OAIChart_Charts_Details::is_user_created_Valid() const{
    return m_user_created_isValid;
}

QString OAIChart_Charts_Details::getUserModified() const {
    return m_user_modified;
}
void OAIChart_Charts_Details::setUserModified(const QString &user_modified) {
    m_user_modified = user_modified;
    m_user_modified_isSet = true;
}

bool OAIChart_Charts_Details::is_user_modified_Set() const{
    return m_user_modified_isSet;
}

bool OAIChart_Charts_Details::is_user_modified_Valid() const{
    return m_user_modified_isValid;
}

bool OAIChart_Charts_Details::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_axes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_element_blob_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_changed_base_element_blob_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_chart_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_graphic.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_graphic_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_svg_blob_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_text_container.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_modified_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChart_Charts_Details::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
