/**
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIChartsAxisDataTypesApi_H
#define OAI_OAIChartsAxisDataTypesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIChart_AxisDataTypes.h"
#include "OAIProblemDetails.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIChartsAxisDataTypesApi : public QObject {
    Q_OBJECT

public:
    OAIChartsAxisDataTypesApi(const int timeOut = 0);
    ~OAIChartsAxisDataTypesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void chartAxisdatatypesGet();

    /**
    * @param[in]  id QString [required]
    */
    virtual void chartAxisdatatypesGetId(const QString &id);

    /**
    * @param[in]  type_id qint32 [required]
    */
    virtual void chartAxisdatatypesTypeidGetTypeId(const qint32 &type_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void chartAxisdatatypesGetCallback(OAIHttpRequestWorker *worker);
    void chartAxisdatatypesGetIdCallback(OAIHttpRequestWorker *worker);
    void chartAxisdatatypesTypeidGetTypeIdCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void chartAxisdatatypesGetSignal(QList<OAIChart_AxisDataTypes> summary);
    void chartAxisdatatypesGetIdSignal(OAIChart_AxisDataTypes summary);
    void chartAxisdatatypesTypeidGetTypeIdSignal(OAIChart_AxisDataTypes summary);


    void chartAxisdatatypesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIChart_AxisDataTypes> summary);
    void chartAxisdatatypesGetIdSignalFull(OAIHttpRequestWorker *worker, OAIChart_AxisDataTypes summary);
    void chartAxisdatatypesTypeidGetTypeIdSignalFull(OAIHttpRequestWorker *worker, OAIChart_AxisDataTypes summary);

    Q_DECL_DEPRECATED_X("Use chartAxisdatatypesGetSignalError() instead")
    void chartAxisdatatypesGetSignalE(QList<OAIChart_AxisDataTypes> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void chartAxisdatatypesGetSignalError(QList<OAIChart_AxisDataTypes> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chartAxisdatatypesGetIdSignalError() instead")
    void chartAxisdatatypesGetIdSignalE(OAIChart_AxisDataTypes summary, QNetworkReply::NetworkError error_type, QString error_str);
    void chartAxisdatatypesGetIdSignalError(OAIChart_AxisDataTypes summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chartAxisdatatypesTypeidGetTypeIdSignalError() instead")
    void chartAxisdatatypesTypeidGetTypeIdSignalE(OAIChart_AxisDataTypes summary, QNetworkReply::NetworkError error_type, QString error_str);
    void chartAxisdatatypesTypeidGetTypeIdSignalError(OAIChart_AxisDataTypes summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use chartAxisdatatypesGetSignalErrorFull() instead")
    void chartAxisdatatypesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chartAxisdatatypesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chartAxisdatatypesGetIdSignalErrorFull() instead")
    void chartAxisdatatypesGetIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chartAxisdatatypesGetIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chartAxisdatatypesTypeidGetTypeIdSignalErrorFull() instead")
    void chartAxisdatatypesTypeidGetTypeIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chartAxisdatatypesTypeidGetTypeIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
