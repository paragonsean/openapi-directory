/**
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShared_EffectAttributes_Details.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShared_EffectAttributes_Details::OAIShared_EffectAttributes_Details(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShared_EffectAttributes_Details::OAIShared_EffectAttributes_Details() {
    this->initializeModel();
}

OAIShared_EffectAttributes_Details::~OAIShared_EffectAttributes_Details() {}

void OAIShared_EffectAttributes_Details::initializeModel() {

    m_attributes_json_isSet = false;
    m_attributes_json_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_modified_isSet = false;
    m_date_modified_isValid = false;

    m_effect_isSet = false;
    m_effect_isValid = false;

    m_effect_id_isSet = false;
    m_effect_id_isValid = false;

    m_effect_type_id_isSet = false;
    m_effect_type_id_isValid = false;

    m_fill_map_isSet = false;
    m_fill_map_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_user_created_isSet = false;
    m_user_created_isValid = false;

    m_user_modified_isSet = false;
    m_user_modified_isValid = false;
}

void OAIShared_EffectAttributes_Details::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShared_EffectAttributes_Details::fromJsonObject(QJsonObject json) {

    m_attributes_json_isValid = ::OpenAPI::fromJsonValue(m_attributes_json, json[QString("attributesJson")]);
    m_attributes_json_isSet = !json[QString("attributesJson")].isNull() && m_attributes_json_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("dateCreated")]);
    m_date_created_isSet = !json[QString("dateCreated")].isNull() && m_date_created_isValid;

    m_date_modified_isValid = ::OpenAPI::fromJsonValue(m_date_modified, json[QString("dateModified")]);
    m_date_modified_isSet = !json[QString("dateModified")].isNull() && m_date_modified_isValid;

    m_effect_isValid = ::OpenAPI::fromJsonValue(m_effect, json[QString("effect")]);
    m_effect_isSet = !json[QString("effect")].isNull() && m_effect_isValid;

    m_effect_id_isValid = ::OpenAPI::fromJsonValue(m_effect_id, json[QString("effectId")]);
    m_effect_id_isSet = !json[QString("effectId")].isNull() && m_effect_id_isValid;

    m_effect_type_id_isValid = ::OpenAPI::fromJsonValue(m_effect_type_id, json[QString("effectTypeId")]);
    m_effect_type_id_isSet = !json[QString("effectTypeId")].isNull() && m_effect_type_id_isValid;

    m_fill_map_isValid = ::OpenAPI::fromJsonValue(m_fill_map, json[QString("fillMap")]);
    m_fill_map_isSet = !json[QString("fillMap")].isNull() && m_fill_map_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_user_created_isValid = ::OpenAPI::fromJsonValue(m_user_created, json[QString("userCreated")]);
    m_user_created_isSet = !json[QString("userCreated")].isNull() && m_user_created_isValid;

    m_user_modified_isValid = ::OpenAPI::fromJsonValue(m_user_modified, json[QString("userModified")]);
    m_user_modified_isSet = !json[QString("userModified")].isNull() && m_user_modified_isValid;
}

QString OAIShared_EffectAttributes_Details::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShared_EffectAttributes_Details::asJsonObject() const {
    QJsonObject obj;
    if (m_attributes_json_isSet) {
        obj.insert(QString("attributesJson"), ::OpenAPI::toJsonValue(m_attributes_json));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("dateCreated"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_modified_isSet) {
        obj.insert(QString("dateModified"), ::OpenAPI::toJsonValue(m_date_modified));
    }
    if (m_effect.isSet()) {
        obj.insert(QString("effect"), ::OpenAPI::toJsonValue(m_effect));
    }
    if (m_effect_id_isSet) {
        obj.insert(QString("effectId"), ::OpenAPI::toJsonValue(m_effect_id));
    }
    if (m_effect_type_id_isSet) {
        obj.insert(QString("effectTypeId"), ::OpenAPI::toJsonValue(m_effect_type_id));
    }
    if (m_fill_map.isSet()) {
        obj.insert(QString("fillMap"), ::OpenAPI::toJsonValue(m_fill_map));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_user_created_isSet) {
        obj.insert(QString("userCreated"), ::OpenAPI::toJsonValue(m_user_created));
    }
    if (m_user_modified_isSet) {
        obj.insert(QString("userModified"), ::OpenAPI::toJsonValue(m_user_modified));
    }
    return obj;
}

QString OAIShared_EffectAttributes_Details::getAttributesJson() const {
    return m_attributes_json;
}
void OAIShared_EffectAttributes_Details::setAttributesJson(const QString &attributes_json) {
    m_attributes_json = attributes_json;
    m_attributes_json_isSet = true;
}

bool OAIShared_EffectAttributes_Details::is_attributes_json_Set() const{
    return m_attributes_json_isSet;
}

bool OAIShared_EffectAttributes_Details::is_attributes_json_Valid() const{
    return m_attributes_json_isValid;
}

QDateTime OAIShared_EffectAttributes_Details::getDateCreated() const {
    return m_date_created;
}
void OAIShared_EffectAttributes_Details::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIShared_EffectAttributes_Details::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIShared_EffectAttributes_Details::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAIShared_EffectAttributes_Details::getDateModified() const {
    return m_date_modified;
}
void OAIShared_EffectAttributes_Details::setDateModified(const QDateTime &date_modified) {
    m_date_modified = date_modified;
    m_date_modified_isSet = true;
}

bool OAIShared_EffectAttributes_Details::is_date_modified_Set() const{
    return m_date_modified_isSet;
}

bool OAIShared_EffectAttributes_Details::is_date_modified_Valid() const{
    return m_date_modified_isValid;
}

OAIShared_Effects_Details OAIShared_EffectAttributes_Details::getEffect() const {
    return m_effect;
}
void OAIShared_EffectAttributes_Details::setEffect(const OAIShared_Effects_Details &effect) {
    m_effect = effect;
    m_effect_isSet = true;
}

bool OAIShared_EffectAttributes_Details::is_effect_Set() const{
    return m_effect_isSet;
}

bool OAIShared_EffectAttributes_Details::is_effect_Valid() const{
    return m_effect_isValid;
}

QString OAIShared_EffectAttributes_Details::getEffectId() const {
    return m_effect_id;
}
void OAIShared_EffectAttributes_Details::setEffectId(const QString &effect_id) {
    m_effect_id = effect_id;
    m_effect_id_isSet = true;
}

bool OAIShared_EffectAttributes_Details::is_effect_id_Set() const{
    return m_effect_id_isSet;
}

bool OAIShared_EffectAttributes_Details::is_effect_id_Valid() const{
    return m_effect_id_isValid;
}

qint32 OAIShared_EffectAttributes_Details::getEffectTypeId() const {
    return m_effect_type_id;
}
void OAIShared_EffectAttributes_Details::setEffectTypeId(const qint32 &effect_type_id) {
    m_effect_type_id = effect_type_id;
    m_effect_type_id_isSet = true;
}

bool OAIShared_EffectAttributes_Details::is_effect_type_id_Set() const{
    return m_effect_type_id_isSet;
}

bool OAIShared_EffectAttributes_Details::is_effect_type_id_Valid() const{
    return m_effect_type_id_isValid;
}

OAIShared_FillMap_Details OAIShared_EffectAttributes_Details::getFillMap() const {
    return m_fill_map;
}
void OAIShared_EffectAttributes_Details::setFillMap(const OAIShared_FillMap_Details &fill_map) {
    m_fill_map = fill_map;
    m_fill_map_isSet = true;
}

bool OAIShared_EffectAttributes_Details::is_fill_map_Set() const{
    return m_fill_map_isSet;
}

bool OAIShared_EffectAttributes_Details::is_fill_map_Valid() const{
    return m_fill_map_isValid;
}

QString OAIShared_EffectAttributes_Details::getId() const {
    return m_id;
}
void OAIShared_EffectAttributes_Details::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIShared_EffectAttributes_Details::is_id_Set() const{
    return m_id_isSet;
}

bool OAIShared_EffectAttributes_Details::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIShared_EffectAttributes_Details::getUserCreated() const {
    return m_user_created;
}
void OAIShared_EffectAttributes_Details::setUserCreated(const QString &user_created) {
    m_user_created = user_created;
    m_user_created_isSet = true;
}

bool OAIShared_EffectAttributes_Details::is_user_created_Set() const{
    return m_user_created_isSet;
}

bool OAIShared_EffectAttributes_Details::is_user_created_Valid() const{
    return m_user_created_isValid;
}

QString OAIShared_EffectAttributes_Details::getUserModified() const {
    return m_user_modified;
}
void OAIShared_EffectAttributes_Details::setUserModified(const QString &user_modified) {
    m_user_modified = user_modified;
    m_user_modified_isSet = true;
}

bool OAIShared_EffectAttributes_Details::is_user_modified_Set() const{
    return m_user_modified_isSet;
}

bool OAIShared_EffectAttributes_Details::is_user_modified_Valid() const{
    return m_user_modified_isValid;
}

bool OAIShared_EffectAttributes_Details::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attributes_json_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_effect.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_effect_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_effect_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fill_map.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_modified_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShared_EffectAttributes_Details::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
