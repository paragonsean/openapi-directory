/**
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChildObjects.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChildObjects::OAIChildObjects(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChildObjects::OAIChildObjects() {
    this->initializeModel();
}

OAIChildObjects::~OAIChildObjects() {}

void OAIChildObjects::initializeModel() {

    m_entity_id_isSet = false;
    m_entity_id_isValid = false;

    m_entity_name_isSet = false;
    m_entity_name_isValid = false;

    m_object_type_isSet = false;
    m_object_type_isValid = false;

    m_parent_entity_id_isSet = false;
    m_parent_entity_id_isValid = false;

    m_parent_object_type_isSet = false;
    m_parent_object_type_isValid = false;
}

void OAIChildObjects::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChildObjects::fromJsonObject(QJsonObject json) {

    m_entity_id_isValid = ::OpenAPI::fromJsonValue(m_entity_id, json[QString("entityId")]);
    m_entity_id_isSet = !json[QString("entityId")].isNull() && m_entity_id_isValid;

    m_entity_name_isValid = ::OpenAPI::fromJsonValue(m_entity_name, json[QString("entityName")]);
    m_entity_name_isSet = !json[QString("entityName")].isNull() && m_entity_name_isValid;

    m_object_type_isValid = ::OpenAPI::fromJsonValue(m_object_type, json[QString("objectType")]);
    m_object_type_isSet = !json[QString("objectType")].isNull() && m_object_type_isValid;

    m_parent_entity_id_isValid = ::OpenAPI::fromJsonValue(m_parent_entity_id, json[QString("parentEntityId")]);
    m_parent_entity_id_isSet = !json[QString("parentEntityId")].isNull() && m_parent_entity_id_isValid;

    m_parent_object_type_isValid = ::OpenAPI::fromJsonValue(m_parent_object_type, json[QString("parentObjectType")]);
    m_parent_object_type_isSet = !json[QString("parentObjectType")].isNull() && m_parent_object_type_isValid;
}

QString OAIChildObjects::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChildObjects::asJsonObject() const {
    QJsonObject obj;
    if (m_entity_id_isSet) {
        obj.insert(QString("entityId"), ::OpenAPI::toJsonValue(m_entity_id));
    }
    if (m_entity_name_isSet) {
        obj.insert(QString("entityName"), ::OpenAPI::toJsonValue(m_entity_name));
    }
    if (m_object_type_isSet) {
        obj.insert(QString("objectType"), ::OpenAPI::toJsonValue(m_object_type));
    }
    if (m_parent_entity_id_isSet) {
        obj.insert(QString("parentEntityId"), ::OpenAPI::toJsonValue(m_parent_entity_id));
    }
    if (m_parent_object_type_isSet) {
        obj.insert(QString("parentObjectType"), ::OpenAPI::toJsonValue(m_parent_object_type));
    }
    return obj;
}

QString OAIChildObjects::getEntityId() const {
    return m_entity_id;
}
void OAIChildObjects::setEntityId(const QString &entity_id) {
    m_entity_id = entity_id;
    m_entity_id_isSet = true;
}

bool OAIChildObjects::is_entity_id_Set() const{
    return m_entity_id_isSet;
}

bool OAIChildObjects::is_entity_id_Valid() const{
    return m_entity_id_isValid;
}

QString OAIChildObjects::getEntityName() const {
    return m_entity_name;
}
void OAIChildObjects::setEntityName(const QString &entity_name) {
    m_entity_name = entity_name;
    m_entity_name_isSet = true;
}

bool OAIChildObjects::is_entity_name_Set() const{
    return m_entity_name_isSet;
}

bool OAIChildObjects::is_entity_name_Valid() const{
    return m_entity_name_isValid;
}

QString OAIChildObjects::getObjectType() const {
    return m_object_type;
}
void OAIChildObjects::setObjectType(const QString &object_type) {
    m_object_type = object_type;
    m_object_type_isSet = true;
}

bool OAIChildObjects::is_object_type_Set() const{
    return m_object_type_isSet;
}

bool OAIChildObjects::is_object_type_Valid() const{
    return m_object_type_isValid;
}

QString OAIChildObjects::getParentEntityId() const {
    return m_parent_entity_id;
}
void OAIChildObjects::setParentEntityId(const QString &parent_entity_id) {
    m_parent_entity_id = parent_entity_id;
    m_parent_entity_id_isSet = true;
}

bool OAIChildObjects::is_parent_entity_id_Set() const{
    return m_parent_entity_id_isSet;
}

bool OAIChildObjects::is_parent_entity_id_Valid() const{
    return m_parent_entity_id_isValid;
}

QString OAIChildObjects::getParentObjectType() const {
    return m_parent_object_type;
}
void OAIChildObjects::setParentObjectType(const QString &parent_object_type) {
    m_parent_object_type = parent_object_type;
    m_parent_object_type_isSet = true;
}

bool OAIChildObjects::is_parent_object_type_Set() const{
    return m_parent_object_type_isSet;
}

bool OAIChildObjects::is_parent_object_type_Valid() const{
    return m_parent_object_type_isValid;
}

bool OAIChildObjects::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_entity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_entity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_object_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChildObjects::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
