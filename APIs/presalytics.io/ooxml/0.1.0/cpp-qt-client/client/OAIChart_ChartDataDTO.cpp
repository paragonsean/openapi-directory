/**
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChart_ChartDataDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChart_ChartDataDTO::OAIChart_ChartDataDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChart_ChartDataDTO::OAIChart_ChartDataDTO() {
    this->initializeModel();
}

OAIChart_ChartDataDTO::~OAIChart_ChartDataDTO() {}

void OAIChart_ChartDataDTO::initializeModel() {

    m_category_names_isSet = false;
    m_category_names_isValid = false;

    m_chart_id_isSet = false;
    m_chart_id_isValid = false;

    m_data_points_isSet = false;
    m_data_points_isValid = false;

    m_series_names_isSet = false;
    m_series_names_isValid = false;
}

void OAIChart_ChartDataDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChart_ChartDataDTO::fromJsonObject(QJsonObject json) {

    m_category_names_isValid = ::OpenAPI::fromJsonValue(m_category_names, json[QString("categoryNames")]);
    m_category_names_isSet = !json[QString("categoryNames")].isNull() && m_category_names_isValid;

    m_chart_id_isValid = ::OpenAPI::fromJsonValue(m_chart_id, json[QString("chartId")]);
    m_chart_id_isSet = !json[QString("chartId")].isNull() && m_chart_id_isValid;

    if(json["dataPoints"].isArray()){
        auto arr = json["dataPoints"].toArray();
        m_data_points_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QList<double> item;
                m_data_points_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_data_points_isSet = !jval.isNull() && m_data_points_isValid;
                m_data_points.push_back(item);
            }
        }
    }

    m_series_names_isValid = ::OpenAPI::fromJsonValue(m_series_names, json[QString("seriesNames")]);
    m_series_names_isSet = !json[QString("seriesNames")].isNull() && m_series_names_isValid;
}

QString OAIChart_ChartDataDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChart_ChartDataDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_category_names.size() > 0) {
        obj.insert(QString("categoryNames"), ::OpenAPI::toJsonValue(m_category_names));
    }
    if (m_chart_id_isSet) {
        obj.insert(QString("chartId"), ::OpenAPI::toJsonValue(m_chart_id));
    }
    if (m_data_points.size() > 0) {
        
        obj.insert(QString("dataPoints"), toJsonValue(m_data_points));
    }
    if (m_series_names.size() > 0) {
        obj.insert(QString("seriesNames"), ::OpenAPI::toJsonValue(m_series_names));
    }
    return obj;
}

QList<QString> OAIChart_ChartDataDTO::getCategoryNames() const {
    return m_category_names;
}
void OAIChart_ChartDataDTO::setCategoryNames(const QList<QString> &category_names) {
    m_category_names = category_names;
    m_category_names_isSet = true;
}

bool OAIChart_ChartDataDTO::is_category_names_Set() const{
    return m_category_names_isSet;
}

bool OAIChart_ChartDataDTO::is_category_names_Valid() const{
    return m_category_names_isValid;
}

QString OAIChart_ChartDataDTO::getChartId() const {
    return m_chart_id;
}
void OAIChart_ChartDataDTO::setChartId(const QString &chart_id) {
    m_chart_id = chart_id;
    m_chart_id_isSet = true;
}

bool OAIChart_ChartDataDTO::is_chart_id_Set() const{
    return m_chart_id_isSet;
}

bool OAIChart_ChartDataDTO::is_chart_id_Valid() const{
    return m_chart_id_isValid;
}

QList<QList<double>> OAIChart_ChartDataDTO::getDataPoints() const {
    return m_data_points;
}
void OAIChart_ChartDataDTO::setDataPoints(const QList<QList<double>> &data_points) {
    m_data_points = data_points;
    m_data_points_isSet = true;
}

bool OAIChart_ChartDataDTO::is_data_points_Set() const{
    return m_data_points_isSet;
}

bool OAIChart_ChartDataDTO::is_data_points_Valid() const{
    return m_data_points_isValid;
}

QList<QString> OAIChart_ChartDataDTO::getSeriesNames() const {
    return m_series_names;
}
void OAIChart_ChartDataDTO::setSeriesNames(const QList<QString> &series_names) {
    m_series_names = series_names;
    m_series_names_isSet = true;
}

bool OAIChart_ChartDataDTO::is_series_names_Set() const{
    return m_series_names_isSet;
}

bool OAIChart_ChartDataDTO::is_series_names_Valid() const{
    return m_series_names_isValid;
}

bool OAIChart_ChartDataDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_chart_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_points.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_series_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChart_ChartDataDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
