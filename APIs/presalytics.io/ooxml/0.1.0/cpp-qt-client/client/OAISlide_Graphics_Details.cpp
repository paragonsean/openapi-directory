/**
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISlide_Graphics_Details.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISlide_Graphics_Details::OAISlide_Graphics_Details(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISlide_Graphics_Details::OAISlide_Graphics_Details() {
    this->initializeModel();
}

OAISlide_Graphics_Details::~OAISlide_Graphics_Details() {}

void OAISlide_Graphics_Details::initializeModel() {

    m_chart_isSet = false;
    m_chart_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_modified_isSet = false;
    m_date_modified_isValid = false;

    m_graphic_type_id_isSet = false;
    m_graphic_type_id_isValid = false;

    m_group_element_isSet = false;
    m_group_element_isValid = false;

    m_group_elements_id_isSet = false;
    m_group_elements_id_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_ooxml_id_isSet = false;
    m_ooxml_id_isValid = false;

    m_picture_isSet = false;
    m_picture_isValid = false;

    m_smart_art_isSet = false;
    m_smart_art_isValid = false;

    m_table_isSet = false;
    m_table_isValid = false;

    m_user_created_isSet = false;
    m_user_created_isValid = false;

    m_user_modified_isSet = false;
    m_user_modified_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;

    m_x_offset_isSet = false;
    m_x_offset_isValid = false;

    m_y_offset_isSet = false;
    m_y_offset_isValid = false;
}

void OAISlide_Graphics_Details::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISlide_Graphics_Details::fromJsonObject(QJsonObject json) {

    m_chart_isValid = ::OpenAPI::fromJsonValue(m_chart, json[QString("chart")]);
    m_chart_isSet = !json[QString("chart")].isNull() && m_chart_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("dateCreated")]);
    m_date_created_isSet = !json[QString("dateCreated")].isNull() && m_date_created_isValid;

    m_date_modified_isValid = ::OpenAPI::fromJsonValue(m_date_modified, json[QString("dateModified")]);
    m_date_modified_isSet = !json[QString("dateModified")].isNull() && m_date_modified_isValid;

    m_graphic_type_id_isValid = ::OpenAPI::fromJsonValue(m_graphic_type_id, json[QString("graphicTypeId")]);
    m_graphic_type_id_isSet = !json[QString("graphicTypeId")].isNull() && m_graphic_type_id_isValid;

    m_group_element_isValid = ::OpenAPI::fromJsonValue(m_group_element, json[QString("groupElement")]);
    m_group_element_isSet = !json[QString("groupElement")].isNull() && m_group_element_isValid;

    m_group_elements_id_isValid = ::OpenAPI::fromJsonValue(m_group_elements_id, json[QString("groupElementsId")]);
    m_group_elements_id_isSet = !json[QString("groupElementsId")].isNull() && m_group_elements_id_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_ooxml_id_isValid = ::OpenAPI::fromJsonValue(m_ooxml_id, json[QString("ooxmlId")]);
    m_ooxml_id_isSet = !json[QString("ooxmlId")].isNull() && m_ooxml_id_isValid;

    m_picture_isValid = ::OpenAPI::fromJsonValue(m_picture, json[QString("picture")]);
    m_picture_isSet = !json[QString("picture")].isNull() && m_picture_isValid;

    m_smart_art_isValid = ::OpenAPI::fromJsonValue(m_smart_art, json[QString("smartArt")]);
    m_smart_art_isSet = !json[QString("smartArt")].isNull() && m_smart_art_isValid;

    m_table_isValid = ::OpenAPI::fromJsonValue(m_table, json[QString("table")]);
    m_table_isSet = !json[QString("table")].isNull() && m_table_isValid;

    m_user_created_isValid = ::OpenAPI::fromJsonValue(m_user_created, json[QString("userCreated")]);
    m_user_created_isSet = !json[QString("userCreated")].isNull() && m_user_created_isValid;

    m_user_modified_isValid = ::OpenAPI::fromJsonValue(m_user_modified, json[QString("userModified")]);
    m_user_modified_isSet = !json[QString("userModified")].isNull() && m_user_modified_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;

    m_x_offset_isValid = ::OpenAPI::fromJsonValue(m_x_offset, json[QString("xOffset")]);
    m_x_offset_isSet = !json[QString("xOffset")].isNull() && m_x_offset_isValid;

    m_y_offset_isValid = ::OpenAPI::fromJsonValue(m_y_offset, json[QString("yOffset")]);
    m_y_offset_isSet = !json[QString("yOffset")].isNull() && m_y_offset_isValid;
}

QString OAISlide_Graphics_Details::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISlide_Graphics_Details::asJsonObject() const {
    QJsonObject obj;
    if (m_chart.isSet()) {
        obj.insert(QString("chart"), ::OpenAPI::toJsonValue(m_chart));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("dateCreated"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_modified_isSet) {
        obj.insert(QString("dateModified"), ::OpenAPI::toJsonValue(m_date_modified));
    }
    if (m_graphic_type_id_isSet) {
        obj.insert(QString("graphicTypeId"), ::OpenAPI::toJsonValue(m_graphic_type_id));
    }
    if (m_group_element.isSet()) {
        obj.insert(QString("groupElement"), ::OpenAPI::toJsonValue(m_group_element));
    }
    if (m_group_elements_id_isSet) {
        obj.insert(QString("groupElementsId"), ::OpenAPI::toJsonValue(m_group_elements_id));
    }
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_ooxml_id_isSet) {
        obj.insert(QString("ooxmlId"), ::OpenAPI::toJsonValue(m_ooxml_id));
    }
    if (m_picture.isSet()) {
        obj.insert(QString("picture"), ::OpenAPI::toJsonValue(m_picture));
    }
    if (m_smart_art.isSet()) {
        obj.insert(QString("smartArt"), ::OpenAPI::toJsonValue(m_smart_art));
    }
    if (m_table.isSet()) {
        obj.insert(QString("table"), ::OpenAPI::toJsonValue(m_table));
    }
    if (m_user_created_isSet) {
        obj.insert(QString("userCreated"), ::OpenAPI::toJsonValue(m_user_created));
    }
    if (m_user_modified_isSet) {
        obj.insert(QString("userModified"), ::OpenAPI::toJsonValue(m_user_modified));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    if (m_x_offset_isSet) {
        obj.insert(QString("xOffset"), ::OpenAPI::toJsonValue(m_x_offset));
    }
    if (m_y_offset_isSet) {
        obj.insert(QString("yOffset"), ::OpenAPI::toJsonValue(m_y_offset));
    }
    return obj;
}

OAIChart_Charts_Details OAISlide_Graphics_Details::getChart() const {
    return m_chart;
}
void OAISlide_Graphics_Details::setChart(const OAIChart_Charts_Details &chart) {
    m_chart = chart;
    m_chart_isSet = true;
}

bool OAISlide_Graphics_Details::is_chart_Set() const{
    return m_chart_isSet;
}

bool OAISlide_Graphics_Details::is_chart_Valid() const{
    return m_chart_isValid;
}

QDateTime OAISlide_Graphics_Details::getDateCreated() const {
    return m_date_created;
}
void OAISlide_Graphics_Details::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAISlide_Graphics_Details::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAISlide_Graphics_Details::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAISlide_Graphics_Details::getDateModified() const {
    return m_date_modified;
}
void OAISlide_Graphics_Details::setDateModified(const QDateTime &date_modified) {
    m_date_modified = date_modified;
    m_date_modified_isSet = true;
}

bool OAISlide_Graphics_Details::is_date_modified_Set() const{
    return m_date_modified_isSet;
}

bool OAISlide_Graphics_Details::is_date_modified_Valid() const{
    return m_date_modified_isValid;
}

qint32 OAISlide_Graphics_Details::getGraphicTypeId() const {
    return m_graphic_type_id;
}
void OAISlide_Graphics_Details::setGraphicTypeId(const qint32 &graphic_type_id) {
    m_graphic_type_id = graphic_type_id;
    m_graphic_type_id_isSet = true;
}

bool OAISlide_Graphics_Details::is_graphic_type_id_Set() const{
    return m_graphic_type_id_isSet;
}

bool OAISlide_Graphics_Details::is_graphic_type_id_Valid() const{
    return m_graphic_type_id_isValid;
}

OAISlide_GroupElements_Details OAISlide_Graphics_Details::getGroupElement() const {
    return m_group_element;
}
void OAISlide_Graphics_Details::setGroupElement(const OAISlide_GroupElements_Details &group_element) {
    m_group_element = group_element;
    m_group_element_isSet = true;
}

bool OAISlide_Graphics_Details::is_group_element_Set() const{
    return m_group_element_isSet;
}

bool OAISlide_Graphics_Details::is_group_element_Valid() const{
    return m_group_element_isValid;
}

QString OAISlide_Graphics_Details::getGroupElementsId() const {
    return m_group_elements_id;
}
void OAISlide_Graphics_Details::setGroupElementsId(const QString &group_elements_id) {
    m_group_elements_id = group_elements_id;
    m_group_elements_id_isSet = true;
}

bool OAISlide_Graphics_Details::is_group_elements_id_Set() const{
    return m_group_elements_id_isSet;
}

bool OAISlide_Graphics_Details::is_group_elements_id_Valid() const{
    return m_group_elements_id_isValid;
}

qint32 OAISlide_Graphics_Details::getHeight() const {
    return m_height;
}
void OAISlide_Graphics_Details::setHeight(const qint32 &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAISlide_Graphics_Details::is_height_Set() const{
    return m_height_isSet;
}

bool OAISlide_Graphics_Details::is_height_Valid() const{
    return m_height_isValid;
}

QString OAISlide_Graphics_Details::getId() const {
    return m_id;
}
void OAISlide_Graphics_Details::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISlide_Graphics_Details::is_id_Set() const{
    return m_id_isSet;
}

bool OAISlide_Graphics_Details::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISlide_Graphics_Details::getName() const {
    return m_name;
}
void OAISlide_Graphics_Details::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISlide_Graphics_Details::is_name_Set() const{
    return m_name_isSet;
}

bool OAISlide_Graphics_Details::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAISlide_Graphics_Details::getOoxmlId() const {
    return m_ooxml_id;
}
void OAISlide_Graphics_Details::setOoxmlId(const qint32 &ooxml_id) {
    m_ooxml_id = ooxml_id;
    m_ooxml_id_isSet = true;
}

bool OAISlide_Graphics_Details::is_ooxml_id_Set() const{
    return m_ooxml_id_isSet;
}

bool OAISlide_Graphics_Details::is_ooxml_id_Valid() const{
    return m_ooxml_id_isValid;
}

OAIShared_Pictures_Details OAISlide_Graphics_Details::getPicture() const {
    return m_picture;
}
void OAISlide_Graphics_Details::setPicture(const OAIShared_Pictures_Details &picture) {
    m_picture = picture;
    m_picture_isSet = true;
}

bool OAISlide_Graphics_Details::is_picture_Set() const{
    return m_picture_isSet;
}

bool OAISlide_Graphics_Details::is_picture_Valid() const{
    return m_picture_isValid;
}

OAISlide_SmartArts_Details OAISlide_Graphics_Details::getSmartArt() const {
    return m_smart_art;
}
void OAISlide_Graphics_Details::setSmartArt(const OAISlide_SmartArts_Details &smart_art) {
    m_smart_art = smart_art;
    m_smart_art_isSet = true;
}

bool OAISlide_Graphics_Details::is_smart_art_Set() const{
    return m_smart_art_isSet;
}

bool OAISlide_Graphics_Details::is_smart_art_Valid() const{
    return m_smart_art_isValid;
}

OAITable_Tables_Details OAISlide_Graphics_Details::getTable() const {
    return m_table;
}
void OAISlide_Graphics_Details::setTable(const OAITable_Tables_Details &table) {
    m_table = table;
    m_table_isSet = true;
}

bool OAISlide_Graphics_Details::is_table_Set() const{
    return m_table_isSet;
}

bool OAISlide_Graphics_Details::is_table_Valid() const{
    return m_table_isValid;
}

QString OAISlide_Graphics_Details::getUserCreated() const {
    return m_user_created;
}
void OAISlide_Graphics_Details::setUserCreated(const QString &user_created) {
    m_user_created = user_created;
    m_user_created_isSet = true;
}

bool OAISlide_Graphics_Details::is_user_created_Set() const{
    return m_user_created_isSet;
}

bool OAISlide_Graphics_Details::is_user_created_Valid() const{
    return m_user_created_isValid;
}

QString OAISlide_Graphics_Details::getUserModified() const {
    return m_user_modified;
}
void OAISlide_Graphics_Details::setUserModified(const QString &user_modified) {
    m_user_modified = user_modified;
    m_user_modified_isSet = true;
}

bool OAISlide_Graphics_Details::is_user_modified_Set() const{
    return m_user_modified_isSet;
}

bool OAISlide_Graphics_Details::is_user_modified_Valid() const{
    return m_user_modified_isValid;
}

qint32 OAISlide_Graphics_Details::getWidth() const {
    return m_width;
}
void OAISlide_Graphics_Details::setWidth(const qint32 &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAISlide_Graphics_Details::is_width_Set() const{
    return m_width_isSet;
}

bool OAISlide_Graphics_Details::is_width_Valid() const{
    return m_width_isValid;
}

qint32 OAISlide_Graphics_Details::getXOffset() const {
    return m_x_offset;
}
void OAISlide_Graphics_Details::setXOffset(const qint32 &x_offset) {
    m_x_offset = x_offset;
    m_x_offset_isSet = true;
}

bool OAISlide_Graphics_Details::is_x_offset_Set() const{
    return m_x_offset_isSet;
}

bool OAISlide_Graphics_Details::is_x_offset_Valid() const{
    return m_x_offset_isValid;
}

qint32 OAISlide_Graphics_Details::getYOffset() const {
    return m_y_offset;
}
void OAISlide_Graphics_Details::setYOffset(const qint32 &y_offset) {
    m_y_offset = y_offset;
    m_y_offset_isSet = true;
}

bool OAISlide_Graphics_Details::is_y_offset_Set() const{
    return m_y_offset_isSet;
}

bool OAISlide_Graphics_Details::is_y_offset_Valid() const{
    return m_y_offset_isValid;
}

bool OAISlide_Graphics_Details::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_chart.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_graphic_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_element.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_elements_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ooxml_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_picture.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_smart_art.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_table.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_x_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_y_offset_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISlide_Graphics_Details::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
