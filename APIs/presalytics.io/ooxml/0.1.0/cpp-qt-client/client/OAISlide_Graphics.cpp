/**
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISlide_Graphics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISlide_Graphics::OAISlide_Graphics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISlide_Graphics::OAISlide_Graphics() {
    this->initializeModel();
}

OAISlide_Graphics::~OAISlide_Graphics() {}

void OAISlide_Graphics::initializeModel() {

    m_graphic_type_id_isSet = false;
    m_graphic_type_id_isValid = false;

    m_group_elements_id_isSet = false;
    m_group_elements_id_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_ooxml_id_isSet = false;
    m_ooxml_id_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;

    m_x_offset_isSet = false;
    m_x_offset_isValid = false;

    m_y_offset_isSet = false;
    m_y_offset_isValid = false;
}

void OAISlide_Graphics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISlide_Graphics::fromJsonObject(QJsonObject json) {

    m_graphic_type_id_isValid = ::OpenAPI::fromJsonValue(m_graphic_type_id, json[QString("graphicTypeId")]);
    m_graphic_type_id_isSet = !json[QString("graphicTypeId")].isNull() && m_graphic_type_id_isValid;

    m_group_elements_id_isValid = ::OpenAPI::fromJsonValue(m_group_elements_id, json[QString("groupElementsId")]);
    m_group_elements_id_isSet = !json[QString("groupElementsId")].isNull() && m_group_elements_id_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_ooxml_id_isValid = ::OpenAPI::fromJsonValue(m_ooxml_id, json[QString("ooxmlId")]);
    m_ooxml_id_isSet = !json[QString("ooxmlId")].isNull() && m_ooxml_id_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;

    m_x_offset_isValid = ::OpenAPI::fromJsonValue(m_x_offset, json[QString("xOffset")]);
    m_x_offset_isSet = !json[QString("xOffset")].isNull() && m_x_offset_isValid;

    m_y_offset_isValid = ::OpenAPI::fromJsonValue(m_y_offset, json[QString("yOffset")]);
    m_y_offset_isSet = !json[QString("yOffset")].isNull() && m_y_offset_isValid;
}

QString OAISlide_Graphics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISlide_Graphics::asJsonObject() const {
    QJsonObject obj;
    if (m_graphic_type_id_isSet) {
        obj.insert(QString("graphicTypeId"), ::OpenAPI::toJsonValue(m_graphic_type_id));
    }
    if (m_group_elements_id_isSet) {
        obj.insert(QString("groupElementsId"), ::OpenAPI::toJsonValue(m_group_elements_id));
    }
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_ooxml_id_isSet) {
        obj.insert(QString("ooxmlId"), ::OpenAPI::toJsonValue(m_ooxml_id));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    if (m_x_offset_isSet) {
        obj.insert(QString("xOffset"), ::OpenAPI::toJsonValue(m_x_offset));
    }
    if (m_y_offset_isSet) {
        obj.insert(QString("yOffset"), ::OpenAPI::toJsonValue(m_y_offset));
    }
    return obj;
}

qint32 OAISlide_Graphics::getGraphicTypeId() const {
    return m_graphic_type_id;
}
void OAISlide_Graphics::setGraphicTypeId(const qint32 &graphic_type_id) {
    m_graphic_type_id = graphic_type_id;
    m_graphic_type_id_isSet = true;
}

bool OAISlide_Graphics::is_graphic_type_id_Set() const{
    return m_graphic_type_id_isSet;
}

bool OAISlide_Graphics::is_graphic_type_id_Valid() const{
    return m_graphic_type_id_isValid;
}

QString OAISlide_Graphics::getGroupElementsId() const {
    return m_group_elements_id;
}
void OAISlide_Graphics::setGroupElementsId(const QString &group_elements_id) {
    m_group_elements_id = group_elements_id;
    m_group_elements_id_isSet = true;
}

bool OAISlide_Graphics::is_group_elements_id_Set() const{
    return m_group_elements_id_isSet;
}

bool OAISlide_Graphics::is_group_elements_id_Valid() const{
    return m_group_elements_id_isValid;
}

qint32 OAISlide_Graphics::getHeight() const {
    return m_height;
}
void OAISlide_Graphics::setHeight(const qint32 &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAISlide_Graphics::is_height_Set() const{
    return m_height_isSet;
}

bool OAISlide_Graphics::is_height_Valid() const{
    return m_height_isValid;
}

QString OAISlide_Graphics::getId() const {
    return m_id;
}
void OAISlide_Graphics::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISlide_Graphics::is_id_Set() const{
    return m_id_isSet;
}

bool OAISlide_Graphics::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISlide_Graphics::getName() const {
    return m_name;
}
void OAISlide_Graphics::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISlide_Graphics::is_name_Set() const{
    return m_name_isSet;
}

bool OAISlide_Graphics::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAISlide_Graphics::getOoxmlId() const {
    return m_ooxml_id;
}
void OAISlide_Graphics::setOoxmlId(const qint32 &ooxml_id) {
    m_ooxml_id = ooxml_id;
    m_ooxml_id_isSet = true;
}

bool OAISlide_Graphics::is_ooxml_id_Set() const{
    return m_ooxml_id_isSet;
}

bool OAISlide_Graphics::is_ooxml_id_Valid() const{
    return m_ooxml_id_isValid;
}

qint32 OAISlide_Graphics::getWidth() const {
    return m_width;
}
void OAISlide_Graphics::setWidth(const qint32 &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAISlide_Graphics::is_width_Set() const{
    return m_width_isSet;
}

bool OAISlide_Graphics::is_width_Valid() const{
    return m_width_isValid;
}

qint32 OAISlide_Graphics::getXOffset() const {
    return m_x_offset;
}
void OAISlide_Graphics::setXOffset(const qint32 &x_offset) {
    m_x_offset = x_offset;
    m_x_offset_isSet = true;
}

bool OAISlide_Graphics::is_x_offset_Set() const{
    return m_x_offset_isSet;
}

bool OAISlide_Graphics::is_x_offset_Valid() const{
    return m_x_offset_isValid;
}

qint32 OAISlide_Graphics::getYOffset() const {
    return m_y_offset;
}
void OAISlide_Graphics::setYOffset(const qint32 &y_offset) {
    m_y_offset = y_offset;
    m_y_offset_isSet = true;
}

bool OAISlide_Graphics::is_y_offset_Set() const{
    return m_y_offset_isSet;
}

bool OAISlide_Graphics::is_y_offset_Valid() const{
    return m_y_offset_isValid;
}

bool OAISlide_Graphics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_graphic_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_elements_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ooxml_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_x_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_y_offset_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISlide_Graphics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
