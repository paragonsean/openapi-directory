/**
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShared_Lines.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShared_Lines::OAIShared_Lines(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShared_Lines::OAIShared_Lines() {
    this->initializeModel();
}

OAIShared_Lines::~OAIShared_Lines() {}

void OAIShared_Lines::initializeModel() {

    m_b_lto_tr_border_id_isSet = false;
    m_b_lto_tr_border_id_isValid = false;

    m_bottom_border_id_isSet = false;
    m_bottom_border_id_isValid = false;

    m_connector_id_isSet = false;
    m_connector_id_isValid = false;

    m_dash_type_id_isSet = false;
    m_dash_type_id_isValid = false;

    m_head_end_height_id_isSet = false;
    m_head_end_height_id_isValid = false;

    m_head_end_type_id_isSet = false;
    m_head_end_type_id_isValid = false;

    m_head_end_width_id_isSet = false;
    m_head_end_width_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_left_border_id_isSet = false;
    m_left_border_id_isValid = false;

    m_line_map_id_isSet = false;
    m_line_map_id_isValid = false;

    m_right_border_id_isSet = false;
    m_right_border_id_isValid = false;

    m_shape_id_isSet = false;
    m_shape_id_isValid = false;

    m_t_lto_br_border_id_isSet = false;
    m_t_lto_br_border_id_isValid = false;

    m_tail_end_height_id_isSet = false;
    m_tail_end_height_id_isValid = false;

    m_tail_end_type_id_isSet = false;
    m_tail_end_type_id_isValid = false;

    m_tail_end_width_id_isSet = false;
    m_tail_end_width_id_isValid = false;

    m_top_border_id_isSet = false;
    m_top_border_id_isValid = false;

    m_weight_isSet = false;
    m_weight_isValid = false;
}

void OAIShared_Lines::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShared_Lines::fromJsonObject(QJsonObject json) {

    m_b_lto_tr_border_id_isValid = ::OpenAPI::fromJsonValue(m_b_lto_tr_border_id, json[QString("bLtoTRBorderId")]);
    m_b_lto_tr_border_id_isSet = !json[QString("bLtoTRBorderId")].isNull() && m_b_lto_tr_border_id_isValid;

    m_bottom_border_id_isValid = ::OpenAPI::fromJsonValue(m_bottom_border_id, json[QString("bottomBorderId")]);
    m_bottom_border_id_isSet = !json[QString("bottomBorderId")].isNull() && m_bottom_border_id_isValid;

    m_connector_id_isValid = ::OpenAPI::fromJsonValue(m_connector_id, json[QString("connectorId")]);
    m_connector_id_isSet = !json[QString("connectorId")].isNull() && m_connector_id_isValid;

    m_dash_type_id_isValid = ::OpenAPI::fromJsonValue(m_dash_type_id, json[QString("dashTypeId")]);
    m_dash_type_id_isSet = !json[QString("dashTypeId")].isNull() && m_dash_type_id_isValid;

    m_head_end_height_id_isValid = ::OpenAPI::fromJsonValue(m_head_end_height_id, json[QString("headEndHeightId")]);
    m_head_end_height_id_isSet = !json[QString("headEndHeightId")].isNull() && m_head_end_height_id_isValid;

    m_head_end_type_id_isValid = ::OpenAPI::fromJsonValue(m_head_end_type_id, json[QString("headEndTypeId")]);
    m_head_end_type_id_isSet = !json[QString("headEndTypeId")].isNull() && m_head_end_type_id_isValid;

    m_head_end_width_id_isValid = ::OpenAPI::fromJsonValue(m_head_end_width_id, json[QString("headEndWidthId")]);
    m_head_end_width_id_isSet = !json[QString("headEndWidthId")].isNull() && m_head_end_width_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_left_border_id_isValid = ::OpenAPI::fromJsonValue(m_left_border_id, json[QString("leftBorderId")]);
    m_left_border_id_isSet = !json[QString("leftBorderId")].isNull() && m_left_border_id_isValid;

    m_line_map_id_isValid = ::OpenAPI::fromJsonValue(m_line_map_id, json[QString("lineMapId")]);
    m_line_map_id_isSet = !json[QString("lineMapId")].isNull() && m_line_map_id_isValid;

    m_right_border_id_isValid = ::OpenAPI::fromJsonValue(m_right_border_id, json[QString("rightBorderId")]);
    m_right_border_id_isSet = !json[QString("rightBorderId")].isNull() && m_right_border_id_isValid;

    m_shape_id_isValid = ::OpenAPI::fromJsonValue(m_shape_id, json[QString("shapeId")]);
    m_shape_id_isSet = !json[QString("shapeId")].isNull() && m_shape_id_isValid;

    m_t_lto_br_border_id_isValid = ::OpenAPI::fromJsonValue(m_t_lto_br_border_id, json[QString("tLtoBRBorderId")]);
    m_t_lto_br_border_id_isSet = !json[QString("tLtoBRBorderId")].isNull() && m_t_lto_br_border_id_isValid;

    m_tail_end_height_id_isValid = ::OpenAPI::fromJsonValue(m_tail_end_height_id, json[QString("tailEndHeightId")]);
    m_tail_end_height_id_isSet = !json[QString("tailEndHeightId")].isNull() && m_tail_end_height_id_isValid;

    m_tail_end_type_id_isValid = ::OpenAPI::fromJsonValue(m_tail_end_type_id, json[QString("tailEndTypeId")]);
    m_tail_end_type_id_isSet = !json[QString("tailEndTypeId")].isNull() && m_tail_end_type_id_isValid;

    m_tail_end_width_id_isValid = ::OpenAPI::fromJsonValue(m_tail_end_width_id, json[QString("tailEndWidthId")]);
    m_tail_end_width_id_isSet = !json[QString("tailEndWidthId")].isNull() && m_tail_end_width_id_isValid;

    m_top_border_id_isValid = ::OpenAPI::fromJsonValue(m_top_border_id, json[QString("topBorderId")]);
    m_top_border_id_isSet = !json[QString("topBorderId")].isNull() && m_top_border_id_isValid;

    m_weight_isValid = ::OpenAPI::fromJsonValue(m_weight, json[QString("weight")]);
    m_weight_isSet = !json[QString("weight")].isNull() && m_weight_isValid;
}

QString OAIShared_Lines::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShared_Lines::asJsonObject() const {
    QJsonObject obj;
    if (m_b_lto_tr_border_id_isSet) {
        obj.insert(QString("bLtoTRBorderId"), ::OpenAPI::toJsonValue(m_b_lto_tr_border_id));
    }
    if (m_bottom_border_id_isSet) {
        obj.insert(QString("bottomBorderId"), ::OpenAPI::toJsonValue(m_bottom_border_id));
    }
    if (m_connector_id_isSet) {
        obj.insert(QString("connectorId"), ::OpenAPI::toJsonValue(m_connector_id));
    }
    if (m_dash_type_id_isSet) {
        obj.insert(QString("dashTypeId"), ::OpenAPI::toJsonValue(m_dash_type_id));
    }
    if (m_head_end_height_id_isSet) {
        obj.insert(QString("headEndHeightId"), ::OpenAPI::toJsonValue(m_head_end_height_id));
    }
    if (m_head_end_type_id_isSet) {
        obj.insert(QString("headEndTypeId"), ::OpenAPI::toJsonValue(m_head_end_type_id));
    }
    if (m_head_end_width_id_isSet) {
        obj.insert(QString("headEndWidthId"), ::OpenAPI::toJsonValue(m_head_end_width_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_left_border_id_isSet) {
        obj.insert(QString("leftBorderId"), ::OpenAPI::toJsonValue(m_left_border_id));
    }
    if (m_line_map_id_isSet) {
        obj.insert(QString("lineMapId"), ::OpenAPI::toJsonValue(m_line_map_id));
    }
    if (m_right_border_id_isSet) {
        obj.insert(QString("rightBorderId"), ::OpenAPI::toJsonValue(m_right_border_id));
    }
    if (m_shape_id_isSet) {
        obj.insert(QString("shapeId"), ::OpenAPI::toJsonValue(m_shape_id));
    }
    if (m_t_lto_br_border_id_isSet) {
        obj.insert(QString("tLtoBRBorderId"), ::OpenAPI::toJsonValue(m_t_lto_br_border_id));
    }
    if (m_tail_end_height_id_isSet) {
        obj.insert(QString("tailEndHeightId"), ::OpenAPI::toJsonValue(m_tail_end_height_id));
    }
    if (m_tail_end_type_id_isSet) {
        obj.insert(QString("tailEndTypeId"), ::OpenAPI::toJsonValue(m_tail_end_type_id));
    }
    if (m_tail_end_width_id_isSet) {
        obj.insert(QString("tailEndWidthId"), ::OpenAPI::toJsonValue(m_tail_end_width_id));
    }
    if (m_top_border_id_isSet) {
        obj.insert(QString("topBorderId"), ::OpenAPI::toJsonValue(m_top_border_id));
    }
    if (m_weight_isSet) {
        obj.insert(QString("weight"), ::OpenAPI::toJsonValue(m_weight));
    }
    return obj;
}

QString OAIShared_Lines::getBLtoTrBorderId() const {
    return m_b_lto_tr_border_id;
}
void OAIShared_Lines::setBLtoTrBorderId(const QString &b_lto_tr_border_id) {
    m_b_lto_tr_border_id = b_lto_tr_border_id;
    m_b_lto_tr_border_id_isSet = true;
}

bool OAIShared_Lines::is_b_lto_tr_border_id_Set() const{
    return m_b_lto_tr_border_id_isSet;
}

bool OAIShared_Lines::is_b_lto_tr_border_id_Valid() const{
    return m_b_lto_tr_border_id_isValid;
}

QString OAIShared_Lines::getBottomBorderId() const {
    return m_bottom_border_id;
}
void OAIShared_Lines::setBottomBorderId(const QString &bottom_border_id) {
    m_bottom_border_id = bottom_border_id;
    m_bottom_border_id_isSet = true;
}

bool OAIShared_Lines::is_bottom_border_id_Set() const{
    return m_bottom_border_id_isSet;
}

bool OAIShared_Lines::is_bottom_border_id_Valid() const{
    return m_bottom_border_id_isValid;
}

QString OAIShared_Lines::getConnectorId() const {
    return m_connector_id;
}
void OAIShared_Lines::setConnectorId(const QString &connector_id) {
    m_connector_id = connector_id;
    m_connector_id_isSet = true;
}

bool OAIShared_Lines::is_connector_id_Set() const{
    return m_connector_id_isSet;
}

bool OAIShared_Lines::is_connector_id_Valid() const{
    return m_connector_id_isValid;
}

qint32 OAIShared_Lines::getDashTypeId() const {
    return m_dash_type_id;
}
void OAIShared_Lines::setDashTypeId(const qint32 &dash_type_id) {
    m_dash_type_id = dash_type_id;
    m_dash_type_id_isSet = true;
}

bool OAIShared_Lines::is_dash_type_id_Set() const{
    return m_dash_type_id_isSet;
}

bool OAIShared_Lines::is_dash_type_id_Valid() const{
    return m_dash_type_id_isValid;
}

qint32 OAIShared_Lines::getHeadEndHeightId() const {
    return m_head_end_height_id;
}
void OAIShared_Lines::setHeadEndHeightId(const qint32 &head_end_height_id) {
    m_head_end_height_id = head_end_height_id;
    m_head_end_height_id_isSet = true;
}

bool OAIShared_Lines::is_head_end_height_id_Set() const{
    return m_head_end_height_id_isSet;
}

bool OAIShared_Lines::is_head_end_height_id_Valid() const{
    return m_head_end_height_id_isValid;
}

qint32 OAIShared_Lines::getHeadEndTypeId() const {
    return m_head_end_type_id;
}
void OAIShared_Lines::setHeadEndTypeId(const qint32 &head_end_type_id) {
    m_head_end_type_id = head_end_type_id;
    m_head_end_type_id_isSet = true;
}

bool OAIShared_Lines::is_head_end_type_id_Set() const{
    return m_head_end_type_id_isSet;
}

bool OAIShared_Lines::is_head_end_type_id_Valid() const{
    return m_head_end_type_id_isValid;
}

qint32 OAIShared_Lines::getHeadEndWidthId() const {
    return m_head_end_width_id;
}
void OAIShared_Lines::setHeadEndWidthId(const qint32 &head_end_width_id) {
    m_head_end_width_id = head_end_width_id;
    m_head_end_width_id_isSet = true;
}

bool OAIShared_Lines::is_head_end_width_id_Set() const{
    return m_head_end_width_id_isSet;
}

bool OAIShared_Lines::is_head_end_width_id_Valid() const{
    return m_head_end_width_id_isValid;
}

QString OAIShared_Lines::getId() const {
    return m_id;
}
void OAIShared_Lines::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIShared_Lines::is_id_Set() const{
    return m_id_isSet;
}

bool OAIShared_Lines::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIShared_Lines::getLeftBorderId() const {
    return m_left_border_id;
}
void OAIShared_Lines::setLeftBorderId(const QString &left_border_id) {
    m_left_border_id = left_border_id;
    m_left_border_id_isSet = true;
}

bool OAIShared_Lines::is_left_border_id_Set() const{
    return m_left_border_id_isSet;
}

bool OAIShared_Lines::is_left_border_id_Valid() const{
    return m_left_border_id_isValid;
}

QString OAIShared_Lines::getLineMapId() const {
    return m_line_map_id;
}
void OAIShared_Lines::setLineMapId(const QString &line_map_id) {
    m_line_map_id = line_map_id;
    m_line_map_id_isSet = true;
}

bool OAIShared_Lines::is_line_map_id_Set() const{
    return m_line_map_id_isSet;
}

bool OAIShared_Lines::is_line_map_id_Valid() const{
    return m_line_map_id_isValid;
}

QString OAIShared_Lines::getRightBorderId() const {
    return m_right_border_id;
}
void OAIShared_Lines::setRightBorderId(const QString &right_border_id) {
    m_right_border_id = right_border_id;
    m_right_border_id_isSet = true;
}

bool OAIShared_Lines::is_right_border_id_Set() const{
    return m_right_border_id_isSet;
}

bool OAIShared_Lines::is_right_border_id_Valid() const{
    return m_right_border_id_isValid;
}

QString OAIShared_Lines::getShapeId() const {
    return m_shape_id;
}
void OAIShared_Lines::setShapeId(const QString &shape_id) {
    m_shape_id = shape_id;
    m_shape_id_isSet = true;
}

bool OAIShared_Lines::is_shape_id_Set() const{
    return m_shape_id_isSet;
}

bool OAIShared_Lines::is_shape_id_Valid() const{
    return m_shape_id_isValid;
}

QString OAIShared_Lines::getTLtoBrBorderId() const {
    return m_t_lto_br_border_id;
}
void OAIShared_Lines::setTLtoBrBorderId(const QString &t_lto_br_border_id) {
    m_t_lto_br_border_id = t_lto_br_border_id;
    m_t_lto_br_border_id_isSet = true;
}

bool OAIShared_Lines::is_t_lto_br_border_id_Set() const{
    return m_t_lto_br_border_id_isSet;
}

bool OAIShared_Lines::is_t_lto_br_border_id_Valid() const{
    return m_t_lto_br_border_id_isValid;
}

qint32 OAIShared_Lines::getTailEndHeightId() const {
    return m_tail_end_height_id;
}
void OAIShared_Lines::setTailEndHeightId(const qint32 &tail_end_height_id) {
    m_tail_end_height_id = tail_end_height_id;
    m_tail_end_height_id_isSet = true;
}

bool OAIShared_Lines::is_tail_end_height_id_Set() const{
    return m_tail_end_height_id_isSet;
}

bool OAIShared_Lines::is_tail_end_height_id_Valid() const{
    return m_tail_end_height_id_isValid;
}

qint32 OAIShared_Lines::getTailEndTypeId() const {
    return m_tail_end_type_id;
}
void OAIShared_Lines::setTailEndTypeId(const qint32 &tail_end_type_id) {
    m_tail_end_type_id = tail_end_type_id;
    m_tail_end_type_id_isSet = true;
}

bool OAIShared_Lines::is_tail_end_type_id_Set() const{
    return m_tail_end_type_id_isSet;
}

bool OAIShared_Lines::is_tail_end_type_id_Valid() const{
    return m_tail_end_type_id_isValid;
}

qint32 OAIShared_Lines::getTailEndWidthId() const {
    return m_tail_end_width_id;
}
void OAIShared_Lines::setTailEndWidthId(const qint32 &tail_end_width_id) {
    m_tail_end_width_id = tail_end_width_id;
    m_tail_end_width_id_isSet = true;
}

bool OAIShared_Lines::is_tail_end_width_id_Set() const{
    return m_tail_end_width_id_isSet;
}

bool OAIShared_Lines::is_tail_end_width_id_Valid() const{
    return m_tail_end_width_id_isValid;
}

QString OAIShared_Lines::getTopBorderId() const {
    return m_top_border_id;
}
void OAIShared_Lines::setTopBorderId(const QString &top_border_id) {
    m_top_border_id = top_border_id;
    m_top_border_id_isSet = true;
}

bool OAIShared_Lines::is_top_border_id_Set() const{
    return m_top_border_id_isSet;
}

bool OAIShared_Lines::is_top_border_id_Valid() const{
    return m_top_border_id_isValid;
}

qint32 OAIShared_Lines::getWeight() const {
    return m_weight;
}
void OAIShared_Lines::setWeight(const qint32 &weight) {
    m_weight = weight;
    m_weight_isSet = true;
}

bool OAIShared_Lines::is_weight_Set() const{
    return m_weight_isSet;
}

bool OAIShared_Lines::is_weight_Valid() const{
    return m_weight_isValid;
}

bool OAIShared_Lines::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_b_lto_tr_border_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bottom_border_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connector_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dash_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_head_end_height_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_head_end_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_head_end_width_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_left_border_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_map_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_right_border_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shape_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_t_lto_br_border_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tail_end_height_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tail_end_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tail_end_width_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_top_border_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShared_Lines::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
