/**
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIChartsApi_H
#define OAI_OAIChartsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIChart_ChartDataDTO.h"
#include "OAIChart_Charts.h"
#include "OAIChart_Charts_Details.h"
#include "OAIChildObjects.h"
#include "OAIHttpFileElement.h"
#include "OAIOoxmlDTO.h"
#include "OAIProblemDetails.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIChartsApi : public QObject {
    Q_OBJECT

public:
    OAIChartsApi(const int timeOut = 0);
    ~OAIChartsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    */
    virtual void chartsChartsChartupdateGetId(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_chart_chart_data_dto OAIChart_ChartDataDTO [optional]
    */
    virtual void chartsChartsChartupdatePutId(const QString &id, const ::OpenAPI::OptionalParam<OAIChart_ChartDataDTO> &oai_chart_chart_data_dto = ::OpenAPI::OptionalParam<OAIChart_ChartDataDTO>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void chartsChartsChildobjectsGetId(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void chartsChartsDetailsGetId(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void chartsChartsGetId(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  updated bool [optional]
    */
    virtual void chartsChartsOpenofficexmlGetIdUpdated(const QString &id, const ::OpenAPI::OptionalParam<bool> &updated = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_ooxml_dto OAIOoxmlDTO [optional]
    */
    virtual void chartsChartsOpenofficexmlPutId(const QString &id, const ::OpenAPI::OptionalParam<OAIOoxmlDTO> &oai_ooxml_dto = ::OpenAPI::OptionalParam<OAIOoxmlDTO>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  use_cache bool [optional]
    */
    virtual void chartsChartsSvgGetIdUseCache(const QString &id, const ::OpenAPI::OptionalParam<bool> &use_cache = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void chartsChartsChartupdateGetIdCallback(OAIHttpRequestWorker *worker);
    void chartsChartsChartupdatePutIdCallback(OAIHttpRequestWorker *worker);
    void chartsChartsChildobjectsGetIdCallback(OAIHttpRequestWorker *worker);
    void chartsChartsDetailsGetIdCallback(OAIHttpRequestWorker *worker);
    void chartsChartsGetIdCallback(OAIHttpRequestWorker *worker);
    void chartsChartsOpenofficexmlGetIdUpdatedCallback(OAIHttpRequestWorker *worker);
    void chartsChartsOpenofficexmlPutIdCallback(OAIHttpRequestWorker *worker);
    void chartsChartsSvgGetIdUseCacheCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void chartsChartsChartupdateGetIdSignal(OAIChart_ChartDataDTO summary);
    void chartsChartsChartupdatePutIdSignal();
    void chartsChartsChildobjectsGetIdSignal(QList<OAIChildObjects> summary);
    void chartsChartsDetailsGetIdSignal(OAIChart_Charts_Details summary);
    void chartsChartsGetIdSignal(OAIChart_Charts summary);
    void chartsChartsOpenofficexmlGetIdUpdatedSignal(OAIOoxmlDTO summary);
    void chartsChartsOpenofficexmlPutIdSignal();
    void chartsChartsSvgGetIdUseCacheSignal(OAIHttpFileElement summary);


    void chartsChartsChartupdateGetIdSignalFull(OAIHttpRequestWorker *worker, OAIChart_ChartDataDTO summary);
    void chartsChartsChartupdatePutIdSignalFull(OAIHttpRequestWorker *worker);
    void chartsChartsChildobjectsGetIdSignalFull(OAIHttpRequestWorker *worker, QList<OAIChildObjects> summary);
    void chartsChartsDetailsGetIdSignalFull(OAIHttpRequestWorker *worker, OAIChart_Charts_Details summary);
    void chartsChartsGetIdSignalFull(OAIHttpRequestWorker *worker, OAIChart_Charts summary);
    void chartsChartsOpenofficexmlGetIdUpdatedSignalFull(OAIHttpRequestWorker *worker, OAIOoxmlDTO summary);
    void chartsChartsOpenofficexmlPutIdSignalFull(OAIHttpRequestWorker *worker);
    void chartsChartsSvgGetIdUseCacheSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);

    Q_DECL_DEPRECATED_X("Use chartsChartsChartupdateGetIdSignalError() instead")
    void chartsChartsChartupdateGetIdSignalE(OAIChart_ChartDataDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void chartsChartsChartupdateGetIdSignalError(OAIChart_ChartDataDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chartsChartsChartupdatePutIdSignalError() instead")
    void chartsChartsChartupdatePutIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void chartsChartsChartupdatePutIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chartsChartsChildobjectsGetIdSignalError() instead")
    void chartsChartsChildobjectsGetIdSignalE(QList<OAIChildObjects> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void chartsChartsChildobjectsGetIdSignalError(QList<OAIChildObjects> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chartsChartsDetailsGetIdSignalError() instead")
    void chartsChartsDetailsGetIdSignalE(OAIChart_Charts_Details summary, QNetworkReply::NetworkError error_type, QString error_str);
    void chartsChartsDetailsGetIdSignalError(OAIChart_Charts_Details summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chartsChartsGetIdSignalError() instead")
    void chartsChartsGetIdSignalE(OAIChart_Charts summary, QNetworkReply::NetworkError error_type, QString error_str);
    void chartsChartsGetIdSignalError(OAIChart_Charts summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chartsChartsOpenofficexmlGetIdUpdatedSignalError() instead")
    void chartsChartsOpenofficexmlGetIdUpdatedSignalE(OAIOoxmlDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void chartsChartsOpenofficexmlGetIdUpdatedSignalError(OAIOoxmlDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chartsChartsOpenofficexmlPutIdSignalError() instead")
    void chartsChartsOpenofficexmlPutIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void chartsChartsOpenofficexmlPutIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chartsChartsSvgGetIdUseCacheSignalError() instead")
    void chartsChartsSvgGetIdUseCacheSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void chartsChartsSvgGetIdUseCacheSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use chartsChartsChartupdateGetIdSignalErrorFull() instead")
    void chartsChartsChartupdateGetIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chartsChartsChartupdateGetIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chartsChartsChartupdatePutIdSignalErrorFull() instead")
    void chartsChartsChartupdatePutIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chartsChartsChartupdatePutIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chartsChartsChildobjectsGetIdSignalErrorFull() instead")
    void chartsChartsChildobjectsGetIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chartsChartsChildobjectsGetIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chartsChartsDetailsGetIdSignalErrorFull() instead")
    void chartsChartsDetailsGetIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chartsChartsDetailsGetIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chartsChartsGetIdSignalErrorFull() instead")
    void chartsChartsGetIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chartsChartsGetIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chartsChartsOpenofficexmlGetIdUpdatedSignalErrorFull() instead")
    void chartsChartsOpenofficexmlGetIdUpdatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chartsChartsOpenofficexmlGetIdUpdatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chartsChartsOpenofficexmlPutIdSignalErrorFull() instead")
    void chartsChartsOpenofficexmlPutIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chartsChartsOpenofficexmlPutIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chartsChartsSvgGetIdUseCacheSignalErrorFull() instead")
    void chartsChartsSvgGetIdUseCacheSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chartsChartsSvgGetIdUseCacheSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
