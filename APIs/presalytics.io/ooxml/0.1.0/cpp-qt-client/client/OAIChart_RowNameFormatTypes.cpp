/**
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChart_RowNameFormatTypes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChart_RowNameFormatTypes::OAIChart_RowNameFormatTypes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChart_RowNameFormatTypes::OAIChart_RowNameFormatTypes() {
    this->initializeModel();
}

OAIChart_RowNameFormatTypes::~OAIChart_RowNameFormatTypes() {}

void OAIChart_RowNameFormatTypes::initializeModel() {

    m_format_code_isSet = false;
    m_format_code_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_power_tools_id_isSet = false;
    m_power_tools_id_isValid = false;

    m_type_id_isSet = false;
    m_type_id_isValid = false;
}

void OAIChart_RowNameFormatTypes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChart_RowNameFormatTypes::fromJsonObject(QJsonObject json) {

    m_format_code_isValid = ::OpenAPI::fromJsonValue(m_format_code, json[QString("formatCode")]);
    m_format_code_isSet = !json[QString("formatCode")].isNull() && m_format_code_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_power_tools_id_isValid = ::OpenAPI::fromJsonValue(m_power_tools_id, json[QString("powerToolsId")]);
    m_power_tools_id_isSet = !json[QString("powerToolsId")].isNull() && m_power_tools_id_isValid;

    m_type_id_isValid = ::OpenAPI::fromJsonValue(m_type_id, json[QString("typeId")]);
    m_type_id_isSet = !json[QString("typeId")].isNull() && m_type_id_isValid;
}

QString OAIChart_RowNameFormatTypes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChart_RowNameFormatTypes::asJsonObject() const {
    QJsonObject obj;
    if (m_format_code_isSet) {
        obj.insert(QString("formatCode"), ::OpenAPI::toJsonValue(m_format_code));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_power_tools_id_isSet) {
        obj.insert(QString("powerToolsId"), ::OpenAPI::toJsonValue(m_power_tools_id));
    }
    if (m_type_id_isSet) {
        obj.insert(QString("typeId"), ::OpenAPI::toJsonValue(m_type_id));
    }
    return obj;
}

QString OAIChart_RowNameFormatTypes::getFormatCode() const {
    return m_format_code;
}
void OAIChart_RowNameFormatTypes::setFormatCode(const QString &format_code) {
    m_format_code = format_code;
    m_format_code_isSet = true;
}

bool OAIChart_RowNameFormatTypes::is_format_code_Set() const{
    return m_format_code_isSet;
}

bool OAIChart_RowNameFormatTypes::is_format_code_Valid() const{
    return m_format_code_isValid;
}

QString OAIChart_RowNameFormatTypes::getId() const {
    return m_id;
}
void OAIChart_RowNameFormatTypes::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIChart_RowNameFormatTypes::is_id_Set() const{
    return m_id_isSet;
}

bool OAIChart_RowNameFormatTypes::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIChart_RowNameFormatTypes::getPowerToolsId() const {
    return m_power_tools_id;
}
void OAIChart_RowNameFormatTypes::setPowerToolsId(const qint32 &power_tools_id) {
    m_power_tools_id = power_tools_id;
    m_power_tools_id_isSet = true;
}

bool OAIChart_RowNameFormatTypes::is_power_tools_id_Set() const{
    return m_power_tools_id_isSet;
}

bool OAIChart_RowNameFormatTypes::is_power_tools_id_Valid() const{
    return m_power_tools_id_isValid;
}

qint32 OAIChart_RowNameFormatTypes::getTypeId() const {
    return m_type_id;
}
void OAIChart_RowNameFormatTypes::setTypeId(const qint32 &type_id) {
    m_type_id = type_id;
    m_type_id_isSet = true;
}

bool OAIChart_RowNameFormatTypes::is_type_id_Set() const{
    return m_type_id_isSet;
}

bool OAIChart_RowNameFormatTypes::is_type_id_Valid() const{
    return m_type_id_isValid;
}

bool OAIChart_RowNameFormatTypes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_format_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_power_tools_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChart_RowNameFormatTypes::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
