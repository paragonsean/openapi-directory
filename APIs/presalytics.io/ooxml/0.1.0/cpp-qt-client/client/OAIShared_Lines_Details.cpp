/**
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShared_Lines_Details.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShared_Lines_Details::OAIShared_Lines_Details(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShared_Lines_Details::OAIShared_Lines_Details() {
    this->initializeModel();
}

OAIShared_Lines_Details::~OAIShared_Lines_Details() {}

void OAIShared_Lines_Details::initializeModel() {

    m_b_lto_tr_border_isSet = false;
    m_b_lto_tr_border_isValid = false;

    m_b_lto_tr_border_id_isSet = false;
    m_b_lto_tr_border_id_isValid = false;

    m_bottom_border_isSet = false;
    m_bottom_border_isValid = false;

    m_bottom_border_id_isSet = false;
    m_bottom_border_id_isValid = false;

    m_connector_id_isSet = false;
    m_connector_id_isValid = false;

    m_dash_type_id_isSet = false;
    m_dash_type_id_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_modified_isSet = false;
    m_date_modified_isValid = false;

    m_head_end_height_id_isSet = false;
    m_head_end_height_id_isValid = false;

    m_head_end_type_id_isSet = false;
    m_head_end_type_id_isValid = false;

    m_head_end_width_id_isSet = false;
    m_head_end_width_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_left_border_isSet = false;
    m_left_border_isValid = false;

    m_left_border_id_isSet = false;
    m_left_border_id_isValid = false;

    m_line_color_solid_fill_isSet = false;
    m_line_color_solid_fill_isValid = false;

    m_line_map_isSet = false;
    m_line_map_isValid = false;

    m_line_map_id_isSet = false;
    m_line_map_id_isValid = false;

    m_parent_connector_isSet = false;
    m_parent_connector_isValid = false;

    m_parent_shape_isSet = false;
    m_parent_shape_isValid = false;

    m_right_border_isSet = false;
    m_right_border_isValid = false;

    m_right_border_id_isSet = false;
    m_right_border_id_isValid = false;

    m_shape_id_isSet = false;
    m_shape_id_isValid = false;

    m_t_lto_br_border_isSet = false;
    m_t_lto_br_border_isValid = false;

    m_t_lto_br_border_id_isSet = false;
    m_t_lto_br_border_id_isValid = false;

    m_tail_end_height_id_isSet = false;
    m_tail_end_height_id_isValid = false;

    m_tail_end_type_id_isSet = false;
    m_tail_end_type_id_isValid = false;

    m_tail_end_width_id_isSet = false;
    m_tail_end_width_id_isValid = false;

    m_top_border_isSet = false;
    m_top_border_isValid = false;

    m_top_border_id_isSet = false;
    m_top_border_id_isValid = false;

    m_user_created_isSet = false;
    m_user_created_isValid = false;

    m_user_modified_isSet = false;
    m_user_modified_isValid = false;

    m_weight_isSet = false;
    m_weight_isValid = false;
}

void OAIShared_Lines_Details::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShared_Lines_Details::fromJsonObject(QJsonObject json) {

    m_b_lto_tr_border_isValid = ::OpenAPI::fromJsonValue(m_b_lto_tr_border, json[QString("bLtoTRBorder")]);
    m_b_lto_tr_border_isSet = !json[QString("bLtoTRBorder")].isNull() && m_b_lto_tr_border_isValid;

    m_b_lto_tr_border_id_isValid = ::OpenAPI::fromJsonValue(m_b_lto_tr_border_id, json[QString("bLtoTRBorderId")]);
    m_b_lto_tr_border_id_isSet = !json[QString("bLtoTRBorderId")].isNull() && m_b_lto_tr_border_id_isValid;

    m_bottom_border_isValid = ::OpenAPI::fromJsonValue(m_bottom_border, json[QString("bottomBorder")]);
    m_bottom_border_isSet = !json[QString("bottomBorder")].isNull() && m_bottom_border_isValid;

    m_bottom_border_id_isValid = ::OpenAPI::fromJsonValue(m_bottom_border_id, json[QString("bottomBorderId")]);
    m_bottom_border_id_isSet = !json[QString("bottomBorderId")].isNull() && m_bottom_border_id_isValid;

    m_connector_id_isValid = ::OpenAPI::fromJsonValue(m_connector_id, json[QString("connectorId")]);
    m_connector_id_isSet = !json[QString("connectorId")].isNull() && m_connector_id_isValid;

    m_dash_type_id_isValid = ::OpenAPI::fromJsonValue(m_dash_type_id, json[QString("dashTypeId")]);
    m_dash_type_id_isSet = !json[QString("dashTypeId")].isNull() && m_dash_type_id_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("dateCreated")]);
    m_date_created_isSet = !json[QString("dateCreated")].isNull() && m_date_created_isValid;

    m_date_modified_isValid = ::OpenAPI::fromJsonValue(m_date_modified, json[QString("dateModified")]);
    m_date_modified_isSet = !json[QString("dateModified")].isNull() && m_date_modified_isValid;

    m_head_end_height_id_isValid = ::OpenAPI::fromJsonValue(m_head_end_height_id, json[QString("headEndHeightId")]);
    m_head_end_height_id_isSet = !json[QString("headEndHeightId")].isNull() && m_head_end_height_id_isValid;

    m_head_end_type_id_isValid = ::OpenAPI::fromJsonValue(m_head_end_type_id, json[QString("headEndTypeId")]);
    m_head_end_type_id_isSet = !json[QString("headEndTypeId")].isNull() && m_head_end_type_id_isValid;

    m_head_end_width_id_isValid = ::OpenAPI::fromJsonValue(m_head_end_width_id, json[QString("headEndWidthId")]);
    m_head_end_width_id_isSet = !json[QString("headEndWidthId")].isNull() && m_head_end_width_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_left_border_isValid = ::OpenAPI::fromJsonValue(m_left_border, json[QString("leftBorder")]);
    m_left_border_isSet = !json[QString("leftBorder")].isNull() && m_left_border_isValid;

    m_left_border_id_isValid = ::OpenAPI::fromJsonValue(m_left_border_id, json[QString("leftBorderId")]);
    m_left_border_id_isSet = !json[QString("leftBorderId")].isNull() && m_left_border_id_isValid;

    m_line_color_solid_fill_isValid = ::OpenAPI::fromJsonValue(m_line_color_solid_fill, json[QString("lineColorSolidFill")]);
    m_line_color_solid_fill_isSet = !json[QString("lineColorSolidFill")].isNull() && m_line_color_solid_fill_isValid;

    m_line_map_isValid = ::OpenAPI::fromJsonValue(m_line_map, json[QString("lineMap")]);
    m_line_map_isSet = !json[QString("lineMap")].isNull() && m_line_map_isValid;

    m_line_map_id_isValid = ::OpenAPI::fromJsonValue(m_line_map_id, json[QString("lineMapId")]);
    m_line_map_id_isSet = !json[QString("lineMapId")].isNull() && m_line_map_id_isValid;

    m_parent_connector_isValid = ::OpenAPI::fromJsonValue(m_parent_connector, json[QString("parentConnector")]);
    m_parent_connector_isSet = !json[QString("parentConnector")].isNull() && m_parent_connector_isValid;

    m_parent_shape_isValid = ::OpenAPI::fromJsonValue(m_parent_shape, json[QString("parentShape")]);
    m_parent_shape_isSet = !json[QString("parentShape")].isNull() && m_parent_shape_isValid;

    m_right_border_isValid = ::OpenAPI::fromJsonValue(m_right_border, json[QString("rightBorder")]);
    m_right_border_isSet = !json[QString("rightBorder")].isNull() && m_right_border_isValid;

    m_right_border_id_isValid = ::OpenAPI::fromJsonValue(m_right_border_id, json[QString("rightBorderId")]);
    m_right_border_id_isSet = !json[QString("rightBorderId")].isNull() && m_right_border_id_isValid;

    m_shape_id_isValid = ::OpenAPI::fromJsonValue(m_shape_id, json[QString("shapeId")]);
    m_shape_id_isSet = !json[QString("shapeId")].isNull() && m_shape_id_isValid;

    m_t_lto_br_border_isValid = ::OpenAPI::fromJsonValue(m_t_lto_br_border, json[QString("tLtoBRBorder")]);
    m_t_lto_br_border_isSet = !json[QString("tLtoBRBorder")].isNull() && m_t_lto_br_border_isValid;

    m_t_lto_br_border_id_isValid = ::OpenAPI::fromJsonValue(m_t_lto_br_border_id, json[QString("tLtoBRBorderId")]);
    m_t_lto_br_border_id_isSet = !json[QString("tLtoBRBorderId")].isNull() && m_t_lto_br_border_id_isValid;

    m_tail_end_height_id_isValid = ::OpenAPI::fromJsonValue(m_tail_end_height_id, json[QString("tailEndHeightId")]);
    m_tail_end_height_id_isSet = !json[QString("tailEndHeightId")].isNull() && m_tail_end_height_id_isValid;

    m_tail_end_type_id_isValid = ::OpenAPI::fromJsonValue(m_tail_end_type_id, json[QString("tailEndTypeId")]);
    m_tail_end_type_id_isSet = !json[QString("tailEndTypeId")].isNull() && m_tail_end_type_id_isValid;

    m_tail_end_width_id_isValid = ::OpenAPI::fromJsonValue(m_tail_end_width_id, json[QString("tailEndWidthId")]);
    m_tail_end_width_id_isSet = !json[QString("tailEndWidthId")].isNull() && m_tail_end_width_id_isValid;

    m_top_border_isValid = ::OpenAPI::fromJsonValue(m_top_border, json[QString("topBorder")]);
    m_top_border_isSet = !json[QString("topBorder")].isNull() && m_top_border_isValid;

    m_top_border_id_isValid = ::OpenAPI::fromJsonValue(m_top_border_id, json[QString("topBorderId")]);
    m_top_border_id_isSet = !json[QString("topBorderId")].isNull() && m_top_border_id_isValid;

    m_user_created_isValid = ::OpenAPI::fromJsonValue(m_user_created, json[QString("userCreated")]);
    m_user_created_isSet = !json[QString("userCreated")].isNull() && m_user_created_isValid;

    m_user_modified_isValid = ::OpenAPI::fromJsonValue(m_user_modified, json[QString("userModified")]);
    m_user_modified_isSet = !json[QString("userModified")].isNull() && m_user_modified_isValid;

    m_weight_isValid = ::OpenAPI::fromJsonValue(m_weight, json[QString("weight")]);
    m_weight_isSet = !json[QString("weight")].isNull() && m_weight_isValid;
}

QString OAIShared_Lines_Details::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShared_Lines_Details::asJsonObject() const {
    QJsonObject obj;
    if (m_b_lto_tr_border.isSet()) {
        obj.insert(QString("bLtoTRBorder"), ::OpenAPI::toJsonValue(m_b_lto_tr_border));
    }
    if (m_b_lto_tr_border_id_isSet) {
        obj.insert(QString("bLtoTRBorderId"), ::OpenAPI::toJsonValue(m_b_lto_tr_border_id));
    }
    if (m_bottom_border.isSet()) {
        obj.insert(QString("bottomBorder"), ::OpenAPI::toJsonValue(m_bottom_border));
    }
    if (m_bottom_border_id_isSet) {
        obj.insert(QString("bottomBorderId"), ::OpenAPI::toJsonValue(m_bottom_border_id));
    }
    if (m_connector_id_isSet) {
        obj.insert(QString("connectorId"), ::OpenAPI::toJsonValue(m_connector_id));
    }
    if (m_dash_type_id_isSet) {
        obj.insert(QString("dashTypeId"), ::OpenAPI::toJsonValue(m_dash_type_id));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("dateCreated"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_modified_isSet) {
        obj.insert(QString("dateModified"), ::OpenAPI::toJsonValue(m_date_modified));
    }
    if (m_head_end_height_id_isSet) {
        obj.insert(QString("headEndHeightId"), ::OpenAPI::toJsonValue(m_head_end_height_id));
    }
    if (m_head_end_type_id_isSet) {
        obj.insert(QString("headEndTypeId"), ::OpenAPI::toJsonValue(m_head_end_type_id));
    }
    if (m_head_end_width_id_isSet) {
        obj.insert(QString("headEndWidthId"), ::OpenAPI::toJsonValue(m_head_end_width_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_left_border.isSet()) {
        obj.insert(QString("leftBorder"), ::OpenAPI::toJsonValue(m_left_border));
    }
    if (m_left_border_id_isSet) {
        obj.insert(QString("leftBorderId"), ::OpenAPI::toJsonValue(m_left_border_id));
    }
    if (m_line_color_solid_fill.isSet()) {
        obj.insert(QString("lineColorSolidFill"), ::OpenAPI::toJsonValue(m_line_color_solid_fill));
    }
    if (m_line_map.isSet()) {
        obj.insert(QString("lineMap"), ::OpenAPI::toJsonValue(m_line_map));
    }
    if (m_line_map_id_isSet) {
        obj.insert(QString("lineMapId"), ::OpenAPI::toJsonValue(m_line_map_id));
    }
    if (m_parent_connector.isSet()) {
        obj.insert(QString("parentConnector"), ::OpenAPI::toJsonValue(m_parent_connector));
    }
    if (m_parent_shape.isSet()) {
        obj.insert(QString("parentShape"), ::OpenAPI::toJsonValue(m_parent_shape));
    }
    if (m_right_border.isSet()) {
        obj.insert(QString("rightBorder"), ::OpenAPI::toJsonValue(m_right_border));
    }
    if (m_right_border_id_isSet) {
        obj.insert(QString("rightBorderId"), ::OpenAPI::toJsonValue(m_right_border_id));
    }
    if (m_shape_id_isSet) {
        obj.insert(QString("shapeId"), ::OpenAPI::toJsonValue(m_shape_id));
    }
    if (m_t_lto_br_border.isSet()) {
        obj.insert(QString("tLtoBRBorder"), ::OpenAPI::toJsonValue(m_t_lto_br_border));
    }
    if (m_t_lto_br_border_id_isSet) {
        obj.insert(QString("tLtoBRBorderId"), ::OpenAPI::toJsonValue(m_t_lto_br_border_id));
    }
    if (m_tail_end_height_id_isSet) {
        obj.insert(QString("tailEndHeightId"), ::OpenAPI::toJsonValue(m_tail_end_height_id));
    }
    if (m_tail_end_type_id_isSet) {
        obj.insert(QString("tailEndTypeId"), ::OpenAPI::toJsonValue(m_tail_end_type_id));
    }
    if (m_tail_end_width_id_isSet) {
        obj.insert(QString("tailEndWidthId"), ::OpenAPI::toJsonValue(m_tail_end_width_id));
    }
    if (m_top_border.isSet()) {
        obj.insert(QString("topBorder"), ::OpenAPI::toJsonValue(m_top_border));
    }
    if (m_top_border_id_isSet) {
        obj.insert(QString("topBorderId"), ::OpenAPI::toJsonValue(m_top_border_id));
    }
    if (m_user_created_isSet) {
        obj.insert(QString("userCreated"), ::OpenAPI::toJsonValue(m_user_created));
    }
    if (m_user_modified_isSet) {
        obj.insert(QString("userModified"), ::OpenAPI::toJsonValue(m_user_modified));
    }
    if (m_weight_isSet) {
        obj.insert(QString("weight"), ::OpenAPI::toJsonValue(m_weight));
    }
    return obj;
}

OAITable_Borders_Details OAIShared_Lines_Details::getBLtoTrBorder() const {
    return m_b_lto_tr_border;
}
void OAIShared_Lines_Details::setBLtoTrBorder(const OAITable_Borders_Details &b_lto_tr_border) {
    m_b_lto_tr_border = b_lto_tr_border;
    m_b_lto_tr_border_isSet = true;
}

bool OAIShared_Lines_Details::is_b_lto_tr_border_Set() const{
    return m_b_lto_tr_border_isSet;
}

bool OAIShared_Lines_Details::is_b_lto_tr_border_Valid() const{
    return m_b_lto_tr_border_isValid;
}

QString OAIShared_Lines_Details::getBLtoTrBorderId() const {
    return m_b_lto_tr_border_id;
}
void OAIShared_Lines_Details::setBLtoTrBorderId(const QString &b_lto_tr_border_id) {
    m_b_lto_tr_border_id = b_lto_tr_border_id;
    m_b_lto_tr_border_id_isSet = true;
}

bool OAIShared_Lines_Details::is_b_lto_tr_border_id_Set() const{
    return m_b_lto_tr_border_id_isSet;
}

bool OAIShared_Lines_Details::is_b_lto_tr_border_id_Valid() const{
    return m_b_lto_tr_border_id_isValid;
}

OAITable_Borders_Details OAIShared_Lines_Details::getBottomBorder() const {
    return m_bottom_border;
}
void OAIShared_Lines_Details::setBottomBorder(const OAITable_Borders_Details &bottom_border) {
    m_bottom_border = bottom_border;
    m_bottom_border_isSet = true;
}

bool OAIShared_Lines_Details::is_bottom_border_Set() const{
    return m_bottom_border_isSet;
}

bool OAIShared_Lines_Details::is_bottom_border_Valid() const{
    return m_bottom_border_isValid;
}

QString OAIShared_Lines_Details::getBottomBorderId() const {
    return m_bottom_border_id;
}
void OAIShared_Lines_Details::setBottomBorderId(const QString &bottom_border_id) {
    m_bottom_border_id = bottom_border_id;
    m_bottom_border_id_isSet = true;
}

bool OAIShared_Lines_Details::is_bottom_border_id_Set() const{
    return m_bottom_border_id_isSet;
}

bool OAIShared_Lines_Details::is_bottom_border_id_Valid() const{
    return m_bottom_border_id_isValid;
}

QString OAIShared_Lines_Details::getConnectorId() const {
    return m_connector_id;
}
void OAIShared_Lines_Details::setConnectorId(const QString &connector_id) {
    m_connector_id = connector_id;
    m_connector_id_isSet = true;
}

bool OAIShared_Lines_Details::is_connector_id_Set() const{
    return m_connector_id_isSet;
}

bool OAIShared_Lines_Details::is_connector_id_Valid() const{
    return m_connector_id_isValid;
}

qint32 OAIShared_Lines_Details::getDashTypeId() const {
    return m_dash_type_id;
}
void OAIShared_Lines_Details::setDashTypeId(const qint32 &dash_type_id) {
    m_dash_type_id = dash_type_id;
    m_dash_type_id_isSet = true;
}

bool OAIShared_Lines_Details::is_dash_type_id_Set() const{
    return m_dash_type_id_isSet;
}

bool OAIShared_Lines_Details::is_dash_type_id_Valid() const{
    return m_dash_type_id_isValid;
}

QDateTime OAIShared_Lines_Details::getDateCreated() const {
    return m_date_created;
}
void OAIShared_Lines_Details::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIShared_Lines_Details::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIShared_Lines_Details::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAIShared_Lines_Details::getDateModified() const {
    return m_date_modified;
}
void OAIShared_Lines_Details::setDateModified(const QDateTime &date_modified) {
    m_date_modified = date_modified;
    m_date_modified_isSet = true;
}

bool OAIShared_Lines_Details::is_date_modified_Set() const{
    return m_date_modified_isSet;
}

bool OAIShared_Lines_Details::is_date_modified_Valid() const{
    return m_date_modified_isValid;
}

qint32 OAIShared_Lines_Details::getHeadEndHeightId() const {
    return m_head_end_height_id;
}
void OAIShared_Lines_Details::setHeadEndHeightId(const qint32 &head_end_height_id) {
    m_head_end_height_id = head_end_height_id;
    m_head_end_height_id_isSet = true;
}

bool OAIShared_Lines_Details::is_head_end_height_id_Set() const{
    return m_head_end_height_id_isSet;
}

bool OAIShared_Lines_Details::is_head_end_height_id_Valid() const{
    return m_head_end_height_id_isValid;
}

qint32 OAIShared_Lines_Details::getHeadEndTypeId() const {
    return m_head_end_type_id;
}
void OAIShared_Lines_Details::setHeadEndTypeId(const qint32 &head_end_type_id) {
    m_head_end_type_id = head_end_type_id;
    m_head_end_type_id_isSet = true;
}

bool OAIShared_Lines_Details::is_head_end_type_id_Set() const{
    return m_head_end_type_id_isSet;
}

bool OAIShared_Lines_Details::is_head_end_type_id_Valid() const{
    return m_head_end_type_id_isValid;
}

qint32 OAIShared_Lines_Details::getHeadEndWidthId() const {
    return m_head_end_width_id;
}
void OAIShared_Lines_Details::setHeadEndWidthId(const qint32 &head_end_width_id) {
    m_head_end_width_id = head_end_width_id;
    m_head_end_width_id_isSet = true;
}

bool OAIShared_Lines_Details::is_head_end_width_id_Set() const{
    return m_head_end_width_id_isSet;
}

bool OAIShared_Lines_Details::is_head_end_width_id_Valid() const{
    return m_head_end_width_id_isValid;
}

QString OAIShared_Lines_Details::getId() const {
    return m_id;
}
void OAIShared_Lines_Details::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIShared_Lines_Details::is_id_Set() const{
    return m_id_isSet;
}

bool OAIShared_Lines_Details::is_id_Valid() const{
    return m_id_isValid;
}

OAITable_Borders_Details OAIShared_Lines_Details::getLeftBorder() const {
    return m_left_border;
}
void OAIShared_Lines_Details::setLeftBorder(const OAITable_Borders_Details &left_border) {
    m_left_border = left_border;
    m_left_border_isSet = true;
}

bool OAIShared_Lines_Details::is_left_border_Set() const{
    return m_left_border_isSet;
}

bool OAIShared_Lines_Details::is_left_border_Valid() const{
    return m_left_border_isValid;
}

QString OAIShared_Lines_Details::getLeftBorderId() const {
    return m_left_border_id;
}
void OAIShared_Lines_Details::setLeftBorderId(const QString &left_border_id) {
    m_left_border_id = left_border_id;
    m_left_border_id_isSet = true;
}

bool OAIShared_Lines_Details::is_left_border_id_Set() const{
    return m_left_border_id_isSet;
}

bool OAIShared_Lines_Details::is_left_border_id_Valid() const{
    return m_left_border_id_isValid;
}

OAIShared_SolidFills_Details OAIShared_Lines_Details::getLineColorSolidFill() const {
    return m_line_color_solid_fill;
}
void OAIShared_Lines_Details::setLineColorSolidFill(const OAIShared_SolidFills_Details &line_color_solid_fill) {
    m_line_color_solid_fill = line_color_solid_fill;
    m_line_color_solid_fill_isSet = true;
}

bool OAIShared_Lines_Details::is_line_color_solid_fill_Set() const{
    return m_line_color_solid_fill_isSet;
}

bool OAIShared_Lines_Details::is_line_color_solid_fill_Valid() const{
    return m_line_color_solid_fill_isValid;
}

OAITheme_LineMap_Details OAIShared_Lines_Details::getLineMap() const {
    return m_line_map;
}
void OAIShared_Lines_Details::setLineMap(const OAITheme_LineMap_Details &line_map) {
    m_line_map = line_map;
    m_line_map_isSet = true;
}

bool OAIShared_Lines_Details::is_line_map_Set() const{
    return m_line_map_isSet;
}

bool OAIShared_Lines_Details::is_line_map_Valid() const{
    return m_line_map_isValid;
}

QString OAIShared_Lines_Details::getLineMapId() const {
    return m_line_map_id;
}
void OAIShared_Lines_Details::setLineMapId(const QString &line_map_id) {
    m_line_map_id = line_map_id;
    m_line_map_id_isSet = true;
}

bool OAIShared_Lines_Details::is_line_map_id_Set() const{
    return m_line_map_id_isSet;
}

bool OAIShared_Lines_Details::is_line_map_id_Valid() const{
    return m_line_map_id_isValid;
}

OAISlide_Connector_Details OAIShared_Lines_Details::getParentConnector() const {
    return m_parent_connector;
}
void OAIShared_Lines_Details::setParentConnector(const OAISlide_Connector_Details &parent_connector) {
    m_parent_connector = parent_connector;
    m_parent_connector_isSet = true;
}

bool OAIShared_Lines_Details::is_parent_connector_Set() const{
    return m_parent_connector_isSet;
}

bool OAIShared_Lines_Details::is_parent_connector_Valid() const{
    return m_parent_connector_isValid;
}

OAISlide_Shapes_Details OAIShared_Lines_Details::getParentShape() const {
    return m_parent_shape;
}
void OAIShared_Lines_Details::setParentShape(const OAISlide_Shapes_Details &parent_shape) {
    m_parent_shape = parent_shape;
    m_parent_shape_isSet = true;
}

bool OAIShared_Lines_Details::is_parent_shape_Set() const{
    return m_parent_shape_isSet;
}

bool OAIShared_Lines_Details::is_parent_shape_Valid() const{
    return m_parent_shape_isValid;
}

OAITable_Borders_Details OAIShared_Lines_Details::getRightBorder() const {
    return m_right_border;
}
void OAIShared_Lines_Details::setRightBorder(const OAITable_Borders_Details &right_border) {
    m_right_border = right_border;
    m_right_border_isSet = true;
}

bool OAIShared_Lines_Details::is_right_border_Set() const{
    return m_right_border_isSet;
}

bool OAIShared_Lines_Details::is_right_border_Valid() const{
    return m_right_border_isValid;
}

QString OAIShared_Lines_Details::getRightBorderId() const {
    return m_right_border_id;
}
void OAIShared_Lines_Details::setRightBorderId(const QString &right_border_id) {
    m_right_border_id = right_border_id;
    m_right_border_id_isSet = true;
}

bool OAIShared_Lines_Details::is_right_border_id_Set() const{
    return m_right_border_id_isSet;
}

bool OAIShared_Lines_Details::is_right_border_id_Valid() const{
    return m_right_border_id_isValid;
}

QString OAIShared_Lines_Details::getShapeId() const {
    return m_shape_id;
}
void OAIShared_Lines_Details::setShapeId(const QString &shape_id) {
    m_shape_id = shape_id;
    m_shape_id_isSet = true;
}

bool OAIShared_Lines_Details::is_shape_id_Set() const{
    return m_shape_id_isSet;
}

bool OAIShared_Lines_Details::is_shape_id_Valid() const{
    return m_shape_id_isValid;
}

OAITable_Borders_Details OAIShared_Lines_Details::getTLtoBrBorder() const {
    return m_t_lto_br_border;
}
void OAIShared_Lines_Details::setTLtoBrBorder(const OAITable_Borders_Details &t_lto_br_border) {
    m_t_lto_br_border = t_lto_br_border;
    m_t_lto_br_border_isSet = true;
}

bool OAIShared_Lines_Details::is_t_lto_br_border_Set() const{
    return m_t_lto_br_border_isSet;
}

bool OAIShared_Lines_Details::is_t_lto_br_border_Valid() const{
    return m_t_lto_br_border_isValid;
}

QString OAIShared_Lines_Details::getTLtoBrBorderId() const {
    return m_t_lto_br_border_id;
}
void OAIShared_Lines_Details::setTLtoBrBorderId(const QString &t_lto_br_border_id) {
    m_t_lto_br_border_id = t_lto_br_border_id;
    m_t_lto_br_border_id_isSet = true;
}

bool OAIShared_Lines_Details::is_t_lto_br_border_id_Set() const{
    return m_t_lto_br_border_id_isSet;
}

bool OAIShared_Lines_Details::is_t_lto_br_border_id_Valid() const{
    return m_t_lto_br_border_id_isValid;
}

qint32 OAIShared_Lines_Details::getTailEndHeightId() const {
    return m_tail_end_height_id;
}
void OAIShared_Lines_Details::setTailEndHeightId(const qint32 &tail_end_height_id) {
    m_tail_end_height_id = tail_end_height_id;
    m_tail_end_height_id_isSet = true;
}

bool OAIShared_Lines_Details::is_tail_end_height_id_Set() const{
    return m_tail_end_height_id_isSet;
}

bool OAIShared_Lines_Details::is_tail_end_height_id_Valid() const{
    return m_tail_end_height_id_isValid;
}

qint32 OAIShared_Lines_Details::getTailEndTypeId() const {
    return m_tail_end_type_id;
}
void OAIShared_Lines_Details::setTailEndTypeId(const qint32 &tail_end_type_id) {
    m_tail_end_type_id = tail_end_type_id;
    m_tail_end_type_id_isSet = true;
}

bool OAIShared_Lines_Details::is_tail_end_type_id_Set() const{
    return m_tail_end_type_id_isSet;
}

bool OAIShared_Lines_Details::is_tail_end_type_id_Valid() const{
    return m_tail_end_type_id_isValid;
}

qint32 OAIShared_Lines_Details::getTailEndWidthId() const {
    return m_tail_end_width_id;
}
void OAIShared_Lines_Details::setTailEndWidthId(const qint32 &tail_end_width_id) {
    m_tail_end_width_id = tail_end_width_id;
    m_tail_end_width_id_isSet = true;
}

bool OAIShared_Lines_Details::is_tail_end_width_id_Set() const{
    return m_tail_end_width_id_isSet;
}

bool OAIShared_Lines_Details::is_tail_end_width_id_Valid() const{
    return m_tail_end_width_id_isValid;
}

OAITable_Borders_Details OAIShared_Lines_Details::getTopBorder() const {
    return m_top_border;
}
void OAIShared_Lines_Details::setTopBorder(const OAITable_Borders_Details &top_border) {
    m_top_border = top_border;
    m_top_border_isSet = true;
}

bool OAIShared_Lines_Details::is_top_border_Set() const{
    return m_top_border_isSet;
}

bool OAIShared_Lines_Details::is_top_border_Valid() const{
    return m_top_border_isValid;
}

QString OAIShared_Lines_Details::getTopBorderId() const {
    return m_top_border_id;
}
void OAIShared_Lines_Details::setTopBorderId(const QString &top_border_id) {
    m_top_border_id = top_border_id;
    m_top_border_id_isSet = true;
}

bool OAIShared_Lines_Details::is_top_border_id_Set() const{
    return m_top_border_id_isSet;
}

bool OAIShared_Lines_Details::is_top_border_id_Valid() const{
    return m_top_border_id_isValid;
}

QString OAIShared_Lines_Details::getUserCreated() const {
    return m_user_created;
}
void OAIShared_Lines_Details::setUserCreated(const QString &user_created) {
    m_user_created = user_created;
    m_user_created_isSet = true;
}

bool OAIShared_Lines_Details::is_user_created_Set() const{
    return m_user_created_isSet;
}

bool OAIShared_Lines_Details::is_user_created_Valid() const{
    return m_user_created_isValid;
}

QString OAIShared_Lines_Details::getUserModified() const {
    return m_user_modified;
}
void OAIShared_Lines_Details::setUserModified(const QString &user_modified) {
    m_user_modified = user_modified;
    m_user_modified_isSet = true;
}

bool OAIShared_Lines_Details::is_user_modified_Set() const{
    return m_user_modified_isSet;
}

bool OAIShared_Lines_Details::is_user_modified_Valid() const{
    return m_user_modified_isValid;
}

qint32 OAIShared_Lines_Details::getWeight() const {
    return m_weight;
}
void OAIShared_Lines_Details::setWeight(const qint32 &weight) {
    m_weight = weight;
    m_weight_isSet = true;
}

bool OAIShared_Lines_Details::is_weight_Set() const{
    return m_weight_isSet;
}

bool OAIShared_Lines_Details::is_weight_Valid() const{
    return m_weight_isValid;
}

bool OAIShared_Lines_Details::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_b_lto_tr_border.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_b_lto_tr_border_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bottom_border.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bottom_border_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connector_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dash_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_head_end_height_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_head_end_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_head_end_width_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_left_border.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_left_border_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_color_solid_fill.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_map.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_map_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_connector.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_shape.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_right_border.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_right_border_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shape_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_t_lto_br_border.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_t_lto_br_border_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tail_end_height_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tail_end_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tail_end_width_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_top_border.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_top_border_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShared_Lines_Details::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
