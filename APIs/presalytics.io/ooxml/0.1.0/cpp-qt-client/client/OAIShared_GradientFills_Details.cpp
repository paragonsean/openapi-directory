/**
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShared_GradientFills_Details.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShared_GradientFills_Details::OAIShared_GradientFills_Details(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShared_GradientFills_Details::OAIShared_GradientFills_Details() {
    this->initializeModel();
}

OAIShared_GradientFills_Details::~OAIShared_GradientFills_Details() {}

void OAIShared_GradientFills_Details::initializeModel() {

    m_angle_isSet = false;
    m_angle_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_modified_isSet = false;
    m_date_modified_isValid = false;

    m_fill_map_isSet = false;
    m_fill_map_isValid = false;

    m_fill_map_id_isSet = false;
    m_fill_map_id_isValid = false;

    m_gradient_stops_isSet = false;
    m_gradient_stops_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_path_isSet = false;
    m_is_path_isValid = false;

    m_path_type_isSet = false;
    m_path_type_isValid = false;

    m_rotate_with_shape_isSet = false;
    m_rotate_with_shape_isValid = false;

    m_user_created_isSet = false;
    m_user_created_isValid = false;

    m_user_modified_isSet = false;
    m_user_modified_isValid = false;
}

void OAIShared_GradientFills_Details::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShared_GradientFills_Details::fromJsonObject(QJsonObject json) {

    m_angle_isValid = ::OpenAPI::fromJsonValue(m_angle, json[QString("angle")]);
    m_angle_isSet = !json[QString("angle")].isNull() && m_angle_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("dateCreated")]);
    m_date_created_isSet = !json[QString("dateCreated")].isNull() && m_date_created_isValid;

    m_date_modified_isValid = ::OpenAPI::fromJsonValue(m_date_modified, json[QString("dateModified")]);
    m_date_modified_isSet = !json[QString("dateModified")].isNull() && m_date_modified_isValid;

    m_fill_map_isValid = ::OpenAPI::fromJsonValue(m_fill_map, json[QString("fillMap")]);
    m_fill_map_isSet = !json[QString("fillMap")].isNull() && m_fill_map_isValid;

    m_fill_map_id_isValid = ::OpenAPI::fromJsonValue(m_fill_map_id, json[QString("fillMapId")]);
    m_fill_map_id_isSet = !json[QString("fillMapId")].isNull() && m_fill_map_id_isValid;

    m_gradient_stops_isValid = ::OpenAPI::fromJsonValue(m_gradient_stops, json[QString("gradientStops")]);
    m_gradient_stops_isSet = !json[QString("gradientStops")].isNull() && m_gradient_stops_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_path_isValid = ::OpenAPI::fromJsonValue(m_is_path, json[QString("isPath")]);
    m_is_path_isSet = !json[QString("isPath")].isNull() && m_is_path_isValid;

    m_path_type_isValid = ::OpenAPI::fromJsonValue(m_path_type, json[QString("pathType")]);
    m_path_type_isSet = !json[QString("pathType")].isNull() && m_path_type_isValid;

    m_rotate_with_shape_isValid = ::OpenAPI::fromJsonValue(m_rotate_with_shape, json[QString("rotateWithShape")]);
    m_rotate_with_shape_isSet = !json[QString("rotateWithShape")].isNull() && m_rotate_with_shape_isValid;

    m_user_created_isValid = ::OpenAPI::fromJsonValue(m_user_created, json[QString("userCreated")]);
    m_user_created_isSet = !json[QString("userCreated")].isNull() && m_user_created_isValid;

    m_user_modified_isValid = ::OpenAPI::fromJsonValue(m_user_modified, json[QString("userModified")]);
    m_user_modified_isSet = !json[QString("userModified")].isNull() && m_user_modified_isValid;
}

QString OAIShared_GradientFills_Details::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShared_GradientFills_Details::asJsonObject() const {
    QJsonObject obj;
    if (m_angle_isSet) {
        obj.insert(QString("angle"), ::OpenAPI::toJsonValue(m_angle));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("dateCreated"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_modified_isSet) {
        obj.insert(QString("dateModified"), ::OpenAPI::toJsonValue(m_date_modified));
    }
    if (m_fill_map.isSet()) {
        obj.insert(QString("fillMap"), ::OpenAPI::toJsonValue(m_fill_map));
    }
    if (m_fill_map_id_isSet) {
        obj.insert(QString("fillMapId"), ::OpenAPI::toJsonValue(m_fill_map_id));
    }
    if (m_gradient_stops.size() > 0) {
        obj.insert(QString("gradientStops"), ::OpenAPI::toJsonValue(m_gradient_stops));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_path_isSet) {
        obj.insert(QString("isPath"), ::OpenAPI::toJsonValue(m_is_path));
    }
    if (m_path_type_isSet) {
        obj.insert(QString("pathType"), ::OpenAPI::toJsonValue(m_path_type));
    }
    if (m_rotate_with_shape_isSet) {
        obj.insert(QString("rotateWithShape"), ::OpenAPI::toJsonValue(m_rotate_with_shape));
    }
    if (m_user_created_isSet) {
        obj.insert(QString("userCreated"), ::OpenAPI::toJsonValue(m_user_created));
    }
    if (m_user_modified_isSet) {
        obj.insert(QString("userModified"), ::OpenAPI::toJsonValue(m_user_modified));
    }
    return obj;
}

qint32 OAIShared_GradientFills_Details::getAngle() const {
    return m_angle;
}
void OAIShared_GradientFills_Details::setAngle(const qint32 &angle) {
    m_angle = angle;
    m_angle_isSet = true;
}

bool OAIShared_GradientFills_Details::is_angle_Set() const{
    return m_angle_isSet;
}

bool OAIShared_GradientFills_Details::is_angle_Valid() const{
    return m_angle_isValid;
}

QDateTime OAIShared_GradientFills_Details::getDateCreated() const {
    return m_date_created;
}
void OAIShared_GradientFills_Details::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIShared_GradientFills_Details::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIShared_GradientFills_Details::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAIShared_GradientFills_Details::getDateModified() const {
    return m_date_modified;
}
void OAIShared_GradientFills_Details::setDateModified(const QDateTime &date_modified) {
    m_date_modified = date_modified;
    m_date_modified_isSet = true;
}

bool OAIShared_GradientFills_Details::is_date_modified_Set() const{
    return m_date_modified_isSet;
}

bool OAIShared_GradientFills_Details::is_date_modified_Valid() const{
    return m_date_modified_isValid;
}

OAIShared_FillMap_Details OAIShared_GradientFills_Details::getFillMap() const {
    return m_fill_map;
}
void OAIShared_GradientFills_Details::setFillMap(const OAIShared_FillMap_Details &fill_map) {
    m_fill_map = fill_map;
    m_fill_map_isSet = true;
}

bool OAIShared_GradientFills_Details::is_fill_map_Set() const{
    return m_fill_map_isSet;
}

bool OAIShared_GradientFills_Details::is_fill_map_Valid() const{
    return m_fill_map_isValid;
}

QString OAIShared_GradientFills_Details::getFillMapId() const {
    return m_fill_map_id;
}
void OAIShared_GradientFills_Details::setFillMapId(const QString &fill_map_id) {
    m_fill_map_id = fill_map_id;
    m_fill_map_id_isSet = true;
}

bool OAIShared_GradientFills_Details::is_fill_map_id_Set() const{
    return m_fill_map_id_isSet;
}

bool OAIShared_GradientFills_Details::is_fill_map_id_Valid() const{
    return m_fill_map_id_isValid;
}

QList<OAIShared_GradientStops_Details> OAIShared_GradientFills_Details::getGradientStops() const {
    return m_gradient_stops;
}
void OAIShared_GradientFills_Details::setGradientStops(const QList<OAIShared_GradientStops_Details> &gradient_stops) {
    m_gradient_stops = gradient_stops;
    m_gradient_stops_isSet = true;
}

bool OAIShared_GradientFills_Details::is_gradient_stops_Set() const{
    return m_gradient_stops_isSet;
}

bool OAIShared_GradientFills_Details::is_gradient_stops_Valid() const{
    return m_gradient_stops_isValid;
}

QString OAIShared_GradientFills_Details::getId() const {
    return m_id;
}
void OAIShared_GradientFills_Details::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIShared_GradientFills_Details::is_id_Set() const{
    return m_id_isSet;
}

bool OAIShared_GradientFills_Details::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIShared_GradientFills_Details::isIsPath() const {
    return m_is_path;
}
void OAIShared_GradientFills_Details::setIsPath(const bool &is_path) {
    m_is_path = is_path;
    m_is_path_isSet = true;
}

bool OAIShared_GradientFills_Details::is_is_path_Set() const{
    return m_is_path_isSet;
}

bool OAIShared_GradientFills_Details::is_is_path_Valid() const{
    return m_is_path_isValid;
}

QString OAIShared_GradientFills_Details::getPathType() const {
    return m_path_type;
}
void OAIShared_GradientFills_Details::setPathType(const QString &path_type) {
    m_path_type = path_type;
    m_path_type_isSet = true;
}

bool OAIShared_GradientFills_Details::is_path_type_Set() const{
    return m_path_type_isSet;
}

bool OAIShared_GradientFills_Details::is_path_type_Valid() const{
    return m_path_type_isValid;
}

bool OAIShared_GradientFills_Details::isRotateWithShape() const {
    return m_rotate_with_shape;
}
void OAIShared_GradientFills_Details::setRotateWithShape(const bool &rotate_with_shape) {
    m_rotate_with_shape = rotate_with_shape;
    m_rotate_with_shape_isSet = true;
}

bool OAIShared_GradientFills_Details::is_rotate_with_shape_Set() const{
    return m_rotate_with_shape_isSet;
}

bool OAIShared_GradientFills_Details::is_rotate_with_shape_Valid() const{
    return m_rotate_with_shape_isValid;
}

QString OAIShared_GradientFills_Details::getUserCreated() const {
    return m_user_created;
}
void OAIShared_GradientFills_Details::setUserCreated(const QString &user_created) {
    m_user_created = user_created;
    m_user_created_isSet = true;
}

bool OAIShared_GradientFills_Details::is_user_created_Set() const{
    return m_user_created_isSet;
}

bool OAIShared_GradientFills_Details::is_user_created_Valid() const{
    return m_user_created_isValid;
}

QString OAIShared_GradientFills_Details::getUserModified() const {
    return m_user_modified;
}
void OAIShared_GradientFills_Details::setUserModified(const QString &user_modified) {
    m_user_modified = user_modified;
    m_user_modified_isSet = true;
}

bool OAIShared_GradientFills_Details::is_user_modified_Set() const{
    return m_user_modified_isSet;
}

bool OAIShared_GradientFills_Details::is_user_modified_Valid() const{
    return m_user_modified_isValid;
}

bool OAIShared_GradientFills_Details::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_angle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fill_map.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fill_map_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gradient_stops.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rotate_with_shape_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_modified_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShared_GradientFills_Details::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
