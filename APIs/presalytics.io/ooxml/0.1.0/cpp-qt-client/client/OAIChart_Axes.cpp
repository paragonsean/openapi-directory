/**
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChart_Axes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChart_Axes::OAIChart_Axes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChart_Axes::OAIChart_Axes() {
    this->initializeModel();
}

OAIChart_Axes::~OAIChart_Axes() {}

void OAIChart_Axes::initializeModel() {

    m_axis_data_type_id_isSet = false;
    m_axis_data_type_id_isValid = false;

    m_charts_id_isSet = false;
    m_charts_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_ooxml_id_isSet = false;
    m_ooxml_id_isValid = false;
}

void OAIChart_Axes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChart_Axes::fromJsonObject(QJsonObject json) {

    m_axis_data_type_id_isValid = ::OpenAPI::fromJsonValue(m_axis_data_type_id, json[QString("axisDataTypeId")]);
    m_axis_data_type_id_isSet = !json[QString("axisDataTypeId")].isNull() && m_axis_data_type_id_isValid;

    m_charts_id_isValid = ::OpenAPI::fromJsonValue(m_charts_id, json[QString("chartsId")]);
    m_charts_id_isSet = !json[QString("chartsId")].isNull() && m_charts_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_ooxml_id_isValid = ::OpenAPI::fromJsonValue(m_ooxml_id, json[QString("ooxmlId")]);
    m_ooxml_id_isSet = !json[QString("ooxmlId")].isNull() && m_ooxml_id_isValid;
}

QString OAIChart_Axes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChart_Axes::asJsonObject() const {
    QJsonObject obj;
    if (m_axis_data_type_id_isSet) {
        obj.insert(QString("axisDataTypeId"), ::OpenAPI::toJsonValue(m_axis_data_type_id));
    }
    if (m_charts_id_isSet) {
        obj.insert(QString("chartsId"), ::OpenAPI::toJsonValue(m_charts_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_ooxml_id_isSet) {
        obj.insert(QString("ooxmlId"), ::OpenAPI::toJsonValue(m_ooxml_id));
    }
    return obj;
}

qint32 OAIChart_Axes::getAxisDataTypeId() const {
    return m_axis_data_type_id;
}
void OAIChart_Axes::setAxisDataTypeId(const qint32 &axis_data_type_id) {
    m_axis_data_type_id = axis_data_type_id;
    m_axis_data_type_id_isSet = true;
}

bool OAIChart_Axes::is_axis_data_type_id_Set() const{
    return m_axis_data_type_id_isSet;
}

bool OAIChart_Axes::is_axis_data_type_id_Valid() const{
    return m_axis_data_type_id_isValid;
}

QString OAIChart_Axes::getChartsId() const {
    return m_charts_id;
}
void OAIChart_Axes::setChartsId(const QString &charts_id) {
    m_charts_id = charts_id;
    m_charts_id_isSet = true;
}

bool OAIChart_Axes::is_charts_id_Set() const{
    return m_charts_id_isSet;
}

bool OAIChart_Axes::is_charts_id_Valid() const{
    return m_charts_id_isValid;
}

QString OAIChart_Axes::getId() const {
    return m_id;
}
void OAIChart_Axes::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIChart_Axes::is_id_Set() const{
    return m_id_isSet;
}

bool OAIChart_Axes::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIChart_Axes::getOoxmlId() const {
    return m_ooxml_id;
}
void OAIChart_Axes::setOoxmlId(const qint32 &ooxml_id) {
    m_ooxml_id = ooxml_id;
    m_ooxml_id_isSet = true;
}

bool OAIChart_Axes::is_ooxml_id_Set() const{
    return m_ooxml_id_isSet;
}

bool OAIChart_Axes::is_ooxml_id_Valid() const{
    return m_ooxml_id_isValid;
}

bool OAIChart_Axes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_axis_data_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_charts_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ooxml_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChart_Axes::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
