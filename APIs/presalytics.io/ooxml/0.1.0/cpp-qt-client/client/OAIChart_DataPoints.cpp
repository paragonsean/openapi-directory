/**
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChart_DataPoints.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChart_DataPoints::OAIChart_DataPoints(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChart_DataPoints::OAIChart_DataPoints() {
    this->initializeModel();
}

OAIChart_DataPoints::~OAIChart_DataPoints() {}

void OAIChart_DataPoints::initializeModel() {

    m_chart_data_id_isSet = false;
    m_chart_data_id_isValid = false;

    m_column_id_isSet = false;
    m_column_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_row_id_isSet = false;
    m_row_id_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIChart_DataPoints::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChart_DataPoints::fromJsonObject(QJsonObject json) {

    m_chart_data_id_isValid = ::OpenAPI::fromJsonValue(m_chart_data_id, json[QString("chartDataId")]);
    m_chart_data_id_isSet = !json[QString("chartDataId")].isNull() && m_chart_data_id_isValid;

    m_column_id_isValid = ::OpenAPI::fromJsonValue(m_column_id, json[QString("columnId")]);
    m_column_id_isSet = !json[QString("columnId")].isNull() && m_column_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_row_id_isValid = ::OpenAPI::fromJsonValue(m_row_id, json[QString("rowId")]);
    m_row_id_isSet = !json[QString("rowId")].isNull() && m_row_id_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIChart_DataPoints::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChart_DataPoints::asJsonObject() const {
    QJsonObject obj;
    if (m_chart_data_id_isSet) {
        obj.insert(QString("chartDataId"), ::OpenAPI::toJsonValue(m_chart_data_id));
    }
    if (m_column_id_isSet) {
        obj.insert(QString("columnId"), ::OpenAPI::toJsonValue(m_column_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_row_id_isSet) {
        obj.insert(QString("rowId"), ::OpenAPI::toJsonValue(m_row_id));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIChart_DataPoints::getChartDataId() const {
    return m_chart_data_id;
}
void OAIChart_DataPoints::setChartDataId(const QString &chart_data_id) {
    m_chart_data_id = chart_data_id;
    m_chart_data_id_isSet = true;
}

bool OAIChart_DataPoints::is_chart_data_id_Set() const{
    return m_chart_data_id_isSet;
}

bool OAIChart_DataPoints::is_chart_data_id_Valid() const{
    return m_chart_data_id_isValid;
}

QString OAIChart_DataPoints::getColumnId() const {
    return m_column_id;
}
void OAIChart_DataPoints::setColumnId(const QString &column_id) {
    m_column_id = column_id;
    m_column_id_isSet = true;
}

bool OAIChart_DataPoints::is_column_id_Set() const{
    return m_column_id_isSet;
}

bool OAIChart_DataPoints::is_column_id_Valid() const{
    return m_column_id_isValid;
}

QString OAIChart_DataPoints::getId() const {
    return m_id;
}
void OAIChart_DataPoints::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIChart_DataPoints::is_id_Set() const{
    return m_id_isSet;
}

bool OAIChart_DataPoints::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIChart_DataPoints::getRowId() const {
    return m_row_id;
}
void OAIChart_DataPoints::setRowId(const QString &row_id) {
    m_row_id = row_id;
    m_row_id_isSet = true;
}

bool OAIChart_DataPoints::is_row_id_Set() const{
    return m_row_id_isSet;
}

bool OAIChart_DataPoints::is_row_id_Valid() const{
    return m_row_id_isValid;
}

double OAIChart_DataPoints::getValue() const {
    return m_value;
}
void OAIChart_DataPoints::setValue(const double &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIChart_DataPoints::is_value_Set() const{
    return m_value_isSet;
}

bool OAIChart_DataPoints::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIChart_DataPoints::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_chart_data_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_column_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChart_DataPoints::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
