/**
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChart_ChartData_Details.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChart_ChartData_Details::OAIChart_ChartData_Details(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChart_ChartData_Details::OAIChart_ChartData_Details() {
    this->initializeModel();
}

OAIChart_ChartData_Details::~OAIChart_ChartData_Details() {}

void OAIChart_ChartData_Details::initializeModel() {

    m_chart_isSet = false;
    m_chart_isValid = false;

    m_chart_id_isSet = false;
    m_chart_id_isValid = false;

    m_column_collection_isSet = false;
    m_column_collection_isValid = false;

    m_data_points_isSet = false;
    m_data_points_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_modified_isSet = false;
    m_date_modified_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_row_collection_isSet = false;
    m_row_collection_isValid = false;

    m_user_created_isSet = false;
    m_user_created_isValid = false;

    m_user_modified_isSet = false;
    m_user_modified_isValid = false;
}

void OAIChart_ChartData_Details::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChart_ChartData_Details::fromJsonObject(QJsonObject json) {

    m_chart_isValid = ::OpenAPI::fromJsonValue(m_chart, json[QString("chart")]);
    m_chart_isSet = !json[QString("chart")].isNull() && m_chart_isValid;

    m_chart_id_isValid = ::OpenAPI::fromJsonValue(m_chart_id, json[QString("chartId")]);
    m_chart_id_isSet = !json[QString("chartId")].isNull() && m_chart_id_isValid;

    m_column_collection_isValid = ::OpenAPI::fromJsonValue(m_column_collection, json[QString("columnCollection")]);
    m_column_collection_isSet = !json[QString("columnCollection")].isNull() && m_column_collection_isValid;

    m_data_points_isValid = ::OpenAPI::fromJsonValue(m_data_points, json[QString("dataPoints")]);
    m_data_points_isSet = !json[QString("dataPoints")].isNull() && m_data_points_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("dateCreated")]);
    m_date_created_isSet = !json[QString("dateCreated")].isNull() && m_date_created_isValid;

    m_date_modified_isValid = ::OpenAPI::fromJsonValue(m_date_modified, json[QString("dateModified")]);
    m_date_modified_isSet = !json[QString("dateModified")].isNull() && m_date_modified_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_row_collection_isValid = ::OpenAPI::fromJsonValue(m_row_collection, json[QString("rowCollection")]);
    m_row_collection_isSet = !json[QString("rowCollection")].isNull() && m_row_collection_isValid;

    m_user_created_isValid = ::OpenAPI::fromJsonValue(m_user_created, json[QString("userCreated")]);
    m_user_created_isSet = !json[QString("userCreated")].isNull() && m_user_created_isValid;

    m_user_modified_isValid = ::OpenAPI::fromJsonValue(m_user_modified, json[QString("userModified")]);
    m_user_modified_isSet = !json[QString("userModified")].isNull() && m_user_modified_isValid;
}

QString OAIChart_ChartData_Details::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChart_ChartData_Details::asJsonObject() const {
    QJsonObject obj;
    if (m_chart.isSet()) {
        obj.insert(QString("chart"), ::OpenAPI::toJsonValue(m_chart));
    }
    if (m_chart_id_isSet) {
        obj.insert(QString("chartId"), ::OpenAPI::toJsonValue(m_chart_id));
    }
    if (m_column_collection.isSet()) {
        obj.insert(QString("columnCollection"), ::OpenAPI::toJsonValue(m_column_collection));
    }
    if (m_data_points.size() > 0) {
        obj.insert(QString("dataPoints"), ::OpenAPI::toJsonValue(m_data_points));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("dateCreated"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_modified_isSet) {
        obj.insert(QString("dateModified"), ::OpenAPI::toJsonValue(m_date_modified));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_row_collection.isSet()) {
        obj.insert(QString("rowCollection"), ::OpenAPI::toJsonValue(m_row_collection));
    }
    if (m_user_created_isSet) {
        obj.insert(QString("userCreated"), ::OpenAPI::toJsonValue(m_user_created));
    }
    if (m_user_modified_isSet) {
        obj.insert(QString("userModified"), ::OpenAPI::toJsonValue(m_user_modified));
    }
    return obj;
}

OAIChart_Charts_Details OAIChart_ChartData_Details::getChart() const {
    return m_chart;
}
void OAIChart_ChartData_Details::setChart(const OAIChart_Charts_Details &chart) {
    m_chart = chart;
    m_chart_isSet = true;
}

bool OAIChart_ChartData_Details::is_chart_Set() const{
    return m_chart_isSet;
}

bool OAIChart_ChartData_Details::is_chart_Valid() const{
    return m_chart_isValid;
}

QString OAIChart_ChartData_Details::getChartId() const {
    return m_chart_id;
}
void OAIChart_ChartData_Details::setChartId(const QString &chart_id) {
    m_chart_id = chart_id;
    m_chart_id_isSet = true;
}

bool OAIChart_ChartData_Details::is_chart_id_Set() const{
    return m_chart_id_isSet;
}

bool OAIChart_ChartData_Details::is_chart_id_Valid() const{
    return m_chart_id_isValid;
}

OAIChart_ColumnCollections_Details OAIChart_ChartData_Details::getColumnCollection() const {
    return m_column_collection;
}
void OAIChart_ChartData_Details::setColumnCollection(const OAIChart_ColumnCollections_Details &column_collection) {
    m_column_collection = column_collection;
    m_column_collection_isSet = true;
}

bool OAIChart_ChartData_Details::is_column_collection_Set() const{
    return m_column_collection_isSet;
}

bool OAIChart_ChartData_Details::is_column_collection_Valid() const{
    return m_column_collection_isValid;
}

QList<OAIChart_DataPoints_Details> OAIChart_ChartData_Details::getDataPoints() const {
    return m_data_points;
}
void OAIChart_ChartData_Details::setDataPoints(const QList<OAIChart_DataPoints_Details> &data_points) {
    m_data_points = data_points;
    m_data_points_isSet = true;
}

bool OAIChart_ChartData_Details::is_data_points_Set() const{
    return m_data_points_isSet;
}

bool OAIChart_ChartData_Details::is_data_points_Valid() const{
    return m_data_points_isValid;
}

QDateTime OAIChart_ChartData_Details::getDateCreated() const {
    return m_date_created;
}
void OAIChart_ChartData_Details::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIChart_ChartData_Details::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIChart_ChartData_Details::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAIChart_ChartData_Details::getDateModified() const {
    return m_date_modified;
}
void OAIChart_ChartData_Details::setDateModified(const QDateTime &date_modified) {
    m_date_modified = date_modified;
    m_date_modified_isSet = true;
}

bool OAIChart_ChartData_Details::is_date_modified_Set() const{
    return m_date_modified_isSet;
}

bool OAIChart_ChartData_Details::is_date_modified_Valid() const{
    return m_date_modified_isValid;
}

QString OAIChart_ChartData_Details::getId() const {
    return m_id;
}
void OAIChart_ChartData_Details::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIChart_ChartData_Details::is_id_Set() const{
    return m_id_isSet;
}

bool OAIChart_ChartData_Details::is_id_Valid() const{
    return m_id_isValid;
}

OAIChart_RowCollections_Details OAIChart_ChartData_Details::getRowCollection() const {
    return m_row_collection;
}
void OAIChart_ChartData_Details::setRowCollection(const OAIChart_RowCollections_Details &row_collection) {
    m_row_collection = row_collection;
    m_row_collection_isSet = true;
}

bool OAIChart_ChartData_Details::is_row_collection_Set() const{
    return m_row_collection_isSet;
}

bool OAIChart_ChartData_Details::is_row_collection_Valid() const{
    return m_row_collection_isValid;
}

QString OAIChart_ChartData_Details::getUserCreated() const {
    return m_user_created;
}
void OAIChart_ChartData_Details::setUserCreated(const QString &user_created) {
    m_user_created = user_created;
    m_user_created_isSet = true;
}

bool OAIChart_ChartData_Details::is_user_created_Set() const{
    return m_user_created_isSet;
}

bool OAIChart_ChartData_Details::is_user_created_Valid() const{
    return m_user_created_isValid;
}

QString OAIChart_ChartData_Details::getUserModified() const {
    return m_user_modified;
}
void OAIChart_ChartData_Details::setUserModified(const QString &user_modified) {
    m_user_modified = user_modified;
    m_user_modified_isSet = true;
}

bool OAIChart_ChartData_Details::is_user_modified_Set() const{
    return m_user_modified_isSet;
}

bool OAIChart_ChartData_Details::is_user_modified_Valid() const{
    return m_user_modified_isValid;
}

bool OAIChart_ChartData_Details::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_chart.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_chart_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_column_collection.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_points.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_collection.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_modified_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChart_ChartData_Details::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
