/**
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShared_TextContainer_Details.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShared_TextContainer_Details::OAIShared_TextContainer_Details(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShared_TextContainer_Details::OAIShared_TextContainer_Details() {
    this->initializeModel();
}

OAIShared_TextContainer_Details::~OAIShared_TextContainer_Details() {}

void OAIShared_TextContainer_Details::initializeModel() {

    m_axis_isSet = false;
    m_axis_isValid = false;

    m_axis_id_isSet = false;
    m_axis_id_isValid = false;

    m_chart_isSet = false;
    m_chart_isValid = false;

    m_chart_id_isSet = false;
    m_chart_id_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_modified_isSet = false;
    m_date_modified_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_outer_xml_isSet = false;
    m_outer_xml_isValid = false;

    m_paragraphs_isSet = false;
    m_paragraphs_isValid = false;

    m_parent_shape_isSet = false;
    m_parent_shape_isValid = false;

    m_shape_id_isSet = false;
    m_shape_id_isValid = false;

    m_table_cell_isSet = false;
    m_table_cell_isValid = false;

    m_table_cell_id_isSet = false;
    m_table_cell_id_isValid = false;

    m_user_created_isSet = false;
    m_user_created_isValid = false;

    m_user_modified_isSet = false;
    m_user_modified_isValid = false;
}

void OAIShared_TextContainer_Details::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShared_TextContainer_Details::fromJsonObject(QJsonObject json) {

    m_axis_isValid = ::OpenAPI::fromJsonValue(m_axis, json[QString("axis")]);
    m_axis_isSet = !json[QString("axis")].isNull() && m_axis_isValid;

    m_axis_id_isValid = ::OpenAPI::fromJsonValue(m_axis_id, json[QString("axisId")]);
    m_axis_id_isSet = !json[QString("axisId")].isNull() && m_axis_id_isValid;

    m_chart_isValid = ::OpenAPI::fromJsonValue(m_chart, json[QString("chart")]);
    m_chart_isSet = !json[QString("chart")].isNull() && m_chart_isValid;

    m_chart_id_isValid = ::OpenAPI::fromJsonValue(m_chart_id, json[QString("chartId")]);
    m_chart_id_isSet = !json[QString("chartId")].isNull() && m_chart_id_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("dateCreated")]);
    m_date_created_isSet = !json[QString("dateCreated")].isNull() && m_date_created_isValid;

    m_date_modified_isValid = ::OpenAPI::fromJsonValue(m_date_modified, json[QString("dateModified")]);
    m_date_modified_isSet = !json[QString("dateModified")].isNull() && m_date_modified_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_outer_xml_isValid = ::OpenAPI::fromJsonValue(m_outer_xml, json[QString("outerXml")]);
    m_outer_xml_isSet = !json[QString("outerXml")].isNull() && m_outer_xml_isValid;

    m_paragraphs_isValid = ::OpenAPI::fromJsonValue(m_paragraphs, json[QString("paragraphs")]);
    m_paragraphs_isSet = !json[QString("paragraphs")].isNull() && m_paragraphs_isValid;

    m_parent_shape_isValid = ::OpenAPI::fromJsonValue(m_parent_shape, json[QString("parentShape")]);
    m_parent_shape_isSet = !json[QString("parentShape")].isNull() && m_parent_shape_isValid;

    m_shape_id_isValid = ::OpenAPI::fromJsonValue(m_shape_id, json[QString("shapeId")]);
    m_shape_id_isSet = !json[QString("shapeId")].isNull() && m_shape_id_isValid;

    m_table_cell_isValid = ::OpenAPI::fromJsonValue(m_table_cell, json[QString("tableCell")]);
    m_table_cell_isSet = !json[QString("tableCell")].isNull() && m_table_cell_isValid;

    m_table_cell_id_isValid = ::OpenAPI::fromJsonValue(m_table_cell_id, json[QString("tableCellId")]);
    m_table_cell_id_isSet = !json[QString("tableCellId")].isNull() && m_table_cell_id_isValid;

    m_user_created_isValid = ::OpenAPI::fromJsonValue(m_user_created, json[QString("userCreated")]);
    m_user_created_isSet = !json[QString("userCreated")].isNull() && m_user_created_isValid;

    m_user_modified_isValid = ::OpenAPI::fromJsonValue(m_user_modified, json[QString("userModified")]);
    m_user_modified_isSet = !json[QString("userModified")].isNull() && m_user_modified_isValid;
}

QString OAIShared_TextContainer_Details::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShared_TextContainer_Details::asJsonObject() const {
    QJsonObject obj;
    if (m_axis.isSet()) {
        obj.insert(QString("axis"), ::OpenAPI::toJsonValue(m_axis));
    }
    if (m_axis_id_isSet) {
        obj.insert(QString("axisId"), ::OpenAPI::toJsonValue(m_axis_id));
    }
    if (m_chart.isSet()) {
        obj.insert(QString("chart"), ::OpenAPI::toJsonValue(m_chart));
    }
    if (m_chart_id_isSet) {
        obj.insert(QString("chartId"), ::OpenAPI::toJsonValue(m_chart_id));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("dateCreated"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_modified_isSet) {
        obj.insert(QString("dateModified"), ::OpenAPI::toJsonValue(m_date_modified));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_outer_xml_isSet) {
        obj.insert(QString("outerXml"), ::OpenAPI::toJsonValue(m_outer_xml));
    }
    if (m_paragraphs.size() > 0) {
        obj.insert(QString("paragraphs"), ::OpenAPI::toJsonValue(m_paragraphs));
    }
    if (m_parent_shape.isSet()) {
        obj.insert(QString("parentShape"), ::OpenAPI::toJsonValue(m_parent_shape));
    }
    if (m_shape_id_isSet) {
        obj.insert(QString("shapeId"), ::OpenAPI::toJsonValue(m_shape_id));
    }
    if (m_table_cell.isSet()) {
        obj.insert(QString("tableCell"), ::OpenAPI::toJsonValue(m_table_cell));
    }
    if (m_table_cell_id_isSet) {
        obj.insert(QString("tableCellId"), ::OpenAPI::toJsonValue(m_table_cell_id));
    }
    if (m_user_created_isSet) {
        obj.insert(QString("userCreated"), ::OpenAPI::toJsonValue(m_user_created));
    }
    if (m_user_modified_isSet) {
        obj.insert(QString("userModified"), ::OpenAPI::toJsonValue(m_user_modified));
    }
    return obj;
}

OAIChart_Axes_Details OAIShared_TextContainer_Details::getAxis() const {
    return m_axis;
}
void OAIShared_TextContainer_Details::setAxis(const OAIChart_Axes_Details &axis) {
    m_axis = axis;
    m_axis_isSet = true;
}

bool OAIShared_TextContainer_Details::is_axis_Set() const{
    return m_axis_isSet;
}

bool OAIShared_TextContainer_Details::is_axis_Valid() const{
    return m_axis_isValid;
}

QString OAIShared_TextContainer_Details::getAxisId() const {
    return m_axis_id;
}
void OAIShared_TextContainer_Details::setAxisId(const QString &axis_id) {
    m_axis_id = axis_id;
    m_axis_id_isSet = true;
}

bool OAIShared_TextContainer_Details::is_axis_id_Set() const{
    return m_axis_id_isSet;
}

bool OAIShared_TextContainer_Details::is_axis_id_Valid() const{
    return m_axis_id_isValid;
}

OAIChart_Charts_Details OAIShared_TextContainer_Details::getChart() const {
    return m_chart;
}
void OAIShared_TextContainer_Details::setChart(const OAIChart_Charts_Details &chart) {
    m_chart = chart;
    m_chart_isSet = true;
}

bool OAIShared_TextContainer_Details::is_chart_Set() const{
    return m_chart_isSet;
}

bool OAIShared_TextContainer_Details::is_chart_Valid() const{
    return m_chart_isValid;
}

QString OAIShared_TextContainer_Details::getChartId() const {
    return m_chart_id;
}
void OAIShared_TextContainer_Details::setChartId(const QString &chart_id) {
    m_chart_id = chart_id;
    m_chart_id_isSet = true;
}

bool OAIShared_TextContainer_Details::is_chart_id_Set() const{
    return m_chart_id_isSet;
}

bool OAIShared_TextContainer_Details::is_chart_id_Valid() const{
    return m_chart_id_isValid;
}

QDateTime OAIShared_TextContainer_Details::getDateCreated() const {
    return m_date_created;
}
void OAIShared_TextContainer_Details::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIShared_TextContainer_Details::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIShared_TextContainer_Details::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAIShared_TextContainer_Details::getDateModified() const {
    return m_date_modified;
}
void OAIShared_TextContainer_Details::setDateModified(const QDateTime &date_modified) {
    m_date_modified = date_modified;
    m_date_modified_isSet = true;
}

bool OAIShared_TextContainer_Details::is_date_modified_Set() const{
    return m_date_modified_isSet;
}

bool OAIShared_TextContainer_Details::is_date_modified_Valid() const{
    return m_date_modified_isValid;
}

QString OAIShared_TextContainer_Details::getId() const {
    return m_id;
}
void OAIShared_TextContainer_Details::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIShared_TextContainer_Details::is_id_Set() const{
    return m_id_isSet;
}

bool OAIShared_TextContainer_Details::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIShared_TextContainer_Details::getOuterXml() const {
    return m_outer_xml;
}
void OAIShared_TextContainer_Details::setOuterXml(const QString &outer_xml) {
    m_outer_xml = outer_xml;
    m_outer_xml_isSet = true;
}

bool OAIShared_TextContainer_Details::is_outer_xml_Set() const{
    return m_outer_xml_isSet;
}

bool OAIShared_TextContainer_Details::is_outer_xml_Valid() const{
    return m_outer_xml_isValid;
}

QList<OAIShared_Paragraph_Details> OAIShared_TextContainer_Details::getParagraphs() const {
    return m_paragraphs;
}
void OAIShared_TextContainer_Details::setParagraphs(const QList<OAIShared_Paragraph_Details> &paragraphs) {
    m_paragraphs = paragraphs;
    m_paragraphs_isSet = true;
}

bool OAIShared_TextContainer_Details::is_paragraphs_Set() const{
    return m_paragraphs_isSet;
}

bool OAIShared_TextContainer_Details::is_paragraphs_Valid() const{
    return m_paragraphs_isValid;
}

OAISlide_Shapes_Details OAIShared_TextContainer_Details::getParentShape() const {
    return m_parent_shape;
}
void OAIShared_TextContainer_Details::setParentShape(const OAISlide_Shapes_Details &parent_shape) {
    m_parent_shape = parent_shape;
    m_parent_shape_isSet = true;
}

bool OAIShared_TextContainer_Details::is_parent_shape_Set() const{
    return m_parent_shape_isSet;
}

bool OAIShared_TextContainer_Details::is_parent_shape_Valid() const{
    return m_parent_shape_isValid;
}

QString OAIShared_TextContainer_Details::getShapeId() const {
    return m_shape_id;
}
void OAIShared_TextContainer_Details::setShapeId(const QString &shape_id) {
    m_shape_id = shape_id;
    m_shape_id_isSet = true;
}

bool OAIShared_TextContainer_Details::is_shape_id_Set() const{
    return m_shape_id_isSet;
}

bool OAIShared_TextContainer_Details::is_shape_id_Valid() const{
    return m_shape_id_isValid;
}

OAITable_Cells_Details OAIShared_TextContainer_Details::getTableCell() const {
    return m_table_cell;
}
void OAIShared_TextContainer_Details::setTableCell(const OAITable_Cells_Details &table_cell) {
    m_table_cell = table_cell;
    m_table_cell_isSet = true;
}

bool OAIShared_TextContainer_Details::is_table_cell_Set() const{
    return m_table_cell_isSet;
}

bool OAIShared_TextContainer_Details::is_table_cell_Valid() const{
    return m_table_cell_isValid;
}

QString OAIShared_TextContainer_Details::getTableCellId() const {
    return m_table_cell_id;
}
void OAIShared_TextContainer_Details::setTableCellId(const QString &table_cell_id) {
    m_table_cell_id = table_cell_id;
    m_table_cell_id_isSet = true;
}

bool OAIShared_TextContainer_Details::is_table_cell_id_Set() const{
    return m_table_cell_id_isSet;
}

bool OAIShared_TextContainer_Details::is_table_cell_id_Valid() const{
    return m_table_cell_id_isValid;
}

QString OAIShared_TextContainer_Details::getUserCreated() const {
    return m_user_created;
}
void OAIShared_TextContainer_Details::setUserCreated(const QString &user_created) {
    m_user_created = user_created;
    m_user_created_isSet = true;
}

bool OAIShared_TextContainer_Details::is_user_created_Set() const{
    return m_user_created_isSet;
}

bool OAIShared_TextContainer_Details::is_user_created_Valid() const{
    return m_user_created_isValid;
}

QString OAIShared_TextContainer_Details::getUserModified() const {
    return m_user_modified;
}
void OAIShared_TextContainer_Details::setUserModified(const QString &user_modified) {
    m_user_modified = user_modified;
    m_user_modified_isSet = true;
}

bool OAIShared_TextContainer_Details::is_user_modified_Set() const{
    return m_user_modified_isSet;
}

bool OAIShared_TextContainer_Details::is_user_modified_Valid() const{
    return m_user_modified_isValid;
}

bool OAIShared_TextContainer_Details::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_axis.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_axis_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_chart.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_chart_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outer_xml_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_paragraphs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_shape.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shape_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_cell.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_cell_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_modified_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShared_TextContainer_Details::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
