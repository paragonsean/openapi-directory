/**
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITable_Borders_Details.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITable_Borders_Details::OAITable_Borders_Details(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITable_Borders_Details::OAITable_Borders_Details() {
    this->initializeModel();
}

OAITable_Borders_Details::~OAITable_Borders_Details() {}

void OAITable_Borders_Details::initializeModel() {

    m_b_lto_tr_isSet = false;
    m_b_lto_tr_isValid = false;

    m_bottom_isSet = false;
    m_bottom_isValid = false;

    m_cell_isSet = false;
    m_cell_isValid = false;

    m_cell_id_isSet = false;
    m_cell_id_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_modified_isSet = false;
    m_date_modified_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_left_isSet = false;
    m_left_isValid = false;

    m_right_isSet = false;
    m_right_isValid = false;

    m_t_lto_br_isSet = false;
    m_t_lto_br_isValid = false;

    m_top_isSet = false;
    m_top_isValid = false;

    m_user_created_isSet = false;
    m_user_created_isValid = false;

    m_user_modified_isSet = false;
    m_user_modified_isValid = false;
}

void OAITable_Borders_Details::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITable_Borders_Details::fromJsonObject(QJsonObject json) {

    m_b_lto_tr_isValid = ::OpenAPI::fromJsonValue(m_b_lto_tr, json[QString("bLtoTR")]);
    m_b_lto_tr_isSet = !json[QString("bLtoTR")].isNull() && m_b_lto_tr_isValid;

    m_bottom_isValid = ::OpenAPI::fromJsonValue(m_bottom, json[QString("bottom")]);
    m_bottom_isSet = !json[QString("bottom")].isNull() && m_bottom_isValid;

    m_cell_isValid = ::OpenAPI::fromJsonValue(m_cell, json[QString("cell")]);
    m_cell_isSet = !json[QString("cell")].isNull() && m_cell_isValid;

    m_cell_id_isValid = ::OpenAPI::fromJsonValue(m_cell_id, json[QString("cellId")]);
    m_cell_id_isSet = !json[QString("cellId")].isNull() && m_cell_id_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("dateCreated")]);
    m_date_created_isSet = !json[QString("dateCreated")].isNull() && m_date_created_isValid;

    m_date_modified_isValid = ::OpenAPI::fromJsonValue(m_date_modified, json[QString("dateModified")]);
    m_date_modified_isSet = !json[QString("dateModified")].isNull() && m_date_modified_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_left_isValid = ::OpenAPI::fromJsonValue(m_left, json[QString("left")]);
    m_left_isSet = !json[QString("left")].isNull() && m_left_isValid;

    m_right_isValid = ::OpenAPI::fromJsonValue(m_right, json[QString("right")]);
    m_right_isSet = !json[QString("right")].isNull() && m_right_isValid;

    m_t_lto_br_isValid = ::OpenAPI::fromJsonValue(m_t_lto_br, json[QString("tLtoBR")]);
    m_t_lto_br_isSet = !json[QString("tLtoBR")].isNull() && m_t_lto_br_isValid;

    m_top_isValid = ::OpenAPI::fromJsonValue(m_top, json[QString("top")]);
    m_top_isSet = !json[QString("top")].isNull() && m_top_isValid;

    m_user_created_isValid = ::OpenAPI::fromJsonValue(m_user_created, json[QString("userCreated")]);
    m_user_created_isSet = !json[QString("userCreated")].isNull() && m_user_created_isValid;

    m_user_modified_isValid = ::OpenAPI::fromJsonValue(m_user_modified, json[QString("userModified")]);
    m_user_modified_isSet = !json[QString("userModified")].isNull() && m_user_modified_isValid;
}

QString OAITable_Borders_Details::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITable_Borders_Details::asJsonObject() const {
    QJsonObject obj;
    if (m_b_lto_tr.isSet()) {
        obj.insert(QString("bLtoTR"), ::OpenAPI::toJsonValue(m_b_lto_tr));
    }
    if (m_bottom.isSet()) {
        obj.insert(QString("bottom"), ::OpenAPI::toJsonValue(m_bottom));
    }
    if (m_cell.isSet()) {
        obj.insert(QString("cell"), ::OpenAPI::toJsonValue(m_cell));
    }
    if (m_cell_id_isSet) {
        obj.insert(QString("cellId"), ::OpenAPI::toJsonValue(m_cell_id));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("dateCreated"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_modified_isSet) {
        obj.insert(QString("dateModified"), ::OpenAPI::toJsonValue(m_date_modified));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_left.isSet()) {
        obj.insert(QString("left"), ::OpenAPI::toJsonValue(m_left));
    }
    if (m_right.isSet()) {
        obj.insert(QString("right"), ::OpenAPI::toJsonValue(m_right));
    }
    if (m_t_lto_br.isSet()) {
        obj.insert(QString("tLtoBR"), ::OpenAPI::toJsonValue(m_t_lto_br));
    }
    if (m_top.isSet()) {
        obj.insert(QString("top"), ::OpenAPI::toJsonValue(m_top));
    }
    if (m_user_created_isSet) {
        obj.insert(QString("userCreated"), ::OpenAPI::toJsonValue(m_user_created));
    }
    if (m_user_modified_isSet) {
        obj.insert(QString("userModified"), ::OpenAPI::toJsonValue(m_user_modified));
    }
    return obj;
}

OAIShared_Lines_Details OAITable_Borders_Details::getBLtoTr() const {
    return m_b_lto_tr;
}
void OAITable_Borders_Details::setBLtoTr(const OAIShared_Lines_Details &b_lto_tr) {
    m_b_lto_tr = b_lto_tr;
    m_b_lto_tr_isSet = true;
}

bool OAITable_Borders_Details::is_b_lto_tr_Set() const{
    return m_b_lto_tr_isSet;
}

bool OAITable_Borders_Details::is_b_lto_tr_Valid() const{
    return m_b_lto_tr_isValid;
}

OAIShared_Lines_Details OAITable_Borders_Details::getBottom() const {
    return m_bottom;
}
void OAITable_Borders_Details::setBottom(const OAIShared_Lines_Details &bottom) {
    m_bottom = bottom;
    m_bottom_isSet = true;
}

bool OAITable_Borders_Details::is_bottom_Set() const{
    return m_bottom_isSet;
}

bool OAITable_Borders_Details::is_bottom_Valid() const{
    return m_bottom_isValid;
}

OAITable_Cells_Details OAITable_Borders_Details::getCell() const {
    return m_cell;
}
void OAITable_Borders_Details::setCell(const OAITable_Cells_Details &cell) {
    m_cell = cell;
    m_cell_isSet = true;
}

bool OAITable_Borders_Details::is_cell_Set() const{
    return m_cell_isSet;
}

bool OAITable_Borders_Details::is_cell_Valid() const{
    return m_cell_isValid;
}

QString OAITable_Borders_Details::getCellId() const {
    return m_cell_id;
}
void OAITable_Borders_Details::setCellId(const QString &cell_id) {
    m_cell_id = cell_id;
    m_cell_id_isSet = true;
}

bool OAITable_Borders_Details::is_cell_id_Set() const{
    return m_cell_id_isSet;
}

bool OAITable_Borders_Details::is_cell_id_Valid() const{
    return m_cell_id_isValid;
}

QDateTime OAITable_Borders_Details::getDateCreated() const {
    return m_date_created;
}
void OAITable_Borders_Details::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAITable_Borders_Details::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAITable_Borders_Details::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAITable_Borders_Details::getDateModified() const {
    return m_date_modified;
}
void OAITable_Borders_Details::setDateModified(const QDateTime &date_modified) {
    m_date_modified = date_modified;
    m_date_modified_isSet = true;
}

bool OAITable_Borders_Details::is_date_modified_Set() const{
    return m_date_modified_isSet;
}

bool OAITable_Borders_Details::is_date_modified_Valid() const{
    return m_date_modified_isValid;
}

QString OAITable_Borders_Details::getId() const {
    return m_id;
}
void OAITable_Borders_Details::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITable_Borders_Details::is_id_Set() const{
    return m_id_isSet;
}

bool OAITable_Borders_Details::is_id_Valid() const{
    return m_id_isValid;
}

OAIShared_Lines_Details OAITable_Borders_Details::getLeft() const {
    return m_left;
}
void OAITable_Borders_Details::setLeft(const OAIShared_Lines_Details &left) {
    m_left = left;
    m_left_isSet = true;
}

bool OAITable_Borders_Details::is_left_Set() const{
    return m_left_isSet;
}

bool OAITable_Borders_Details::is_left_Valid() const{
    return m_left_isValid;
}

OAIShared_Lines_Details OAITable_Borders_Details::getRight() const {
    return m_right;
}
void OAITable_Borders_Details::setRight(const OAIShared_Lines_Details &right) {
    m_right = right;
    m_right_isSet = true;
}

bool OAITable_Borders_Details::is_right_Set() const{
    return m_right_isSet;
}

bool OAITable_Borders_Details::is_right_Valid() const{
    return m_right_isValid;
}

OAIShared_Lines_Details OAITable_Borders_Details::getTLtoBr() const {
    return m_t_lto_br;
}
void OAITable_Borders_Details::setTLtoBr(const OAIShared_Lines_Details &t_lto_br) {
    m_t_lto_br = t_lto_br;
    m_t_lto_br_isSet = true;
}

bool OAITable_Borders_Details::is_t_lto_br_Set() const{
    return m_t_lto_br_isSet;
}

bool OAITable_Borders_Details::is_t_lto_br_Valid() const{
    return m_t_lto_br_isValid;
}

OAIShared_Lines_Details OAITable_Borders_Details::getTop() const {
    return m_top;
}
void OAITable_Borders_Details::setTop(const OAIShared_Lines_Details &top) {
    m_top = top;
    m_top_isSet = true;
}

bool OAITable_Borders_Details::is_top_Set() const{
    return m_top_isSet;
}

bool OAITable_Borders_Details::is_top_Valid() const{
    return m_top_isValid;
}

QString OAITable_Borders_Details::getUserCreated() const {
    return m_user_created;
}
void OAITable_Borders_Details::setUserCreated(const QString &user_created) {
    m_user_created = user_created;
    m_user_created_isSet = true;
}

bool OAITable_Borders_Details::is_user_created_Set() const{
    return m_user_created_isSet;
}

bool OAITable_Borders_Details::is_user_created_Valid() const{
    return m_user_created_isValid;
}

QString OAITable_Borders_Details::getUserModified() const {
    return m_user_modified;
}
void OAITable_Borders_Details::setUserModified(const QString &user_modified) {
    m_user_modified = user_modified;
    m_user_modified_isSet = true;
}

bool OAITable_Borders_Details::is_user_modified_Set() const{
    return m_user_modified_isSet;
}

bool OAITable_Borders_Details::is_user_modified_Valid() const{
    return m_user_modified_isValid;
}

bool OAITable_Borders_Details::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_b_lto_tr.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bottom.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cell.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cell_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_left.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_right.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_t_lto_br.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_top.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_modified_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITable_Borders_Details::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
