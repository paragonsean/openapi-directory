/**
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDocumentType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDocumentType::OAIDocumentType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDocumentType::OAIDocumentType() {
    this->initializeModel();
}

OAIDocumentType::~OAIDocumentType() {}

void OAIDocumentType::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_file_extension_isSet = false;
    m_file_extension_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_mime_type_isSet = false;
    m_mime_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_ooxml_package_type_isSet = false;
    m_ooxml_package_type_isValid = false;

    m_type_id_isSet = false;
    m_type_id_isValid = false;
}

void OAIDocumentType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDocumentType::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_file_extension_isValid = ::OpenAPI::fromJsonValue(m_file_extension, json[QString("fileExtension")]);
    m_file_extension_isSet = !json[QString("fileExtension")].isNull() && m_file_extension_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_mime_type_isValid = ::OpenAPI::fromJsonValue(m_mime_type, json[QString("mimeType")]);
    m_mime_type_isSet = !json[QString("mimeType")].isNull() && m_mime_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_ooxml_package_type_isValid = ::OpenAPI::fromJsonValue(m_ooxml_package_type, json[QString("ooxmlPackageType")]);
    m_ooxml_package_type_isSet = !json[QString("ooxmlPackageType")].isNull() && m_ooxml_package_type_isValid;

    m_type_id_isValid = ::OpenAPI::fromJsonValue(m_type_id, json[QString("typeId")]);
    m_type_id_isSet = !json[QString("typeId")].isNull() && m_type_id_isValid;
}

QString OAIDocumentType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDocumentType::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_file_extension_isSet) {
        obj.insert(QString("fileExtension"), ::OpenAPI::toJsonValue(m_file_extension));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_mime_type_isSet) {
        obj.insert(QString("mimeType"), ::OpenAPI::toJsonValue(m_mime_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_ooxml_package_type_isSet) {
        obj.insert(QString("ooxmlPackageType"), ::OpenAPI::toJsonValue(m_ooxml_package_type));
    }
    if (m_type_id_isSet) {
        obj.insert(QString("typeId"), ::OpenAPI::toJsonValue(m_type_id));
    }
    return obj;
}

QString OAIDocumentType::getDescription() const {
    return m_description;
}
void OAIDocumentType::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDocumentType::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDocumentType::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIDocumentType::getFileExtension() const {
    return m_file_extension;
}
void OAIDocumentType::setFileExtension(const QString &file_extension) {
    m_file_extension = file_extension;
    m_file_extension_isSet = true;
}

bool OAIDocumentType::is_file_extension_Set() const{
    return m_file_extension_isSet;
}

bool OAIDocumentType::is_file_extension_Valid() const{
    return m_file_extension_isValid;
}

QString OAIDocumentType::getId() const {
    return m_id;
}
void OAIDocumentType::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDocumentType::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDocumentType::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIDocumentType::getMimeType() const {
    return m_mime_type;
}
void OAIDocumentType::setMimeType(const QString &mime_type) {
    m_mime_type = mime_type;
    m_mime_type_isSet = true;
}

bool OAIDocumentType::is_mime_type_Set() const{
    return m_mime_type_isSet;
}

bool OAIDocumentType::is_mime_type_Valid() const{
    return m_mime_type_isValid;
}

QString OAIDocumentType::getName() const {
    return m_name;
}
void OAIDocumentType::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDocumentType::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDocumentType::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDocumentType::getOoxmlPackageType() const {
    return m_ooxml_package_type;
}
void OAIDocumentType::setOoxmlPackageType(const QString &ooxml_package_type) {
    m_ooxml_package_type = ooxml_package_type;
    m_ooxml_package_type_isSet = true;
}

bool OAIDocumentType::is_ooxml_package_type_Set() const{
    return m_ooxml_package_type_isSet;
}

bool OAIDocumentType::is_ooxml_package_type_Valid() const{
    return m_ooxml_package_type_isValid;
}

qint32 OAIDocumentType::getTypeId() const {
    return m_type_id;
}
void OAIDocumentType::setTypeId(const qint32 &type_id) {
    m_type_id = type_id;
    m_type_id_isSet = true;
}

bool OAIDocumentType::is_type_id_Set() const{
    return m_type_id_isSet;
}

bool OAIDocumentType::is_type_id_Valid() const{
    return m_type_id_isValid;
}

bool OAIDocumentType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_extension_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mime_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ooxml_package_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDocumentType::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
