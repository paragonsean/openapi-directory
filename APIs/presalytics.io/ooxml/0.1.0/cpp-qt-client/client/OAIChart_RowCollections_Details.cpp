/**
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChart_RowCollections_Details.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChart_RowCollections_Details::OAIChart_RowCollections_Details(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChart_RowCollections_Details::OAIChart_RowCollections_Details() {
    this->initializeModel();
}

OAIChart_RowCollections_Details::~OAIChart_RowCollections_Details() {}

void OAIChart_RowCollections_Details::initializeModel() {

    m_axis_isSet = false;
    m_axis_isValid = false;

    m_axis_id_isSet = false;
    m_axis_id_isValid = false;

    m_chart_data_isSet = false;
    m_chart_data_isValid = false;

    m_chart_data_id_isSet = false;
    m_chart_data_id_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_modified_isSet = false;
    m_date_modified_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_format_type_isSet = false;
    m_name_format_type_isValid = false;

    m_rows_isSet = false;
    m_rows_isValid = false;

    m_user_created_isSet = false;
    m_user_created_isValid = false;

    m_user_modified_isSet = false;
    m_user_modified_isValid = false;
}

void OAIChart_RowCollections_Details::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChart_RowCollections_Details::fromJsonObject(QJsonObject json) {

    m_axis_isValid = ::OpenAPI::fromJsonValue(m_axis, json[QString("axis")]);
    m_axis_isSet = !json[QString("axis")].isNull() && m_axis_isValid;

    m_axis_id_isValid = ::OpenAPI::fromJsonValue(m_axis_id, json[QString("axisId")]);
    m_axis_id_isSet = !json[QString("axisId")].isNull() && m_axis_id_isValid;

    m_chart_data_isValid = ::OpenAPI::fromJsonValue(m_chart_data, json[QString("chartData")]);
    m_chart_data_isSet = !json[QString("chartData")].isNull() && m_chart_data_isValid;

    m_chart_data_id_isValid = ::OpenAPI::fromJsonValue(m_chart_data_id, json[QString("chartDataId")]);
    m_chart_data_id_isSet = !json[QString("chartDataId")].isNull() && m_chart_data_id_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("dateCreated")]);
    m_date_created_isSet = !json[QString("dateCreated")].isNull() && m_date_created_isValid;

    m_date_modified_isValid = ::OpenAPI::fromJsonValue(m_date_modified, json[QString("dateModified")]);
    m_date_modified_isSet = !json[QString("dateModified")].isNull() && m_date_modified_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_format_type_isValid = ::OpenAPI::fromJsonValue(m_name_format_type, json[QString("nameFormatType")]);
    m_name_format_type_isSet = !json[QString("nameFormatType")].isNull() && m_name_format_type_isValid;

    m_rows_isValid = ::OpenAPI::fromJsonValue(m_rows, json[QString("rows")]);
    m_rows_isSet = !json[QString("rows")].isNull() && m_rows_isValid;

    m_user_created_isValid = ::OpenAPI::fromJsonValue(m_user_created, json[QString("userCreated")]);
    m_user_created_isSet = !json[QString("userCreated")].isNull() && m_user_created_isValid;

    m_user_modified_isValid = ::OpenAPI::fromJsonValue(m_user_modified, json[QString("userModified")]);
    m_user_modified_isSet = !json[QString("userModified")].isNull() && m_user_modified_isValid;
}

QString OAIChart_RowCollections_Details::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChart_RowCollections_Details::asJsonObject() const {
    QJsonObject obj;
    if (m_axis.isSet()) {
        obj.insert(QString("axis"), ::OpenAPI::toJsonValue(m_axis));
    }
    if (m_axis_id_isSet) {
        obj.insert(QString("axisId"), ::OpenAPI::toJsonValue(m_axis_id));
    }
    if (m_chart_data.isSet()) {
        obj.insert(QString("chartData"), ::OpenAPI::toJsonValue(m_chart_data));
    }
    if (m_chart_data_id_isSet) {
        obj.insert(QString("chartDataId"), ::OpenAPI::toJsonValue(m_chart_data_id));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("dateCreated"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_modified_isSet) {
        obj.insert(QString("dateModified"), ::OpenAPI::toJsonValue(m_date_modified));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_format_type_isSet) {
        obj.insert(QString("nameFormatType"), ::OpenAPI::toJsonValue(m_name_format_type));
    }
    if (m_rows.size() > 0) {
        obj.insert(QString("rows"), ::OpenAPI::toJsonValue(m_rows));
    }
    if (m_user_created_isSet) {
        obj.insert(QString("userCreated"), ::OpenAPI::toJsonValue(m_user_created));
    }
    if (m_user_modified_isSet) {
        obj.insert(QString("userModified"), ::OpenAPI::toJsonValue(m_user_modified));
    }
    return obj;
}

OAIChart_Axes_Details OAIChart_RowCollections_Details::getAxis() const {
    return m_axis;
}
void OAIChart_RowCollections_Details::setAxis(const OAIChart_Axes_Details &axis) {
    m_axis = axis;
    m_axis_isSet = true;
}

bool OAIChart_RowCollections_Details::is_axis_Set() const{
    return m_axis_isSet;
}

bool OAIChart_RowCollections_Details::is_axis_Valid() const{
    return m_axis_isValid;
}

QString OAIChart_RowCollections_Details::getAxisId() const {
    return m_axis_id;
}
void OAIChart_RowCollections_Details::setAxisId(const QString &axis_id) {
    m_axis_id = axis_id;
    m_axis_id_isSet = true;
}

bool OAIChart_RowCollections_Details::is_axis_id_Set() const{
    return m_axis_id_isSet;
}

bool OAIChart_RowCollections_Details::is_axis_id_Valid() const{
    return m_axis_id_isValid;
}

OAIChart_ChartData_Details OAIChart_RowCollections_Details::getChartData() const {
    return m_chart_data;
}
void OAIChart_RowCollections_Details::setChartData(const OAIChart_ChartData_Details &chart_data) {
    m_chart_data = chart_data;
    m_chart_data_isSet = true;
}

bool OAIChart_RowCollections_Details::is_chart_data_Set() const{
    return m_chart_data_isSet;
}

bool OAIChart_RowCollections_Details::is_chart_data_Valid() const{
    return m_chart_data_isValid;
}

QString OAIChart_RowCollections_Details::getChartDataId() const {
    return m_chart_data_id;
}
void OAIChart_RowCollections_Details::setChartDataId(const QString &chart_data_id) {
    m_chart_data_id = chart_data_id;
    m_chart_data_id_isSet = true;
}

bool OAIChart_RowCollections_Details::is_chart_data_id_Set() const{
    return m_chart_data_id_isSet;
}

bool OAIChart_RowCollections_Details::is_chart_data_id_Valid() const{
    return m_chart_data_id_isValid;
}

QDateTime OAIChart_RowCollections_Details::getDateCreated() const {
    return m_date_created;
}
void OAIChart_RowCollections_Details::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIChart_RowCollections_Details::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIChart_RowCollections_Details::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAIChart_RowCollections_Details::getDateModified() const {
    return m_date_modified;
}
void OAIChart_RowCollections_Details::setDateModified(const QDateTime &date_modified) {
    m_date_modified = date_modified;
    m_date_modified_isSet = true;
}

bool OAIChart_RowCollections_Details::is_date_modified_Set() const{
    return m_date_modified_isSet;
}

bool OAIChart_RowCollections_Details::is_date_modified_Valid() const{
    return m_date_modified_isValid;
}

QString OAIChart_RowCollections_Details::getId() const {
    return m_id;
}
void OAIChart_RowCollections_Details::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIChart_RowCollections_Details::is_id_Set() const{
    return m_id_isSet;
}

bool OAIChart_RowCollections_Details::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIChart_RowCollections_Details::getNameFormatType() const {
    return m_name_format_type;
}
void OAIChart_RowCollections_Details::setNameFormatType(const qint32 &name_format_type) {
    m_name_format_type = name_format_type;
    m_name_format_type_isSet = true;
}

bool OAIChart_RowCollections_Details::is_name_format_type_Set() const{
    return m_name_format_type_isSet;
}

bool OAIChart_RowCollections_Details::is_name_format_type_Valid() const{
    return m_name_format_type_isValid;
}

QList<OAIChart_Rows_Details> OAIChart_RowCollections_Details::getRows() const {
    return m_rows;
}
void OAIChart_RowCollections_Details::setRows(const QList<OAIChart_Rows_Details> &rows) {
    m_rows = rows;
    m_rows_isSet = true;
}

bool OAIChart_RowCollections_Details::is_rows_Set() const{
    return m_rows_isSet;
}

bool OAIChart_RowCollections_Details::is_rows_Valid() const{
    return m_rows_isValid;
}

QString OAIChart_RowCollections_Details::getUserCreated() const {
    return m_user_created;
}
void OAIChart_RowCollections_Details::setUserCreated(const QString &user_created) {
    m_user_created = user_created;
    m_user_created_isSet = true;
}

bool OAIChart_RowCollections_Details::is_user_created_Set() const{
    return m_user_created_isSet;
}

bool OAIChart_RowCollections_Details::is_user_created_Valid() const{
    return m_user_created_isValid;
}

QString OAIChart_RowCollections_Details::getUserModified() const {
    return m_user_modified;
}
void OAIChart_RowCollections_Details::setUserModified(const QString &user_modified) {
    m_user_modified = user_modified;
    m_user_modified_isSet = true;
}

bool OAIChart_RowCollections_Details::is_user_modified_Set() const{
    return m_user_modified_isSet;
}

bool OAIChart_RowCollections_Details::is_user_modified_Valid() const{
    return m_user_modified_isValid;
}

bool OAIChart_RowCollections_Details::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_axis.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_axis_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_chart_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_chart_data_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_format_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rows.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_modified_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChart_RowCollections_Details::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
