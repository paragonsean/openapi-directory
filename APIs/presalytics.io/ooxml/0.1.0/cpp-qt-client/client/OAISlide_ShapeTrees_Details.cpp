/**
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISlide_ShapeTrees_Details.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISlide_ShapeTrees_Details::OAISlide_ShapeTrees_Details(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISlide_ShapeTrees_Details::OAISlide_ShapeTrees_Details() {
    this->initializeModel();
}

OAISlide_ShapeTrees_Details::~OAISlide_ShapeTrees_Details() {}

void OAISlide_ShapeTrees_Details::initializeModel() {

    m_base_element_blob_url_isSet = false;
    m_base_element_blob_url_isValid = false;

    m_changed_base_element_blob_url_isSet = false;
    m_changed_base_element_blob_url_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_modified_isSet = false;
    m_date_modified_isValid = false;

    m_group_element_isSet = false;
    m_group_element_isValid = false;

    m_group_element_id_isSet = false;
    m_group_element_id_isValid = false;

    m_group_elements_isSet = false;
    m_group_elements_isValid = false;

    m_hidden_isSet = false;
    m_hidden_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_ooxml_id_isSet = false;
    m_ooxml_id_isValid = false;

    m_package_uri_isSet = false;
    m_package_uri_isValid = false;

    m_slide_isSet = false;
    m_slide_isValid = false;

    m_slide_id_isSet = false;
    m_slide_id_isValid = false;

    m_svg_blob_url_isSet = false;
    m_svg_blob_url_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_user_created_isSet = false;
    m_user_created_isValid = false;

    m_user_modified_isSet = false;
    m_user_modified_isValid = false;
}

void OAISlide_ShapeTrees_Details::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISlide_ShapeTrees_Details::fromJsonObject(QJsonObject json) {

    m_base_element_blob_url_isValid = ::OpenAPI::fromJsonValue(m_base_element_blob_url, json[QString("baseElementBlobUrl")]);
    m_base_element_blob_url_isSet = !json[QString("baseElementBlobUrl")].isNull() && m_base_element_blob_url_isValid;

    m_changed_base_element_blob_url_isValid = ::OpenAPI::fromJsonValue(m_changed_base_element_blob_url, json[QString("changedBaseElementBlobUrl")]);
    m_changed_base_element_blob_url_isSet = !json[QString("changedBaseElementBlobUrl")].isNull() && m_changed_base_element_blob_url_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("dateCreated")]);
    m_date_created_isSet = !json[QString("dateCreated")].isNull() && m_date_created_isValid;

    m_date_modified_isValid = ::OpenAPI::fromJsonValue(m_date_modified, json[QString("dateModified")]);
    m_date_modified_isSet = !json[QString("dateModified")].isNull() && m_date_modified_isValid;

    m_group_element_isValid = ::OpenAPI::fromJsonValue(m_group_element, json[QString("groupElement")]);
    m_group_element_isSet = !json[QString("groupElement")].isNull() && m_group_element_isValid;

    m_group_element_id_isValid = ::OpenAPI::fromJsonValue(m_group_element_id, json[QString("groupElementId")]);
    m_group_element_id_isSet = !json[QString("groupElementId")].isNull() && m_group_element_id_isValid;

    m_group_elements_isValid = ::OpenAPI::fromJsonValue(m_group_elements, json[QString("groupElements")]);
    m_group_elements_isSet = !json[QString("groupElements")].isNull() && m_group_elements_isValid;

    m_hidden_isValid = ::OpenAPI::fromJsonValue(m_hidden, json[QString("hidden")]);
    m_hidden_isSet = !json[QString("hidden")].isNull() && m_hidden_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_ooxml_id_isValid = ::OpenAPI::fromJsonValue(m_ooxml_id, json[QString("ooxmlId")]);
    m_ooxml_id_isSet = !json[QString("ooxmlId")].isNull() && m_ooxml_id_isValid;

    m_package_uri_isValid = ::OpenAPI::fromJsonValue(m_package_uri, json[QString("packageUri")]);
    m_package_uri_isSet = !json[QString("packageUri")].isNull() && m_package_uri_isValid;

    m_slide_isValid = ::OpenAPI::fromJsonValue(m_slide, json[QString("slide")]);
    m_slide_isSet = !json[QString("slide")].isNull() && m_slide_isValid;

    m_slide_id_isValid = ::OpenAPI::fromJsonValue(m_slide_id, json[QString("slideId")]);
    m_slide_id_isSet = !json[QString("slideId")].isNull() && m_slide_id_isValid;

    m_svg_blob_url_isValid = ::OpenAPI::fromJsonValue(m_svg_blob_url, json[QString("svgBlobUrl")]);
    m_svg_blob_url_isSet = !json[QString("svgBlobUrl")].isNull() && m_svg_blob_url_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_user_created_isValid = ::OpenAPI::fromJsonValue(m_user_created, json[QString("userCreated")]);
    m_user_created_isSet = !json[QString("userCreated")].isNull() && m_user_created_isValid;

    m_user_modified_isValid = ::OpenAPI::fromJsonValue(m_user_modified, json[QString("userModified")]);
    m_user_modified_isSet = !json[QString("userModified")].isNull() && m_user_modified_isValid;
}

QString OAISlide_ShapeTrees_Details::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISlide_ShapeTrees_Details::asJsonObject() const {
    QJsonObject obj;
    if (m_base_element_blob_url_isSet) {
        obj.insert(QString("baseElementBlobUrl"), ::OpenAPI::toJsonValue(m_base_element_blob_url));
    }
    if (m_changed_base_element_blob_url_isSet) {
        obj.insert(QString("changedBaseElementBlobUrl"), ::OpenAPI::toJsonValue(m_changed_base_element_blob_url));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("dateCreated"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_modified_isSet) {
        obj.insert(QString("dateModified"), ::OpenAPI::toJsonValue(m_date_modified));
    }
    if (m_group_element.isSet()) {
        obj.insert(QString("groupElement"), ::OpenAPI::toJsonValue(m_group_element));
    }
    if (m_group_element_id_isSet) {
        obj.insert(QString("groupElementId"), ::OpenAPI::toJsonValue(m_group_element_id));
    }
    if (m_group_elements.size() > 0) {
        obj.insert(QString("groupElements"), ::OpenAPI::toJsonValue(m_group_elements));
    }
    if (m_hidden_isSet) {
        obj.insert(QString("hidden"), ::OpenAPI::toJsonValue(m_hidden));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_ooxml_id_isSet) {
        obj.insert(QString("ooxmlId"), ::OpenAPI::toJsonValue(m_ooxml_id));
    }
    if (m_package_uri_isSet) {
        obj.insert(QString("packageUri"), ::OpenAPI::toJsonValue(m_package_uri));
    }
    if (m_slide.isSet()) {
        obj.insert(QString("slide"), ::OpenAPI::toJsonValue(m_slide));
    }
    if (m_slide_id_isSet) {
        obj.insert(QString("slideId"), ::OpenAPI::toJsonValue(m_slide_id));
    }
    if (m_svg_blob_url_isSet) {
        obj.insert(QString("svgBlobUrl"), ::OpenAPI::toJsonValue(m_svg_blob_url));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_user_created_isSet) {
        obj.insert(QString("userCreated"), ::OpenAPI::toJsonValue(m_user_created));
    }
    if (m_user_modified_isSet) {
        obj.insert(QString("userModified"), ::OpenAPI::toJsonValue(m_user_modified));
    }
    return obj;
}

QString OAISlide_ShapeTrees_Details::getBaseElementBlobUrl() const {
    return m_base_element_blob_url;
}
void OAISlide_ShapeTrees_Details::setBaseElementBlobUrl(const QString &base_element_blob_url) {
    m_base_element_blob_url = base_element_blob_url;
    m_base_element_blob_url_isSet = true;
}

bool OAISlide_ShapeTrees_Details::is_base_element_blob_url_Set() const{
    return m_base_element_blob_url_isSet;
}

bool OAISlide_ShapeTrees_Details::is_base_element_blob_url_Valid() const{
    return m_base_element_blob_url_isValid;
}

QString OAISlide_ShapeTrees_Details::getChangedBaseElementBlobUrl() const {
    return m_changed_base_element_blob_url;
}
void OAISlide_ShapeTrees_Details::setChangedBaseElementBlobUrl(const QString &changed_base_element_blob_url) {
    m_changed_base_element_blob_url = changed_base_element_blob_url;
    m_changed_base_element_blob_url_isSet = true;
}

bool OAISlide_ShapeTrees_Details::is_changed_base_element_blob_url_Set() const{
    return m_changed_base_element_blob_url_isSet;
}

bool OAISlide_ShapeTrees_Details::is_changed_base_element_blob_url_Valid() const{
    return m_changed_base_element_blob_url_isValid;
}

QDateTime OAISlide_ShapeTrees_Details::getDateCreated() const {
    return m_date_created;
}
void OAISlide_ShapeTrees_Details::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAISlide_ShapeTrees_Details::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAISlide_ShapeTrees_Details::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAISlide_ShapeTrees_Details::getDateModified() const {
    return m_date_modified;
}
void OAISlide_ShapeTrees_Details::setDateModified(const QDateTime &date_modified) {
    m_date_modified = date_modified;
    m_date_modified_isSet = true;
}

bool OAISlide_ShapeTrees_Details::is_date_modified_Set() const{
    return m_date_modified_isSet;
}

bool OAISlide_ShapeTrees_Details::is_date_modified_Valid() const{
    return m_date_modified_isValid;
}

OAISlide_GroupElements_Details OAISlide_ShapeTrees_Details::getGroupElement() const {
    return m_group_element;
}
void OAISlide_ShapeTrees_Details::setGroupElement(const OAISlide_GroupElements_Details &group_element) {
    m_group_element = group_element;
    m_group_element_isSet = true;
}

bool OAISlide_ShapeTrees_Details::is_group_element_Set() const{
    return m_group_element_isSet;
}

bool OAISlide_ShapeTrees_Details::is_group_element_Valid() const{
    return m_group_element_isValid;
}

QString OAISlide_ShapeTrees_Details::getGroupElementId() const {
    return m_group_element_id;
}
void OAISlide_ShapeTrees_Details::setGroupElementId(const QString &group_element_id) {
    m_group_element_id = group_element_id;
    m_group_element_id_isSet = true;
}

bool OAISlide_ShapeTrees_Details::is_group_element_id_Set() const{
    return m_group_element_id_isSet;
}

bool OAISlide_ShapeTrees_Details::is_group_element_id_Valid() const{
    return m_group_element_id_isValid;
}

QList<OAISlide_GroupElements_Details> OAISlide_ShapeTrees_Details::getGroupElements() const {
    return m_group_elements;
}
void OAISlide_ShapeTrees_Details::setGroupElements(const QList<OAISlide_GroupElements_Details> &group_elements) {
    m_group_elements = group_elements;
    m_group_elements_isSet = true;
}

bool OAISlide_ShapeTrees_Details::is_group_elements_Set() const{
    return m_group_elements_isSet;
}

bool OAISlide_ShapeTrees_Details::is_group_elements_Valid() const{
    return m_group_elements_isValid;
}

bool OAISlide_ShapeTrees_Details::isHidden() const {
    return m_hidden;
}
void OAISlide_ShapeTrees_Details::setHidden(const bool &hidden) {
    m_hidden = hidden;
    m_hidden_isSet = true;
}

bool OAISlide_ShapeTrees_Details::is_hidden_Set() const{
    return m_hidden_isSet;
}

bool OAISlide_ShapeTrees_Details::is_hidden_Valid() const{
    return m_hidden_isValid;
}

QString OAISlide_ShapeTrees_Details::getId() const {
    return m_id;
}
void OAISlide_ShapeTrees_Details::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISlide_ShapeTrees_Details::is_id_Set() const{
    return m_id_isSet;
}

bool OAISlide_ShapeTrees_Details::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISlide_ShapeTrees_Details::getName() const {
    return m_name;
}
void OAISlide_ShapeTrees_Details::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISlide_ShapeTrees_Details::is_name_Set() const{
    return m_name_isSet;
}

bool OAISlide_ShapeTrees_Details::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAISlide_ShapeTrees_Details::getOoxmlId() const {
    return m_ooxml_id;
}
void OAISlide_ShapeTrees_Details::setOoxmlId(const qint32 &ooxml_id) {
    m_ooxml_id = ooxml_id;
    m_ooxml_id_isSet = true;
}

bool OAISlide_ShapeTrees_Details::is_ooxml_id_Set() const{
    return m_ooxml_id_isSet;
}

bool OAISlide_ShapeTrees_Details::is_ooxml_id_Valid() const{
    return m_ooxml_id_isValid;
}

QString OAISlide_ShapeTrees_Details::getPackageUri() const {
    return m_package_uri;
}
void OAISlide_ShapeTrees_Details::setPackageUri(const QString &package_uri) {
    m_package_uri = package_uri;
    m_package_uri_isSet = true;
}

bool OAISlide_ShapeTrees_Details::is_package_uri_Set() const{
    return m_package_uri_isSet;
}

bool OAISlide_ShapeTrees_Details::is_package_uri_Valid() const{
    return m_package_uri_isValid;
}

OAISlide_Slides_Details OAISlide_ShapeTrees_Details::getSlide() const {
    return m_slide;
}
void OAISlide_ShapeTrees_Details::setSlide(const OAISlide_Slides_Details &slide) {
    m_slide = slide;
    m_slide_isSet = true;
}

bool OAISlide_ShapeTrees_Details::is_slide_Set() const{
    return m_slide_isSet;
}

bool OAISlide_ShapeTrees_Details::is_slide_Valid() const{
    return m_slide_isValid;
}

QString OAISlide_ShapeTrees_Details::getSlideId() const {
    return m_slide_id;
}
void OAISlide_ShapeTrees_Details::setSlideId(const QString &slide_id) {
    m_slide_id = slide_id;
    m_slide_id_isSet = true;
}

bool OAISlide_ShapeTrees_Details::is_slide_id_Set() const{
    return m_slide_id_isSet;
}

bool OAISlide_ShapeTrees_Details::is_slide_id_Valid() const{
    return m_slide_id_isValid;
}

QString OAISlide_ShapeTrees_Details::getSvgBlobUrl() const {
    return m_svg_blob_url;
}
void OAISlide_ShapeTrees_Details::setSvgBlobUrl(const QString &svg_blob_url) {
    m_svg_blob_url = svg_blob_url;
    m_svg_blob_url_isSet = true;
}

bool OAISlide_ShapeTrees_Details::is_svg_blob_url_Set() const{
    return m_svg_blob_url_isSet;
}

bool OAISlide_ShapeTrees_Details::is_svg_blob_url_Valid() const{
    return m_svg_blob_url_isValid;
}

QString OAISlide_ShapeTrees_Details::getTitle() const {
    return m_title;
}
void OAISlide_ShapeTrees_Details::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAISlide_ShapeTrees_Details::is_title_Set() const{
    return m_title_isSet;
}

bool OAISlide_ShapeTrees_Details::is_title_Valid() const{
    return m_title_isValid;
}

QString OAISlide_ShapeTrees_Details::getUserCreated() const {
    return m_user_created;
}
void OAISlide_ShapeTrees_Details::setUserCreated(const QString &user_created) {
    m_user_created = user_created;
    m_user_created_isSet = true;
}

bool OAISlide_ShapeTrees_Details::is_user_created_Set() const{
    return m_user_created_isSet;
}

bool OAISlide_ShapeTrees_Details::is_user_created_Valid() const{
    return m_user_created_isValid;
}

QString OAISlide_ShapeTrees_Details::getUserModified() const {
    return m_user_modified;
}
void OAISlide_ShapeTrees_Details::setUserModified(const QString &user_modified) {
    m_user_modified = user_modified;
    m_user_modified_isSet = true;
}

bool OAISlide_ShapeTrees_Details::is_user_modified_Set() const{
    return m_user_modified_isSet;
}

bool OAISlide_ShapeTrees_Details::is_user_modified_Valid() const{
    return m_user_modified_isValid;
}

bool OAISlide_ShapeTrees_Details::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base_element_blob_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_changed_base_element_blob_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_element.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_element_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_elements.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_hidden_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ooxml_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slide.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_slide_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_svg_blob_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_modified_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISlide_ShapeTrees_Details::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
