/**
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITablesApi_H
#define OAI_OAITablesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIChildObjects.h"
#include "OAIHttpFileElement.h"
#include "OAIOoxmlDTO.h"
#include "OAIProblemDetails.h"
#include "OAITable_TableDataDTO.h"
#include "OAITable_Tables.h"
#include "OAITable_Tables_Details.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITablesApi : public QObject {
    Q_OBJECT

public:
    OAITablesApi(const int timeOut = 0);
    ~OAITablesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    */
    virtual void tablesTablesChildobjectsGetId(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void tablesTablesDetailsGetId(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void tablesTablesGetId(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  updated bool [optional]
    */
    virtual void tablesTablesOpenofficexmlGetIdUpdated(const QString &id, const ::OpenAPI::OptionalParam<bool> &updated = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_ooxml_dto OAIOoxmlDTO [optional]
    */
    virtual void tablesTablesOpenofficexmlPutId(const QString &id, const ::OpenAPI::OptionalParam<OAIOoxmlDTO> &oai_ooxml_dto = ::OpenAPI::OptionalParam<OAIOoxmlDTO>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  use_cache bool [optional]
    */
    virtual void tablesTablesSvgGetIdUseCache(const QString &id, const ::OpenAPI::OptionalParam<bool> &use_cache = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void tablesTablesTableupdateGetId(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_table_table_data_dto OAITable_TableDataDTO [optional]
    */
    virtual void tablesTablesTableupdatePutId(const QString &id, const ::OpenAPI::OptionalParam<OAITable_TableDataDTO> &oai_table_table_data_dto = ::OpenAPI::OptionalParam<OAITable_TableDataDTO>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void tablesTablesChildobjectsGetIdCallback(OAIHttpRequestWorker *worker);
    void tablesTablesDetailsGetIdCallback(OAIHttpRequestWorker *worker);
    void tablesTablesGetIdCallback(OAIHttpRequestWorker *worker);
    void tablesTablesOpenofficexmlGetIdUpdatedCallback(OAIHttpRequestWorker *worker);
    void tablesTablesOpenofficexmlPutIdCallback(OAIHttpRequestWorker *worker);
    void tablesTablesSvgGetIdUseCacheCallback(OAIHttpRequestWorker *worker);
    void tablesTablesTableupdateGetIdCallback(OAIHttpRequestWorker *worker);
    void tablesTablesTableupdatePutIdCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void tablesTablesChildobjectsGetIdSignal(QList<OAIChildObjects> summary);
    void tablesTablesDetailsGetIdSignal(OAITable_Tables_Details summary);
    void tablesTablesGetIdSignal(OAITable_Tables summary);
    void tablesTablesOpenofficexmlGetIdUpdatedSignal(OAIOoxmlDTO summary);
    void tablesTablesOpenofficexmlPutIdSignal();
    void tablesTablesSvgGetIdUseCacheSignal(OAIHttpFileElement summary);
    void tablesTablesTableupdateGetIdSignal(OAITable_TableDataDTO summary);
    void tablesTablesTableupdatePutIdSignal();


    void tablesTablesChildobjectsGetIdSignalFull(OAIHttpRequestWorker *worker, QList<OAIChildObjects> summary);
    void tablesTablesDetailsGetIdSignalFull(OAIHttpRequestWorker *worker, OAITable_Tables_Details summary);
    void tablesTablesGetIdSignalFull(OAIHttpRequestWorker *worker, OAITable_Tables summary);
    void tablesTablesOpenofficexmlGetIdUpdatedSignalFull(OAIHttpRequestWorker *worker, OAIOoxmlDTO summary);
    void tablesTablesOpenofficexmlPutIdSignalFull(OAIHttpRequestWorker *worker);
    void tablesTablesSvgGetIdUseCacheSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void tablesTablesTableupdateGetIdSignalFull(OAIHttpRequestWorker *worker, OAITable_TableDataDTO summary);
    void tablesTablesTableupdatePutIdSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use tablesTablesChildobjectsGetIdSignalError() instead")
    void tablesTablesChildobjectsGetIdSignalE(QList<OAIChildObjects> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tablesTablesChildobjectsGetIdSignalError(QList<OAIChildObjects> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tablesTablesDetailsGetIdSignalError() instead")
    void tablesTablesDetailsGetIdSignalE(OAITable_Tables_Details summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tablesTablesDetailsGetIdSignalError(OAITable_Tables_Details summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tablesTablesGetIdSignalError() instead")
    void tablesTablesGetIdSignalE(OAITable_Tables summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tablesTablesGetIdSignalError(OAITable_Tables summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tablesTablesOpenofficexmlGetIdUpdatedSignalError() instead")
    void tablesTablesOpenofficexmlGetIdUpdatedSignalE(OAIOoxmlDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tablesTablesOpenofficexmlGetIdUpdatedSignalError(OAIOoxmlDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tablesTablesOpenofficexmlPutIdSignalError() instead")
    void tablesTablesOpenofficexmlPutIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void tablesTablesOpenofficexmlPutIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tablesTablesSvgGetIdUseCacheSignalError() instead")
    void tablesTablesSvgGetIdUseCacheSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tablesTablesSvgGetIdUseCacheSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tablesTablesTableupdateGetIdSignalError() instead")
    void tablesTablesTableupdateGetIdSignalE(OAITable_TableDataDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tablesTablesTableupdateGetIdSignalError(OAITable_TableDataDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tablesTablesTableupdatePutIdSignalError() instead")
    void tablesTablesTableupdatePutIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void tablesTablesTableupdatePutIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use tablesTablesChildobjectsGetIdSignalErrorFull() instead")
    void tablesTablesChildobjectsGetIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tablesTablesChildobjectsGetIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tablesTablesDetailsGetIdSignalErrorFull() instead")
    void tablesTablesDetailsGetIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tablesTablesDetailsGetIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tablesTablesGetIdSignalErrorFull() instead")
    void tablesTablesGetIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tablesTablesGetIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tablesTablesOpenofficexmlGetIdUpdatedSignalErrorFull() instead")
    void tablesTablesOpenofficexmlGetIdUpdatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tablesTablesOpenofficexmlGetIdUpdatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tablesTablesOpenofficexmlPutIdSignalErrorFull() instead")
    void tablesTablesOpenofficexmlPutIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tablesTablesOpenofficexmlPutIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tablesTablesSvgGetIdUseCacheSignalErrorFull() instead")
    void tablesTablesSvgGetIdUseCacheSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tablesTablesSvgGetIdUseCacheSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tablesTablesTableupdateGetIdSignalErrorFull() instead")
    void tablesTablesTableupdateGetIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tablesTablesTableupdateGetIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tablesTablesTableupdatePutIdSignalErrorFull() instead")
    void tablesTablesTableupdatePutIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tablesTablesTableupdatePutIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
