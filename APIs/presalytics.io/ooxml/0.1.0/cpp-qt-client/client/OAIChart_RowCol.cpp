/**
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChart_RowCol.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChart_RowCol::OAIChart_RowCol(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChart_RowCol::OAIChart_RowCol() {
    this->initializeModel();
}

OAIChart_RowCol::~OAIChart_RowCol() {}

void OAIChart_RowCol::initializeModel() {

    m_col_name_isSet = false;
    m_col_name_isValid = false;

    m_col_qualified_assy_isSet = false;
    m_col_qualified_assy_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_row_name_isSet = false;
    m_row_name_isValid = false;

    m_row_qualifed_assy_isSet = false;
    m_row_qualifed_assy_isValid = false;

    m_type_id_isSet = false;
    m_type_id_isValid = false;
}

void OAIChart_RowCol::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChart_RowCol::fromJsonObject(QJsonObject json) {

    m_col_name_isValid = ::OpenAPI::fromJsonValue(m_col_name, json[QString("colName")]);
    m_col_name_isSet = !json[QString("colName")].isNull() && m_col_name_isValid;

    m_col_qualified_assy_isValid = ::OpenAPI::fromJsonValue(m_col_qualified_assy, json[QString("colQualifiedAssy")]);
    m_col_qualified_assy_isSet = !json[QString("colQualifiedAssy")].isNull() && m_col_qualified_assy_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_row_name_isValid = ::OpenAPI::fromJsonValue(m_row_name, json[QString("rowName")]);
    m_row_name_isSet = !json[QString("rowName")].isNull() && m_row_name_isValid;

    m_row_qualifed_assy_isValid = ::OpenAPI::fromJsonValue(m_row_qualifed_assy, json[QString("rowQualifedAssy")]);
    m_row_qualifed_assy_isSet = !json[QString("rowQualifedAssy")].isNull() && m_row_qualifed_assy_isValid;

    m_type_id_isValid = ::OpenAPI::fromJsonValue(m_type_id, json[QString("typeId")]);
    m_type_id_isSet = !json[QString("typeId")].isNull() && m_type_id_isValid;
}

QString OAIChart_RowCol::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChart_RowCol::asJsonObject() const {
    QJsonObject obj;
    if (m_col_name_isSet) {
        obj.insert(QString("colName"), ::OpenAPI::toJsonValue(m_col_name));
    }
    if (m_col_qualified_assy_isSet) {
        obj.insert(QString("colQualifiedAssy"), ::OpenAPI::toJsonValue(m_col_qualified_assy));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_row_name_isSet) {
        obj.insert(QString("rowName"), ::OpenAPI::toJsonValue(m_row_name));
    }
    if (m_row_qualifed_assy_isSet) {
        obj.insert(QString("rowQualifedAssy"), ::OpenAPI::toJsonValue(m_row_qualifed_assy));
    }
    if (m_type_id_isSet) {
        obj.insert(QString("typeId"), ::OpenAPI::toJsonValue(m_type_id));
    }
    return obj;
}

QString OAIChart_RowCol::getColName() const {
    return m_col_name;
}
void OAIChart_RowCol::setColName(const QString &col_name) {
    m_col_name = col_name;
    m_col_name_isSet = true;
}

bool OAIChart_RowCol::is_col_name_Set() const{
    return m_col_name_isSet;
}

bool OAIChart_RowCol::is_col_name_Valid() const{
    return m_col_name_isValid;
}

QString OAIChart_RowCol::getColQualifiedAssy() const {
    return m_col_qualified_assy;
}
void OAIChart_RowCol::setColQualifiedAssy(const QString &col_qualified_assy) {
    m_col_qualified_assy = col_qualified_assy;
    m_col_qualified_assy_isSet = true;
}

bool OAIChart_RowCol::is_col_qualified_assy_Set() const{
    return m_col_qualified_assy_isSet;
}

bool OAIChart_RowCol::is_col_qualified_assy_Valid() const{
    return m_col_qualified_assy_isValid;
}

QString OAIChart_RowCol::getId() const {
    return m_id;
}
void OAIChart_RowCol::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIChart_RowCol::is_id_Set() const{
    return m_id_isSet;
}

bool OAIChart_RowCol::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIChart_RowCol::getRowName() const {
    return m_row_name;
}
void OAIChart_RowCol::setRowName(const QString &row_name) {
    m_row_name = row_name;
    m_row_name_isSet = true;
}

bool OAIChart_RowCol::is_row_name_Set() const{
    return m_row_name_isSet;
}

bool OAIChart_RowCol::is_row_name_Valid() const{
    return m_row_name_isValid;
}

QString OAIChart_RowCol::getRowQualifedAssy() const {
    return m_row_qualifed_assy;
}
void OAIChart_RowCol::setRowQualifedAssy(const QString &row_qualifed_assy) {
    m_row_qualifed_assy = row_qualifed_assy;
    m_row_qualifed_assy_isSet = true;
}

bool OAIChart_RowCol::is_row_qualifed_assy_Set() const{
    return m_row_qualifed_assy_isSet;
}

bool OAIChart_RowCol::is_row_qualifed_assy_Valid() const{
    return m_row_qualifed_assy_isValid;
}

qint32 OAIChart_RowCol::getTypeId() const {
    return m_type_id;
}
void OAIChart_RowCol::setTypeId(const qint32 &type_id) {
    m_type_id = type_id;
    m_type_id_isSet = true;
}

bool OAIChart_RowCol::is_type_id_Set() const{
    return m_type_id_isSet;
}

bool OAIChart_RowCol::is_type_id_Valid() const{
    return m_type_id_isValid;
}

bool OAIChart_RowCol::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_col_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_col_qualified_assy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_qualifed_assy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChart_RowCol::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
