/**
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITable_Cells_Details.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITable_Cells_Details::OAITable_Cells_Details(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITable_Cells_Details::OAITable_Cells_Details() {
    this->initializeModel();
}

OAITable_Cells_Details::~OAITable_Cells_Details() {}

void OAITable_Cells_Details::initializeModel() {

    m_border_isSet = false;
    m_border_isValid = false;

    m_column_isSet = false;
    m_column_isValid = false;

    m_column_id_isSet = false;
    m_column_id_isValid = false;

    m_column_span_isSet = false;
    m_column_span_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_modified_isSet = false;
    m_date_modified_isValid = false;

    m_fill_map_isSet = false;
    m_fill_map_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_merged_horozontal_isSet = false;
    m_is_merged_horozontal_isValid = false;

    m_is_merged_vertical_isSet = false;
    m_is_merged_vertical_isValid = false;

    m_row_isSet = false;
    m_row_isValid = false;

    m_row_id_isSet = false;
    m_row_id_isValid = false;

    m_row_span_isSet = false;
    m_row_span_isValid = false;

    m_text_container_isSet = false;
    m_text_container_isValid = false;

    m_user_created_isSet = false;
    m_user_created_isValid = false;

    m_user_modified_isSet = false;
    m_user_modified_isValid = false;
}

void OAITable_Cells_Details::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITable_Cells_Details::fromJsonObject(QJsonObject json) {

    m_border_isValid = ::OpenAPI::fromJsonValue(m_border, json[QString("border")]);
    m_border_isSet = !json[QString("border")].isNull() && m_border_isValid;

    m_column_isValid = ::OpenAPI::fromJsonValue(m_column, json[QString("column")]);
    m_column_isSet = !json[QString("column")].isNull() && m_column_isValid;

    m_column_id_isValid = ::OpenAPI::fromJsonValue(m_column_id, json[QString("columnId")]);
    m_column_id_isSet = !json[QString("columnId")].isNull() && m_column_id_isValid;

    m_column_span_isValid = ::OpenAPI::fromJsonValue(m_column_span, json[QString("columnSpan")]);
    m_column_span_isSet = !json[QString("columnSpan")].isNull() && m_column_span_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("dateCreated")]);
    m_date_created_isSet = !json[QString("dateCreated")].isNull() && m_date_created_isValid;

    m_date_modified_isValid = ::OpenAPI::fromJsonValue(m_date_modified, json[QString("dateModified")]);
    m_date_modified_isSet = !json[QString("dateModified")].isNull() && m_date_modified_isValid;

    m_fill_map_isValid = ::OpenAPI::fromJsonValue(m_fill_map, json[QString("fillMap")]);
    m_fill_map_isSet = !json[QString("fillMap")].isNull() && m_fill_map_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_merged_horozontal_isValid = ::OpenAPI::fromJsonValue(m_is_merged_horozontal, json[QString("isMergedHorozontal")]);
    m_is_merged_horozontal_isSet = !json[QString("isMergedHorozontal")].isNull() && m_is_merged_horozontal_isValid;

    m_is_merged_vertical_isValid = ::OpenAPI::fromJsonValue(m_is_merged_vertical, json[QString("isMergedVertical")]);
    m_is_merged_vertical_isSet = !json[QString("isMergedVertical")].isNull() && m_is_merged_vertical_isValid;

    m_row_isValid = ::OpenAPI::fromJsonValue(m_row, json[QString("row")]);
    m_row_isSet = !json[QString("row")].isNull() && m_row_isValid;

    m_row_id_isValid = ::OpenAPI::fromJsonValue(m_row_id, json[QString("rowId")]);
    m_row_id_isSet = !json[QString("rowId")].isNull() && m_row_id_isValid;

    m_row_span_isValid = ::OpenAPI::fromJsonValue(m_row_span, json[QString("rowSpan")]);
    m_row_span_isSet = !json[QString("rowSpan")].isNull() && m_row_span_isValid;

    m_text_container_isValid = ::OpenAPI::fromJsonValue(m_text_container, json[QString("textContainer")]);
    m_text_container_isSet = !json[QString("textContainer")].isNull() && m_text_container_isValid;

    m_user_created_isValid = ::OpenAPI::fromJsonValue(m_user_created, json[QString("userCreated")]);
    m_user_created_isSet = !json[QString("userCreated")].isNull() && m_user_created_isValid;

    m_user_modified_isValid = ::OpenAPI::fromJsonValue(m_user_modified, json[QString("userModified")]);
    m_user_modified_isSet = !json[QString("userModified")].isNull() && m_user_modified_isValid;
}

QString OAITable_Cells_Details::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITable_Cells_Details::asJsonObject() const {
    QJsonObject obj;
    if (m_border.isSet()) {
        obj.insert(QString("border"), ::OpenAPI::toJsonValue(m_border));
    }
    if (m_column.isSet()) {
        obj.insert(QString("column"), ::OpenAPI::toJsonValue(m_column));
    }
    if (m_column_id_isSet) {
        obj.insert(QString("columnId"), ::OpenAPI::toJsonValue(m_column_id));
    }
    if (m_column_span_isSet) {
        obj.insert(QString("columnSpan"), ::OpenAPI::toJsonValue(m_column_span));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("dateCreated"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_modified_isSet) {
        obj.insert(QString("dateModified"), ::OpenAPI::toJsonValue(m_date_modified));
    }
    if (m_fill_map.isSet()) {
        obj.insert(QString("fillMap"), ::OpenAPI::toJsonValue(m_fill_map));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_merged_horozontal_isSet) {
        obj.insert(QString("isMergedHorozontal"), ::OpenAPI::toJsonValue(m_is_merged_horozontal));
    }
    if (m_is_merged_vertical_isSet) {
        obj.insert(QString("isMergedVertical"), ::OpenAPI::toJsonValue(m_is_merged_vertical));
    }
    if (m_row.isSet()) {
        obj.insert(QString("row"), ::OpenAPI::toJsonValue(m_row));
    }
    if (m_row_id_isSet) {
        obj.insert(QString("rowId"), ::OpenAPI::toJsonValue(m_row_id));
    }
    if (m_row_span_isSet) {
        obj.insert(QString("rowSpan"), ::OpenAPI::toJsonValue(m_row_span));
    }
    if (m_text_container.isSet()) {
        obj.insert(QString("textContainer"), ::OpenAPI::toJsonValue(m_text_container));
    }
    if (m_user_created_isSet) {
        obj.insert(QString("userCreated"), ::OpenAPI::toJsonValue(m_user_created));
    }
    if (m_user_modified_isSet) {
        obj.insert(QString("userModified"), ::OpenAPI::toJsonValue(m_user_modified));
    }
    return obj;
}

OAITable_Borders_Details OAITable_Cells_Details::getBorder() const {
    return m_border;
}
void OAITable_Cells_Details::setBorder(const OAITable_Borders_Details &border) {
    m_border = border;
    m_border_isSet = true;
}

bool OAITable_Cells_Details::is_border_Set() const{
    return m_border_isSet;
}

bool OAITable_Cells_Details::is_border_Valid() const{
    return m_border_isValid;
}

OAITable_Columns_Details OAITable_Cells_Details::getColumn() const {
    return m_column;
}
void OAITable_Cells_Details::setColumn(const OAITable_Columns_Details &column) {
    m_column = column;
    m_column_isSet = true;
}

bool OAITable_Cells_Details::is_column_Set() const{
    return m_column_isSet;
}

bool OAITable_Cells_Details::is_column_Valid() const{
    return m_column_isValid;
}

QString OAITable_Cells_Details::getColumnId() const {
    return m_column_id;
}
void OAITable_Cells_Details::setColumnId(const QString &column_id) {
    m_column_id = column_id;
    m_column_id_isSet = true;
}

bool OAITable_Cells_Details::is_column_id_Set() const{
    return m_column_id_isSet;
}

bool OAITable_Cells_Details::is_column_id_Valid() const{
    return m_column_id_isValid;
}

qint32 OAITable_Cells_Details::getColumnSpan() const {
    return m_column_span;
}
void OAITable_Cells_Details::setColumnSpan(const qint32 &column_span) {
    m_column_span = column_span;
    m_column_span_isSet = true;
}

bool OAITable_Cells_Details::is_column_span_Set() const{
    return m_column_span_isSet;
}

bool OAITable_Cells_Details::is_column_span_Valid() const{
    return m_column_span_isValid;
}

QDateTime OAITable_Cells_Details::getDateCreated() const {
    return m_date_created;
}
void OAITable_Cells_Details::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAITable_Cells_Details::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAITable_Cells_Details::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAITable_Cells_Details::getDateModified() const {
    return m_date_modified;
}
void OAITable_Cells_Details::setDateModified(const QDateTime &date_modified) {
    m_date_modified = date_modified;
    m_date_modified_isSet = true;
}

bool OAITable_Cells_Details::is_date_modified_Set() const{
    return m_date_modified_isSet;
}

bool OAITable_Cells_Details::is_date_modified_Valid() const{
    return m_date_modified_isValid;
}

OAIShared_FillMap_Details OAITable_Cells_Details::getFillMap() const {
    return m_fill_map;
}
void OAITable_Cells_Details::setFillMap(const OAIShared_FillMap_Details &fill_map) {
    m_fill_map = fill_map;
    m_fill_map_isSet = true;
}

bool OAITable_Cells_Details::is_fill_map_Set() const{
    return m_fill_map_isSet;
}

bool OAITable_Cells_Details::is_fill_map_Valid() const{
    return m_fill_map_isValid;
}

QString OAITable_Cells_Details::getId() const {
    return m_id;
}
void OAITable_Cells_Details::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITable_Cells_Details::is_id_Set() const{
    return m_id_isSet;
}

bool OAITable_Cells_Details::is_id_Valid() const{
    return m_id_isValid;
}

bool OAITable_Cells_Details::isIsMergedHorozontal() const {
    return m_is_merged_horozontal;
}
void OAITable_Cells_Details::setIsMergedHorozontal(const bool &is_merged_horozontal) {
    m_is_merged_horozontal = is_merged_horozontal;
    m_is_merged_horozontal_isSet = true;
}

bool OAITable_Cells_Details::is_is_merged_horozontal_Set() const{
    return m_is_merged_horozontal_isSet;
}

bool OAITable_Cells_Details::is_is_merged_horozontal_Valid() const{
    return m_is_merged_horozontal_isValid;
}

bool OAITable_Cells_Details::isIsMergedVertical() const {
    return m_is_merged_vertical;
}
void OAITable_Cells_Details::setIsMergedVertical(const bool &is_merged_vertical) {
    m_is_merged_vertical = is_merged_vertical;
    m_is_merged_vertical_isSet = true;
}

bool OAITable_Cells_Details::is_is_merged_vertical_Set() const{
    return m_is_merged_vertical_isSet;
}

bool OAITable_Cells_Details::is_is_merged_vertical_Valid() const{
    return m_is_merged_vertical_isValid;
}

OAITable_Rows_Details OAITable_Cells_Details::getRow() const {
    return m_row;
}
void OAITable_Cells_Details::setRow(const OAITable_Rows_Details &row) {
    m_row = row;
    m_row_isSet = true;
}

bool OAITable_Cells_Details::is_row_Set() const{
    return m_row_isSet;
}

bool OAITable_Cells_Details::is_row_Valid() const{
    return m_row_isValid;
}

QString OAITable_Cells_Details::getRowId() const {
    return m_row_id;
}
void OAITable_Cells_Details::setRowId(const QString &row_id) {
    m_row_id = row_id;
    m_row_id_isSet = true;
}

bool OAITable_Cells_Details::is_row_id_Set() const{
    return m_row_id_isSet;
}

bool OAITable_Cells_Details::is_row_id_Valid() const{
    return m_row_id_isValid;
}

qint32 OAITable_Cells_Details::getRowSpan() const {
    return m_row_span;
}
void OAITable_Cells_Details::setRowSpan(const qint32 &row_span) {
    m_row_span = row_span;
    m_row_span_isSet = true;
}

bool OAITable_Cells_Details::is_row_span_Set() const{
    return m_row_span_isSet;
}

bool OAITable_Cells_Details::is_row_span_Valid() const{
    return m_row_span_isValid;
}

OAIShared_TextContainer_Details OAITable_Cells_Details::getTextContainer() const {
    return m_text_container;
}
void OAITable_Cells_Details::setTextContainer(const OAIShared_TextContainer_Details &text_container) {
    m_text_container = text_container;
    m_text_container_isSet = true;
}

bool OAITable_Cells_Details::is_text_container_Set() const{
    return m_text_container_isSet;
}

bool OAITable_Cells_Details::is_text_container_Valid() const{
    return m_text_container_isValid;
}

QString OAITable_Cells_Details::getUserCreated() const {
    return m_user_created;
}
void OAITable_Cells_Details::setUserCreated(const QString &user_created) {
    m_user_created = user_created;
    m_user_created_isSet = true;
}

bool OAITable_Cells_Details::is_user_created_Set() const{
    return m_user_created_isSet;
}

bool OAITable_Cells_Details::is_user_created_Valid() const{
    return m_user_created_isValid;
}

QString OAITable_Cells_Details::getUserModified() const {
    return m_user_modified;
}
void OAITable_Cells_Details::setUserModified(const QString &user_modified) {
    m_user_modified = user_modified;
    m_user_modified_isSet = true;
}

bool OAITable_Cells_Details::is_user_modified_Set() const{
    return m_user_modified_isSet;
}

bool OAITable_Cells_Details::is_user_modified_Valid() const{
    return m_user_modified_isValid;
}

bool OAITable_Cells_Details::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_border.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_column.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_column_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_column_span_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fill_map.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_merged_horozontal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_merged_vertical_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_row.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_span_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_container.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_modified_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITable_Cells_Details::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
