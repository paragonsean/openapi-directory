/**
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITable_Cells.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITable_Cells::OAITable_Cells(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITable_Cells::OAITable_Cells() {
    this->initializeModel();
}

OAITable_Cells::~OAITable_Cells() {}

void OAITable_Cells::initializeModel() {

    m_column_id_isSet = false;
    m_column_id_isValid = false;

    m_column_span_isSet = false;
    m_column_span_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_merged_horozontal_isSet = false;
    m_is_merged_horozontal_isValid = false;

    m_is_merged_vertical_isSet = false;
    m_is_merged_vertical_isValid = false;

    m_row_id_isSet = false;
    m_row_id_isValid = false;

    m_row_span_isSet = false;
    m_row_span_isValid = false;
}

void OAITable_Cells::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITable_Cells::fromJsonObject(QJsonObject json) {

    m_column_id_isValid = ::OpenAPI::fromJsonValue(m_column_id, json[QString("columnId")]);
    m_column_id_isSet = !json[QString("columnId")].isNull() && m_column_id_isValid;

    m_column_span_isValid = ::OpenAPI::fromJsonValue(m_column_span, json[QString("columnSpan")]);
    m_column_span_isSet = !json[QString("columnSpan")].isNull() && m_column_span_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_merged_horozontal_isValid = ::OpenAPI::fromJsonValue(m_is_merged_horozontal, json[QString("isMergedHorozontal")]);
    m_is_merged_horozontal_isSet = !json[QString("isMergedHorozontal")].isNull() && m_is_merged_horozontal_isValid;

    m_is_merged_vertical_isValid = ::OpenAPI::fromJsonValue(m_is_merged_vertical, json[QString("isMergedVertical")]);
    m_is_merged_vertical_isSet = !json[QString("isMergedVertical")].isNull() && m_is_merged_vertical_isValid;

    m_row_id_isValid = ::OpenAPI::fromJsonValue(m_row_id, json[QString("rowId")]);
    m_row_id_isSet = !json[QString("rowId")].isNull() && m_row_id_isValid;

    m_row_span_isValid = ::OpenAPI::fromJsonValue(m_row_span, json[QString("rowSpan")]);
    m_row_span_isSet = !json[QString("rowSpan")].isNull() && m_row_span_isValid;
}

QString OAITable_Cells::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITable_Cells::asJsonObject() const {
    QJsonObject obj;
    if (m_column_id_isSet) {
        obj.insert(QString("columnId"), ::OpenAPI::toJsonValue(m_column_id));
    }
    if (m_column_span_isSet) {
        obj.insert(QString("columnSpan"), ::OpenAPI::toJsonValue(m_column_span));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_merged_horozontal_isSet) {
        obj.insert(QString("isMergedHorozontal"), ::OpenAPI::toJsonValue(m_is_merged_horozontal));
    }
    if (m_is_merged_vertical_isSet) {
        obj.insert(QString("isMergedVertical"), ::OpenAPI::toJsonValue(m_is_merged_vertical));
    }
    if (m_row_id_isSet) {
        obj.insert(QString("rowId"), ::OpenAPI::toJsonValue(m_row_id));
    }
    if (m_row_span_isSet) {
        obj.insert(QString("rowSpan"), ::OpenAPI::toJsonValue(m_row_span));
    }
    return obj;
}

QString OAITable_Cells::getColumnId() const {
    return m_column_id;
}
void OAITable_Cells::setColumnId(const QString &column_id) {
    m_column_id = column_id;
    m_column_id_isSet = true;
}

bool OAITable_Cells::is_column_id_Set() const{
    return m_column_id_isSet;
}

bool OAITable_Cells::is_column_id_Valid() const{
    return m_column_id_isValid;
}

qint32 OAITable_Cells::getColumnSpan() const {
    return m_column_span;
}
void OAITable_Cells::setColumnSpan(const qint32 &column_span) {
    m_column_span = column_span;
    m_column_span_isSet = true;
}

bool OAITable_Cells::is_column_span_Set() const{
    return m_column_span_isSet;
}

bool OAITable_Cells::is_column_span_Valid() const{
    return m_column_span_isValid;
}

QString OAITable_Cells::getId() const {
    return m_id;
}
void OAITable_Cells::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITable_Cells::is_id_Set() const{
    return m_id_isSet;
}

bool OAITable_Cells::is_id_Valid() const{
    return m_id_isValid;
}

bool OAITable_Cells::isIsMergedHorozontal() const {
    return m_is_merged_horozontal;
}
void OAITable_Cells::setIsMergedHorozontal(const bool &is_merged_horozontal) {
    m_is_merged_horozontal = is_merged_horozontal;
    m_is_merged_horozontal_isSet = true;
}

bool OAITable_Cells::is_is_merged_horozontal_Set() const{
    return m_is_merged_horozontal_isSet;
}

bool OAITable_Cells::is_is_merged_horozontal_Valid() const{
    return m_is_merged_horozontal_isValid;
}

bool OAITable_Cells::isIsMergedVertical() const {
    return m_is_merged_vertical;
}
void OAITable_Cells::setIsMergedVertical(const bool &is_merged_vertical) {
    m_is_merged_vertical = is_merged_vertical;
    m_is_merged_vertical_isSet = true;
}

bool OAITable_Cells::is_is_merged_vertical_Set() const{
    return m_is_merged_vertical_isSet;
}

bool OAITable_Cells::is_is_merged_vertical_Valid() const{
    return m_is_merged_vertical_isValid;
}

QString OAITable_Cells::getRowId() const {
    return m_row_id;
}
void OAITable_Cells::setRowId(const QString &row_id) {
    m_row_id = row_id;
    m_row_id_isSet = true;
}

bool OAITable_Cells::is_row_id_Set() const{
    return m_row_id_isSet;
}

bool OAITable_Cells::is_row_id_Valid() const{
    return m_row_id_isValid;
}

qint32 OAITable_Cells::getRowSpan() const {
    return m_row_span;
}
void OAITable_Cells::setRowSpan(const qint32 &row_span) {
    m_row_span = row_span;
    m_row_span_isSet = true;
}

bool OAITable_Cells::is_row_span_Set() const{
    return m_row_span_isSet;
}

bool OAITable_Cells::is_row_span_Valid() const{
    return m_row_span_isValid;
}

bool OAITable_Cells::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_column_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_column_span_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_merged_horozontal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_merged_vertical_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_span_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITable_Cells::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
