/**
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShared_Text_Details.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShared_Text_Details::OAIShared_Text_Details(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShared_Text_Details::OAIShared_Text_Details() {
    this->initializeModel();
}

OAIShared_Text_Details::~OAIShared_Text_Details() {}

void OAIShared_Text_Details::initializeModel() {

    m_color_solid_fill_isSet = false;
    m_color_solid_fill_isValid = false;

    m_color_solid_fills_id_isSet = false;
    m_color_solid_fills_id_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_modified_isSet = false;
    m_date_modified_isValid = false;

    m_font_isSet = false;
    m_font_isValid = false;

    m_font_size_isSet = false;
    m_font_size_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_bold_isSet = false;
    m_is_bold_isValid = false;

    m_is_italic_isSet = false;
    m_is_italic_isValid = false;

    m_is_theme_font_isSet = false;
    m_is_theme_font_isValid = false;

    m_is_underline_isSet = false;
    m_is_underline_isValid = false;

    m_paragraph_isSet = false;
    m_paragraph_isValid = false;

    m_paragraph_id_isSet = false;
    m_paragraph_id_isValid = false;

    m_raw_text_isSet = false;
    m_raw_text_isValid = false;

    m_sequence_isSet = false;
    m_sequence_isValid = false;

    m_user_created_isSet = false;
    m_user_created_isValid = false;

    m_user_modified_isSet = false;
    m_user_modified_isValid = false;
}

void OAIShared_Text_Details::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShared_Text_Details::fromJsonObject(QJsonObject json) {

    m_color_solid_fill_isValid = ::OpenAPI::fromJsonValue(m_color_solid_fill, json[QString("colorSolidFill")]);
    m_color_solid_fill_isSet = !json[QString("colorSolidFill")].isNull() && m_color_solid_fill_isValid;

    m_color_solid_fills_id_isValid = ::OpenAPI::fromJsonValue(m_color_solid_fills_id, json[QString("colorSolidFillsId")]);
    m_color_solid_fills_id_isSet = !json[QString("colorSolidFillsId")].isNull() && m_color_solid_fills_id_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("dateCreated")]);
    m_date_created_isSet = !json[QString("dateCreated")].isNull() && m_date_created_isValid;

    m_date_modified_isValid = ::OpenAPI::fromJsonValue(m_date_modified, json[QString("dateModified")]);
    m_date_modified_isSet = !json[QString("dateModified")].isNull() && m_date_modified_isValid;

    m_font_isValid = ::OpenAPI::fromJsonValue(m_font, json[QString("font")]);
    m_font_isSet = !json[QString("font")].isNull() && m_font_isValid;

    m_font_size_isValid = ::OpenAPI::fromJsonValue(m_font_size, json[QString("fontSize")]);
    m_font_size_isSet = !json[QString("fontSize")].isNull() && m_font_size_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_bold_isValid = ::OpenAPI::fromJsonValue(m_is_bold, json[QString("isBold")]);
    m_is_bold_isSet = !json[QString("isBold")].isNull() && m_is_bold_isValid;

    m_is_italic_isValid = ::OpenAPI::fromJsonValue(m_is_italic, json[QString("isItalic")]);
    m_is_italic_isSet = !json[QString("isItalic")].isNull() && m_is_italic_isValid;

    m_is_theme_font_isValid = ::OpenAPI::fromJsonValue(m_is_theme_font, json[QString("isThemeFont")]);
    m_is_theme_font_isSet = !json[QString("isThemeFont")].isNull() && m_is_theme_font_isValid;

    m_is_underline_isValid = ::OpenAPI::fromJsonValue(m_is_underline, json[QString("isUnderline")]);
    m_is_underline_isSet = !json[QString("isUnderline")].isNull() && m_is_underline_isValid;

    m_paragraph_isValid = ::OpenAPI::fromJsonValue(m_paragraph, json[QString("paragraph")]);
    m_paragraph_isSet = !json[QString("paragraph")].isNull() && m_paragraph_isValid;

    m_paragraph_id_isValid = ::OpenAPI::fromJsonValue(m_paragraph_id, json[QString("paragraphId")]);
    m_paragraph_id_isSet = !json[QString("paragraphId")].isNull() && m_paragraph_id_isValid;

    m_raw_text_isValid = ::OpenAPI::fromJsonValue(m_raw_text, json[QString("rawText")]);
    m_raw_text_isSet = !json[QString("rawText")].isNull() && m_raw_text_isValid;

    m_sequence_isValid = ::OpenAPI::fromJsonValue(m_sequence, json[QString("sequence")]);
    m_sequence_isSet = !json[QString("sequence")].isNull() && m_sequence_isValid;

    m_user_created_isValid = ::OpenAPI::fromJsonValue(m_user_created, json[QString("userCreated")]);
    m_user_created_isSet = !json[QString("userCreated")].isNull() && m_user_created_isValid;

    m_user_modified_isValid = ::OpenAPI::fromJsonValue(m_user_modified, json[QString("userModified")]);
    m_user_modified_isSet = !json[QString("userModified")].isNull() && m_user_modified_isValid;
}

QString OAIShared_Text_Details::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShared_Text_Details::asJsonObject() const {
    QJsonObject obj;
    if (m_color_solid_fill.isSet()) {
        obj.insert(QString("colorSolidFill"), ::OpenAPI::toJsonValue(m_color_solid_fill));
    }
    if (m_color_solid_fills_id_isSet) {
        obj.insert(QString("colorSolidFillsId"), ::OpenAPI::toJsonValue(m_color_solid_fills_id));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("dateCreated"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_modified_isSet) {
        obj.insert(QString("dateModified"), ::OpenAPI::toJsonValue(m_date_modified));
    }
    if (m_font_isSet) {
        obj.insert(QString("font"), ::OpenAPI::toJsonValue(m_font));
    }
    if (m_font_size_isSet) {
        obj.insert(QString("fontSize"), ::OpenAPI::toJsonValue(m_font_size));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_bold_isSet) {
        obj.insert(QString("isBold"), ::OpenAPI::toJsonValue(m_is_bold));
    }
    if (m_is_italic_isSet) {
        obj.insert(QString("isItalic"), ::OpenAPI::toJsonValue(m_is_italic));
    }
    if (m_is_theme_font_isSet) {
        obj.insert(QString("isThemeFont"), ::OpenAPI::toJsonValue(m_is_theme_font));
    }
    if (m_is_underline_isSet) {
        obj.insert(QString("isUnderline"), ::OpenAPI::toJsonValue(m_is_underline));
    }
    if (m_paragraph.isSet()) {
        obj.insert(QString("paragraph"), ::OpenAPI::toJsonValue(m_paragraph));
    }
    if (m_paragraph_id_isSet) {
        obj.insert(QString("paragraphId"), ::OpenAPI::toJsonValue(m_paragraph_id));
    }
    if (m_raw_text_isSet) {
        obj.insert(QString("rawText"), ::OpenAPI::toJsonValue(m_raw_text));
    }
    if (m_sequence_isSet) {
        obj.insert(QString("sequence"), ::OpenAPI::toJsonValue(m_sequence));
    }
    if (m_user_created_isSet) {
        obj.insert(QString("userCreated"), ::OpenAPI::toJsonValue(m_user_created));
    }
    if (m_user_modified_isSet) {
        obj.insert(QString("userModified"), ::OpenAPI::toJsonValue(m_user_modified));
    }
    return obj;
}

OAIShared_SolidFills_Details OAIShared_Text_Details::getColorSolidFill() const {
    return m_color_solid_fill;
}
void OAIShared_Text_Details::setColorSolidFill(const OAIShared_SolidFills_Details &color_solid_fill) {
    m_color_solid_fill = color_solid_fill;
    m_color_solid_fill_isSet = true;
}

bool OAIShared_Text_Details::is_color_solid_fill_Set() const{
    return m_color_solid_fill_isSet;
}

bool OAIShared_Text_Details::is_color_solid_fill_Valid() const{
    return m_color_solid_fill_isValid;
}

QString OAIShared_Text_Details::getColorSolidFillsId() const {
    return m_color_solid_fills_id;
}
void OAIShared_Text_Details::setColorSolidFillsId(const QString &color_solid_fills_id) {
    m_color_solid_fills_id = color_solid_fills_id;
    m_color_solid_fills_id_isSet = true;
}

bool OAIShared_Text_Details::is_color_solid_fills_id_Set() const{
    return m_color_solid_fills_id_isSet;
}

bool OAIShared_Text_Details::is_color_solid_fills_id_Valid() const{
    return m_color_solid_fills_id_isValid;
}

QDateTime OAIShared_Text_Details::getDateCreated() const {
    return m_date_created;
}
void OAIShared_Text_Details::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIShared_Text_Details::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIShared_Text_Details::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAIShared_Text_Details::getDateModified() const {
    return m_date_modified;
}
void OAIShared_Text_Details::setDateModified(const QDateTime &date_modified) {
    m_date_modified = date_modified;
    m_date_modified_isSet = true;
}

bool OAIShared_Text_Details::is_date_modified_Set() const{
    return m_date_modified_isSet;
}

bool OAIShared_Text_Details::is_date_modified_Valid() const{
    return m_date_modified_isValid;
}

QString OAIShared_Text_Details::getFont() const {
    return m_font;
}
void OAIShared_Text_Details::setFont(const QString &font) {
    m_font = font;
    m_font_isSet = true;
}

bool OAIShared_Text_Details::is_font_Set() const{
    return m_font_isSet;
}

bool OAIShared_Text_Details::is_font_Valid() const{
    return m_font_isValid;
}

qint32 OAIShared_Text_Details::getFontSize() const {
    return m_font_size;
}
void OAIShared_Text_Details::setFontSize(const qint32 &font_size) {
    m_font_size = font_size;
    m_font_size_isSet = true;
}

bool OAIShared_Text_Details::is_font_size_Set() const{
    return m_font_size_isSet;
}

bool OAIShared_Text_Details::is_font_size_Valid() const{
    return m_font_size_isValid;
}

QString OAIShared_Text_Details::getId() const {
    return m_id;
}
void OAIShared_Text_Details::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIShared_Text_Details::is_id_Set() const{
    return m_id_isSet;
}

bool OAIShared_Text_Details::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIShared_Text_Details::isIsBold() const {
    return m_is_bold;
}
void OAIShared_Text_Details::setIsBold(const bool &is_bold) {
    m_is_bold = is_bold;
    m_is_bold_isSet = true;
}

bool OAIShared_Text_Details::is_is_bold_Set() const{
    return m_is_bold_isSet;
}

bool OAIShared_Text_Details::is_is_bold_Valid() const{
    return m_is_bold_isValid;
}

bool OAIShared_Text_Details::isIsItalic() const {
    return m_is_italic;
}
void OAIShared_Text_Details::setIsItalic(const bool &is_italic) {
    m_is_italic = is_italic;
    m_is_italic_isSet = true;
}

bool OAIShared_Text_Details::is_is_italic_Set() const{
    return m_is_italic_isSet;
}

bool OAIShared_Text_Details::is_is_italic_Valid() const{
    return m_is_italic_isValid;
}

bool OAIShared_Text_Details::isIsThemeFont() const {
    return m_is_theme_font;
}
void OAIShared_Text_Details::setIsThemeFont(const bool &is_theme_font) {
    m_is_theme_font = is_theme_font;
    m_is_theme_font_isSet = true;
}

bool OAIShared_Text_Details::is_is_theme_font_Set() const{
    return m_is_theme_font_isSet;
}

bool OAIShared_Text_Details::is_is_theme_font_Valid() const{
    return m_is_theme_font_isValid;
}

bool OAIShared_Text_Details::isIsUnderline() const {
    return m_is_underline;
}
void OAIShared_Text_Details::setIsUnderline(const bool &is_underline) {
    m_is_underline = is_underline;
    m_is_underline_isSet = true;
}

bool OAIShared_Text_Details::is_is_underline_Set() const{
    return m_is_underline_isSet;
}

bool OAIShared_Text_Details::is_is_underline_Valid() const{
    return m_is_underline_isValid;
}

OAIShared_Paragraph_Details OAIShared_Text_Details::getParagraph() const {
    return m_paragraph;
}
void OAIShared_Text_Details::setParagraph(const OAIShared_Paragraph_Details &paragraph) {
    m_paragraph = paragraph;
    m_paragraph_isSet = true;
}

bool OAIShared_Text_Details::is_paragraph_Set() const{
    return m_paragraph_isSet;
}

bool OAIShared_Text_Details::is_paragraph_Valid() const{
    return m_paragraph_isValid;
}

QString OAIShared_Text_Details::getParagraphId() const {
    return m_paragraph_id;
}
void OAIShared_Text_Details::setParagraphId(const QString &paragraph_id) {
    m_paragraph_id = paragraph_id;
    m_paragraph_id_isSet = true;
}

bool OAIShared_Text_Details::is_paragraph_id_Set() const{
    return m_paragraph_id_isSet;
}

bool OAIShared_Text_Details::is_paragraph_id_Valid() const{
    return m_paragraph_id_isValid;
}

QString OAIShared_Text_Details::getRawText() const {
    return m_raw_text;
}
void OAIShared_Text_Details::setRawText(const QString &raw_text) {
    m_raw_text = raw_text;
    m_raw_text_isSet = true;
}

bool OAIShared_Text_Details::is_raw_text_Set() const{
    return m_raw_text_isSet;
}

bool OAIShared_Text_Details::is_raw_text_Valid() const{
    return m_raw_text_isValid;
}

qint32 OAIShared_Text_Details::getSequence() const {
    return m_sequence;
}
void OAIShared_Text_Details::setSequence(const qint32 &sequence) {
    m_sequence = sequence;
    m_sequence_isSet = true;
}

bool OAIShared_Text_Details::is_sequence_Set() const{
    return m_sequence_isSet;
}

bool OAIShared_Text_Details::is_sequence_Valid() const{
    return m_sequence_isValid;
}

QString OAIShared_Text_Details::getUserCreated() const {
    return m_user_created;
}
void OAIShared_Text_Details::setUserCreated(const QString &user_created) {
    m_user_created = user_created;
    m_user_created_isSet = true;
}

bool OAIShared_Text_Details::is_user_created_Set() const{
    return m_user_created_isSet;
}

bool OAIShared_Text_Details::is_user_created_Valid() const{
    return m_user_created_isValid;
}

QString OAIShared_Text_Details::getUserModified() const {
    return m_user_modified;
}
void OAIShared_Text_Details::setUserModified(const QString &user_modified) {
    m_user_modified = user_modified;
    m_user_modified_isSet = true;
}

bool OAIShared_Text_Details::is_user_modified_Set() const{
    return m_user_modified_isSet;
}

bool OAIShared_Text_Details::is_user_modified_Valid() const{
    return m_user_modified_isValid;
}

bool OAIShared_Text_Details::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_color_solid_fill.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_solid_fills_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_font_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_font_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_bold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_italic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_theme_font_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_underline_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_paragraph.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_paragraph_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_raw_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sequence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_modified_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShared_Text_Details::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
