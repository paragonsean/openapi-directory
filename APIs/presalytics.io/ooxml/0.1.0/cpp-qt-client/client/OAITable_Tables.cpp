/**
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITable_Tables.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITable_Tables::OAITable_Tables(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITable_Tables::OAITable_Tables() {
    this->initializeModel();
}

OAITable_Tables::~OAITable_Tables() {}

void OAITable_Tables::initializeModel() {

    m_base_element_blob_url_isSet = false;
    m_base_element_blob_url_isValid = false;

    m_changed_base_element_blob_url_isSet = false;
    m_changed_base_element_blob_url_isValid = false;

    m_has_style_part_isSet = false;
    m_has_style_part_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_package_uri_isSet = false;
    m_package_uri_isValid = false;

    m_parent_graphic_id_isSet = false;
    m_parent_graphic_id_isValid = false;

    m_style_part_outer_xml_isSet = false;
    m_style_part_outer_xml_isValid = false;

    m_svg_blob_url_isSet = false;
    m_svg_blob_url_isValid = false;
}

void OAITable_Tables::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITable_Tables::fromJsonObject(QJsonObject json) {

    m_base_element_blob_url_isValid = ::OpenAPI::fromJsonValue(m_base_element_blob_url, json[QString("baseElementBlobUrl")]);
    m_base_element_blob_url_isSet = !json[QString("baseElementBlobUrl")].isNull() && m_base_element_blob_url_isValid;

    m_changed_base_element_blob_url_isValid = ::OpenAPI::fromJsonValue(m_changed_base_element_blob_url, json[QString("changedBaseElementBlobUrl")]);
    m_changed_base_element_blob_url_isSet = !json[QString("changedBaseElementBlobUrl")].isNull() && m_changed_base_element_blob_url_isValid;

    m_has_style_part_isValid = ::OpenAPI::fromJsonValue(m_has_style_part, json[QString("hasStylePart")]);
    m_has_style_part_isSet = !json[QString("hasStylePart")].isNull() && m_has_style_part_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_package_uri_isValid = ::OpenAPI::fromJsonValue(m_package_uri, json[QString("packageUri")]);
    m_package_uri_isSet = !json[QString("packageUri")].isNull() && m_package_uri_isValid;

    m_parent_graphic_id_isValid = ::OpenAPI::fromJsonValue(m_parent_graphic_id, json[QString("parentGraphicId")]);
    m_parent_graphic_id_isSet = !json[QString("parentGraphicId")].isNull() && m_parent_graphic_id_isValid;

    m_style_part_outer_xml_isValid = ::OpenAPI::fromJsonValue(m_style_part_outer_xml, json[QString("stylePartOuterXml")]);
    m_style_part_outer_xml_isSet = !json[QString("stylePartOuterXml")].isNull() && m_style_part_outer_xml_isValid;

    m_svg_blob_url_isValid = ::OpenAPI::fromJsonValue(m_svg_blob_url, json[QString("svgBlobUrl")]);
    m_svg_blob_url_isSet = !json[QString("svgBlobUrl")].isNull() && m_svg_blob_url_isValid;
}

QString OAITable_Tables::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITable_Tables::asJsonObject() const {
    QJsonObject obj;
    if (m_base_element_blob_url_isSet) {
        obj.insert(QString("baseElementBlobUrl"), ::OpenAPI::toJsonValue(m_base_element_blob_url));
    }
    if (m_changed_base_element_blob_url_isSet) {
        obj.insert(QString("changedBaseElementBlobUrl"), ::OpenAPI::toJsonValue(m_changed_base_element_blob_url));
    }
    if (m_has_style_part_isSet) {
        obj.insert(QString("hasStylePart"), ::OpenAPI::toJsonValue(m_has_style_part));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_package_uri_isSet) {
        obj.insert(QString("packageUri"), ::OpenAPI::toJsonValue(m_package_uri));
    }
    if (m_parent_graphic_id_isSet) {
        obj.insert(QString("parentGraphicId"), ::OpenAPI::toJsonValue(m_parent_graphic_id));
    }
    if (m_style_part_outer_xml_isSet) {
        obj.insert(QString("stylePartOuterXml"), ::OpenAPI::toJsonValue(m_style_part_outer_xml));
    }
    if (m_svg_blob_url_isSet) {
        obj.insert(QString("svgBlobUrl"), ::OpenAPI::toJsonValue(m_svg_blob_url));
    }
    return obj;
}

QString OAITable_Tables::getBaseElementBlobUrl() const {
    return m_base_element_blob_url;
}
void OAITable_Tables::setBaseElementBlobUrl(const QString &base_element_blob_url) {
    m_base_element_blob_url = base_element_blob_url;
    m_base_element_blob_url_isSet = true;
}

bool OAITable_Tables::is_base_element_blob_url_Set() const{
    return m_base_element_blob_url_isSet;
}

bool OAITable_Tables::is_base_element_blob_url_Valid() const{
    return m_base_element_blob_url_isValid;
}

QString OAITable_Tables::getChangedBaseElementBlobUrl() const {
    return m_changed_base_element_blob_url;
}
void OAITable_Tables::setChangedBaseElementBlobUrl(const QString &changed_base_element_blob_url) {
    m_changed_base_element_blob_url = changed_base_element_blob_url;
    m_changed_base_element_blob_url_isSet = true;
}

bool OAITable_Tables::is_changed_base_element_blob_url_Set() const{
    return m_changed_base_element_blob_url_isSet;
}

bool OAITable_Tables::is_changed_base_element_blob_url_Valid() const{
    return m_changed_base_element_blob_url_isValid;
}

bool OAITable_Tables::isHasStylePart() const {
    return m_has_style_part;
}
void OAITable_Tables::setHasStylePart(const bool &has_style_part) {
    m_has_style_part = has_style_part;
    m_has_style_part_isSet = true;
}

bool OAITable_Tables::is_has_style_part_Set() const{
    return m_has_style_part_isSet;
}

bool OAITable_Tables::is_has_style_part_Valid() const{
    return m_has_style_part_isValid;
}

QString OAITable_Tables::getId() const {
    return m_id;
}
void OAITable_Tables::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITable_Tables::is_id_Set() const{
    return m_id_isSet;
}

bool OAITable_Tables::is_id_Valid() const{
    return m_id_isValid;
}

QString OAITable_Tables::getName() const {
    return m_name;
}
void OAITable_Tables::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITable_Tables::is_name_Set() const{
    return m_name_isSet;
}

bool OAITable_Tables::is_name_Valid() const{
    return m_name_isValid;
}

QString OAITable_Tables::getPackageUri() const {
    return m_package_uri;
}
void OAITable_Tables::setPackageUri(const QString &package_uri) {
    m_package_uri = package_uri;
    m_package_uri_isSet = true;
}

bool OAITable_Tables::is_package_uri_Set() const{
    return m_package_uri_isSet;
}

bool OAITable_Tables::is_package_uri_Valid() const{
    return m_package_uri_isValid;
}

QString OAITable_Tables::getParentGraphicId() const {
    return m_parent_graphic_id;
}
void OAITable_Tables::setParentGraphicId(const QString &parent_graphic_id) {
    m_parent_graphic_id = parent_graphic_id;
    m_parent_graphic_id_isSet = true;
}

bool OAITable_Tables::is_parent_graphic_id_Set() const{
    return m_parent_graphic_id_isSet;
}

bool OAITable_Tables::is_parent_graphic_id_Valid() const{
    return m_parent_graphic_id_isValid;
}

QString OAITable_Tables::getStylePartOuterXml() const {
    return m_style_part_outer_xml;
}
void OAITable_Tables::setStylePartOuterXml(const QString &style_part_outer_xml) {
    m_style_part_outer_xml = style_part_outer_xml;
    m_style_part_outer_xml_isSet = true;
}

bool OAITable_Tables::is_style_part_outer_xml_Set() const{
    return m_style_part_outer_xml_isSet;
}

bool OAITable_Tables::is_style_part_outer_xml_Valid() const{
    return m_style_part_outer_xml_isValid;
}

QString OAITable_Tables::getSvgBlobUrl() const {
    return m_svg_blob_url;
}
void OAITable_Tables::setSvgBlobUrl(const QString &svg_blob_url) {
    m_svg_blob_url = svg_blob_url;
    m_svg_blob_url_isSet = true;
}

bool OAITable_Tables::is_svg_blob_url_Set() const{
    return m_svg_blob_url_isSet;
}

bool OAITable_Tables::is_svg_blob_url_Valid() const{
    return m_svg_blob_url_isValid;
}

bool OAITable_Tables::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base_element_blob_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_changed_base_element_blob_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_style_part_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_graphic_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_style_part_outer_xml_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_svg_blob_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITable_Tables::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
