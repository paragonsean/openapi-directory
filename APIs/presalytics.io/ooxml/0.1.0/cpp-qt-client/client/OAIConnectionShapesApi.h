/**
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIConnectionShapesApi_H
#define OAI_OAIConnectionShapesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIChildObjects.h"
#include "OAIHttpFileElement.h"
#include "OAIOoxmlDTO.h"
#include "OAIProblemDetails.h"
#include "OAISlide_Connector.h"
#include "OAISlide_Connector_Details.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIConnectionShapesApi : public QObject {
    Q_OBJECT

public:
    OAIConnectionShapesApi(const int timeOut = 0);
    ~OAIConnectionShapesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    */
    virtual void slidesConnectionshapesChildobjectsGetId(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void slidesConnectionshapesDetailsGetId(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void slidesConnectionshapesGetId(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  updated bool [optional]
    */
    virtual void slidesConnectionshapesOpenofficexmlGetIdUpdated(const QString &id, const ::OpenAPI::OptionalParam<bool> &updated = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_ooxml_dto OAIOoxmlDTO [optional]
    */
    virtual void slidesConnectionshapesOpenofficexmlPutId(const QString &id, const ::OpenAPI::OptionalParam<OAIOoxmlDTO> &oai_ooxml_dto = ::OpenAPI::OptionalParam<OAIOoxmlDTO>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  use_cache bool [optional]
    */
    virtual void slidesConnectionshapesSvgGetIdUseCache(const QString &id, const ::OpenAPI::OptionalParam<bool> &use_cache = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void slidesConnectionshapesChildobjectsGetIdCallback(OAIHttpRequestWorker *worker);
    void slidesConnectionshapesDetailsGetIdCallback(OAIHttpRequestWorker *worker);
    void slidesConnectionshapesGetIdCallback(OAIHttpRequestWorker *worker);
    void slidesConnectionshapesOpenofficexmlGetIdUpdatedCallback(OAIHttpRequestWorker *worker);
    void slidesConnectionshapesOpenofficexmlPutIdCallback(OAIHttpRequestWorker *worker);
    void slidesConnectionshapesSvgGetIdUseCacheCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void slidesConnectionshapesChildobjectsGetIdSignal(QList<OAIChildObjects> summary);
    void slidesConnectionshapesDetailsGetIdSignal(OAISlide_Connector_Details summary);
    void slidesConnectionshapesGetIdSignal(OAISlide_Connector summary);
    void slidesConnectionshapesOpenofficexmlGetIdUpdatedSignal(OAIOoxmlDTO summary);
    void slidesConnectionshapesOpenofficexmlPutIdSignal();
    void slidesConnectionshapesSvgGetIdUseCacheSignal(OAIHttpFileElement summary);


    void slidesConnectionshapesChildobjectsGetIdSignalFull(OAIHttpRequestWorker *worker, QList<OAIChildObjects> summary);
    void slidesConnectionshapesDetailsGetIdSignalFull(OAIHttpRequestWorker *worker, OAISlide_Connector_Details summary);
    void slidesConnectionshapesGetIdSignalFull(OAIHttpRequestWorker *worker, OAISlide_Connector summary);
    void slidesConnectionshapesOpenofficexmlGetIdUpdatedSignalFull(OAIHttpRequestWorker *worker, OAIOoxmlDTO summary);
    void slidesConnectionshapesOpenofficexmlPutIdSignalFull(OAIHttpRequestWorker *worker);
    void slidesConnectionshapesSvgGetIdUseCacheSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);

    Q_DECL_DEPRECATED_X("Use slidesConnectionshapesChildobjectsGetIdSignalError() instead")
    void slidesConnectionshapesChildobjectsGetIdSignalE(QList<OAIChildObjects> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slidesConnectionshapesChildobjectsGetIdSignalError(QList<OAIChildObjects> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slidesConnectionshapesDetailsGetIdSignalError() instead")
    void slidesConnectionshapesDetailsGetIdSignalE(OAISlide_Connector_Details summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slidesConnectionshapesDetailsGetIdSignalError(OAISlide_Connector_Details summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slidesConnectionshapesGetIdSignalError() instead")
    void slidesConnectionshapesGetIdSignalE(OAISlide_Connector summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slidesConnectionshapesGetIdSignalError(OAISlide_Connector summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slidesConnectionshapesOpenofficexmlGetIdUpdatedSignalError() instead")
    void slidesConnectionshapesOpenofficexmlGetIdUpdatedSignalE(OAIOoxmlDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slidesConnectionshapesOpenofficexmlGetIdUpdatedSignalError(OAIOoxmlDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slidesConnectionshapesOpenofficexmlPutIdSignalError() instead")
    void slidesConnectionshapesOpenofficexmlPutIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void slidesConnectionshapesOpenofficexmlPutIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slidesConnectionshapesSvgGetIdUseCacheSignalError() instead")
    void slidesConnectionshapesSvgGetIdUseCacheSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slidesConnectionshapesSvgGetIdUseCacheSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use slidesConnectionshapesChildobjectsGetIdSignalErrorFull() instead")
    void slidesConnectionshapesChildobjectsGetIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slidesConnectionshapesChildobjectsGetIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slidesConnectionshapesDetailsGetIdSignalErrorFull() instead")
    void slidesConnectionshapesDetailsGetIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slidesConnectionshapesDetailsGetIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slidesConnectionshapesGetIdSignalErrorFull() instead")
    void slidesConnectionshapesGetIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slidesConnectionshapesGetIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slidesConnectionshapesOpenofficexmlGetIdUpdatedSignalErrorFull() instead")
    void slidesConnectionshapesOpenofficexmlGetIdUpdatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slidesConnectionshapesOpenofficexmlGetIdUpdatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slidesConnectionshapesOpenofficexmlPutIdSignalErrorFull() instead")
    void slidesConnectionshapesOpenofficexmlPutIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slidesConnectionshapesOpenofficexmlPutIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slidesConnectionshapesSvgGetIdUseCacheSignalErrorFull() instead")
    void slidesConnectionshapesSvgGetIdUseCacheSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slidesConnectionshapesSvgGetIdUseCacheSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
