/**
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITable_Columns_Details.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITable_Columns_Details::OAITable_Columns_Details(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITable_Columns_Details::OAITable_Columns_Details() {
    this->initializeModel();
}

OAITable_Columns_Details::~OAITable_Columns_Details() {}

void OAITable_Columns_Details::initializeModel() {

    m_cells_isSet = false;
    m_cells_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_modified_isSet = false;
    m_date_modified_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_index_isSet = false;
    m_index_isValid = false;

    m_table_isSet = false;
    m_table_isValid = false;

    m_table_id_isSet = false;
    m_table_id_isValid = false;

    m_user_created_isSet = false;
    m_user_created_isValid = false;

    m_user_modified_isSet = false;
    m_user_modified_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAITable_Columns_Details::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITable_Columns_Details::fromJsonObject(QJsonObject json) {

    m_cells_isValid = ::OpenAPI::fromJsonValue(m_cells, json[QString("cells")]);
    m_cells_isSet = !json[QString("cells")].isNull() && m_cells_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("dateCreated")]);
    m_date_created_isSet = !json[QString("dateCreated")].isNull() && m_date_created_isValid;

    m_date_modified_isValid = ::OpenAPI::fromJsonValue(m_date_modified, json[QString("dateModified")]);
    m_date_modified_isSet = !json[QString("dateModified")].isNull() && m_date_modified_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_index_isValid = ::OpenAPI::fromJsonValue(m_index, json[QString("index")]);
    m_index_isSet = !json[QString("index")].isNull() && m_index_isValid;

    m_table_isValid = ::OpenAPI::fromJsonValue(m_table, json[QString("table")]);
    m_table_isSet = !json[QString("table")].isNull() && m_table_isValid;

    m_table_id_isValid = ::OpenAPI::fromJsonValue(m_table_id, json[QString("tableId")]);
    m_table_id_isSet = !json[QString("tableId")].isNull() && m_table_id_isValid;

    m_user_created_isValid = ::OpenAPI::fromJsonValue(m_user_created, json[QString("userCreated")]);
    m_user_created_isSet = !json[QString("userCreated")].isNull() && m_user_created_isValid;

    m_user_modified_isValid = ::OpenAPI::fromJsonValue(m_user_modified, json[QString("userModified")]);
    m_user_modified_isSet = !json[QString("userModified")].isNull() && m_user_modified_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;
}

QString OAITable_Columns_Details::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITable_Columns_Details::asJsonObject() const {
    QJsonObject obj;
    if (m_cells.size() > 0) {
        obj.insert(QString("cells"), ::OpenAPI::toJsonValue(m_cells));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("dateCreated"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_modified_isSet) {
        obj.insert(QString("dateModified"), ::OpenAPI::toJsonValue(m_date_modified));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_index_isSet) {
        obj.insert(QString("index"), ::OpenAPI::toJsonValue(m_index));
    }
    if (m_table.isSet()) {
        obj.insert(QString("table"), ::OpenAPI::toJsonValue(m_table));
    }
    if (m_table_id_isSet) {
        obj.insert(QString("tableId"), ::OpenAPI::toJsonValue(m_table_id));
    }
    if (m_user_created_isSet) {
        obj.insert(QString("userCreated"), ::OpenAPI::toJsonValue(m_user_created));
    }
    if (m_user_modified_isSet) {
        obj.insert(QString("userModified"), ::OpenAPI::toJsonValue(m_user_modified));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

QList<OAITable_Cells_Details> OAITable_Columns_Details::getCells() const {
    return m_cells;
}
void OAITable_Columns_Details::setCells(const QList<OAITable_Cells_Details> &cells) {
    m_cells = cells;
    m_cells_isSet = true;
}

bool OAITable_Columns_Details::is_cells_Set() const{
    return m_cells_isSet;
}

bool OAITable_Columns_Details::is_cells_Valid() const{
    return m_cells_isValid;
}

QDateTime OAITable_Columns_Details::getDateCreated() const {
    return m_date_created;
}
void OAITable_Columns_Details::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAITable_Columns_Details::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAITable_Columns_Details::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAITable_Columns_Details::getDateModified() const {
    return m_date_modified;
}
void OAITable_Columns_Details::setDateModified(const QDateTime &date_modified) {
    m_date_modified = date_modified;
    m_date_modified_isSet = true;
}

bool OAITable_Columns_Details::is_date_modified_Set() const{
    return m_date_modified_isSet;
}

bool OAITable_Columns_Details::is_date_modified_Valid() const{
    return m_date_modified_isValid;
}

QString OAITable_Columns_Details::getId() const {
    return m_id;
}
void OAITable_Columns_Details::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITable_Columns_Details::is_id_Set() const{
    return m_id_isSet;
}

bool OAITable_Columns_Details::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAITable_Columns_Details::getIndex() const {
    return m_index;
}
void OAITable_Columns_Details::setIndex(const qint32 &index) {
    m_index = index;
    m_index_isSet = true;
}

bool OAITable_Columns_Details::is_index_Set() const{
    return m_index_isSet;
}

bool OAITable_Columns_Details::is_index_Valid() const{
    return m_index_isValid;
}

OAITable_Tables_Details OAITable_Columns_Details::getTable() const {
    return m_table;
}
void OAITable_Columns_Details::setTable(const OAITable_Tables_Details &table) {
    m_table = table;
    m_table_isSet = true;
}

bool OAITable_Columns_Details::is_table_Set() const{
    return m_table_isSet;
}

bool OAITable_Columns_Details::is_table_Valid() const{
    return m_table_isValid;
}

QString OAITable_Columns_Details::getTableId() const {
    return m_table_id;
}
void OAITable_Columns_Details::setTableId(const QString &table_id) {
    m_table_id = table_id;
    m_table_id_isSet = true;
}

bool OAITable_Columns_Details::is_table_id_Set() const{
    return m_table_id_isSet;
}

bool OAITable_Columns_Details::is_table_id_Valid() const{
    return m_table_id_isValid;
}

QString OAITable_Columns_Details::getUserCreated() const {
    return m_user_created;
}
void OAITable_Columns_Details::setUserCreated(const QString &user_created) {
    m_user_created = user_created;
    m_user_created_isSet = true;
}

bool OAITable_Columns_Details::is_user_created_Set() const{
    return m_user_created_isSet;
}

bool OAITable_Columns_Details::is_user_created_Valid() const{
    return m_user_created_isValid;
}

QString OAITable_Columns_Details::getUserModified() const {
    return m_user_modified;
}
void OAITable_Columns_Details::setUserModified(const QString &user_modified) {
    m_user_modified = user_modified;
    m_user_modified_isSet = true;
}

bool OAITable_Columns_Details::is_user_modified_Set() const{
    return m_user_modified_isSet;
}

bool OAITable_Columns_Details::is_user_modified_Valid() const{
    return m_user_modified_isValid;
}

qint64 OAITable_Columns_Details::getWidth() const {
    return m_width;
}
void OAITable_Columns_Details::setWidth(const qint64 &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAITable_Columns_Details::is_width_Set() const{
    return m_width_isSet;
}

bool OAITable_Columns_Details::is_width_Valid() const{
    return m_width_isValid;
}

bool OAITable_Columns_Details::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cells.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITable_Columns_Details::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
