/**
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITheme_CustomColors.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITheme_CustomColors::OAITheme_CustomColors(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITheme_CustomColors::OAITheme_CustomColors() {
    this->initializeModel();
}

OAITheme_CustomColors::~OAITheme_CustomColors() {}

void OAITheme_CustomColors::initializeModel() {

    m_hex_value_isSet = false;
    m_hex_value_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_theme_id_isSet = false;
    m_theme_id_isValid = false;
}

void OAITheme_CustomColors::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITheme_CustomColors::fromJsonObject(QJsonObject json) {

    m_hex_value_isValid = ::OpenAPI::fromJsonValue(m_hex_value, json[QString("hexValue")]);
    m_hex_value_isSet = !json[QString("hexValue")].isNull() && m_hex_value_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_theme_id_isValid = ::OpenAPI::fromJsonValue(m_theme_id, json[QString("themeId")]);
    m_theme_id_isSet = !json[QString("themeId")].isNull() && m_theme_id_isValid;
}

QString OAITheme_CustomColors::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITheme_CustomColors::asJsonObject() const {
    QJsonObject obj;
    if (m_hex_value_isSet) {
        obj.insert(QString("hexValue"), ::OpenAPI::toJsonValue(m_hex_value));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_theme_id_isSet) {
        obj.insert(QString("themeId"), ::OpenAPI::toJsonValue(m_theme_id));
    }
    return obj;
}

QString OAITheme_CustomColors::getHexValue() const {
    return m_hex_value;
}
void OAITheme_CustomColors::setHexValue(const QString &hex_value) {
    m_hex_value = hex_value;
    m_hex_value_isSet = true;
}

bool OAITheme_CustomColors::is_hex_value_Set() const{
    return m_hex_value_isSet;
}

bool OAITheme_CustomColors::is_hex_value_Valid() const{
    return m_hex_value_isValid;
}

QString OAITheme_CustomColors::getId() const {
    return m_id;
}
void OAITheme_CustomColors::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITheme_CustomColors::is_id_Set() const{
    return m_id_isSet;
}

bool OAITheme_CustomColors::is_id_Valid() const{
    return m_id_isValid;
}

QString OAITheme_CustomColors::getName() const {
    return m_name;
}
void OAITheme_CustomColors::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITheme_CustomColors::is_name_Set() const{
    return m_name_isSet;
}

bool OAITheme_CustomColors::is_name_Valid() const{
    return m_name_isValid;
}

QString OAITheme_CustomColors::getThemeId() const {
    return m_theme_id;
}
void OAITheme_CustomColors::setThemeId(const QString &theme_id) {
    m_theme_id = theme_id;
    m_theme_id_isSet = true;
}

bool OAITheme_CustomColors::is_theme_id_Set() const{
    return m_theme_id_isSet;
}

bool OAITheme_CustomColors::is_theme_id_Valid() const{
    return m_theme_id_isValid;
}

bool OAITheme_CustomColors::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_hex_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_theme_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITheme_CustomColors::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
