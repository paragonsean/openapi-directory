/**
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDocument_Details.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDocument_Details::OAIDocument_Details(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDocument_Details::OAIDocument_Details() {
    this->initializeModel();
}

OAIDocument_Details::~OAIDocument_Details() {}

void OAIDocument_Details::initializeModel() {

    m_base_element_blob_url_isSet = false;
    m_base_element_blob_url_isValid = false;

    m_blob_location_isSet = false;
    m_blob_location_isValid = false;

    m_changed_base_element_blob_url_isSet = false;
    m_changed_base_element_blob_url_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_modified_isSet = false;
    m_date_modified_isValid = false;

    m_document_type_id_isSet = false;
    m_document_type_id_isValid = false;

    m_filename_isSet = false;
    m_filename_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_owner_guid_isSet = false;
    m_owner_guid_isValid = false;

    m_package_uri_isSet = false;
    m_package_uri_isValid = false;

    m_slides_isSet = false;
    m_slides_isValid = false;

    m_story_id_isSet = false;
    m_story_id_isValid = false;

    m_table_styles_xml_blob_url_isSet = false;
    m_table_styles_xml_blob_url_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_user_created_isSet = false;
    m_user_created_isValid = false;

    m_user_modified_isSet = false;
    m_user_modified_isValid = false;
}

void OAIDocument_Details::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDocument_Details::fromJsonObject(QJsonObject json) {

    m_base_element_blob_url_isValid = ::OpenAPI::fromJsonValue(m_base_element_blob_url, json[QString("baseElementBlobUrl")]);
    m_base_element_blob_url_isSet = !json[QString("baseElementBlobUrl")].isNull() && m_base_element_blob_url_isValid;

    m_blob_location_isValid = ::OpenAPI::fromJsonValue(m_blob_location, json[QString("blobLocation")]);
    m_blob_location_isSet = !json[QString("blobLocation")].isNull() && m_blob_location_isValid;

    m_changed_base_element_blob_url_isValid = ::OpenAPI::fromJsonValue(m_changed_base_element_blob_url, json[QString("changedBaseElementBlobUrl")]);
    m_changed_base_element_blob_url_isSet = !json[QString("changedBaseElementBlobUrl")].isNull() && m_changed_base_element_blob_url_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("dateCreated")]);
    m_date_created_isSet = !json[QString("dateCreated")].isNull() && m_date_created_isValid;

    m_date_modified_isValid = ::OpenAPI::fromJsonValue(m_date_modified, json[QString("dateModified")]);
    m_date_modified_isSet = !json[QString("dateModified")].isNull() && m_date_modified_isValid;

    m_document_type_id_isValid = ::OpenAPI::fromJsonValue(m_document_type_id, json[QString("documentTypeId")]);
    m_document_type_id_isSet = !json[QString("documentTypeId")].isNull() && m_document_type_id_isValid;

    m_filename_isValid = ::OpenAPI::fromJsonValue(m_filename, json[QString("filename")]);
    m_filename_isSet = !json[QString("filename")].isNull() && m_filename_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_owner_guid_isValid = ::OpenAPI::fromJsonValue(m_owner_guid, json[QString("ownerGuid")]);
    m_owner_guid_isSet = !json[QString("ownerGuid")].isNull() && m_owner_guid_isValid;

    m_package_uri_isValid = ::OpenAPI::fromJsonValue(m_package_uri, json[QString("packageUri")]);
    m_package_uri_isSet = !json[QString("packageUri")].isNull() && m_package_uri_isValid;

    m_slides_isValid = ::OpenAPI::fromJsonValue(m_slides, json[QString("slides")]);
    m_slides_isSet = !json[QString("slides")].isNull() && m_slides_isValid;

    m_story_id_isValid = ::OpenAPI::fromJsonValue(m_story_id, json[QString("storyId")]);
    m_story_id_isSet = !json[QString("storyId")].isNull() && m_story_id_isValid;

    m_table_styles_xml_blob_url_isValid = ::OpenAPI::fromJsonValue(m_table_styles_xml_blob_url, json[QString("tableStylesXmlBlobUrl")]);
    m_table_styles_xml_blob_url_isSet = !json[QString("tableStylesXmlBlobUrl")].isNull() && m_table_styles_xml_blob_url_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_user_created_isValid = ::OpenAPI::fromJsonValue(m_user_created, json[QString("userCreated")]);
    m_user_created_isSet = !json[QString("userCreated")].isNull() && m_user_created_isValid;

    m_user_modified_isValid = ::OpenAPI::fromJsonValue(m_user_modified, json[QString("userModified")]);
    m_user_modified_isSet = !json[QString("userModified")].isNull() && m_user_modified_isValid;
}

QString OAIDocument_Details::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDocument_Details::asJsonObject() const {
    QJsonObject obj;
    if (m_base_element_blob_url_isSet) {
        obj.insert(QString("baseElementBlobUrl"), ::OpenAPI::toJsonValue(m_base_element_blob_url));
    }
    if (m_blob_location_isSet) {
        obj.insert(QString("blobLocation"), ::OpenAPI::toJsonValue(m_blob_location));
    }
    if (m_changed_base_element_blob_url_isSet) {
        obj.insert(QString("changedBaseElementBlobUrl"), ::OpenAPI::toJsonValue(m_changed_base_element_blob_url));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("dateCreated"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_modified_isSet) {
        obj.insert(QString("dateModified"), ::OpenAPI::toJsonValue(m_date_modified));
    }
    if (m_document_type_id_isSet) {
        obj.insert(QString("documentTypeId"), ::OpenAPI::toJsonValue(m_document_type_id));
    }
    if (m_filename_isSet) {
        obj.insert(QString("filename"), ::OpenAPI::toJsonValue(m_filename));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_owner_guid_isSet) {
        obj.insert(QString("ownerGuid"), ::OpenAPI::toJsonValue(m_owner_guid));
    }
    if (m_package_uri_isSet) {
        obj.insert(QString("packageUri"), ::OpenAPI::toJsonValue(m_package_uri));
    }
    if (m_slides.size() > 0) {
        obj.insert(QString("slides"), ::OpenAPI::toJsonValue(m_slides));
    }
    if (m_story_id_isSet) {
        obj.insert(QString("storyId"), ::OpenAPI::toJsonValue(m_story_id));
    }
    if (m_table_styles_xml_blob_url_isSet) {
        obj.insert(QString("tableStylesXmlBlobUrl"), ::OpenAPI::toJsonValue(m_table_styles_xml_blob_url));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_user_created_isSet) {
        obj.insert(QString("userCreated"), ::OpenAPI::toJsonValue(m_user_created));
    }
    if (m_user_modified_isSet) {
        obj.insert(QString("userModified"), ::OpenAPI::toJsonValue(m_user_modified));
    }
    return obj;
}

QString OAIDocument_Details::getBaseElementBlobUrl() const {
    return m_base_element_blob_url;
}
void OAIDocument_Details::setBaseElementBlobUrl(const QString &base_element_blob_url) {
    m_base_element_blob_url = base_element_blob_url;
    m_base_element_blob_url_isSet = true;
}

bool OAIDocument_Details::is_base_element_blob_url_Set() const{
    return m_base_element_blob_url_isSet;
}

bool OAIDocument_Details::is_base_element_blob_url_Valid() const{
    return m_base_element_blob_url_isValid;
}

QString OAIDocument_Details::getBlobLocation() const {
    return m_blob_location;
}
void OAIDocument_Details::setBlobLocation(const QString &blob_location) {
    m_blob_location = blob_location;
    m_blob_location_isSet = true;
}

bool OAIDocument_Details::is_blob_location_Set() const{
    return m_blob_location_isSet;
}

bool OAIDocument_Details::is_blob_location_Valid() const{
    return m_blob_location_isValid;
}

QString OAIDocument_Details::getChangedBaseElementBlobUrl() const {
    return m_changed_base_element_blob_url;
}
void OAIDocument_Details::setChangedBaseElementBlobUrl(const QString &changed_base_element_blob_url) {
    m_changed_base_element_blob_url = changed_base_element_blob_url;
    m_changed_base_element_blob_url_isSet = true;
}

bool OAIDocument_Details::is_changed_base_element_blob_url_Set() const{
    return m_changed_base_element_blob_url_isSet;
}

bool OAIDocument_Details::is_changed_base_element_blob_url_Valid() const{
    return m_changed_base_element_blob_url_isValid;
}

QDateTime OAIDocument_Details::getDateCreated() const {
    return m_date_created;
}
void OAIDocument_Details::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIDocument_Details::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIDocument_Details::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAIDocument_Details::getDateModified() const {
    return m_date_modified;
}
void OAIDocument_Details::setDateModified(const QDateTime &date_modified) {
    m_date_modified = date_modified;
    m_date_modified_isSet = true;
}

bool OAIDocument_Details::is_date_modified_Set() const{
    return m_date_modified_isSet;
}

bool OAIDocument_Details::is_date_modified_Valid() const{
    return m_date_modified_isValid;
}

qint32 OAIDocument_Details::getDocumentTypeId() const {
    return m_document_type_id;
}
void OAIDocument_Details::setDocumentTypeId(const qint32 &document_type_id) {
    m_document_type_id = document_type_id;
    m_document_type_id_isSet = true;
}

bool OAIDocument_Details::is_document_type_id_Set() const{
    return m_document_type_id_isSet;
}

bool OAIDocument_Details::is_document_type_id_Valid() const{
    return m_document_type_id_isValid;
}

QString OAIDocument_Details::getFilename() const {
    return m_filename;
}
void OAIDocument_Details::setFilename(const QString &filename) {
    m_filename = filename;
    m_filename_isSet = true;
}

bool OAIDocument_Details::is_filename_Set() const{
    return m_filename_isSet;
}

bool OAIDocument_Details::is_filename_Valid() const{
    return m_filename_isValid;
}

QString OAIDocument_Details::getId() const {
    return m_id;
}
void OAIDocument_Details::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDocument_Details::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDocument_Details::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIDocument_Details::getName() const {
    return m_name;
}
void OAIDocument_Details::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDocument_Details::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDocument_Details::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDocument_Details::getOwnerGuid() const {
    return m_owner_guid;
}
void OAIDocument_Details::setOwnerGuid(const QString &owner_guid) {
    m_owner_guid = owner_guid;
    m_owner_guid_isSet = true;
}

bool OAIDocument_Details::is_owner_guid_Set() const{
    return m_owner_guid_isSet;
}

bool OAIDocument_Details::is_owner_guid_Valid() const{
    return m_owner_guid_isValid;
}

QString OAIDocument_Details::getPackageUri() const {
    return m_package_uri;
}
void OAIDocument_Details::setPackageUri(const QString &package_uri) {
    m_package_uri = package_uri;
    m_package_uri_isSet = true;
}

bool OAIDocument_Details::is_package_uri_Set() const{
    return m_package_uri_isSet;
}

bool OAIDocument_Details::is_package_uri_Valid() const{
    return m_package_uri_isValid;
}

QList<OAISlide_Slides_Details> OAIDocument_Details::getSlides() const {
    return m_slides;
}
void OAIDocument_Details::setSlides(const QList<OAISlide_Slides_Details> &slides) {
    m_slides = slides;
    m_slides_isSet = true;
}

bool OAIDocument_Details::is_slides_Set() const{
    return m_slides_isSet;
}

bool OAIDocument_Details::is_slides_Valid() const{
    return m_slides_isValid;
}

QString OAIDocument_Details::getStoryId() const {
    return m_story_id;
}
void OAIDocument_Details::setStoryId(const QString &story_id) {
    m_story_id = story_id;
    m_story_id_isSet = true;
}

bool OAIDocument_Details::is_story_id_Set() const{
    return m_story_id_isSet;
}

bool OAIDocument_Details::is_story_id_Valid() const{
    return m_story_id_isValid;
}

QString OAIDocument_Details::getTableStylesXmlBlobUrl() const {
    return m_table_styles_xml_blob_url;
}
void OAIDocument_Details::setTableStylesXmlBlobUrl(const QString &table_styles_xml_blob_url) {
    m_table_styles_xml_blob_url = table_styles_xml_blob_url;
    m_table_styles_xml_blob_url_isSet = true;
}

bool OAIDocument_Details::is_table_styles_xml_blob_url_Set() const{
    return m_table_styles_xml_blob_url_isSet;
}

bool OAIDocument_Details::is_table_styles_xml_blob_url_Valid() const{
    return m_table_styles_xml_blob_url_isValid;
}

QString OAIDocument_Details::getTitle() const {
    return m_title;
}
void OAIDocument_Details::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIDocument_Details::is_title_Set() const{
    return m_title_isSet;
}

bool OAIDocument_Details::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIDocument_Details::getUserCreated() const {
    return m_user_created;
}
void OAIDocument_Details::setUserCreated(const QString &user_created) {
    m_user_created = user_created;
    m_user_created_isSet = true;
}

bool OAIDocument_Details::is_user_created_Set() const{
    return m_user_created_isSet;
}

bool OAIDocument_Details::is_user_created_Valid() const{
    return m_user_created_isValid;
}

QString OAIDocument_Details::getUserModified() const {
    return m_user_modified;
}
void OAIDocument_Details::setUserModified(const QString &user_modified) {
    m_user_modified = user_modified;
    m_user_modified_isSet = true;
}

bool OAIDocument_Details::is_user_modified_Set() const{
    return m_user_modified_isSet;
}

bool OAIDocument_Details::is_user_modified_Valid() const{
    return m_user_modified_isValid;
}

bool OAIDocument_Details::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base_element_blob_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blob_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_changed_base_element_blob_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filename_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slides.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_story_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_styles_xml_blob_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_modified_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDocument_Details::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
