/**
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISlide_Connector.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISlide_Connector::OAISlide_Connector(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISlide_Connector::OAISlide_Connector() {
    this->initializeModel();
}

OAISlide_Connector::~OAISlide_Connector() {}

void OAISlide_Connector::initializeModel() {

    m_base_element_blob_url_isSet = false;
    m_base_element_blob_url_isValid = false;

    m_changed_base_element_blob_url_isSet = false;
    m_changed_base_element_blob_url_isValid = false;

    m_end_connection_idx_isSet = false;
    m_end_connection_idx_isValid = false;

    m_end_connection_shape_id_isSet = false;
    m_end_connection_shape_id_isValid = false;

    m_flip_horizontal_isSet = false;
    m_flip_horizontal_isValid = false;

    m_flip_vertical_isSet = false;
    m_flip_vertical_isValid = false;

    m_free_form_path_xml_isSet = false;
    m_free_form_path_xml_isValid = false;

    m_group_elements_id_isSet = false;
    m_group_elements_id_isValid = false;

    m_hidden_isSet = false;
    m_hidden_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_theme_effect_isSet = false;
    m_is_theme_effect_isValid = false;

    m_is_theme_fill_isSet = false;
    m_is_theme_fill_isValid = false;

    m_is_theme_line_isSet = false;
    m_is_theme_line_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_ooxml_id_isSet = false;
    m_ooxml_id_isValid = false;

    m_package_uri_isSet = false;
    m_package_uri_isValid = false;

    m_preset_type_id_isSet = false;
    m_preset_type_id_isValid = false;

    m_rotation_isSet = false;
    m_rotation_isValid = false;

    m_start_connection_idx_isSet = false;
    m_start_connection_idx_isValid = false;

    m_start_connection_shape_id_isSet = false;
    m_start_connection_shape_id_isValid = false;

    m_svg_blob_url_isSet = false;
    m_svg_blob_url_isValid = false;
}

void OAISlide_Connector::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISlide_Connector::fromJsonObject(QJsonObject json) {

    m_base_element_blob_url_isValid = ::OpenAPI::fromJsonValue(m_base_element_blob_url, json[QString("baseElementBlobUrl")]);
    m_base_element_blob_url_isSet = !json[QString("baseElementBlobUrl")].isNull() && m_base_element_blob_url_isValid;

    m_changed_base_element_blob_url_isValid = ::OpenAPI::fromJsonValue(m_changed_base_element_blob_url, json[QString("changedBaseElementBlobUrl")]);
    m_changed_base_element_blob_url_isSet = !json[QString("changedBaseElementBlobUrl")].isNull() && m_changed_base_element_blob_url_isValid;

    m_end_connection_idx_isValid = ::OpenAPI::fromJsonValue(m_end_connection_idx, json[QString("endConnectionIdx")]);
    m_end_connection_idx_isSet = !json[QString("endConnectionIdx")].isNull() && m_end_connection_idx_isValid;

    m_end_connection_shape_id_isValid = ::OpenAPI::fromJsonValue(m_end_connection_shape_id, json[QString("endConnectionShapeId")]);
    m_end_connection_shape_id_isSet = !json[QString("endConnectionShapeId")].isNull() && m_end_connection_shape_id_isValid;

    m_flip_horizontal_isValid = ::OpenAPI::fromJsonValue(m_flip_horizontal, json[QString("flipHorizontal")]);
    m_flip_horizontal_isSet = !json[QString("flipHorizontal")].isNull() && m_flip_horizontal_isValid;

    m_flip_vertical_isValid = ::OpenAPI::fromJsonValue(m_flip_vertical, json[QString("flipVertical")]);
    m_flip_vertical_isSet = !json[QString("flipVertical")].isNull() && m_flip_vertical_isValid;

    m_free_form_path_xml_isValid = ::OpenAPI::fromJsonValue(m_free_form_path_xml, json[QString("freeFormPathXml")]);
    m_free_form_path_xml_isSet = !json[QString("freeFormPathXml")].isNull() && m_free_form_path_xml_isValid;

    m_group_elements_id_isValid = ::OpenAPI::fromJsonValue(m_group_elements_id, json[QString("groupElementsId")]);
    m_group_elements_id_isSet = !json[QString("groupElementsId")].isNull() && m_group_elements_id_isValid;

    m_hidden_isValid = ::OpenAPI::fromJsonValue(m_hidden, json[QString("hidden")]);
    m_hidden_isSet = !json[QString("hidden")].isNull() && m_hidden_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_theme_effect_isValid = ::OpenAPI::fromJsonValue(m_is_theme_effect, json[QString("isThemeEffect")]);
    m_is_theme_effect_isSet = !json[QString("isThemeEffect")].isNull() && m_is_theme_effect_isValid;

    m_is_theme_fill_isValid = ::OpenAPI::fromJsonValue(m_is_theme_fill, json[QString("isThemeFill")]);
    m_is_theme_fill_isSet = !json[QString("isThemeFill")].isNull() && m_is_theme_fill_isValid;

    m_is_theme_line_isValid = ::OpenAPI::fromJsonValue(m_is_theme_line, json[QString("isThemeLine")]);
    m_is_theme_line_isSet = !json[QString("isThemeLine")].isNull() && m_is_theme_line_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_ooxml_id_isValid = ::OpenAPI::fromJsonValue(m_ooxml_id, json[QString("ooxmlId")]);
    m_ooxml_id_isSet = !json[QString("ooxmlId")].isNull() && m_ooxml_id_isValid;

    m_package_uri_isValid = ::OpenAPI::fromJsonValue(m_package_uri, json[QString("packageUri")]);
    m_package_uri_isSet = !json[QString("packageUri")].isNull() && m_package_uri_isValid;

    m_preset_type_id_isValid = ::OpenAPI::fromJsonValue(m_preset_type_id, json[QString("presetTypeId")]);
    m_preset_type_id_isSet = !json[QString("presetTypeId")].isNull() && m_preset_type_id_isValid;

    m_rotation_isValid = ::OpenAPI::fromJsonValue(m_rotation, json[QString("rotation")]);
    m_rotation_isSet = !json[QString("rotation")].isNull() && m_rotation_isValid;

    m_start_connection_idx_isValid = ::OpenAPI::fromJsonValue(m_start_connection_idx, json[QString("startConnectionIdx")]);
    m_start_connection_idx_isSet = !json[QString("startConnectionIdx")].isNull() && m_start_connection_idx_isValid;

    m_start_connection_shape_id_isValid = ::OpenAPI::fromJsonValue(m_start_connection_shape_id, json[QString("startConnectionShapeId")]);
    m_start_connection_shape_id_isSet = !json[QString("startConnectionShapeId")].isNull() && m_start_connection_shape_id_isValid;

    m_svg_blob_url_isValid = ::OpenAPI::fromJsonValue(m_svg_blob_url, json[QString("svgBlobUrl")]);
    m_svg_blob_url_isSet = !json[QString("svgBlobUrl")].isNull() && m_svg_blob_url_isValid;
}

QString OAISlide_Connector::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISlide_Connector::asJsonObject() const {
    QJsonObject obj;
    if (m_base_element_blob_url_isSet) {
        obj.insert(QString("baseElementBlobUrl"), ::OpenAPI::toJsonValue(m_base_element_blob_url));
    }
    if (m_changed_base_element_blob_url_isSet) {
        obj.insert(QString("changedBaseElementBlobUrl"), ::OpenAPI::toJsonValue(m_changed_base_element_blob_url));
    }
    if (m_end_connection_idx_isSet) {
        obj.insert(QString("endConnectionIdx"), ::OpenAPI::toJsonValue(m_end_connection_idx));
    }
    if (m_end_connection_shape_id_isSet) {
        obj.insert(QString("endConnectionShapeId"), ::OpenAPI::toJsonValue(m_end_connection_shape_id));
    }
    if (m_flip_horizontal_isSet) {
        obj.insert(QString("flipHorizontal"), ::OpenAPI::toJsonValue(m_flip_horizontal));
    }
    if (m_flip_vertical_isSet) {
        obj.insert(QString("flipVertical"), ::OpenAPI::toJsonValue(m_flip_vertical));
    }
    if (m_free_form_path_xml_isSet) {
        obj.insert(QString("freeFormPathXml"), ::OpenAPI::toJsonValue(m_free_form_path_xml));
    }
    if (m_group_elements_id_isSet) {
        obj.insert(QString("groupElementsId"), ::OpenAPI::toJsonValue(m_group_elements_id));
    }
    if (m_hidden_isSet) {
        obj.insert(QString("hidden"), ::OpenAPI::toJsonValue(m_hidden));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_theme_effect_isSet) {
        obj.insert(QString("isThemeEffect"), ::OpenAPI::toJsonValue(m_is_theme_effect));
    }
    if (m_is_theme_fill_isSet) {
        obj.insert(QString("isThemeFill"), ::OpenAPI::toJsonValue(m_is_theme_fill));
    }
    if (m_is_theme_line_isSet) {
        obj.insert(QString("isThemeLine"), ::OpenAPI::toJsonValue(m_is_theme_line));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_ooxml_id_isSet) {
        obj.insert(QString("ooxmlId"), ::OpenAPI::toJsonValue(m_ooxml_id));
    }
    if (m_package_uri_isSet) {
        obj.insert(QString("packageUri"), ::OpenAPI::toJsonValue(m_package_uri));
    }
    if (m_preset_type_id_isSet) {
        obj.insert(QString("presetTypeId"), ::OpenAPI::toJsonValue(m_preset_type_id));
    }
    if (m_rotation_isSet) {
        obj.insert(QString("rotation"), ::OpenAPI::toJsonValue(m_rotation));
    }
    if (m_start_connection_idx_isSet) {
        obj.insert(QString("startConnectionIdx"), ::OpenAPI::toJsonValue(m_start_connection_idx));
    }
    if (m_start_connection_shape_id_isSet) {
        obj.insert(QString("startConnectionShapeId"), ::OpenAPI::toJsonValue(m_start_connection_shape_id));
    }
    if (m_svg_blob_url_isSet) {
        obj.insert(QString("svgBlobUrl"), ::OpenAPI::toJsonValue(m_svg_blob_url));
    }
    return obj;
}

QString OAISlide_Connector::getBaseElementBlobUrl() const {
    return m_base_element_blob_url;
}
void OAISlide_Connector::setBaseElementBlobUrl(const QString &base_element_blob_url) {
    m_base_element_blob_url = base_element_blob_url;
    m_base_element_blob_url_isSet = true;
}

bool OAISlide_Connector::is_base_element_blob_url_Set() const{
    return m_base_element_blob_url_isSet;
}

bool OAISlide_Connector::is_base_element_blob_url_Valid() const{
    return m_base_element_blob_url_isValid;
}

QString OAISlide_Connector::getChangedBaseElementBlobUrl() const {
    return m_changed_base_element_blob_url;
}
void OAISlide_Connector::setChangedBaseElementBlobUrl(const QString &changed_base_element_blob_url) {
    m_changed_base_element_blob_url = changed_base_element_blob_url;
    m_changed_base_element_blob_url_isSet = true;
}

bool OAISlide_Connector::is_changed_base_element_blob_url_Set() const{
    return m_changed_base_element_blob_url_isSet;
}

bool OAISlide_Connector::is_changed_base_element_blob_url_Valid() const{
    return m_changed_base_element_blob_url_isValid;
}

qint32 OAISlide_Connector::getEndConnectionIdx() const {
    return m_end_connection_idx;
}
void OAISlide_Connector::setEndConnectionIdx(const qint32 &end_connection_idx) {
    m_end_connection_idx = end_connection_idx;
    m_end_connection_idx_isSet = true;
}

bool OAISlide_Connector::is_end_connection_idx_Set() const{
    return m_end_connection_idx_isSet;
}

bool OAISlide_Connector::is_end_connection_idx_Valid() const{
    return m_end_connection_idx_isValid;
}

QString OAISlide_Connector::getEndConnectionShapeId() const {
    return m_end_connection_shape_id;
}
void OAISlide_Connector::setEndConnectionShapeId(const QString &end_connection_shape_id) {
    m_end_connection_shape_id = end_connection_shape_id;
    m_end_connection_shape_id_isSet = true;
}

bool OAISlide_Connector::is_end_connection_shape_id_Set() const{
    return m_end_connection_shape_id_isSet;
}

bool OAISlide_Connector::is_end_connection_shape_id_Valid() const{
    return m_end_connection_shape_id_isValid;
}

bool OAISlide_Connector::isFlipHorizontal() const {
    return m_flip_horizontal;
}
void OAISlide_Connector::setFlipHorizontal(const bool &flip_horizontal) {
    m_flip_horizontal = flip_horizontal;
    m_flip_horizontal_isSet = true;
}

bool OAISlide_Connector::is_flip_horizontal_Set() const{
    return m_flip_horizontal_isSet;
}

bool OAISlide_Connector::is_flip_horizontal_Valid() const{
    return m_flip_horizontal_isValid;
}

bool OAISlide_Connector::isFlipVertical() const {
    return m_flip_vertical;
}
void OAISlide_Connector::setFlipVertical(const bool &flip_vertical) {
    m_flip_vertical = flip_vertical;
    m_flip_vertical_isSet = true;
}

bool OAISlide_Connector::is_flip_vertical_Set() const{
    return m_flip_vertical_isSet;
}

bool OAISlide_Connector::is_flip_vertical_Valid() const{
    return m_flip_vertical_isValid;
}

QString OAISlide_Connector::getFreeFormPathXml() const {
    return m_free_form_path_xml;
}
void OAISlide_Connector::setFreeFormPathXml(const QString &free_form_path_xml) {
    m_free_form_path_xml = free_form_path_xml;
    m_free_form_path_xml_isSet = true;
}

bool OAISlide_Connector::is_free_form_path_xml_Set() const{
    return m_free_form_path_xml_isSet;
}

bool OAISlide_Connector::is_free_form_path_xml_Valid() const{
    return m_free_form_path_xml_isValid;
}

QString OAISlide_Connector::getGroupElementsId() const {
    return m_group_elements_id;
}
void OAISlide_Connector::setGroupElementsId(const QString &group_elements_id) {
    m_group_elements_id = group_elements_id;
    m_group_elements_id_isSet = true;
}

bool OAISlide_Connector::is_group_elements_id_Set() const{
    return m_group_elements_id_isSet;
}

bool OAISlide_Connector::is_group_elements_id_Valid() const{
    return m_group_elements_id_isValid;
}

bool OAISlide_Connector::isHidden() const {
    return m_hidden;
}
void OAISlide_Connector::setHidden(const bool &hidden) {
    m_hidden = hidden;
    m_hidden_isSet = true;
}

bool OAISlide_Connector::is_hidden_Set() const{
    return m_hidden_isSet;
}

bool OAISlide_Connector::is_hidden_Valid() const{
    return m_hidden_isValid;
}

QString OAISlide_Connector::getId() const {
    return m_id;
}
void OAISlide_Connector::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISlide_Connector::is_id_Set() const{
    return m_id_isSet;
}

bool OAISlide_Connector::is_id_Valid() const{
    return m_id_isValid;
}

bool OAISlide_Connector::isIsThemeEffect() const {
    return m_is_theme_effect;
}
void OAISlide_Connector::setIsThemeEffect(const bool &is_theme_effect) {
    m_is_theme_effect = is_theme_effect;
    m_is_theme_effect_isSet = true;
}

bool OAISlide_Connector::is_is_theme_effect_Set() const{
    return m_is_theme_effect_isSet;
}

bool OAISlide_Connector::is_is_theme_effect_Valid() const{
    return m_is_theme_effect_isValid;
}

bool OAISlide_Connector::isIsThemeFill() const {
    return m_is_theme_fill;
}
void OAISlide_Connector::setIsThemeFill(const bool &is_theme_fill) {
    m_is_theme_fill = is_theme_fill;
    m_is_theme_fill_isSet = true;
}

bool OAISlide_Connector::is_is_theme_fill_Set() const{
    return m_is_theme_fill_isSet;
}

bool OAISlide_Connector::is_is_theme_fill_Valid() const{
    return m_is_theme_fill_isValid;
}

bool OAISlide_Connector::isIsThemeLine() const {
    return m_is_theme_line;
}
void OAISlide_Connector::setIsThemeLine(const bool &is_theme_line) {
    m_is_theme_line = is_theme_line;
    m_is_theme_line_isSet = true;
}

bool OAISlide_Connector::is_is_theme_line_Set() const{
    return m_is_theme_line_isSet;
}

bool OAISlide_Connector::is_is_theme_line_Valid() const{
    return m_is_theme_line_isValid;
}

QString OAISlide_Connector::getName() const {
    return m_name;
}
void OAISlide_Connector::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISlide_Connector::is_name_Set() const{
    return m_name_isSet;
}

bool OAISlide_Connector::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAISlide_Connector::getOoxmlId() const {
    return m_ooxml_id;
}
void OAISlide_Connector::setOoxmlId(const qint32 &ooxml_id) {
    m_ooxml_id = ooxml_id;
    m_ooxml_id_isSet = true;
}

bool OAISlide_Connector::is_ooxml_id_Set() const{
    return m_ooxml_id_isSet;
}

bool OAISlide_Connector::is_ooxml_id_Valid() const{
    return m_ooxml_id_isValid;
}

QString OAISlide_Connector::getPackageUri() const {
    return m_package_uri;
}
void OAISlide_Connector::setPackageUri(const QString &package_uri) {
    m_package_uri = package_uri;
    m_package_uri_isSet = true;
}

bool OAISlide_Connector::is_package_uri_Set() const{
    return m_package_uri_isSet;
}

bool OAISlide_Connector::is_package_uri_Valid() const{
    return m_package_uri_isValid;
}

QString OAISlide_Connector::getPresetTypeId() const {
    return m_preset_type_id;
}
void OAISlide_Connector::setPresetTypeId(const QString &preset_type_id) {
    m_preset_type_id = preset_type_id;
    m_preset_type_id_isSet = true;
}

bool OAISlide_Connector::is_preset_type_id_Set() const{
    return m_preset_type_id_isSet;
}

bool OAISlide_Connector::is_preset_type_id_Valid() const{
    return m_preset_type_id_isValid;
}

qint32 OAISlide_Connector::getRotation() const {
    return m_rotation;
}
void OAISlide_Connector::setRotation(const qint32 &rotation) {
    m_rotation = rotation;
    m_rotation_isSet = true;
}

bool OAISlide_Connector::is_rotation_Set() const{
    return m_rotation_isSet;
}

bool OAISlide_Connector::is_rotation_Valid() const{
    return m_rotation_isValid;
}

qint32 OAISlide_Connector::getStartConnectionIdx() const {
    return m_start_connection_idx;
}
void OAISlide_Connector::setStartConnectionIdx(const qint32 &start_connection_idx) {
    m_start_connection_idx = start_connection_idx;
    m_start_connection_idx_isSet = true;
}

bool OAISlide_Connector::is_start_connection_idx_Set() const{
    return m_start_connection_idx_isSet;
}

bool OAISlide_Connector::is_start_connection_idx_Valid() const{
    return m_start_connection_idx_isValid;
}

QString OAISlide_Connector::getStartConnectionShapeId() const {
    return m_start_connection_shape_id;
}
void OAISlide_Connector::setStartConnectionShapeId(const QString &start_connection_shape_id) {
    m_start_connection_shape_id = start_connection_shape_id;
    m_start_connection_shape_id_isSet = true;
}

bool OAISlide_Connector::is_start_connection_shape_id_Set() const{
    return m_start_connection_shape_id_isSet;
}

bool OAISlide_Connector::is_start_connection_shape_id_Valid() const{
    return m_start_connection_shape_id_isValid;
}

QString OAISlide_Connector::getSvgBlobUrl() const {
    return m_svg_blob_url;
}
void OAISlide_Connector::setSvgBlobUrl(const QString &svg_blob_url) {
    m_svg_blob_url = svg_blob_url;
    m_svg_blob_url_isSet = true;
}

bool OAISlide_Connector::is_svg_blob_url_Set() const{
    return m_svg_blob_url_isSet;
}

bool OAISlide_Connector::is_svg_blob_url_Valid() const{
    return m_svg_blob_url_isValid;
}

bool OAISlide_Connector::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base_element_blob_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_changed_base_element_blob_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_connection_idx_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_connection_shape_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flip_horizontal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flip_vertical_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_free_form_path_xml_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_elements_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hidden_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_theme_effect_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_theme_fill_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_theme_line_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ooxml_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preset_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rotation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_connection_idx_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_connection_shape_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_svg_blob_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISlide_Connector::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
