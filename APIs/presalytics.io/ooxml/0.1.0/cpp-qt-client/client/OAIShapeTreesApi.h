/**
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIShapeTreesApi_H
#define OAI_OAIShapeTreesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIChildObjects.h"
#include "OAIHttpFileElement.h"
#include "OAIOoxmlDTO.h"
#include "OAIProblemDetails.h"
#include "OAISlide_ShapeTrees.h"
#include "OAISlide_ShapeTrees_Details.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIShapeTreesApi : public QObject {
    Q_OBJECT

public:
    OAIShapeTreesApi(const int timeOut = 0);
    ~OAIShapeTreesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    */
    virtual void slidesShapetreesChildobjectsGetId(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void slidesShapetreesDetailsGetId(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void slidesShapetreesGetId(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  updated bool [optional]
    */
    virtual void slidesShapetreesOpenofficexmlGetIdUpdated(const QString &id, const ::OpenAPI::OptionalParam<bool> &updated = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_ooxml_dto OAIOoxmlDTO [optional]
    */
    virtual void slidesShapetreesOpenofficexmlPutId(const QString &id, const ::OpenAPI::OptionalParam<OAIOoxmlDTO> &oai_ooxml_dto = ::OpenAPI::OptionalParam<OAIOoxmlDTO>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  use_cache bool [optional]
    */
    virtual void slidesShapetreesSvgGetIdUseCache(const QString &id, const ::OpenAPI::OptionalParam<bool> &use_cache = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void slidesShapetreesChildobjectsGetIdCallback(OAIHttpRequestWorker *worker);
    void slidesShapetreesDetailsGetIdCallback(OAIHttpRequestWorker *worker);
    void slidesShapetreesGetIdCallback(OAIHttpRequestWorker *worker);
    void slidesShapetreesOpenofficexmlGetIdUpdatedCallback(OAIHttpRequestWorker *worker);
    void slidesShapetreesOpenofficexmlPutIdCallback(OAIHttpRequestWorker *worker);
    void slidesShapetreesSvgGetIdUseCacheCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void slidesShapetreesChildobjectsGetIdSignal(QList<OAIChildObjects> summary);
    void slidesShapetreesDetailsGetIdSignal(OAISlide_ShapeTrees_Details summary);
    void slidesShapetreesGetIdSignal(OAISlide_ShapeTrees summary);
    void slidesShapetreesOpenofficexmlGetIdUpdatedSignal(OAIOoxmlDTO summary);
    void slidesShapetreesOpenofficexmlPutIdSignal();
    void slidesShapetreesSvgGetIdUseCacheSignal(OAIHttpFileElement summary);


    void slidesShapetreesChildobjectsGetIdSignalFull(OAIHttpRequestWorker *worker, QList<OAIChildObjects> summary);
    void slidesShapetreesDetailsGetIdSignalFull(OAIHttpRequestWorker *worker, OAISlide_ShapeTrees_Details summary);
    void slidesShapetreesGetIdSignalFull(OAIHttpRequestWorker *worker, OAISlide_ShapeTrees summary);
    void slidesShapetreesOpenofficexmlGetIdUpdatedSignalFull(OAIHttpRequestWorker *worker, OAIOoxmlDTO summary);
    void slidesShapetreesOpenofficexmlPutIdSignalFull(OAIHttpRequestWorker *worker);
    void slidesShapetreesSvgGetIdUseCacheSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);

    Q_DECL_DEPRECATED_X("Use slidesShapetreesChildobjectsGetIdSignalError() instead")
    void slidesShapetreesChildobjectsGetIdSignalE(QList<OAIChildObjects> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slidesShapetreesChildobjectsGetIdSignalError(QList<OAIChildObjects> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slidesShapetreesDetailsGetIdSignalError() instead")
    void slidesShapetreesDetailsGetIdSignalE(OAISlide_ShapeTrees_Details summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slidesShapetreesDetailsGetIdSignalError(OAISlide_ShapeTrees_Details summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slidesShapetreesGetIdSignalError() instead")
    void slidesShapetreesGetIdSignalE(OAISlide_ShapeTrees summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slidesShapetreesGetIdSignalError(OAISlide_ShapeTrees summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slidesShapetreesOpenofficexmlGetIdUpdatedSignalError() instead")
    void slidesShapetreesOpenofficexmlGetIdUpdatedSignalE(OAIOoxmlDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slidesShapetreesOpenofficexmlGetIdUpdatedSignalError(OAIOoxmlDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slidesShapetreesOpenofficexmlPutIdSignalError() instead")
    void slidesShapetreesOpenofficexmlPutIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void slidesShapetreesOpenofficexmlPutIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slidesShapetreesSvgGetIdUseCacheSignalError() instead")
    void slidesShapetreesSvgGetIdUseCacheSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void slidesShapetreesSvgGetIdUseCacheSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use slidesShapetreesChildobjectsGetIdSignalErrorFull() instead")
    void slidesShapetreesChildobjectsGetIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slidesShapetreesChildobjectsGetIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slidesShapetreesDetailsGetIdSignalErrorFull() instead")
    void slidesShapetreesDetailsGetIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slidesShapetreesDetailsGetIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slidesShapetreesGetIdSignalErrorFull() instead")
    void slidesShapetreesGetIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slidesShapetreesGetIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slidesShapetreesOpenofficexmlGetIdUpdatedSignalErrorFull() instead")
    void slidesShapetreesOpenofficexmlGetIdUpdatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slidesShapetreesOpenofficexmlGetIdUpdatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slidesShapetreesOpenofficexmlPutIdSignalErrorFull() instead")
    void slidesShapetreesOpenofficexmlPutIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slidesShapetreesOpenofficexmlPutIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slidesShapetreesSvgGetIdUseCacheSignalErrorFull() instead")
    void slidesShapetreesSvgGetIdUseCacheSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slidesShapetreesSvgGetIdUseCacheSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
