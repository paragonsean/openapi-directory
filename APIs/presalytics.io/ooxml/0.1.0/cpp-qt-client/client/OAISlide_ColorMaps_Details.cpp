/**
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISlide_ColorMaps_Details.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISlide_ColorMaps_Details::OAISlide_ColorMaps_Details(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISlide_ColorMaps_Details::OAISlide_ColorMaps_Details() {
    this->initializeModel();
}

OAISlide_ColorMaps_Details::~OAISlide_ColorMaps_Details() {}

void OAISlide_ColorMaps_Details::initializeModel() {

    m_accent1_isSet = false;
    m_accent1_isValid = false;

    m_accent2_isSet = false;
    m_accent2_isValid = false;

    m_accent3_isSet = false;
    m_accent3_isValid = false;

    m_accent4_isSet = false;
    m_accent4_isValid = false;

    m_accent5_isSet = false;
    m_accent5_isValid = false;

    m_accent6_isSet = false;
    m_accent6_isValid = false;

    m_background1_isSet = false;
    m_background1_isValid = false;

    m_background2_isSet = false;
    m_background2_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_modified_isSet = false;
    m_date_modified_isValid = false;

    m_followed_hyperlink_isSet = false;
    m_followed_hyperlink_isValid = false;

    m_hyperlink_isSet = false;
    m_hyperlink_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_slide_master_isSet = false;
    m_slide_master_isValid = false;

    m_slide_master_id_isSet = false;
    m_slide_master_id_isValid = false;

    m_text1_isSet = false;
    m_text1_isValid = false;

    m_text2_isSet = false;
    m_text2_isValid = false;

    m_user_created_isSet = false;
    m_user_created_isValid = false;

    m_user_modified_isSet = false;
    m_user_modified_isValid = false;
}

void OAISlide_ColorMaps_Details::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISlide_ColorMaps_Details::fromJsonObject(QJsonObject json) {

    m_accent1_isValid = ::OpenAPI::fromJsonValue(m_accent1, json[QString("accent1")]);
    m_accent1_isSet = !json[QString("accent1")].isNull() && m_accent1_isValid;

    m_accent2_isValid = ::OpenAPI::fromJsonValue(m_accent2, json[QString("accent2")]);
    m_accent2_isSet = !json[QString("accent2")].isNull() && m_accent2_isValid;

    m_accent3_isValid = ::OpenAPI::fromJsonValue(m_accent3, json[QString("accent3")]);
    m_accent3_isSet = !json[QString("accent3")].isNull() && m_accent3_isValid;

    m_accent4_isValid = ::OpenAPI::fromJsonValue(m_accent4, json[QString("accent4")]);
    m_accent4_isSet = !json[QString("accent4")].isNull() && m_accent4_isValid;

    m_accent5_isValid = ::OpenAPI::fromJsonValue(m_accent5, json[QString("accent5")]);
    m_accent5_isSet = !json[QString("accent5")].isNull() && m_accent5_isValid;

    m_accent6_isValid = ::OpenAPI::fromJsonValue(m_accent6, json[QString("accent6")]);
    m_accent6_isSet = !json[QString("accent6")].isNull() && m_accent6_isValid;

    m_background1_isValid = ::OpenAPI::fromJsonValue(m_background1, json[QString("background1")]);
    m_background1_isSet = !json[QString("background1")].isNull() && m_background1_isValid;

    m_background2_isValid = ::OpenAPI::fromJsonValue(m_background2, json[QString("background2")]);
    m_background2_isSet = !json[QString("background2")].isNull() && m_background2_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("dateCreated")]);
    m_date_created_isSet = !json[QString("dateCreated")].isNull() && m_date_created_isValid;

    m_date_modified_isValid = ::OpenAPI::fromJsonValue(m_date_modified, json[QString("dateModified")]);
    m_date_modified_isSet = !json[QString("dateModified")].isNull() && m_date_modified_isValid;

    m_followed_hyperlink_isValid = ::OpenAPI::fromJsonValue(m_followed_hyperlink, json[QString("followedHyperlink")]);
    m_followed_hyperlink_isSet = !json[QString("followedHyperlink")].isNull() && m_followed_hyperlink_isValid;

    m_hyperlink_isValid = ::OpenAPI::fromJsonValue(m_hyperlink, json[QString("hyperlink")]);
    m_hyperlink_isSet = !json[QString("hyperlink")].isNull() && m_hyperlink_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_slide_master_isValid = ::OpenAPI::fromJsonValue(m_slide_master, json[QString("slideMaster")]);
    m_slide_master_isSet = !json[QString("slideMaster")].isNull() && m_slide_master_isValid;

    m_slide_master_id_isValid = ::OpenAPI::fromJsonValue(m_slide_master_id, json[QString("slideMasterId")]);
    m_slide_master_id_isSet = !json[QString("slideMasterId")].isNull() && m_slide_master_id_isValid;

    m_text1_isValid = ::OpenAPI::fromJsonValue(m_text1, json[QString("text1")]);
    m_text1_isSet = !json[QString("text1")].isNull() && m_text1_isValid;

    m_text2_isValid = ::OpenAPI::fromJsonValue(m_text2, json[QString("text2")]);
    m_text2_isSet = !json[QString("text2")].isNull() && m_text2_isValid;

    m_user_created_isValid = ::OpenAPI::fromJsonValue(m_user_created, json[QString("userCreated")]);
    m_user_created_isSet = !json[QString("userCreated")].isNull() && m_user_created_isValid;

    m_user_modified_isValid = ::OpenAPI::fromJsonValue(m_user_modified, json[QString("userModified")]);
    m_user_modified_isSet = !json[QString("userModified")].isNull() && m_user_modified_isValid;
}

QString OAISlide_ColorMaps_Details::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISlide_ColorMaps_Details::asJsonObject() const {
    QJsonObject obj;
    if (m_accent1_isSet) {
        obj.insert(QString("accent1"), ::OpenAPI::toJsonValue(m_accent1));
    }
    if (m_accent2_isSet) {
        obj.insert(QString("accent2"), ::OpenAPI::toJsonValue(m_accent2));
    }
    if (m_accent3_isSet) {
        obj.insert(QString("accent3"), ::OpenAPI::toJsonValue(m_accent3));
    }
    if (m_accent4_isSet) {
        obj.insert(QString("accent4"), ::OpenAPI::toJsonValue(m_accent4));
    }
    if (m_accent5_isSet) {
        obj.insert(QString("accent5"), ::OpenAPI::toJsonValue(m_accent5));
    }
    if (m_accent6_isSet) {
        obj.insert(QString("accent6"), ::OpenAPI::toJsonValue(m_accent6));
    }
    if (m_background1_isSet) {
        obj.insert(QString("background1"), ::OpenAPI::toJsonValue(m_background1));
    }
    if (m_background2_isSet) {
        obj.insert(QString("background2"), ::OpenAPI::toJsonValue(m_background2));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("dateCreated"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_modified_isSet) {
        obj.insert(QString("dateModified"), ::OpenAPI::toJsonValue(m_date_modified));
    }
    if (m_followed_hyperlink_isSet) {
        obj.insert(QString("followedHyperlink"), ::OpenAPI::toJsonValue(m_followed_hyperlink));
    }
    if (m_hyperlink_isSet) {
        obj.insert(QString("hyperlink"), ::OpenAPI::toJsonValue(m_hyperlink));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_slide_master.isSet()) {
        obj.insert(QString("slideMaster"), ::OpenAPI::toJsonValue(m_slide_master));
    }
    if (m_slide_master_id_isSet) {
        obj.insert(QString("slideMasterId"), ::OpenAPI::toJsonValue(m_slide_master_id));
    }
    if (m_text1_isSet) {
        obj.insert(QString("text1"), ::OpenAPI::toJsonValue(m_text1));
    }
    if (m_text2_isSet) {
        obj.insert(QString("text2"), ::OpenAPI::toJsonValue(m_text2));
    }
    if (m_user_created_isSet) {
        obj.insert(QString("userCreated"), ::OpenAPI::toJsonValue(m_user_created));
    }
    if (m_user_modified_isSet) {
        obj.insert(QString("userModified"), ::OpenAPI::toJsonValue(m_user_modified));
    }
    return obj;
}

qint32 OAISlide_ColorMaps_Details::getAccent1() const {
    return m_accent1;
}
void OAISlide_ColorMaps_Details::setAccent1(const qint32 &accent1) {
    m_accent1 = accent1;
    m_accent1_isSet = true;
}

bool OAISlide_ColorMaps_Details::is_accent1_Set() const{
    return m_accent1_isSet;
}

bool OAISlide_ColorMaps_Details::is_accent1_Valid() const{
    return m_accent1_isValid;
}

qint32 OAISlide_ColorMaps_Details::getAccent2() const {
    return m_accent2;
}
void OAISlide_ColorMaps_Details::setAccent2(const qint32 &accent2) {
    m_accent2 = accent2;
    m_accent2_isSet = true;
}

bool OAISlide_ColorMaps_Details::is_accent2_Set() const{
    return m_accent2_isSet;
}

bool OAISlide_ColorMaps_Details::is_accent2_Valid() const{
    return m_accent2_isValid;
}

qint32 OAISlide_ColorMaps_Details::getAccent3() const {
    return m_accent3;
}
void OAISlide_ColorMaps_Details::setAccent3(const qint32 &accent3) {
    m_accent3 = accent3;
    m_accent3_isSet = true;
}

bool OAISlide_ColorMaps_Details::is_accent3_Set() const{
    return m_accent3_isSet;
}

bool OAISlide_ColorMaps_Details::is_accent3_Valid() const{
    return m_accent3_isValid;
}

qint32 OAISlide_ColorMaps_Details::getAccent4() const {
    return m_accent4;
}
void OAISlide_ColorMaps_Details::setAccent4(const qint32 &accent4) {
    m_accent4 = accent4;
    m_accent4_isSet = true;
}

bool OAISlide_ColorMaps_Details::is_accent4_Set() const{
    return m_accent4_isSet;
}

bool OAISlide_ColorMaps_Details::is_accent4_Valid() const{
    return m_accent4_isValid;
}

qint32 OAISlide_ColorMaps_Details::getAccent5() const {
    return m_accent5;
}
void OAISlide_ColorMaps_Details::setAccent5(const qint32 &accent5) {
    m_accent5 = accent5;
    m_accent5_isSet = true;
}

bool OAISlide_ColorMaps_Details::is_accent5_Set() const{
    return m_accent5_isSet;
}

bool OAISlide_ColorMaps_Details::is_accent5_Valid() const{
    return m_accent5_isValid;
}

qint32 OAISlide_ColorMaps_Details::getAccent6() const {
    return m_accent6;
}
void OAISlide_ColorMaps_Details::setAccent6(const qint32 &accent6) {
    m_accent6 = accent6;
    m_accent6_isSet = true;
}

bool OAISlide_ColorMaps_Details::is_accent6_Set() const{
    return m_accent6_isSet;
}

bool OAISlide_ColorMaps_Details::is_accent6_Valid() const{
    return m_accent6_isValid;
}

qint32 OAISlide_ColorMaps_Details::getBackground1() const {
    return m_background1;
}
void OAISlide_ColorMaps_Details::setBackground1(const qint32 &background1) {
    m_background1 = background1;
    m_background1_isSet = true;
}

bool OAISlide_ColorMaps_Details::is_background1_Set() const{
    return m_background1_isSet;
}

bool OAISlide_ColorMaps_Details::is_background1_Valid() const{
    return m_background1_isValid;
}

qint32 OAISlide_ColorMaps_Details::getBackground2() const {
    return m_background2;
}
void OAISlide_ColorMaps_Details::setBackground2(const qint32 &background2) {
    m_background2 = background2;
    m_background2_isSet = true;
}

bool OAISlide_ColorMaps_Details::is_background2_Set() const{
    return m_background2_isSet;
}

bool OAISlide_ColorMaps_Details::is_background2_Valid() const{
    return m_background2_isValid;
}

QDateTime OAISlide_ColorMaps_Details::getDateCreated() const {
    return m_date_created;
}
void OAISlide_ColorMaps_Details::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAISlide_ColorMaps_Details::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAISlide_ColorMaps_Details::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAISlide_ColorMaps_Details::getDateModified() const {
    return m_date_modified;
}
void OAISlide_ColorMaps_Details::setDateModified(const QDateTime &date_modified) {
    m_date_modified = date_modified;
    m_date_modified_isSet = true;
}

bool OAISlide_ColorMaps_Details::is_date_modified_Set() const{
    return m_date_modified_isSet;
}

bool OAISlide_ColorMaps_Details::is_date_modified_Valid() const{
    return m_date_modified_isValid;
}

qint32 OAISlide_ColorMaps_Details::getFollowedHyperlink() const {
    return m_followed_hyperlink;
}
void OAISlide_ColorMaps_Details::setFollowedHyperlink(const qint32 &followed_hyperlink) {
    m_followed_hyperlink = followed_hyperlink;
    m_followed_hyperlink_isSet = true;
}

bool OAISlide_ColorMaps_Details::is_followed_hyperlink_Set() const{
    return m_followed_hyperlink_isSet;
}

bool OAISlide_ColorMaps_Details::is_followed_hyperlink_Valid() const{
    return m_followed_hyperlink_isValid;
}

qint32 OAISlide_ColorMaps_Details::getHyperlink() const {
    return m_hyperlink;
}
void OAISlide_ColorMaps_Details::setHyperlink(const qint32 &hyperlink) {
    m_hyperlink = hyperlink;
    m_hyperlink_isSet = true;
}

bool OAISlide_ColorMaps_Details::is_hyperlink_Set() const{
    return m_hyperlink_isSet;
}

bool OAISlide_ColorMaps_Details::is_hyperlink_Valid() const{
    return m_hyperlink_isValid;
}

QString OAISlide_ColorMaps_Details::getId() const {
    return m_id;
}
void OAISlide_ColorMaps_Details::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISlide_ColorMaps_Details::is_id_Set() const{
    return m_id_isSet;
}

bool OAISlide_ColorMaps_Details::is_id_Valid() const{
    return m_id_isValid;
}

OAISlide_SlideMasters_Details OAISlide_ColorMaps_Details::getSlideMaster() const {
    return m_slide_master;
}
void OAISlide_ColorMaps_Details::setSlideMaster(const OAISlide_SlideMasters_Details &slide_master) {
    m_slide_master = slide_master;
    m_slide_master_isSet = true;
}

bool OAISlide_ColorMaps_Details::is_slide_master_Set() const{
    return m_slide_master_isSet;
}

bool OAISlide_ColorMaps_Details::is_slide_master_Valid() const{
    return m_slide_master_isValid;
}

QString OAISlide_ColorMaps_Details::getSlideMasterId() const {
    return m_slide_master_id;
}
void OAISlide_ColorMaps_Details::setSlideMasterId(const QString &slide_master_id) {
    m_slide_master_id = slide_master_id;
    m_slide_master_id_isSet = true;
}

bool OAISlide_ColorMaps_Details::is_slide_master_id_Set() const{
    return m_slide_master_id_isSet;
}

bool OAISlide_ColorMaps_Details::is_slide_master_id_Valid() const{
    return m_slide_master_id_isValid;
}

qint32 OAISlide_ColorMaps_Details::getText1() const {
    return m_text1;
}
void OAISlide_ColorMaps_Details::setText1(const qint32 &text1) {
    m_text1 = text1;
    m_text1_isSet = true;
}

bool OAISlide_ColorMaps_Details::is_text1_Set() const{
    return m_text1_isSet;
}

bool OAISlide_ColorMaps_Details::is_text1_Valid() const{
    return m_text1_isValid;
}

qint32 OAISlide_ColorMaps_Details::getText2() const {
    return m_text2;
}
void OAISlide_ColorMaps_Details::setText2(const qint32 &text2) {
    m_text2 = text2;
    m_text2_isSet = true;
}

bool OAISlide_ColorMaps_Details::is_text2_Set() const{
    return m_text2_isSet;
}

bool OAISlide_ColorMaps_Details::is_text2_Valid() const{
    return m_text2_isValid;
}

QString OAISlide_ColorMaps_Details::getUserCreated() const {
    return m_user_created;
}
void OAISlide_ColorMaps_Details::setUserCreated(const QString &user_created) {
    m_user_created = user_created;
    m_user_created_isSet = true;
}

bool OAISlide_ColorMaps_Details::is_user_created_Set() const{
    return m_user_created_isSet;
}

bool OAISlide_ColorMaps_Details::is_user_created_Valid() const{
    return m_user_created_isValid;
}

QString OAISlide_ColorMaps_Details::getUserModified() const {
    return m_user_modified;
}
void OAISlide_ColorMaps_Details::setUserModified(const QString &user_modified) {
    m_user_modified = user_modified;
    m_user_modified_isSet = true;
}

bool OAISlide_ColorMaps_Details::is_user_modified_Set() const{
    return m_user_modified_isSet;
}

bool OAISlide_ColorMaps_Details::is_user_modified_Valid() const{
    return m_user_modified_isValid;
}

bool OAISlide_ColorMaps_Details::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accent1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_accent2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_accent3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_accent4_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_accent5_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_accent6_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_background1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_background2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_followed_hyperlink_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hyperlink_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slide_master.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_slide_master_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_modified_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISlide_ColorMaps_Details::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
