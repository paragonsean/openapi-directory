/**
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShared_Pictures.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShared_Pictures::OAIShared_Pictures(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShared_Pictures::OAIShared_Pictures() {
    this->initializeModel();
}

OAIShared_Pictures::~OAIShared_Pictures() {}

void OAIShared_Pictures::initializeModel() {

    m_base_element_blob_url_isSet = false;
    m_base_element_blob_url_isValid = false;

    m_changed_base_element_blob_url_isSet = false;
    m_changed_base_element_blob_url_isValid = false;

    m_file_extension_isSet = false;
    m_file_extension_isValid = false;

    m_graphics_id_isSet = false;
    m_graphics_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_image_file_blob_url_isSet = false;
    m_image_file_blob_url_isValid = false;

    m_image_fills_id_isSet = false;
    m_image_fills_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_package_uri_isSet = false;
    m_package_uri_isValid = false;
}

void OAIShared_Pictures::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShared_Pictures::fromJsonObject(QJsonObject json) {

    m_base_element_blob_url_isValid = ::OpenAPI::fromJsonValue(m_base_element_blob_url, json[QString("baseElementBlobUrl")]);
    m_base_element_blob_url_isSet = !json[QString("baseElementBlobUrl")].isNull() && m_base_element_blob_url_isValid;

    m_changed_base_element_blob_url_isValid = ::OpenAPI::fromJsonValue(m_changed_base_element_blob_url, json[QString("changedBaseElementBlobUrl")]);
    m_changed_base_element_blob_url_isSet = !json[QString("changedBaseElementBlobUrl")].isNull() && m_changed_base_element_blob_url_isValid;

    m_file_extension_isValid = ::OpenAPI::fromJsonValue(m_file_extension, json[QString("fileExtension")]);
    m_file_extension_isSet = !json[QString("fileExtension")].isNull() && m_file_extension_isValid;

    m_graphics_id_isValid = ::OpenAPI::fromJsonValue(m_graphics_id, json[QString("graphicsId")]);
    m_graphics_id_isSet = !json[QString("graphicsId")].isNull() && m_graphics_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_image_file_blob_url_isValid = ::OpenAPI::fromJsonValue(m_image_file_blob_url, json[QString("imageFileBlobUrl")]);
    m_image_file_blob_url_isSet = !json[QString("imageFileBlobUrl")].isNull() && m_image_file_blob_url_isValid;

    m_image_fills_id_isValid = ::OpenAPI::fromJsonValue(m_image_fills_id, json[QString("imageFillsId")]);
    m_image_fills_id_isSet = !json[QString("imageFillsId")].isNull() && m_image_fills_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_package_uri_isValid = ::OpenAPI::fromJsonValue(m_package_uri, json[QString("packageUri")]);
    m_package_uri_isSet = !json[QString("packageUri")].isNull() && m_package_uri_isValid;
}

QString OAIShared_Pictures::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShared_Pictures::asJsonObject() const {
    QJsonObject obj;
    if (m_base_element_blob_url_isSet) {
        obj.insert(QString("baseElementBlobUrl"), ::OpenAPI::toJsonValue(m_base_element_blob_url));
    }
    if (m_changed_base_element_blob_url_isSet) {
        obj.insert(QString("changedBaseElementBlobUrl"), ::OpenAPI::toJsonValue(m_changed_base_element_blob_url));
    }
    if (m_file_extension_isSet) {
        obj.insert(QString("fileExtension"), ::OpenAPI::toJsonValue(m_file_extension));
    }
    if (m_graphics_id_isSet) {
        obj.insert(QString("graphicsId"), ::OpenAPI::toJsonValue(m_graphics_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_image_file_blob_url_isSet) {
        obj.insert(QString("imageFileBlobUrl"), ::OpenAPI::toJsonValue(m_image_file_blob_url));
    }
    if (m_image_fills_id_isSet) {
        obj.insert(QString("imageFillsId"), ::OpenAPI::toJsonValue(m_image_fills_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_package_uri_isSet) {
        obj.insert(QString("packageUri"), ::OpenAPI::toJsonValue(m_package_uri));
    }
    return obj;
}

QString OAIShared_Pictures::getBaseElementBlobUrl() const {
    return m_base_element_blob_url;
}
void OAIShared_Pictures::setBaseElementBlobUrl(const QString &base_element_blob_url) {
    m_base_element_blob_url = base_element_blob_url;
    m_base_element_blob_url_isSet = true;
}

bool OAIShared_Pictures::is_base_element_blob_url_Set() const{
    return m_base_element_blob_url_isSet;
}

bool OAIShared_Pictures::is_base_element_blob_url_Valid() const{
    return m_base_element_blob_url_isValid;
}

QString OAIShared_Pictures::getChangedBaseElementBlobUrl() const {
    return m_changed_base_element_blob_url;
}
void OAIShared_Pictures::setChangedBaseElementBlobUrl(const QString &changed_base_element_blob_url) {
    m_changed_base_element_blob_url = changed_base_element_blob_url;
    m_changed_base_element_blob_url_isSet = true;
}

bool OAIShared_Pictures::is_changed_base_element_blob_url_Set() const{
    return m_changed_base_element_blob_url_isSet;
}

bool OAIShared_Pictures::is_changed_base_element_blob_url_Valid() const{
    return m_changed_base_element_blob_url_isValid;
}

QString OAIShared_Pictures::getFileExtension() const {
    return m_file_extension;
}
void OAIShared_Pictures::setFileExtension(const QString &file_extension) {
    m_file_extension = file_extension;
    m_file_extension_isSet = true;
}

bool OAIShared_Pictures::is_file_extension_Set() const{
    return m_file_extension_isSet;
}

bool OAIShared_Pictures::is_file_extension_Valid() const{
    return m_file_extension_isValid;
}

QString OAIShared_Pictures::getGraphicsId() const {
    return m_graphics_id;
}
void OAIShared_Pictures::setGraphicsId(const QString &graphics_id) {
    m_graphics_id = graphics_id;
    m_graphics_id_isSet = true;
}

bool OAIShared_Pictures::is_graphics_id_Set() const{
    return m_graphics_id_isSet;
}

bool OAIShared_Pictures::is_graphics_id_Valid() const{
    return m_graphics_id_isValid;
}

QString OAIShared_Pictures::getId() const {
    return m_id;
}
void OAIShared_Pictures::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIShared_Pictures::is_id_Set() const{
    return m_id_isSet;
}

bool OAIShared_Pictures::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIShared_Pictures::getImageFileBlobUrl() const {
    return m_image_file_blob_url;
}
void OAIShared_Pictures::setImageFileBlobUrl(const QString &image_file_blob_url) {
    m_image_file_blob_url = image_file_blob_url;
    m_image_file_blob_url_isSet = true;
}

bool OAIShared_Pictures::is_image_file_blob_url_Set() const{
    return m_image_file_blob_url_isSet;
}

bool OAIShared_Pictures::is_image_file_blob_url_Valid() const{
    return m_image_file_blob_url_isValid;
}

QString OAIShared_Pictures::getImageFillsId() const {
    return m_image_fills_id;
}
void OAIShared_Pictures::setImageFillsId(const QString &image_fills_id) {
    m_image_fills_id = image_fills_id;
    m_image_fills_id_isSet = true;
}

bool OAIShared_Pictures::is_image_fills_id_Set() const{
    return m_image_fills_id_isSet;
}

bool OAIShared_Pictures::is_image_fills_id_Valid() const{
    return m_image_fills_id_isValid;
}

QString OAIShared_Pictures::getName() const {
    return m_name;
}
void OAIShared_Pictures::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIShared_Pictures::is_name_Set() const{
    return m_name_isSet;
}

bool OAIShared_Pictures::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIShared_Pictures::getPackageUri() const {
    return m_package_uri;
}
void OAIShared_Pictures::setPackageUri(const QString &package_uri) {
    m_package_uri = package_uri;
    m_package_uri_isSet = true;
}

bool OAIShared_Pictures::is_package_uri_Set() const{
    return m_package_uri_isSet;
}

bool OAIShared_Pictures::is_package_uri_Valid() const{
    return m_package_uri_isValid;
}

bool OAIShared_Pictures::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base_element_blob_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_changed_base_element_blob_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_extension_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_graphics_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_file_blob_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_fills_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShared_Pictures::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
