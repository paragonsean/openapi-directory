/**
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITheme_LineMap.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITheme_LineMap::OAITheme_LineMap(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITheme_LineMap::OAITheme_LineMap() {
    this->initializeModel();
}

OAITheme_LineMap::~OAITheme_LineMap() {}

void OAITheme_LineMap::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_intensity_id_isSet = false;
    m_intensity_id_isValid = false;

    m_theme_id_isSet = false;
    m_theme_id_isValid = false;
}

void OAITheme_LineMap::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITheme_LineMap::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_intensity_id_isValid = ::OpenAPI::fromJsonValue(m_intensity_id, json[QString("intensityId")]);
    m_intensity_id_isSet = !json[QString("intensityId")].isNull() && m_intensity_id_isValid;

    m_theme_id_isValid = ::OpenAPI::fromJsonValue(m_theme_id, json[QString("themeId")]);
    m_theme_id_isSet = !json[QString("themeId")].isNull() && m_theme_id_isValid;
}

QString OAITheme_LineMap::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITheme_LineMap::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_intensity_id_isSet) {
        obj.insert(QString("intensityId"), ::OpenAPI::toJsonValue(m_intensity_id));
    }
    if (m_theme_id_isSet) {
        obj.insert(QString("themeId"), ::OpenAPI::toJsonValue(m_theme_id));
    }
    return obj;
}

QString OAITheme_LineMap::getId() const {
    return m_id;
}
void OAITheme_LineMap::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITheme_LineMap::is_id_Set() const{
    return m_id_isSet;
}

bool OAITheme_LineMap::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAITheme_LineMap::getIntensityId() const {
    return m_intensity_id;
}
void OAITheme_LineMap::setIntensityId(const qint32 &intensity_id) {
    m_intensity_id = intensity_id;
    m_intensity_id_isSet = true;
}

bool OAITheme_LineMap::is_intensity_id_Set() const{
    return m_intensity_id_isSet;
}

bool OAITheme_LineMap::is_intensity_id_Valid() const{
    return m_intensity_id_isValid;
}

QString OAITheme_LineMap::getThemeId() const {
    return m_theme_id;
}
void OAITheme_LineMap::setThemeId(const QString &theme_id) {
    m_theme_id = theme_id;
    m_theme_id_isSet = true;
}

bool OAITheme_LineMap::is_theme_id_Set() const{
    return m_theme_id_isSet;
}

bool OAITheme_LineMap::is_theme_id_Valid() const{
    return m_theme_id_isValid;
}

bool OAITheme_LineMap::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_intensity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_theme_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITheme_LineMap::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
