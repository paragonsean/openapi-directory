/**
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITheme_Themes_Details.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITheme_Themes_Details::OAITheme_Themes_Details(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITheme_Themes_Details::OAITheme_Themes_Details() {
    this->initializeModel();
}

OAITheme_Themes_Details::~OAITheme_Themes_Details() {}

void OAITheme_Themes_Details::initializeModel() {

    m_background_fills_isSet = false;
    m_background_fills_isValid = false;

    m_base_element_blob_url_isSet = false;
    m_base_element_blob_url_isValid = false;

    m_changed_base_element_blob_url_isSet = false;
    m_changed_base_element_blob_url_isValid = false;

    m_colors_isSet = false;
    m_colors_isValid = false;

    m_custom_colors_isSet = false;
    m_custom_colors_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_modified_isSet = false;
    m_date_modified_isValid = false;

    m_effect_maps_isSet = false;
    m_effect_maps_isValid = false;

    m_fills_isSet = false;
    m_fills_isValid = false;

    m_fonts_isSet = false;
    m_fonts_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_line_maps_isSet = false;
    m_line_maps_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_package_uri_isSet = false;
    m_package_uri_isValid = false;

    m_slide_isSet = false;
    m_slide_isValid = false;

    m_slide_id_isSet = false;
    m_slide_id_isValid = false;

    m_user_created_isSet = false;
    m_user_created_isValid = false;

    m_user_modified_isSet = false;
    m_user_modified_isValid = false;
}

void OAITheme_Themes_Details::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITheme_Themes_Details::fromJsonObject(QJsonObject json) {

    m_background_fills_isValid = ::OpenAPI::fromJsonValue(m_background_fills, json[QString("backgroundFills")]);
    m_background_fills_isSet = !json[QString("backgroundFills")].isNull() && m_background_fills_isValid;

    m_base_element_blob_url_isValid = ::OpenAPI::fromJsonValue(m_base_element_blob_url, json[QString("baseElementBlobUrl")]);
    m_base_element_blob_url_isSet = !json[QString("baseElementBlobUrl")].isNull() && m_base_element_blob_url_isValid;

    m_changed_base_element_blob_url_isValid = ::OpenAPI::fromJsonValue(m_changed_base_element_blob_url, json[QString("changedBaseElementBlobUrl")]);
    m_changed_base_element_blob_url_isSet = !json[QString("changedBaseElementBlobUrl")].isNull() && m_changed_base_element_blob_url_isValid;

    m_colors_isValid = ::OpenAPI::fromJsonValue(m_colors, json[QString("colors")]);
    m_colors_isSet = !json[QString("colors")].isNull() && m_colors_isValid;

    m_custom_colors_isValid = ::OpenAPI::fromJsonValue(m_custom_colors, json[QString("customColors")]);
    m_custom_colors_isSet = !json[QString("customColors")].isNull() && m_custom_colors_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("dateCreated")]);
    m_date_created_isSet = !json[QString("dateCreated")].isNull() && m_date_created_isValid;

    m_date_modified_isValid = ::OpenAPI::fromJsonValue(m_date_modified, json[QString("dateModified")]);
    m_date_modified_isSet = !json[QString("dateModified")].isNull() && m_date_modified_isValid;

    m_effect_maps_isValid = ::OpenAPI::fromJsonValue(m_effect_maps, json[QString("effectMaps")]);
    m_effect_maps_isSet = !json[QString("effectMaps")].isNull() && m_effect_maps_isValid;

    m_fills_isValid = ::OpenAPI::fromJsonValue(m_fills, json[QString("fills")]);
    m_fills_isSet = !json[QString("fills")].isNull() && m_fills_isValid;

    m_fonts_isValid = ::OpenAPI::fromJsonValue(m_fonts, json[QString("fonts")]);
    m_fonts_isSet = !json[QString("fonts")].isNull() && m_fonts_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_line_maps_isValid = ::OpenAPI::fromJsonValue(m_line_maps, json[QString("lineMaps")]);
    m_line_maps_isSet = !json[QString("lineMaps")].isNull() && m_line_maps_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_package_uri_isValid = ::OpenAPI::fromJsonValue(m_package_uri, json[QString("packageUri")]);
    m_package_uri_isSet = !json[QString("packageUri")].isNull() && m_package_uri_isValid;

    m_slide_isValid = ::OpenAPI::fromJsonValue(m_slide, json[QString("slide")]);
    m_slide_isSet = !json[QString("slide")].isNull() && m_slide_isValid;

    m_slide_id_isValid = ::OpenAPI::fromJsonValue(m_slide_id, json[QString("slideId")]);
    m_slide_id_isSet = !json[QString("slideId")].isNull() && m_slide_id_isValid;

    m_user_created_isValid = ::OpenAPI::fromJsonValue(m_user_created, json[QString("userCreated")]);
    m_user_created_isSet = !json[QString("userCreated")].isNull() && m_user_created_isValid;

    m_user_modified_isValid = ::OpenAPI::fromJsonValue(m_user_modified, json[QString("userModified")]);
    m_user_modified_isSet = !json[QString("userModified")].isNull() && m_user_modified_isValid;
}

QString OAITheme_Themes_Details::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITheme_Themes_Details::asJsonObject() const {
    QJsonObject obj;
    if (m_background_fills.size() > 0) {
        obj.insert(QString("backgroundFills"), ::OpenAPI::toJsonValue(m_background_fills));
    }
    if (m_base_element_blob_url_isSet) {
        obj.insert(QString("baseElementBlobUrl"), ::OpenAPI::toJsonValue(m_base_element_blob_url));
    }
    if (m_changed_base_element_blob_url_isSet) {
        obj.insert(QString("changedBaseElementBlobUrl"), ::OpenAPI::toJsonValue(m_changed_base_element_blob_url));
    }
    if (m_colors.isSet()) {
        obj.insert(QString("colors"), ::OpenAPI::toJsonValue(m_colors));
    }
    if (m_custom_colors.size() > 0) {
        obj.insert(QString("customColors"), ::OpenAPI::toJsonValue(m_custom_colors));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("dateCreated"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_modified_isSet) {
        obj.insert(QString("dateModified"), ::OpenAPI::toJsonValue(m_date_modified));
    }
    if (m_effect_maps.size() > 0) {
        obj.insert(QString("effectMaps"), ::OpenAPI::toJsonValue(m_effect_maps));
    }
    if (m_fills.size() > 0) {
        obj.insert(QString("fills"), ::OpenAPI::toJsonValue(m_fills));
    }
    if (m_fonts.isSet()) {
        obj.insert(QString("fonts"), ::OpenAPI::toJsonValue(m_fonts));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_line_maps.size() > 0) {
        obj.insert(QString("lineMaps"), ::OpenAPI::toJsonValue(m_line_maps));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_package_uri_isSet) {
        obj.insert(QString("packageUri"), ::OpenAPI::toJsonValue(m_package_uri));
    }
    if (m_slide.isSet()) {
        obj.insert(QString("slide"), ::OpenAPI::toJsonValue(m_slide));
    }
    if (m_slide_id_isSet) {
        obj.insert(QString("slideId"), ::OpenAPI::toJsonValue(m_slide_id));
    }
    if (m_user_created_isSet) {
        obj.insert(QString("userCreated"), ::OpenAPI::toJsonValue(m_user_created));
    }
    if (m_user_modified_isSet) {
        obj.insert(QString("userModified"), ::OpenAPI::toJsonValue(m_user_modified));
    }
    return obj;
}

QList<OAITheme_BackgroundFills_Details> OAITheme_Themes_Details::getBackgroundFills() const {
    return m_background_fills;
}
void OAITheme_Themes_Details::setBackgroundFills(const QList<OAITheme_BackgroundFills_Details> &background_fills) {
    m_background_fills = background_fills;
    m_background_fills_isSet = true;
}

bool OAITheme_Themes_Details::is_background_fills_Set() const{
    return m_background_fills_isSet;
}

bool OAITheme_Themes_Details::is_background_fills_Valid() const{
    return m_background_fills_isValid;
}

QString OAITheme_Themes_Details::getBaseElementBlobUrl() const {
    return m_base_element_blob_url;
}
void OAITheme_Themes_Details::setBaseElementBlobUrl(const QString &base_element_blob_url) {
    m_base_element_blob_url = base_element_blob_url;
    m_base_element_blob_url_isSet = true;
}

bool OAITheme_Themes_Details::is_base_element_blob_url_Set() const{
    return m_base_element_blob_url_isSet;
}

bool OAITheme_Themes_Details::is_base_element_blob_url_Valid() const{
    return m_base_element_blob_url_isValid;
}

QString OAITheme_Themes_Details::getChangedBaseElementBlobUrl() const {
    return m_changed_base_element_blob_url;
}
void OAITheme_Themes_Details::setChangedBaseElementBlobUrl(const QString &changed_base_element_blob_url) {
    m_changed_base_element_blob_url = changed_base_element_blob_url;
    m_changed_base_element_blob_url_isSet = true;
}

bool OAITheme_Themes_Details::is_changed_base_element_blob_url_Set() const{
    return m_changed_base_element_blob_url_isSet;
}

bool OAITheme_Themes_Details::is_changed_base_element_blob_url_Valid() const{
    return m_changed_base_element_blob_url_isValid;
}

OAITheme_Colors_Details OAITheme_Themes_Details::getColors() const {
    return m_colors;
}
void OAITheme_Themes_Details::setColors(const OAITheme_Colors_Details &colors) {
    m_colors = colors;
    m_colors_isSet = true;
}

bool OAITheme_Themes_Details::is_colors_Set() const{
    return m_colors_isSet;
}

bool OAITheme_Themes_Details::is_colors_Valid() const{
    return m_colors_isValid;
}

QList<OAITheme_CustomColors_Details> OAITheme_Themes_Details::getCustomColors() const {
    return m_custom_colors;
}
void OAITheme_Themes_Details::setCustomColors(const QList<OAITheme_CustomColors_Details> &custom_colors) {
    m_custom_colors = custom_colors;
    m_custom_colors_isSet = true;
}

bool OAITheme_Themes_Details::is_custom_colors_Set() const{
    return m_custom_colors_isSet;
}

bool OAITheme_Themes_Details::is_custom_colors_Valid() const{
    return m_custom_colors_isValid;
}

QDateTime OAITheme_Themes_Details::getDateCreated() const {
    return m_date_created;
}
void OAITheme_Themes_Details::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAITheme_Themes_Details::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAITheme_Themes_Details::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAITheme_Themes_Details::getDateModified() const {
    return m_date_modified;
}
void OAITheme_Themes_Details::setDateModified(const QDateTime &date_modified) {
    m_date_modified = date_modified;
    m_date_modified_isSet = true;
}

bool OAITheme_Themes_Details::is_date_modified_Set() const{
    return m_date_modified_isSet;
}

bool OAITheme_Themes_Details::is_date_modified_Valid() const{
    return m_date_modified_isValid;
}

QList<OAITheme_EffectMap_Details> OAITheme_Themes_Details::getEffectMaps() const {
    return m_effect_maps;
}
void OAITheme_Themes_Details::setEffectMaps(const QList<OAITheme_EffectMap_Details> &effect_maps) {
    m_effect_maps = effect_maps;
    m_effect_maps_isSet = true;
}

bool OAITheme_Themes_Details::is_effect_maps_Set() const{
    return m_effect_maps_isSet;
}

bool OAITheme_Themes_Details::is_effect_maps_Valid() const{
    return m_effect_maps_isValid;
}

QList<OAITheme_Fills_Details> OAITheme_Themes_Details::getFills() const {
    return m_fills;
}
void OAITheme_Themes_Details::setFills(const QList<OAITheme_Fills_Details> &fills) {
    m_fills = fills;
    m_fills_isSet = true;
}

bool OAITheme_Themes_Details::is_fills_Set() const{
    return m_fills_isSet;
}

bool OAITheme_Themes_Details::is_fills_Valid() const{
    return m_fills_isValid;
}

OAITheme_Fonts_Details OAITheme_Themes_Details::getFonts() const {
    return m_fonts;
}
void OAITheme_Themes_Details::setFonts(const OAITheme_Fonts_Details &fonts) {
    m_fonts = fonts;
    m_fonts_isSet = true;
}

bool OAITheme_Themes_Details::is_fonts_Set() const{
    return m_fonts_isSet;
}

bool OAITheme_Themes_Details::is_fonts_Valid() const{
    return m_fonts_isValid;
}

QString OAITheme_Themes_Details::getId() const {
    return m_id;
}
void OAITheme_Themes_Details::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITheme_Themes_Details::is_id_Set() const{
    return m_id_isSet;
}

bool OAITheme_Themes_Details::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAITheme_LineMap_Details> OAITheme_Themes_Details::getLineMaps() const {
    return m_line_maps;
}
void OAITheme_Themes_Details::setLineMaps(const QList<OAITheme_LineMap_Details> &line_maps) {
    m_line_maps = line_maps;
    m_line_maps_isSet = true;
}

bool OAITheme_Themes_Details::is_line_maps_Set() const{
    return m_line_maps_isSet;
}

bool OAITheme_Themes_Details::is_line_maps_Valid() const{
    return m_line_maps_isValid;
}

QString OAITheme_Themes_Details::getName() const {
    return m_name;
}
void OAITheme_Themes_Details::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITheme_Themes_Details::is_name_Set() const{
    return m_name_isSet;
}

bool OAITheme_Themes_Details::is_name_Valid() const{
    return m_name_isValid;
}

QString OAITheme_Themes_Details::getPackageUri() const {
    return m_package_uri;
}
void OAITheme_Themes_Details::setPackageUri(const QString &package_uri) {
    m_package_uri = package_uri;
    m_package_uri_isSet = true;
}

bool OAITheme_Themes_Details::is_package_uri_Set() const{
    return m_package_uri_isSet;
}

bool OAITheme_Themes_Details::is_package_uri_Valid() const{
    return m_package_uri_isValid;
}

OAISlide_Slides_Details OAITheme_Themes_Details::getSlide() const {
    return m_slide;
}
void OAITheme_Themes_Details::setSlide(const OAISlide_Slides_Details &slide) {
    m_slide = slide;
    m_slide_isSet = true;
}

bool OAITheme_Themes_Details::is_slide_Set() const{
    return m_slide_isSet;
}

bool OAITheme_Themes_Details::is_slide_Valid() const{
    return m_slide_isValid;
}

QString OAITheme_Themes_Details::getSlideId() const {
    return m_slide_id;
}
void OAITheme_Themes_Details::setSlideId(const QString &slide_id) {
    m_slide_id = slide_id;
    m_slide_id_isSet = true;
}

bool OAITheme_Themes_Details::is_slide_id_Set() const{
    return m_slide_id_isSet;
}

bool OAITheme_Themes_Details::is_slide_id_Valid() const{
    return m_slide_id_isValid;
}

QString OAITheme_Themes_Details::getUserCreated() const {
    return m_user_created;
}
void OAITheme_Themes_Details::setUserCreated(const QString &user_created) {
    m_user_created = user_created;
    m_user_created_isSet = true;
}

bool OAITheme_Themes_Details::is_user_created_Set() const{
    return m_user_created_isSet;
}

bool OAITheme_Themes_Details::is_user_created_Valid() const{
    return m_user_created_isValid;
}

QString OAITheme_Themes_Details::getUserModified() const {
    return m_user_modified;
}
void OAITheme_Themes_Details::setUserModified(const QString &user_modified) {
    m_user_modified = user_modified;
    m_user_modified_isSet = true;
}

bool OAITheme_Themes_Details::is_user_modified_Set() const{
    return m_user_modified_isSet;
}

bool OAITheme_Themes_Details::is_user_modified_Valid() const{
    return m_user_modified_isValid;
}

bool OAITheme_Themes_Details::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_background_fills.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_element_blob_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_changed_base_element_blob_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_colors.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_colors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_effect_maps.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_fills.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_fonts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_maps.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slide.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_slide_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_modified_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITheme_Themes_Details::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
