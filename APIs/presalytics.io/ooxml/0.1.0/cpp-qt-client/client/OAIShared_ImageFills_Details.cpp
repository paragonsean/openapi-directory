/**
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShared_ImageFills_Details.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShared_ImageFills_Details::OAIShared_ImageFills_Details(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShared_ImageFills_Details::OAIShared_ImageFills_Details() {
    this->initializeModel();
}

OAIShared_ImageFills_Details::~OAIShared_ImageFills_Details() {}

void OAIShared_ImageFills_Details::initializeModel() {

    m_compression_state_isSet = false;
    m_compression_state_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_modified_isSet = false;
    m_date_modified_isValid = false;

    m_dpi_isSet = false;
    m_dpi_isValid = false;

    m_effects_json_isSet = false;
    m_effects_json_isValid = false;

    m_fill_map_isSet = false;
    m_fill_map_isValid = false;

    m_fill_map_id_isSet = false;
    m_fill_map_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_picture_isSet = false;
    m_picture_isValid = false;

    m_rotate_with_shape_isSet = false;
    m_rotate_with_shape_isValid = false;

    m_source_rectangle_isSet = false;
    m_source_rectangle_isValid = false;

    m_stretch_isSet = false;
    m_stretch_isValid = false;

    m_tile_isSet = false;
    m_tile_isValid = false;

    m_user_created_isSet = false;
    m_user_created_isValid = false;

    m_user_modified_isSet = false;
    m_user_modified_isValid = false;
}

void OAIShared_ImageFills_Details::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShared_ImageFills_Details::fromJsonObject(QJsonObject json) {

    m_compression_state_isValid = ::OpenAPI::fromJsonValue(m_compression_state, json[QString("compressionState")]);
    m_compression_state_isSet = !json[QString("compressionState")].isNull() && m_compression_state_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("dateCreated")]);
    m_date_created_isSet = !json[QString("dateCreated")].isNull() && m_date_created_isValid;

    m_date_modified_isValid = ::OpenAPI::fromJsonValue(m_date_modified, json[QString("dateModified")]);
    m_date_modified_isSet = !json[QString("dateModified")].isNull() && m_date_modified_isValid;

    m_dpi_isValid = ::OpenAPI::fromJsonValue(m_dpi, json[QString("dpi")]);
    m_dpi_isSet = !json[QString("dpi")].isNull() && m_dpi_isValid;

    m_effects_json_isValid = ::OpenAPI::fromJsonValue(m_effects_json, json[QString("effectsJson")]);
    m_effects_json_isSet = !json[QString("effectsJson")].isNull() && m_effects_json_isValid;

    m_fill_map_isValid = ::OpenAPI::fromJsonValue(m_fill_map, json[QString("fillMap")]);
    m_fill_map_isSet = !json[QString("fillMap")].isNull() && m_fill_map_isValid;

    m_fill_map_id_isValid = ::OpenAPI::fromJsonValue(m_fill_map_id, json[QString("fillMapId")]);
    m_fill_map_id_isSet = !json[QString("fillMapId")].isNull() && m_fill_map_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_picture_isValid = ::OpenAPI::fromJsonValue(m_picture, json[QString("picture")]);
    m_picture_isSet = !json[QString("picture")].isNull() && m_picture_isValid;

    m_rotate_with_shape_isValid = ::OpenAPI::fromJsonValue(m_rotate_with_shape, json[QString("rotateWithShape")]);
    m_rotate_with_shape_isSet = !json[QString("rotateWithShape")].isNull() && m_rotate_with_shape_isValid;

    m_source_rectangle_isValid = ::OpenAPI::fromJsonValue(m_source_rectangle, json[QString("sourceRectangle")]);
    m_source_rectangle_isSet = !json[QString("sourceRectangle")].isNull() && m_source_rectangle_isValid;

    m_stretch_isValid = ::OpenAPI::fromJsonValue(m_stretch, json[QString("stretch")]);
    m_stretch_isSet = !json[QString("stretch")].isNull() && m_stretch_isValid;

    m_tile_isValid = ::OpenAPI::fromJsonValue(m_tile, json[QString("tile")]);
    m_tile_isSet = !json[QString("tile")].isNull() && m_tile_isValid;

    m_user_created_isValid = ::OpenAPI::fromJsonValue(m_user_created, json[QString("userCreated")]);
    m_user_created_isSet = !json[QString("userCreated")].isNull() && m_user_created_isValid;

    m_user_modified_isValid = ::OpenAPI::fromJsonValue(m_user_modified, json[QString("userModified")]);
    m_user_modified_isSet = !json[QString("userModified")].isNull() && m_user_modified_isValid;
}

QString OAIShared_ImageFills_Details::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShared_ImageFills_Details::asJsonObject() const {
    QJsonObject obj;
    if (m_compression_state_isSet) {
        obj.insert(QString("compressionState"), ::OpenAPI::toJsonValue(m_compression_state));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("dateCreated"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_modified_isSet) {
        obj.insert(QString("dateModified"), ::OpenAPI::toJsonValue(m_date_modified));
    }
    if (m_dpi_isSet) {
        obj.insert(QString("dpi"), ::OpenAPI::toJsonValue(m_dpi));
    }
    if (m_effects_json_isSet) {
        obj.insert(QString("effectsJson"), ::OpenAPI::toJsonValue(m_effects_json));
    }
    if (m_fill_map.isSet()) {
        obj.insert(QString("fillMap"), ::OpenAPI::toJsonValue(m_fill_map));
    }
    if (m_fill_map_id_isSet) {
        obj.insert(QString("fillMapId"), ::OpenAPI::toJsonValue(m_fill_map_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_picture.isSet()) {
        obj.insert(QString("picture"), ::OpenAPI::toJsonValue(m_picture));
    }
    if (m_rotate_with_shape_isSet) {
        obj.insert(QString("rotateWithShape"), ::OpenAPI::toJsonValue(m_rotate_with_shape));
    }
    if (m_source_rectangle_isSet) {
        obj.insert(QString("sourceRectangle"), ::OpenAPI::toJsonValue(m_source_rectangle));
    }
    if (m_stretch_isSet) {
        obj.insert(QString("stretch"), ::OpenAPI::toJsonValue(m_stretch));
    }
    if (m_tile_isSet) {
        obj.insert(QString("tile"), ::OpenAPI::toJsonValue(m_tile));
    }
    if (m_user_created_isSet) {
        obj.insert(QString("userCreated"), ::OpenAPI::toJsonValue(m_user_created));
    }
    if (m_user_modified_isSet) {
        obj.insert(QString("userModified"), ::OpenAPI::toJsonValue(m_user_modified));
    }
    return obj;
}

QString OAIShared_ImageFills_Details::getCompressionState() const {
    return m_compression_state;
}
void OAIShared_ImageFills_Details::setCompressionState(const QString &compression_state) {
    m_compression_state = compression_state;
    m_compression_state_isSet = true;
}

bool OAIShared_ImageFills_Details::is_compression_state_Set() const{
    return m_compression_state_isSet;
}

bool OAIShared_ImageFills_Details::is_compression_state_Valid() const{
    return m_compression_state_isValid;
}

QDateTime OAIShared_ImageFills_Details::getDateCreated() const {
    return m_date_created;
}
void OAIShared_ImageFills_Details::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIShared_ImageFills_Details::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIShared_ImageFills_Details::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAIShared_ImageFills_Details::getDateModified() const {
    return m_date_modified;
}
void OAIShared_ImageFills_Details::setDateModified(const QDateTime &date_modified) {
    m_date_modified = date_modified;
    m_date_modified_isSet = true;
}

bool OAIShared_ImageFills_Details::is_date_modified_Set() const{
    return m_date_modified_isSet;
}

bool OAIShared_ImageFills_Details::is_date_modified_Valid() const{
    return m_date_modified_isValid;
}

qint32 OAIShared_ImageFills_Details::getDpi() const {
    return m_dpi;
}
void OAIShared_ImageFills_Details::setDpi(const qint32 &dpi) {
    m_dpi = dpi;
    m_dpi_isSet = true;
}

bool OAIShared_ImageFills_Details::is_dpi_Set() const{
    return m_dpi_isSet;
}

bool OAIShared_ImageFills_Details::is_dpi_Valid() const{
    return m_dpi_isValid;
}

QString OAIShared_ImageFills_Details::getEffectsJson() const {
    return m_effects_json;
}
void OAIShared_ImageFills_Details::setEffectsJson(const QString &effects_json) {
    m_effects_json = effects_json;
    m_effects_json_isSet = true;
}

bool OAIShared_ImageFills_Details::is_effects_json_Set() const{
    return m_effects_json_isSet;
}

bool OAIShared_ImageFills_Details::is_effects_json_Valid() const{
    return m_effects_json_isValid;
}

OAIShared_FillMap_Details OAIShared_ImageFills_Details::getFillMap() const {
    return m_fill_map;
}
void OAIShared_ImageFills_Details::setFillMap(const OAIShared_FillMap_Details &fill_map) {
    m_fill_map = fill_map;
    m_fill_map_isSet = true;
}

bool OAIShared_ImageFills_Details::is_fill_map_Set() const{
    return m_fill_map_isSet;
}

bool OAIShared_ImageFills_Details::is_fill_map_Valid() const{
    return m_fill_map_isValid;
}

QString OAIShared_ImageFills_Details::getFillMapId() const {
    return m_fill_map_id;
}
void OAIShared_ImageFills_Details::setFillMapId(const QString &fill_map_id) {
    m_fill_map_id = fill_map_id;
    m_fill_map_id_isSet = true;
}

bool OAIShared_ImageFills_Details::is_fill_map_id_Set() const{
    return m_fill_map_id_isSet;
}

bool OAIShared_ImageFills_Details::is_fill_map_id_Valid() const{
    return m_fill_map_id_isValid;
}

QString OAIShared_ImageFills_Details::getId() const {
    return m_id;
}
void OAIShared_ImageFills_Details::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIShared_ImageFills_Details::is_id_Set() const{
    return m_id_isSet;
}

bool OAIShared_ImageFills_Details::is_id_Valid() const{
    return m_id_isValid;
}

OAIShared_Pictures_Details OAIShared_ImageFills_Details::getPicture() const {
    return m_picture;
}
void OAIShared_ImageFills_Details::setPicture(const OAIShared_Pictures_Details &picture) {
    m_picture = picture;
    m_picture_isSet = true;
}

bool OAIShared_ImageFills_Details::is_picture_Set() const{
    return m_picture_isSet;
}

bool OAIShared_ImageFills_Details::is_picture_Valid() const{
    return m_picture_isValid;
}

bool OAIShared_ImageFills_Details::isRotateWithShape() const {
    return m_rotate_with_shape;
}
void OAIShared_ImageFills_Details::setRotateWithShape(const bool &rotate_with_shape) {
    m_rotate_with_shape = rotate_with_shape;
    m_rotate_with_shape_isSet = true;
}

bool OAIShared_ImageFills_Details::is_rotate_with_shape_Set() const{
    return m_rotate_with_shape_isSet;
}

bool OAIShared_ImageFills_Details::is_rotate_with_shape_Valid() const{
    return m_rotate_with_shape_isValid;
}

QString OAIShared_ImageFills_Details::getSourceRectangle() const {
    return m_source_rectangle;
}
void OAIShared_ImageFills_Details::setSourceRectangle(const QString &source_rectangle) {
    m_source_rectangle = source_rectangle;
    m_source_rectangle_isSet = true;
}

bool OAIShared_ImageFills_Details::is_source_rectangle_Set() const{
    return m_source_rectangle_isSet;
}

bool OAIShared_ImageFills_Details::is_source_rectangle_Valid() const{
    return m_source_rectangle_isValid;
}

bool OAIShared_ImageFills_Details::isStretch() const {
    return m_stretch;
}
void OAIShared_ImageFills_Details::setStretch(const bool &stretch) {
    m_stretch = stretch;
    m_stretch_isSet = true;
}

bool OAIShared_ImageFills_Details::is_stretch_Set() const{
    return m_stretch_isSet;
}

bool OAIShared_ImageFills_Details::is_stretch_Valid() const{
    return m_stretch_isValid;
}

QString OAIShared_ImageFills_Details::getTile() const {
    return m_tile;
}
void OAIShared_ImageFills_Details::setTile(const QString &tile) {
    m_tile = tile;
    m_tile_isSet = true;
}

bool OAIShared_ImageFills_Details::is_tile_Set() const{
    return m_tile_isSet;
}

bool OAIShared_ImageFills_Details::is_tile_Valid() const{
    return m_tile_isValid;
}

QString OAIShared_ImageFills_Details::getUserCreated() const {
    return m_user_created;
}
void OAIShared_ImageFills_Details::setUserCreated(const QString &user_created) {
    m_user_created = user_created;
    m_user_created_isSet = true;
}

bool OAIShared_ImageFills_Details::is_user_created_Set() const{
    return m_user_created_isSet;
}

bool OAIShared_ImageFills_Details::is_user_created_Valid() const{
    return m_user_created_isValid;
}

QString OAIShared_ImageFills_Details::getUserModified() const {
    return m_user_modified;
}
void OAIShared_ImageFills_Details::setUserModified(const QString &user_modified) {
    m_user_modified = user_modified;
    m_user_modified_isSet = true;
}

bool OAIShared_ImageFills_Details::is_user_modified_Set() const{
    return m_user_modified_isSet;
}

bool OAIShared_ImageFills_Details::is_user_modified_Valid() const{
    return m_user_modified_isValid;
}

bool OAIShared_ImageFills_Details::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_compression_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dpi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_effects_json_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fill_map.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fill_map_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_picture.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rotate_with_shape_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_rectangle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stretch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tile_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_modified_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShared_ImageFills_Details::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
