/**
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShared_Text.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShared_Text::OAIShared_Text(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShared_Text::OAIShared_Text() {
    this->initializeModel();
}

OAIShared_Text::~OAIShared_Text() {}

void OAIShared_Text::initializeModel() {

    m_color_solid_fills_id_isSet = false;
    m_color_solid_fills_id_isValid = false;

    m_font_isSet = false;
    m_font_isValid = false;

    m_font_size_isSet = false;
    m_font_size_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_bold_isSet = false;
    m_is_bold_isValid = false;

    m_is_italic_isSet = false;
    m_is_italic_isValid = false;

    m_is_theme_font_isSet = false;
    m_is_theme_font_isValid = false;

    m_is_underline_isSet = false;
    m_is_underline_isValid = false;

    m_paragraph_id_isSet = false;
    m_paragraph_id_isValid = false;

    m_raw_text_isSet = false;
    m_raw_text_isValid = false;

    m_sequence_isSet = false;
    m_sequence_isValid = false;
}

void OAIShared_Text::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShared_Text::fromJsonObject(QJsonObject json) {

    m_color_solid_fills_id_isValid = ::OpenAPI::fromJsonValue(m_color_solid_fills_id, json[QString("colorSolidFillsId")]);
    m_color_solid_fills_id_isSet = !json[QString("colorSolidFillsId")].isNull() && m_color_solid_fills_id_isValid;

    m_font_isValid = ::OpenAPI::fromJsonValue(m_font, json[QString("font")]);
    m_font_isSet = !json[QString("font")].isNull() && m_font_isValid;

    m_font_size_isValid = ::OpenAPI::fromJsonValue(m_font_size, json[QString("fontSize")]);
    m_font_size_isSet = !json[QString("fontSize")].isNull() && m_font_size_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_bold_isValid = ::OpenAPI::fromJsonValue(m_is_bold, json[QString("isBold")]);
    m_is_bold_isSet = !json[QString("isBold")].isNull() && m_is_bold_isValid;

    m_is_italic_isValid = ::OpenAPI::fromJsonValue(m_is_italic, json[QString("isItalic")]);
    m_is_italic_isSet = !json[QString("isItalic")].isNull() && m_is_italic_isValid;

    m_is_theme_font_isValid = ::OpenAPI::fromJsonValue(m_is_theme_font, json[QString("isThemeFont")]);
    m_is_theme_font_isSet = !json[QString("isThemeFont")].isNull() && m_is_theme_font_isValid;

    m_is_underline_isValid = ::OpenAPI::fromJsonValue(m_is_underline, json[QString("isUnderline")]);
    m_is_underline_isSet = !json[QString("isUnderline")].isNull() && m_is_underline_isValid;

    m_paragraph_id_isValid = ::OpenAPI::fromJsonValue(m_paragraph_id, json[QString("paragraphId")]);
    m_paragraph_id_isSet = !json[QString("paragraphId")].isNull() && m_paragraph_id_isValid;

    m_raw_text_isValid = ::OpenAPI::fromJsonValue(m_raw_text, json[QString("rawText")]);
    m_raw_text_isSet = !json[QString("rawText")].isNull() && m_raw_text_isValid;

    m_sequence_isValid = ::OpenAPI::fromJsonValue(m_sequence, json[QString("sequence")]);
    m_sequence_isSet = !json[QString("sequence")].isNull() && m_sequence_isValid;
}

QString OAIShared_Text::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShared_Text::asJsonObject() const {
    QJsonObject obj;
    if (m_color_solid_fills_id_isSet) {
        obj.insert(QString("colorSolidFillsId"), ::OpenAPI::toJsonValue(m_color_solid_fills_id));
    }
    if (m_font_isSet) {
        obj.insert(QString("font"), ::OpenAPI::toJsonValue(m_font));
    }
    if (m_font_size_isSet) {
        obj.insert(QString("fontSize"), ::OpenAPI::toJsonValue(m_font_size));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_bold_isSet) {
        obj.insert(QString("isBold"), ::OpenAPI::toJsonValue(m_is_bold));
    }
    if (m_is_italic_isSet) {
        obj.insert(QString("isItalic"), ::OpenAPI::toJsonValue(m_is_italic));
    }
    if (m_is_theme_font_isSet) {
        obj.insert(QString("isThemeFont"), ::OpenAPI::toJsonValue(m_is_theme_font));
    }
    if (m_is_underline_isSet) {
        obj.insert(QString("isUnderline"), ::OpenAPI::toJsonValue(m_is_underline));
    }
    if (m_paragraph_id_isSet) {
        obj.insert(QString("paragraphId"), ::OpenAPI::toJsonValue(m_paragraph_id));
    }
    if (m_raw_text_isSet) {
        obj.insert(QString("rawText"), ::OpenAPI::toJsonValue(m_raw_text));
    }
    if (m_sequence_isSet) {
        obj.insert(QString("sequence"), ::OpenAPI::toJsonValue(m_sequence));
    }
    return obj;
}

QString OAIShared_Text::getColorSolidFillsId() const {
    return m_color_solid_fills_id;
}
void OAIShared_Text::setColorSolidFillsId(const QString &color_solid_fills_id) {
    m_color_solid_fills_id = color_solid_fills_id;
    m_color_solid_fills_id_isSet = true;
}

bool OAIShared_Text::is_color_solid_fills_id_Set() const{
    return m_color_solid_fills_id_isSet;
}

bool OAIShared_Text::is_color_solid_fills_id_Valid() const{
    return m_color_solid_fills_id_isValid;
}

QString OAIShared_Text::getFont() const {
    return m_font;
}
void OAIShared_Text::setFont(const QString &font) {
    m_font = font;
    m_font_isSet = true;
}

bool OAIShared_Text::is_font_Set() const{
    return m_font_isSet;
}

bool OAIShared_Text::is_font_Valid() const{
    return m_font_isValid;
}

qint32 OAIShared_Text::getFontSize() const {
    return m_font_size;
}
void OAIShared_Text::setFontSize(const qint32 &font_size) {
    m_font_size = font_size;
    m_font_size_isSet = true;
}

bool OAIShared_Text::is_font_size_Set() const{
    return m_font_size_isSet;
}

bool OAIShared_Text::is_font_size_Valid() const{
    return m_font_size_isValid;
}

QString OAIShared_Text::getId() const {
    return m_id;
}
void OAIShared_Text::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIShared_Text::is_id_Set() const{
    return m_id_isSet;
}

bool OAIShared_Text::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIShared_Text::isIsBold() const {
    return m_is_bold;
}
void OAIShared_Text::setIsBold(const bool &is_bold) {
    m_is_bold = is_bold;
    m_is_bold_isSet = true;
}

bool OAIShared_Text::is_is_bold_Set() const{
    return m_is_bold_isSet;
}

bool OAIShared_Text::is_is_bold_Valid() const{
    return m_is_bold_isValid;
}

bool OAIShared_Text::isIsItalic() const {
    return m_is_italic;
}
void OAIShared_Text::setIsItalic(const bool &is_italic) {
    m_is_italic = is_italic;
    m_is_italic_isSet = true;
}

bool OAIShared_Text::is_is_italic_Set() const{
    return m_is_italic_isSet;
}

bool OAIShared_Text::is_is_italic_Valid() const{
    return m_is_italic_isValid;
}

bool OAIShared_Text::isIsThemeFont() const {
    return m_is_theme_font;
}
void OAIShared_Text::setIsThemeFont(const bool &is_theme_font) {
    m_is_theme_font = is_theme_font;
    m_is_theme_font_isSet = true;
}

bool OAIShared_Text::is_is_theme_font_Set() const{
    return m_is_theme_font_isSet;
}

bool OAIShared_Text::is_is_theme_font_Valid() const{
    return m_is_theme_font_isValid;
}

bool OAIShared_Text::isIsUnderline() const {
    return m_is_underline;
}
void OAIShared_Text::setIsUnderline(const bool &is_underline) {
    m_is_underline = is_underline;
    m_is_underline_isSet = true;
}

bool OAIShared_Text::is_is_underline_Set() const{
    return m_is_underline_isSet;
}

bool OAIShared_Text::is_is_underline_Valid() const{
    return m_is_underline_isValid;
}

QString OAIShared_Text::getParagraphId() const {
    return m_paragraph_id;
}
void OAIShared_Text::setParagraphId(const QString &paragraph_id) {
    m_paragraph_id = paragraph_id;
    m_paragraph_id_isSet = true;
}

bool OAIShared_Text::is_paragraph_id_Set() const{
    return m_paragraph_id_isSet;
}

bool OAIShared_Text::is_paragraph_id_Valid() const{
    return m_paragraph_id_isValid;
}

QString OAIShared_Text::getRawText() const {
    return m_raw_text;
}
void OAIShared_Text::setRawText(const QString &raw_text) {
    m_raw_text = raw_text;
    m_raw_text_isSet = true;
}

bool OAIShared_Text::is_raw_text_Set() const{
    return m_raw_text_isSet;
}

bool OAIShared_Text::is_raw_text_Valid() const{
    return m_raw_text_isValid;
}

qint32 OAIShared_Text::getSequence() const {
    return m_sequence;
}
void OAIShared_Text::setSequence(const qint32 &sequence) {
    m_sequence = sequence;
    m_sequence_isSet = true;
}

bool OAIShared_Text::is_sequence_Set() const{
    return m_sequence_isSet;
}

bool OAIShared_Text::is_sequence_Valid() const{
    return m_sequence_isValid;
}

bool OAIShared_Text::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_color_solid_fills_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_font_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_font_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_bold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_italic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_theme_font_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_underline_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_paragraph_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_raw_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sequence_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShared_Text::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
