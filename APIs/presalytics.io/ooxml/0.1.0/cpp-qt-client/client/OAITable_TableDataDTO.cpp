/**
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITable_TableDataDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITable_TableDataDTO::OAITable_TableDataDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITable_TableDataDTO::OAITable_TableDataDTO() {
    this->initializeModel();
}

OAITable_TableDataDTO::~OAITable_TableDataDTO() {}

void OAITable_TableDataDTO::initializeModel() {

    m_table_data_isSet = false;
    m_table_data_isValid = false;

    m_table_id_isSet = false;
    m_table_id_isValid = false;
}

void OAITable_TableDataDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITable_TableDataDTO::fromJsonObject(QJsonObject json) {

    if(json["tableData"].isArray()){
        auto arr = json["tableData"].toArray();
        m_table_data_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QList<QString> item;
                m_table_data_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_table_data_isSet = !jval.isNull() && m_table_data_isValid;
                m_table_data.push_back(item);
            }
        }
    }

    m_table_id_isValid = ::OpenAPI::fromJsonValue(m_table_id, json[QString("tableId")]);
    m_table_id_isSet = !json[QString("tableId")].isNull() && m_table_id_isValid;
}

QString OAITable_TableDataDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITable_TableDataDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_table_data.size() > 0) {
        
        obj.insert(QString("tableData"), toJsonValue(m_table_data));
    }
    if (m_table_id_isSet) {
        obj.insert(QString("tableId"), ::OpenAPI::toJsonValue(m_table_id));
    }
    return obj;
}

QList<QList<QString>> OAITable_TableDataDTO::getTableData() const {
    return m_table_data;
}
void OAITable_TableDataDTO::setTableData(const QList<QList<QString>> &table_data) {
    m_table_data = table_data;
    m_table_data_isSet = true;
}

bool OAITable_TableDataDTO::is_table_data_Set() const{
    return m_table_data_isSet;
}

bool OAITable_TableDataDTO::is_table_data_Valid() const{
    return m_table_data_isValid;
}

QString OAITable_TableDataDTO::getTableId() const {
    return m_table_id;
}
void OAITable_TableDataDTO::setTableId(const QString &table_id) {
    m_table_id = table_id;
    m_table_id_isSet = true;
}

bool OAITable_TableDataDTO::is_table_id_Set() const{
    return m_table_id_isSet;
}

bool OAITable_TableDataDTO::is_table_id_Valid() const{
    return m_table_id_isValid;
}

bool OAITable_TableDataDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_table_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITable_TableDataDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
