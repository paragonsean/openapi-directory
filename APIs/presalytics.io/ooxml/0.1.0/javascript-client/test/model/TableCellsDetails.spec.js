/**
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.OoxmlAutomation);
  }
}(this, function(expect, OoxmlAutomation) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new OoxmlAutomation.TableCellsDetails();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('TableCellsDetails', function() {
    it('should create an instance of TableCellsDetails', function() {
      // uncomment below and update the code to test TableCellsDetails
      //var instance = new OoxmlAutomation.TableCellsDetails();
      //expect(instance).to.be.a(OoxmlAutomation.TableCellsDetails);
    });

    it('should have the property border (base name: "border")', function() {
      // uncomment below and update the code to test the property border
      //var instance = new OoxmlAutomation.TableCellsDetails();
      //expect(instance).to.be();
    });

    it('should have the property column (base name: "column")', function() {
      // uncomment below and update the code to test the property column
      //var instance = new OoxmlAutomation.TableCellsDetails();
      //expect(instance).to.be();
    });

    it('should have the property columnId (base name: "columnId")', function() {
      // uncomment below and update the code to test the property columnId
      //var instance = new OoxmlAutomation.TableCellsDetails();
      //expect(instance).to.be();
    });

    it('should have the property columnSpan (base name: "columnSpan")', function() {
      // uncomment below and update the code to test the property columnSpan
      //var instance = new OoxmlAutomation.TableCellsDetails();
      //expect(instance).to.be();
    });

    it('should have the property dateCreated (base name: "dateCreated")', function() {
      // uncomment below and update the code to test the property dateCreated
      //var instance = new OoxmlAutomation.TableCellsDetails();
      //expect(instance).to.be();
    });

    it('should have the property dateModified (base name: "dateModified")', function() {
      // uncomment below and update the code to test the property dateModified
      //var instance = new OoxmlAutomation.TableCellsDetails();
      //expect(instance).to.be();
    });

    it('should have the property fillMap (base name: "fillMap")', function() {
      // uncomment below and update the code to test the property fillMap
      //var instance = new OoxmlAutomation.TableCellsDetails();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new OoxmlAutomation.TableCellsDetails();
      //expect(instance).to.be();
    });

    it('should have the property isMergedHorozontal (base name: "isMergedHorozontal")', function() {
      // uncomment below and update the code to test the property isMergedHorozontal
      //var instance = new OoxmlAutomation.TableCellsDetails();
      //expect(instance).to.be();
    });

    it('should have the property isMergedVertical (base name: "isMergedVertical")', function() {
      // uncomment below and update the code to test the property isMergedVertical
      //var instance = new OoxmlAutomation.TableCellsDetails();
      //expect(instance).to.be();
    });

    it('should have the property row (base name: "row")', function() {
      // uncomment below and update the code to test the property row
      //var instance = new OoxmlAutomation.TableCellsDetails();
      //expect(instance).to.be();
    });

    it('should have the property rowId (base name: "rowId")', function() {
      // uncomment below and update the code to test the property rowId
      //var instance = new OoxmlAutomation.TableCellsDetails();
      //expect(instance).to.be();
    });

    it('should have the property rowSpan (base name: "rowSpan")', function() {
      // uncomment below and update the code to test the property rowSpan
      //var instance = new OoxmlAutomation.TableCellsDetails();
      //expect(instance).to.be();
    });

    it('should have the property textContainer (base name: "textContainer")', function() {
      // uncomment below and update the code to test the property textContainer
      //var instance = new OoxmlAutomation.TableCellsDetails();
      //expect(instance).to.be();
    });

    it('should have the property userCreated (base name: "userCreated")', function() {
      // uncomment below and update the code to test the property userCreated
      //var instance = new OoxmlAutomation.TableCellsDetails();
      //expect(instance).to.be();
    });

    it('should have the property userModified (base name: "userModified")', function() {
      // uncomment below and update the code to test the property userModified
      //var instance = new OoxmlAutomation.TableCellsDetails();
      //expect(instance).to.be();
    });

  });

}));
