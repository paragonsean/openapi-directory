/**
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SharedColorTransformationsDetails from './SharedColorTransformationsDetails';

/**
 * The SharedColorTransformationAttributesDetails model module.
 * @module model/SharedColorTransformationAttributesDetails
 * @version 0.1.0
 */
class SharedColorTransformationAttributesDetails {
    /**
     * Constructs a new <code>SharedColorTransformationAttributesDetails</code>.
     * @alias module:model/SharedColorTransformationAttributesDetails
     */
    constructor() { 
        
        SharedColorTransformationAttributesDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SharedColorTransformationAttributesDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SharedColorTransformationAttributesDetails} obj Optional instance to populate.
     * @return {module:model/SharedColorTransformationAttributesDetails} The populated <code>SharedColorTransformationAttributesDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SharedColorTransformationAttributesDetails();

            if (data.hasOwnProperty('colorTransformation')) {
                obj['colorTransformation'] = SharedColorTransformationsDetails.constructFromObject(data['colorTransformation']);
            }
            if (data.hasOwnProperty('colorTransformationsId')) {
                obj['colorTransformationsId'] = ApiClient.convertToType(data['colorTransformationsId'], 'String');
            }
            if (data.hasOwnProperty('dateCreated')) {
                obj['dateCreated'] = ApiClient.convertToType(data['dateCreated'], 'Date');
            }
            if (data.hasOwnProperty('dateModified')) {
                obj['dateModified'] = ApiClient.convertToType(data['dateModified'], 'Date');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('userCreated')) {
                obj['userCreated'] = ApiClient.convertToType(data['userCreated'], 'String');
            }
            if (data.hasOwnProperty('userModified')) {
                obj['userModified'] = ApiClient.convertToType(data['userModified'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SharedColorTransformationAttributesDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SharedColorTransformationAttributesDetails</code>.
     */
    static validateJSON(data) {
        // validate the optional field `colorTransformation`
        if (data['colorTransformation']) { // data not null
          SharedColorTransformationsDetails.validateJSON(data['colorTransformation']);
        }
        // ensure the json data is a string
        if (data['colorTransformationsId'] && !(typeof data['colorTransformationsId'] === 'string' || data['colorTransformationsId'] instanceof String)) {
            throw new Error("Expected the field `colorTransformationsId` to be a primitive type in the JSON string but got " + data['colorTransformationsId']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['userCreated'] && !(typeof data['userCreated'] === 'string' || data['userCreated'] instanceof String)) {
            throw new Error("Expected the field `userCreated` to be a primitive type in the JSON string but got " + data['userCreated']);
        }
        // ensure the json data is a string
        if (data['userModified'] && !(typeof data['userModified'] === 'string' || data['userModified'] instanceof String)) {
            throw new Error("Expected the field `userModified` to be a primitive type in the JSON string but got " + data['userModified']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }

        return true;
    }


}



/**
 * @member {module:model/SharedColorTransformationsDetails} colorTransformation
 */
SharedColorTransformationAttributesDetails.prototype['colorTransformation'] = undefined;

/**
 * @member {String} colorTransformationsId
 */
SharedColorTransformationAttributesDetails.prototype['colorTransformationsId'] = undefined;

/**
 * @member {Date} dateCreated
 */
SharedColorTransformationAttributesDetails.prototype['dateCreated'] = undefined;

/**
 * @member {Date} dateModified
 */
SharedColorTransformationAttributesDetails.prototype['dateModified'] = undefined;

/**
 * @member {String} id
 */
SharedColorTransformationAttributesDetails.prototype['id'] = undefined;

/**
 * @member {String} name
 */
SharedColorTransformationAttributesDetails.prototype['name'] = undefined;

/**
 * @member {String} userCreated
 */
SharedColorTransformationAttributesDetails.prototype['userCreated'] = undefined;

/**
 * @member {String} userModified
 */
SharedColorTransformationAttributesDetails.prototype['userModified'] = undefined;

/**
 * @member {String} value
 */
SharedColorTransformationAttributesDetails.prototype['value'] = undefined;






export default SharedColorTransformationAttributesDetails;

