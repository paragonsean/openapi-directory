/**
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SlideSlideMastersDetails from './SlideSlideMastersDetails';

/**
 * The SlideColorMapsDetails model module.
 * @module model/SlideColorMapsDetails
 * @version 0.1.0
 */
class SlideColorMapsDetails {
    /**
     * Constructs a new <code>SlideColorMapsDetails</code>.
     * @alias module:model/SlideColorMapsDetails
     */
    constructor() { 
        
        SlideColorMapsDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SlideColorMapsDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SlideColorMapsDetails} obj Optional instance to populate.
     * @return {module:model/SlideColorMapsDetails} The populated <code>SlideColorMapsDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SlideColorMapsDetails();

            if (data.hasOwnProperty('accent1')) {
                obj['accent1'] = ApiClient.convertToType(data['accent1'], 'Number');
            }
            if (data.hasOwnProperty('accent2')) {
                obj['accent2'] = ApiClient.convertToType(data['accent2'], 'Number');
            }
            if (data.hasOwnProperty('accent3')) {
                obj['accent3'] = ApiClient.convertToType(data['accent3'], 'Number');
            }
            if (data.hasOwnProperty('accent4')) {
                obj['accent4'] = ApiClient.convertToType(data['accent4'], 'Number');
            }
            if (data.hasOwnProperty('accent5')) {
                obj['accent5'] = ApiClient.convertToType(data['accent5'], 'Number');
            }
            if (data.hasOwnProperty('accent6')) {
                obj['accent6'] = ApiClient.convertToType(data['accent6'], 'Number');
            }
            if (data.hasOwnProperty('background1')) {
                obj['background1'] = ApiClient.convertToType(data['background1'], 'Number');
            }
            if (data.hasOwnProperty('background2')) {
                obj['background2'] = ApiClient.convertToType(data['background2'], 'Number');
            }
            if (data.hasOwnProperty('dateCreated')) {
                obj['dateCreated'] = ApiClient.convertToType(data['dateCreated'], 'Date');
            }
            if (data.hasOwnProperty('dateModified')) {
                obj['dateModified'] = ApiClient.convertToType(data['dateModified'], 'Date');
            }
            if (data.hasOwnProperty('followedHyperlink')) {
                obj['followedHyperlink'] = ApiClient.convertToType(data['followedHyperlink'], 'Number');
            }
            if (data.hasOwnProperty('hyperlink')) {
                obj['hyperlink'] = ApiClient.convertToType(data['hyperlink'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('slideMaster')) {
                obj['slideMaster'] = SlideSlideMastersDetails.constructFromObject(data['slideMaster']);
            }
            if (data.hasOwnProperty('slideMasterId')) {
                obj['slideMasterId'] = ApiClient.convertToType(data['slideMasterId'], 'String');
            }
            if (data.hasOwnProperty('text1')) {
                obj['text1'] = ApiClient.convertToType(data['text1'], 'Number');
            }
            if (data.hasOwnProperty('text2')) {
                obj['text2'] = ApiClient.convertToType(data['text2'], 'Number');
            }
            if (data.hasOwnProperty('userCreated')) {
                obj['userCreated'] = ApiClient.convertToType(data['userCreated'], 'String');
            }
            if (data.hasOwnProperty('userModified')) {
                obj['userModified'] = ApiClient.convertToType(data['userModified'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SlideColorMapsDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SlideColorMapsDetails</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `slideMaster`
        if (data['slideMaster']) { // data not null
          SlideSlideMastersDetails.validateJSON(data['slideMaster']);
        }
        // ensure the json data is a string
        if (data['slideMasterId'] && !(typeof data['slideMasterId'] === 'string' || data['slideMasterId'] instanceof String)) {
            throw new Error("Expected the field `slideMasterId` to be a primitive type in the JSON string but got " + data['slideMasterId']);
        }
        // ensure the json data is a string
        if (data['userCreated'] && !(typeof data['userCreated'] === 'string' || data['userCreated'] instanceof String)) {
            throw new Error("Expected the field `userCreated` to be a primitive type in the JSON string but got " + data['userCreated']);
        }
        // ensure the json data is a string
        if (data['userModified'] && !(typeof data['userModified'] === 'string' || data['userModified'] instanceof String)) {
            throw new Error("Expected the field `userModified` to be a primitive type in the JSON string but got " + data['userModified']);
        }

        return true;
    }


}



/**
 * @member {Number} accent1
 */
SlideColorMapsDetails.prototype['accent1'] = undefined;

/**
 * @member {Number} accent2
 */
SlideColorMapsDetails.prototype['accent2'] = undefined;

/**
 * @member {Number} accent3
 */
SlideColorMapsDetails.prototype['accent3'] = undefined;

/**
 * @member {Number} accent4
 */
SlideColorMapsDetails.prototype['accent4'] = undefined;

/**
 * @member {Number} accent5
 */
SlideColorMapsDetails.prototype['accent5'] = undefined;

/**
 * @member {Number} accent6
 */
SlideColorMapsDetails.prototype['accent6'] = undefined;

/**
 * @member {Number} background1
 */
SlideColorMapsDetails.prototype['background1'] = undefined;

/**
 * @member {Number} background2
 */
SlideColorMapsDetails.prototype['background2'] = undefined;

/**
 * @member {Date} dateCreated
 */
SlideColorMapsDetails.prototype['dateCreated'] = undefined;

/**
 * @member {Date} dateModified
 */
SlideColorMapsDetails.prototype['dateModified'] = undefined;

/**
 * @member {Number} followedHyperlink
 */
SlideColorMapsDetails.prototype['followedHyperlink'] = undefined;

/**
 * @member {Number} hyperlink
 */
SlideColorMapsDetails.prototype['hyperlink'] = undefined;

/**
 * @member {String} id
 */
SlideColorMapsDetails.prototype['id'] = undefined;

/**
 * @member {module:model/SlideSlideMastersDetails} slideMaster
 */
SlideColorMapsDetails.prototype['slideMaster'] = undefined;

/**
 * @member {String} slideMasterId
 */
SlideColorMapsDetails.prototype['slideMasterId'] = undefined;

/**
 * @member {Number} text1
 */
SlideColorMapsDetails.prototype['text1'] = undefined;

/**
 * @member {Number} text2
 */
SlideColorMapsDetails.prototype['text2'] = undefined;

/**
 * @member {String} userCreated
 */
SlideColorMapsDetails.prototype['userCreated'] = undefined;

/**
 * @member {String} userModified
 */
SlideColorMapsDetails.prototype['userModified'] = undefined;






export default SlideColorMapsDetails;

