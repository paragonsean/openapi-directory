/**
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SlideGraphicsDetails from './SlideGraphicsDetails';
import TableCellsDetails from './TableCellsDetails';
import TableColumnsDetails from './TableColumnsDetails';
import TableRowsDetails from './TableRowsDetails';

/**
 * The TableTablesDetails model module.
 * @module model/TableTablesDetails
 * @version 0.1.0
 */
class TableTablesDetails {
    /**
     * Constructs a new <code>TableTablesDetails</code>.
     * @alias module:model/TableTablesDetails
     */
    constructor() { 
        
        TableTablesDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TableTablesDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TableTablesDetails} obj Optional instance to populate.
     * @return {module:model/TableTablesDetails} The populated <code>TableTablesDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TableTablesDetails();

            if (data.hasOwnProperty('baseElementBlobUrl')) {
                obj['baseElementBlobUrl'] = ApiClient.convertToType(data['baseElementBlobUrl'], 'String');
            }
            if (data.hasOwnProperty('cells')) {
                obj['cells'] = ApiClient.convertToType(data['cells'], [TableCellsDetails]);
            }
            if (data.hasOwnProperty('changedBaseElementBlobUrl')) {
                obj['changedBaseElementBlobUrl'] = ApiClient.convertToType(data['changedBaseElementBlobUrl'], 'String');
            }
            if (data.hasOwnProperty('columns')) {
                obj['columns'] = ApiClient.convertToType(data['columns'], [TableColumnsDetails]);
            }
            if (data.hasOwnProperty('dateCreated')) {
                obj['dateCreated'] = ApiClient.convertToType(data['dateCreated'], 'Date');
            }
            if (data.hasOwnProperty('dateModified')) {
                obj['dateModified'] = ApiClient.convertToType(data['dateModified'], 'Date');
            }
            if (data.hasOwnProperty('hasStylePart')) {
                obj['hasStylePart'] = ApiClient.convertToType(data['hasStylePart'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('packageUri')) {
                obj['packageUri'] = ApiClient.convertToType(data['packageUri'], 'String');
            }
            if (data.hasOwnProperty('parentGraphic')) {
                obj['parentGraphic'] = SlideGraphicsDetails.constructFromObject(data['parentGraphic']);
            }
            if (data.hasOwnProperty('parentGraphicId')) {
                obj['parentGraphicId'] = ApiClient.convertToType(data['parentGraphicId'], 'String');
            }
            if (data.hasOwnProperty('rows')) {
                obj['rows'] = ApiClient.convertToType(data['rows'], [TableRowsDetails]);
            }
            if (data.hasOwnProperty('stylePartOuterXml')) {
                obj['stylePartOuterXml'] = ApiClient.convertToType(data['stylePartOuterXml'], 'String');
            }
            if (data.hasOwnProperty('svgBlobUrl')) {
                obj['svgBlobUrl'] = ApiClient.convertToType(data['svgBlobUrl'], 'String');
            }
            if (data.hasOwnProperty('userCreated')) {
                obj['userCreated'] = ApiClient.convertToType(data['userCreated'], 'String');
            }
            if (data.hasOwnProperty('userModified')) {
                obj['userModified'] = ApiClient.convertToType(data['userModified'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TableTablesDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TableTablesDetails</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['baseElementBlobUrl'] && !(typeof data['baseElementBlobUrl'] === 'string' || data['baseElementBlobUrl'] instanceof String)) {
            throw new Error("Expected the field `baseElementBlobUrl` to be a primitive type in the JSON string but got " + data['baseElementBlobUrl']);
        }
        if (data['cells']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['cells'])) {
                throw new Error("Expected the field `cells` to be an array in the JSON data but got " + data['cells']);
            }
            // validate the optional field `cells` (array)
            for (const item of data['cells']) {
                TableCellsDetails.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['changedBaseElementBlobUrl'] && !(typeof data['changedBaseElementBlobUrl'] === 'string' || data['changedBaseElementBlobUrl'] instanceof String)) {
            throw new Error("Expected the field `changedBaseElementBlobUrl` to be a primitive type in the JSON string but got " + data['changedBaseElementBlobUrl']);
        }
        if (data['columns']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['columns'])) {
                throw new Error("Expected the field `columns` to be an array in the JSON data but got " + data['columns']);
            }
            // validate the optional field `columns` (array)
            for (const item of data['columns']) {
                TableColumnsDetails.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['packageUri'] && !(typeof data['packageUri'] === 'string' || data['packageUri'] instanceof String)) {
            throw new Error("Expected the field `packageUri` to be a primitive type in the JSON string but got " + data['packageUri']);
        }
        // validate the optional field `parentGraphic`
        if (data['parentGraphic']) { // data not null
          SlideGraphicsDetails.validateJSON(data['parentGraphic']);
        }
        // ensure the json data is a string
        if (data['parentGraphicId'] && !(typeof data['parentGraphicId'] === 'string' || data['parentGraphicId'] instanceof String)) {
            throw new Error("Expected the field `parentGraphicId` to be a primitive type in the JSON string but got " + data['parentGraphicId']);
        }
        if (data['rows']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['rows'])) {
                throw new Error("Expected the field `rows` to be an array in the JSON data but got " + data['rows']);
            }
            // validate the optional field `rows` (array)
            for (const item of data['rows']) {
                TableRowsDetails.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['stylePartOuterXml'] && !(typeof data['stylePartOuterXml'] === 'string' || data['stylePartOuterXml'] instanceof String)) {
            throw new Error("Expected the field `stylePartOuterXml` to be a primitive type in the JSON string but got " + data['stylePartOuterXml']);
        }
        // ensure the json data is a string
        if (data['svgBlobUrl'] && !(typeof data['svgBlobUrl'] === 'string' || data['svgBlobUrl'] instanceof String)) {
            throw new Error("Expected the field `svgBlobUrl` to be a primitive type in the JSON string but got " + data['svgBlobUrl']);
        }
        // ensure the json data is a string
        if (data['userCreated'] && !(typeof data['userCreated'] === 'string' || data['userCreated'] instanceof String)) {
            throw new Error("Expected the field `userCreated` to be a primitive type in the JSON string but got " + data['userCreated']);
        }
        // ensure the json data is a string
        if (data['userModified'] && !(typeof data['userModified'] === 'string' || data['userModified'] instanceof String)) {
            throw new Error("Expected the field `userModified` to be a primitive type in the JSON string but got " + data['userModified']);
        }

        return true;
    }


}



/**
 * @member {String} baseElementBlobUrl
 */
TableTablesDetails.prototype['baseElementBlobUrl'] = undefined;

/**
 * @member {Array.<module:model/TableCellsDetails>} cells
 */
TableTablesDetails.prototype['cells'] = undefined;

/**
 * @member {String} changedBaseElementBlobUrl
 */
TableTablesDetails.prototype['changedBaseElementBlobUrl'] = undefined;

/**
 * @member {Array.<module:model/TableColumnsDetails>} columns
 */
TableTablesDetails.prototype['columns'] = undefined;

/**
 * @member {Date} dateCreated
 */
TableTablesDetails.prototype['dateCreated'] = undefined;

/**
 * @member {Date} dateModified
 */
TableTablesDetails.prototype['dateModified'] = undefined;

/**
 * @member {Boolean} hasStylePart
 */
TableTablesDetails.prototype['hasStylePart'] = undefined;

/**
 * @member {String} id
 */
TableTablesDetails.prototype['id'] = undefined;

/**
 * @member {String} name
 */
TableTablesDetails.prototype['name'] = undefined;

/**
 * @member {String} packageUri
 */
TableTablesDetails.prototype['packageUri'] = undefined;

/**
 * @member {module:model/SlideGraphicsDetails} parentGraphic
 */
TableTablesDetails.prototype['parentGraphic'] = undefined;

/**
 * @member {String} parentGraphicId
 */
TableTablesDetails.prototype['parentGraphicId'] = undefined;

/**
 * @member {Array.<module:model/TableRowsDetails>} rows
 */
TableTablesDetails.prototype['rows'] = undefined;

/**
 * @member {String} stylePartOuterXml
 */
TableTablesDetails.prototype['stylePartOuterXml'] = undefined;

/**
 * @member {String} svgBlobUrl
 */
TableTablesDetails.prototype['svgBlobUrl'] = undefined;

/**
 * @member {String} userCreated
 */
TableTablesDetails.prototype['userCreated'] = undefined;

/**
 * @member {String} userModified
 */
TableTablesDetails.prototype['userModified'] = undefined;






export default TableTablesDetails;

