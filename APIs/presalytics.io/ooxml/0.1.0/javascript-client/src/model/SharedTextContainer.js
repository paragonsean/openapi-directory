/**
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SharedTextContainer model module.
 * @module model/SharedTextContainer
 * @version 0.1.0
 */
class SharedTextContainer {
    /**
     * Constructs a new <code>SharedTextContainer</code>.
     * @alias module:model/SharedTextContainer
     */
    constructor() { 
        
        SharedTextContainer.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SharedTextContainer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SharedTextContainer} obj Optional instance to populate.
     * @return {module:model/SharedTextContainer} The populated <code>SharedTextContainer</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SharedTextContainer();

            if (data.hasOwnProperty('axisId')) {
                obj['axisId'] = ApiClient.convertToType(data['axisId'], 'String');
            }
            if (data.hasOwnProperty('chartId')) {
                obj['chartId'] = ApiClient.convertToType(data['chartId'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('outerXml')) {
                obj['outerXml'] = ApiClient.convertToType(data['outerXml'], 'String');
            }
            if (data.hasOwnProperty('shapeId')) {
                obj['shapeId'] = ApiClient.convertToType(data['shapeId'], 'String');
            }
            if (data.hasOwnProperty('tableCellId')) {
                obj['tableCellId'] = ApiClient.convertToType(data['tableCellId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SharedTextContainer</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SharedTextContainer</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['axisId'] && !(typeof data['axisId'] === 'string' || data['axisId'] instanceof String)) {
            throw new Error("Expected the field `axisId` to be a primitive type in the JSON string but got " + data['axisId']);
        }
        // ensure the json data is a string
        if (data['chartId'] && !(typeof data['chartId'] === 'string' || data['chartId'] instanceof String)) {
            throw new Error("Expected the field `chartId` to be a primitive type in the JSON string but got " + data['chartId']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['outerXml'] && !(typeof data['outerXml'] === 'string' || data['outerXml'] instanceof String)) {
            throw new Error("Expected the field `outerXml` to be a primitive type in the JSON string but got " + data['outerXml']);
        }
        // ensure the json data is a string
        if (data['shapeId'] && !(typeof data['shapeId'] === 'string' || data['shapeId'] instanceof String)) {
            throw new Error("Expected the field `shapeId` to be a primitive type in the JSON string but got " + data['shapeId']);
        }
        // ensure the json data is a string
        if (data['tableCellId'] && !(typeof data['tableCellId'] === 'string' || data['tableCellId'] instanceof String)) {
            throw new Error("Expected the field `tableCellId` to be a primitive type in the JSON string but got " + data['tableCellId']);
        }

        return true;
    }


}



/**
 * @member {String} axisId
 */
SharedTextContainer.prototype['axisId'] = undefined;

/**
 * @member {String} chartId
 */
SharedTextContainer.prototype['chartId'] = undefined;

/**
 * @member {String} id
 */
SharedTextContainer.prototype['id'] = undefined;

/**
 * @member {String} outerXml
 */
SharedTextContainer.prototype['outerXml'] = undefined;

/**
 * @member {String} shapeId
 */
SharedTextContainer.prototype['shapeId'] = undefined;

/**
 * @member {String} tableCellId
 */
SharedTextContainer.prototype['tableCellId'] = undefined;






export default SharedTextContainer;

