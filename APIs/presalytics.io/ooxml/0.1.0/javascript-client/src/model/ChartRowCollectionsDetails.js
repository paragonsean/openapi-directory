/**
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ChartAxesDetails from './ChartAxesDetails';
import ChartChartDataDetails from './ChartChartDataDetails';
import ChartRowsDetails from './ChartRowsDetails';

/**
 * The ChartRowCollectionsDetails model module.
 * @module model/ChartRowCollectionsDetails
 * @version 0.1.0
 */
class ChartRowCollectionsDetails {
    /**
     * Constructs a new <code>ChartRowCollectionsDetails</code>.
     * @alias module:model/ChartRowCollectionsDetails
     */
    constructor() { 
        
        ChartRowCollectionsDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ChartRowCollectionsDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChartRowCollectionsDetails} obj Optional instance to populate.
     * @return {module:model/ChartRowCollectionsDetails} The populated <code>ChartRowCollectionsDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChartRowCollectionsDetails();

            if (data.hasOwnProperty('axis')) {
                obj['axis'] = ChartAxesDetails.constructFromObject(data['axis']);
            }
            if (data.hasOwnProperty('axisId')) {
                obj['axisId'] = ApiClient.convertToType(data['axisId'], 'String');
            }
            if (data.hasOwnProperty('chartData')) {
                obj['chartData'] = ChartChartDataDetails.constructFromObject(data['chartData']);
            }
            if (data.hasOwnProperty('chartDataId')) {
                obj['chartDataId'] = ApiClient.convertToType(data['chartDataId'], 'String');
            }
            if (data.hasOwnProperty('dateCreated')) {
                obj['dateCreated'] = ApiClient.convertToType(data['dateCreated'], 'Date');
            }
            if (data.hasOwnProperty('dateModified')) {
                obj['dateModified'] = ApiClient.convertToType(data['dateModified'], 'Date');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('nameFormatType')) {
                obj['nameFormatType'] = ApiClient.convertToType(data['nameFormatType'], 'Number');
            }
            if (data.hasOwnProperty('rows')) {
                obj['rows'] = ApiClient.convertToType(data['rows'], [ChartRowsDetails]);
            }
            if (data.hasOwnProperty('userCreated')) {
                obj['userCreated'] = ApiClient.convertToType(data['userCreated'], 'String');
            }
            if (data.hasOwnProperty('userModified')) {
                obj['userModified'] = ApiClient.convertToType(data['userModified'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ChartRowCollectionsDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ChartRowCollectionsDetails</code>.
     */
    static validateJSON(data) {
        // validate the optional field `axis`
        if (data['axis']) { // data not null
          ChartAxesDetails.validateJSON(data['axis']);
        }
        // ensure the json data is a string
        if (data['axisId'] && !(typeof data['axisId'] === 'string' || data['axisId'] instanceof String)) {
            throw new Error("Expected the field `axisId` to be a primitive type in the JSON string but got " + data['axisId']);
        }
        // validate the optional field `chartData`
        if (data['chartData']) { // data not null
          ChartChartDataDetails.validateJSON(data['chartData']);
        }
        // ensure the json data is a string
        if (data['chartDataId'] && !(typeof data['chartDataId'] === 'string' || data['chartDataId'] instanceof String)) {
            throw new Error("Expected the field `chartDataId` to be a primitive type in the JSON string but got " + data['chartDataId']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        if (data['rows']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['rows'])) {
                throw new Error("Expected the field `rows` to be an array in the JSON data but got " + data['rows']);
            }
            // validate the optional field `rows` (array)
            for (const item of data['rows']) {
                ChartRowsDetails.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['userCreated'] && !(typeof data['userCreated'] === 'string' || data['userCreated'] instanceof String)) {
            throw new Error("Expected the field `userCreated` to be a primitive type in the JSON string but got " + data['userCreated']);
        }
        // ensure the json data is a string
        if (data['userModified'] && !(typeof data['userModified'] === 'string' || data['userModified'] instanceof String)) {
            throw new Error("Expected the field `userModified` to be a primitive type in the JSON string but got " + data['userModified']);
        }

        return true;
    }


}



/**
 * @member {module:model/ChartAxesDetails} axis
 */
ChartRowCollectionsDetails.prototype['axis'] = undefined;

/**
 * @member {String} axisId
 */
ChartRowCollectionsDetails.prototype['axisId'] = undefined;

/**
 * @member {module:model/ChartChartDataDetails} chartData
 */
ChartRowCollectionsDetails.prototype['chartData'] = undefined;

/**
 * @member {String} chartDataId
 */
ChartRowCollectionsDetails.prototype['chartDataId'] = undefined;

/**
 * @member {Date} dateCreated
 */
ChartRowCollectionsDetails.prototype['dateCreated'] = undefined;

/**
 * @member {Date} dateModified
 */
ChartRowCollectionsDetails.prototype['dateModified'] = undefined;

/**
 * @member {String} id
 */
ChartRowCollectionsDetails.prototype['id'] = undefined;

/**
 * @member {Number} nameFormatType
 */
ChartRowCollectionsDetails.prototype['nameFormatType'] = undefined;

/**
 * @member {Array.<module:model/ChartRowsDetails>} rows
 */
ChartRowCollectionsDetails.prototype['rows'] = undefined;

/**
 * @member {String} userCreated
 */
ChartRowCollectionsDetails.prototype['userCreated'] = undefined;

/**
 * @member {String} userModified
 */
ChartRowCollectionsDetails.prototype['userModified'] = undefined;






export default ChartRowCollectionsDetails;

