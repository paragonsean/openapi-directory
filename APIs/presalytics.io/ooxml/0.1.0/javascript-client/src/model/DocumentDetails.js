/**
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SlideSlidesDetails from './SlideSlidesDetails';

/**
 * The DocumentDetails model module.
 * @module model/DocumentDetails
 * @version 0.1.0
 */
class DocumentDetails {
    /**
     * Constructs a new <code>DocumentDetails</code>.
     * @alias module:model/DocumentDetails
     */
    constructor() { 
        
        DocumentDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DocumentDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DocumentDetails} obj Optional instance to populate.
     * @return {module:model/DocumentDetails} The populated <code>DocumentDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DocumentDetails();

            if (data.hasOwnProperty('baseElementBlobUrl')) {
                obj['baseElementBlobUrl'] = ApiClient.convertToType(data['baseElementBlobUrl'], 'String');
            }
            if (data.hasOwnProperty('blobLocation')) {
                obj['blobLocation'] = ApiClient.convertToType(data['blobLocation'], 'String');
            }
            if (data.hasOwnProperty('changedBaseElementBlobUrl')) {
                obj['changedBaseElementBlobUrl'] = ApiClient.convertToType(data['changedBaseElementBlobUrl'], 'String');
            }
            if (data.hasOwnProperty('dateCreated')) {
                obj['dateCreated'] = ApiClient.convertToType(data['dateCreated'], 'Date');
            }
            if (data.hasOwnProperty('dateModified')) {
                obj['dateModified'] = ApiClient.convertToType(data['dateModified'], 'Date');
            }
            if (data.hasOwnProperty('documentTypeId')) {
                obj['documentTypeId'] = ApiClient.convertToType(data['documentTypeId'], 'Number');
            }
            if (data.hasOwnProperty('filename')) {
                obj['filename'] = ApiClient.convertToType(data['filename'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('ownerGuid')) {
                obj['ownerGuid'] = ApiClient.convertToType(data['ownerGuid'], 'String');
            }
            if (data.hasOwnProperty('packageUri')) {
                obj['packageUri'] = ApiClient.convertToType(data['packageUri'], 'String');
            }
            if (data.hasOwnProperty('slides')) {
                obj['slides'] = ApiClient.convertToType(data['slides'], [SlideSlidesDetails]);
            }
            if (data.hasOwnProperty('storyId')) {
                obj['storyId'] = ApiClient.convertToType(data['storyId'], 'String');
            }
            if (data.hasOwnProperty('tableStylesXmlBlobUrl')) {
                obj['tableStylesXmlBlobUrl'] = ApiClient.convertToType(data['tableStylesXmlBlobUrl'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('userCreated')) {
                obj['userCreated'] = ApiClient.convertToType(data['userCreated'], 'String');
            }
            if (data.hasOwnProperty('userModified')) {
                obj['userModified'] = ApiClient.convertToType(data['userModified'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DocumentDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DocumentDetails</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['baseElementBlobUrl'] && !(typeof data['baseElementBlobUrl'] === 'string' || data['baseElementBlobUrl'] instanceof String)) {
            throw new Error("Expected the field `baseElementBlobUrl` to be a primitive type in the JSON string but got " + data['baseElementBlobUrl']);
        }
        // ensure the json data is a string
        if (data['blobLocation'] && !(typeof data['blobLocation'] === 'string' || data['blobLocation'] instanceof String)) {
            throw new Error("Expected the field `blobLocation` to be a primitive type in the JSON string but got " + data['blobLocation']);
        }
        // ensure the json data is a string
        if (data['changedBaseElementBlobUrl'] && !(typeof data['changedBaseElementBlobUrl'] === 'string' || data['changedBaseElementBlobUrl'] instanceof String)) {
            throw new Error("Expected the field `changedBaseElementBlobUrl` to be a primitive type in the JSON string but got " + data['changedBaseElementBlobUrl']);
        }
        // ensure the json data is a string
        if (data['filename'] && !(typeof data['filename'] === 'string' || data['filename'] instanceof String)) {
            throw new Error("Expected the field `filename` to be a primitive type in the JSON string but got " + data['filename']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['ownerGuid'] && !(typeof data['ownerGuid'] === 'string' || data['ownerGuid'] instanceof String)) {
            throw new Error("Expected the field `ownerGuid` to be a primitive type in the JSON string but got " + data['ownerGuid']);
        }
        // ensure the json data is a string
        if (data['packageUri'] && !(typeof data['packageUri'] === 'string' || data['packageUri'] instanceof String)) {
            throw new Error("Expected the field `packageUri` to be a primitive type in the JSON string but got " + data['packageUri']);
        }
        if (data['slides']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['slides'])) {
                throw new Error("Expected the field `slides` to be an array in the JSON data but got " + data['slides']);
            }
            // validate the optional field `slides` (array)
            for (const item of data['slides']) {
                SlideSlidesDetails.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['storyId'] && !(typeof data['storyId'] === 'string' || data['storyId'] instanceof String)) {
            throw new Error("Expected the field `storyId` to be a primitive type in the JSON string but got " + data['storyId']);
        }
        // ensure the json data is a string
        if (data['tableStylesXmlBlobUrl'] && !(typeof data['tableStylesXmlBlobUrl'] === 'string' || data['tableStylesXmlBlobUrl'] instanceof String)) {
            throw new Error("Expected the field `tableStylesXmlBlobUrl` to be a primitive type in the JSON string but got " + data['tableStylesXmlBlobUrl']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['userCreated'] && !(typeof data['userCreated'] === 'string' || data['userCreated'] instanceof String)) {
            throw new Error("Expected the field `userCreated` to be a primitive type in the JSON string but got " + data['userCreated']);
        }
        // ensure the json data is a string
        if (data['userModified'] && !(typeof data['userModified'] === 'string' || data['userModified'] instanceof String)) {
            throw new Error("Expected the field `userModified` to be a primitive type in the JSON string but got " + data['userModified']);
        }

        return true;
    }


}



/**
 * @member {String} baseElementBlobUrl
 */
DocumentDetails.prototype['baseElementBlobUrl'] = undefined;

/**
 * @member {String} blobLocation
 */
DocumentDetails.prototype['blobLocation'] = undefined;

/**
 * @member {String} changedBaseElementBlobUrl
 */
DocumentDetails.prototype['changedBaseElementBlobUrl'] = undefined;

/**
 * @member {Date} dateCreated
 */
DocumentDetails.prototype['dateCreated'] = undefined;

/**
 * @member {Date} dateModified
 */
DocumentDetails.prototype['dateModified'] = undefined;

/**
 * @member {Number} documentTypeId
 */
DocumentDetails.prototype['documentTypeId'] = undefined;

/**
 * @member {String} filename
 */
DocumentDetails.prototype['filename'] = undefined;

/**
 * @member {String} id
 */
DocumentDetails.prototype['id'] = undefined;

/**
 * @member {String} name
 */
DocumentDetails.prototype['name'] = undefined;

/**
 * @member {String} ownerGuid
 */
DocumentDetails.prototype['ownerGuid'] = undefined;

/**
 * @member {String} packageUri
 */
DocumentDetails.prototype['packageUri'] = undefined;

/**
 * @member {Array.<module:model/SlideSlidesDetails>} slides
 */
DocumentDetails.prototype['slides'] = undefined;

/**
 * @member {String} storyId
 */
DocumentDetails.prototype['storyId'] = undefined;

/**
 * @member {String} tableStylesXmlBlobUrl
 */
DocumentDetails.prototype['tableStylesXmlBlobUrl'] = undefined;

/**
 * @member {String} title
 */
DocumentDetails.prototype['title'] = undefined;

/**
 * @member {String} userCreated
 */
DocumentDetails.prototype['userCreated'] = undefined;

/**
 * @member {String} userModified
 */
DocumentDetails.prototype['userModified'] = undefined;






export default DocumentDetails;

