/**
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SharedImageFills model module.
 * @module model/SharedImageFills
 * @version 0.1.0
 */
class SharedImageFills {
    /**
     * Constructs a new <code>SharedImageFills</code>.
     * @alias module:model/SharedImageFills
     */
    constructor() { 
        
        SharedImageFills.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SharedImageFills</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SharedImageFills} obj Optional instance to populate.
     * @return {module:model/SharedImageFills} The populated <code>SharedImageFills</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SharedImageFills();

            if (data.hasOwnProperty('compressionState')) {
                obj['compressionState'] = ApiClient.convertToType(data['compressionState'], 'String');
            }
            if (data.hasOwnProperty('dpi')) {
                obj['dpi'] = ApiClient.convertToType(data['dpi'], 'Number');
            }
            if (data.hasOwnProperty('effectsJson')) {
                obj['effectsJson'] = ApiClient.convertToType(data['effectsJson'], 'String');
            }
            if (data.hasOwnProperty('fillMapId')) {
                obj['fillMapId'] = ApiClient.convertToType(data['fillMapId'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('rotateWithShape')) {
                obj['rotateWithShape'] = ApiClient.convertToType(data['rotateWithShape'], 'Boolean');
            }
            if (data.hasOwnProperty('sourceRectangle')) {
                obj['sourceRectangle'] = ApiClient.convertToType(data['sourceRectangle'], 'String');
            }
            if (data.hasOwnProperty('stretch')) {
                obj['stretch'] = ApiClient.convertToType(data['stretch'], 'Boolean');
            }
            if (data.hasOwnProperty('tile')) {
                obj['tile'] = ApiClient.convertToType(data['tile'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SharedImageFills</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SharedImageFills</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['compressionState'] && !(typeof data['compressionState'] === 'string' || data['compressionState'] instanceof String)) {
            throw new Error("Expected the field `compressionState` to be a primitive type in the JSON string but got " + data['compressionState']);
        }
        // ensure the json data is a string
        if (data['effectsJson'] && !(typeof data['effectsJson'] === 'string' || data['effectsJson'] instanceof String)) {
            throw new Error("Expected the field `effectsJson` to be a primitive type in the JSON string but got " + data['effectsJson']);
        }
        // ensure the json data is a string
        if (data['fillMapId'] && !(typeof data['fillMapId'] === 'string' || data['fillMapId'] instanceof String)) {
            throw new Error("Expected the field `fillMapId` to be a primitive type in the JSON string but got " + data['fillMapId']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['sourceRectangle'] && !(typeof data['sourceRectangle'] === 'string' || data['sourceRectangle'] instanceof String)) {
            throw new Error("Expected the field `sourceRectangle` to be a primitive type in the JSON string but got " + data['sourceRectangle']);
        }
        // ensure the json data is a string
        if (data['tile'] && !(typeof data['tile'] === 'string' || data['tile'] instanceof String)) {
            throw new Error("Expected the field `tile` to be a primitive type in the JSON string but got " + data['tile']);
        }

        return true;
    }


}



/**
 * @member {String} compressionState
 */
SharedImageFills.prototype['compressionState'] = undefined;

/**
 * @member {Number} dpi
 */
SharedImageFills.prototype['dpi'] = undefined;

/**
 * @member {String} effectsJson
 */
SharedImageFills.prototype['effectsJson'] = undefined;

/**
 * @member {String} fillMapId
 */
SharedImageFills.prototype['fillMapId'] = undefined;

/**
 * @member {String} id
 */
SharedImageFills.prototype['id'] = undefined;

/**
 * @member {Boolean} rotateWithShape
 */
SharedImageFills.prototype['rotateWithShape'] = undefined;

/**
 * @member {String} sourceRectangle
 */
SharedImageFills.prototype['sourceRectangle'] = undefined;

/**
 * @member {Boolean} stretch
 */
SharedImageFills.prototype['stretch'] = undefined;

/**
 * @member {String} tile
 */
SharedImageFills.prototype['tile'] = undefined;






export default SharedImageFills;

