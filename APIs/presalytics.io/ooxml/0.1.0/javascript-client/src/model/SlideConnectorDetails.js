/**
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SharedEffectsDetails from './SharedEffectsDetails';
import SharedFillMapDetails from './SharedFillMapDetails';
import SharedLinesDetails from './SharedLinesDetails';
import SlideGroupElementsDetails from './SlideGroupElementsDetails';
import SlideShapesDetails from './SlideShapesDetails';

/**
 * The SlideConnectorDetails model module.
 * @module model/SlideConnectorDetails
 * @version 0.1.0
 */
class SlideConnectorDetails {
    /**
     * Constructs a new <code>SlideConnectorDetails</code>.
     * @alias module:model/SlideConnectorDetails
     */
    constructor() { 
        
        SlideConnectorDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SlideConnectorDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SlideConnectorDetails} obj Optional instance to populate.
     * @return {module:model/SlideConnectorDetails} The populated <code>SlideConnectorDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SlideConnectorDetails();

            if (data.hasOwnProperty('baseElementBlobUrl')) {
                obj['baseElementBlobUrl'] = ApiClient.convertToType(data['baseElementBlobUrl'], 'String');
            }
            if (data.hasOwnProperty('changedBaseElementBlobUrl')) {
                obj['changedBaseElementBlobUrl'] = ApiClient.convertToType(data['changedBaseElementBlobUrl'], 'String');
            }
            if (data.hasOwnProperty('dateCreated')) {
                obj['dateCreated'] = ApiClient.convertToType(data['dateCreated'], 'Date');
            }
            if (data.hasOwnProperty('dateModified')) {
                obj['dateModified'] = ApiClient.convertToType(data['dateModified'], 'Date');
            }
            if (data.hasOwnProperty('effect')) {
                obj['effect'] = SharedEffectsDetails.constructFromObject(data['effect']);
            }
            if (data.hasOwnProperty('endConnectionIdx')) {
                obj['endConnectionIdx'] = ApiClient.convertToType(data['endConnectionIdx'], 'Number');
            }
            if (data.hasOwnProperty('endConnectionShape')) {
                obj['endConnectionShape'] = SlideShapesDetails.constructFromObject(data['endConnectionShape']);
            }
            if (data.hasOwnProperty('endConnectionShapeId')) {
                obj['endConnectionShapeId'] = ApiClient.convertToType(data['endConnectionShapeId'], 'String');
            }
            if (data.hasOwnProperty('fillMap')) {
                obj['fillMap'] = SharedFillMapDetails.constructFromObject(data['fillMap']);
            }
            if (data.hasOwnProperty('flipHorizontal')) {
                obj['flipHorizontal'] = ApiClient.convertToType(data['flipHorizontal'], 'Boolean');
            }
            if (data.hasOwnProperty('flipVertical')) {
                obj['flipVertical'] = ApiClient.convertToType(data['flipVertical'], 'Boolean');
            }
            if (data.hasOwnProperty('freeFormPathXml')) {
                obj['freeFormPathXml'] = ApiClient.convertToType(data['freeFormPathXml'], 'String');
            }
            if (data.hasOwnProperty('groupElement')) {
                obj['groupElement'] = SlideGroupElementsDetails.constructFromObject(data['groupElement']);
            }
            if (data.hasOwnProperty('groupElementsId')) {
                obj['groupElementsId'] = ApiClient.convertToType(data['groupElementsId'], 'String');
            }
            if (data.hasOwnProperty('hidden')) {
                obj['hidden'] = ApiClient.convertToType(data['hidden'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('isThemeEffect')) {
                obj['isThemeEffect'] = ApiClient.convertToType(data['isThemeEffect'], 'Boolean');
            }
            if (data.hasOwnProperty('isThemeFill')) {
                obj['isThemeFill'] = ApiClient.convertToType(data['isThemeFill'], 'Boolean');
            }
            if (data.hasOwnProperty('isThemeLine')) {
                obj['isThemeLine'] = ApiClient.convertToType(data['isThemeLine'], 'Boolean');
            }
            if (data.hasOwnProperty('line')) {
                obj['line'] = SharedLinesDetails.constructFromObject(data['line']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('ooxmlId')) {
                obj['ooxmlId'] = ApiClient.convertToType(data['ooxmlId'], 'Number');
            }
            if (data.hasOwnProperty('packageUri')) {
                obj['packageUri'] = ApiClient.convertToType(data['packageUri'], 'String');
            }
            if (data.hasOwnProperty('presetTypeId')) {
                obj['presetTypeId'] = ApiClient.convertToType(data['presetTypeId'], 'String');
            }
            if (data.hasOwnProperty('rotation')) {
                obj['rotation'] = ApiClient.convertToType(data['rotation'], 'Number');
            }
            if (data.hasOwnProperty('startConnectionIdx')) {
                obj['startConnectionIdx'] = ApiClient.convertToType(data['startConnectionIdx'], 'Number');
            }
            if (data.hasOwnProperty('startConnectionShape')) {
                obj['startConnectionShape'] = SlideShapesDetails.constructFromObject(data['startConnectionShape']);
            }
            if (data.hasOwnProperty('startConnectionShapeId')) {
                obj['startConnectionShapeId'] = ApiClient.convertToType(data['startConnectionShapeId'], 'String');
            }
            if (data.hasOwnProperty('svgBlobUrl')) {
                obj['svgBlobUrl'] = ApiClient.convertToType(data['svgBlobUrl'], 'String');
            }
            if (data.hasOwnProperty('userCreated')) {
                obj['userCreated'] = ApiClient.convertToType(data['userCreated'], 'String');
            }
            if (data.hasOwnProperty('userModified')) {
                obj['userModified'] = ApiClient.convertToType(data['userModified'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SlideConnectorDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SlideConnectorDetails</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['baseElementBlobUrl'] && !(typeof data['baseElementBlobUrl'] === 'string' || data['baseElementBlobUrl'] instanceof String)) {
            throw new Error("Expected the field `baseElementBlobUrl` to be a primitive type in the JSON string but got " + data['baseElementBlobUrl']);
        }
        // ensure the json data is a string
        if (data['changedBaseElementBlobUrl'] && !(typeof data['changedBaseElementBlobUrl'] === 'string' || data['changedBaseElementBlobUrl'] instanceof String)) {
            throw new Error("Expected the field `changedBaseElementBlobUrl` to be a primitive type in the JSON string but got " + data['changedBaseElementBlobUrl']);
        }
        // validate the optional field `effect`
        if (data['effect']) { // data not null
          SharedEffectsDetails.validateJSON(data['effect']);
        }
        // validate the optional field `endConnectionShape`
        if (data['endConnectionShape']) { // data not null
          SlideShapesDetails.validateJSON(data['endConnectionShape']);
        }
        // ensure the json data is a string
        if (data['endConnectionShapeId'] && !(typeof data['endConnectionShapeId'] === 'string' || data['endConnectionShapeId'] instanceof String)) {
            throw new Error("Expected the field `endConnectionShapeId` to be a primitive type in the JSON string but got " + data['endConnectionShapeId']);
        }
        // validate the optional field `fillMap`
        if (data['fillMap']) { // data not null
          SharedFillMapDetails.validateJSON(data['fillMap']);
        }
        // ensure the json data is a string
        if (data['freeFormPathXml'] && !(typeof data['freeFormPathXml'] === 'string' || data['freeFormPathXml'] instanceof String)) {
            throw new Error("Expected the field `freeFormPathXml` to be a primitive type in the JSON string but got " + data['freeFormPathXml']);
        }
        // validate the optional field `groupElement`
        if (data['groupElement']) { // data not null
          SlideGroupElementsDetails.validateJSON(data['groupElement']);
        }
        // ensure the json data is a string
        if (data['groupElementsId'] && !(typeof data['groupElementsId'] === 'string' || data['groupElementsId'] instanceof String)) {
            throw new Error("Expected the field `groupElementsId` to be a primitive type in the JSON string but got " + data['groupElementsId']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `line`
        if (data['line']) { // data not null
          SharedLinesDetails.validateJSON(data['line']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['packageUri'] && !(typeof data['packageUri'] === 'string' || data['packageUri'] instanceof String)) {
            throw new Error("Expected the field `packageUri` to be a primitive type in the JSON string but got " + data['packageUri']);
        }
        // ensure the json data is a string
        if (data['presetTypeId'] && !(typeof data['presetTypeId'] === 'string' || data['presetTypeId'] instanceof String)) {
            throw new Error("Expected the field `presetTypeId` to be a primitive type in the JSON string but got " + data['presetTypeId']);
        }
        // validate the optional field `startConnectionShape`
        if (data['startConnectionShape']) { // data not null
          SlideShapesDetails.validateJSON(data['startConnectionShape']);
        }
        // ensure the json data is a string
        if (data['startConnectionShapeId'] && !(typeof data['startConnectionShapeId'] === 'string' || data['startConnectionShapeId'] instanceof String)) {
            throw new Error("Expected the field `startConnectionShapeId` to be a primitive type in the JSON string but got " + data['startConnectionShapeId']);
        }
        // ensure the json data is a string
        if (data['svgBlobUrl'] && !(typeof data['svgBlobUrl'] === 'string' || data['svgBlobUrl'] instanceof String)) {
            throw new Error("Expected the field `svgBlobUrl` to be a primitive type in the JSON string but got " + data['svgBlobUrl']);
        }
        // ensure the json data is a string
        if (data['userCreated'] && !(typeof data['userCreated'] === 'string' || data['userCreated'] instanceof String)) {
            throw new Error("Expected the field `userCreated` to be a primitive type in the JSON string but got " + data['userCreated']);
        }
        // ensure the json data is a string
        if (data['userModified'] && !(typeof data['userModified'] === 'string' || data['userModified'] instanceof String)) {
            throw new Error("Expected the field `userModified` to be a primitive type in the JSON string but got " + data['userModified']);
        }

        return true;
    }


}



/**
 * @member {String} baseElementBlobUrl
 */
SlideConnectorDetails.prototype['baseElementBlobUrl'] = undefined;

/**
 * @member {String} changedBaseElementBlobUrl
 */
SlideConnectorDetails.prototype['changedBaseElementBlobUrl'] = undefined;

/**
 * @member {Date} dateCreated
 */
SlideConnectorDetails.prototype['dateCreated'] = undefined;

/**
 * @member {Date} dateModified
 */
SlideConnectorDetails.prototype['dateModified'] = undefined;

/**
 * @member {module:model/SharedEffectsDetails} effect
 */
SlideConnectorDetails.prototype['effect'] = undefined;

/**
 * @member {Number} endConnectionIdx
 */
SlideConnectorDetails.prototype['endConnectionIdx'] = undefined;

/**
 * @member {module:model/SlideShapesDetails} endConnectionShape
 */
SlideConnectorDetails.prototype['endConnectionShape'] = undefined;

/**
 * @member {String} endConnectionShapeId
 */
SlideConnectorDetails.prototype['endConnectionShapeId'] = undefined;

/**
 * @member {module:model/SharedFillMapDetails} fillMap
 */
SlideConnectorDetails.prototype['fillMap'] = undefined;

/**
 * @member {Boolean} flipHorizontal
 */
SlideConnectorDetails.prototype['flipHorizontal'] = undefined;

/**
 * @member {Boolean} flipVertical
 */
SlideConnectorDetails.prototype['flipVertical'] = undefined;

/**
 * @member {String} freeFormPathXml
 */
SlideConnectorDetails.prototype['freeFormPathXml'] = undefined;

/**
 * @member {module:model/SlideGroupElementsDetails} groupElement
 */
SlideConnectorDetails.prototype['groupElement'] = undefined;

/**
 * @member {String} groupElementsId
 */
SlideConnectorDetails.prototype['groupElementsId'] = undefined;

/**
 * @member {Boolean} hidden
 */
SlideConnectorDetails.prototype['hidden'] = undefined;

/**
 * @member {String} id
 */
SlideConnectorDetails.prototype['id'] = undefined;

/**
 * @member {Boolean} isThemeEffect
 */
SlideConnectorDetails.prototype['isThemeEffect'] = undefined;

/**
 * @member {Boolean} isThemeFill
 */
SlideConnectorDetails.prototype['isThemeFill'] = undefined;

/**
 * @member {Boolean} isThemeLine
 */
SlideConnectorDetails.prototype['isThemeLine'] = undefined;

/**
 * @member {module:model/SharedLinesDetails} line
 */
SlideConnectorDetails.prototype['line'] = undefined;

/**
 * @member {String} name
 */
SlideConnectorDetails.prototype['name'] = undefined;

/**
 * @member {Number} ooxmlId
 */
SlideConnectorDetails.prototype['ooxmlId'] = undefined;

/**
 * @member {String} packageUri
 */
SlideConnectorDetails.prototype['packageUri'] = undefined;

/**
 * @member {String} presetTypeId
 */
SlideConnectorDetails.prototype['presetTypeId'] = undefined;

/**
 * @member {Number} rotation
 */
SlideConnectorDetails.prototype['rotation'] = undefined;

/**
 * @member {Number} startConnectionIdx
 */
SlideConnectorDetails.prototype['startConnectionIdx'] = undefined;

/**
 * @member {module:model/SlideShapesDetails} startConnectionShape
 */
SlideConnectorDetails.prototype['startConnectionShape'] = undefined;

/**
 * @member {String} startConnectionShapeId
 */
SlideConnectorDetails.prototype['startConnectionShapeId'] = undefined;

/**
 * @member {String} svgBlobUrl
 */
SlideConnectorDetails.prototype['svgBlobUrl'] = undefined;

/**
 * @member {String} userCreated
 */
SlideConnectorDetails.prototype['userCreated'] = undefined;

/**
 * @member {String} userModified
 */
SlideConnectorDetails.prototype['userModified'] = undefined;






export default SlideConnectorDetails;

