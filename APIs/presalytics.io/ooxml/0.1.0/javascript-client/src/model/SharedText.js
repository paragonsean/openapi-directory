/**
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SharedText model module.
 * @module model/SharedText
 * @version 0.1.0
 */
class SharedText {
    /**
     * Constructs a new <code>SharedText</code>.
     * @alias module:model/SharedText
     */
    constructor() { 
        
        SharedText.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SharedText</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SharedText} obj Optional instance to populate.
     * @return {module:model/SharedText} The populated <code>SharedText</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SharedText();

            if (data.hasOwnProperty('colorSolidFillsId')) {
                obj['colorSolidFillsId'] = ApiClient.convertToType(data['colorSolidFillsId'], 'String');
            }
            if (data.hasOwnProperty('font')) {
                obj['font'] = ApiClient.convertToType(data['font'], 'String');
            }
            if (data.hasOwnProperty('fontSize')) {
                obj['fontSize'] = ApiClient.convertToType(data['fontSize'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('isBold')) {
                obj['isBold'] = ApiClient.convertToType(data['isBold'], 'Boolean');
            }
            if (data.hasOwnProperty('isItalic')) {
                obj['isItalic'] = ApiClient.convertToType(data['isItalic'], 'Boolean');
            }
            if (data.hasOwnProperty('isThemeFont')) {
                obj['isThemeFont'] = ApiClient.convertToType(data['isThemeFont'], 'Boolean');
            }
            if (data.hasOwnProperty('isUnderline')) {
                obj['isUnderline'] = ApiClient.convertToType(data['isUnderline'], 'Boolean');
            }
            if (data.hasOwnProperty('paragraphId')) {
                obj['paragraphId'] = ApiClient.convertToType(data['paragraphId'], 'String');
            }
            if (data.hasOwnProperty('rawText')) {
                obj['rawText'] = ApiClient.convertToType(data['rawText'], 'String');
            }
            if (data.hasOwnProperty('sequence')) {
                obj['sequence'] = ApiClient.convertToType(data['sequence'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SharedText</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SharedText</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['colorSolidFillsId'] && !(typeof data['colorSolidFillsId'] === 'string' || data['colorSolidFillsId'] instanceof String)) {
            throw new Error("Expected the field `colorSolidFillsId` to be a primitive type in the JSON string but got " + data['colorSolidFillsId']);
        }
        // ensure the json data is a string
        if (data['font'] && !(typeof data['font'] === 'string' || data['font'] instanceof String)) {
            throw new Error("Expected the field `font` to be a primitive type in the JSON string but got " + data['font']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['paragraphId'] && !(typeof data['paragraphId'] === 'string' || data['paragraphId'] instanceof String)) {
            throw new Error("Expected the field `paragraphId` to be a primitive type in the JSON string but got " + data['paragraphId']);
        }
        // ensure the json data is a string
        if (data['rawText'] && !(typeof data['rawText'] === 'string' || data['rawText'] instanceof String)) {
            throw new Error("Expected the field `rawText` to be a primitive type in the JSON string but got " + data['rawText']);
        }

        return true;
    }


}



/**
 * @member {String} colorSolidFillsId
 */
SharedText.prototype['colorSolidFillsId'] = undefined;

/**
 * @member {String} font
 */
SharedText.prototype['font'] = undefined;

/**
 * @member {Number} fontSize
 */
SharedText.prototype['fontSize'] = undefined;

/**
 * @member {String} id
 */
SharedText.prototype['id'] = undefined;

/**
 * @member {Boolean} isBold
 */
SharedText.prototype['isBold'] = undefined;

/**
 * @member {Boolean} isItalic
 */
SharedText.prototype['isItalic'] = undefined;

/**
 * @member {Boolean} isThemeFont
 */
SharedText.prototype['isThemeFont'] = undefined;

/**
 * @member {Boolean} isUnderline
 */
SharedText.prototype['isUnderline'] = undefined;

/**
 * @member {String} paragraphId
 */
SharedText.prototype['paragraphId'] = undefined;

/**
 * @member {String} rawText
 */
SharedText.prototype['rawText'] = undefined;

/**
 * @member {Number} sequence
 */
SharedText.prototype['sequence'] = undefined;






export default SharedText;

