/**
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ChartChartsDetails from './ChartChartsDetails';
import SharedPicturesDetails from './SharedPicturesDetails';
import SlideGroupElementsDetails from './SlideGroupElementsDetails';
import SlideSmartArtsDetails from './SlideSmartArtsDetails';
import TableTablesDetails from './TableTablesDetails';

/**
 * The SlideGraphicsDetails model module.
 * @module model/SlideGraphicsDetails
 * @version 0.1.0
 */
class SlideGraphicsDetails {
    /**
     * Constructs a new <code>SlideGraphicsDetails</code>.
     * The graphics class provides a bridge between the Slides and   lower level models including Charts, Tables, Pictures, and SmartArts
     * @alias module:model/SlideGraphicsDetails
     */
    constructor() { 
        
        SlideGraphicsDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SlideGraphicsDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SlideGraphicsDetails} obj Optional instance to populate.
     * @return {module:model/SlideGraphicsDetails} The populated <code>SlideGraphicsDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SlideGraphicsDetails();

            if (data.hasOwnProperty('chart')) {
                obj['chart'] = ChartChartsDetails.constructFromObject(data['chart']);
            }
            if (data.hasOwnProperty('dateCreated')) {
                obj['dateCreated'] = ApiClient.convertToType(data['dateCreated'], 'Date');
            }
            if (data.hasOwnProperty('dateModified')) {
                obj['dateModified'] = ApiClient.convertToType(data['dateModified'], 'Date');
            }
            if (data.hasOwnProperty('graphicTypeId')) {
                obj['graphicTypeId'] = ApiClient.convertToType(data['graphicTypeId'], 'Number');
            }
            if (data.hasOwnProperty('groupElement')) {
                obj['groupElement'] = SlideGroupElementsDetails.constructFromObject(data['groupElement']);
            }
            if (data.hasOwnProperty('groupElementsId')) {
                obj['groupElementsId'] = ApiClient.convertToType(data['groupElementsId'], 'String');
            }
            if (data.hasOwnProperty('height')) {
                obj['height'] = ApiClient.convertToType(data['height'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('ooxmlId')) {
                obj['ooxmlId'] = ApiClient.convertToType(data['ooxmlId'], 'Number');
            }
            if (data.hasOwnProperty('picture')) {
                obj['picture'] = SharedPicturesDetails.constructFromObject(data['picture']);
            }
            if (data.hasOwnProperty('smartArt')) {
                obj['smartArt'] = SlideSmartArtsDetails.constructFromObject(data['smartArt']);
            }
            if (data.hasOwnProperty('table')) {
                obj['table'] = TableTablesDetails.constructFromObject(data['table']);
            }
            if (data.hasOwnProperty('userCreated')) {
                obj['userCreated'] = ApiClient.convertToType(data['userCreated'], 'String');
            }
            if (data.hasOwnProperty('userModified')) {
                obj['userModified'] = ApiClient.convertToType(data['userModified'], 'String');
            }
            if (data.hasOwnProperty('width')) {
                obj['width'] = ApiClient.convertToType(data['width'], 'Number');
            }
            if (data.hasOwnProperty('xOffset')) {
                obj['xOffset'] = ApiClient.convertToType(data['xOffset'], 'Number');
            }
            if (data.hasOwnProperty('yOffset')) {
                obj['yOffset'] = ApiClient.convertToType(data['yOffset'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SlideGraphicsDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SlideGraphicsDetails</code>.
     */
    static validateJSON(data) {
        // validate the optional field `chart`
        if (data['chart']) { // data not null
          ChartChartsDetails.validateJSON(data['chart']);
        }
        // validate the optional field `groupElement`
        if (data['groupElement']) { // data not null
          SlideGroupElementsDetails.validateJSON(data['groupElement']);
        }
        // ensure the json data is a string
        if (data['groupElementsId'] && !(typeof data['groupElementsId'] === 'string' || data['groupElementsId'] instanceof String)) {
            throw new Error("Expected the field `groupElementsId` to be a primitive type in the JSON string but got " + data['groupElementsId']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `picture`
        if (data['picture']) { // data not null
          SharedPicturesDetails.validateJSON(data['picture']);
        }
        // validate the optional field `smartArt`
        if (data['smartArt']) { // data not null
          SlideSmartArtsDetails.validateJSON(data['smartArt']);
        }
        // validate the optional field `table`
        if (data['table']) { // data not null
          TableTablesDetails.validateJSON(data['table']);
        }
        // ensure the json data is a string
        if (data['userCreated'] && !(typeof data['userCreated'] === 'string' || data['userCreated'] instanceof String)) {
            throw new Error("Expected the field `userCreated` to be a primitive type in the JSON string but got " + data['userCreated']);
        }
        // ensure the json data is a string
        if (data['userModified'] && !(typeof data['userModified'] === 'string' || data['userModified'] instanceof String)) {
            throw new Error("Expected the field `userModified` to be a primitive type in the JSON string but got " + data['userModified']);
        }

        return true;
    }


}



/**
 * @member {module:model/ChartChartsDetails} chart
 */
SlideGraphicsDetails.prototype['chart'] = undefined;

/**
 * @member {Date} dateCreated
 */
SlideGraphicsDetails.prototype['dateCreated'] = undefined;

/**
 * @member {Date} dateModified
 */
SlideGraphicsDetails.prototype['dateModified'] = undefined;

/**
 * @member {Number} graphicTypeId
 */
SlideGraphicsDetails.prototype['graphicTypeId'] = undefined;

/**
 * @member {module:model/SlideGroupElementsDetails} groupElement
 */
SlideGraphicsDetails.prototype['groupElement'] = undefined;

/**
 * Foreign key to the GroupElements object
 * @member {String} groupElementsId
 */
SlideGraphicsDetails.prototype['groupElementsId'] = undefined;

/**
 * @member {Number} height
 */
SlideGraphicsDetails.prototype['height'] = undefined;

/**
 * @member {String} id
 */
SlideGraphicsDetails.prototype['id'] = undefined;

/**
 * @member {String} name
 */
SlideGraphicsDetails.prototype['name'] = undefined;

/**
 * @member {Number} ooxmlId
 */
SlideGraphicsDetails.prototype['ooxmlId'] = undefined;

/**
 * @member {module:model/SharedPicturesDetails} picture
 */
SlideGraphicsDetails.prototype['picture'] = undefined;

/**
 * @member {module:model/SlideSmartArtsDetails} smartArt
 */
SlideGraphicsDetails.prototype['smartArt'] = undefined;

/**
 * @member {module:model/TableTablesDetails} table
 */
SlideGraphicsDetails.prototype['table'] = undefined;

/**
 * @member {String} userCreated
 */
SlideGraphicsDetails.prototype['userCreated'] = undefined;

/**
 * @member {String} userModified
 */
SlideGraphicsDetails.prototype['userModified'] = undefined;

/**
 * @member {Number} width
 */
SlideGraphicsDetails.prototype['width'] = undefined;

/**
 * @member {Number} xOffset
 */
SlideGraphicsDetails.prototype['xOffset'] = undefined;

/**
 * @member {Number} yOffset
 */
SlideGraphicsDetails.prototype['yOffset'] = undefined;






export default SlideGraphicsDetails;

