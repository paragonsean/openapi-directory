/**
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SlideShapes model module.
 * @module model/SlideShapes
 * @version 0.1.0
 */
class SlideShapes {
    /**
     * Constructs a new <code>SlideShapes</code>.
     * @alias module:model/SlideShapes
     */
    constructor() { 
        
        SlideShapes.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SlideShapes</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SlideShapes} obj Optional instance to populate.
     * @return {module:model/SlideShapes} The populated <code>SlideShapes</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SlideShapes();

            if (data.hasOwnProperty('baseElementBlobUrl')) {
                obj['baseElementBlobUrl'] = ApiClient.convertToType(data['baseElementBlobUrl'], 'String');
            }
            if (data.hasOwnProperty('changedBaseElementBlobUrl')) {
                obj['changedBaseElementBlobUrl'] = ApiClient.convertToType(data['changedBaseElementBlobUrl'], 'String');
            }
            if (data.hasOwnProperty('flipHorizontal')) {
                obj['flipHorizontal'] = ApiClient.convertToType(data['flipHorizontal'], 'Boolean');
            }
            if (data.hasOwnProperty('flipVertical')) {
                obj['flipVertical'] = ApiClient.convertToType(data['flipVertical'], 'Boolean');
            }
            if (data.hasOwnProperty('freeFormPathXml')) {
                obj['freeFormPathXml'] = ApiClient.convertToType(data['freeFormPathXml'], 'String');
            }
            if (data.hasOwnProperty('groupElementsId')) {
                obj['groupElementsId'] = ApiClient.convertToType(data['groupElementsId'], 'String');
            }
            if (data.hasOwnProperty('height')) {
                obj['height'] = ApiClient.convertToType(data['height'], 'Number');
            }
            if (data.hasOwnProperty('hidden')) {
                obj['hidden'] = ApiClient.convertToType(data['hidden'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('isThemeEffect')) {
                obj['isThemeEffect'] = ApiClient.convertToType(data['isThemeEffect'], 'Boolean');
            }
            if (data.hasOwnProperty('isThemeFill')) {
                obj['isThemeFill'] = ApiClient.convertToType(data['isThemeFill'], 'Boolean');
            }
            if (data.hasOwnProperty('isThemeLine')) {
                obj['isThemeLine'] = ApiClient.convertToType(data['isThemeLine'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('ooxmlId')) {
                obj['ooxmlId'] = ApiClient.convertToType(data['ooxmlId'], 'Number');
            }
            if (data.hasOwnProperty('packageUri')) {
                obj['packageUri'] = ApiClient.convertToType(data['packageUri'], 'String');
            }
            if (data.hasOwnProperty('presetTypeId')) {
                obj['presetTypeId'] = ApiClient.convertToType(data['presetTypeId'], 'String');
            }
            if (data.hasOwnProperty('rotation')) {
                obj['rotation'] = ApiClient.convertToType(data['rotation'], 'Number');
            }
            if (data.hasOwnProperty('svgBlobUrl')) {
                obj['svgBlobUrl'] = ApiClient.convertToType(data['svgBlobUrl'], 'String');
            }
            if (data.hasOwnProperty('width')) {
                obj['width'] = ApiClient.convertToType(data['width'], 'Number');
            }
            if (data.hasOwnProperty('xOffset')) {
                obj['xOffset'] = ApiClient.convertToType(data['xOffset'], 'Number');
            }
            if (data.hasOwnProperty('yOffset')) {
                obj['yOffset'] = ApiClient.convertToType(data['yOffset'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SlideShapes</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SlideShapes</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['baseElementBlobUrl'] && !(typeof data['baseElementBlobUrl'] === 'string' || data['baseElementBlobUrl'] instanceof String)) {
            throw new Error("Expected the field `baseElementBlobUrl` to be a primitive type in the JSON string but got " + data['baseElementBlobUrl']);
        }
        // ensure the json data is a string
        if (data['changedBaseElementBlobUrl'] && !(typeof data['changedBaseElementBlobUrl'] === 'string' || data['changedBaseElementBlobUrl'] instanceof String)) {
            throw new Error("Expected the field `changedBaseElementBlobUrl` to be a primitive type in the JSON string but got " + data['changedBaseElementBlobUrl']);
        }
        // ensure the json data is a string
        if (data['freeFormPathXml'] && !(typeof data['freeFormPathXml'] === 'string' || data['freeFormPathXml'] instanceof String)) {
            throw new Error("Expected the field `freeFormPathXml` to be a primitive type in the JSON string but got " + data['freeFormPathXml']);
        }
        // ensure the json data is a string
        if (data['groupElementsId'] && !(typeof data['groupElementsId'] === 'string' || data['groupElementsId'] instanceof String)) {
            throw new Error("Expected the field `groupElementsId` to be a primitive type in the JSON string but got " + data['groupElementsId']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['packageUri'] && !(typeof data['packageUri'] === 'string' || data['packageUri'] instanceof String)) {
            throw new Error("Expected the field `packageUri` to be a primitive type in the JSON string but got " + data['packageUri']);
        }
        // ensure the json data is a string
        if (data['presetTypeId'] && !(typeof data['presetTypeId'] === 'string' || data['presetTypeId'] instanceof String)) {
            throw new Error("Expected the field `presetTypeId` to be a primitive type in the JSON string but got " + data['presetTypeId']);
        }
        // ensure the json data is a string
        if (data['svgBlobUrl'] && !(typeof data['svgBlobUrl'] === 'string' || data['svgBlobUrl'] instanceof String)) {
            throw new Error("Expected the field `svgBlobUrl` to be a primitive type in the JSON string but got " + data['svgBlobUrl']);
        }

        return true;
    }


}



/**
 * @member {String} baseElementBlobUrl
 */
SlideShapes.prototype['baseElementBlobUrl'] = undefined;

/**
 * @member {String} changedBaseElementBlobUrl
 */
SlideShapes.prototype['changedBaseElementBlobUrl'] = undefined;

/**
 * @member {Boolean} flipHorizontal
 */
SlideShapes.prototype['flipHorizontal'] = undefined;

/**
 * @member {Boolean} flipVertical
 */
SlideShapes.prototype['flipVertical'] = undefined;

/**
 * @member {String} freeFormPathXml
 */
SlideShapes.prototype['freeFormPathXml'] = undefined;

/**
 * @member {String} groupElementsId
 */
SlideShapes.prototype['groupElementsId'] = undefined;

/**
 * @member {Number} height
 */
SlideShapes.prototype['height'] = undefined;

/**
 * @member {Boolean} hidden
 */
SlideShapes.prototype['hidden'] = undefined;

/**
 * @member {String} id
 */
SlideShapes.prototype['id'] = undefined;

/**
 * @member {Boolean} isThemeEffect
 */
SlideShapes.prototype['isThemeEffect'] = undefined;

/**
 * @member {Boolean} isThemeFill
 */
SlideShapes.prototype['isThemeFill'] = undefined;

/**
 * @member {Boolean} isThemeLine
 */
SlideShapes.prototype['isThemeLine'] = undefined;

/**
 * @member {String} name
 */
SlideShapes.prototype['name'] = undefined;

/**
 * @member {Number} ooxmlId
 */
SlideShapes.prototype['ooxmlId'] = undefined;

/**
 * @member {String} packageUri
 */
SlideShapes.prototype['packageUri'] = undefined;

/**
 * @member {String} presetTypeId
 */
SlideShapes.prototype['presetTypeId'] = undefined;

/**
 * @member {Number} rotation
 */
SlideShapes.prototype['rotation'] = undefined;

/**
 * @member {String} svgBlobUrl
 */
SlideShapes.prototype['svgBlobUrl'] = undefined;

/**
 * @member {Number} width
 */
SlideShapes.prototype['width'] = undefined;

/**
 * @member {Number} xOffset
 */
SlideShapes.prototype['xOffset'] = undefined;

/**
 * @member {Number} yOffset
 */
SlideShapes.prototype['yOffset'] = undefined;






export default SlideShapes;

