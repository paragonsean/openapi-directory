/**
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SharedEffectAttributesDetails from './SharedEffectAttributesDetails';
import SlideConnectorDetails from './SlideConnectorDetails';
import SlideShapesDetails from './SlideShapesDetails';
import ThemeEffectMapDetails from './ThemeEffectMapDetails';

/**
 * The SharedEffectsDetails model module.
 * @module model/SharedEffectsDetails
 * @version 0.1.0
 */
class SharedEffectsDetails {
    /**
     * Constructs a new <code>SharedEffectsDetails</code>.
     * @alias module:model/SharedEffectsDetails
     */
    constructor() { 
        
        SharedEffectsDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SharedEffectsDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SharedEffectsDetails} obj Optional instance to populate.
     * @return {module:model/SharedEffectsDetails} The populated <code>SharedEffectsDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SharedEffectsDetails();

            if (data.hasOwnProperty('connectorId')) {
                obj['connectorId'] = ApiClient.convertToType(data['connectorId'], 'String');
            }
            if (data.hasOwnProperty('dateCreated')) {
                obj['dateCreated'] = ApiClient.convertToType(data['dateCreated'], 'Date');
            }
            if (data.hasOwnProperty('dateModified')) {
                obj['dateModified'] = ApiClient.convertToType(data['dateModified'], 'Date');
            }
            if (data.hasOwnProperty('effectAttributes')) {
                obj['effectAttributes'] = ApiClient.convertToType(data['effectAttributes'], [SharedEffectAttributesDetails]);
            }
            if (data.hasOwnProperty('effectMap')) {
                obj['effectMap'] = ThemeEffectMapDetails.constructFromObject(data['effectMap']);
            }
            if (data.hasOwnProperty('effectMapId')) {
                obj['effectMapId'] = ApiClient.convertToType(data['effectMapId'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('parentConnector')) {
                obj['parentConnector'] = SlideConnectorDetails.constructFromObject(data['parentConnector']);
            }
            if (data.hasOwnProperty('parentShape')) {
                obj['parentShape'] = SlideShapesDetails.constructFromObject(data['parentShape']);
            }
            if (data.hasOwnProperty('shapeId')) {
                obj['shapeId'] = ApiClient.convertToType(data['shapeId'], 'String');
            }
            if (data.hasOwnProperty('userCreated')) {
                obj['userCreated'] = ApiClient.convertToType(data['userCreated'], 'String');
            }
            if (data.hasOwnProperty('userModified')) {
                obj['userModified'] = ApiClient.convertToType(data['userModified'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SharedEffectsDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SharedEffectsDetails</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['connectorId'] && !(typeof data['connectorId'] === 'string' || data['connectorId'] instanceof String)) {
            throw new Error("Expected the field `connectorId` to be a primitive type in the JSON string but got " + data['connectorId']);
        }
        if (data['effectAttributes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['effectAttributes'])) {
                throw new Error("Expected the field `effectAttributes` to be an array in the JSON data but got " + data['effectAttributes']);
            }
            // validate the optional field `effectAttributes` (array)
            for (const item of data['effectAttributes']) {
                SharedEffectAttributesDetails.validateJSON(item);
            };
        }
        // validate the optional field `effectMap`
        if (data['effectMap']) { // data not null
          ThemeEffectMapDetails.validateJSON(data['effectMap']);
        }
        // ensure the json data is a string
        if (data['effectMapId'] && !(typeof data['effectMapId'] === 'string' || data['effectMapId'] instanceof String)) {
            throw new Error("Expected the field `effectMapId` to be a primitive type in the JSON string but got " + data['effectMapId']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `parentConnector`
        if (data['parentConnector']) { // data not null
          SlideConnectorDetails.validateJSON(data['parentConnector']);
        }
        // validate the optional field `parentShape`
        if (data['parentShape']) { // data not null
          SlideShapesDetails.validateJSON(data['parentShape']);
        }
        // ensure the json data is a string
        if (data['shapeId'] && !(typeof data['shapeId'] === 'string' || data['shapeId'] instanceof String)) {
            throw new Error("Expected the field `shapeId` to be a primitive type in the JSON string but got " + data['shapeId']);
        }
        // ensure the json data is a string
        if (data['userCreated'] && !(typeof data['userCreated'] === 'string' || data['userCreated'] instanceof String)) {
            throw new Error("Expected the field `userCreated` to be a primitive type in the JSON string but got " + data['userCreated']);
        }
        // ensure the json data is a string
        if (data['userModified'] && !(typeof data['userModified'] === 'string' || data['userModified'] instanceof String)) {
            throw new Error("Expected the field `userModified` to be a primitive type in the JSON string but got " + data['userModified']);
        }

        return true;
    }


}



/**
 * @member {String} connectorId
 */
SharedEffectsDetails.prototype['connectorId'] = undefined;

/**
 * @member {Date} dateCreated
 */
SharedEffectsDetails.prototype['dateCreated'] = undefined;

/**
 * @member {Date} dateModified
 */
SharedEffectsDetails.prototype['dateModified'] = undefined;

/**
 * @member {Array.<module:model/SharedEffectAttributesDetails>} effectAttributes
 */
SharedEffectsDetails.prototype['effectAttributes'] = undefined;

/**
 * @member {module:model/ThemeEffectMapDetails} effectMap
 */
SharedEffectsDetails.prototype['effectMap'] = undefined;

/**
 * @member {String} effectMapId
 */
SharedEffectsDetails.prototype['effectMapId'] = undefined;

/**
 * @member {String} id
 */
SharedEffectsDetails.prototype['id'] = undefined;

/**
 * @member {String} name
 */
SharedEffectsDetails.prototype['name'] = undefined;

/**
 * @member {module:model/SlideConnectorDetails} parentConnector
 */
SharedEffectsDetails.prototype['parentConnector'] = undefined;

/**
 * @member {module:model/SlideShapesDetails} parentShape
 */
SharedEffectsDetails.prototype['parentShape'] = undefined;

/**
 * @member {String} shapeId
 */
SharedEffectsDetails.prototype['shapeId'] = undefined;

/**
 * @member {String} userCreated
 */
SharedEffectsDetails.prototype['userCreated'] = undefined;

/**
 * @member {String} userModified
 */
SharedEffectsDetails.prototype['userModified'] = undefined;






export default SharedEffectsDetails;

