/**
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SlideSlidesDetails from './SlideSlidesDetails';
import ThemeBackgroundFillsDetails from './ThemeBackgroundFillsDetails';
import ThemeColorsDetails from './ThemeColorsDetails';
import ThemeCustomColorsDetails from './ThemeCustomColorsDetails';
import ThemeEffectMapDetails from './ThemeEffectMapDetails';
import ThemeFillsDetails from './ThemeFillsDetails';
import ThemeFontsDetails from './ThemeFontsDetails';
import ThemeLineMapDetails from './ThemeLineMapDetails';

/**
 * The ThemeThemesDetails model module.
 * @module model/ThemeThemesDetails
 * @version 0.1.0
 */
class ThemeThemesDetails {
    /**
     * Constructs a new <code>ThemeThemesDetails</code>.
     * @alias module:model/ThemeThemesDetails
     */
    constructor() { 
        
        ThemeThemesDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ThemeThemesDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ThemeThemesDetails} obj Optional instance to populate.
     * @return {module:model/ThemeThemesDetails} The populated <code>ThemeThemesDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ThemeThemesDetails();

            if (data.hasOwnProperty('backgroundFills')) {
                obj['backgroundFills'] = ApiClient.convertToType(data['backgroundFills'], [ThemeBackgroundFillsDetails]);
            }
            if (data.hasOwnProperty('baseElementBlobUrl')) {
                obj['baseElementBlobUrl'] = ApiClient.convertToType(data['baseElementBlobUrl'], 'String');
            }
            if (data.hasOwnProperty('changedBaseElementBlobUrl')) {
                obj['changedBaseElementBlobUrl'] = ApiClient.convertToType(data['changedBaseElementBlobUrl'], 'String');
            }
            if (data.hasOwnProperty('colors')) {
                obj['colors'] = ThemeColorsDetails.constructFromObject(data['colors']);
            }
            if (data.hasOwnProperty('customColors')) {
                obj['customColors'] = ApiClient.convertToType(data['customColors'], [ThemeCustomColorsDetails]);
            }
            if (data.hasOwnProperty('dateCreated')) {
                obj['dateCreated'] = ApiClient.convertToType(data['dateCreated'], 'Date');
            }
            if (data.hasOwnProperty('dateModified')) {
                obj['dateModified'] = ApiClient.convertToType(data['dateModified'], 'Date');
            }
            if (data.hasOwnProperty('effectMaps')) {
                obj['effectMaps'] = ApiClient.convertToType(data['effectMaps'], [ThemeEffectMapDetails]);
            }
            if (data.hasOwnProperty('fills')) {
                obj['fills'] = ApiClient.convertToType(data['fills'], [ThemeFillsDetails]);
            }
            if (data.hasOwnProperty('fonts')) {
                obj['fonts'] = ThemeFontsDetails.constructFromObject(data['fonts']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('lineMaps')) {
                obj['lineMaps'] = ApiClient.convertToType(data['lineMaps'], [ThemeLineMapDetails]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('packageUri')) {
                obj['packageUri'] = ApiClient.convertToType(data['packageUri'], 'String');
            }
            if (data.hasOwnProperty('slide')) {
                obj['slide'] = SlideSlidesDetails.constructFromObject(data['slide']);
            }
            if (data.hasOwnProperty('slideId')) {
                obj['slideId'] = ApiClient.convertToType(data['slideId'], 'String');
            }
            if (data.hasOwnProperty('userCreated')) {
                obj['userCreated'] = ApiClient.convertToType(data['userCreated'], 'String');
            }
            if (data.hasOwnProperty('userModified')) {
                obj['userModified'] = ApiClient.convertToType(data['userModified'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ThemeThemesDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ThemeThemesDetails</code>.
     */
    static validateJSON(data) {
        if (data['backgroundFills']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['backgroundFills'])) {
                throw new Error("Expected the field `backgroundFills` to be an array in the JSON data but got " + data['backgroundFills']);
            }
            // validate the optional field `backgroundFills` (array)
            for (const item of data['backgroundFills']) {
                ThemeBackgroundFillsDetails.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['baseElementBlobUrl'] && !(typeof data['baseElementBlobUrl'] === 'string' || data['baseElementBlobUrl'] instanceof String)) {
            throw new Error("Expected the field `baseElementBlobUrl` to be a primitive type in the JSON string but got " + data['baseElementBlobUrl']);
        }
        // ensure the json data is a string
        if (data['changedBaseElementBlobUrl'] && !(typeof data['changedBaseElementBlobUrl'] === 'string' || data['changedBaseElementBlobUrl'] instanceof String)) {
            throw new Error("Expected the field `changedBaseElementBlobUrl` to be a primitive type in the JSON string but got " + data['changedBaseElementBlobUrl']);
        }
        // validate the optional field `colors`
        if (data['colors']) { // data not null
          ThemeColorsDetails.validateJSON(data['colors']);
        }
        if (data['customColors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['customColors'])) {
                throw new Error("Expected the field `customColors` to be an array in the JSON data but got " + data['customColors']);
            }
            // validate the optional field `customColors` (array)
            for (const item of data['customColors']) {
                ThemeCustomColorsDetails.validateJSON(item);
            };
        }
        if (data['effectMaps']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['effectMaps'])) {
                throw new Error("Expected the field `effectMaps` to be an array in the JSON data but got " + data['effectMaps']);
            }
            // validate the optional field `effectMaps` (array)
            for (const item of data['effectMaps']) {
                ThemeEffectMapDetails.validateJSON(item);
            };
        }
        if (data['fills']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['fills'])) {
                throw new Error("Expected the field `fills` to be an array in the JSON data but got " + data['fills']);
            }
            // validate the optional field `fills` (array)
            for (const item of data['fills']) {
                ThemeFillsDetails.validateJSON(item);
            };
        }
        // validate the optional field `fonts`
        if (data['fonts']) { // data not null
          ThemeFontsDetails.validateJSON(data['fonts']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        if (data['lineMaps']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['lineMaps'])) {
                throw new Error("Expected the field `lineMaps` to be an array in the JSON data but got " + data['lineMaps']);
            }
            // validate the optional field `lineMaps` (array)
            for (const item of data['lineMaps']) {
                ThemeLineMapDetails.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['packageUri'] && !(typeof data['packageUri'] === 'string' || data['packageUri'] instanceof String)) {
            throw new Error("Expected the field `packageUri` to be a primitive type in the JSON string but got " + data['packageUri']);
        }
        // validate the optional field `slide`
        if (data['slide']) { // data not null
          SlideSlidesDetails.validateJSON(data['slide']);
        }
        // ensure the json data is a string
        if (data['slideId'] && !(typeof data['slideId'] === 'string' || data['slideId'] instanceof String)) {
            throw new Error("Expected the field `slideId` to be a primitive type in the JSON string but got " + data['slideId']);
        }
        // ensure the json data is a string
        if (data['userCreated'] && !(typeof data['userCreated'] === 'string' || data['userCreated'] instanceof String)) {
            throw new Error("Expected the field `userCreated` to be a primitive type in the JSON string but got " + data['userCreated']);
        }
        // ensure the json data is a string
        if (data['userModified'] && !(typeof data['userModified'] === 'string' || data['userModified'] instanceof String)) {
            throw new Error("Expected the field `userModified` to be a primitive type in the JSON string but got " + data['userModified']);
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/ThemeBackgroundFillsDetails>} backgroundFills
 */
ThemeThemesDetails.prototype['backgroundFills'] = undefined;

/**
 * @member {String} baseElementBlobUrl
 */
ThemeThemesDetails.prototype['baseElementBlobUrl'] = undefined;

/**
 * @member {String} changedBaseElementBlobUrl
 */
ThemeThemesDetails.prototype['changedBaseElementBlobUrl'] = undefined;

/**
 * @member {module:model/ThemeColorsDetails} colors
 */
ThemeThemesDetails.prototype['colors'] = undefined;

/**
 * @member {Array.<module:model/ThemeCustomColorsDetails>} customColors
 */
ThemeThemesDetails.prototype['customColors'] = undefined;

/**
 * @member {Date} dateCreated
 */
ThemeThemesDetails.prototype['dateCreated'] = undefined;

/**
 * @member {Date} dateModified
 */
ThemeThemesDetails.prototype['dateModified'] = undefined;

/**
 * @member {Array.<module:model/ThemeEffectMapDetails>} effectMaps
 */
ThemeThemesDetails.prototype['effectMaps'] = undefined;

/**
 * @member {Array.<module:model/ThemeFillsDetails>} fills
 */
ThemeThemesDetails.prototype['fills'] = undefined;

/**
 * @member {module:model/ThemeFontsDetails} fonts
 */
ThemeThemesDetails.prototype['fonts'] = undefined;

/**
 * @member {String} id
 */
ThemeThemesDetails.prototype['id'] = undefined;

/**
 * @member {Array.<module:model/ThemeLineMapDetails>} lineMaps
 */
ThemeThemesDetails.prototype['lineMaps'] = undefined;

/**
 * @member {String} name
 */
ThemeThemesDetails.prototype['name'] = undefined;

/**
 * @member {String} packageUri
 */
ThemeThemesDetails.prototype['packageUri'] = undefined;

/**
 * @member {module:model/SlideSlidesDetails} slide
 */
ThemeThemesDetails.prototype['slide'] = undefined;

/**
 * @member {String} slideId
 */
ThemeThemesDetails.prototype['slideId'] = undefined;

/**
 * @member {String} userCreated
 */
ThemeThemesDetails.prototype['userCreated'] = undefined;

/**
 * @member {String} userModified
 */
ThemeThemesDetails.prototype['userModified'] = undefined;






export default ThemeThemesDetails;

