/**
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SharedFillMap model module.
 * @module model/SharedFillMap
 * @version 0.1.0
 */
class SharedFillMap {
    /**
     * Constructs a new <code>SharedFillMap</code>.
     * @alias module:model/SharedFillMap
     */
    constructor() { 
        
        SharedFillMap.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SharedFillMap</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SharedFillMap} obj Optional instance to populate.
     * @return {module:model/SharedFillMap} The populated <code>SharedFillMap</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SharedFillMap();

            if (data.hasOwnProperty('connectorId')) {
                obj['connectorId'] = ApiClient.convertToType(data['connectorId'], 'String');
            }
            if (data.hasOwnProperty('effectAttributeId')) {
                obj['effectAttributeId'] = ApiClient.convertToType(data['effectAttributeId'], 'String');
            }
            if (data.hasOwnProperty('fillTypeId')) {
                obj['fillTypeId'] = ApiClient.convertToType(data['fillTypeId'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('shapeId')) {
                obj['shapeId'] = ApiClient.convertToType(data['shapeId'], 'String');
            }
            if (data.hasOwnProperty('tableCellId')) {
                obj['tableCellId'] = ApiClient.convertToType(data['tableCellId'], 'String');
            }
            if (data.hasOwnProperty('themeBackgroundFillId')) {
                obj['themeBackgroundFillId'] = ApiClient.convertToType(data['themeBackgroundFillId'], 'String');
            }
            if (data.hasOwnProperty('themeFillId')) {
                obj['themeFillId'] = ApiClient.convertToType(data['themeFillId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SharedFillMap</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SharedFillMap</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['connectorId'] && !(typeof data['connectorId'] === 'string' || data['connectorId'] instanceof String)) {
            throw new Error("Expected the field `connectorId` to be a primitive type in the JSON string but got " + data['connectorId']);
        }
        // ensure the json data is a string
        if (data['effectAttributeId'] && !(typeof data['effectAttributeId'] === 'string' || data['effectAttributeId'] instanceof String)) {
            throw new Error("Expected the field `effectAttributeId` to be a primitive type in the JSON string but got " + data['effectAttributeId']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['shapeId'] && !(typeof data['shapeId'] === 'string' || data['shapeId'] instanceof String)) {
            throw new Error("Expected the field `shapeId` to be a primitive type in the JSON string but got " + data['shapeId']);
        }
        // ensure the json data is a string
        if (data['tableCellId'] && !(typeof data['tableCellId'] === 'string' || data['tableCellId'] instanceof String)) {
            throw new Error("Expected the field `tableCellId` to be a primitive type in the JSON string but got " + data['tableCellId']);
        }
        // ensure the json data is a string
        if (data['themeBackgroundFillId'] && !(typeof data['themeBackgroundFillId'] === 'string' || data['themeBackgroundFillId'] instanceof String)) {
            throw new Error("Expected the field `themeBackgroundFillId` to be a primitive type in the JSON string but got " + data['themeBackgroundFillId']);
        }
        // ensure the json data is a string
        if (data['themeFillId'] && !(typeof data['themeFillId'] === 'string' || data['themeFillId'] instanceof String)) {
            throw new Error("Expected the field `themeFillId` to be a primitive type in the JSON string but got " + data['themeFillId']);
        }

        return true;
    }


}



/**
 * @member {String} connectorId
 */
SharedFillMap.prototype['connectorId'] = undefined;

/**
 * @member {String} effectAttributeId
 */
SharedFillMap.prototype['effectAttributeId'] = undefined;

/**
 * @member {Number} fillTypeId
 */
SharedFillMap.prototype['fillTypeId'] = undefined;

/**
 * @member {String} id
 */
SharedFillMap.prototype['id'] = undefined;

/**
 * @member {String} shapeId
 */
SharedFillMap.prototype['shapeId'] = undefined;

/**
 * @member {String} tableCellId
 */
SharedFillMap.prototype['tableCellId'] = undefined;

/**
 * @member {String} themeBackgroundFillId
 */
SharedFillMap.prototype['themeBackgroundFillId'] = undefined;

/**
 * @member {String} themeFillId
 */
SharedFillMap.prototype['themeFillId'] = undefined;






export default SharedFillMap;

