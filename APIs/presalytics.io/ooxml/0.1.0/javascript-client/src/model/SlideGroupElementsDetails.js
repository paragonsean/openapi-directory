/**
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SlideConnectorDetails from './SlideConnectorDetails';
import SlideGraphicsDetails from './SlideGraphicsDetails';
import SlideGroupElementTypesDetails from './SlideGroupElementTypesDetails';
import SlideGroupsDetails from './SlideGroupsDetails';
import SlideShapeTreesDetails from './SlideShapeTreesDetails';
import SlideShapesDetails from './SlideShapesDetails';

/**
 * The SlideGroupElementsDetails model module.
 * @module model/SlideGroupElementsDetails
 * @version 0.1.0
 */
class SlideGroupElementsDetails {
    /**
     * Constructs a new <code>SlideGroupElementsDetails</code>.
     * @alias module:model/SlideGroupElementsDetails
     */
    constructor() { 
        
        SlideGroupElementsDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SlideGroupElementsDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SlideGroupElementsDetails} obj Optional instance to populate.
     * @return {module:model/SlideGroupElementsDetails} The populated <code>SlideGroupElementsDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SlideGroupElementsDetails();

            if (data.hasOwnProperty('childGroupElements')) {
                obj['childGroupElements'] = ApiClient.convertToType(data['childGroupElements'], [SlideGroupElementsDetails]);
            }
            if (data.hasOwnProperty('connector')) {
                obj['connector'] = SlideConnectorDetails.constructFromObject(data['connector']);
            }
            if (data.hasOwnProperty('dateCreated')) {
                obj['dateCreated'] = ApiClient.convertToType(data['dateCreated'], 'Date');
            }
            if (data.hasOwnProperty('dateModified')) {
                obj['dateModified'] = ApiClient.convertToType(data['dateModified'], 'Date');
            }
            if (data.hasOwnProperty('graphic')) {
                obj['graphic'] = SlideGraphicsDetails.constructFromObject(data['graphic']);
            }
            if (data.hasOwnProperty('group')) {
                obj['group'] = SlideGroupsDetails.constructFromObject(data['group']);
            }
            if (data.hasOwnProperty('groupElementTypeId')) {
                obj['groupElementTypeId'] = ApiClient.convertToType(data['groupElementTypeId'], 'Number');
            }
            if (data.hasOwnProperty('groupElementTypePk')) {
                obj['groupElementTypePk'] = ApiClient.convertToType(data['groupElementTypePk'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('parentGroupElement')) {
                obj['parentGroupElement'] = SlideGroupElementsDetails.constructFromObject(data['parentGroupElement']);
            }
            if (data.hasOwnProperty('parentGroupElementId')) {
                obj['parentGroupElementId'] = ApiClient.convertToType(data['parentGroupElementId'], 'String');
            }
            if (data.hasOwnProperty('shape')) {
                obj['shape'] = SlideShapesDetails.constructFromObject(data['shape']);
            }
            if (data.hasOwnProperty('shapeTree')) {
                obj['shapeTree'] = SlideShapeTreesDetails.constructFromObject(data['shapeTree']);
            }
            if (data.hasOwnProperty('shapeTreeId')) {
                obj['shapeTreeId'] = ApiClient.convertToType(data['shapeTreeId'], 'String');
            }
            if (data.hasOwnProperty('typeInfo')) {
                obj['typeInfo'] = SlideGroupElementTypesDetails.constructFromObject(data['typeInfo']);
            }
            if (data.hasOwnProperty('ultimateParentShapeTreeId')) {
                obj['ultimateParentShapeTreeId'] = ApiClient.convertToType(data['ultimateParentShapeTreeId'], 'String');
            }
            if (data.hasOwnProperty('userCreated')) {
                obj['userCreated'] = ApiClient.convertToType(data['userCreated'], 'String');
            }
            if (data.hasOwnProperty('userModified')) {
                obj['userModified'] = ApiClient.convertToType(data['userModified'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SlideGroupElementsDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SlideGroupElementsDetails</code>.
     */
    static validateJSON(data) {
        if (data['childGroupElements']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['childGroupElements'])) {
                throw new Error("Expected the field `childGroupElements` to be an array in the JSON data but got " + data['childGroupElements']);
            }
            // validate the optional field `childGroupElements` (array)
            for (const item of data['childGroupElements']) {
                SlideGroupElementsDetails.validateJSON(item);
            };
        }
        // validate the optional field `connector`
        if (data['connector']) { // data not null
          SlideConnectorDetails.validateJSON(data['connector']);
        }
        // validate the optional field `graphic`
        if (data['graphic']) { // data not null
          SlideGraphicsDetails.validateJSON(data['graphic']);
        }
        // validate the optional field `group`
        if (data['group']) { // data not null
          SlideGroupsDetails.validateJSON(data['group']);
        }
        // ensure the json data is a string
        if (data['groupElementTypePk'] && !(typeof data['groupElementTypePk'] === 'string' || data['groupElementTypePk'] instanceof String)) {
            throw new Error("Expected the field `groupElementTypePk` to be a primitive type in the JSON string but got " + data['groupElementTypePk']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `parentGroupElement`
        if (data['parentGroupElement']) { // data not null
          SlideGroupElementsDetails.validateJSON(data['parentGroupElement']);
        }
        // ensure the json data is a string
        if (data['parentGroupElementId'] && !(typeof data['parentGroupElementId'] === 'string' || data['parentGroupElementId'] instanceof String)) {
            throw new Error("Expected the field `parentGroupElementId` to be a primitive type in the JSON string but got " + data['parentGroupElementId']);
        }
        // validate the optional field `shape`
        if (data['shape']) { // data not null
          SlideShapesDetails.validateJSON(data['shape']);
        }
        // validate the optional field `shapeTree`
        if (data['shapeTree']) { // data not null
          SlideShapeTreesDetails.validateJSON(data['shapeTree']);
        }
        // ensure the json data is a string
        if (data['shapeTreeId'] && !(typeof data['shapeTreeId'] === 'string' || data['shapeTreeId'] instanceof String)) {
            throw new Error("Expected the field `shapeTreeId` to be a primitive type in the JSON string but got " + data['shapeTreeId']);
        }
        // validate the optional field `typeInfo`
        if (data['typeInfo']) { // data not null
          SlideGroupElementTypesDetails.validateJSON(data['typeInfo']);
        }
        // ensure the json data is a string
        if (data['ultimateParentShapeTreeId'] && !(typeof data['ultimateParentShapeTreeId'] === 'string' || data['ultimateParentShapeTreeId'] instanceof String)) {
            throw new Error("Expected the field `ultimateParentShapeTreeId` to be a primitive type in the JSON string but got " + data['ultimateParentShapeTreeId']);
        }
        // ensure the json data is a string
        if (data['userCreated'] && !(typeof data['userCreated'] === 'string' || data['userCreated'] instanceof String)) {
            throw new Error("Expected the field `userCreated` to be a primitive type in the JSON string but got " + data['userCreated']);
        }
        // ensure the json data is a string
        if (data['userModified'] && !(typeof data['userModified'] === 'string' || data['userModified'] instanceof String)) {
            throw new Error("Expected the field `userModified` to be a primitive type in the JSON string but got " + data['userModified']);
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/SlideGroupElementsDetails>} childGroupElements
 */
SlideGroupElementsDetails.prototype['childGroupElements'] = undefined;

/**
 * @member {module:model/SlideConnectorDetails} connector
 */
SlideGroupElementsDetails.prototype['connector'] = undefined;

/**
 * @member {Date} dateCreated
 */
SlideGroupElementsDetails.prototype['dateCreated'] = undefined;

/**
 * @member {Date} dateModified
 */
SlideGroupElementsDetails.prototype['dateModified'] = undefined;

/**
 * @member {module:model/SlideGraphicsDetails} graphic
 */
SlideGroupElementsDetails.prototype['graphic'] = undefined;

/**
 * @member {module:model/SlideGroupsDetails} group
 */
SlideGroupElementsDetails.prototype['group'] = undefined;

/**
 * @member {Number} groupElementTypeId
 */
SlideGroupElementsDetails.prototype['groupElementTypeId'] = undefined;

/**
 * @member {String} groupElementTypePk
 */
SlideGroupElementsDetails.prototype['groupElementTypePk'] = undefined;

/**
 * @member {String} id
 */
SlideGroupElementsDetails.prototype['id'] = undefined;

/**
 * @member {module:model/SlideGroupElementsDetails} parentGroupElement
 */
SlideGroupElementsDetails.prototype['parentGroupElement'] = undefined;

/**
 * @member {String} parentGroupElementId
 */
SlideGroupElementsDetails.prototype['parentGroupElementId'] = undefined;

/**
 * @member {module:model/SlideShapesDetails} shape
 */
SlideGroupElementsDetails.prototype['shape'] = undefined;

/**
 * @member {module:model/SlideShapeTreesDetails} shapeTree
 */
SlideGroupElementsDetails.prototype['shapeTree'] = undefined;

/**
 * @member {String} shapeTreeId
 */
SlideGroupElementsDetails.prototype['shapeTreeId'] = undefined;

/**
 * @member {module:model/SlideGroupElementTypesDetails} typeInfo
 */
SlideGroupElementsDetails.prototype['typeInfo'] = undefined;

/**
 * @member {String} ultimateParentShapeTreeId
 */
SlideGroupElementsDetails.prototype['ultimateParentShapeTreeId'] = undefined;

/**
 * @member {String} userCreated
 */
SlideGroupElementsDetails.prototype['userCreated'] = undefined;

/**
 * @member {String} userModified
 */
SlideGroupElementsDetails.prototype['userModified'] = undefined;






export default SlideGroupElementsDetails;

