/**
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ChartChartDataDetails from './ChartChartDataDetails';
import ChartColumnsDetails from './ChartColumnsDetails';
import ChartRowsDetails from './ChartRowsDetails';

/**
 * The ChartDataPointsDetails model module.
 * @module model/ChartDataPointsDetails
 * @version 0.1.0
 */
class ChartDataPointsDetails {
    /**
     * Constructs a new <code>ChartDataPointsDetails</code>.
     * @alias module:model/ChartDataPointsDetails
     */
    constructor() { 
        
        ChartDataPointsDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ChartDataPointsDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChartDataPointsDetails} obj Optional instance to populate.
     * @return {module:model/ChartDataPointsDetails} The populated <code>ChartDataPointsDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChartDataPointsDetails();

            if (data.hasOwnProperty('chartData')) {
                obj['chartData'] = ChartChartDataDetails.constructFromObject(data['chartData']);
            }
            if (data.hasOwnProperty('chartDataId')) {
                obj['chartDataId'] = ApiClient.convertToType(data['chartDataId'], 'String');
            }
            if (data.hasOwnProperty('column')) {
                obj['column'] = ChartColumnsDetails.constructFromObject(data['column']);
            }
            if (data.hasOwnProperty('columnId')) {
                obj['columnId'] = ApiClient.convertToType(data['columnId'], 'String');
            }
            if (data.hasOwnProperty('dateCreated')) {
                obj['dateCreated'] = ApiClient.convertToType(data['dateCreated'], 'Date');
            }
            if (data.hasOwnProperty('dateModified')) {
                obj['dateModified'] = ApiClient.convertToType(data['dateModified'], 'Date');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('row')) {
                obj['row'] = ChartRowsDetails.constructFromObject(data['row']);
            }
            if (data.hasOwnProperty('rowId')) {
                obj['rowId'] = ApiClient.convertToType(data['rowId'], 'String');
            }
            if (data.hasOwnProperty('userCreated')) {
                obj['userCreated'] = ApiClient.convertToType(data['userCreated'], 'String');
            }
            if (data.hasOwnProperty('userModified')) {
                obj['userModified'] = ApiClient.convertToType(data['userModified'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ChartDataPointsDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ChartDataPointsDetails</code>.
     */
    static validateJSON(data) {
        // validate the optional field `chartData`
        if (data['chartData']) { // data not null
          ChartChartDataDetails.validateJSON(data['chartData']);
        }
        // ensure the json data is a string
        if (data['chartDataId'] && !(typeof data['chartDataId'] === 'string' || data['chartDataId'] instanceof String)) {
            throw new Error("Expected the field `chartDataId` to be a primitive type in the JSON string but got " + data['chartDataId']);
        }
        // validate the optional field `column`
        if (data['column']) { // data not null
          ChartColumnsDetails.validateJSON(data['column']);
        }
        // ensure the json data is a string
        if (data['columnId'] && !(typeof data['columnId'] === 'string' || data['columnId'] instanceof String)) {
            throw new Error("Expected the field `columnId` to be a primitive type in the JSON string but got " + data['columnId']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `row`
        if (data['row']) { // data not null
          ChartRowsDetails.validateJSON(data['row']);
        }
        // ensure the json data is a string
        if (data['rowId'] && !(typeof data['rowId'] === 'string' || data['rowId'] instanceof String)) {
            throw new Error("Expected the field `rowId` to be a primitive type in the JSON string but got " + data['rowId']);
        }
        // ensure the json data is a string
        if (data['userCreated'] && !(typeof data['userCreated'] === 'string' || data['userCreated'] instanceof String)) {
            throw new Error("Expected the field `userCreated` to be a primitive type in the JSON string but got " + data['userCreated']);
        }
        // ensure the json data is a string
        if (data['userModified'] && !(typeof data['userModified'] === 'string' || data['userModified'] instanceof String)) {
            throw new Error("Expected the field `userModified` to be a primitive type in the JSON string but got " + data['userModified']);
        }

        return true;
    }


}



/**
 * @member {module:model/ChartChartDataDetails} chartData
 */
ChartDataPointsDetails.prototype['chartData'] = undefined;

/**
 * @member {String} chartDataId
 */
ChartDataPointsDetails.prototype['chartDataId'] = undefined;

/**
 * @member {module:model/ChartColumnsDetails} column
 */
ChartDataPointsDetails.prototype['column'] = undefined;

/**
 * @member {String} columnId
 */
ChartDataPointsDetails.prototype['columnId'] = undefined;

/**
 * @member {Date} dateCreated
 */
ChartDataPointsDetails.prototype['dateCreated'] = undefined;

/**
 * @member {Date} dateModified
 */
ChartDataPointsDetails.prototype['dateModified'] = undefined;

/**
 * @member {String} id
 */
ChartDataPointsDetails.prototype['id'] = undefined;

/**
 * @member {module:model/ChartRowsDetails} row
 */
ChartDataPointsDetails.prototype['row'] = undefined;

/**
 * @member {String} rowId
 */
ChartDataPointsDetails.prototype['rowId'] = undefined;

/**
 * @member {String} userCreated
 */
ChartDataPointsDetails.prototype['userCreated'] = undefined;

/**
 * @member {String} userModified
 */
ChartDataPointsDetails.prototype['userModified'] = undefined;

/**
 * @member {Number} value
 */
ChartDataPointsDetails.prototype['value'] = undefined;






export default ChartDataPointsDetails;

