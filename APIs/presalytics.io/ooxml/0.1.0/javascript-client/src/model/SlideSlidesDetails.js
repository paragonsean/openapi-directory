/**
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DocumentDetails from './DocumentDetails';
import SlideShapeTreesDetails from './SlideShapeTreesDetails';
import SlideSlideMastersDetails from './SlideSlideMastersDetails';
import ThemeThemesDetails from './ThemeThemesDetails';

/**
 * The SlideSlidesDetails model module.
 * @module model/SlideSlidesDetails
 * @version 0.1.0
 */
class SlideSlidesDetails {
    /**
     * Constructs a new <code>SlideSlidesDetails</code>.
     * @alias module:model/SlideSlidesDetails
     */
    constructor() { 
        
        SlideSlidesDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SlideSlidesDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SlideSlidesDetails} obj Optional instance to populate.
     * @return {module:model/SlideSlidesDetails} The populated <code>SlideSlidesDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SlideSlidesDetails();

            if (data.hasOwnProperty('baseElementBlobUrl')) {
                obj['baseElementBlobUrl'] = ApiClient.convertToType(data['baseElementBlobUrl'], 'String');
            }
            if (data.hasOwnProperty('changedBaseElementBlobUrl')) {
                obj['changedBaseElementBlobUrl'] = ApiClient.convertToType(data['changedBaseElementBlobUrl'], 'String');
            }
            if (data.hasOwnProperty('dateCreated')) {
                obj['dateCreated'] = ApiClient.convertToType(data['dateCreated'], 'Date');
            }
            if (data.hasOwnProperty('dateModified')) {
                obj['dateModified'] = ApiClient.convertToType(data['dateModified'], 'Date');
            }
            if (data.hasOwnProperty('document')) {
                obj['document'] = DocumentDetails.constructFromObject(data['document']);
            }
            if (data.hasOwnProperty('documentId')) {
                obj['documentId'] = ApiClient.convertToType(data['documentId'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('number')) {
                obj['number'] = ApiClient.convertToType(data['number'], 'Number');
            }
            if (data.hasOwnProperty('ooxmlId')) {
                obj['ooxmlId'] = ApiClient.convertToType(data['ooxmlId'], 'Number');
            }
            if (data.hasOwnProperty('packageUri')) {
                obj['packageUri'] = ApiClient.convertToType(data['packageUri'], 'String');
            }
            if (data.hasOwnProperty('shapeTree')) {
                obj['shapeTree'] = SlideShapeTreesDetails.constructFromObject(data['shapeTree']);
            }
            if (data.hasOwnProperty('slideDocumentUrl')) {
                obj['slideDocumentUrl'] = ApiClient.convertToType(data['slideDocumentUrl'], 'String');
            }
            if (data.hasOwnProperty('slideMaster')) {
                obj['slideMaster'] = SlideSlideMastersDetails.constructFromObject(data['slideMaster']);
            }
            if (data.hasOwnProperty('svgBlobUrl')) {
                obj['svgBlobUrl'] = ApiClient.convertToType(data['svgBlobUrl'], 'String');
            }
            if (data.hasOwnProperty('theme')) {
                obj['theme'] = ThemeThemesDetails.constructFromObject(data['theme']);
            }
            if (data.hasOwnProperty('userCreated')) {
                obj['userCreated'] = ApiClient.convertToType(data['userCreated'], 'String');
            }
            if (data.hasOwnProperty('userModified')) {
                obj['userModified'] = ApiClient.convertToType(data['userModified'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SlideSlidesDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SlideSlidesDetails</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['baseElementBlobUrl'] && !(typeof data['baseElementBlobUrl'] === 'string' || data['baseElementBlobUrl'] instanceof String)) {
            throw new Error("Expected the field `baseElementBlobUrl` to be a primitive type in the JSON string but got " + data['baseElementBlobUrl']);
        }
        // ensure the json data is a string
        if (data['changedBaseElementBlobUrl'] && !(typeof data['changedBaseElementBlobUrl'] === 'string' || data['changedBaseElementBlobUrl'] instanceof String)) {
            throw new Error("Expected the field `changedBaseElementBlobUrl` to be a primitive type in the JSON string but got " + data['changedBaseElementBlobUrl']);
        }
        // validate the optional field `document`
        if (data['document']) { // data not null
          DocumentDetails.validateJSON(data['document']);
        }
        // ensure the json data is a string
        if (data['documentId'] && !(typeof data['documentId'] === 'string' || data['documentId'] instanceof String)) {
            throw new Error("Expected the field `documentId` to be a primitive type in the JSON string but got " + data['documentId']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['packageUri'] && !(typeof data['packageUri'] === 'string' || data['packageUri'] instanceof String)) {
            throw new Error("Expected the field `packageUri` to be a primitive type in the JSON string but got " + data['packageUri']);
        }
        // validate the optional field `shapeTree`
        if (data['shapeTree']) { // data not null
          SlideShapeTreesDetails.validateJSON(data['shapeTree']);
        }
        // ensure the json data is a string
        if (data['slideDocumentUrl'] && !(typeof data['slideDocumentUrl'] === 'string' || data['slideDocumentUrl'] instanceof String)) {
            throw new Error("Expected the field `slideDocumentUrl` to be a primitive type in the JSON string but got " + data['slideDocumentUrl']);
        }
        // validate the optional field `slideMaster`
        if (data['slideMaster']) { // data not null
          SlideSlideMastersDetails.validateJSON(data['slideMaster']);
        }
        // ensure the json data is a string
        if (data['svgBlobUrl'] && !(typeof data['svgBlobUrl'] === 'string' || data['svgBlobUrl'] instanceof String)) {
            throw new Error("Expected the field `svgBlobUrl` to be a primitive type in the JSON string but got " + data['svgBlobUrl']);
        }
        // validate the optional field `theme`
        if (data['theme']) { // data not null
          ThemeThemesDetails.validateJSON(data['theme']);
        }
        // ensure the json data is a string
        if (data['userCreated'] && !(typeof data['userCreated'] === 'string' || data['userCreated'] instanceof String)) {
            throw new Error("Expected the field `userCreated` to be a primitive type in the JSON string but got " + data['userCreated']);
        }
        // ensure the json data is a string
        if (data['userModified'] && !(typeof data['userModified'] === 'string' || data['userModified'] instanceof String)) {
            throw new Error("Expected the field `userModified` to be a primitive type in the JSON string but got " + data['userModified']);
        }

        return true;
    }


}



/**
 * @member {String} baseElementBlobUrl
 */
SlideSlidesDetails.prototype['baseElementBlobUrl'] = undefined;

/**
 * @member {String} changedBaseElementBlobUrl
 */
SlideSlidesDetails.prototype['changedBaseElementBlobUrl'] = undefined;

/**
 * @member {Date} dateCreated
 */
SlideSlidesDetails.prototype['dateCreated'] = undefined;

/**
 * @member {Date} dateModified
 */
SlideSlidesDetails.prototype['dateModified'] = undefined;

/**
 * @member {module:model/DocumentDetails} document
 */
SlideSlidesDetails.prototype['document'] = undefined;

/**
 * @member {String} documentId
 */
SlideSlidesDetails.prototype['documentId'] = undefined;

/**
 * @member {String} id
 */
SlideSlidesDetails.prototype['id'] = undefined;

/**
 * @member {String} name
 */
SlideSlidesDetails.prototype['name'] = undefined;

/**
 * @member {Number} number
 */
SlideSlidesDetails.prototype['number'] = undefined;

/**
 * @member {Number} ooxmlId
 */
SlideSlidesDetails.prototype['ooxmlId'] = undefined;

/**
 * @member {String} packageUri
 */
SlideSlidesDetails.prototype['packageUri'] = undefined;

/**
 * @member {module:model/SlideShapeTreesDetails} shapeTree
 */
SlideSlidesDetails.prototype['shapeTree'] = undefined;

/**
 * @member {String} slideDocumentUrl
 */
SlideSlidesDetails.prototype['slideDocumentUrl'] = undefined;

/**
 * @member {module:model/SlideSlideMastersDetails} slideMaster
 */
SlideSlidesDetails.prototype['slideMaster'] = undefined;

/**
 * @member {String} svgBlobUrl
 */
SlideSlidesDetails.prototype['svgBlobUrl'] = undefined;

/**
 * @member {module:model/ThemeThemesDetails} theme
 */
SlideSlidesDetails.prototype['theme'] = undefined;

/**
 * @member {String} userCreated
 */
SlideSlidesDetails.prototype['userCreated'] = undefined;

/**
 * @member {String} userModified
 */
SlideSlidesDetails.prototype['userModified'] = undefined;






export default SlideSlidesDetails;

