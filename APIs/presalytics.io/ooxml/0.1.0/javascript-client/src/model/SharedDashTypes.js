/**
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SharedDashTypes model module.
 * @module model/SharedDashTypes
 * @version 0.1.0
 */
class SharedDashTypes {
    /**
     * Constructs a new <code>SharedDashTypes</code>.
     * @alias module:model/SharedDashTypes
     */
    constructor() { 
        
        SharedDashTypes.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SharedDashTypes</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SharedDashTypes} obj Optional instance to populate.
     * @return {module:model/SharedDashTypes} The populated <code>SharedDashTypes</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SharedDashTypes();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('serializedAs')) {
                obj['serializedAs'] = ApiClient.convertToType(data['serializedAs'], 'String');
            }
            if (data.hasOwnProperty('typeId')) {
                obj['typeId'] = ApiClient.convertToType(data['typeId'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SharedDashTypes</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SharedDashTypes</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['serializedAs'] && !(typeof data['serializedAs'] === 'string' || data['serializedAs'] instanceof String)) {
            throw new Error("Expected the field `serializedAs` to be a primitive type in the JSON string but got " + data['serializedAs']);
        }

        return true;
    }


}



/**
 * @member {String} description
 */
SharedDashTypes.prototype['description'] = undefined;

/**
 * @member {String} id
 */
SharedDashTypes.prototype['id'] = undefined;

/**
 * @member {String} name
 */
SharedDashTypes.prototype['name'] = undefined;

/**
 * @member {String} serializedAs
 */
SharedDashTypes.prototype['serializedAs'] = undefined;

/**
 * @member {Number} typeId
 */
SharedDashTypes.prototype['typeId'] = undefined;






export default SharedDashTypes;

