/**
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ChartChartDataDTO from '../model/ChartChartDataDTO';
import ChartCharts from '../model/ChartCharts';
import ChartChartsDetails from '../model/ChartChartsDetails';
import ChildObjects from '../model/ChildObjects';
import OoxmlDTO from '../model/OoxmlDTO';
import ProblemDetails from '../model/ProblemDetails';

/**
* Charts service.
* @module api/ChartsApi
* @version 0.1.0
*/
export default class ChartsApi {

    /**
    * Constructs a new ChartsApi. 
    * @alias module:api/ChartsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the chartsChartsChartupdateGetId operation.
     * @callback module:api/ChartsApi~chartsChartsChartupdateGetIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChartChartDataDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Charts: Get Chart Data
     * Gets a ChartDataDTO object, usually used for downstream analytics and chart updates
     * @param {String} id 
     * @param {module:api/ChartsApi~chartsChartsChartupdateGetIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChartChartDataDTO}
     */
    chartsChartsChartupdateGetId(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling chartsChartsChartupdateGetId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ChartChartDataDTO;
      return this.apiClient.callApi(
        '/Charts/ChartUpdate/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the chartsChartsChartupdatePutId operation.
     * @callback module:api/ChartsApi~chartsChartsChartupdatePutIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Charts: Update Chart Data
     * Simplifies chart update by allowing users to supply data via ChartDataDTO
     * @param {String} id The Chart Id
     * @param {Object} opts Optional parameters
     * @param {module:model/ChartChartDataDTO} [chartChartDataDTO] The ChartDataDto Object
     * @param {module:api/ChartsApi~chartsChartsChartupdatePutIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    chartsChartsChartupdatePutId(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['chartChartDataDTO'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling chartsChartsChartupdatePutId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Charts/ChartUpdate/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the chartsChartsChildobjectsGetId operation.
     * @callback module:api/ChartsApi~chartsChartsChildobjectsGetIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ChildObjects>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Charts: Get Dependent Objects Tree
     * This endpoint is helpful for helping users and bots identify dependent objects to this Chart and retreive their corresponding metadata in order to make modifications to those objects in downstream operations.
     * @param {String} id 
     * @param {module:api/ChartsApi~chartsChartsChildobjectsGetIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ChildObjects>}
     */
    chartsChartsChildobjectsGetId(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling chartsChartsChildobjectsGetId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ChildObjects];
      return this.apiClient.callApi(
        '/Charts/ChildObjects/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the chartsChartsDetailsGetId operation.
     * @callback module:api/ChartsApi~chartsChartsDetailsGetIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChartChartsDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Charts: Get Details
     * Returns object metadata and information about relative dependent objects 
     * @param {String} id 
     * @param {module:api/ChartsApi~chartsChartsDetailsGetIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChartChartsDetails}
     */
    chartsChartsDetailsGetId(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling chartsChartsDetailsGetId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ChartChartsDetails;
      return this.apiClient.callApi(
        '/Charts/Details/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the chartsChartsGetId operation.
     * @callback module:api/ChartsApi~chartsChartsGetIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChartCharts} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Charts: Get by Id
     * Get by Id: Use this method to retrieve a Charts object by its primary key (id)
     * @param {String} id An Id of the respository DTO elemennt
     * @param {module:api/ChartsApi~chartsChartsGetIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChartCharts}
     */
    chartsChartsGetId(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling chartsChartsGetId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ChartCharts;
      return this.apiClient.callApi(
        '/Charts/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the chartsChartsOpenofficexmlGetIdUpdated operation.
     * @callback module:api/ChartsApi~chartsChartsOpenofficexmlGetIdUpdatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OoxmlDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Charts: Get Underlying Xml
     * Return the subset of the xml content from within the latest edited version of the OpenXmlDocument from this Chart object.  The returned xml data conforms to the [Ecma-376 standard](http://www.ecma-international.org/publications/standards/Ecma-376.htm).  Use this endpoint a starting point for building client-side extensions that modify Presalytics widgets containing Chart objects.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [updated = true)] Indicates whether API should return the orginal uploaded xml (false) or the actively updated version (true, default)
     * @param {module:api/ChartsApi~chartsChartsOpenofficexmlGetIdUpdatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OoxmlDTO}
     */
    chartsChartsOpenofficexmlGetIdUpdated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling chartsChartsOpenofficexmlGetIdUpdated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'updated': opts['updated']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OoxmlDTO;
      return this.apiClient.callApi(
        '/Charts/OpenOfficeXml/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the chartsChartsOpenofficexmlPutId operation.
     * @callback module:api/ChartsApi~chartsChartsOpenofficexmlPutIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Charts: Modify Underlying Xml
     * Directly eidt the underlying xml of a Chart object within an OpenOpenXml (e.g. Excel, Powerpoint) document. This endpoint will validatate the submitted xml against the [Ecma-376 standard](http://www.ecma-international.org/publications/standards/Ecma-376.htm) prior to saving modification.  Invalid xml will rejected by this endpoint and a (hopefully) helpful error message will be returned.  Use this endpoint for client-side automation of modifications ot Chart objects.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/OoxmlDTO} [ooxmlDTO] 
     * @param {module:api/ChartsApi~chartsChartsOpenofficexmlPutIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    chartsChartsOpenofficexmlPutId(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['ooxmlDTO'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling chartsChartsOpenofficexmlPutId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Charts/OpenOfficeXml/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the chartsChartsSvgGetIdUseCache operation.
     * @callback module:api/ChartsApi~chartsChartsSvgGetIdUseCacheCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Charts: Get Svg file
     * This endpoint is helpful for rending this Chart as an svg or image object that can then be rendered in a story, dashboard or website.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [useCache = false)] Indicates whether API should retrieve content from a cache if aviable (true, default), or force an update (false)
     * @param {module:api/ChartsApi~chartsChartsSvgGetIdUseCacheCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    chartsChartsSvgGetIdUseCache(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling chartsChartsSvgGetIdUseCache");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'use_cache': opts['useCache']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['image/svg+xml', 'application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Charts/Svg/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
