/**
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ChildObjects from '../model/ChildObjects';
import OoxmlDTO from '../model/OoxmlDTO';
import ProblemDetails from '../model/ProblemDetails';
import ThemeThemes from '../model/ThemeThemes';
import ThemeThemesDetails from '../model/ThemeThemesDetails';

/**
* Themes service.
* @module api/ThemesApi
* @version 0.1.0
*/
export default class ThemesApi {

    /**
    * Constructs a new ThemesApi. 
    * @alias module:api/ThemesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the themeThemesChildobjectsGetId operation.
     * @callback module:api/ThemesApi~themeThemesChildobjectsGetIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ChildObjects>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Theme: Get Dependent Objects Tree
     * This endpoint is helpful for helping users and bots identify dependent objects to this Theme and retreive their corresponding metadata in order to make modifications to those objects in downstream operations.
     * @param {String} id 
     * @param {module:api/ThemesApi~themeThemesChildobjectsGetIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ChildObjects>}
     */
    themeThemesChildobjectsGetId(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling themeThemesChildobjectsGetId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ChildObjects];
      return this.apiClient.callApi(
        '/Themes/ChildObjects/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the themeThemesDetailsGetId operation.
     * @callback module:api/ThemesApi~themeThemesDetailsGetIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ThemeThemesDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Theme: Get Details
     * Returns object metadata and information about relative dependent objects 
     * @param {String} id 
     * @param {module:api/ThemesApi~themeThemesDetailsGetIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ThemeThemesDetails}
     */
    themeThemesDetailsGetId(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling themeThemesDetailsGetId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ThemeThemesDetails;
      return this.apiClient.callApi(
        '/Themes/Details/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the themeThemesGetId operation.
     * @callback module:api/ThemesApi~themeThemesGetIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ThemeThemes} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Themes: Get by Id
     * Get by Id: Use this method to retrieve a Themes object by its primary key (id)
     * @param {String} id An Id of the respository DTO elemennt
     * @param {module:api/ThemesApi~themeThemesGetIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ThemeThemes}
     */
    themeThemesGetId(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling themeThemesGetId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ThemeThemes;
      return this.apiClient.callApi(
        '/Themes/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the themeThemesOpenofficexmlGetIdUpdated operation.
     * @callback module:api/ThemesApi~themeThemesOpenofficexmlGetIdUpdatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OoxmlDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Theme: Get Underlying Xml
     * Return the subset of the xml content from within the latest edited version of the OpenXmlDocument from this Theme object.  The returned xml data conforms to the [Ecma-376 standard](http://www.ecma-international.org/publications/standards/Ecma-376.htm).  Use this endpoint a starting point for building client-side extensions that modify Presalytics widgets containing Theme objects.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [updated = true)] Indicates whether API should return the orginal uploaded xml (false) or the actively updated version (true, default)
     * @param {module:api/ThemesApi~themeThemesOpenofficexmlGetIdUpdatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OoxmlDTO}
     */
    themeThemesOpenofficexmlGetIdUpdated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling themeThemesOpenofficexmlGetIdUpdated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'updated': opts['updated']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OoxmlDTO;
      return this.apiClient.callApi(
        '/Themes/OpenOfficeXml/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the themeThemesOpenofficexmlPutId operation.
     * @callback module:api/ThemesApi~themeThemesOpenofficexmlPutIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Theme: Modify Underlying Xml
     * Directly eidt the underlying xml of a Theme object within an OpenOpenXml (e.g. Excel, Powerpoint) document. This endpoint will validatate the submitted xml against the [Ecma-376 standard](http://www.ecma-international.org/publications/standards/Ecma-376.htm) prior to saving modification.  Invalid xml will rejected by this endpoint and a (hopefully) helpful error message will be returned.  Use this endpoint for client-side automation of modifications ot Theme objects.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/OoxmlDTO} [ooxmlDTO] 
     * @param {module:api/ThemesApi~themeThemesOpenofficexmlPutIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    themeThemesOpenofficexmlPutId(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['ooxmlDTO'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling themeThemesOpenofficexmlPutId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Themes/OpenOfficeXml/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the themeThemesSvgGetIdUseCache operation.
     * @callback module:api/ThemesApi~themeThemesSvgGetIdUseCacheCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Theme: Get Svg file
     * This endpoint is helpful for rending this Theme as an svg or image object that can then be rendered in a story, dashboard or website.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [useCache = false)] Indicates whether API should retrieve content from a cache if aviable (true, default), or force an update (false)
     * @param {module:api/ThemesApi~themeThemesSvgGetIdUseCacheCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    themeThemesSvgGetIdUseCache(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling themeThemesSvgGetIdUseCache");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'use_cache': opts['useCache']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['image/svg+xml', 'application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Themes/Svg/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
