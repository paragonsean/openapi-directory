/**
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ChildObjects from '../model/ChildObjects';
import Document from '../model/Document';
import DocumentCloneDTO from '../model/DocumentCloneDTO';

/**
* Documents service.
* @module api/DocumentsApi
* @version 0.1.0
*/
export default class DocumentsApi {

    /**
    * Constructs a new DocumentsApi. 
    * @alias module:api/DocumentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the documentsChildobjectsGetId operation.
     * @callback module:api/DocumentsApi~documentsChildobjectsGetIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ChildObjects>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DocumentsController: Get Dependent Objects Tree
     * This endpoint is helpful for helping users and bots identify dependent objects to this DocumentsController and retreive their corresponding metadata in order to make modifications to those objects in downstream operations.
     * @param {String} id 
     * @param {module:api/DocumentsApi~documentsChildobjectsGetIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ChildObjects>}
     */
    documentsChildobjectsGetId(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling documentsChildobjectsGetId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = [ChildObjects];
      return this.apiClient.callApi(
        '/Documents/ChildObjects/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the documentsClonePostId operation.
     * @callback module:api/DocumentsApi~documentsClonePostIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Document} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Documents: Clone an existing Ooxml Document to new Parent Story
     * Clone A Document that has already been uploaded to a new Story
     * @param {String} id the Source document Id
     * @param {Object} opts Optional parameters
     * @param {module:model/DocumentCloneDTO} [documentCloneDTO] A DocumentCloneDto object with containing information required for cloning the document
     * @param {module:api/DocumentsApi~documentsClonePostIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Document}
     */
    documentsClonePostId(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['documentCloneDTO'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling documentsClonePostId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = Document;
      return this.apiClient.callApi(
        '/Documents/Clone/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the documentsDeleteId operation.
     * @callback module:api/DocumentsApi~documentsDeleteIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Documents: Delete by Id
     * Permantly delete a document from the Ooxml Automation API. Note that is does not make changes to the related Presalytics APIs.  Please use the delete endpoint in the story API to ensure that stories are not left with orphaned references to the Ooxml Automation API.
     * @param {String} id 
     * @param {module:api/DocumentsApi~documentsDeleteIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    documentsDeleteId(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling documentsDeleteId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Documents/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the documentsDownloadGetIdOrginal operation.
     * @callback module:api/DocumentsApi~documentsDownloadGetIdOrginalCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Documents: Download
     * Download the into a bytestream for client-side processing.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [orginal = false)] 
     * @param {module:api/DocumentsApi~documentsDownloadGetIdOrginalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    documentsDownloadGetIdOrginal(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling documentsDownloadGetIdOrginal");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'orginal': opts['orginal']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/octet-stream'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Documents/Download/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the documentsGetId operation.
     * @callback module:api/DocumentsApi~documentsGetIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Document} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Documents: Get by Id
     * Get by Id: Use this method to retrieve a Documents object by its primary key (id)
     * @param {String} id 
     * @param {module:api/DocumentsApi~documentsGetIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Document}
     */
    documentsGetId(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling documentsGetId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = Document;
      return this.apiClient.callApi(
        '/Documents/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the documentsPost operation.
     * @callback module:api/DocumentsApi~documentsPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Document>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Documents: Upload
     * Upload an OpenOfficeXml document (e.g., .xlsx, .pptx) for processing by the API.
     * @param {File} file The file to upload.  Must be of type .pptx, ppt
     * @param {String} storyId The story_id of the document being uploaded.
     * @param {module:api/DocumentsApi~documentsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Document>}
     */
    documentsPost(file, storyId, callback) {
      let postBody = null;
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling documentsPost");
      }
      // verify the required parameter 'storyId' is set
      if (storyId === undefined || storyId === null) {
        throw new Error("Missing the required parameter 'storyId' when calling documentsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': file,
        'storyId': storyId
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = [Document];
      return this.apiClient.callApi(
        '/Documents', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
