/**
 * OOXML Automation
 * This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ChildObjects from '../model/ChildObjects';
import OoxmlDTO from '../model/OoxmlDTO';
import ProblemDetails from '../model/ProblemDetails';
import TableTableDataDTO from '../model/TableTableDataDTO';
import TableTables from '../model/TableTables';
import TableTablesDetails from '../model/TableTablesDetails';

/**
* Tables service.
* @module api/TablesApi
* @version 0.1.0
*/
export default class TablesApi {

    /**
    * Constructs a new TablesApi. 
    * @alias module:api/TablesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the tablesTablesChildobjectsGetId operation.
     * @callback module:api/TablesApi~tablesTablesChildobjectsGetIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ChildObjects>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Tables: Get Dependent Objects Tree
     * This endpoint is helpful for helping users and bots identify dependent objects to this Table and retreive their corresponding metadata in order to make modifications to those objects in downstream operations.
     * @param {String} id 
     * @param {module:api/TablesApi~tablesTablesChildobjectsGetIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ChildObjects>}
     */
    tablesTablesChildobjectsGetId(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tablesTablesChildobjectsGetId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ChildObjects];
      return this.apiClient.callApi(
        '/Tables/ChildObjects/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tablesTablesDetailsGetId operation.
     * @callback module:api/TablesApi~tablesTablesDetailsGetIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TableTablesDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Tables: Get Details
     * Returns object metadata and information about relative dependent objects 
     * @param {String} id 
     * @param {module:api/TablesApi~tablesTablesDetailsGetIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TableTablesDetails}
     */
    tablesTablesDetailsGetId(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tablesTablesDetailsGetId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TableTablesDetails;
      return this.apiClient.callApi(
        '/Tables/Details/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tablesTablesGetId operation.
     * @callback module:api/TablesApi~tablesTablesGetIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TableTables} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Tables: Get by Id
     * Get by Id: Use this method to retrieve a Tables object by its primary key (id)
     * @param {String} id An Id of the respository DTO elemennt
     * @param {module:api/TablesApi~tablesTablesGetIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TableTables}
     */
    tablesTablesGetId(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tablesTablesGetId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TableTables;
      return this.apiClient.callApi(
        '/Tables/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tablesTablesOpenofficexmlGetIdUpdated operation.
     * @callback module:api/TablesApi~tablesTablesOpenofficexmlGetIdUpdatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OoxmlDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Tables: Get Underlying Xml
     * Return the subset of the xml content from within the latest edited version of the OpenXmlDocument from this Table object.  The returned xml data conforms to the [Ecma-376 standard](http://www.ecma-international.org/publications/standards/Ecma-376.htm).  Use this endpoint a starting point for building client-side extensions that modify Presalytics widgets containing Table objects.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [updated = true)] Indicates whether API should return the orginal uploaded xml (false) or the actively updated version (true, default)
     * @param {module:api/TablesApi~tablesTablesOpenofficexmlGetIdUpdatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OoxmlDTO}
     */
    tablesTablesOpenofficexmlGetIdUpdated(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tablesTablesOpenofficexmlGetIdUpdated");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'updated': opts['updated']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OoxmlDTO;
      return this.apiClient.callApi(
        '/Tables/OpenOfficeXml/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tablesTablesOpenofficexmlPutId operation.
     * @callback module:api/TablesApi~tablesTablesOpenofficexmlPutIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Tables: Modify Underlying Xml
     * Directly eidt the underlying xml of a Table object within an OpenOpenXml (e.g. Excel, Powerpoint) document. This endpoint will validatate the submitted xml against the [Ecma-376 standard](http://www.ecma-international.org/publications/standards/Ecma-376.htm) prior to saving modification.  Invalid xml will rejected by this endpoint and a (hopefully) helpful error message will be returned.  Use this endpoint for client-side automation of modifications ot Table objects.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/OoxmlDTO} [ooxmlDTO] 
     * @param {module:api/TablesApi~tablesTablesOpenofficexmlPutIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    tablesTablesOpenofficexmlPutId(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['ooxmlDTO'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tablesTablesOpenofficexmlPutId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Tables/OpenOfficeXml/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tablesTablesSvgGetIdUseCache operation.
     * @callback module:api/TablesApi~tablesTablesSvgGetIdUseCacheCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Tables: Get Svg file
     * This endpoint is helpful for rending this Table as an svg or image object that can then be rendered in a story, dashboard or website.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [useCache = false)] Indicates whether API should retrieve content from a cache if aviable (true, default), or force an update (false)
     * @param {module:api/TablesApi~tablesTablesSvgGetIdUseCacheCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    tablesTablesSvgGetIdUseCache(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tablesTablesSvgGetIdUseCache");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'use_cache': opts['useCache']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['image/svg+xml', 'application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/Tables/Svg/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tablesTablesTableupdateGetId operation.
     * @callback module:api/TablesApi~tablesTablesTableupdateGetIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TableTableDataDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Table: Get Table Data
     * Gets a TabletDataDTO object, usually used for downstream updates to table content
     * @param {String} id 
     * @param {module:api/TablesApi~tablesTablesTableupdateGetIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TableTableDataDTO}
     */
    tablesTablesTableupdateGetId(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tablesTablesTableupdateGetId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TableTableDataDTO;
      return this.apiClient.callApi(
        '/Tables/TableUpdate/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tablesTablesTableupdatePutId operation.
     * @callback module:api/TablesApi~tablesTablesTableupdatePutIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Tables: Update Table Data
     * Simplifies table update by allowing users to supply strings to table cells  via TableDataDTO
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/TableTableDataDTO} [tableTableDataDTO] 
     * @param {module:api/TablesApi~tablesTablesTableupdatePutIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    tablesTablesTableupdatePutId(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['tableTableDataDTO'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tablesTablesTableupdatePutId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Tables/TableUpdate/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
