/**
 * Peel Tune-in API
 * The machine learning service APIs utilize hashtags from Twitter to find related, trending shows, related Twitter hashtags in real time and to generate direct tune-in URLs.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIHashtagApi_H
#define OAI_OAIHashtagApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIHashtagApi : public QObject {
    Q_OBJECT

public:
    OAIHashtagApi(const int timeOut = 0);
    ~OAIHashtagApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  show_id QString [required]
    * @param[in]  time_window QString [optional]
    */
    virtual void getRelatedHashtags(const QString &show_id, const ::OpenAPI::OptionalParam<QString> &time_window = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  limit QString [optional]
    * @param[in]  time_window QString [optional]
    */
    virtual void getTrendingShows(const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &time_window = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  tweet QString [optional]
    * @param[in]  hashtags QString [optional]
    * @param[in]  show_id QString [optional]
    */
    virtual void getTuneinLinks(const ::OpenAPI::OptionalParam<QString> &tweet = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &hashtags = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &show_id = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getRelatedHashtagsCallback(OAIHttpRequestWorker *worker);
    void getTrendingShowsCallback(OAIHttpRequestWorker *worker);
    void getTuneinLinksCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getRelatedHashtagsSignal();
    void getTrendingShowsSignal();
    void getTuneinLinksSignal();


    void getRelatedHashtagsSignalFull(OAIHttpRequestWorker *worker);
    void getTrendingShowsSignalFull(OAIHttpRequestWorker *worker);
    void getTuneinLinksSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use getRelatedHashtagsSignalError() instead")
    void getRelatedHashtagsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getRelatedHashtagsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTrendingShowsSignalError() instead")
    void getTrendingShowsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getTrendingShowsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTuneinLinksSignalError() instead")
    void getTuneinLinksSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getTuneinLinksSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getRelatedHashtagsSignalErrorFull() instead")
    void getRelatedHashtagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRelatedHashtagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTrendingShowsSignalErrorFull() instead")
    void getTrendingShowsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTrendingShowsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTuneinLinksSignalErrorFull() instead")
    void getTuneinLinksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTuneinLinksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
