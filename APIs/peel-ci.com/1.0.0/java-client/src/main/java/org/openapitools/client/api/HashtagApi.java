/*
 * Peel Tune-in API
 * The machine learning service APIs utilize hashtags from Twitter to find related, trending shows, related Twitter hashtags in real time and to generate direct tune-in URLs.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class HashtagApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public HashtagApi() {
        this(Configuration.getDefaultApiClient());
    }

    public HashtagApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getRelatedHashtags
     * @param showID Unique ID for a show (required)
     * @param timeWindow Time window in seconds (default is 2 hours) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRelatedHashtagsCall(String showID, String timeWindow, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/hashtag/related";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (showID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("showID", showID));
        }

        if (timeWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeWindow", timeWindow));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRelatedHashtagsValidateBeforeCall(String showID, String timeWindow, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'showID' is set
        if (showID == null) {
            throw new ApiException("Missing the required parameter 'showID' when calling getRelatedHashtags(Async)");
        }

        return getRelatedHashtagsCall(showID, timeWindow, _callback);

    }

    /**
     * Gets related hashtags for a show.
     * Returns any official hashtag and any hashtags which were learned within the most recent time window for the show.
     * @param showID Unique ID for a show (required)
     * @param timeWindow Time window in seconds (default is 2 hours) (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public void getRelatedHashtags(String showID, String timeWindow) throws ApiException {
        getRelatedHashtagsWithHttpInfo(showID, timeWindow);
    }

    /**
     * Gets related hashtags for a show.
     * Returns any official hashtag and any hashtags which were learned within the most recent time window for the show.
     * @param showID Unique ID for a show (required)
     * @param timeWindow Time window in seconds (default is 2 hours) (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getRelatedHashtagsWithHttpInfo(String showID, String timeWindow) throws ApiException {
        okhttp3.Call localVarCall = getRelatedHashtagsValidateBeforeCall(showID, timeWindow, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Gets related hashtags for a show. (asynchronously)
     * Returns any official hashtag and any hashtags which were learned within the most recent time window for the show.
     * @param showID Unique ID for a show (required)
     * @param timeWindow Time window in seconds (default is 2 hours) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRelatedHashtagsAsync(String showID, String timeWindow, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRelatedHashtagsValidateBeforeCall(showID, timeWindow, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTrendingShows
     * @param limit Number of trending shows (default is 20) (optional)
     * @param timeWindow Time window in seconds (default is 2 hours) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTrendingShowsCall(String limit, String timeWindow, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/hashtag/trendingShows";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (timeWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeWindow", timeWindow));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTrendingShowsValidateBeforeCall(String limit, String timeWindow, final ApiCallback _callback) throws ApiException {
        return getTrendingShowsCall(limit, timeWindow, _callback);

    }

    /**
     * Gets trending shows.
     * 
     * @param limit Number of trending shows (default is 20) (optional)
     * @param timeWindow Time window in seconds (default is 2 hours) (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public void getTrendingShows(String limit, String timeWindow) throws ApiException {
        getTrendingShowsWithHttpInfo(limit, timeWindow);
    }

    /**
     * Gets trending shows.
     * 
     * @param limit Number of trending shows (default is 20) (optional)
     * @param timeWindow Time window in seconds (default is 2 hours) (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getTrendingShowsWithHttpInfo(String limit, String timeWindow) throws ApiException {
        okhttp3.Call localVarCall = getTrendingShowsValidateBeforeCall(limit, timeWindow, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Gets trending shows. (asynchronously)
     * 
     * @param limit Number of trending shows (default is 20) (optional)
     * @param timeWindow Time window in seconds (default is 2 hours) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTrendingShowsAsync(String limit, String timeWindow, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTrendingShowsValidateBeforeCall(limit, timeWindow, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTuneinLinks
     * @param tweet Text from a social networking conversation (optional)
     * @param hashtags Comma separated list of hashtags and @mentions (optional)
     * @param showID Unique ID for a show (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTuneinLinksCall(String tweet, String hashtags, String showID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/hashtag/tuneinlinks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tweet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tweet", tweet));
        }

        if (hashtags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hashtags", hashtags));
        }

        if (showID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("showID", showID));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTuneinLinksValidateBeforeCall(String tweet, String hashtags, String showID, final ApiCallback _callback) throws ApiException {
        return getTuneinLinksCall(tweet, hashtags, showID, _callback);

    }

    /**
     * Gets tunein URLs (links) from either a tweet, hashtags, @mentions, or show ID.
     * Either use &lt;b&gt;tweet&lt;/b&gt;, &lt;b&gt;hashtags&lt;/b&gt;, or &lt;b&gt;showID&lt;/b&gt; as the parameter. The tunein URLs that match best are returned in order of best match.&lt;br/&gt;&lt;br/&gt;A &lt;b&gt;tweet&lt;/b&gt; in this context is shorthand for text from a social networking conversation, e.g., it could be from Facebook, Twitter, LinkedIn, etc., and be greater than 140 characters.
     * @param tweet Text from a social networking conversation (optional)
     * @param hashtags Comma separated list of hashtags and @mentions (optional)
     * @param showID Unique ID for a show (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public void getTuneinLinks(String tweet, String hashtags, String showID) throws ApiException {
        getTuneinLinksWithHttpInfo(tweet, hashtags, showID);
    }

    /**
     * Gets tunein URLs (links) from either a tweet, hashtags, @mentions, or show ID.
     * Either use &lt;b&gt;tweet&lt;/b&gt;, &lt;b&gt;hashtags&lt;/b&gt;, or &lt;b&gt;showID&lt;/b&gt; as the parameter. The tunein URLs that match best are returned in order of best match.&lt;br/&gt;&lt;br/&gt;A &lt;b&gt;tweet&lt;/b&gt; in this context is shorthand for text from a social networking conversation, e.g., it could be from Facebook, Twitter, LinkedIn, etc., and be greater than 140 characters.
     * @param tweet Text from a social networking conversation (optional)
     * @param hashtags Comma separated list of hashtags and @mentions (optional)
     * @param showID Unique ID for a show (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getTuneinLinksWithHttpInfo(String tweet, String hashtags, String showID) throws ApiException {
        okhttp3.Call localVarCall = getTuneinLinksValidateBeforeCall(tweet, hashtags, showID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Gets tunein URLs (links) from either a tweet, hashtags, @mentions, or show ID. (asynchronously)
     * Either use &lt;b&gt;tweet&lt;/b&gt;, &lt;b&gt;hashtags&lt;/b&gt;, or &lt;b&gt;showID&lt;/b&gt; as the parameter. The tunein URLs that match best are returned in order of best match.&lt;br/&gt;&lt;br/&gt;A &lt;b&gt;tweet&lt;/b&gt; in this context is shorthand for text from a social networking conversation, e.g., it could be from Facebook, Twitter, LinkedIn, etc., and be greater than 140 characters.
     * @param tweet Text from a social networking conversation (optional)
     * @param hashtags Comma separated list of hashtags and @mentions (optional)
     * @param showID Unique ID for a show (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTuneinLinksAsync(String tweet, String hashtags, String showID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTuneinLinksValidateBeforeCall(tweet, hashtags, showID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
