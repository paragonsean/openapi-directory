/**
 * Channel 4 API
 * This is the place to come for all the technical details you need to power your applications with Channel 4's deep programmes data.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer@channel4.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIMetadataresourcesApi_H
#define OAI_OAIMetadataresourcesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAtom.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIMetadataresourcesApi : public QObject {
    Q_OBJECT

public:
    OAIMetadataresourcesApi(const int timeOut = 0);
    ~OAIMetadataresourcesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  brand_web_safe_title QString [required]
    * @param[in]  platform QString [optional]
    */
    virtual void 4oDFeed(const QString &brand_web_safe_title, const ::OpenAPI::OptionalParam<QString> &platform = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  brand_web_safe_title QString [required]
    * @param[in]  platform QString [optional]
    */
    virtual void brandEPGAtomFeed(const QString &brand_web_safe_title, const ::OpenAPI::OptionalParam<QString> &platform = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  brand_web_safe_title QString [required]
    * @param[in]  clip_asset_id QString [required]
    * @param[in]  platform QString [optional]
    */
    virtual void clipDetailAtomFeed(const QString &brand_web_safe_title, const QString &clip_asset_id, const ::OpenAPI::OptionalParam<QString> &platform = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  brand_web_safe_title QString [required]
    * @param[in]  platform QString [optional]
    */
    virtual void clipsLandingFeedBrandSeriesAndEpisodeLevels(const QString &brand_web_safe_title, const ::OpenAPI::OptionalParam<QString> &platform = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  brand_web_safe_title QString [required]
    * @param[in]  series_number QString [required]
    * @param[in]  platform QString [optional]
    */
    virtual void clipsLandingFeedBrandSeriesAndEpisodeLevels_2(const QString &brand_web_safe_title, const QString &series_number, const ::OpenAPI::OptionalParam<QString> &platform = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  brand_web_safe_title QString [required]
    * @param[in]  series_number QString [required]
    * @param[in]  episode_number QString [required]
    * @param[in]  platform QString [optional]
    */
    virtual void clipsLandingFeedBrandSeriesAndEpisodeLevels_3(const QString &brand_web_safe_title, const QString &series_number, const QString &episode_number, const ::OpenAPI::OptionalParam<QString> &platform = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  platform QString [optional]
    */
    virtual void comingSoonFeed(const ::OpenAPI::OptionalParam<QString> &platform = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  category QString [required]
    * @param[in]  platform QString [optional]
    */
    virtual void comingSoonFeed_2(const QString &category, const ::OpenAPI::OptionalParam<QString> &platform = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  brand_web_safe_title QString [required]
    * @param[in]  series_number QString [required]
    * @param[in]  episode_number QString [required]
    * @param[in]  platform QString [optional]
    */
    virtual void episodeGuideFeedEpisodeDetail(const QString &brand_web_safe_title, const QString &series_number, const QString &episode_number, const ::OpenAPI::OptionalParam<QString> &platform = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  brand_web_safe_title QString [required]
    * @param[in]  series_number QString [required]
    * @param[in]  platform QString [optional]
    */
    virtual void episodeGuideFeedSeriesDetail(const QString &brand_web_safe_title, const QString &series_number, const ::OpenAPI::OptionalParam<QString> &platform = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  brand_web_safe_title QString [required]
    * @param[in]  platform QString [optional]
    */
    virtual void episodeGuideFeedSeriesLanding(const QString &brand_web_safe_title, const ::OpenAPI::OptionalParam<QString> &platform = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  brand_web_safe_title QString [required]
    * @param[in]  platform QString [optional]
    */
    virtual void hubFeed(const QString &brand_web_safe_title, const ::OpenAPI::OptionalParam<QString> &platform = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  programme_id QString [required]
    * @param[in]  platform QString [optional]
    */
    virtual void programmeFeed(const QString &programme_id, const ::OpenAPI::OptionalParam<QString> &platform = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void 4oDFeedCallback(OAIHttpRequestWorker *worker);
    void brandEPGAtomFeedCallback(OAIHttpRequestWorker *worker);
    void clipDetailAtomFeedCallback(OAIHttpRequestWorker *worker);
    void clipsLandingFeedBrandSeriesAndEpisodeLevelsCallback(OAIHttpRequestWorker *worker);
    void clipsLandingFeedBrandSeriesAndEpisodeLevels_2Callback(OAIHttpRequestWorker *worker);
    void clipsLandingFeedBrandSeriesAndEpisodeLevels_3Callback(OAIHttpRequestWorker *worker);
    void comingSoonFeedCallback(OAIHttpRequestWorker *worker);
    void comingSoonFeed_2Callback(OAIHttpRequestWorker *worker);
    void episodeGuideFeedEpisodeDetailCallback(OAIHttpRequestWorker *worker);
    void episodeGuideFeedSeriesDetailCallback(OAIHttpRequestWorker *worker);
    void episodeGuideFeedSeriesLandingCallback(OAIHttpRequestWorker *worker);
    void hubFeedCallback(OAIHttpRequestWorker *worker);
    void programmeFeedCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void 4oDFeedSignal(OAIAtom summary);
    void brandEPGAtomFeedSignal(OAIAtom summary);
    void clipDetailAtomFeedSignal(OAIAtom summary);
    void clipsLandingFeedBrandSeriesAndEpisodeLevelsSignal(OAIAtom summary);
    void clipsLandingFeedBrandSeriesAndEpisodeLevels_2Signal(OAIAtom summary);
    void clipsLandingFeedBrandSeriesAndEpisodeLevels_3Signal(OAIAtom summary);
    void comingSoonFeedSignal(OAIAtom summary);
    void comingSoonFeed_2Signal(OAIAtom summary);
    void episodeGuideFeedEpisodeDetailSignal(OAIAtom summary);
    void episodeGuideFeedSeriesDetailSignal(OAIAtom summary);
    void episodeGuideFeedSeriesLandingSignal(OAIAtom summary);
    void hubFeedSignal(OAIAtom summary);
    void programmeFeedSignal(OAIAtom summary);


    void 4oDFeedSignalFull(OAIHttpRequestWorker *worker, OAIAtom summary);
    void brandEPGAtomFeedSignalFull(OAIHttpRequestWorker *worker, OAIAtom summary);
    void clipDetailAtomFeedSignalFull(OAIHttpRequestWorker *worker, OAIAtom summary);
    void clipsLandingFeedBrandSeriesAndEpisodeLevelsSignalFull(OAIHttpRequestWorker *worker, OAIAtom summary);
    void clipsLandingFeedBrandSeriesAndEpisodeLevels_2SignalFull(OAIHttpRequestWorker *worker, OAIAtom summary);
    void clipsLandingFeedBrandSeriesAndEpisodeLevels_3SignalFull(OAIHttpRequestWorker *worker, OAIAtom summary);
    void comingSoonFeedSignalFull(OAIHttpRequestWorker *worker, OAIAtom summary);
    void comingSoonFeed_2SignalFull(OAIHttpRequestWorker *worker, OAIAtom summary);
    void episodeGuideFeedEpisodeDetailSignalFull(OAIHttpRequestWorker *worker, OAIAtom summary);
    void episodeGuideFeedSeriesDetailSignalFull(OAIHttpRequestWorker *worker, OAIAtom summary);
    void episodeGuideFeedSeriesLandingSignalFull(OAIHttpRequestWorker *worker, OAIAtom summary);
    void hubFeedSignalFull(OAIHttpRequestWorker *worker, OAIAtom summary);
    void programmeFeedSignalFull(OAIHttpRequestWorker *worker, OAIAtom summary);

    Q_DECL_DEPRECATED_X("Use 4oDFeedSignalError() instead")
    void 4oDFeedSignalE(OAIAtom summary, QNetworkReply::NetworkError error_type, QString error_str);
    void 4oDFeedSignalError(OAIAtom summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use brandEPGAtomFeedSignalError() instead")
    void brandEPGAtomFeedSignalE(OAIAtom summary, QNetworkReply::NetworkError error_type, QString error_str);
    void brandEPGAtomFeedSignalError(OAIAtom summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clipDetailAtomFeedSignalError() instead")
    void clipDetailAtomFeedSignalE(OAIAtom summary, QNetworkReply::NetworkError error_type, QString error_str);
    void clipDetailAtomFeedSignalError(OAIAtom summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clipsLandingFeedBrandSeriesAndEpisodeLevelsSignalError() instead")
    void clipsLandingFeedBrandSeriesAndEpisodeLevelsSignalE(OAIAtom summary, QNetworkReply::NetworkError error_type, QString error_str);
    void clipsLandingFeedBrandSeriesAndEpisodeLevelsSignalError(OAIAtom summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clipsLandingFeedBrandSeriesAndEpisodeLevels_2SignalError() instead")
    void clipsLandingFeedBrandSeriesAndEpisodeLevels_2SignalE(OAIAtom summary, QNetworkReply::NetworkError error_type, QString error_str);
    void clipsLandingFeedBrandSeriesAndEpisodeLevels_2SignalError(OAIAtom summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clipsLandingFeedBrandSeriesAndEpisodeLevels_3SignalError() instead")
    void clipsLandingFeedBrandSeriesAndEpisodeLevels_3SignalE(OAIAtom summary, QNetworkReply::NetworkError error_type, QString error_str);
    void clipsLandingFeedBrandSeriesAndEpisodeLevels_3SignalError(OAIAtom summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use comingSoonFeedSignalError() instead")
    void comingSoonFeedSignalE(OAIAtom summary, QNetworkReply::NetworkError error_type, QString error_str);
    void comingSoonFeedSignalError(OAIAtom summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use comingSoonFeed_2SignalError() instead")
    void comingSoonFeed_2SignalE(OAIAtom summary, QNetworkReply::NetworkError error_type, QString error_str);
    void comingSoonFeed_2SignalError(OAIAtom summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use episodeGuideFeedEpisodeDetailSignalError() instead")
    void episodeGuideFeedEpisodeDetailSignalE(OAIAtom summary, QNetworkReply::NetworkError error_type, QString error_str);
    void episodeGuideFeedEpisodeDetailSignalError(OAIAtom summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use episodeGuideFeedSeriesDetailSignalError() instead")
    void episodeGuideFeedSeriesDetailSignalE(OAIAtom summary, QNetworkReply::NetworkError error_type, QString error_str);
    void episodeGuideFeedSeriesDetailSignalError(OAIAtom summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use episodeGuideFeedSeriesLandingSignalError() instead")
    void episodeGuideFeedSeriesLandingSignalE(OAIAtom summary, QNetworkReply::NetworkError error_type, QString error_str);
    void episodeGuideFeedSeriesLandingSignalError(OAIAtom summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hubFeedSignalError() instead")
    void hubFeedSignalE(OAIAtom summary, QNetworkReply::NetworkError error_type, QString error_str);
    void hubFeedSignalError(OAIAtom summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use programmeFeedSignalError() instead")
    void programmeFeedSignalE(OAIAtom summary, QNetworkReply::NetworkError error_type, QString error_str);
    void programmeFeedSignalError(OAIAtom summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use 4oDFeedSignalErrorFull() instead")
    void 4oDFeedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void 4oDFeedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use brandEPGAtomFeedSignalErrorFull() instead")
    void brandEPGAtomFeedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void brandEPGAtomFeedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clipDetailAtomFeedSignalErrorFull() instead")
    void clipDetailAtomFeedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clipDetailAtomFeedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clipsLandingFeedBrandSeriesAndEpisodeLevelsSignalErrorFull() instead")
    void clipsLandingFeedBrandSeriesAndEpisodeLevelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clipsLandingFeedBrandSeriesAndEpisodeLevelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clipsLandingFeedBrandSeriesAndEpisodeLevels_2SignalErrorFull() instead")
    void clipsLandingFeedBrandSeriesAndEpisodeLevels_2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clipsLandingFeedBrandSeriesAndEpisodeLevels_2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clipsLandingFeedBrandSeriesAndEpisodeLevels_3SignalErrorFull() instead")
    void clipsLandingFeedBrandSeriesAndEpisodeLevels_3SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clipsLandingFeedBrandSeriesAndEpisodeLevels_3SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use comingSoonFeedSignalErrorFull() instead")
    void comingSoonFeedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void comingSoonFeedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use comingSoonFeed_2SignalErrorFull() instead")
    void comingSoonFeed_2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void comingSoonFeed_2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use episodeGuideFeedEpisodeDetailSignalErrorFull() instead")
    void episodeGuideFeedEpisodeDetailSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void episodeGuideFeedEpisodeDetailSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use episodeGuideFeedSeriesDetailSignalErrorFull() instead")
    void episodeGuideFeedSeriesDetailSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void episodeGuideFeedSeriesDetailSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use episodeGuideFeedSeriesLandingSignalErrorFull() instead")
    void episodeGuideFeedSeriesLandingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void episodeGuideFeedSeriesLandingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hubFeedSignalErrorFull() instead")
    void hubFeedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hubFeedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use programmeFeedSignalErrorFull() instead")
    void programmeFeedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void programmeFeedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
