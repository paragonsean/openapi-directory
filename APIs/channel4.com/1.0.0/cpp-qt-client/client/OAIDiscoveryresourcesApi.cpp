/**
 * Channel 4 API
 * This is the place to come for all the technical details you need to power your applications with Channel 4's deep programmes data.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer@channel4.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDiscoveryresourcesApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIDiscoveryresourcesApi::OAIDiscoveryresourcesApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIDiscoveryresourcesApi::~OAIDiscoveryresourcesApi() {
}

void OAIDiscoveryresourcesApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("http://channel4.com/pmlsd"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://channel4.com/pmlsd"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("4oDBrowseByDateFeed", defaultConf);
    _serverIndices.insert("4oDBrowseByDateFeed", 0);
    _serverConfigs.insert("4oDClipsCatchUpFeed", defaultConf);
    _serverIndices.insert("4oDClipsCatchUpFeed", 0);
    _serverConfigs.insert("4oDMostPopularEpisodesFeed", defaultConf);
    _serverIndices.insert("4oDMostPopularEpisodesFeed", 0);
    _serverConfigs.insert("4oDPopularAllBrandsFeed", defaultConf);
    _serverIndices.insert("4oDPopularAllBrandsFeed", 0);
    _serverConfigs.insert("4oDPopularAllBrandsFeed_2", defaultConf);
    _serverIndices.insert("4oDPopularAllBrandsFeed_2", 0);
    _serverConfigs.insert("4oDProgrammesByTXDate", defaultConf);
    _serverIndices.insert("4oDProgrammesByTXDate", 0);
    _serverConfigs.insert("4oDProgrammesByTXDate_2", defaultConf);
    _serverIndices.insert("4oDProgrammesByTXDate_2", 0);
    _serverConfigs.insert("4oDProgrammesByTXDate_3", defaultConf);
    _serverIndices.insert("4oDProgrammesByTXDate_3", 0);
    _serverConfigs.insert("4oDProgrammesByTXDate_4", defaultConf);
    _serverIndices.insert("4oDProgrammesByTXDate_4", 0);
    _serverConfigs.insert("4oDProgrammesByTXDate_5", defaultConf);
    _serverIndices.insert("4oDProgrammesByTXDate_5", 0);
    _serverConfigs.insert("4oDProgrammesByTXDate_6", defaultConf);
    _serverIndices.insert("4oDProgrammesByTXDate_6", 0);
    _serverConfigs.insert("4oDProgrammesByTitle", defaultConf);
    _serverIndices.insert("4oDProgrammesByTitle", 0);
    _serverConfigs.insert("4oDProgrammesByTitle_2", defaultConf);
    _serverIndices.insert("4oDProgrammesByTitle_2", 0);
    _serverConfigs.insert("4oDProgrammesByTitle_3", defaultConf);
    _serverIndices.insert("4oDProgrammesByTitle_3", 0);
    _serverConfigs.insert("4oDProgrammesByTitle_4", defaultConf);
    _serverIndices.insert("4oDProgrammesByTitle_4", 0);
    _serverConfigs.insert("4oDProgrammesByTitle_5", defaultConf);
    _serverIndices.insert("4oDProgrammesByTitle_5", 0);
    _serverConfigs.insert("4oDProgrammesByTitle_6", defaultConf);
    _serverIndices.insert("4oDProgrammesByTitle_6", 0);
    _serverConfigs.insert("4oDTitleAllBrandsFeed", defaultConf);
    _serverIndices.insert("4oDTitleAllBrandsFeed", 0);
    _serverConfigs.insert("4oDTitleAllBrandsFeed_2", defaultConf);
    _serverIndices.insert("4oDTitleAllBrandsFeed_2", 0);
    _serverConfigs.insert("aToZLandingFeed", defaultConf);
    _serverIndices.insert("aToZLandingFeed", 0);
    _serverConfigs.insert("aToZLetterFeed", defaultConf);
    _serverIndices.insert("aToZLetterFeed", 0);
    _serverConfigs.insert("aToZLetterFeed_2", defaultConf);
    _serverIndices.insert("aToZLetterFeed_2", 0);
    _serverConfigs.insert("allProgrammesByTXDate", defaultConf);
    _serverIndices.insert("allProgrammesByTXDate", 0);
    _serverConfigs.insert("allProgrammesByTXDate_2", defaultConf);
    _serverIndices.insert("allProgrammesByTXDate_2", 0);
    _serverConfigs.insert("allProgrammesByTXDate_3", defaultConf);
    _serverIndices.insert("allProgrammesByTXDate_3", 0);
    _serverConfigs.insert("allProgrammesByTXDate_4", defaultConf);
    _serverIndices.insert("allProgrammesByTXDate_4", 0);
    _serverConfigs.insert("allProgrammesByTXDate_5", defaultConf);
    _serverIndices.insert("allProgrammesByTXDate_5", 0);
    _serverConfigs.insert("allProgrammesByTXDate_6", defaultConf);
    _serverIndices.insert("allProgrammesByTXDate_6", 0);
    _serverConfigs.insert("allProgrammesByTitle", defaultConf);
    _serverIndices.insert("allProgrammesByTitle", 0);
    _serverConfigs.insert("allProgrammesByTitle_2", defaultConf);
    _serverIndices.insert("allProgrammesByTitle_2", 0);
    _serverConfigs.insert("allProgrammesByTitle_3", defaultConf);
    _serverIndices.insert("allProgrammesByTitle_3", 0);
    _serverConfigs.insert("allProgrammesByTitle_4", defaultConf);
    _serverIndices.insert("allProgrammesByTitle_4", 0);
    _serverConfigs.insert("allProgrammesByTitle_5", defaultConf);
    _serverIndices.insert("allProgrammesByTitle_5", 0);
    _serverConfigs.insert("allProgrammesByTitle_6", defaultConf);
    _serverIndices.insert("allProgrammesByTitle_6", 0);
    _serverConfigs.insert("categoriesLandingFeed", defaultConf);
    _serverIndices.insert("categoriesLandingFeed", 0);
    _serverConfigs.insert("collectionsFeed", defaultConf);
    _serverIndices.insert("collectionsFeed", 0);
    _serverConfigs.insert("collectionsFeed_2", defaultConf);
    _serverIndices.insert("collectionsFeed_2", 0);
    _serverConfigs.insert("flattenedCollectionFeed", defaultConf);
    _serverIndices.insert("flattenedCollectionFeed", 0);
    _serverConfigs.insert("flattenedCollectionFeed_2", defaultConf);
    _serverIndices.insert("flattenedCollectionFeed_2", 0);
    _serverConfigs.insert("mostPopularBrandsFeed", defaultConf);
    _serverIndices.insert("mostPopularBrandsFeed", 0);
    _serverConfigs.insert("mostPopularBrandsFeed_2", defaultConf);
    _serverIndices.insert("mostPopularBrandsFeed_2", 0);
    _serverConfigs.insert("mostPopularBrandsFeed_3", defaultConf);
    _serverIndices.insert("mostPopularBrandsFeed_3", 0);
    _serverConfigs.insert("mostPopularBrandsFeed_4", defaultConf);
    _serverIndices.insert("mostPopularBrandsFeed_4", 0);
    _serverConfigs.insert("mostPopularBrandsFeed_5", defaultConf);
    _serverIndices.insert("mostPopularBrandsFeed_5", 0);
    _serverConfigs.insert("mostPopularBrandsFeed_6", defaultConf);
    _serverIndices.insert("mostPopularBrandsFeed_6", 0);
    _serverConfigs.insert("mostPopularBrandsFeed_7", defaultConf);
    _serverIndices.insert("mostPopularBrandsFeed_7", 0);
    _serverConfigs.insert("mostPopularBrandsFeed_8", defaultConf);
    _serverIndices.insert("mostPopularBrandsFeed_8", 0);
    _serverConfigs.insert("popularBrandsFeed", defaultConf);
    _serverIndices.insert("popularBrandsFeed", 0);
    _serverConfigs.insert("popularBrandsFeed_2", defaultConf);
    _serverIndices.insert("popularBrandsFeed_2", 0);
    _serverConfigs.insert("searchFeed", defaultConf);
    _serverIndices.insert("searchFeed", 0);
    _serverConfigs.insert("searchFeed_2", defaultConf);
    _serverIndices.insert("searchFeed_2", 0);
    _serverConfigs.insert("searchFeed_3", defaultConf);
    _serverIndices.insert("searchFeed_3", 0);
    _serverConfigs.insert("searchFeed_4", defaultConf);
    _serverIndices.insert("searchFeed_4", 0);
    _serverConfigs.insert("tVListingsFeed", defaultConf);
    _serverIndices.insert("tVListingsFeed", 0);
    _serverConfigs.insert("tVListingsFeed_2", defaultConf);
    _serverIndices.insert("tVListingsFeed_2", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIDiscoveryresourcesApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIDiscoveryresourcesApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIDiscoveryresourcesApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIDiscoveryresourcesApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIDiscoveryresourcesApi::setUsername(const QString &username) {
    _username = username;
}

void OAIDiscoveryresourcesApi::setPassword(const QString &password) {
    _password = password;
}


void OAIDiscoveryresourcesApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIDiscoveryresourcesApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIDiscoveryresourcesApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIDiscoveryresourcesApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIDiscoveryresourcesApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIDiscoveryresourcesApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIDiscoveryresourcesApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIDiscoveryresourcesApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIDiscoveryresourcesApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIDiscoveryresourcesApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIDiscoveryresourcesApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIDiscoveryresourcesApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIDiscoveryresourcesApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIDiscoveryresourcesApi::4oDBrowseByDateFeed(const QString &yyyy, const QString &mm, const QString &dd, const ::OpenAPI::OptionalParam<QString> &platform) {
    QString fullPath = QString(_serverConfigs["4oDBrowseByDateFeed"][_serverIndices.value("4oDBrowseByDateFeed")].URL()+"/4od/episode-list/date/{yyyy}/{mm}/{dd}.atom");
    
    if (_apiKeys.contains("apikey")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apikey=").append(_apiKeys.find("apikey").value());
    }
    
    
    {
        QString yyyyPathParam("{");
        yyyyPathParam.append("yyyy").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "yyyy", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"yyyy"+pathSuffix : pathPrefix;
        fullPath.replace(yyyyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(yyyy)));
    }
    
    {
        QString mmPathParam("{");
        mmPathParam.append("mm").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "mm", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"mm"+pathSuffix : pathPrefix;
        fullPath.replace(mmPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(mm)));
    }
    
    {
        QString ddPathParam("{");
        ddPathParam.append("dd").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "dd", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"dd"+pathSuffix : pathPrefix;
        fullPath.replace(ddPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(dd)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (platform.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "platform", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("platform")).append(querySuffix).append(QUrl::toPercentEncoding(platform.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDiscoveryresourcesApi::4oDBrowseByDateFeedCallback);
    connect(this, &OAIDiscoveryresourcesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDiscoveryresourcesApi::4oDBrowseByDateFeedCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAtom output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT 4oDBrowseByDateFeedSignal(output);
        Q_EMIT 4oDBrowseByDateFeedSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT 4oDBrowseByDateFeedSignalE(output, error_type, error_str);
        Q_EMIT 4oDBrowseByDateFeedSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT 4oDBrowseByDateFeedSignalError(output, error_type, error_str);
        Q_EMIT 4oDBrowseByDateFeedSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDiscoveryresourcesApi::4oDClipsCatchUpFeed(const ::OpenAPI::OptionalParam<QString> &platform) {
    QString fullPath = QString(_serverConfigs["4oDClipsCatchUpFeed"][_serverIndices.value("4oDClipsCatchUpFeed")].URL()+"/4od/recently-added/videos.atom");
    
    if (_apiKeys.contains("apikey")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apikey=").append(_apiKeys.find("apikey").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (platform.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "platform", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("platform")).append(querySuffix).append(QUrl::toPercentEncoding(platform.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDiscoveryresourcesApi::4oDClipsCatchUpFeedCallback);
    connect(this, &OAIDiscoveryresourcesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDiscoveryresourcesApi::4oDClipsCatchUpFeedCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAtom output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT 4oDClipsCatchUpFeedSignal(output);
        Q_EMIT 4oDClipsCatchUpFeedSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT 4oDClipsCatchUpFeedSignalE(output, error_type, error_str);
        Q_EMIT 4oDClipsCatchUpFeedSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT 4oDClipsCatchUpFeedSignalError(output, error_type, error_str);
        Q_EMIT 4oDClipsCatchUpFeedSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDiscoveryresourcesApi::4oDMostPopularEpisodesFeed(const ::OpenAPI::OptionalParam<QString> &platform) {
    QString fullPath = QString(_serverConfigs["4oDMostPopularEpisodesFeed"][_serverIndices.value("4oDMostPopularEpisodesFeed")].URL()+"/4od/episode-list/popular.atom");
    
    if (_apiKeys.contains("apikey")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apikey=").append(_apiKeys.find("apikey").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (platform.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "platform", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("platform")).append(querySuffix).append(QUrl::toPercentEncoding(platform.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDiscoveryresourcesApi::4oDMostPopularEpisodesFeedCallback);
    connect(this, &OAIDiscoveryresourcesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDiscoveryresourcesApi::4oDMostPopularEpisodesFeedCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAtom output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT 4oDMostPopularEpisodesFeedSignal(output);
        Q_EMIT 4oDMostPopularEpisodesFeedSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT 4oDMostPopularEpisodesFeedSignalE(output, error_type, error_str);
        Q_EMIT 4oDMostPopularEpisodesFeedSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT 4oDMostPopularEpisodesFeedSignalError(output, error_type, error_str);
        Q_EMIT 4oDMostPopularEpisodesFeedSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDiscoveryresourcesApi::4oDPopularAllBrandsFeed(const ::OpenAPI::OptionalParam<QString> &platform) {
    QString fullPath = QString(_serverConfigs["4oDPopularAllBrandsFeed"][_serverIndices.value("4oDPopularAllBrandsFeed")].URL()+"/brands/4od/popular.atom");
    
    if (_apiKeys.contains("apikey")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apikey=").append(_apiKeys.find("apikey").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (platform.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "platform", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("platform")).append(querySuffix).append(QUrl::toPercentEncoding(platform.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDiscoveryresourcesApi::4oDPopularAllBrandsFeedCallback);
    connect(this, &OAIDiscoveryresourcesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDiscoveryresourcesApi::4oDPopularAllBrandsFeedCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAtom output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT 4oDPopularAllBrandsFeedSignal(output);
        Q_EMIT 4oDPopularAllBrandsFeedSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT 4oDPopularAllBrandsFeedSignalE(output, error_type, error_str);
        Q_EMIT 4oDPopularAllBrandsFeedSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT 4oDPopularAllBrandsFeedSignalError(output, error_type, error_str);
        Q_EMIT 4oDPopularAllBrandsFeedSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDiscoveryresourcesApi::4oDPopularAllBrandsFeed_2(const qint32 &pageno, const ::OpenAPI::OptionalParam<QString> &platform) {
    QString fullPath = QString(_serverConfigs["4oDPopularAllBrandsFeed_2"][_serverIndices.value("4oDPopularAllBrandsFeed_2")].URL()+"/brands/4od/popular/page-{pageno}.atom");
    
    if (_apiKeys.contains("apikey")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apikey=").append(_apiKeys.find("apikey").value());
    }
    
    
    {
        QString pagenoPathParam("{");
        pagenoPathParam.append("pageno").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "pageno", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"pageno"+pathSuffix : pathPrefix;
        fullPath.replace(pagenoPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(pageno)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (platform.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "platform", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("platform")).append(querySuffix).append(QUrl::toPercentEncoding(platform.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDiscoveryresourcesApi::4oDPopularAllBrandsFeed_2Callback);
    connect(this, &OAIDiscoveryresourcesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDiscoveryresourcesApi::4oDPopularAllBrandsFeed_2Callback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAtom output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT 4oDPopularAllBrandsFeed_2Signal(output);
        Q_EMIT 4oDPopularAllBrandsFeed_2SignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT 4oDPopularAllBrandsFeed_2SignalE(output, error_type, error_str);
        Q_EMIT 4oDPopularAllBrandsFeed_2SignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT 4oDPopularAllBrandsFeed_2SignalError(output, error_type, error_str);
        Q_EMIT 4oDPopularAllBrandsFeed_2SignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDiscoveryresourcesApi::4oDProgrammesByTXDate(const QString &category, const ::OpenAPI::OptionalParam<QString> &platform) {
    QString fullPath = QString(_serverConfigs["4oDProgrammesByTXDate"][_serverIndices.value("4oDProgrammesByTXDate")].URL()+"/categories/{category}/4od.atom");
    
    if (_apiKeys.contains("apikey")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apikey=").append(_apiKeys.find("apikey").value());
    }
    
    
    {
        QString categoryPathParam("{");
        categoryPathParam.append("category").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "category", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"category"+pathSuffix : pathPrefix;
        fullPath.replace(categoryPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(category)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (platform.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "platform", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("platform")).append(querySuffix).append(QUrl::toPercentEncoding(platform.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDiscoveryresourcesApi::4oDProgrammesByTXDateCallback);
    connect(this, &OAIDiscoveryresourcesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDiscoveryresourcesApi::4oDProgrammesByTXDateCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAtom output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT 4oDProgrammesByTXDateSignal(output);
        Q_EMIT 4oDProgrammesByTXDateSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT 4oDProgrammesByTXDateSignalE(output, error_type, error_str);
        Q_EMIT 4oDProgrammesByTXDateSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT 4oDProgrammesByTXDateSignalError(output, error_type, error_str);
        Q_EMIT 4oDProgrammesByTXDateSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDiscoveryresourcesApi::4oDProgrammesByTXDate_2(const QString &category, const QString &channel, const ::OpenAPI::OptionalParam<QString> &platform) {
    QString fullPath = QString(_serverConfigs["4oDProgrammesByTXDate_2"][_serverIndices.value("4oDProgrammesByTXDate_2")].URL()+"/categories/{category}/channel/{channel}/4od.atom");
    
    if (_apiKeys.contains("apikey")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apikey=").append(_apiKeys.find("apikey").value());
    }
    
    
    {
        QString categoryPathParam("{");
        categoryPathParam.append("category").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "category", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"category"+pathSuffix : pathPrefix;
        fullPath.replace(categoryPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(category)));
    }
    
    {
        QString channelPathParam("{");
        channelPathParam.append("channel").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "channel", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"channel"+pathSuffix : pathPrefix;
        fullPath.replace(channelPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(channel)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (platform.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "platform", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("platform")).append(querySuffix).append(QUrl::toPercentEncoding(platform.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDiscoveryresourcesApi::4oDProgrammesByTXDate_2Callback);
    connect(this, &OAIDiscoveryresourcesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDiscoveryresourcesApi::4oDProgrammesByTXDate_2Callback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAtom output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT 4oDProgrammesByTXDate_2Signal(output);
        Q_EMIT 4oDProgrammesByTXDate_2SignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT 4oDProgrammesByTXDate_2SignalE(output, error_type, error_str);
        Q_EMIT 4oDProgrammesByTXDate_2SignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT 4oDProgrammesByTXDate_2SignalError(output, error_type, error_str);
        Q_EMIT 4oDProgrammesByTXDate_2SignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDiscoveryresourcesApi::4oDProgrammesByTXDate_3(const QString &category, const ::OpenAPI::OptionalParam<QString> &platform) {
    QString fullPath = QString(_serverConfigs["4oDProgrammesByTXDate_3"][_serverIndices.value("4oDProgrammesByTXDate_3")].URL()+"/categories/{category}/derived/ad/4od.atom");
    
    if (_apiKeys.contains("apikey")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apikey=").append(_apiKeys.find("apikey").value());
    }
    
    
    {
        QString categoryPathParam("{");
        categoryPathParam.append("category").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "category", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"category"+pathSuffix : pathPrefix;
        fullPath.replace(categoryPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(category)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (platform.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "platform", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("platform")).append(querySuffix).append(QUrl::toPercentEncoding(platform.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDiscoveryresourcesApi::4oDProgrammesByTXDate_3Callback);
    connect(this, &OAIDiscoveryresourcesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDiscoveryresourcesApi::4oDProgrammesByTXDate_3Callback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAtom output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT 4oDProgrammesByTXDate_3Signal(output);
        Q_EMIT 4oDProgrammesByTXDate_3SignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT 4oDProgrammesByTXDate_3SignalE(output, error_type, error_str);
        Q_EMIT 4oDProgrammesByTXDate_3SignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT 4oDProgrammesByTXDate_3SignalError(output, error_type, error_str);
        Q_EMIT 4oDProgrammesByTXDate_3SignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDiscoveryresourcesApi::4oDProgrammesByTXDate_4(const QString &category, const qint32 &pageno, const ::OpenAPI::OptionalParam<QString> &platform) {
    QString fullPath = QString(_serverConfigs["4oDProgrammesByTXDate_4"][_serverIndices.value("4oDProgrammesByTXDate_4")].URL()+"/categories/{category}/4od/page-{pageno}.atom");
    
    if (_apiKeys.contains("apikey")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apikey=").append(_apiKeys.find("apikey").value());
    }
    
    
    {
        QString categoryPathParam("{");
        categoryPathParam.append("category").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "category", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"category"+pathSuffix : pathPrefix;
        fullPath.replace(categoryPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(category)));
    }
    
    {
        QString pagenoPathParam("{");
        pagenoPathParam.append("pageno").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "pageno", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"pageno"+pathSuffix : pathPrefix;
        fullPath.replace(pagenoPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(pageno)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (platform.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "platform", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("platform")).append(querySuffix).append(QUrl::toPercentEncoding(platform.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDiscoveryresourcesApi::4oDProgrammesByTXDate_4Callback);
    connect(this, &OAIDiscoveryresourcesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDiscoveryresourcesApi::4oDProgrammesByTXDate_4Callback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAtom output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT 4oDProgrammesByTXDate_4Signal(output);
        Q_EMIT 4oDProgrammesByTXDate_4SignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT 4oDProgrammesByTXDate_4SignalE(output, error_type, error_str);
        Q_EMIT 4oDProgrammesByTXDate_4SignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT 4oDProgrammesByTXDate_4SignalError(output, error_type, error_str);
        Q_EMIT 4oDProgrammesByTXDate_4SignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDiscoveryresourcesApi::4oDProgrammesByTXDate_5(const QString &category, const QString &channel, const qint32 &pageno, const ::OpenAPI::OptionalParam<QString> &platform) {
    QString fullPath = QString(_serverConfigs["4oDProgrammesByTXDate_5"][_serverIndices.value("4oDProgrammesByTXDate_5")].URL()+"/categories/{category}/channel/{channel}/4od/page-{pageno}.atom");
    
    if (_apiKeys.contains("apikey")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apikey=").append(_apiKeys.find("apikey").value());
    }
    
    
    {
        QString categoryPathParam("{");
        categoryPathParam.append("category").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "category", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"category"+pathSuffix : pathPrefix;
        fullPath.replace(categoryPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(category)));
    }
    
    {
        QString channelPathParam("{");
        channelPathParam.append("channel").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "channel", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"channel"+pathSuffix : pathPrefix;
        fullPath.replace(channelPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(channel)));
    }
    
    {
        QString pagenoPathParam("{");
        pagenoPathParam.append("pageno").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "pageno", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"pageno"+pathSuffix : pathPrefix;
        fullPath.replace(pagenoPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(pageno)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (platform.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "platform", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("platform")).append(querySuffix).append(QUrl::toPercentEncoding(platform.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDiscoveryresourcesApi::4oDProgrammesByTXDate_5Callback);
    connect(this, &OAIDiscoveryresourcesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDiscoveryresourcesApi::4oDProgrammesByTXDate_5Callback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAtom output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT 4oDProgrammesByTXDate_5Signal(output);
        Q_EMIT 4oDProgrammesByTXDate_5SignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT 4oDProgrammesByTXDate_5SignalE(output, error_type, error_str);
        Q_EMIT 4oDProgrammesByTXDate_5SignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT 4oDProgrammesByTXDate_5SignalError(output, error_type, error_str);
        Q_EMIT 4oDProgrammesByTXDate_5SignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDiscoveryresourcesApi::4oDProgrammesByTXDate_6(const QString &category, const qint32 &pageno, const ::OpenAPI::OptionalParam<QString> &platform) {
    QString fullPath = QString(_serverConfigs["4oDProgrammesByTXDate_6"][_serverIndices.value("4oDProgrammesByTXDate_6")].URL()+"/categories/{category}/derived/ad/4od/page-{pageno}.atom");
    
    if (_apiKeys.contains("apikey")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apikey=").append(_apiKeys.find("apikey").value());
    }
    
    
    {
        QString categoryPathParam("{");
        categoryPathParam.append("category").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "category", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"category"+pathSuffix : pathPrefix;
        fullPath.replace(categoryPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(category)));
    }
    
    {
        QString pagenoPathParam("{");
        pagenoPathParam.append("pageno").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "pageno", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"pageno"+pathSuffix : pathPrefix;
        fullPath.replace(pagenoPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(pageno)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (platform.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "platform", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("platform")).append(querySuffix).append(QUrl::toPercentEncoding(platform.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDiscoveryresourcesApi::4oDProgrammesByTXDate_6Callback);
    connect(this, &OAIDiscoveryresourcesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDiscoveryresourcesApi::4oDProgrammesByTXDate_6Callback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAtom output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT 4oDProgrammesByTXDate_6Signal(output);
        Q_EMIT 4oDProgrammesByTXDate_6SignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT 4oDProgrammesByTXDate_6SignalE(output, error_type, error_str);
        Q_EMIT 4oDProgrammesByTXDate_6SignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT 4oDProgrammesByTXDate_6SignalError(output, error_type, error_str);
        Q_EMIT 4oDProgrammesByTXDate_6SignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDiscoveryresourcesApi::4oDProgrammesByTitle(const QString &category, const ::OpenAPI::OptionalParam<QString> &platform) {
    QString fullPath = QString(_serverConfigs["4oDProgrammesByTitle"][_serverIndices.value("4oDProgrammesByTitle")].URL()+"/categories/{category}/4od/title.atom");
    
    if (_apiKeys.contains("apikey")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apikey=").append(_apiKeys.find("apikey").value());
    }
    
    
    {
        QString categoryPathParam("{");
        categoryPathParam.append("category").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "category", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"category"+pathSuffix : pathPrefix;
        fullPath.replace(categoryPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(category)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (platform.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "platform", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("platform")).append(querySuffix).append(QUrl::toPercentEncoding(platform.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDiscoveryresourcesApi::4oDProgrammesByTitleCallback);
    connect(this, &OAIDiscoveryresourcesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDiscoveryresourcesApi::4oDProgrammesByTitleCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAtom output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT 4oDProgrammesByTitleSignal(output);
        Q_EMIT 4oDProgrammesByTitleSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT 4oDProgrammesByTitleSignalE(output, error_type, error_str);
        Q_EMIT 4oDProgrammesByTitleSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT 4oDProgrammesByTitleSignalError(output, error_type, error_str);
        Q_EMIT 4oDProgrammesByTitleSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDiscoveryresourcesApi::4oDProgrammesByTitle_2(const QString &category, const QString &channel, const ::OpenAPI::OptionalParam<QString> &platform) {
    QString fullPath = QString(_serverConfigs["4oDProgrammesByTitle_2"][_serverIndices.value("4oDProgrammesByTitle_2")].URL()+"/categories/{category}/channel/{channel}/4od/title.atom");
    
    if (_apiKeys.contains("apikey")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apikey=").append(_apiKeys.find("apikey").value());
    }
    
    
    {
        QString categoryPathParam("{");
        categoryPathParam.append("category").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "category", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"category"+pathSuffix : pathPrefix;
        fullPath.replace(categoryPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(category)));
    }
    
    {
        QString channelPathParam("{");
        channelPathParam.append("channel").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "channel", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"channel"+pathSuffix : pathPrefix;
        fullPath.replace(channelPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(channel)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (platform.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "platform", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("platform")).append(querySuffix).append(QUrl::toPercentEncoding(platform.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDiscoveryresourcesApi::4oDProgrammesByTitle_2Callback);
    connect(this, &OAIDiscoveryresourcesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDiscoveryresourcesApi::4oDProgrammesByTitle_2Callback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAtom output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT 4oDProgrammesByTitle_2Signal(output);
        Q_EMIT 4oDProgrammesByTitle_2SignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT 4oDProgrammesByTitle_2SignalE(output, error_type, error_str);
        Q_EMIT 4oDProgrammesByTitle_2SignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT 4oDProgrammesByTitle_2SignalError(output, error_type, error_str);
        Q_EMIT 4oDProgrammesByTitle_2SignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDiscoveryresourcesApi::4oDProgrammesByTitle_3(const QString &category, const ::OpenAPI::OptionalParam<QString> &platform) {
    QString fullPath = QString(_serverConfigs["4oDProgrammesByTitle_3"][_serverIndices.value("4oDProgrammesByTitle_3")].URL()+"/categories/{category}/derived/ad/4od/title.atom");
    
    if (_apiKeys.contains("apikey")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apikey=").append(_apiKeys.find("apikey").value());
    }
    
    
    {
        QString categoryPathParam("{");
        categoryPathParam.append("category").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "category", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"category"+pathSuffix : pathPrefix;
        fullPath.replace(categoryPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(category)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (platform.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "platform", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("platform")).append(querySuffix).append(QUrl::toPercentEncoding(platform.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDiscoveryresourcesApi::4oDProgrammesByTitle_3Callback);
    connect(this, &OAIDiscoveryresourcesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDiscoveryresourcesApi::4oDProgrammesByTitle_3Callback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAtom output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT 4oDProgrammesByTitle_3Signal(output);
        Q_EMIT 4oDProgrammesByTitle_3SignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT 4oDProgrammesByTitle_3SignalE(output, error_type, error_str);
        Q_EMIT 4oDProgrammesByTitle_3SignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT 4oDProgrammesByTitle_3SignalError(output, error_type, error_str);
        Q_EMIT 4oDProgrammesByTitle_3SignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDiscoveryresourcesApi::4oDProgrammesByTitle_4(const QString &category, const qint32 &pageno, const ::OpenAPI::OptionalParam<QString> &platform) {
    QString fullPath = QString(_serverConfigs["4oDProgrammesByTitle_4"][_serverIndices.value("4oDProgrammesByTitle_4")].URL()+"/categories/{category}/4od/title/page-{pageno}.atom");
    
    if (_apiKeys.contains("apikey")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apikey=").append(_apiKeys.find("apikey").value());
    }
    
    
    {
        QString categoryPathParam("{");
        categoryPathParam.append("category").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "category", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"category"+pathSuffix : pathPrefix;
        fullPath.replace(categoryPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(category)));
    }
    
    {
        QString pagenoPathParam("{");
        pagenoPathParam.append("pageno").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "pageno", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"pageno"+pathSuffix : pathPrefix;
        fullPath.replace(pagenoPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(pageno)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (platform.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "platform", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("platform")).append(querySuffix).append(QUrl::toPercentEncoding(platform.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDiscoveryresourcesApi::4oDProgrammesByTitle_4Callback);
    connect(this, &OAIDiscoveryresourcesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDiscoveryresourcesApi::4oDProgrammesByTitle_4Callback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAtom output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT 4oDProgrammesByTitle_4Signal(output);
        Q_EMIT 4oDProgrammesByTitle_4SignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT 4oDProgrammesByTitle_4SignalE(output, error_type, error_str);
        Q_EMIT 4oDProgrammesByTitle_4SignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT 4oDProgrammesByTitle_4SignalError(output, error_type, error_str);
        Q_EMIT 4oDProgrammesByTitle_4SignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDiscoveryresourcesApi::4oDProgrammesByTitle_5(const QString &category, const QString &channel, const qint32 &pageno, const ::OpenAPI::OptionalParam<QString> &platform) {
    QString fullPath = QString(_serverConfigs["4oDProgrammesByTitle_5"][_serverIndices.value("4oDProgrammesByTitle_5")].URL()+"/categories/{category}/channel/{channel}/4od/title/page-{pageno}.atom");
    
    if (_apiKeys.contains("apikey")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apikey=").append(_apiKeys.find("apikey").value());
    }
    
    
    {
        QString categoryPathParam("{");
        categoryPathParam.append("category").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "category", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"category"+pathSuffix : pathPrefix;
        fullPath.replace(categoryPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(category)));
    }
    
    {
        QString channelPathParam("{");
        channelPathParam.append("channel").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "channel", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"channel"+pathSuffix : pathPrefix;
        fullPath.replace(channelPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(channel)));
    }
    
    {
        QString pagenoPathParam("{");
        pagenoPathParam.append("pageno").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "pageno", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"pageno"+pathSuffix : pathPrefix;
        fullPath.replace(pagenoPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(pageno)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (platform.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "platform", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("platform")).append(querySuffix).append(QUrl::toPercentEncoding(platform.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDiscoveryresourcesApi::4oDProgrammesByTitle_5Callback);
    connect(this, &OAIDiscoveryresourcesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDiscoveryresourcesApi::4oDProgrammesByTitle_5Callback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAtom output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT 4oDProgrammesByTitle_5Signal(output);
        Q_EMIT 4oDProgrammesByTitle_5SignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT 4oDProgrammesByTitle_5SignalE(output, error_type, error_str);
        Q_EMIT 4oDProgrammesByTitle_5SignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT 4oDProgrammesByTitle_5SignalError(output, error_type, error_str);
        Q_EMIT 4oDProgrammesByTitle_5SignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDiscoveryresourcesApi::4oDProgrammesByTitle_6(const QString &category, const qint32 &pageno, const ::OpenAPI::OptionalParam<QString> &platform) {
    QString fullPath = QString(_serverConfigs["4oDProgrammesByTitle_6"][_serverIndices.value("4oDProgrammesByTitle_6")].URL()+"/categories/{category}/derived/ad/4od/title/page-{pageno}.atom");
    
    if (_apiKeys.contains("apikey")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apikey=").append(_apiKeys.find("apikey").value());
    }
    
    
    {
        QString categoryPathParam("{");
        categoryPathParam.append("category").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "category", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"category"+pathSuffix : pathPrefix;
        fullPath.replace(categoryPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(category)));
    }
    
    {
        QString pagenoPathParam("{");
        pagenoPathParam.append("pageno").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "pageno", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"pageno"+pathSuffix : pathPrefix;
        fullPath.replace(pagenoPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(pageno)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (platform.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "platform", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("platform")).append(querySuffix).append(QUrl::toPercentEncoding(platform.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDiscoveryresourcesApi::4oDProgrammesByTitle_6Callback);
    connect(this, &OAIDiscoveryresourcesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDiscoveryresourcesApi::4oDProgrammesByTitle_6Callback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAtom output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT 4oDProgrammesByTitle_6Signal(output);
        Q_EMIT 4oDProgrammesByTitle_6SignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT 4oDProgrammesByTitle_6SignalE(output, error_type, error_str);
        Q_EMIT 4oDProgrammesByTitle_6SignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT 4oDProgrammesByTitle_6SignalError(output, error_type, error_str);
        Q_EMIT 4oDProgrammesByTitle_6SignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDiscoveryresourcesApi::4oDTitleAllBrandsFeed(const ::OpenAPI::OptionalParam<QString> &platform) {
    QString fullPath = QString(_serverConfigs["4oDTitleAllBrandsFeed"][_serverIndices.value("4oDTitleAllBrandsFeed")].URL()+"/brands/4od.atom");
    
    if (_apiKeys.contains("apikey")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apikey=").append(_apiKeys.find("apikey").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (platform.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "platform", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("platform")).append(querySuffix).append(QUrl::toPercentEncoding(platform.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDiscoveryresourcesApi::4oDTitleAllBrandsFeedCallback);
    connect(this, &OAIDiscoveryresourcesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDiscoveryresourcesApi::4oDTitleAllBrandsFeedCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAtom output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT 4oDTitleAllBrandsFeedSignal(output);
        Q_EMIT 4oDTitleAllBrandsFeedSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT 4oDTitleAllBrandsFeedSignalE(output, error_type, error_str);
        Q_EMIT 4oDTitleAllBrandsFeedSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT 4oDTitleAllBrandsFeedSignalError(output, error_type, error_str);
        Q_EMIT 4oDTitleAllBrandsFeedSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDiscoveryresourcesApi::4oDTitleAllBrandsFeed_2(const qint32 &pageno, const ::OpenAPI::OptionalParam<QString> &platform) {
    QString fullPath = QString(_serverConfigs["4oDTitleAllBrandsFeed_2"][_serverIndices.value("4oDTitleAllBrandsFeed_2")].URL()+"/brands/4od/page-{pageno}.atom");
    
    if (_apiKeys.contains("apikey")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apikey=").append(_apiKeys.find("apikey").value());
    }
    
    
    {
        QString pagenoPathParam("{");
        pagenoPathParam.append("pageno").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "pageno", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"pageno"+pathSuffix : pathPrefix;
        fullPath.replace(pagenoPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(pageno)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (platform.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "platform", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("platform")).append(querySuffix).append(QUrl::toPercentEncoding(platform.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDiscoveryresourcesApi::4oDTitleAllBrandsFeed_2Callback);
    connect(this, &OAIDiscoveryresourcesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDiscoveryresourcesApi::4oDTitleAllBrandsFeed_2Callback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAtom output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT 4oDTitleAllBrandsFeed_2Signal(output);
        Q_EMIT 4oDTitleAllBrandsFeed_2SignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT 4oDTitleAllBrandsFeed_2SignalE(output, error_type, error_str);
        Q_EMIT 4oDTitleAllBrandsFeed_2SignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT 4oDTitleAllBrandsFeed_2SignalError(output, error_type, error_str);
        Q_EMIT 4oDTitleAllBrandsFeed_2SignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDiscoveryresourcesApi::aToZLandingFeed(const ::OpenAPI::OptionalParam<QString> &platform) {
    QString fullPath = QString(_serverConfigs["aToZLandingFeed"][_serverIndices.value("aToZLandingFeed")].URL()+"/atoz.atom");
    
    if (_apiKeys.contains("apikey")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apikey=").append(_apiKeys.find("apikey").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (platform.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "platform", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("platform")).append(querySuffix).append(QUrl::toPercentEncoding(platform.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDiscoveryresourcesApi::aToZLandingFeedCallback);
    connect(this, &OAIDiscoveryresourcesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDiscoveryresourcesApi::aToZLandingFeedCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAtom output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT aToZLandingFeedSignal(output);
        Q_EMIT aToZLandingFeedSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT aToZLandingFeedSignalE(output, error_type, error_str);
        Q_EMIT aToZLandingFeedSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT aToZLandingFeedSignalError(output, error_type, error_str);
        Q_EMIT aToZLandingFeedSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDiscoveryresourcesApi::aToZLetterFeed(const QString &start_letter, const ::OpenAPI::OptionalParam<QString> &platform) {
    QString fullPath = QString(_serverConfigs["aToZLetterFeed"][_serverIndices.value("aToZLetterFeed")].URL()+"/atoz/{start_letter}.atom");
    
    if (_apiKeys.contains("apikey")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apikey=").append(_apiKeys.find("apikey").value());
    }
    
    
    {
        QString start_letterPathParam("{");
        start_letterPathParam.append("start_letter").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "start_letter", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"start_letter"+pathSuffix : pathPrefix;
        fullPath.replace(start_letterPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(start_letter)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (platform.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "platform", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("platform")).append(querySuffix).append(QUrl::toPercentEncoding(platform.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDiscoveryresourcesApi::aToZLetterFeedCallback);
    connect(this, &OAIDiscoveryresourcesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDiscoveryresourcesApi::aToZLetterFeedCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAtom output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT aToZLetterFeedSignal(output);
        Q_EMIT aToZLetterFeedSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT aToZLetterFeedSignalE(output, error_type, error_str);
        Q_EMIT aToZLetterFeedSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT aToZLetterFeedSignalError(output, error_type, error_str);
        Q_EMIT aToZLetterFeedSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDiscoveryresourcesApi::aToZLetterFeed_2(const QString &start_letter, const qint32 &pageno, const ::OpenAPI::OptionalParam<QString> &platform) {
    QString fullPath = QString(_serverConfigs["aToZLetterFeed_2"][_serverIndices.value("aToZLetterFeed_2")].URL()+"/atoz/{start_letter}/page-{pageno}.atom");
    
    if (_apiKeys.contains("apikey")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apikey=").append(_apiKeys.find("apikey").value());
    }
    
    
    {
        QString start_letterPathParam("{");
        start_letterPathParam.append("start_letter").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "start_letter", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"start_letter"+pathSuffix : pathPrefix;
        fullPath.replace(start_letterPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(start_letter)));
    }
    
    {
        QString pagenoPathParam("{");
        pagenoPathParam.append("pageno").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "pageno", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"pageno"+pathSuffix : pathPrefix;
        fullPath.replace(pagenoPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(pageno)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (platform.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "platform", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("platform")).append(querySuffix).append(QUrl::toPercentEncoding(platform.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDiscoveryresourcesApi::aToZLetterFeed_2Callback);
    connect(this, &OAIDiscoveryresourcesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDiscoveryresourcesApi::aToZLetterFeed_2Callback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAtom output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT aToZLetterFeed_2Signal(output);
        Q_EMIT aToZLetterFeed_2SignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT aToZLetterFeed_2SignalE(output, error_type, error_str);
        Q_EMIT aToZLetterFeed_2SignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT aToZLetterFeed_2SignalError(output, error_type, error_str);
        Q_EMIT aToZLetterFeed_2SignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDiscoveryresourcesApi::allProgrammesByTXDate(const QString &category, const ::OpenAPI::OptionalParam<QString> &platform) {
    QString fullPath = QString(_serverConfigs["allProgrammesByTXDate"][_serverIndices.value("allProgrammesByTXDate")].URL()+"/categories/{category}.atom");
    
    if (_apiKeys.contains("apikey")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apikey=").append(_apiKeys.find("apikey").value());
    }
    
    
    {
        QString categoryPathParam("{");
        categoryPathParam.append("category").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "category", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"category"+pathSuffix : pathPrefix;
        fullPath.replace(categoryPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(category)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (platform.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "platform", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("platform")).append(querySuffix).append(QUrl::toPercentEncoding(platform.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDiscoveryresourcesApi::allProgrammesByTXDateCallback);
    connect(this, &OAIDiscoveryresourcesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDiscoveryresourcesApi::allProgrammesByTXDateCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAtom output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT allProgrammesByTXDateSignal(output);
        Q_EMIT allProgrammesByTXDateSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT allProgrammesByTXDateSignalE(output, error_type, error_str);
        Q_EMIT allProgrammesByTXDateSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT allProgrammesByTXDateSignalError(output, error_type, error_str);
        Q_EMIT allProgrammesByTXDateSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDiscoveryresourcesApi::allProgrammesByTXDate_2(const QString &category, const QString &channel, const ::OpenAPI::OptionalParam<QString> &platform) {
    QString fullPath = QString(_serverConfigs["allProgrammesByTXDate_2"][_serverIndices.value("allProgrammesByTXDate_2")].URL()+"/categories/{category}/channel/{channel}.atom");
    
    if (_apiKeys.contains("apikey")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apikey=").append(_apiKeys.find("apikey").value());
    }
    
    
    {
        QString categoryPathParam("{");
        categoryPathParam.append("category").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "category", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"category"+pathSuffix : pathPrefix;
        fullPath.replace(categoryPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(category)));
    }
    
    {
        QString channelPathParam("{");
        channelPathParam.append("channel").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "channel", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"channel"+pathSuffix : pathPrefix;
        fullPath.replace(channelPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(channel)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (platform.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "platform", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("platform")).append(querySuffix).append(QUrl::toPercentEncoding(platform.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDiscoveryresourcesApi::allProgrammesByTXDate_2Callback);
    connect(this, &OAIDiscoveryresourcesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDiscoveryresourcesApi::allProgrammesByTXDate_2Callback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAtom output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT allProgrammesByTXDate_2Signal(output);
        Q_EMIT allProgrammesByTXDate_2SignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT allProgrammesByTXDate_2SignalE(output, error_type, error_str);
        Q_EMIT allProgrammesByTXDate_2SignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT allProgrammesByTXDate_2SignalError(output, error_type, error_str);
        Q_EMIT allProgrammesByTXDate_2SignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDiscoveryresourcesApi::allProgrammesByTXDate_3(const QString &category, const ::OpenAPI::OptionalParam<QString> &platform) {
    QString fullPath = QString(_serverConfigs["allProgrammesByTXDate_3"][_serverIndices.value("allProgrammesByTXDate_3")].URL()+"/categories/{category}/derived/ad.atom");
    
    if (_apiKeys.contains("apikey")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apikey=").append(_apiKeys.find("apikey").value());
    }
    
    
    {
        QString categoryPathParam("{");
        categoryPathParam.append("category").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "category", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"category"+pathSuffix : pathPrefix;
        fullPath.replace(categoryPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(category)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (platform.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "platform", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("platform")).append(querySuffix).append(QUrl::toPercentEncoding(platform.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDiscoveryresourcesApi::allProgrammesByTXDate_3Callback);
    connect(this, &OAIDiscoveryresourcesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDiscoveryresourcesApi::allProgrammesByTXDate_3Callback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAtom output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT allProgrammesByTXDate_3Signal(output);
        Q_EMIT allProgrammesByTXDate_3SignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT allProgrammesByTXDate_3SignalE(output, error_type, error_str);
        Q_EMIT allProgrammesByTXDate_3SignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT allProgrammesByTXDate_3SignalError(output, error_type, error_str);
        Q_EMIT allProgrammesByTXDate_3SignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDiscoveryresourcesApi::allProgrammesByTXDate_4(const QString &category, const qint32 &pageno, const ::OpenAPI::OptionalParam<QString> &platform) {
    QString fullPath = QString(_serverConfigs["allProgrammesByTXDate_4"][_serverIndices.value("allProgrammesByTXDate_4")].URL()+"/categories/{category}/page-{pageno}.atom");
    
    if (_apiKeys.contains("apikey")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apikey=").append(_apiKeys.find("apikey").value());
    }
    
    
    {
        QString categoryPathParam("{");
        categoryPathParam.append("category").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "category", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"category"+pathSuffix : pathPrefix;
        fullPath.replace(categoryPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(category)));
    }
    
    {
        QString pagenoPathParam("{");
        pagenoPathParam.append("pageno").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "pageno", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"pageno"+pathSuffix : pathPrefix;
        fullPath.replace(pagenoPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(pageno)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (platform.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "platform", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("platform")).append(querySuffix).append(QUrl::toPercentEncoding(platform.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDiscoveryresourcesApi::allProgrammesByTXDate_4Callback);
    connect(this, &OAIDiscoveryresourcesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDiscoveryresourcesApi::allProgrammesByTXDate_4Callback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAtom output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT allProgrammesByTXDate_4Signal(output);
        Q_EMIT allProgrammesByTXDate_4SignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT allProgrammesByTXDate_4SignalE(output, error_type, error_str);
        Q_EMIT allProgrammesByTXDate_4SignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT allProgrammesByTXDate_4SignalError(output, error_type, error_str);
        Q_EMIT allProgrammesByTXDate_4SignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDiscoveryresourcesApi::allProgrammesByTXDate_5(const QString &category, const QString &channel, const qint32 &pageno, const ::OpenAPI::OptionalParam<QString> &platform) {
    QString fullPath = QString(_serverConfigs["allProgrammesByTXDate_5"][_serverIndices.value("allProgrammesByTXDate_5")].URL()+"/categories/{category}/channel/{channel}/page-{pageno}.atom");
    
    if (_apiKeys.contains("apikey")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apikey=").append(_apiKeys.find("apikey").value());
    }
    
    
    {
        QString categoryPathParam("{");
        categoryPathParam.append("category").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "category", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"category"+pathSuffix : pathPrefix;
        fullPath.replace(categoryPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(category)));
    }
    
    {
        QString channelPathParam("{");
        channelPathParam.append("channel").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "channel", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"channel"+pathSuffix : pathPrefix;
        fullPath.replace(channelPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(channel)));
    }
    
    {
        QString pagenoPathParam("{");
        pagenoPathParam.append("pageno").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "pageno", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"pageno"+pathSuffix : pathPrefix;
        fullPath.replace(pagenoPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(pageno)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (platform.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "platform", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("platform")).append(querySuffix).append(QUrl::toPercentEncoding(platform.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDiscoveryresourcesApi::allProgrammesByTXDate_5Callback);
    connect(this, &OAIDiscoveryresourcesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDiscoveryresourcesApi::allProgrammesByTXDate_5Callback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAtom output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT allProgrammesByTXDate_5Signal(output);
        Q_EMIT allProgrammesByTXDate_5SignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT allProgrammesByTXDate_5SignalE(output, error_type, error_str);
        Q_EMIT allProgrammesByTXDate_5SignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT allProgrammesByTXDate_5SignalError(output, error_type, error_str);
        Q_EMIT allProgrammesByTXDate_5SignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDiscoveryresourcesApi::allProgrammesByTXDate_6(const QString &category, const qint32 &pageno, const ::OpenAPI::OptionalParam<QString> &platform) {
    QString fullPath = QString(_serverConfigs["allProgrammesByTXDate_6"][_serverIndices.value("allProgrammesByTXDate_6")].URL()+"/categories/{category}/derived/ad/page-{pageno}.atom");
    
    if (_apiKeys.contains("apikey")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apikey=").append(_apiKeys.find("apikey").value());
    }
    
    
    {
        QString categoryPathParam("{");
        categoryPathParam.append("category").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "category", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"category"+pathSuffix : pathPrefix;
        fullPath.replace(categoryPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(category)));
    }
    
    {
        QString pagenoPathParam("{");
        pagenoPathParam.append("pageno").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "pageno", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"pageno"+pathSuffix : pathPrefix;
        fullPath.replace(pagenoPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(pageno)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (platform.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "platform", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("platform")).append(querySuffix).append(QUrl::toPercentEncoding(platform.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDiscoveryresourcesApi::allProgrammesByTXDate_6Callback);
    connect(this, &OAIDiscoveryresourcesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDiscoveryresourcesApi::allProgrammesByTXDate_6Callback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAtom output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT allProgrammesByTXDate_6Signal(output);
        Q_EMIT allProgrammesByTXDate_6SignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT allProgrammesByTXDate_6SignalE(output, error_type, error_str);
        Q_EMIT allProgrammesByTXDate_6SignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT allProgrammesByTXDate_6SignalError(output, error_type, error_str);
        Q_EMIT allProgrammesByTXDate_6SignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDiscoveryresourcesApi::allProgrammesByTitle(const QString &category, const ::OpenAPI::OptionalParam<QString> &platform) {
    QString fullPath = QString(_serverConfigs["allProgrammesByTitle"][_serverIndices.value("allProgrammesByTitle")].URL()+"/categories/{category}/title.atom");
    
    if (_apiKeys.contains("apikey")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apikey=").append(_apiKeys.find("apikey").value());
    }
    
    
    {
        QString categoryPathParam("{");
        categoryPathParam.append("category").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "category", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"category"+pathSuffix : pathPrefix;
        fullPath.replace(categoryPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(category)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (platform.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "platform", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("platform")).append(querySuffix).append(QUrl::toPercentEncoding(platform.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDiscoveryresourcesApi::allProgrammesByTitleCallback);
    connect(this, &OAIDiscoveryresourcesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDiscoveryresourcesApi::allProgrammesByTitleCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAtom output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT allProgrammesByTitleSignal(output);
        Q_EMIT allProgrammesByTitleSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT allProgrammesByTitleSignalE(output, error_type, error_str);
        Q_EMIT allProgrammesByTitleSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT allProgrammesByTitleSignalError(output, error_type, error_str);
        Q_EMIT allProgrammesByTitleSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDiscoveryresourcesApi::allProgrammesByTitle_2(const QString &category, const QString &channel, const ::OpenAPI::OptionalParam<QString> &platform) {
    QString fullPath = QString(_serverConfigs["allProgrammesByTitle_2"][_serverIndices.value("allProgrammesByTitle_2")].URL()+"/categories/{category}/channel/{channel}/title.atom");
    
    if (_apiKeys.contains("apikey")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apikey=").append(_apiKeys.find("apikey").value());
    }
    
    
    {
        QString categoryPathParam("{");
        categoryPathParam.append("category").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "category", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"category"+pathSuffix : pathPrefix;
        fullPath.replace(categoryPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(category)));
    }
    
    {
        QString channelPathParam("{");
        channelPathParam.append("channel").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "channel", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"channel"+pathSuffix : pathPrefix;
        fullPath.replace(channelPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(channel)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (platform.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "platform", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("platform")).append(querySuffix).append(QUrl::toPercentEncoding(platform.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDiscoveryresourcesApi::allProgrammesByTitle_2Callback);
    connect(this, &OAIDiscoveryresourcesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDiscoveryresourcesApi::allProgrammesByTitle_2Callback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAtom output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT allProgrammesByTitle_2Signal(output);
        Q_EMIT allProgrammesByTitle_2SignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT allProgrammesByTitle_2SignalE(output, error_type, error_str);
        Q_EMIT allProgrammesByTitle_2SignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT allProgrammesByTitle_2SignalError(output, error_type, error_str);
        Q_EMIT allProgrammesByTitle_2SignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDiscoveryresourcesApi::allProgrammesByTitle_3(const QString &category, const ::OpenAPI::OptionalParam<QString> &platform) {
    QString fullPath = QString(_serverConfigs["allProgrammesByTitle_3"][_serverIndices.value("allProgrammesByTitle_3")].URL()+"/categories/{category}/derived/ad/title.atom");
    
    if (_apiKeys.contains("apikey")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apikey=").append(_apiKeys.find("apikey").value());
    }
    
    
    {
        QString categoryPathParam("{");
        categoryPathParam.append("category").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "category", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"category"+pathSuffix : pathPrefix;
        fullPath.replace(categoryPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(category)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (platform.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "platform", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("platform")).append(querySuffix).append(QUrl::toPercentEncoding(platform.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDiscoveryresourcesApi::allProgrammesByTitle_3Callback);
    connect(this, &OAIDiscoveryresourcesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDiscoveryresourcesApi::allProgrammesByTitle_3Callback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAtom output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT allProgrammesByTitle_3Signal(output);
        Q_EMIT allProgrammesByTitle_3SignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT allProgrammesByTitle_3SignalE(output, error_type, error_str);
        Q_EMIT allProgrammesByTitle_3SignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT allProgrammesByTitle_3SignalError(output, error_type, error_str);
        Q_EMIT allProgrammesByTitle_3SignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDiscoveryresourcesApi::allProgrammesByTitle_4(const QString &category, const qint32 &pageno, const ::OpenAPI::OptionalParam<QString> &platform) {
    QString fullPath = QString(_serverConfigs["allProgrammesByTitle_4"][_serverIndices.value("allProgrammesByTitle_4")].URL()+"/categories/{category}/title/page-{pageno}.atom");
    
    if (_apiKeys.contains("apikey")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apikey=").append(_apiKeys.find("apikey").value());
    }
    
    
    {
        QString categoryPathParam("{");
        categoryPathParam.append("category").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "category", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"category"+pathSuffix : pathPrefix;
        fullPath.replace(categoryPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(category)));
    }
    
    {
        QString pagenoPathParam("{");
        pagenoPathParam.append("pageno").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "pageno", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"pageno"+pathSuffix : pathPrefix;
        fullPath.replace(pagenoPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(pageno)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (platform.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "platform", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("platform")).append(querySuffix).append(QUrl::toPercentEncoding(platform.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDiscoveryresourcesApi::allProgrammesByTitle_4Callback);
    connect(this, &OAIDiscoveryresourcesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDiscoveryresourcesApi::allProgrammesByTitle_4Callback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAtom output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT allProgrammesByTitle_4Signal(output);
        Q_EMIT allProgrammesByTitle_4SignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT allProgrammesByTitle_4SignalE(output, error_type, error_str);
        Q_EMIT allProgrammesByTitle_4SignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT allProgrammesByTitle_4SignalError(output, error_type, error_str);
        Q_EMIT allProgrammesByTitle_4SignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDiscoveryresourcesApi::allProgrammesByTitle_5(const QString &category, const QString &channel, const qint32 &pageno, const ::OpenAPI::OptionalParam<QString> &platform) {
    QString fullPath = QString(_serverConfigs["allProgrammesByTitle_5"][_serverIndices.value("allProgrammesByTitle_5")].URL()+"/categories/{category}/channel/{channel}/title/page-{pageno}.atom");
    
    if (_apiKeys.contains("apikey")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apikey=").append(_apiKeys.find("apikey").value());
    }
    
    
    {
        QString categoryPathParam("{");
        categoryPathParam.append("category").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "category", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"category"+pathSuffix : pathPrefix;
        fullPath.replace(categoryPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(category)));
    }
    
    {
        QString channelPathParam("{");
        channelPathParam.append("channel").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "channel", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"channel"+pathSuffix : pathPrefix;
        fullPath.replace(channelPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(channel)));
    }
    
    {
        QString pagenoPathParam("{");
        pagenoPathParam.append("pageno").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "pageno", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"pageno"+pathSuffix : pathPrefix;
        fullPath.replace(pagenoPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(pageno)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (platform.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "platform", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("platform")).append(querySuffix).append(QUrl::toPercentEncoding(platform.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDiscoveryresourcesApi::allProgrammesByTitle_5Callback);
    connect(this, &OAIDiscoveryresourcesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDiscoveryresourcesApi::allProgrammesByTitle_5Callback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAtom output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT allProgrammesByTitle_5Signal(output);
        Q_EMIT allProgrammesByTitle_5SignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT allProgrammesByTitle_5SignalE(output, error_type, error_str);
        Q_EMIT allProgrammesByTitle_5SignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT allProgrammesByTitle_5SignalError(output, error_type, error_str);
        Q_EMIT allProgrammesByTitle_5SignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDiscoveryresourcesApi::allProgrammesByTitle_6(const QString &category, const qint32 &pageno, const ::OpenAPI::OptionalParam<QString> &platform) {
    QString fullPath = QString(_serverConfigs["allProgrammesByTitle_6"][_serverIndices.value("allProgrammesByTitle_6")].URL()+"/categories/{category}/derived/ad/title/page-{pageno}.atom");
    
    if (_apiKeys.contains("apikey")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apikey=").append(_apiKeys.find("apikey").value());
    }
    
    
    {
        QString categoryPathParam("{");
        categoryPathParam.append("category").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "category", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"category"+pathSuffix : pathPrefix;
        fullPath.replace(categoryPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(category)));
    }
    
    {
        QString pagenoPathParam("{");
        pagenoPathParam.append("pageno").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "pageno", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"pageno"+pathSuffix : pathPrefix;
        fullPath.replace(pagenoPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(pageno)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (platform.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "platform", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("platform")).append(querySuffix).append(QUrl::toPercentEncoding(platform.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDiscoveryresourcesApi::allProgrammesByTitle_6Callback);
    connect(this, &OAIDiscoveryresourcesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDiscoveryresourcesApi::allProgrammesByTitle_6Callback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAtom output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT allProgrammesByTitle_6Signal(output);
        Q_EMIT allProgrammesByTitle_6SignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT allProgrammesByTitle_6SignalE(output, error_type, error_str);
        Q_EMIT allProgrammesByTitle_6SignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT allProgrammesByTitle_6SignalError(output, error_type, error_str);
        Q_EMIT allProgrammesByTitle_6SignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDiscoveryresourcesApi::categoriesLandingFeed(const ::OpenAPI::OptionalParam<QString> &platform) {
    QString fullPath = QString(_serverConfigs["categoriesLandingFeed"][_serverIndices.value("categoriesLandingFeed")].URL()+"/categories.atom");
    
    if (_apiKeys.contains("apikey")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apikey=").append(_apiKeys.find("apikey").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (platform.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "platform", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("platform")).append(querySuffix).append(QUrl::toPercentEncoding(platform.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDiscoveryresourcesApi::categoriesLandingFeedCallback);
    connect(this, &OAIDiscoveryresourcesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDiscoveryresourcesApi::categoriesLandingFeedCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAtom output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT categoriesLandingFeedSignal(output);
        Q_EMIT categoriesLandingFeedSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT categoriesLandingFeedSignalE(output, error_type, error_str);
        Q_EMIT categoriesLandingFeedSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT categoriesLandingFeedSignalError(output, error_type, error_str);
        Q_EMIT categoriesLandingFeedSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDiscoveryresourcesApi::collectionsFeed(const QString &collection_name, const ::OpenAPI::OptionalParam<QString> &platform) {
    QString fullPath = QString(_serverConfigs["collectionsFeed"][_serverIndices.value("collectionsFeed")].URL()+"/collections/{collection_name}/4od.atom");
    
    if (_apiKeys.contains("apikey")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apikey=").append(_apiKeys.find("apikey").value());
    }
    
    
    {
        QString collection_namePathParam("{");
        collection_namePathParam.append("collection_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "collection_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"collection_name"+pathSuffix : pathPrefix;
        fullPath.replace(collection_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(collection_name)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (platform.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "platform", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("platform")).append(querySuffix).append(QUrl::toPercentEncoding(platform.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDiscoveryresourcesApi::collectionsFeedCallback);
    connect(this, &OAIDiscoveryresourcesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDiscoveryresourcesApi::collectionsFeedCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAtom output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT collectionsFeedSignal(output);
        Q_EMIT collectionsFeedSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT collectionsFeedSignalE(output, error_type, error_str);
        Q_EMIT collectionsFeedSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT collectionsFeedSignalError(output, error_type, error_str);
        Q_EMIT collectionsFeedSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDiscoveryresourcesApi::collectionsFeed_2(const QString &collection_name, const ::OpenAPI::OptionalParam<QString> &platform) {
    QString fullPath = QString(_serverConfigs["collectionsFeed_2"][_serverIndices.value("collectionsFeed_2")].URL()+"/collections/{collection_name}.atom");
    
    if (_apiKeys.contains("apikey")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apikey=").append(_apiKeys.find("apikey").value());
    }
    
    
    {
        QString collection_namePathParam("{");
        collection_namePathParam.append("collection_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "collection_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"collection_name"+pathSuffix : pathPrefix;
        fullPath.replace(collection_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(collection_name)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (platform.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "platform", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("platform")).append(querySuffix).append(QUrl::toPercentEncoding(platform.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDiscoveryresourcesApi::collectionsFeed_2Callback);
    connect(this, &OAIDiscoveryresourcesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDiscoveryresourcesApi::collectionsFeed_2Callback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAtom output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT collectionsFeed_2Signal(output);
        Q_EMIT collectionsFeed_2SignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT collectionsFeed_2SignalE(output, error_type, error_str);
        Q_EMIT collectionsFeed_2SignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT collectionsFeed_2SignalError(output, error_type, error_str);
        Q_EMIT collectionsFeed_2SignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDiscoveryresourcesApi::flattenedCollectionFeed(const QString &collection_name, const ::OpenAPI::OptionalParam<QString> &platform) {
    QString fullPath = QString(_serverConfigs["flattenedCollectionFeed"][_serverIndices.value("flattenedCollectionFeed")].URL()+"/collections/{collection_name}/flattened/4od.atom");
    
    if (_apiKeys.contains("apikey")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apikey=").append(_apiKeys.find("apikey").value());
    }
    
    
    {
        QString collection_namePathParam("{");
        collection_namePathParam.append("collection_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "collection_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"collection_name"+pathSuffix : pathPrefix;
        fullPath.replace(collection_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(collection_name)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (platform.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "platform", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("platform")).append(querySuffix).append(QUrl::toPercentEncoding(platform.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDiscoveryresourcesApi::flattenedCollectionFeedCallback);
    connect(this, &OAIDiscoveryresourcesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDiscoveryresourcesApi::flattenedCollectionFeedCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAtom output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT flattenedCollectionFeedSignal(output);
        Q_EMIT flattenedCollectionFeedSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT flattenedCollectionFeedSignalE(output, error_type, error_str);
        Q_EMIT flattenedCollectionFeedSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT flattenedCollectionFeedSignalError(output, error_type, error_str);
        Q_EMIT flattenedCollectionFeedSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDiscoveryresourcesApi::flattenedCollectionFeed_2(const QString &collection_name, const ::OpenAPI::OptionalParam<QString> &platform) {
    QString fullPath = QString(_serverConfigs["flattenedCollectionFeed_2"][_serverIndices.value("flattenedCollectionFeed_2")].URL()+"/collections/{collection_name}/flattened.atom");
    
    if (_apiKeys.contains("apikey")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apikey=").append(_apiKeys.find("apikey").value());
    }
    
    
    {
        QString collection_namePathParam("{");
        collection_namePathParam.append("collection_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "collection_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"collection_name"+pathSuffix : pathPrefix;
        fullPath.replace(collection_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(collection_name)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (platform.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "platform", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("platform")).append(querySuffix).append(QUrl::toPercentEncoding(platform.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDiscoveryresourcesApi::flattenedCollectionFeed_2Callback);
    connect(this, &OAIDiscoveryresourcesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDiscoveryresourcesApi::flattenedCollectionFeed_2Callback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAtom output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT flattenedCollectionFeed_2Signal(output);
        Q_EMIT flattenedCollectionFeed_2SignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT flattenedCollectionFeed_2SignalE(output, error_type, error_str);
        Q_EMIT flattenedCollectionFeed_2SignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT flattenedCollectionFeed_2SignalError(output, error_type, error_str);
        Q_EMIT flattenedCollectionFeed_2SignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDiscoveryresourcesApi::mostPopularBrandsFeed(const QString &category, const ::OpenAPI::OptionalParam<QString> &platform) {
    QString fullPath = QString(_serverConfigs["mostPopularBrandsFeed"][_serverIndices.value("mostPopularBrandsFeed")].URL()+"/categories/{category}/4od/popular.atom");
    
    if (_apiKeys.contains("apikey")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apikey=").append(_apiKeys.find("apikey").value());
    }
    
    
    {
        QString categoryPathParam("{");
        categoryPathParam.append("category").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "category", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"category"+pathSuffix : pathPrefix;
        fullPath.replace(categoryPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(category)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (platform.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "platform", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("platform")).append(querySuffix).append(QUrl::toPercentEncoding(platform.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDiscoveryresourcesApi::mostPopularBrandsFeedCallback);
    connect(this, &OAIDiscoveryresourcesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDiscoveryresourcesApi::mostPopularBrandsFeedCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAtom output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT mostPopularBrandsFeedSignal(output);
        Q_EMIT mostPopularBrandsFeedSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT mostPopularBrandsFeedSignalE(output, error_type, error_str);
        Q_EMIT mostPopularBrandsFeedSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT mostPopularBrandsFeedSignalError(output, error_type, error_str);
        Q_EMIT mostPopularBrandsFeedSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDiscoveryresourcesApi::mostPopularBrandsFeed_2(const QString &category, const ::OpenAPI::OptionalParam<QString> &platform) {
    QString fullPath = QString(_serverConfigs["mostPopularBrandsFeed_2"][_serverIndices.value("mostPopularBrandsFeed_2")].URL()+"/categories/{category}/popular.atom");
    
    if (_apiKeys.contains("apikey")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apikey=").append(_apiKeys.find("apikey").value());
    }
    
    
    {
        QString categoryPathParam("{");
        categoryPathParam.append("category").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "category", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"category"+pathSuffix : pathPrefix;
        fullPath.replace(categoryPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(category)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (platform.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "platform", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("platform")).append(querySuffix).append(QUrl::toPercentEncoding(platform.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDiscoveryresourcesApi::mostPopularBrandsFeed_2Callback);
    connect(this, &OAIDiscoveryresourcesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDiscoveryresourcesApi::mostPopularBrandsFeed_2Callback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAtom output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT mostPopularBrandsFeed_2Signal(output);
        Q_EMIT mostPopularBrandsFeed_2SignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT mostPopularBrandsFeed_2SignalE(output, error_type, error_str);
        Q_EMIT mostPopularBrandsFeed_2SignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT mostPopularBrandsFeed_2SignalError(output, error_type, error_str);
        Q_EMIT mostPopularBrandsFeed_2SignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDiscoveryresourcesApi::mostPopularBrandsFeed_3(const QString &category, const QString &channel, const ::OpenAPI::OptionalParam<QString> &platform) {
    QString fullPath = QString(_serverConfigs["mostPopularBrandsFeed_3"][_serverIndices.value("mostPopularBrandsFeed_3")].URL()+"/categories/{category}/channel/{channel}/4od/popular.atom");
    
    if (_apiKeys.contains("apikey")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apikey=").append(_apiKeys.find("apikey").value());
    }
    
    
    {
        QString categoryPathParam("{");
        categoryPathParam.append("category").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "category", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"category"+pathSuffix : pathPrefix;
        fullPath.replace(categoryPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(category)));
    }
    
    {
        QString channelPathParam("{");
        channelPathParam.append("channel").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "channel", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"channel"+pathSuffix : pathPrefix;
        fullPath.replace(channelPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(channel)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (platform.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "platform", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("platform")).append(querySuffix).append(QUrl::toPercentEncoding(platform.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDiscoveryresourcesApi::mostPopularBrandsFeed_3Callback);
    connect(this, &OAIDiscoveryresourcesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDiscoveryresourcesApi::mostPopularBrandsFeed_3Callback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAtom output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT mostPopularBrandsFeed_3Signal(output);
        Q_EMIT mostPopularBrandsFeed_3SignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT mostPopularBrandsFeed_3SignalE(output, error_type, error_str);
        Q_EMIT mostPopularBrandsFeed_3SignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT mostPopularBrandsFeed_3SignalError(output, error_type, error_str);
        Q_EMIT mostPopularBrandsFeed_3SignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDiscoveryresourcesApi::mostPopularBrandsFeed_4(const QString &category, const ::OpenAPI::OptionalParam<QString> &platform) {
    QString fullPath = QString(_serverConfigs["mostPopularBrandsFeed_4"][_serverIndices.value("mostPopularBrandsFeed_4")].URL()+"/categories/{category}/derived/ad/4od/popular.atom");
    
    if (_apiKeys.contains("apikey")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apikey=").append(_apiKeys.find("apikey").value());
    }
    
    
    {
        QString categoryPathParam("{");
        categoryPathParam.append("category").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "category", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"category"+pathSuffix : pathPrefix;
        fullPath.replace(categoryPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(category)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (platform.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "platform", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("platform")).append(querySuffix).append(QUrl::toPercentEncoding(platform.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDiscoveryresourcesApi::mostPopularBrandsFeed_4Callback);
    connect(this, &OAIDiscoveryresourcesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDiscoveryresourcesApi::mostPopularBrandsFeed_4Callback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAtom output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT mostPopularBrandsFeed_4Signal(output);
        Q_EMIT mostPopularBrandsFeed_4SignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT mostPopularBrandsFeed_4SignalE(output, error_type, error_str);
        Q_EMIT mostPopularBrandsFeed_4SignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT mostPopularBrandsFeed_4SignalError(output, error_type, error_str);
        Q_EMIT mostPopularBrandsFeed_4SignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDiscoveryresourcesApi::mostPopularBrandsFeed_5(const QString &category, const qint32 &pageno, const ::OpenAPI::OptionalParam<QString> &platform) {
    QString fullPath = QString(_serverConfigs["mostPopularBrandsFeed_5"][_serverIndices.value("mostPopularBrandsFeed_5")].URL()+"/categories/{category}/4od/popular/page-{pageno}.atom");
    
    if (_apiKeys.contains("apikey")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apikey=").append(_apiKeys.find("apikey").value());
    }
    
    
    {
        QString categoryPathParam("{");
        categoryPathParam.append("category").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "category", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"category"+pathSuffix : pathPrefix;
        fullPath.replace(categoryPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(category)));
    }
    
    {
        QString pagenoPathParam("{");
        pagenoPathParam.append("pageno").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "pageno", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"pageno"+pathSuffix : pathPrefix;
        fullPath.replace(pagenoPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(pageno)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (platform.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "platform", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("platform")).append(querySuffix).append(QUrl::toPercentEncoding(platform.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDiscoveryresourcesApi::mostPopularBrandsFeed_5Callback);
    connect(this, &OAIDiscoveryresourcesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDiscoveryresourcesApi::mostPopularBrandsFeed_5Callback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAtom output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT mostPopularBrandsFeed_5Signal(output);
        Q_EMIT mostPopularBrandsFeed_5SignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT mostPopularBrandsFeed_5SignalE(output, error_type, error_str);
        Q_EMIT mostPopularBrandsFeed_5SignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT mostPopularBrandsFeed_5SignalError(output, error_type, error_str);
        Q_EMIT mostPopularBrandsFeed_5SignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDiscoveryresourcesApi::mostPopularBrandsFeed_6(const QString &category, const qint32 &pageno, const ::OpenAPI::OptionalParam<QString> &platform) {
    QString fullPath = QString(_serverConfigs["mostPopularBrandsFeed_6"][_serverIndices.value("mostPopularBrandsFeed_6")].URL()+"/categories/{category}/popular/page-{pageno}.atom");
    
    if (_apiKeys.contains("apikey")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apikey=").append(_apiKeys.find("apikey").value());
    }
    
    
    {
        QString categoryPathParam("{");
        categoryPathParam.append("category").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "category", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"category"+pathSuffix : pathPrefix;
        fullPath.replace(categoryPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(category)));
    }
    
    {
        QString pagenoPathParam("{");
        pagenoPathParam.append("pageno").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "pageno", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"pageno"+pathSuffix : pathPrefix;
        fullPath.replace(pagenoPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(pageno)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (platform.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "platform", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("platform")).append(querySuffix).append(QUrl::toPercentEncoding(platform.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDiscoveryresourcesApi::mostPopularBrandsFeed_6Callback);
    connect(this, &OAIDiscoveryresourcesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDiscoveryresourcesApi::mostPopularBrandsFeed_6Callback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAtom output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT mostPopularBrandsFeed_6Signal(output);
        Q_EMIT mostPopularBrandsFeed_6SignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT mostPopularBrandsFeed_6SignalE(output, error_type, error_str);
        Q_EMIT mostPopularBrandsFeed_6SignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT mostPopularBrandsFeed_6SignalError(output, error_type, error_str);
        Q_EMIT mostPopularBrandsFeed_6SignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDiscoveryresourcesApi::mostPopularBrandsFeed_7(const QString &category, const QString &channel, const qint32 &pageno, const ::OpenAPI::OptionalParam<QString> &platform) {
    QString fullPath = QString(_serverConfigs["mostPopularBrandsFeed_7"][_serverIndices.value("mostPopularBrandsFeed_7")].URL()+"/categories/{category}/channel/{channel}/4od/popular/page-{pageno}.atom");
    
    if (_apiKeys.contains("apikey")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apikey=").append(_apiKeys.find("apikey").value());
    }
    
    
    {
        QString categoryPathParam("{");
        categoryPathParam.append("category").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "category", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"category"+pathSuffix : pathPrefix;
        fullPath.replace(categoryPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(category)));
    }
    
    {
        QString channelPathParam("{");
        channelPathParam.append("channel").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "channel", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"channel"+pathSuffix : pathPrefix;
        fullPath.replace(channelPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(channel)));
    }
    
    {
        QString pagenoPathParam("{");
        pagenoPathParam.append("pageno").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "pageno", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"pageno"+pathSuffix : pathPrefix;
        fullPath.replace(pagenoPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(pageno)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (platform.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "platform", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("platform")).append(querySuffix).append(QUrl::toPercentEncoding(platform.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDiscoveryresourcesApi::mostPopularBrandsFeed_7Callback);
    connect(this, &OAIDiscoveryresourcesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDiscoveryresourcesApi::mostPopularBrandsFeed_7Callback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAtom output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT mostPopularBrandsFeed_7Signal(output);
        Q_EMIT mostPopularBrandsFeed_7SignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT mostPopularBrandsFeed_7SignalE(output, error_type, error_str);
        Q_EMIT mostPopularBrandsFeed_7SignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT mostPopularBrandsFeed_7SignalError(output, error_type, error_str);
        Q_EMIT mostPopularBrandsFeed_7SignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDiscoveryresourcesApi::mostPopularBrandsFeed_8(const QString &category, const qint32 &pageno, const ::OpenAPI::OptionalParam<QString> &platform) {
    QString fullPath = QString(_serverConfigs["mostPopularBrandsFeed_8"][_serverIndices.value("mostPopularBrandsFeed_8")].URL()+"/categories/{category}/derived/ad/4od/popular/page-{pageno}.atom");
    
    if (_apiKeys.contains("apikey")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apikey=").append(_apiKeys.find("apikey").value());
    }
    
    
    {
        QString categoryPathParam("{");
        categoryPathParam.append("category").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "category", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"category"+pathSuffix : pathPrefix;
        fullPath.replace(categoryPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(category)));
    }
    
    {
        QString pagenoPathParam("{");
        pagenoPathParam.append("pageno").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "pageno", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"pageno"+pathSuffix : pathPrefix;
        fullPath.replace(pagenoPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(pageno)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (platform.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "platform", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("platform")).append(querySuffix).append(QUrl::toPercentEncoding(platform.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDiscoveryresourcesApi::mostPopularBrandsFeed_8Callback);
    connect(this, &OAIDiscoveryresourcesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDiscoveryresourcesApi::mostPopularBrandsFeed_8Callback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAtom output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT mostPopularBrandsFeed_8Signal(output);
        Q_EMIT mostPopularBrandsFeed_8SignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT mostPopularBrandsFeed_8SignalE(output, error_type, error_str);
        Q_EMIT mostPopularBrandsFeed_8SignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT mostPopularBrandsFeed_8SignalError(output, error_type, error_str);
        Q_EMIT mostPopularBrandsFeed_8SignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDiscoveryresourcesApi::popularBrandsFeed(const ::OpenAPI::OptionalParam<QString> &platform) {
    QString fullPath = QString(_serverConfigs["popularBrandsFeed"][_serverIndices.value("popularBrandsFeed")].URL()+"/brands/popular.atom");
    
    if (_apiKeys.contains("apikey")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apikey=").append(_apiKeys.find("apikey").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (platform.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "platform", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("platform")).append(querySuffix).append(QUrl::toPercentEncoding(platform.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDiscoveryresourcesApi::popularBrandsFeedCallback);
    connect(this, &OAIDiscoveryresourcesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDiscoveryresourcesApi::popularBrandsFeedCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAtom output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT popularBrandsFeedSignal(output);
        Q_EMIT popularBrandsFeedSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT popularBrandsFeedSignalE(output, error_type, error_str);
        Q_EMIT popularBrandsFeedSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT popularBrandsFeedSignalError(output, error_type, error_str);
        Q_EMIT popularBrandsFeedSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDiscoveryresourcesApi::popularBrandsFeed_2(const qint32 &pageno, const ::OpenAPI::OptionalParam<QString> &platform) {
    QString fullPath = QString(_serverConfigs["popularBrandsFeed_2"][_serverIndices.value("popularBrandsFeed_2")].URL()+"/brands/popular/page-{pageno}.atom");
    
    if (_apiKeys.contains("apikey")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apikey=").append(_apiKeys.find("apikey").value());
    }
    
    
    {
        QString pagenoPathParam("{");
        pagenoPathParam.append("pageno").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "pageno", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"pageno"+pathSuffix : pathPrefix;
        fullPath.replace(pagenoPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(pageno)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (platform.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "platform", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("platform")).append(querySuffix).append(QUrl::toPercentEncoding(platform.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDiscoveryresourcesApi::popularBrandsFeed_2Callback);
    connect(this, &OAIDiscoveryresourcesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDiscoveryresourcesApi::popularBrandsFeed_2Callback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAtom output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT popularBrandsFeed_2Signal(output);
        Q_EMIT popularBrandsFeed_2SignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT popularBrandsFeed_2SignalE(output, error_type, error_str);
        Q_EMIT popularBrandsFeed_2SignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT popularBrandsFeed_2SignalError(output, error_type, error_str);
        Q_EMIT popularBrandsFeed_2SignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDiscoveryresourcesApi::searchFeed(const QString &q, const ::OpenAPI::OptionalParam<QString> &platform) {
    QString fullPath = QString(_serverConfigs["searchFeed"][_serverIndices.value("searchFeed")].URL()+"/search.atom");
    
    if (_apiKeys.contains("apikey")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apikey=").append(_apiKeys.find("apikey").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (platform.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "platform", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("platform")).append(querySuffix).append(QUrl::toPercentEncoding(platform.stringValue()));
    }
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "q", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("q")).append(querySuffix).append(QUrl::toPercentEncoding(q));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDiscoveryresourcesApi::searchFeedCallback);
    connect(this, &OAIDiscoveryresourcesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDiscoveryresourcesApi::searchFeedCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAtom output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT searchFeedSignal(output);
        Q_EMIT searchFeedSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT searchFeedSignalE(output, error_type, error_str);
        Q_EMIT searchFeedSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT searchFeedSignalError(output, error_type, error_str);
        Q_EMIT searchFeedSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDiscoveryresourcesApi::searchFeed_2(const QString &q, const ::OpenAPI::OptionalParam<QString> &platform) {
    QString fullPath = QString(_serverConfigs["searchFeed_2"][_serverIndices.value("searchFeed_2")].URL()+"/search/{q}.atom");
    
    if (_apiKeys.contains("apikey")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apikey=").append(_apiKeys.find("apikey").value());
    }
    
    
    {
        QString qPathParam("{");
        qPathParam.append("q").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "q", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"q"+pathSuffix : pathPrefix;
        fullPath.replace(qPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(q)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (platform.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "platform", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("platform")).append(querySuffix).append(QUrl::toPercentEncoding(platform.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDiscoveryresourcesApi::searchFeed_2Callback);
    connect(this, &OAIDiscoveryresourcesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDiscoveryresourcesApi::searchFeed_2Callback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAtom output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT searchFeed_2Signal(output);
        Q_EMIT searchFeed_2SignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT searchFeed_2SignalE(output, error_type, error_str);
        Q_EMIT searchFeed_2SignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT searchFeed_2SignalError(output, error_type, error_str);
        Q_EMIT searchFeed_2SignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDiscoveryresourcesApi::searchFeed_3(const QString &q, const qint32 &pageno, const ::OpenAPI::OptionalParam<QString> &platform) {
    QString fullPath = QString(_serverConfigs["searchFeed_3"][_serverIndices.value("searchFeed_3")].URL()+"/search/page-{pageno}.atom");
    
    if (_apiKeys.contains("apikey")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apikey=").append(_apiKeys.find("apikey").value());
    }
    
    
    {
        QString pagenoPathParam("{");
        pagenoPathParam.append("pageno").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "pageno", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"pageno"+pathSuffix : pathPrefix;
        fullPath.replace(pagenoPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(pageno)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (platform.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "platform", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("platform")).append(querySuffix).append(QUrl::toPercentEncoding(platform.stringValue()));
    }
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "q", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("q")).append(querySuffix).append(QUrl::toPercentEncoding(q));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDiscoveryresourcesApi::searchFeed_3Callback);
    connect(this, &OAIDiscoveryresourcesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDiscoveryresourcesApi::searchFeed_3Callback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAtom output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT searchFeed_3Signal(output);
        Q_EMIT searchFeed_3SignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT searchFeed_3SignalE(output, error_type, error_str);
        Q_EMIT searchFeed_3SignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT searchFeed_3SignalError(output, error_type, error_str);
        Q_EMIT searchFeed_3SignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDiscoveryresourcesApi::searchFeed_4(const QString &q, const qint32 &pageno, const ::OpenAPI::OptionalParam<QString> &platform) {
    QString fullPath = QString(_serverConfigs["searchFeed_4"][_serverIndices.value("searchFeed_4")].URL()+"/search/{q}/page-{pageno}.atom");
    
    if (_apiKeys.contains("apikey")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apikey=").append(_apiKeys.find("apikey").value());
    }
    
    
    {
        QString qPathParam("{");
        qPathParam.append("q").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "q", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"q"+pathSuffix : pathPrefix;
        fullPath.replace(qPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(q)));
    }
    
    {
        QString pagenoPathParam("{");
        pagenoPathParam.append("pageno").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "pageno", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"pageno"+pathSuffix : pathPrefix;
        fullPath.replace(pagenoPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(pageno)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (platform.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "platform", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("platform")).append(querySuffix).append(QUrl::toPercentEncoding(platform.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDiscoveryresourcesApi::searchFeed_4Callback);
    connect(this, &OAIDiscoveryresourcesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDiscoveryresourcesApi::searchFeed_4Callback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAtom output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT searchFeed_4Signal(output);
        Q_EMIT searchFeed_4SignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT searchFeed_4SignalE(output, error_type, error_str);
        Q_EMIT searchFeed_4SignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT searchFeed_4SignalError(output, error_type, error_str);
        Q_EMIT searchFeed_4SignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDiscoveryresourcesApi::tVListingsFeed(const QString &yyyy, const QString &mm, const QString &dd, const ::OpenAPI::OptionalParam<QString> &platform) {
    QString fullPath = QString(_serverConfigs["tVListingsFeed"][_serverIndices.value("tVListingsFeed")].URL()+"/tv-listings/daily/{yyyy}/{mm}/{dd}.atom");
    
    if (_apiKeys.contains("apikey")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apikey=").append(_apiKeys.find("apikey").value());
    }
    
    
    {
        QString yyyyPathParam("{");
        yyyyPathParam.append("yyyy").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "yyyy", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"yyyy"+pathSuffix : pathPrefix;
        fullPath.replace(yyyyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(yyyy)));
    }
    
    {
        QString mmPathParam("{");
        mmPathParam.append("mm").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "mm", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"mm"+pathSuffix : pathPrefix;
        fullPath.replace(mmPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(mm)));
    }
    
    {
        QString ddPathParam("{");
        ddPathParam.append("dd").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "dd", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"dd"+pathSuffix : pathPrefix;
        fullPath.replace(ddPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(dd)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (platform.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "platform", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("platform")).append(querySuffix).append(QUrl::toPercentEncoding(platform.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDiscoveryresourcesApi::tVListingsFeedCallback);
    connect(this, &OAIDiscoveryresourcesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDiscoveryresourcesApi::tVListingsFeedCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAtom output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT tVListingsFeedSignal(output);
        Q_EMIT tVListingsFeedSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT tVListingsFeedSignalE(output, error_type, error_str);
        Q_EMIT tVListingsFeedSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT tVListingsFeedSignalError(output, error_type, error_str);
        Q_EMIT tVListingsFeedSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDiscoveryresourcesApi::tVListingsFeed_2(const QString &yyyy, const QString &mm, const QString &dd, const QString &channel, const ::OpenAPI::OptionalParam<QString> &platform) {
    QString fullPath = QString(_serverConfigs["tVListingsFeed_2"][_serverIndices.value("tVListingsFeed_2")].URL()+"/tv-listings/daily/{yyyy}/{mm}/{dd}/{channel}.atom");
    
    if (_apiKeys.contains("apikey")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apikey=").append(_apiKeys.find("apikey").value());
    }
    
    
    {
        QString yyyyPathParam("{");
        yyyyPathParam.append("yyyy").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "yyyy", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"yyyy"+pathSuffix : pathPrefix;
        fullPath.replace(yyyyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(yyyy)));
    }
    
    {
        QString mmPathParam("{");
        mmPathParam.append("mm").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "mm", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"mm"+pathSuffix : pathPrefix;
        fullPath.replace(mmPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(mm)));
    }
    
    {
        QString ddPathParam("{");
        ddPathParam.append("dd").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "dd", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"dd"+pathSuffix : pathPrefix;
        fullPath.replace(ddPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(dd)));
    }
    
    {
        QString channelPathParam("{");
        channelPathParam.append("channel").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "channel", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"channel"+pathSuffix : pathPrefix;
        fullPath.replace(channelPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(channel)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (platform.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "platform", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("platform")).append(querySuffix).append(QUrl::toPercentEncoding(platform.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDiscoveryresourcesApi::tVListingsFeed_2Callback);
    connect(this, &OAIDiscoveryresourcesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDiscoveryresourcesApi::tVListingsFeed_2Callback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAtom output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT tVListingsFeed_2Signal(output);
        Q_EMIT tVListingsFeed_2SignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT tVListingsFeed_2SignalE(output, error_type, error_str);
        Q_EMIT tVListingsFeed_2SignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT tVListingsFeed_2SignalError(output, error_type, error_str);
        Q_EMIT tVListingsFeed_2SignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDiscoveryresourcesApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
