/**
 * Channel 4 API
 * This is the place to come for all the technical details you need to power your applications with Channel 4's deep programmes data.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer@channel4.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetadataresourcesApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIMetadataresourcesApi::OAIMetadataresourcesApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIMetadataresourcesApi::~OAIMetadataresourcesApi() {
}

void OAIMetadataresourcesApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("http://channel4.com/pmlsd"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://channel4.com/pmlsd"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("4oDFeed", defaultConf);
    _serverIndices.insert("4oDFeed", 0);
    _serverConfigs.insert("brandEPGAtomFeed", defaultConf);
    _serverIndices.insert("brandEPGAtomFeed", 0);
    _serverConfigs.insert("clipDetailAtomFeed", defaultConf);
    _serverIndices.insert("clipDetailAtomFeed", 0);
    _serverConfigs.insert("clipsLandingFeedBrandSeriesAndEpisodeLevels", defaultConf);
    _serverIndices.insert("clipsLandingFeedBrandSeriesAndEpisodeLevels", 0);
    _serverConfigs.insert("clipsLandingFeedBrandSeriesAndEpisodeLevels_2", defaultConf);
    _serverIndices.insert("clipsLandingFeedBrandSeriesAndEpisodeLevels_2", 0);
    _serverConfigs.insert("clipsLandingFeedBrandSeriesAndEpisodeLevels_3", defaultConf);
    _serverIndices.insert("clipsLandingFeedBrandSeriesAndEpisodeLevels_3", 0);
    _serverConfigs.insert("comingSoonFeed", defaultConf);
    _serverIndices.insert("comingSoonFeed", 0);
    _serverConfigs.insert("comingSoonFeed_2", defaultConf);
    _serverIndices.insert("comingSoonFeed_2", 0);
    _serverConfigs.insert("episodeGuideFeedEpisodeDetail", defaultConf);
    _serverIndices.insert("episodeGuideFeedEpisodeDetail", 0);
    _serverConfigs.insert("episodeGuideFeedSeriesDetail", defaultConf);
    _serverIndices.insert("episodeGuideFeedSeriesDetail", 0);
    _serverConfigs.insert("episodeGuideFeedSeriesLanding", defaultConf);
    _serverIndices.insert("episodeGuideFeedSeriesLanding", 0);
    _serverConfigs.insert("hubFeed", defaultConf);
    _serverIndices.insert("hubFeed", 0);
    _serverConfigs.insert("programmeFeed", defaultConf);
    _serverIndices.insert("programmeFeed", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIMetadataresourcesApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIMetadataresourcesApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIMetadataresourcesApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIMetadataresourcesApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIMetadataresourcesApi::setUsername(const QString &username) {
    _username = username;
}

void OAIMetadataresourcesApi::setPassword(const QString &password) {
    _password = password;
}


void OAIMetadataresourcesApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIMetadataresourcesApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIMetadataresourcesApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIMetadataresourcesApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIMetadataresourcesApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIMetadataresourcesApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIMetadataresourcesApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIMetadataresourcesApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIMetadataresourcesApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIMetadataresourcesApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIMetadataresourcesApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIMetadataresourcesApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIMetadataresourcesApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIMetadataresourcesApi::4oDFeed(const QString &brand_web_safe_title, const ::OpenAPI::OptionalParam<QString> &platform) {
    QString fullPath = QString(_serverConfigs["4oDFeed"][_serverIndices.value("4oDFeed")].URL()+"/{brand-web-safe-title}/4od.atom");
    
    if (_apiKeys.contains("apikey")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apikey=").append(_apiKeys.find("apikey").value());
    }
    
    
    {
        QString brand_web_safe_titlePathParam("{");
        brand_web_safe_titlePathParam.append("brand-web-safe-title").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "brand-web-safe-title", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"brand-web-safe-title"+pathSuffix : pathPrefix;
        fullPath.replace(brand_web_safe_titlePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(brand_web_safe_title)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (platform.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "platform", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("platform")).append(querySuffix).append(QUrl::toPercentEncoding(platform.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMetadataresourcesApi::4oDFeedCallback);
    connect(this, &OAIMetadataresourcesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMetadataresourcesApi::4oDFeedCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAtom output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT 4oDFeedSignal(output);
        Q_EMIT 4oDFeedSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT 4oDFeedSignalE(output, error_type, error_str);
        Q_EMIT 4oDFeedSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT 4oDFeedSignalError(output, error_type, error_str);
        Q_EMIT 4oDFeedSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMetadataresourcesApi::brandEPGAtomFeed(const QString &brand_web_safe_title, const ::OpenAPI::OptionalParam<QString> &platform) {
    QString fullPath = QString(_serverConfigs["brandEPGAtomFeed"][_serverIndices.value("brandEPGAtomFeed")].URL()+"/{brand-web-safe-title}/epg.atom");
    
    if (_apiKeys.contains("apikey")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apikey=").append(_apiKeys.find("apikey").value());
    }
    
    
    {
        QString brand_web_safe_titlePathParam("{");
        brand_web_safe_titlePathParam.append("brand-web-safe-title").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "brand-web-safe-title", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"brand-web-safe-title"+pathSuffix : pathPrefix;
        fullPath.replace(brand_web_safe_titlePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(brand_web_safe_title)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (platform.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "platform", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("platform")).append(querySuffix).append(QUrl::toPercentEncoding(platform.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMetadataresourcesApi::brandEPGAtomFeedCallback);
    connect(this, &OAIMetadataresourcesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMetadataresourcesApi::brandEPGAtomFeedCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAtom output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT brandEPGAtomFeedSignal(output);
        Q_EMIT brandEPGAtomFeedSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT brandEPGAtomFeedSignalE(output, error_type, error_str);
        Q_EMIT brandEPGAtomFeedSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT brandEPGAtomFeedSignalError(output, error_type, error_str);
        Q_EMIT brandEPGAtomFeedSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMetadataresourcesApi::clipDetailAtomFeed(const QString &brand_web_safe_title, const QString &clip_asset_id, const ::OpenAPI::OptionalParam<QString> &platform) {
    QString fullPath = QString(_serverConfigs["clipDetailAtomFeed"][_serverIndices.value("clipDetailAtomFeed")].URL()+"/{brand-web-safe-title}/videos/{clip-asset-id}.atom");
    
    if (_apiKeys.contains("apikey")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apikey=").append(_apiKeys.find("apikey").value());
    }
    
    
    {
        QString brand_web_safe_titlePathParam("{");
        brand_web_safe_titlePathParam.append("brand-web-safe-title").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "brand-web-safe-title", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"brand-web-safe-title"+pathSuffix : pathPrefix;
        fullPath.replace(brand_web_safe_titlePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(brand_web_safe_title)));
    }
    
    {
        QString clip_asset_idPathParam("{");
        clip_asset_idPathParam.append("clip-asset-id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "clip-asset-id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"clip-asset-id"+pathSuffix : pathPrefix;
        fullPath.replace(clip_asset_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(clip_asset_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (platform.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "platform", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("platform")).append(querySuffix).append(QUrl::toPercentEncoding(platform.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMetadataresourcesApi::clipDetailAtomFeedCallback);
    connect(this, &OAIMetadataresourcesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMetadataresourcesApi::clipDetailAtomFeedCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAtom output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT clipDetailAtomFeedSignal(output);
        Q_EMIT clipDetailAtomFeedSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT clipDetailAtomFeedSignalE(output, error_type, error_str);
        Q_EMIT clipDetailAtomFeedSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT clipDetailAtomFeedSignalError(output, error_type, error_str);
        Q_EMIT clipDetailAtomFeedSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMetadataresourcesApi::clipsLandingFeedBrandSeriesAndEpisodeLevels(const QString &brand_web_safe_title, const ::OpenAPI::OptionalParam<QString> &platform) {
    QString fullPath = QString(_serverConfigs["clipsLandingFeedBrandSeriesAndEpisodeLevels"][_serverIndices.value("clipsLandingFeedBrandSeriesAndEpisodeLevels")].URL()+"/{brand-web-safe-title}/videos/all.atom");
    
    if (_apiKeys.contains("apikey")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apikey=").append(_apiKeys.find("apikey").value());
    }
    
    
    {
        QString brand_web_safe_titlePathParam("{");
        brand_web_safe_titlePathParam.append("brand-web-safe-title").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "brand-web-safe-title", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"brand-web-safe-title"+pathSuffix : pathPrefix;
        fullPath.replace(brand_web_safe_titlePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(brand_web_safe_title)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (platform.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "platform", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("platform")).append(querySuffix).append(QUrl::toPercentEncoding(platform.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMetadataresourcesApi::clipsLandingFeedBrandSeriesAndEpisodeLevelsCallback);
    connect(this, &OAIMetadataresourcesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMetadataresourcesApi::clipsLandingFeedBrandSeriesAndEpisodeLevelsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAtom output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT clipsLandingFeedBrandSeriesAndEpisodeLevelsSignal(output);
        Q_EMIT clipsLandingFeedBrandSeriesAndEpisodeLevelsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT clipsLandingFeedBrandSeriesAndEpisodeLevelsSignalE(output, error_type, error_str);
        Q_EMIT clipsLandingFeedBrandSeriesAndEpisodeLevelsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT clipsLandingFeedBrandSeriesAndEpisodeLevelsSignalError(output, error_type, error_str);
        Q_EMIT clipsLandingFeedBrandSeriesAndEpisodeLevelsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMetadataresourcesApi::clipsLandingFeedBrandSeriesAndEpisodeLevels_2(const QString &brand_web_safe_title, const QString &series_number, const ::OpenAPI::OptionalParam<QString> &platform) {
    QString fullPath = QString(_serverConfigs["clipsLandingFeedBrandSeriesAndEpisodeLevels_2"][_serverIndices.value("clipsLandingFeedBrandSeriesAndEpisodeLevels_2")].URL()+"/{brand-web-safe-title}/videos/series-{series_number}.atom");
    
    if (_apiKeys.contains("apikey")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apikey=").append(_apiKeys.find("apikey").value());
    }
    
    
    {
        QString brand_web_safe_titlePathParam("{");
        brand_web_safe_titlePathParam.append("brand-web-safe-title").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "brand-web-safe-title", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"brand-web-safe-title"+pathSuffix : pathPrefix;
        fullPath.replace(brand_web_safe_titlePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(brand_web_safe_title)));
    }
    
    {
        QString series_numberPathParam("{");
        series_numberPathParam.append("series_number").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "series_number", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"series_number"+pathSuffix : pathPrefix;
        fullPath.replace(series_numberPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(series_number)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (platform.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "platform", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("platform")).append(querySuffix).append(QUrl::toPercentEncoding(platform.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMetadataresourcesApi::clipsLandingFeedBrandSeriesAndEpisodeLevels_2Callback);
    connect(this, &OAIMetadataresourcesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMetadataresourcesApi::clipsLandingFeedBrandSeriesAndEpisodeLevels_2Callback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAtom output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT clipsLandingFeedBrandSeriesAndEpisodeLevels_2Signal(output);
        Q_EMIT clipsLandingFeedBrandSeriesAndEpisodeLevels_2SignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT clipsLandingFeedBrandSeriesAndEpisodeLevels_2SignalE(output, error_type, error_str);
        Q_EMIT clipsLandingFeedBrandSeriesAndEpisodeLevels_2SignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT clipsLandingFeedBrandSeriesAndEpisodeLevels_2SignalError(output, error_type, error_str);
        Q_EMIT clipsLandingFeedBrandSeriesAndEpisodeLevels_2SignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMetadataresourcesApi::clipsLandingFeedBrandSeriesAndEpisodeLevels_3(const QString &brand_web_safe_title, const QString &series_number, const QString &episode_number, const ::OpenAPI::OptionalParam<QString> &platform) {
    QString fullPath = QString(_serverConfigs["clipsLandingFeedBrandSeriesAndEpisodeLevels_3"][_serverIndices.value("clipsLandingFeedBrandSeriesAndEpisodeLevels_3")].URL()+"/{brand-web-safe-title}/videos/series-{series_number}/episode-{episode_number}.atom");
    
    if (_apiKeys.contains("apikey")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apikey=").append(_apiKeys.find("apikey").value());
    }
    
    
    {
        QString brand_web_safe_titlePathParam("{");
        brand_web_safe_titlePathParam.append("brand-web-safe-title").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "brand-web-safe-title", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"brand-web-safe-title"+pathSuffix : pathPrefix;
        fullPath.replace(brand_web_safe_titlePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(brand_web_safe_title)));
    }
    
    {
        QString series_numberPathParam("{");
        series_numberPathParam.append("series_number").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "series_number", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"series_number"+pathSuffix : pathPrefix;
        fullPath.replace(series_numberPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(series_number)));
    }
    
    {
        QString episode_numberPathParam("{");
        episode_numberPathParam.append("episode_number").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "episode_number", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"episode_number"+pathSuffix : pathPrefix;
        fullPath.replace(episode_numberPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(episode_number)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (platform.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "platform", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("platform")).append(querySuffix).append(QUrl::toPercentEncoding(platform.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMetadataresourcesApi::clipsLandingFeedBrandSeriesAndEpisodeLevels_3Callback);
    connect(this, &OAIMetadataresourcesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMetadataresourcesApi::clipsLandingFeedBrandSeriesAndEpisodeLevels_3Callback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAtom output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT clipsLandingFeedBrandSeriesAndEpisodeLevels_3Signal(output);
        Q_EMIT clipsLandingFeedBrandSeriesAndEpisodeLevels_3SignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT clipsLandingFeedBrandSeriesAndEpisodeLevels_3SignalE(output, error_type, error_str);
        Q_EMIT clipsLandingFeedBrandSeriesAndEpisodeLevels_3SignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT clipsLandingFeedBrandSeriesAndEpisodeLevels_3SignalError(output, error_type, error_str);
        Q_EMIT clipsLandingFeedBrandSeriesAndEpisodeLevels_3SignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMetadataresourcesApi::comingSoonFeed(const ::OpenAPI::OptionalParam<QString> &platform) {
    QString fullPath = QString(_serverConfigs["comingSoonFeed"][_serverIndices.value("comingSoonFeed")].URL()+"/coming-soon.atom");
    
    if (_apiKeys.contains("apikey")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apikey=").append(_apiKeys.find("apikey").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (platform.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "platform", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("platform")).append(querySuffix).append(QUrl::toPercentEncoding(platform.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMetadataresourcesApi::comingSoonFeedCallback);
    connect(this, &OAIMetadataresourcesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMetadataresourcesApi::comingSoonFeedCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAtom output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT comingSoonFeedSignal(output);
        Q_EMIT comingSoonFeedSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT comingSoonFeedSignalE(output, error_type, error_str);
        Q_EMIT comingSoonFeedSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT comingSoonFeedSignalError(output, error_type, error_str);
        Q_EMIT comingSoonFeedSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMetadataresourcesApi::comingSoonFeed_2(const QString &category, const ::OpenAPI::OptionalParam<QString> &platform) {
    QString fullPath = QString(_serverConfigs["comingSoonFeed_2"][_serverIndices.value("comingSoonFeed_2")].URL()+"/coming-soon/{category}.atom");
    
    if (_apiKeys.contains("apikey")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apikey=").append(_apiKeys.find("apikey").value());
    }
    
    
    {
        QString categoryPathParam("{");
        categoryPathParam.append("category").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "category", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"category"+pathSuffix : pathPrefix;
        fullPath.replace(categoryPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(category)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (platform.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "platform", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("platform")).append(querySuffix).append(QUrl::toPercentEncoding(platform.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMetadataresourcesApi::comingSoonFeed_2Callback);
    connect(this, &OAIMetadataresourcesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMetadataresourcesApi::comingSoonFeed_2Callback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAtom output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT comingSoonFeed_2Signal(output);
        Q_EMIT comingSoonFeed_2SignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT comingSoonFeed_2SignalE(output, error_type, error_str);
        Q_EMIT comingSoonFeed_2SignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT comingSoonFeed_2SignalError(output, error_type, error_str);
        Q_EMIT comingSoonFeed_2SignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMetadataresourcesApi::episodeGuideFeedEpisodeDetail(const QString &brand_web_safe_title, const QString &series_number, const QString &episode_number, const ::OpenAPI::OptionalParam<QString> &platform) {
    QString fullPath = QString(_serverConfigs["episodeGuideFeedEpisodeDetail"][_serverIndices.value("episodeGuideFeedEpisodeDetail")].URL()+"/{brand-web-safe-title}/episode-guide/series-{series_number}/episode-{episode_number}.atom");
    
    if (_apiKeys.contains("apikey")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apikey=").append(_apiKeys.find("apikey").value());
    }
    
    
    {
        QString brand_web_safe_titlePathParam("{");
        brand_web_safe_titlePathParam.append("brand-web-safe-title").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "brand-web-safe-title", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"brand-web-safe-title"+pathSuffix : pathPrefix;
        fullPath.replace(brand_web_safe_titlePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(brand_web_safe_title)));
    }
    
    {
        QString series_numberPathParam("{");
        series_numberPathParam.append("series_number").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "series_number", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"series_number"+pathSuffix : pathPrefix;
        fullPath.replace(series_numberPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(series_number)));
    }
    
    {
        QString episode_numberPathParam("{");
        episode_numberPathParam.append("episode_number").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "episode_number", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"episode_number"+pathSuffix : pathPrefix;
        fullPath.replace(episode_numberPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(episode_number)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (platform.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "platform", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("platform")).append(querySuffix).append(QUrl::toPercentEncoding(platform.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMetadataresourcesApi::episodeGuideFeedEpisodeDetailCallback);
    connect(this, &OAIMetadataresourcesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMetadataresourcesApi::episodeGuideFeedEpisodeDetailCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAtom output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT episodeGuideFeedEpisodeDetailSignal(output);
        Q_EMIT episodeGuideFeedEpisodeDetailSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT episodeGuideFeedEpisodeDetailSignalE(output, error_type, error_str);
        Q_EMIT episodeGuideFeedEpisodeDetailSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT episodeGuideFeedEpisodeDetailSignalError(output, error_type, error_str);
        Q_EMIT episodeGuideFeedEpisodeDetailSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMetadataresourcesApi::episodeGuideFeedSeriesDetail(const QString &brand_web_safe_title, const QString &series_number, const ::OpenAPI::OptionalParam<QString> &platform) {
    QString fullPath = QString(_serverConfigs["episodeGuideFeedSeriesDetail"][_serverIndices.value("episodeGuideFeedSeriesDetail")].URL()+"/{brand-web-safe-title}/episode-guide/series-{series_number}.atom");
    
    if (_apiKeys.contains("apikey")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apikey=").append(_apiKeys.find("apikey").value());
    }
    
    
    {
        QString brand_web_safe_titlePathParam("{");
        brand_web_safe_titlePathParam.append("brand-web-safe-title").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "brand-web-safe-title", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"brand-web-safe-title"+pathSuffix : pathPrefix;
        fullPath.replace(brand_web_safe_titlePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(brand_web_safe_title)));
    }
    
    {
        QString series_numberPathParam("{");
        series_numberPathParam.append("series_number").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "series_number", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"series_number"+pathSuffix : pathPrefix;
        fullPath.replace(series_numberPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(series_number)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (platform.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "platform", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("platform")).append(querySuffix).append(QUrl::toPercentEncoding(platform.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMetadataresourcesApi::episodeGuideFeedSeriesDetailCallback);
    connect(this, &OAIMetadataresourcesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMetadataresourcesApi::episodeGuideFeedSeriesDetailCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAtom output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT episodeGuideFeedSeriesDetailSignal(output);
        Q_EMIT episodeGuideFeedSeriesDetailSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT episodeGuideFeedSeriesDetailSignalE(output, error_type, error_str);
        Q_EMIT episodeGuideFeedSeriesDetailSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT episodeGuideFeedSeriesDetailSignalError(output, error_type, error_str);
        Q_EMIT episodeGuideFeedSeriesDetailSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMetadataresourcesApi::episodeGuideFeedSeriesLanding(const QString &brand_web_safe_title, const ::OpenAPI::OptionalParam<QString> &platform) {
    QString fullPath = QString(_serverConfigs["episodeGuideFeedSeriesLanding"][_serverIndices.value("episodeGuideFeedSeriesLanding")].URL()+"/{brand-web-safe-title}/episode-guide.atom");
    
    if (_apiKeys.contains("apikey")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apikey=").append(_apiKeys.find("apikey").value());
    }
    
    
    {
        QString brand_web_safe_titlePathParam("{");
        brand_web_safe_titlePathParam.append("brand-web-safe-title").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "brand-web-safe-title", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"brand-web-safe-title"+pathSuffix : pathPrefix;
        fullPath.replace(brand_web_safe_titlePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(brand_web_safe_title)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (platform.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "platform", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("platform")).append(querySuffix).append(QUrl::toPercentEncoding(platform.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMetadataresourcesApi::episodeGuideFeedSeriesLandingCallback);
    connect(this, &OAIMetadataresourcesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMetadataresourcesApi::episodeGuideFeedSeriesLandingCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAtom output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT episodeGuideFeedSeriesLandingSignal(output);
        Q_EMIT episodeGuideFeedSeriesLandingSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT episodeGuideFeedSeriesLandingSignalE(output, error_type, error_str);
        Q_EMIT episodeGuideFeedSeriesLandingSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT episodeGuideFeedSeriesLandingSignalError(output, error_type, error_str);
        Q_EMIT episodeGuideFeedSeriesLandingSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMetadataresourcesApi::hubFeed(const QString &brand_web_safe_title, const ::OpenAPI::OptionalParam<QString> &platform) {
    QString fullPath = QString(_serverConfigs["hubFeed"][_serverIndices.value("hubFeed")].URL()+"/{brand-web-safe-title}.atom");
    
    if (_apiKeys.contains("apikey")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apikey=").append(_apiKeys.find("apikey").value());
    }
    
    
    {
        QString brand_web_safe_titlePathParam("{");
        brand_web_safe_titlePathParam.append("brand-web-safe-title").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "brand-web-safe-title", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"brand-web-safe-title"+pathSuffix : pathPrefix;
        fullPath.replace(brand_web_safe_titlePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(brand_web_safe_title)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (platform.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "platform", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("platform")).append(querySuffix).append(QUrl::toPercentEncoding(platform.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMetadataresourcesApi::hubFeedCallback);
    connect(this, &OAIMetadataresourcesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMetadataresourcesApi::hubFeedCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAtom output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT hubFeedSignal(output);
        Q_EMIT hubFeedSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT hubFeedSignalE(output, error_type, error_str);
        Q_EMIT hubFeedSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT hubFeedSignalError(output, error_type, error_str);
        Q_EMIT hubFeedSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMetadataresourcesApi::programmeFeed(const QString &programme_id, const ::OpenAPI::OptionalParam<QString> &platform) {
    QString fullPath = QString(_serverConfigs["programmeFeed"][_serverIndices.value("programmeFeed")].URL()+"/programme/{programme-id}.atom");
    
    if (_apiKeys.contains("apikey")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apikey=").append(_apiKeys.find("apikey").value());
    }
    
    
    {
        QString programme_idPathParam("{");
        programme_idPathParam.append("programme-id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "programme-id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"programme-id"+pathSuffix : pathPrefix;
        fullPath.replace(programme_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(programme_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (platform.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "platform", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("platform")).append(querySuffix).append(QUrl::toPercentEncoding(platform.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMetadataresourcesApi::programmeFeedCallback);
    connect(this, &OAIMetadataresourcesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMetadataresourcesApi::programmeFeedCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAtom output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT programmeFeedSignal(output);
        Q_EMIT programmeFeedSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT programmeFeedSignalE(output, error_type, error_str);
        Q_EMIT programmeFeedSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT programmeFeedSignalError(output, error_type, error_str);
        Q_EMIT programmeFeedSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMetadataresourcesApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
