/**
 * Channel 4 API
 * This is the place to come for all the technical details you need to power your applications with Channel 4's deep programmes data.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer@channel4.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDiscoveryresourcesApi_H
#define OAI_OAIDiscoveryresourcesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAtom.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDiscoveryresourcesApi : public QObject {
    Q_OBJECT

public:
    OAIDiscoveryresourcesApi(const int timeOut = 0);
    ~OAIDiscoveryresourcesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  yyyy QString [required]
    * @param[in]  mm QString [required]
    * @param[in]  dd QString [required]
    * @param[in]  platform QString [optional]
    */
    virtual void 4oDBrowseByDateFeed(const QString &yyyy, const QString &mm, const QString &dd, const ::OpenAPI::OptionalParam<QString> &platform = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  platform QString [optional]
    */
    virtual void 4oDClipsCatchUpFeed(const ::OpenAPI::OptionalParam<QString> &platform = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  platform QString [optional]
    */
    virtual void 4oDMostPopularEpisodesFeed(const ::OpenAPI::OptionalParam<QString> &platform = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  platform QString [optional]
    */
    virtual void 4oDPopularAllBrandsFeed(const ::OpenAPI::OptionalParam<QString> &platform = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pageno qint32 [required]
    * @param[in]  platform QString [optional]
    */
    virtual void 4oDPopularAllBrandsFeed_2(const qint32 &pageno, const ::OpenAPI::OptionalParam<QString> &platform = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  category QString [required]
    * @param[in]  platform QString [optional]
    */
    virtual void 4oDProgrammesByTXDate(const QString &category, const ::OpenAPI::OptionalParam<QString> &platform = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  category QString [required]
    * @param[in]  channel QString [required]
    * @param[in]  platform QString [optional]
    */
    virtual void 4oDProgrammesByTXDate_2(const QString &category, const QString &channel, const ::OpenAPI::OptionalParam<QString> &platform = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  category QString [required]
    * @param[in]  platform QString [optional]
    */
    virtual void 4oDProgrammesByTXDate_3(const QString &category, const ::OpenAPI::OptionalParam<QString> &platform = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  category QString [required]
    * @param[in]  pageno qint32 [required]
    * @param[in]  platform QString [optional]
    */
    virtual void 4oDProgrammesByTXDate_4(const QString &category, const qint32 &pageno, const ::OpenAPI::OptionalParam<QString> &platform = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  category QString [required]
    * @param[in]  channel QString [required]
    * @param[in]  pageno qint32 [required]
    * @param[in]  platform QString [optional]
    */
    virtual void 4oDProgrammesByTXDate_5(const QString &category, const QString &channel, const qint32 &pageno, const ::OpenAPI::OptionalParam<QString> &platform = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  category QString [required]
    * @param[in]  pageno qint32 [required]
    * @param[in]  platform QString [optional]
    */
    virtual void 4oDProgrammesByTXDate_6(const QString &category, const qint32 &pageno, const ::OpenAPI::OptionalParam<QString> &platform = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  category QString [required]
    * @param[in]  platform QString [optional]
    */
    virtual void 4oDProgrammesByTitle(const QString &category, const ::OpenAPI::OptionalParam<QString> &platform = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  category QString [required]
    * @param[in]  channel QString [required]
    * @param[in]  platform QString [optional]
    */
    virtual void 4oDProgrammesByTitle_2(const QString &category, const QString &channel, const ::OpenAPI::OptionalParam<QString> &platform = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  category QString [required]
    * @param[in]  platform QString [optional]
    */
    virtual void 4oDProgrammesByTitle_3(const QString &category, const ::OpenAPI::OptionalParam<QString> &platform = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  category QString [required]
    * @param[in]  pageno qint32 [required]
    * @param[in]  platform QString [optional]
    */
    virtual void 4oDProgrammesByTitle_4(const QString &category, const qint32 &pageno, const ::OpenAPI::OptionalParam<QString> &platform = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  category QString [required]
    * @param[in]  channel QString [required]
    * @param[in]  pageno qint32 [required]
    * @param[in]  platform QString [optional]
    */
    virtual void 4oDProgrammesByTitle_5(const QString &category, const QString &channel, const qint32 &pageno, const ::OpenAPI::OptionalParam<QString> &platform = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  category QString [required]
    * @param[in]  pageno qint32 [required]
    * @param[in]  platform QString [optional]
    */
    virtual void 4oDProgrammesByTitle_6(const QString &category, const qint32 &pageno, const ::OpenAPI::OptionalParam<QString> &platform = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  platform QString [optional]
    */
    virtual void 4oDTitleAllBrandsFeed(const ::OpenAPI::OptionalParam<QString> &platform = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pageno qint32 [required]
    * @param[in]  platform QString [optional]
    */
    virtual void 4oDTitleAllBrandsFeed_2(const qint32 &pageno, const ::OpenAPI::OptionalParam<QString> &platform = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  platform QString [optional]
    */
    virtual void aToZLandingFeed(const ::OpenAPI::OptionalParam<QString> &platform = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  start_letter QString [required]
    * @param[in]  platform QString [optional]
    */
    virtual void aToZLetterFeed(const QString &start_letter, const ::OpenAPI::OptionalParam<QString> &platform = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  start_letter QString [required]
    * @param[in]  pageno qint32 [required]
    * @param[in]  platform QString [optional]
    */
    virtual void aToZLetterFeed_2(const QString &start_letter, const qint32 &pageno, const ::OpenAPI::OptionalParam<QString> &platform = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  category QString [required]
    * @param[in]  platform QString [optional]
    */
    virtual void allProgrammesByTXDate(const QString &category, const ::OpenAPI::OptionalParam<QString> &platform = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  category QString [required]
    * @param[in]  channel QString [required]
    * @param[in]  platform QString [optional]
    */
    virtual void allProgrammesByTXDate_2(const QString &category, const QString &channel, const ::OpenAPI::OptionalParam<QString> &platform = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  category QString [required]
    * @param[in]  platform QString [optional]
    */
    virtual void allProgrammesByTXDate_3(const QString &category, const ::OpenAPI::OptionalParam<QString> &platform = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  category QString [required]
    * @param[in]  pageno qint32 [required]
    * @param[in]  platform QString [optional]
    */
    virtual void allProgrammesByTXDate_4(const QString &category, const qint32 &pageno, const ::OpenAPI::OptionalParam<QString> &platform = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  category QString [required]
    * @param[in]  channel QString [required]
    * @param[in]  pageno qint32 [required]
    * @param[in]  platform QString [optional]
    */
    virtual void allProgrammesByTXDate_5(const QString &category, const QString &channel, const qint32 &pageno, const ::OpenAPI::OptionalParam<QString> &platform = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  category QString [required]
    * @param[in]  pageno qint32 [required]
    * @param[in]  platform QString [optional]
    */
    virtual void allProgrammesByTXDate_6(const QString &category, const qint32 &pageno, const ::OpenAPI::OptionalParam<QString> &platform = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  category QString [required]
    * @param[in]  platform QString [optional]
    */
    virtual void allProgrammesByTitle(const QString &category, const ::OpenAPI::OptionalParam<QString> &platform = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  category QString [required]
    * @param[in]  channel QString [required]
    * @param[in]  platform QString [optional]
    */
    virtual void allProgrammesByTitle_2(const QString &category, const QString &channel, const ::OpenAPI::OptionalParam<QString> &platform = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  category QString [required]
    * @param[in]  platform QString [optional]
    */
    virtual void allProgrammesByTitle_3(const QString &category, const ::OpenAPI::OptionalParam<QString> &platform = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  category QString [required]
    * @param[in]  pageno qint32 [required]
    * @param[in]  platform QString [optional]
    */
    virtual void allProgrammesByTitle_4(const QString &category, const qint32 &pageno, const ::OpenAPI::OptionalParam<QString> &platform = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  category QString [required]
    * @param[in]  channel QString [required]
    * @param[in]  pageno qint32 [required]
    * @param[in]  platform QString [optional]
    */
    virtual void allProgrammesByTitle_5(const QString &category, const QString &channel, const qint32 &pageno, const ::OpenAPI::OptionalParam<QString> &platform = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  category QString [required]
    * @param[in]  pageno qint32 [required]
    * @param[in]  platform QString [optional]
    */
    virtual void allProgrammesByTitle_6(const QString &category, const qint32 &pageno, const ::OpenAPI::OptionalParam<QString> &platform = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  platform QString [optional]
    */
    virtual void categoriesLandingFeed(const ::OpenAPI::OptionalParam<QString> &platform = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  collection_name QString [required]
    * @param[in]  platform QString [optional]
    */
    virtual void collectionsFeed(const QString &collection_name, const ::OpenAPI::OptionalParam<QString> &platform = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  collection_name QString [required]
    * @param[in]  platform QString [optional]
    */
    virtual void collectionsFeed_2(const QString &collection_name, const ::OpenAPI::OptionalParam<QString> &platform = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  collection_name QString [required]
    * @param[in]  platform QString [optional]
    */
    virtual void flattenedCollectionFeed(const QString &collection_name, const ::OpenAPI::OptionalParam<QString> &platform = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  collection_name QString [required]
    * @param[in]  platform QString [optional]
    */
    virtual void flattenedCollectionFeed_2(const QString &collection_name, const ::OpenAPI::OptionalParam<QString> &platform = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  category QString [required]
    * @param[in]  platform QString [optional]
    */
    virtual void mostPopularBrandsFeed(const QString &category, const ::OpenAPI::OptionalParam<QString> &platform = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  category QString [required]
    * @param[in]  platform QString [optional]
    */
    virtual void mostPopularBrandsFeed_2(const QString &category, const ::OpenAPI::OptionalParam<QString> &platform = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  category QString [required]
    * @param[in]  channel QString [required]
    * @param[in]  platform QString [optional]
    */
    virtual void mostPopularBrandsFeed_3(const QString &category, const QString &channel, const ::OpenAPI::OptionalParam<QString> &platform = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  category QString [required]
    * @param[in]  platform QString [optional]
    */
    virtual void mostPopularBrandsFeed_4(const QString &category, const ::OpenAPI::OptionalParam<QString> &platform = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  category QString [required]
    * @param[in]  pageno qint32 [required]
    * @param[in]  platform QString [optional]
    */
    virtual void mostPopularBrandsFeed_5(const QString &category, const qint32 &pageno, const ::OpenAPI::OptionalParam<QString> &platform = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  category QString [required]
    * @param[in]  pageno qint32 [required]
    * @param[in]  platform QString [optional]
    */
    virtual void mostPopularBrandsFeed_6(const QString &category, const qint32 &pageno, const ::OpenAPI::OptionalParam<QString> &platform = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  category QString [required]
    * @param[in]  channel QString [required]
    * @param[in]  pageno qint32 [required]
    * @param[in]  platform QString [optional]
    */
    virtual void mostPopularBrandsFeed_7(const QString &category, const QString &channel, const qint32 &pageno, const ::OpenAPI::OptionalParam<QString> &platform = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  category QString [required]
    * @param[in]  pageno qint32 [required]
    * @param[in]  platform QString [optional]
    */
    virtual void mostPopularBrandsFeed_8(const QString &category, const qint32 &pageno, const ::OpenAPI::OptionalParam<QString> &platform = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  platform QString [optional]
    */
    virtual void popularBrandsFeed(const ::OpenAPI::OptionalParam<QString> &platform = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pageno qint32 [required]
    * @param[in]  platform QString [optional]
    */
    virtual void popularBrandsFeed_2(const qint32 &pageno, const ::OpenAPI::OptionalParam<QString> &platform = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  q QString [required]
    * @param[in]  platform QString [optional]
    */
    virtual void searchFeed(const QString &q, const ::OpenAPI::OptionalParam<QString> &platform = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  q QString [required]
    * @param[in]  platform QString [optional]
    */
    virtual void searchFeed_2(const QString &q, const ::OpenAPI::OptionalParam<QString> &platform = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  q QString [required]
    * @param[in]  pageno qint32 [required]
    * @param[in]  platform QString [optional]
    */
    virtual void searchFeed_3(const QString &q, const qint32 &pageno, const ::OpenAPI::OptionalParam<QString> &platform = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  q QString [required]
    * @param[in]  pageno qint32 [required]
    * @param[in]  platform QString [optional]
    */
    virtual void searchFeed_4(const QString &q, const qint32 &pageno, const ::OpenAPI::OptionalParam<QString> &platform = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  yyyy QString [required]
    * @param[in]  mm QString [required]
    * @param[in]  dd QString [required]
    * @param[in]  platform QString [optional]
    */
    virtual void tVListingsFeed(const QString &yyyy, const QString &mm, const QString &dd, const ::OpenAPI::OptionalParam<QString> &platform = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  yyyy QString [required]
    * @param[in]  mm QString [required]
    * @param[in]  dd QString [required]
    * @param[in]  channel QString [required]
    * @param[in]  platform QString [optional]
    */
    virtual void tVListingsFeed_2(const QString &yyyy, const QString &mm, const QString &dd, const QString &channel, const ::OpenAPI::OptionalParam<QString> &platform = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void 4oDBrowseByDateFeedCallback(OAIHttpRequestWorker *worker);
    void 4oDClipsCatchUpFeedCallback(OAIHttpRequestWorker *worker);
    void 4oDMostPopularEpisodesFeedCallback(OAIHttpRequestWorker *worker);
    void 4oDPopularAllBrandsFeedCallback(OAIHttpRequestWorker *worker);
    void 4oDPopularAllBrandsFeed_2Callback(OAIHttpRequestWorker *worker);
    void 4oDProgrammesByTXDateCallback(OAIHttpRequestWorker *worker);
    void 4oDProgrammesByTXDate_2Callback(OAIHttpRequestWorker *worker);
    void 4oDProgrammesByTXDate_3Callback(OAIHttpRequestWorker *worker);
    void 4oDProgrammesByTXDate_4Callback(OAIHttpRequestWorker *worker);
    void 4oDProgrammesByTXDate_5Callback(OAIHttpRequestWorker *worker);
    void 4oDProgrammesByTXDate_6Callback(OAIHttpRequestWorker *worker);
    void 4oDProgrammesByTitleCallback(OAIHttpRequestWorker *worker);
    void 4oDProgrammesByTitle_2Callback(OAIHttpRequestWorker *worker);
    void 4oDProgrammesByTitle_3Callback(OAIHttpRequestWorker *worker);
    void 4oDProgrammesByTitle_4Callback(OAIHttpRequestWorker *worker);
    void 4oDProgrammesByTitle_5Callback(OAIHttpRequestWorker *worker);
    void 4oDProgrammesByTitle_6Callback(OAIHttpRequestWorker *worker);
    void 4oDTitleAllBrandsFeedCallback(OAIHttpRequestWorker *worker);
    void 4oDTitleAllBrandsFeed_2Callback(OAIHttpRequestWorker *worker);
    void aToZLandingFeedCallback(OAIHttpRequestWorker *worker);
    void aToZLetterFeedCallback(OAIHttpRequestWorker *worker);
    void aToZLetterFeed_2Callback(OAIHttpRequestWorker *worker);
    void allProgrammesByTXDateCallback(OAIHttpRequestWorker *worker);
    void allProgrammesByTXDate_2Callback(OAIHttpRequestWorker *worker);
    void allProgrammesByTXDate_3Callback(OAIHttpRequestWorker *worker);
    void allProgrammesByTXDate_4Callback(OAIHttpRequestWorker *worker);
    void allProgrammesByTXDate_5Callback(OAIHttpRequestWorker *worker);
    void allProgrammesByTXDate_6Callback(OAIHttpRequestWorker *worker);
    void allProgrammesByTitleCallback(OAIHttpRequestWorker *worker);
    void allProgrammesByTitle_2Callback(OAIHttpRequestWorker *worker);
    void allProgrammesByTitle_3Callback(OAIHttpRequestWorker *worker);
    void allProgrammesByTitle_4Callback(OAIHttpRequestWorker *worker);
    void allProgrammesByTitle_5Callback(OAIHttpRequestWorker *worker);
    void allProgrammesByTitle_6Callback(OAIHttpRequestWorker *worker);
    void categoriesLandingFeedCallback(OAIHttpRequestWorker *worker);
    void collectionsFeedCallback(OAIHttpRequestWorker *worker);
    void collectionsFeed_2Callback(OAIHttpRequestWorker *worker);
    void flattenedCollectionFeedCallback(OAIHttpRequestWorker *worker);
    void flattenedCollectionFeed_2Callback(OAIHttpRequestWorker *worker);
    void mostPopularBrandsFeedCallback(OAIHttpRequestWorker *worker);
    void mostPopularBrandsFeed_2Callback(OAIHttpRequestWorker *worker);
    void mostPopularBrandsFeed_3Callback(OAIHttpRequestWorker *worker);
    void mostPopularBrandsFeed_4Callback(OAIHttpRequestWorker *worker);
    void mostPopularBrandsFeed_5Callback(OAIHttpRequestWorker *worker);
    void mostPopularBrandsFeed_6Callback(OAIHttpRequestWorker *worker);
    void mostPopularBrandsFeed_7Callback(OAIHttpRequestWorker *worker);
    void mostPopularBrandsFeed_8Callback(OAIHttpRequestWorker *worker);
    void popularBrandsFeedCallback(OAIHttpRequestWorker *worker);
    void popularBrandsFeed_2Callback(OAIHttpRequestWorker *worker);
    void searchFeedCallback(OAIHttpRequestWorker *worker);
    void searchFeed_2Callback(OAIHttpRequestWorker *worker);
    void searchFeed_3Callback(OAIHttpRequestWorker *worker);
    void searchFeed_4Callback(OAIHttpRequestWorker *worker);
    void tVListingsFeedCallback(OAIHttpRequestWorker *worker);
    void tVListingsFeed_2Callback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void 4oDBrowseByDateFeedSignal(OAIAtom summary);
    void 4oDClipsCatchUpFeedSignal(OAIAtom summary);
    void 4oDMostPopularEpisodesFeedSignal(OAIAtom summary);
    void 4oDPopularAllBrandsFeedSignal(OAIAtom summary);
    void 4oDPopularAllBrandsFeed_2Signal(OAIAtom summary);
    void 4oDProgrammesByTXDateSignal(OAIAtom summary);
    void 4oDProgrammesByTXDate_2Signal(OAIAtom summary);
    void 4oDProgrammesByTXDate_3Signal(OAIAtom summary);
    void 4oDProgrammesByTXDate_4Signal(OAIAtom summary);
    void 4oDProgrammesByTXDate_5Signal(OAIAtom summary);
    void 4oDProgrammesByTXDate_6Signal(OAIAtom summary);
    void 4oDProgrammesByTitleSignal(OAIAtom summary);
    void 4oDProgrammesByTitle_2Signal(OAIAtom summary);
    void 4oDProgrammesByTitle_3Signal(OAIAtom summary);
    void 4oDProgrammesByTitle_4Signal(OAIAtom summary);
    void 4oDProgrammesByTitle_5Signal(OAIAtom summary);
    void 4oDProgrammesByTitle_6Signal(OAIAtom summary);
    void 4oDTitleAllBrandsFeedSignal(OAIAtom summary);
    void 4oDTitleAllBrandsFeed_2Signal(OAIAtom summary);
    void aToZLandingFeedSignal(OAIAtom summary);
    void aToZLetterFeedSignal(OAIAtom summary);
    void aToZLetterFeed_2Signal(OAIAtom summary);
    void allProgrammesByTXDateSignal(OAIAtom summary);
    void allProgrammesByTXDate_2Signal(OAIAtom summary);
    void allProgrammesByTXDate_3Signal(OAIAtom summary);
    void allProgrammesByTXDate_4Signal(OAIAtom summary);
    void allProgrammesByTXDate_5Signal(OAIAtom summary);
    void allProgrammesByTXDate_6Signal(OAIAtom summary);
    void allProgrammesByTitleSignal(OAIAtom summary);
    void allProgrammesByTitle_2Signal(OAIAtom summary);
    void allProgrammesByTitle_3Signal(OAIAtom summary);
    void allProgrammesByTitle_4Signal(OAIAtom summary);
    void allProgrammesByTitle_5Signal(OAIAtom summary);
    void allProgrammesByTitle_6Signal(OAIAtom summary);
    void categoriesLandingFeedSignal(OAIAtom summary);
    void collectionsFeedSignal(OAIAtom summary);
    void collectionsFeed_2Signal(OAIAtom summary);
    void flattenedCollectionFeedSignal(OAIAtom summary);
    void flattenedCollectionFeed_2Signal(OAIAtom summary);
    void mostPopularBrandsFeedSignal(OAIAtom summary);
    void mostPopularBrandsFeed_2Signal(OAIAtom summary);
    void mostPopularBrandsFeed_3Signal(OAIAtom summary);
    void mostPopularBrandsFeed_4Signal(OAIAtom summary);
    void mostPopularBrandsFeed_5Signal(OAIAtom summary);
    void mostPopularBrandsFeed_6Signal(OAIAtom summary);
    void mostPopularBrandsFeed_7Signal(OAIAtom summary);
    void mostPopularBrandsFeed_8Signal(OAIAtom summary);
    void popularBrandsFeedSignal(OAIAtom summary);
    void popularBrandsFeed_2Signal(OAIAtom summary);
    void searchFeedSignal(OAIAtom summary);
    void searchFeed_2Signal(OAIAtom summary);
    void searchFeed_3Signal(OAIAtom summary);
    void searchFeed_4Signal(OAIAtom summary);
    void tVListingsFeedSignal(OAIAtom summary);
    void tVListingsFeed_2Signal(OAIAtom summary);


    void 4oDBrowseByDateFeedSignalFull(OAIHttpRequestWorker *worker, OAIAtom summary);
    void 4oDClipsCatchUpFeedSignalFull(OAIHttpRequestWorker *worker, OAIAtom summary);
    void 4oDMostPopularEpisodesFeedSignalFull(OAIHttpRequestWorker *worker, OAIAtom summary);
    void 4oDPopularAllBrandsFeedSignalFull(OAIHttpRequestWorker *worker, OAIAtom summary);
    void 4oDPopularAllBrandsFeed_2SignalFull(OAIHttpRequestWorker *worker, OAIAtom summary);
    void 4oDProgrammesByTXDateSignalFull(OAIHttpRequestWorker *worker, OAIAtom summary);
    void 4oDProgrammesByTXDate_2SignalFull(OAIHttpRequestWorker *worker, OAIAtom summary);
    void 4oDProgrammesByTXDate_3SignalFull(OAIHttpRequestWorker *worker, OAIAtom summary);
    void 4oDProgrammesByTXDate_4SignalFull(OAIHttpRequestWorker *worker, OAIAtom summary);
    void 4oDProgrammesByTXDate_5SignalFull(OAIHttpRequestWorker *worker, OAIAtom summary);
    void 4oDProgrammesByTXDate_6SignalFull(OAIHttpRequestWorker *worker, OAIAtom summary);
    void 4oDProgrammesByTitleSignalFull(OAIHttpRequestWorker *worker, OAIAtom summary);
    void 4oDProgrammesByTitle_2SignalFull(OAIHttpRequestWorker *worker, OAIAtom summary);
    void 4oDProgrammesByTitle_3SignalFull(OAIHttpRequestWorker *worker, OAIAtom summary);
    void 4oDProgrammesByTitle_4SignalFull(OAIHttpRequestWorker *worker, OAIAtom summary);
    void 4oDProgrammesByTitle_5SignalFull(OAIHttpRequestWorker *worker, OAIAtom summary);
    void 4oDProgrammesByTitle_6SignalFull(OAIHttpRequestWorker *worker, OAIAtom summary);
    void 4oDTitleAllBrandsFeedSignalFull(OAIHttpRequestWorker *worker, OAIAtom summary);
    void 4oDTitleAllBrandsFeed_2SignalFull(OAIHttpRequestWorker *worker, OAIAtom summary);
    void aToZLandingFeedSignalFull(OAIHttpRequestWorker *worker, OAIAtom summary);
    void aToZLetterFeedSignalFull(OAIHttpRequestWorker *worker, OAIAtom summary);
    void aToZLetterFeed_2SignalFull(OAIHttpRequestWorker *worker, OAIAtom summary);
    void allProgrammesByTXDateSignalFull(OAIHttpRequestWorker *worker, OAIAtom summary);
    void allProgrammesByTXDate_2SignalFull(OAIHttpRequestWorker *worker, OAIAtom summary);
    void allProgrammesByTXDate_3SignalFull(OAIHttpRequestWorker *worker, OAIAtom summary);
    void allProgrammesByTXDate_4SignalFull(OAIHttpRequestWorker *worker, OAIAtom summary);
    void allProgrammesByTXDate_5SignalFull(OAIHttpRequestWorker *worker, OAIAtom summary);
    void allProgrammesByTXDate_6SignalFull(OAIHttpRequestWorker *worker, OAIAtom summary);
    void allProgrammesByTitleSignalFull(OAIHttpRequestWorker *worker, OAIAtom summary);
    void allProgrammesByTitle_2SignalFull(OAIHttpRequestWorker *worker, OAIAtom summary);
    void allProgrammesByTitle_3SignalFull(OAIHttpRequestWorker *worker, OAIAtom summary);
    void allProgrammesByTitle_4SignalFull(OAIHttpRequestWorker *worker, OAIAtom summary);
    void allProgrammesByTitle_5SignalFull(OAIHttpRequestWorker *worker, OAIAtom summary);
    void allProgrammesByTitle_6SignalFull(OAIHttpRequestWorker *worker, OAIAtom summary);
    void categoriesLandingFeedSignalFull(OAIHttpRequestWorker *worker, OAIAtom summary);
    void collectionsFeedSignalFull(OAIHttpRequestWorker *worker, OAIAtom summary);
    void collectionsFeed_2SignalFull(OAIHttpRequestWorker *worker, OAIAtom summary);
    void flattenedCollectionFeedSignalFull(OAIHttpRequestWorker *worker, OAIAtom summary);
    void flattenedCollectionFeed_2SignalFull(OAIHttpRequestWorker *worker, OAIAtom summary);
    void mostPopularBrandsFeedSignalFull(OAIHttpRequestWorker *worker, OAIAtom summary);
    void mostPopularBrandsFeed_2SignalFull(OAIHttpRequestWorker *worker, OAIAtom summary);
    void mostPopularBrandsFeed_3SignalFull(OAIHttpRequestWorker *worker, OAIAtom summary);
    void mostPopularBrandsFeed_4SignalFull(OAIHttpRequestWorker *worker, OAIAtom summary);
    void mostPopularBrandsFeed_5SignalFull(OAIHttpRequestWorker *worker, OAIAtom summary);
    void mostPopularBrandsFeed_6SignalFull(OAIHttpRequestWorker *worker, OAIAtom summary);
    void mostPopularBrandsFeed_7SignalFull(OAIHttpRequestWorker *worker, OAIAtom summary);
    void mostPopularBrandsFeed_8SignalFull(OAIHttpRequestWorker *worker, OAIAtom summary);
    void popularBrandsFeedSignalFull(OAIHttpRequestWorker *worker, OAIAtom summary);
    void popularBrandsFeed_2SignalFull(OAIHttpRequestWorker *worker, OAIAtom summary);
    void searchFeedSignalFull(OAIHttpRequestWorker *worker, OAIAtom summary);
    void searchFeed_2SignalFull(OAIHttpRequestWorker *worker, OAIAtom summary);
    void searchFeed_3SignalFull(OAIHttpRequestWorker *worker, OAIAtom summary);
    void searchFeed_4SignalFull(OAIHttpRequestWorker *worker, OAIAtom summary);
    void tVListingsFeedSignalFull(OAIHttpRequestWorker *worker, OAIAtom summary);
    void tVListingsFeed_2SignalFull(OAIHttpRequestWorker *worker, OAIAtom summary);

    Q_DECL_DEPRECATED_X("Use 4oDBrowseByDateFeedSignalError() instead")
    void 4oDBrowseByDateFeedSignalE(OAIAtom summary, QNetworkReply::NetworkError error_type, QString error_str);
    void 4oDBrowseByDateFeedSignalError(OAIAtom summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use 4oDClipsCatchUpFeedSignalError() instead")
    void 4oDClipsCatchUpFeedSignalE(OAIAtom summary, QNetworkReply::NetworkError error_type, QString error_str);
    void 4oDClipsCatchUpFeedSignalError(OAIAtom summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use 4oDMostPopularEpisodesFeedSignalError() instead")
    void 4oDMostPopularEpisodesFeedSignalE(OAIAtom summary, QNetworkReply::NetworkError error_type, QString error_str);
    void 4oDMostPopularEpisodesFeedSignalError(OAIAtom summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use 4oDPopularAllBrandsFeedSignalError() instead")
    void 4oDPopularAllBrandsFeedSignalE(OAIAtom summary, QNetworkReply::NetworkError error_type, QString error_str);
    void 4oDPopularAllBrandsFeedSignalError(OAIAtom summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use 4oDPopularAllBrandsFeed_2SignalError() instead")
    void 4oDPopularAllBrandsFeed_2SignalE(OAIAtom summary, QNetworkReply::NetworkError error_type, QString error_str);
    void 4oDPopularAllBrandsFeed_2SignalError(OAIAtom summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use 4oDProgrammesByTXDateSignalError() instead")
    void 4oDProgrammesByTXDateSignalE(OAIAtom summary, QNetworkReply::NetworkError error_type, QString error_str);
    void 4oDProgrammesByTXDateSignalError(OAIAtom summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use 4oDProgrammesByTXDate_2SignalError() instead")
    void 4oDProgrammesByTXDate_2SignalE(OAIAtom summary, QNetworkReply::NetworkError error_type, QString error_str);
    void 4oDProgrammesByTXDate_2SignalError(OAIAtom summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use 4oDProgrammesByTXDate_3SignalError() instead")
    void 4oDProgrammesByTXDate_3SignalE(OAIAtom summary, QNetworkReply::NetworkError error_type, QString error_str);
    void 4oDProgrammesByTXDate_3SignalError(OAIAtom summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use 4oDProgrammesByTXDate_4SignalError() instead")
    void 4oDProgrammesByTXDate_4SignalE(OAIAtom summary, QNetworkReply::NetworkError error_type, QString error_str);
    void 4oDProgrammesByTXDate_4SignalError(OAIAtom summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use 4oDProgrammesByTXDate_5SignalError() instead")
    void 4oDProgrammesByTXDate_5SignalE(OAIAtom summary, QNetworkReply::NetworkError error_type, QString error_str);
    void 4oDProgrammesByTXDate_5SignalError(OAIAtom summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use 4oDProgrammesByTXDate_6SignalError() instead")
    void 4oDProgrammesByTXDate_6SignalE(OAIAtom summary, QNetworkReply::NetworkError error_type, QString error_str);
    void 4oDProgrammesByTXDate_6SignalError(OAIAtom summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use 4oDProgrammesByTitleSignalError() instead")
    void 4oDProgrammesByTitleSignalE(OAIAtom summary, QNetworkReply::NetworkError error_type, QString error_str);
    void 4oDProgrammesByTitleSignalError(OAIAtom summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use 4oDProgrammesByTitle_2SignalError() instead")
    void 4oDProgrammesByTitle_2SignalE(OAIAtom summary, QNetworkReply::NetworkError error_type, QString error_str);
    void 4oDProgrammesByTitle_2SignalError(OAIAtom summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use 4oDProgrammesByTitle_3SignalError() instead")
    void 4oDProgrammesByTitle_3SignalE(OAIAtom summary, QNetworkReply::NetworkError error_type, QString error_str);
    void 4oDProgrammesByTitle_3SignalError(OAIAtom summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use 4oDProgrammesByTitle_4SignalError() instead")
    void 4oDProgrammesByTitle_4SignalE(OAIAtom summary, QNetworkReply::NetworkError error_type, QString error_str);
    void 4oDProgrammesByTitle_4SignalError(OAIAtom summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use 4oDProgrammesByTitle_5SignalError() instead")
    void 4oDProgrammesByTitle_5SignalE(OAIAtom summary, QNetworkReply::NetworkError error_type, QString error_str);
    void 4oDProgrammesByTitle_5SignalError(OAIAtom summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use 4oDProgrammesByTitle_6SignalError() instead")
    void 4oDProgrammesByTitle_6SignalE(OAIAtom summary, QNetworkReply::NetworkError error_type, QString error_str);
    void 4oDProgrammesByTitle_6SignalError(OAIAtom summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use 4oDTitleAllBrandsFeedSignalError() instead")
    void 4oDTitleAllBrandsFeedSignalE(OAIAtom summary, QNetworkReply::NetworkError error_type, QString error_str);
    void 4oDTitleAllBrandsFeedSignalError(OAIAtom summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use 4oDTitleAllBrandsFeed_2SignalError() instead")
    void 4oDTitleAllBrandsFeed_2SignalE(OAIAtom summary, QNetworkReply::NetworkError error_type, QString error_str);
    void 4oDTitleAllBrandsFeed_2SignalError(OAIAtom summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aToZLandingFeedSignalError() instead")
    void aToZLandingFeedSignalE(OAIAtom summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aToZLandingFeedSignalError(OAIAtom summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aToZLetterFeedSignalError() instead")
    void aToZLetterFeedSignalE(OAIAtom summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aToZLetterFeedSignalError(OAIAtom summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aToZLetterFeed_2SignalError() instead")
    void aToZLetterFeed_2SignalE(OAIAtom summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aToZLetterFeed_2SignalError(OAIAtom summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use allProgrammesByTXDateSignalError() instead")
    void allProgrammesByTXDateSignalE(OAIAtom summary, QNetworkReply::NetworkError error_type, QString error_str);
    void allProgrammesByTXDateSignalError(OAIAtom summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use allProgrammesByTXDate_2SignalError() instead")
    void allProgrammesByTXDate_2SignalE(OAIAtom summary, QNetworkReply::NetworkError error_type, QString error_str);
    void allProgrammesByTXDate_2SignalError(OAIAtom summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use allProgrammesByTXDate_3SignalError() instead")
    void allProgrammesByTXDate_3SignalE(OAIAtom summary, QNetworkReply::NetworkError error_type, QString error_str);
    void allProgrammesByTXDate_3SignalError(OAIAtom summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use allProgrammesByTXDate_4SignalError() instead")
    void allProgrammesByTXDate_4SignalE(OAIAtom summary, QNetworkReply::NetworkError error_type, QString error_str);
    void allProgrammesByTXDate_4SignalError(OAIAtom summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use allProgrammesByTXDate_5SignalError() instead")
    void allProgrammesByTXDate_5SignalE(OAIAtom summary, QNetworkReply::NetworkError error_type, QString error_str);
    void allProgrammesByTXDate_5SignalError(OAIAtom summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use allProgrammesByTXDate_6SignalError() instead")
    void allProgrammesByTXDate_6SignalE(OAIAtom summary, QNetworkReply::NetworkError error_type, QString error_str);
    void allProgrammesByTXDate_6SignalError(OAIAtom summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use allProgrammesByTitleSignalError() instead")
    void allProgrammesByTitleSignalE(OAIAtom summary, QNetworkReply::NetworkError error_type, QString error_str);
    void allProgrammesByTitleSignalError(OAIAtom summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use allProgrammesByTitle_2SignalError() instead")
    void allProgrammesByTitle_2SignalE(OAIAtom summary, QNetworkReply::NetworkError error_type, QString error_str);
    void allProgrammesByTitle_2SignalError(OAIAtom summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use allProgrammesByTitle_3SignalError() instead")
    void allProgrammesByTitle_3SignalE(OAIAtom summary, QNetworkReply::NetworkError error_type, QString error_str);
    void allProgrammesByTitle_3SignalError(OAIAtom summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use allProgrammesByTitle_4SignalError() instead")
    void allProgrammesByTitle_4SignalE(OAIAtom summary, QNetworkReply::NetworkError error_type, QString error_str);
    void allProgrammesByTitle_4SignalError(OAIAtom summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use allProgrammesByTitle_5SignalError() instead")
    void allProgrammesByTitle_5SignalE(OAIAtom summary, QNetworkReply::NetworkError error_type, QString error_str);
    void allProgrammesByTitle_5SignalError(OAIAtom summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use allProgrammesByTitle_6SignalError() instead")
    void allProgrammesByTitle_6SignalE(OAIAtom summary, QNetworkReply::NetworkError error_type, QString error_str);
    void allProgrammesByTitle_6SignalError(OAIAtom summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use categoriesLandingFeedSignalError() instead")
    void categoriesLandingFeedSignalE(OAIAtom summary, QNetworkReply::NetworkError error_type, QString error_str);
    void categoriesLandingFeedSignalError(OAIAtom summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionsFeedSignalError() instead")
    void collectionsFeedSignalE(OAIAtom summary, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionsFeedSignalError(OAIAtom summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionsFeed_2SignalError() instead")
    void collectionsFeed_2SignalE(OAIAtom summary, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionsFeed_2SignalError(OAIAtom summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use flattenedCollectionFeedSignalError() instead")
    void flattenedCollectionFeedSignalE(OAIAtom summary, QNetworkReply::NetworkError error_type, QString error_str);
    void flattenedCollectionFeedSignalError(OAIAtom summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use flattenedCollectionFeed_2SignalError() instead")
    void flattenedCollectionFeed_2SignalE(OAIAtom summary, QNetworkReply::NetworkError error_type, QString error_str);
    void flattenedCollectionFeed_2SignalError(OAIAtom summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mostPopularBrandsFeedSignalError() instead")
    void mostPopularBrandsFeedSignalE(OAIAtom summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mostPopularBrandsFeedSignalError(OAIAtom summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mostPopularBrandsFeed_2SignalError() instead")
    void mostPopularBrandsFeed_2SignalE(OAIAtom summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mostPopularBrandsFeed_2SignalError(OAIAtom summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mostPopularBrandsFeed_3SignalError() instead")
    void mostPopularBrandsFeed_3SignalE(OAIAtom summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mostPopularBrandsFeed_3SignalError(OAIAtom summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mostPopularBrandsFeed_4SignalError() instead")
    void mostPopularBrandsFeed_4SignalE(OAIAtom summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mostPopularBrandsFeed_4SignalError(OAIAtom summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mostPopularBrandsFeed_5SignalError() instead")
    void mostPopularBrandsFeed_5SignalE(OAIAtom summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mostPopularBrandsFeed_5SignalError(OAIAtom summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mostPopularBrandsFeed_6SignalError() instead")
    void mostPopularBrandsFeed_6SignalE(OAIAtom summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mostPopularBrandsFeed_6SignalError(OAIAtom summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mostPopularBrandsFeed_7SignalError() instead")
    void mostPopularBrandsFeed_7SignalE(OAIAtom summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mostPopularBrandsFeed_7SignalError(OAIAtom summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mostPopularBrandsFeed_8SignalError() instead")
    void mostPopularBrandsFeed_8SignalE(OAIAtom summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mostPopularBrandsFeed_8SignalError(OAIAtom summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use popularBrandsFeedSignalError() instead")
    void popularBrandsFeedSignalE(OAIAtom summary, QNetworkReply::NetworkError error_type, QString error_str);
    void popularBrandsFeedSignalError(OAIAtom summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use popularBrandsFeed_2SignalError() instead")
    void popularBrandsFeed_2SignalE(OAIAtom summary, QNetworkReply::NetworkError error_type, QString error_str);
    void popularBrandsFeed_2SignalError(OAIAtom summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchFeedSignalError() instead")
    void searchFeedSignalE(OAIAtom summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchFeedSignalError(OAIAtom summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchFeed_2SignalError() instead")
    void searchFeed_2SignalE(OAIAtom summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchFeed_2SignalError(OAIAtom summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchFeed_3SignalError() instead")
    void searchFeed_3SignalE(OAIAtom summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchFeed_3SignalError(OAIAtom summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchFeed_4SignalError() instead")
    void searchFeed_4SignalE(OAIAtom summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchFeed_4SignalError(OAIAtom summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tVListingsFeedSignalError() instead")
    void tVListingsFeedSignalE(OAIAtom summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tVListingsFeedSignalError(OAIAtom summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tVListingsFeed_2SignalError() instead")
    void tVListingsFeed_2SignalE(OAIAtom summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tVListingsFeed_2SignalError(OAIAtom summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use 4oDBrowseByDateFeedSignalErrorFull() instead")
    void 4oDBrowseByDateFeedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void 4oDBrowseByDateFeedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use 4oDClipsCatchUpFeedSignalErrorFull() instead")
    void 4oDClipsCatchUpFeedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void 4oDClipsCatchUpFeedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use 4oDMostPopularEpisodesFeedSignalErrorFull() instead")
    void 4oDMostPopularEpisodesFeedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void 4oDMostPopularEpisodesFeedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use 4oDPopularAllBrandsFeedSignalErrorFull() instead")
    void 4oDPopularAllBrandsFeedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void 4oDPopularAllBrandsFeedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use 4oDPopularAllBrandsFeed_2SignalErrorFull() instead")
    void 4oDPopularAllBrandsFeed_2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void 4oDPopularAllBrandsFeed_2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use 4oDProgrammesByTXDateSignalErrorFull() instead")
    void 4oDProgrammesByTXDateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void 4oDProgrammesByTXDateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use 4oDProgrammesByTXDate_2SignalErrorFull() instead")
    void 4oDProgrammesByTXDate_2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void 4oDProgrammesByTXDate_2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use 4oDProgrammesByTXDate_3SignalErrorFull() instead")
    void 4oDProgrammesByTXDate_3SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void 4oDProgrammesByTXDate_3SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use 4oDProgrammesByTXDate_4SignalErrorFull() instead")
    void 4oDProgrammesByTXDate_4SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void 4oDProgrammesByTXDate_4SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use 4oDProgrammesByTXDate_5SignalErrorFull() instead")
    void 4oDProgrammesByTXDate_5SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void 4oDProgrammesByTXDate_5SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use 4oDProgrammesByTXDate_6SignalErrorFull() instead")
    void 4oDProgrammesByTXDate_6SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void 4oDProgrammesByTXDate_6SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use 4oDProgrammesByTitleSignalErrorFull() instead")
    void 4oDProgrammesByTitleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void 4oDProgrammesByTitleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use 4oDProgrammesByTitle_2SignalErrorFull() instead")
    void 4oDProgrammesByTitle_2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void 4oDProgrammesByTitle_2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use 4oDProgrammesByTitle_3SignalErrorFull() instead")
    void 4oDProgrammesByTitle_3SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void 4oDProgrammesByTitle_3SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use 4oDProgrammesByTitle_4SignalErrorFull() instead")
    void 4oDProgrammesByTitle_4SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void 4oDProgrammesByTitle_4SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use 4oDProgrammesByTitle_5SignalErrorFull() instead")
    void 4oDProgrammesByTitle_5SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void 4oDProgrammesByTitle_5SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use 4oDProgrammesByTitle_6SignalErrorFull() instead")
    void 4oDProgrammesByTitle_6SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void 4oDProgrammesByTitle_6SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use 4oDTitleAllBrandsFeedSignalErrorFull() instead")
    void 4oDTitleAllBrandsFeedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void 4oDTitleAllBrandsFeedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use 4oDTitleAllBrandsFeed_2SignalErrorFull() instead")
    void 4oDTitleAllBrandsFeed_2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void 4oDTitleAllBrandsFeed_2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aToZLandingFeedSignalErrorFull() instead")
    void aToZLandingFeedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aToZLandingFeedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aToZLetterFeedSignalErrorFull() instead")
    void aToZLetterFeedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aToZLetterFeedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aToZLetterFeed_2SignalErrorFull() instead")
    void aToZLetterFeed_2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aToZLetterFeed_2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use allProgrammesByTXDateSignalErrorFull() instead")
    void allProgrammesByTXDateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void allProgrammesByTXDateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use allProgrammesByTXDate_2SignalErrorFull() instead")
    void allProgrammesByTXDate_2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void allProgrammesByTXDate_2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use allProgrammesByTXDate_3SignalErrorFull() instead")
    void allProgrammesByTXDate_3SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void allProgrammesByTXDate_3SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use allProgrammesByTXDate_4SignalErrorFull() instead")
    void allProgrammesByTXDate_4SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void allProgrammesByTXDate_4SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use allProgrammesByTXDate_5SignalErrorFull() instead")
    void allProgrammesByTXDate_5SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void allProgrammesByTXDate_5SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use allProgrammesByTXDate_6SignalErrorFull() instead")
    void allProgrammesByTXDate_6SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void allProgrammesByTXDate_6SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use allProgrammesByTitleSignalErrorFull() instead")
    void allProgrammesByTitleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void allProgrammesByTitleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use allProgrammesByTitle_2SignalErrorFull() instead")
    void allProgrammesByTitle_2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void allProgrammesByTitle_2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use allProgrammesByTitle_3SignalErrorFull() instead")
    void allProgrammesByTitle_3SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void allProgrammesByTitle_3SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use allProgrammesByTitle_4SignalErrorFull() instead")
    void allProgrammesByTitle_4SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void allProgrammesByTitle_4SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use allProgrammesByTitle_5SignalErrorFull() instead")
    void allProgrammesByTitle_5SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void allProgrammesByTitle_5SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use allProgrammesByTitle_6SignalErrorFull() instead")
    void allProgrammesByTitle_6SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void allProgrammesByTitle_6SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use categoriesLandingFeedSignalErrorFull() instead")
    void categoriesLandingFeedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void categoriesLandingFeedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionsFeedSignalErrorFull() instead")
    void collectionsFeedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionsFeedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionsFeed_2SignalErrorFull() instead")
    void collectionsFeed_2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionsFeed_2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use flattenedCollectionFeedSignalErrorFull() instead")
    void flattenedCollectionFeedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void flattenedCollectionFeedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use flattenedCollectionFeed_2SignalErrorFull() instead")
    void flattenedCollectionFeed_2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void flattenedCollectionFeed_2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mostPopularBrandsFeedSignalErrorFull() instead")
    void mostPopularBrandsFeedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mostPopularBrandsFeedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mostPopularBrandsFeed_2SignalErrorFull() instead")
    void mostPopularBrandsFeed_2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mostPopularBrandsFeed_2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mostPopularBrandsFeed_3SignalErrorFull() instead")
    void mostPopularBrandsFeed_3SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mostPopularBrandsFeed_3SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mostPopularBrandsFeed_4SignalErrorFull() instead")
    void mostPopularBrandsFeed_4SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mostPopularBrandsFeed_4SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mostPopularBrandsFeed_5SignalErrorFull() instead")
    void mostPopularBrandsFeed_5SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mostPopularBrandsFeed_5SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mostPopularBrandsFeed_6SignalErrorFull() instead")
    void mostPopularBrandsFeed_6SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mostPopularBrandsFeed_6SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mostPopularBrandsFeed_7SignalErrorFull() instead")
    void mostPopularBrandsFeed_7SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mostPopularBrandsFeed_7SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mostPopularBrandsFeed_8SignalErrorFull() instead")
    void mostPopularBrandsFeed_8SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mostPopularBrandsFeed_8SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use popularBrandsFeedSignalErrorFull() instead")
    void popularBrandsFeedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void popularBrandsFeedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use popularBrandsFeed_2SignalErrorFull() instead")
    void popularBrandsFeed_2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void popularBrandsFeed_2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchFeedSignalErrorFull() instead")
    void searchFeedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchFeedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchFeed_2SignalErrorFull() instead")
    void searchFeed_2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchFeed_2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchFeed_3SignalErrorFull() instead")
    void searchFeed_3SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchFeed_3SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchFeed_4SignalErrorFull() instead")
    void searchFeed_4SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchFeed_4SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tVListingsFeedSignalErrorFull() instead")
    void tVListingsFeedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tVListingsFeedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tVListingsFeed_2SignalErrorFull() instead")
    void tVListingsFeed_2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tVListingsFeed_2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
