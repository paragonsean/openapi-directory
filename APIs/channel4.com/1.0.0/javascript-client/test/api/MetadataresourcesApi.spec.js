/**
 * Channel 4 API
 * This is the place to come for all the technical details you need to power your applications with Channel 4's deep programmes data.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer@channel4.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Channel4Api);
  }
}(this, function(expect, Channel4Api) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Channel4Api.MetadataresourcesApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('MetadataresourcesApi', function() {
    describe('brandEPGAtomFeed', function() {
      it('should call brandEPGAtomFeed successfully', function(done) {
        //uncomment below and update the code to test brandEPGAtomFeed
        //instance.brandEPGAtomFeed(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('call4oDFeed', function() {
      it('should call call4oDFeed successfully', function(done) {
        //uncomment below and update the code to test call4oDFeed
        //instance.call4oDFeed(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('clipDetailAtomFeed', function() {
      it('should call clipDetailAtomFeed successfully', function(done) {
        //uncomment below and update the code to test clipDetailAtomFeed
        //instance.clipDetailAtomFeed(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('clipsLandingFeedBrandSeriesAndEpisodeLevels', function() {
      it('should call clipsLandingFeedBrandSeriesAndEpisodeLevels successfully', function(done) {
        //uncomment below and update the code to test clipsLandingFeedBrandSeriesAndEpisodeLevels
        //instance.clipsLandingFeedBrandSeriesAndEpisodeLevels(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('clipsLandingFeedBrandSeriesAndEpisodeLevels2', function() {
      it('should call clipsLandingFeedBrandSeriesAndEpisodeLevels2 successfully', function(done) {
        //uncomment below and update the code to test clipsLandingFeedBrandSeriesAndEpisodeLevels2
        //instance.clipsLandingFeedBrandSeriesAndEpisodeLevels2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('clipsLandingFeedBrandSeriesAndEpisodeLevels3', function() {
      it('should call clipsLandingFeedBrandSeriesAndEpisodeLevels3 successfully', function(done) {
        //uncomment below and update the code to test clipsLandingFeedBrandSeriesAndEpisodeLevels3
        //instance.clipsLandingFeedBrandSeriesAndEpisodeLevels3(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('comingSoonFeed', function() {
      it('should call comingSoonFeed successfully', function(done) {
        //uncomment below and update the code to test comingSoonFeed
        //instance.comingSoonFeed(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('comingSoonFeed2', function() {
      it('should call comingSoonFeed2 successfully', function(done) {
        //uncomment below and update the code to test comingSoonFeed2
        //instance.comingSoonFeed2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('episodeGuideFeedEpisodeDetail', function() {
      it('should call episodeGuideFeedEpisodeDetail successfully', function(done) {
        //uncomment below and update the code to test episodeGuideFeedEpisodeDetail
        //instance.episodeGuideFeedEpisodeDetail(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('episodeGuideFeedSeriesDetail', function() {
      it('should call episodeGuideFeedSeriesDetail successfully', function(done) {
        //uncomment below and update the code to test episodeGuideFeedSeriesDetail
        //instance.episodeGuideFeedSeriesDetail(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('episodeGuideFeedSeriesLanding', function() {
      it('should call episodeGuideFeedSeriesLanding successfully', function(done) {
        //uncomment below and update the code to test episodeGuideFeedSeriesLanding
        //instance.episodeGuideFeedSeriesLanding(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('hubFeed', function() {
      it('should call hubFeed successfully', function(done) {
        //uncomment below and update the code to test hubFeed
        //instance.hubFeed(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('programmeFeed', function() {
      it('should call programmeFeed successfully', function(done) {
        //uncomment below and update the code to test programmeFeed
        //instance.programmeFeed(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
