/**
 * Channel 4 API
 * This is the place to come for all the technical details you need to power your applications with Channel 4's deep programmes data.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer@channel4.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Atom model module.
 * @module model/Atom
 * @version 1.0.0
 */
class Atom {
    /**
     * Constructs a new <code>Atom</code>.
     * This version of the Atom schema is based on version 1.0 of the format specifications, found here http://www.atomenabled.org/developers/syndication/atom-format-spec.php. The original namespace was http://www.w3.org/2005/Atom but we changed it to http://www.opengis.net/atom/2005 to avoid conflicting definitions of the same namespace in the future. NOT DONE YET. There is no XSD official schema for atom but this one seems to be the most known: http://www.kbcafe.com/rss/atom.xsd.xml (The Atom Publishing Protocol was issued as a Proposed Standard in IETF RFC 5023 in October 2007 http://tools.ietf.org/html/rfc5023) An Atom document may have two root elements, feed and entry, as defined in section 2.
     * @alias module:model/Atom
     * @param feed {Object.<String, Object>} The Atom feed construct is defined in section 4.1.1 of the format spec.
     */
    constructor(feed) { 
        
        Atom.initialize(this, feed);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, feed) { 
        obj['feed'] = feed;
    }

    /**
     * Constructs a <code>Atom</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Atom} obj Optional instance to populate.
     * @return {module:model/Atom} The populated <code>Atom</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Atom();

            if (data.hasOwnProperty('feed')) {
                obj['feed'] = ApiClient.convertToType(data['feed'], {'String': Object});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Atom</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Atom</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Atom.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

Atom.RequiredProperties = ["feed"];

/**
 * The Atom feed construct is defined in section 4.1.1 of the format spec.
 * @member {Object.<String, Object>} feed
 */
Atom.prototype['feed'] = undefined;






export default Atom;

