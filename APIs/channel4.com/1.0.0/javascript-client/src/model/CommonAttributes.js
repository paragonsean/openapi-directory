/**
 * Channel 4 API
 * This is the place to come for all the technical details you need to power your applications with Channel 4's deep programmes data.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer@channel4.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CommonAttributes model module.
 * @module model/CommonAttributes
 * @version 1.0.0
 */
class CommonAttributes {
    /**
     * Constructs a new <code>CommonAttributes</code>.
     * @alias module:model/CommonAttributes
     * @extends Object
     */
    constructor() { 
        
        CommonAttributes.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CommonAttributes</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CommonAttributes} obj Optional instance to populate.
     * @return {module:model/CommonAttributes} The populated <code>CommonAttributes</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CommonAttributes();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('xml:base')) {
                obj['xml:base'] = ApiClient.convertToType(data['xml:base'], 'String');
            }
            if (data.hasOwnProperty('xml:lang')) {
                obj['xml:lang'] = ApiClient.convertToType(data['xml:lang'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CommonAttributes</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CommonAttributes</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['xml:base'] && !(typeof data['xml:base'] === 'string' || data['xml:base'] instanceof String)) {
            throw new Error("Expected the field `xml:base` to be a primitive type in the JSON string but got " + data['xml:base']);
        }
        // ensure the json data is a string
        if (data['xml:lang'] && !(typeof data['xml:lang'] === 'string' || data['xml:lang'] instanceof String)) {
            throw new Error("Expected the field `xml:lang` to be a primitive type in the JSON string but got " + data['xml:lang']);
        }

        return true;
    }


}



/**
 * @member {String} xml:base
 */
CommonAttributes.prototype['xml:base'] = undefined;

/**
 * @member {String} xml:lang
 */
CommonAttributes.prototype['xml:lang'] = undefined;






export default CommonAttributes;

