/**
 * Channel 4 API
 * This is the place to come for all the technical details you need to power your applications with Channel 4's deep programmes data.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer@channel4.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The KnownRelCodeType model module.
 * @module model/KnownRelCodeType
 * @version 1.0.0
 */
class KnownRelCodeType {
    /**
     * Constructs a new <code>KnownRelCodeType</code>.
     * alternate: The value \&quot;alternate\&quot; signifies that the IRI in the value of the href attribute identifies an alternate version of the resource described by the containing element.related: The value \&quot;related\&quot; signifies that the IRI in the value of the href attribute identifies a resource related to the resource described by the containing element. For example, the feed for a site that discusses the performance of the search engine at \&quot;http://search.example.com\&quot; might contain, as a child of atom:feed. An identical link might appear as a child of any atom:entry whose content contains a discussion of that same search engine.self: The value \&quot;self\&quot; signifies that the IRI in the value of the href attribute identifies a resource equivalent to the containing element.enclosure: The value \&quot;enclosure\&quot; signifies that the IRI in the value of the href attribute identifies a related resource that is potentially large in size and might require special handling. For atom:link elements with rel&#x3D;\&quot;enclosure\&quot;, the length attribute SHOULD be provided.via: The value \&quot;via\&quot; signifies that the IRI in the value of the href attribute identifies a resource that is the source of the information provided in the containing element.
     * @alias module:model/KnownRelCodeType
     */
    constructor() { 
        
        KnownRelCodeType.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>KnownRelCodeType</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/KnownRelCodeType} obj Optional instance to populate.
     * @return {module:model/KnownRelCodeType} The populated <code>KnownRelCodeType</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new KnownRelCodeType();

        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>KnownRelCodeType</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>KnownRelCodeType</code>.
     */
    static validateJSON(data) {

        return true;
    }


}








export default KnownRelCodeType;

