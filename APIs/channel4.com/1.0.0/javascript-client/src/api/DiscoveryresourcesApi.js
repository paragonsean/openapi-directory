/**
 * Channel 4 API
 * This is the place to come for all the technical details you need to power your applications with Channel 4's deep programmes data.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer@channel4.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Atom from '../model/Atom';

/**
* Discoveryresources service.
* @module api/DiscoveryresourcesApi
* @version 1.0.0
*/
export default class DiscoveryresourcesApi {

    /**
    * Constructs a new DiscoveryresourcesApi. 
    * @alias module:api/DiscoveryresourcesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the aToZLandingFeed operation.
     * @callback module:api/DiscoveryresourcesApi~aToZLandingFeedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Atom} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A to Z Landing Feed
     * Lists Channel 4 programmes alphabetically from A to Z, providing the same    functionality and information as is available in the A to Z section of the    Channel 4 Programmes page, http://www.channel4.com/programmes.    http://api.channel4.com/pmlsd/atoz.atom    http://api.channel4.com/pmlsd/atoz.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [platform] The platform to use for the query. Alias 'client'.
     * @param {module:api/DiscoveryresourcesApi~aToZLandingFeedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Atom}
     */
    aToZLandingFeed(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'platform': opts['platform']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/xml'];
      let returnType = Atom;
      return this.apiClient.callApi(
        '/atoz.atom', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the aToZLetterFeed operation.
     * @callback module:api/DiscoveryresourcesApi~aToZLetterFeedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Atom} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A to Z Letter Feed
     * Lists Channel 4 programmes whose names begin with the associated letter.    http://api.channel4.com/pmlsd/atoz/start_letter.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/atoz/a.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx
     * @param {String} startLetter The letter of the alphabet for which you seek associated Channel 4 programmes
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [platform] The platform to use for the query. Alias 'client'.
     * @param {module:api/DiscoveryresourcesApi~aToZLetterFeedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Atom}
     */
    aToZLetterFeed(startLetter, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'startLetter' is set
      if (startLetter === undefined || startLetter === null) {
        throw new Error("Missing the required parameter 'startLetter' when calling aToZLetterFeed");
      }

      let pathParams = {
        'start_letter': startLetter
      };
      let queryParams = {
        'platform': opts['platform']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/xml'];
      let returnType = Atom;
      return this.apiClient.callApi(
        '/atoz/{start_letter}.atom', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the aToZLetterFeed2 operation.
     * @callback module:api/DiscoveryresourcesApi~aToZLetterFeed2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Atom} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A to Z Letter Feed(2)
     * Lists Channel 4 programmes whose names begin with the associated letter.    http://api.channel4.com/pmlsd/atoz/start_letter/page-{pageno}.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/atoz/a.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx
     * @param {String} startLetter The letter of the alphabet for which you seek associated Channel 4 programmes
     * @param {Number} pageno Page number of results to return
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [platform] The platform to use for the query. Alias 'client'.
     * @param {module:api/DiscoveryresourcesApi~aToZLetterFeed2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Atom}
     */
    aToZLetterFeed2(startLetter, pageno, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'startLetter' is set
      if (startLetter === undefined || startLetter === null) {
        throw new Error("Missing the required parameter 'startLetter' when calling aToZLetterFeed2");
      }
      // verify the required parameter 'pageno' is set
      if (pageno === undefined || pageno === null) {
        throw new Error("Missing the required parameter 'pageno' when calling aToZLetterFeed2");
      }

      let pathParams = {
        'start_letter': startLetter,
        'pageno': pageno
      };
      let queryParams = {
        'platform': opts['platform']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/xml'];
      let returnType = Atom;
      return this.apiClient.callApi(
        '/atoz/{start_letter}/page-{pageno}.atom', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the allProgrammesByTXDate operation.
     * @callback module:api/DiscoveryresourcesApi~allProgrammesByTXDateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Atom} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * All Programmes by TX Date
     * Lists all Channel 4 programmes associated with the specified category (tag).     By default, the programmes are listed in order of Transmission (TX) Date,    with the most-recently-transmitted programmes listed first.    http://api.channel4.com/pmlsd/categories/category.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/animals.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx
     * @param {String} category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx)
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [platform] The platform to use for the query. Alias 'client'.
     * @param {module:api/DiscoveryresourcesApi~allProgrammesByTXDateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Atom}
     */
    allProgrammesByTXDate(category, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'category' is set
      if (category === undefined || category === null) {
        throw new Error("Missing the required parameter 'category' when calling allProgrammesByTXDate");
      }

      let pathParams = {
        'category': category
      };
      let queryParams = {
        'platform': opts['platform']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/xml'];
      let returnType = Atom;
      return this.apiClient.callApi(
        '/categories/{category}.atom', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the allProgrammesByTXDate2 operation.
     * @callback module:api/DiscoveryresourcesApi~allProgrammesByTXDate2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Atom} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * All Programmes by TX Date(2)
     * Lists all Channel 4 programmes associated with the specified category (tag).     By default, the programmes are listed in order of Transmission (TX) Date,    with the most-recently-transmitted programmes listed first.    http://api.channel4.com/pmlsd/categories/category/channel/[channel].atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/animals.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx
     * @param {String} category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx)
     * @param {module:model/String} channel The name of the channel for which you seek associated Channel 4oD programmes
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [platform] The platform to use for the query. Alias 'client'.
     * @param {module:api/DiscoveryresourcesApi~allProgrammesByTXDate2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Atom}
     */
    allProgrammesByTXDate2(category, channel, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'category' is set
      if (category === undefined || category === null) {
        throw new Error("Missing the required parameter 'category' when calling allProgrammesByTXDate2");
      }
      // verify the required parameter 'channel' is set
      if (channel === undefined || channel === null) {
        throw new Error("Missing the required parameter 'channel' when calling allProgrammesByTXDate2");
      }

      let pathParams = {
        'category': category,
        'channel': channel
      };
      let queryParams = {
        'platform': opts['platform']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/xml'];
      let returnType = Atom;
      return this.apiClient.callApi(
        '/categories/{category}/channel/{channel}.atom', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the allProgrammesByTXDate3 operation.
     * @callback module:api/DiscoveryresourcesApi~allProgrammesByTXDate3Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Atom} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * All Programmes by TX Date(3)
     * Lists all Channel 4 programmes associated with the specified category (tag).     By default, the programmes are listed in order of Transmission (TX) Date,    with the most-recently-transmitted programmes listed first.    http://api.channel4.com/pmlsd/categories/category/derived/ad.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/animals.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx
     * @param {String} category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx)
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [platform] The platform to use for the query. Alias 'client'.
     * @param {module:api/DiscoveryresourcesApi~allProgrammesByTXDate3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Atom}
     */
    allProgrammesByTXDate3(category, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'category' is set
      if (category === undefined || category === null) {
        throw new Error("Missing the required parameter 'category' when calling allProgrammesByTXDate3");
      }

      let pathParams = {
        'category': category
      };
      let queryParams = {
        'platform': opts['platform']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/xml'];
      let returnType = Atom;
      return this.apiClient.callApi(
        '/categories/{category}/derived/ad.atom', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the allProgrammesByTXDate4 operation.
     * @callback module:api/DiscoveryresourcesApi~allProgrammesByTXDate4Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Atom} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * All Programmes by TX Date(4)
     * Lists all Channel 4 programmes associated with the specified category (tag).     By default, the programmes are listed in order of Transmission (TX) Date,    with the most-recently-transmitted programmes listed first.    http://api.channel4.com/pmlsd/categories/category/page-{pageno}.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/animals.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx
     * @param {String} category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx)
     * @param {Number} pageno Page number of results to return
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [platform] The platform to use for the query. Alias 'client'.
     * @param {module:api/DiscoveryresourcesApi~allProgrammesByTXDate4Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Atom}
     */
    allProgrammesByTXDate4(category, pageno, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'category' is set
      if (category === undefined || category === null) {
        throw new Error("Missing the required parameter 'category' when calling allProgrammesByTXDate4");
      }
      // verify the required parameter 'pageno' is set
      if (pageno === undefined || pageno === null) {
        throw new Error("Missing the required parameter 'pageno' when calling allProgrammesByTXDate4");
      }

      let pathParams = {
        'category': category,
        'pageno': pageno
      };
      let queryParams = {
        'platform': opts['platform']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/xml'];
      let returnType = Atom;
      return this.apiClient.callApi(
        '/categories/{category}/page-{pageno}.atom', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the allProgrammesByTXDate5 operation.
     * @callback module:api/DiscoveryresourcesApi~allProgrammesByTXDate5Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Atom} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * All Programmes by TX Date(5)
     * Lists all Channel 4 programmes associated with the specified category (tag).     By default, the programmes are listed in order of Transmission (TX) Date,    with the most-recently-transmitted programmes listed first.    http://api.channel4.com/pmlsd/categories/category/channel/[channel]/page-{pageno}.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/animals.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx
     * @param {String} category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx)
     * @param {module:model/String} channel The name of the channel for which you seek associated Channel 4oD programmes
     * @param {Number} pageno Page number of results to return
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [platform] The platform to use for the query. Alias 'client'.
     * @param {module:api/DiscoveryresourcesApi~allProgrammesByTXDate5Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Atom}
     */
    allProgrammesByTXDate5(category, channel, pageno, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'category' is set
      if (category === undefined || category === null) {
        throw new Error("Missing the required parameter 'category' when calling allProgrammesByTXDate5");
      }
      // verify the required parameter 'channel' is set
      if (channel === undefined || channel === null) {
        throw new Error("Missing the required parameter 'channel' when calling allProgrammesByTXDate5");
      }
      // verify the required parameter 'pageno' is set
      if (pageno === undefined || pageno === null) {
        throw new Error("Missing the required parameter 'pageno' when calling allProgrammesByTXDate5");
      }

      let pathParams = {
        'category': category,
        'channel': channel,
        'pageno': pageno
      };
      let queryParams = {
        'platform': opts['platform']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/xml'];
      let returnType = Atom;
      return this.apiClient.callApi(
        '/categories/{category}/channel/{channel}/page-{pageno}.atom', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the allProgrammesByTXDate6 operation.
     * @callback module:api/DiscoveryresourcesApi~allProgrammesByTXDate6Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Atom} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * All Programmes by TX Date(6)
     * Lists all Channel 4 programmes associated with the specified category (tag).     By default, the programmes are listed in order of Transmission (TX) Date,    with the most-recently-transmitted programmes listed first.    http://api.channel4.com/pmlsd/categories/category/derived/ad/page-{pageno}.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/animals.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx
     * @param {String} category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx)
     * @param {Number} pageno Page number of results to return
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [platform] The platform to use for the query. Alias 'client'.
     * @param {module:api/DiscoveryresourcesApi~allProgrammesByTXDate6Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Atom}
     */
    allProgrammesByTXDate6(category, pageno, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'category' is set
      if (category === undefined || category === null) {
        throw new Error("Missing the required parameter 'category' when calling allProgrammesByTXDate6");
      }
      // verify the required parameter 'pageno' is set
      if (pageno === undefined || pageno === null) {
        throw new Error("Missing the required parameter 'pageno' when calling allProgrammesByTXDate6");
      }

      let pathParams = {
        'category': category,
        'pageno': pageno
      };
      let queryParams = {
        'platform': opts['platform']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/xml'];
      let returnType = Atom;
      return this.apiClient.callApi(
        '/categories/{category}/derived/ad/page-{pageno}.atom', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the allProgrammesByTitle operation.
     * @callback module:api/DiscoveryresourcesApi~allProgrammesByTitleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Atom} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * All Programmes by Title
     * Lists all Channel 4 programmes associated with the specified category (tag),    alphanumerically in order of Title.    http://api.channel4.com/pmlsd/categories/category/title.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/history/title.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx
     * @param {String} category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx)
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [platform] The platform to use for the query. Alias 'client'.
     * @param {module:api/DiscoveryresourcesApi~allProgrammesByTitleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Atom}
     */
    allProgrammesByTitle(category, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'category' is set
      if (category === undefined || category === null) {
        throw new Error("Missing the required parameter 'category' when calling allProgrammesByTitle");
      }

      let pathParams = {
        'category': category
      };
      let queryParams = {
        'platform': opts['platform']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/xml'];
      let returnType = Atom;
      return this.apiClient.callApi(
        '/categories/{category}/title.atom', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the allProgrammesByTitle2 operation.
     * @callback module:api/DiscoveryresourcesApi~allProgrammesByTitle2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Atom} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * All Programmes by Title(2)
     * Lists all Channel 4 programmes associated with the specified category (tag),    alphanumerically in order of Title.    http://api.channel4.com/pmlsd/categories/category/channel/[channel]/title.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/history/title.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx
     * @param {String} category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx)
     * @param {module:model/String} channel The name of the channel for which you seek associated Channel 4oD programmes
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [platform] The platform to use for the query. Alias 'client'.
     * @param {module:api/DiscoveryresourcesApi~allProgrammesByTitle2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Atom}
     */
    allProgrammesByTitle2(category, channel, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'category' is set
      if (category === undefined || category === null) {
        throw new Error("Missing the required parameter 'category' when calling allProgrammesByTitle2");
      }
      // verify the required parameter 'channel' is set
      if (channel === undefined || channel === null) {
        throw new Error("Missing the required parameter 'channel' when calling allProgrammesByTitle2");
      }

      let pathParams = {
        'category': category,
        'channel': channel
      };
      let queryParams = {
        'platform': opts['platform']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/xml'];
      let returnType = Atom;
      return this.apiClient.callApi(
        '/categories/{category}/channel/{channel}/title.atom', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the allProgrammesByTitle3 operation.
     * @callback module:api/DiscoveryresourcesApi~allProgrammesByTitle3Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Atom} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * All Programmes by Title(3)
     * Lists all Channel 4 programmes associated with the specified category (tag),    alphanumerically in order of Title.    http://api.channel4.com/pmlsd/categories/category/derived/ad/title.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/history/title.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx
     * @param {String} category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx)
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [platform] The platform to use for the query. Alias 'client'.
     * @param {module:api/DiscoveryresourcesApi~allProgrammesByTitle3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Atom}
     */
    allProgrammesByTitle3(category, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'category' is set
      if (category === undefined || category === null) {
        throw new Error("Missing the required parameter 'category' when calling allProgrammesByTitle3");
      }

      let pathParams = {
        'category': category
      };
      let queryParams = {
        'platform': opts['platform']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/xml'];
      let returnType = Atom;
      return this.apiClient.callApi(
        '/categories/{category}/derived/ad/title.atom', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the allProgrammesByTitle4 operation.
     * @callback module:api/DiscoveryresourcesApi~allProgrammesByTitle4Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Atom} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * All Programmes by Title(4)
     * Lists all Channel 4 programmes associated with the specified category (tag),    alphanumerically in order of Title.    http://api.channel4.com/pmlsd/categories/category/title/page-{pageno}.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/history/title.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx
     * @param {String} category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx)
     * @param {Number} pageno Page number of results to return
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [platform] The platform to use for the query. Alias 'client'.
     * @param {module:api/DiscoveryresourcesApi~allProgrammesByTitle4Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Atom}
     */
    allProgrammesByTitle4(category, pageno, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'category' is set
      if (category === undefined || category === null) {
        throw new Error("Missing the required parameter 'category' when calling allProgrammesByTitle4");
      }
      // verify the required parameter 'pageno' is set
      if (pageno === undefined || pageno === null) {
        throw new Error("Missing the required parameter 'pageno' when calling allProgrammesByTitle4");
      }

      let pathParams = {
        'category': category,
        'pageno': pageno
      };
      let queryParams = {
        'platform': opts['platform']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/xml'];
      let returnType = Atom;
      return this.apiClient.callApi(
        '/categories/{category}/title/page-{pageno}.atom', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the allProgrammesByTitle5 operation.
     * @callback module:api/DiscoveryresourcesApi~allProgrammesByTitle5Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Atom} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * All Programmes by Title(5)
     * Lists all Channel 4 programmes associated with the specified category (tag),    alphanumerically in order of Title.    http://api.channel4.com/pmlsd/categories/category/channel/[channel]/title/page-{pageno}.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/history/title.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx
     * @param {String} category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx)
     * @param {module:model/String} channel The name of the channel for which you seek associated Channel 4oD programmes
     * @param {Number} pageno Page number of results to return
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [platform] The platform to use for the query. Alias 'client'.
     * @param {module:api/DiscoveryresourcesApi~allProgrammesByTitle5Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Atom}
     */
    allProgrammesByTitle5(category, channel, pageno, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'category' is set
      if (category === undefined || category === null) {
        throw new Error("Missing the required parameter 'category' when calling allProgrammesByTitle5");
      }
      // verify the required parameter 'channel' is set
      if (channel === undefined || channel === null) {
        throw new Error("Missing the required parameter 'channel' when calling allProgrammesByTitle5");
      }
      // verify the required parameter 'pageno' is set
      if (pageno === undefined || pageno === null) {
        throw new Error("Missing the required parameter 'pageno' when calling allProgrammesByTitle5");
      }

      let pathParams = {
        'category': category,
        'channel': channel,
        'pageno': pageno
      };
      let queryParams = {
        'platform': opts['platform']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/xml'];
      let returnType = Atom;
      return this.apiClient.callApi(
        '/categories/{category}/channel/{channel}/title/page-{pageno}.atom', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the allProgrammesByTitle6 operation.
     * @callback module:api/DiscoveryresourcesApi~allProgrammesByTitle6Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Atom} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * All Programmes by Title(6)
     * Lists all Channel 4 programmes associated with the specified category (tag),    alphanumerically in order of Title.    http://api.channel4.com/pmlsd/categories/category/derived/ad/title/page-{pageno}.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/history/title.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx
     * @param {String} category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx)
     * @param {Number} pageno Page number of results to return
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [platform] The platform to use for the query. Alias 'client'.
     * @param {module:api/DiscoveryresourcesApi~allProgrammesByTitle6Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Atom}
     */
    allProgrammesByTitle6(category, pageno, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'category' is set
      if (category === undefined || category === null) {
        throw new Error("Missing the required parameter 'category' when calling allProgrammesByTitle6");
      }
      // verify the required parameter 'pageno' is set
      if (pageno === undefined || pageno === null) {
        throw new Error("Missing the required parameter 'pageno' when calling allProgrammesByTitle6");
      }

      let pathParams = {
        'category': category,
        'pageno': pageno
      };
      let queryParams = {
        'platform': opts['platform']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/xml'];
      let returnType = Atom;
      return this.apiClient.callApi(
        '/categories/{category}/derived/ad/title/page-{pageno}.atom', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the call4oDBrowseByDateFeed operation.
     * @callback module:api/DiscoveryresourcesApi~call4oDBrowseByDateFeedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Atom} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 4oD Browse by Date Feed
     * Information of daily broadcast content available on 4oD, according to    broadcast date    http://api.channel4.com/pmlsd/4od/episode-list/date/[yyyy]/[mm]/[dd].atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/4od/episode-list/date/2010/11/28.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx
     * @param {String} yyyy The date for which you wish to see programming information
     * @param {String} mm The date for which you wish to see programming information
     * @param {String} dd The date for which you wish to see programming information
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [platform] The platform to use for the query. Alias 'client'.
     * @param {module:api/DiscoveryresourcesApi~call4oDBrowseByDateFeedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Atom}
     */
    call4oDBrowseByDateFeed(yyyy, mm, dd, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'yyyy' is set
      if (yyyy === undefined || yyyy === null) {
        throw new Error("Missing the required parameter 'yyyy' when calling call4oDBrowseByDateFeed");
      }
      // verify the required parameter 'mm' is set
      if (mm === undefined || mm === null) {
        throw new Error("Missing the required parameter 'mm' when calling call4oDBrowseByDateFeed");
      }
      // verify the required parameter 'dd' is set
      if (dd === undefined || dd === null) {
        throw new Error("Missing the required parameter 'dd' when calling call4oDBrowseByDateFeed");
      }

      let pathParams = {
        'yyyy': yyyy,
        'mm': mm,
        'dd': dd
      };
      let queryParams = {
        'platform': opts['platform']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/xml'];
      let returnType = Atom;
      return this.apiClient.callApi(
        '/4od/episode-list/date/{yyyy}/{mm}/{dd}.atom', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the call4oDClipsCatchUpFeed operation.
     * @callback module:api/DiscoveryresourcesApi~call4oDClipsCatchUpFeedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Atom} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 4oD Clips Catch Up Feed
     * A feed containing metadata about short-form content relating to 4oD Episodes    recently added to 4oD based on linear transmission. The entries for the    Clips Landing Feed contain references to each short-form asset. It will    return up to 20 entries.    http://api.channel4.com/pmlsd/4od/recently-added/videos.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/4od/episode-list/videos.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [platform] The platform to use for the query. Alias 'client'.
     * @param {module:api/DiscoveryresourcesApi~call4oDClipsCatchUpFeedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Atom}
     */
    call4oDClipsCatchUpFeed(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'platform': opts['platform']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/xml'];
      let returnType = Atom;
      return this.apiClient.callApi(
        '/4od/recently-added/videos.atom', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the call4oDMostPopularEpisodesFeed operation.
     * @callback module:api/DiscoveryresourcesApi~call4oDMostPopularEpisodesFeedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Atom} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 4oD Most Popular Episodes Feed
     * Information of the most popular content available on 4oD, according to user    data driven.    http://api.channel4.com/pmlsd/4od/episode-list/popular.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/4od/episode-list/popular.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [platform] The platform to use for the query. Alias 'client'.
     * @param {module:api/DiscoveryresourcesApi~call4oDMostPopularEpisodesFeedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Atom}
     */
    call4oDMostPopularEpisodesFeed(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'platform': opts['platform']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/xml'];
      let returnType = Atom;
      return this.apiClient.callApi(
        '/4od/episode-list/popular.atom', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the call4oDPopularAllBrandsFeed operation.
     * @callback module:api/DiscoveryresourcesApi~call4oDPopularAllBrandsFeedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Atom} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 4oD Popular All Brands Feed
     * Lists all Channel 4 programmes available on 4oD by popularity considering    the data gathered within the last 7 days.    http://api.channel4.com/pmlsd/brands/4od/popular.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/brands/4od/popular.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [platform] The platform to use for the query. Alias 'client'.
     * @param {module:api/DiscoveryresourcesApi~call4oDPopularAllBrandsFeedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Atom}
     */
    call4oDPopularAllBrandsFeed(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'platform': opts['platform']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/xml'];
      let returnType = Atom;
      return this.apiClient.callApi(
        '/brands/4od/popular.atom', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the call4oDPopularAllBrandsFeed2 operation.
     * @callback module:api/DiscoveryresourcesApi~call4oDPopularAllBrandsFeed2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Atom} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 4oD Popular All Brands Feed(2)
     * Lists all Channel 4 programmes available on 4oD by popularity considering    the data gathered within the last 7 days.    http://api.channel4.com/pmlsd/brands/4od/popular/page-{pageno}.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/brands/4od/popular.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx
     * @param {Number} pageno Page number of results to return
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [platform] The platform to use for the query. Alias 'client'.
     * @param {module:api/DiscoveryresourcesApi~call4oDPopularAllBrandsFeed2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Atom}
     */
    call4oDPopularAllBrandsFeed2(pageno, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'pageno' is set
      if (pageno === undefined || pageno === null) {
        throw new Error("Missing the required parameter 'pageno' when calling call4oDPopularAllBrandsFeed2");
      }

      let pathParams = {
        'pageno': pageno
      };
      let queryParams = {
        'platform': opts['platform']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/xml'];
      let returnType = Atom;
      return this.apiClient.callApi(
        '/brands/4od/popular/page-{pageno}.atom', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the call4oDProgrammesByTXDate operation.
     * @callback module:api/DiscoveryresourcesApi~call4oDProgrammesByTXDateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Atom} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 4oD Programmes by TX Date
     * Lists all Channel 4oD programmes associated with the specified category    (tag).By default, the programmes are listed in order of Transmission (TX)    Date, with the most-recently-transmitted programmes listed first.    http://api.channel4.com/pmlsd/categories/category/4od.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/animals/4oD.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx
     * @param {String} category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx)
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [platform] The platform to use for the query. Alias 'client'.
     * @param {module:api/DiscoveryresourcesApi~call4oDProgrammesByTXDateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Atom}
     */
    call4oDProgrammesByTXDate(category, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'category' is set
      if (category === undefined || category === null) {
        throw new Error("Missing the required parameter 'category' when calling call4oDProgrammesByTXDate");
      }

      let pathParams = {
        'category': category
      };
      let queryParams = {
        'platform': opts['platform']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/xml'];
      let returnType = Atom;
      return this.apiClient.callApi(
        '/categories/{category}/4od.atom', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the call4oDProgrammesByTXDate2 operation.
     * @callback module:api/DiscoveryresourcesApi~call4oDProgrammesByTXDate2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Atom} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 4oD Programmes by TX Date(2)
     * Lists all Channel 4oD programmes associated with the specified category    (tag).By default, the programmes are listed in order of Transmission (TX)    Date, with the most-recently-transmitted programmes listed first.    http://api.channel4.com/pmlsd/categories/category/channel/[channel]/4od.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/animals/4oD.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx
     * @param {String} category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx)
     * @param {module:model/String} channel The name of the channel for which you seek associated Channel 4oD programmes
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [platform] The platform to use for the query. Alias 'client'.
     * @param {module:api/DiscoveryresourcesApi~call4oDProgrammesByTXDate2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Atom}
     */
    call4oDProgrammesByTXDate2(category, channel, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'category' is set
      if (category === undefined || category === null) {
        throw new Error("Missing the required parameter 'category' when calling call4oDProgrammesByTXDate2");
      }
      // verify the required parameter 'channel' is set
      if (channel === undefined || channel === null) {
        throw new Error("Missing the required parameter 'channel' when calling call4oDProgrammesByTXDate2");
      }

      let pathParams = {
        'category': category,
        'channel': channel
      };
      let queryParams = {
        'platform': opts['platform']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/xml'];
      let returnType = Atom;
      return this.apiClient.callApi(
        '/categories/{category}/channel/{channel}/4od.atom', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the call4oDProgrammesByTXDate3 operation.
     * @callback module:api/DiscoveryresourcesApi~call4oDProgrammesByTXDate3Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Atom} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 4oD Programmes by TX Date(3)
     * Lists all Channel 4oD programmes associated with the specified category    (tag).By default, the programmes are listed in order of Transmission (TX)    Date, with the most-recently-transmitted programmes listed first.    http://api.channel4.com/pmlsd/categories/category/derived/ad/4od.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/animals/4oD.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx
     * @param {String} category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx)
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [platform] The platform to use for the query. Alias 'client'.
     * @param {module:api/DiscoveryresourcesApi~call4oDProgrammesByTXDate3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Atom}
     */
    call4oDProgrammesByTXDate3(category, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'category' is set
      if (category === undefined || category === null) {
        throw new Error("Missing the required parameter 'category' when calling call4oDProgrammesByTXDate3");
      }

      let pathParams = {
        'category': category
      };
      let queryParams = {
        'platform': opts['platform']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/xml'];
      let returnType = Atom;
      return this.apiClient.callApi(
        '/categories/{category}/derived/ad/4od.atom', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the call4oDProgrammesByTXDate4 operation.
     * @callback module:api/DiscoveryresourcesApi~call4oDProgrammesByTXDate4Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Atom} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 4oD Programmes by TX Date(4)
     * Lists all Channel 4oD programmes associated with the specified category    (tag).By default, the programmes are listed in order of Transmission (TX)    Date, with the most-recently-transmitted programmes listed first.    http://api.channel4.com/pmlsd/categories/category/4od/page-{pageno}.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/animals/4oD.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx
     * @param {String} category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx)
     * @param {Number} pageno Page number of results to return
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [platform] The platform to use for the query. Alias 'client'.
     * @param {module:api/DiscoveryresourcesApi~call4oDProgrammesByTXDate4Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Atom}
     */
    call4oDProgrammesByTXDate4(category, pageno, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'category' is set
      if (category === undefined || category === null) {
        throw new Error("Missing the required parameter 'category' when calling call4oDProgrammesByTXDate4");
      }
      // verify the required parameter 'pageno' is set
      if (pageno === undefined || pageno === null) {
        throw new Error("Missing the required parameter 'pageno' when calling call4oDProgrammesByTXDate4");
      }

      let pathParams = {
        'category': category,
        'pageno': pageno
      };
      let queryParams = {
        'platform': opts['platform']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/xml'];
      let returnType = Atom;
      return this.apiClient.callApi(
        '/categories/{category}/4od/page-{pageno}.atom', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the call4oDProgrammesByTXDate5 operation.
     * @callback module:api/DiscoveryresourcesApi~call4oDProgrammesByTXDate5Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Atom} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 4oD Programmes by TX Date(5)
     * Lists all Channel 4oD programmes associated with the specified category    (tag).By default, the programmes are listed in order of Transmission (TX)    Date, with the most-recently-transmitted programmes listed first.    http://api.channel4.com/pmlsd/categories/category/channel/[channel]/4od/page-{pageno}.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/animals/4oD.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx
     * @param {String} category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx)
     * @param {module:model/String} channel The name of the channel for which you seek associated Channel 4oD programmes
     * @param {Number} pageno Page number of results to return
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [platform] The platform to use for the query. Alias 'client'.
     * @param {module:api/DiscoveryresourcesApi~call4oDProgrammesByTXDate5Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Atom}
     */
    call4oDProgrammesByTXDate5(category, channel, pageno, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'category' is set
      if (category === undefined || category === null) {
        throw new Error("Missing the required parameter 'category' when calling call4oDProgrammesByTXDate5");
      }
      // verify the required parameter 'channel' is set
      if (channel === undefined || channel === null) {
        throw new Error("Missing the required parameter 'channel' when calling call4oDProgrammesByTXDate5");
      }
      // verify the required parameter 'pageno' is set
      if (pageno === undefined || pageno === null) {
        throw new Error("Missing the required parameter 'pageno' when calling call4oDProgrammesByTXDate5");
      }

      let pathParams = {
        'category': category,
        'channel': channel,
        'pageno': pageno
      };
      let queryParams = {
        'platform': opts['platform']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/xml'];
      let returnType = Atom;
      return this.apiClient.callApi(
        '/categories/{category}/channel/{channel}/4od/page-{pageno}.atom', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the call4oDProgrammesByTXDate6 operation.
     * @callback module:api/DiscoveryresourcesApi~call4oDProgrammesByTXDate6Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Atom} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 4oD Programmes by TX Date(6)
     * Lists all Channel 4oD programmes associated with the specified category    (tag).By default, the programmes are listed in order of Transmission (TX)    Date, with the most-recently-transmitted programmes listed first.    http://api.channel4.com/pmlsd/categories/category/derived/ad/4od/page-{pageno}.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/animals/4oD.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx
     * @param {String} category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx)
     * @param {Number} pageno Page number of results to return
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [platform] The platform to use for the query. Alias 'client'.
     * @param {module:api/DiscoveryresourcesApi~call4oDProgrammesByTXDate6Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Atom}
     */
    call4oDProgrammesByTXDate6(category, pageno, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'category' is set
      if (category === undefined || category === null) {
        throw new Error("Missing the required parameter 'category' when calling call4oDProgrammesByTXDate6");
      }
      // verify the required parameter 'pageno' is set
      if (pageno === undefined || pageno === null) {
        throw new Error("Missing the required parameter 'pageno' when calling call4oDProgrammesByTXDate6");
      }

      let pathParams = {
        'category': category,
        'pageno': pageno
      };
      let queryParams = {
        'platform': opts['platform']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/xml'];
      let returnType = Atom;
      return this.apiClient.callApi(
        '/categories/{category}/derived/ad/4od/page-{pageno}.atom', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the call4oDProgrammesByTitle operation.
     * @callback module:api/DiscoveryresourcesApi~call4oDProgrammesByTitleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Atom} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 4oD Programmes by Title
     * Lists all Channel 4oD programmes associated with the specified category    (tag), alphanumerically in order of Title.    http://api.channel4.com/pmlsd/categories/category/4od/title.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/religion-and-belief/4oD/title.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx
     * @param {String} category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx)
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [platform] The platform to use for the query. Alias 'client'.
     * @param {module:api/DiscoveryresourcesApi~call4oDProgrammesByTitleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Atom}
     */
    call4oDProgrammesByTitle(category, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'category' is set
      if (category === undefined || category === null) {
        throw new Error("Missing the required parameter 'category' when calling call4oDProgrammesByTitle");
      }

      let pathParams = {
        'category': category
      };
      let queryParams = {
        'platform': opts['platform']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/xml'];
      let returnType = Atom;
      return this.apiClient.callApi(
        '/categories/{category}/4od/title.atom', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the call4oDProgrammesByTitle2 operation.
     * @callback module:api/DiscoveryresourcesApi~call4oDProgrammesByTitle2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Atom} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 4oD Programmes by Title(2)
     * Lists all Channel 4oD programmes associated with the specified category    (tag), alphanumerically in order of Title.    http://api.channel4.com/pmlsd/categories/category/channel/[channel]/4od/title.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/religion-and-belief/4oD/title.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx
     * @param {String} category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx)
     * @param {module:model/String} channel The name of the channel for which you seek associated Channel 4oD programmes
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [platform] The platform to use for the query. Alias 'client'.
     * @param {module:api/DiscoveryresourcesApi~call4oDProgrammesByTitle2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Atom}
     */
    call4oDProgrammesByTitle2(category, channel, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'category' is set
      if (category === undefined || category === null) {
        throw new Error("Missing the required parameter 'category' when calling call4oDProgrammesByTitle2");
      }
      // verify the required parameter 'channel' is set
      if (channel === undefined || channel === null) {
        throw new Error("Missing the required parameter 'channel' when calling call4oDProgrammesByTitle2");
      }

      let pathParams = {
        'category': category,
        'channel': channel
      };
      let queryParams = {
        'platform': opts['platform']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/xml'];
      let returnType = Atom;
      return this.apiClient.callApi(
        '/categories/{category}/channel/{channel}/4od/title.atom', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the call4oDProgrammesByTitle3 operation.
     * @callback module:api/DiscoveryresourcesApi~call4oDProgrammesByTitle3Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Atom} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 4oD Programmes by Title(3)
     * Lists all Channel 4oD programmes associated with the specified category    (tag), alphanumerically in order of Title.    http://api.channel4.com/pmlsd/categories/category/derived/ad/4od/title.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/religion-and-belief/4oD/title.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx
     * @param {String} category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx)
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [platform] The platform to use for the query. Alias 'client'.
     * @param {module:api/DiscoveryresourcesApi~call4oDProgrammesByTitle3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Atom}
     */
    call4oDProgrammesByTitle3(category, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'category' is set
      if (category === undefined || category === null) {
        throw new Error("Missing the required parameter 'category' when calling call4oDProgrammesByTitle3");
      }

      let pathParams = {
        'category': category
      };
      let queryParams = {
        'platform': opts['platform']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/xml'];
      let returnType = Atom;
      return this.apiClient.callApi(
        '/categories/{category}/derived/ad/4od/title.atom', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the call4oDProgrammesByTitle4 operation.
     * @callback module:api/DiscoveryresourcesApi~call4oDProgrammesByTitle4Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Atom} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 4oD Programmes by Title(4)
     * Lists all Channel 4oD programmes associated with the specified category    (tag), alphanumerically in order of Title.    http://api.channel4.com/pmlsd/categories/category/4od/title/page-{pageno}.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/religion-and-belief/4oD/title.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx
     * @param {String} category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx)
     * @param {Number} pageno Page number of results to return
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [platform] The platform to use for the query. Alias 'client'.
     * @param {module:api/DiscoveryresourcesApi~call4oDProgrammesByTitle4Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Atom}
     */
    call4oDProgrammesByTitle4(category, pageno, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'category' is set
      if (category === undefined || category === null) {
        throw new Error("Missing the required parameter 'category' when calling call4oDProgrammesByTitle4");
      }
      // verify the required parameter 'pageno' is set
      if (pageno === undefined || pageno === null) {
        throw new Error("Missing the required parameter 'pageno' when calling call4oDProgrammesByTitle4");
      }

      let pathParams = {
        'category': category,
        'pageno': pageno
      };
      let queryParams = {
        'platform': opts['platform']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/xml'];
      let returnType = Atom;
      return this.apiClient.callApi(
        '/categories/{category}/4od/title/page-{pageno}.atom', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the call4oDProgrammesByTitle5 operation.
     * @callback module:api/DiscoveryresourcesApi~call4oDProgrammesByTitle5Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Atom} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 4oD Programmes by Title(5)
     * Lists all Channel 4oD programmes associated with the specified category    (tag), alphanumerically in order of Title.    http://api.channel4.com/pmlsd/categories/category/channel/[channel]/4od/title/page-{pageno}.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/religion-and-belief/4oD/title.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx
     * @param {String} category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx)
     * @param {module:model/String} channel The name of the channel for which you seek associated Channel 4oD programmes
     * @param {Number} pageno Page number of results to return
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [platform] The platform to use for the query. Alias 'client'.
     * @param {module:api/DiscoveryresourcesApi~call4oDProgrammesByTitle5Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Atom}
     */
    call4oDProgrammesByTitle5(category, channel, pageno, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'category' is set
      if (category === undefined || category === null) {
        throw new Error("Missing the required parameter 'category' when calling call4oDProgrammesByTitle5");
      }
      // verify the required parameter 'channel' is set
      if (channel === undefined || channel === null) {
        throw new Error("Missing the required parameter 'channel' when calling call4oDProgrammesByTitle5");
      }
      // verify the required parameter 'pageno' is set
      if (pageno === undefined || pageno === null) {
        throw new Error("Missing the required parameter 'pageno' when calling call4oDProgrammesByTitle5");
      }

      let pathParams = {
        'category': category,
        'channel': channel,
        'pageno': pageno
      };
      let queryParams = {
        'platform': opts['platform']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/xml'];
      let returnType = Atom;
      return this.apiClient.callApi(
        '/categories/{category}/channel/{channel}/4od/title/page-{pageno}.atom', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the call4oDProgrammesByTitle6 operation.
     * @callback module:api/DiscoveryresourcesApi~call4oDProgrammesByTitle6Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Atom} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 4oD Programmes by Title(6)
     * Lists all Channel 4oD programmes associated with the specified category    (tag), alphanumerically in order of Title.    http://api.channel4.com/pmlsd/categories/category/derived/ad/4od/title/page-{pageno}.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/religion-and-belief/4oD/title.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx
     * @param {String} category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx)
     * @param {Number} pageno Page number of results to return
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [platform] The platform to use for the query. Alias 'client'.
     * @param {module:api/DiscoveryresourcesApi~call4oDProgrammesByTitle6Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Atom}
     */
    call4oDProgrammesByTitle6(category, pageno, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'category' is set
      if (category === undefined || category === null) {
        throw new Error("Missing the required parameter 'category' when calling call4oDProgrammesByTitle6");
      }
      // verify the required parameter 'pageno' is set
      if (pageno === undefined || pageno === null) {
        throw new Error("Missing the required parameter 'pageno' when calling call4oDProgrammesByTitle6");
      }

      let pathParams = {
        'category': category,
        'pageno': pageno
      };
      let queryParams = {
        'platform': opts['platform']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/xml'];
      let returnType = Atom;
      return this.apiClient.callApi(
        '/categories/{category}/derived/ad/4od/title/page-{pageno}.atom', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the call4oDTitleAllBrandsFeed operation.
     * @callback module:api/DiscoveryresourcesApi~call4oDTitleAllBrandsFeedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Atom} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 4oD Title All Brands Feed
     * Lists all Channel 4 programmes available on 4oD.  By default, the programmes    are listed by title in alphabetical order (case unsensitive).    http://api.channel4.com/pmlsd/brands/4od.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/brands/4od.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [platform] The platform to use for the query. Alias 'client'.
     * @param {module:api/DiscoveryresourcesApi~call4oDTitleAllBrandsFeedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Atom}
     */
    call4oDTitleAllBrandsFeed(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'platform': opts['platform']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/xml'];
      let returnType = Atom;
      return this.apiClient.callApi(
        '/brands/4od.atom', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the call4oDTitleAllBrandsFeed2 operation.
     * @callback module:api/DiscoveryresourcesApi~call4oDTitleAllBrandsFeed2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Atom} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 4oD Title All Brands Feed(2)
     * Lists all Channel 4 programmes available on 4oD.  By default, the programmes    are listed by title in alphabetical order (case unsensitive).    http://api.channel4.com/pmlsd/brands/4od/page-{pageno}.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/brands/4od.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx
     * @param {Number} pageno Page number of results to return
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [platform] The platform to use for the query. Alias 'client'.
     * @param {module:api/DiscoveryresourcesApi~call4oDTitleAllBrandsFeed2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Atom}
     */
    call4oDTitleAllBrandsFeed2(pageno, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'pageno' is set
      if (pageno === undefined || pageno === null) {
        throw new Error("Missing the required parameter 'pageno' when calling call4oDTitleAllBrandsFeed2");
      }

      let pathParams = {
        'pageno': pageno
      };
      let queryParams = {
        'platform': opts['platform']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/xml'];
      let returnType = Atom;
      return this.apiClient.callApi(
        '/brands/4od/page-{pageno}.atom', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the categoriesLandingFeed operation.
     * @callback module:api/DiscoveryresourcesApi~categoriesLandingFeedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Atom} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Categories Landing Feed
     * Lists Channel 4 programmes by category (/ tag).    http://api.channel4.com/pmlsd/categories.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [platform] The platform to use for the query. Alias 'client'.
     * @param {module:api/DiscoveryresourcesApi~categoriesLandingFeedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Atom}
     */
    categoriesLandingFeed(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'platform': opts['platform']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/xml'];
      let returnType = Atom;
      return this.apiClient.callApi(
        '/categories.atom', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the collectionsFeed operation.
     * @callback module:api/DiscoveryresourcesApi~collectionsFeedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Atom} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Collections Feed
     * Collections are editorially controlled groups of brands, series, episodes or    other collections used for promotion and discovery of content. A SIMPLE    collection can contain an assortment of Brands, Series, Episodes or Freeform    items. A GROUP collection contains other collections.    http://api.channel4.com/pmlsd/collections/collection_name/4od.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/collections/4od-home-promo/4od.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx
     * @param {String} collectionName Web safe title for the collection.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [platform] The platform to use for the query. Alias 'client'.
     * @param {module:api/DiscoveryresourcesApi~collectionsFeedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Atom}
     */
    collectionsFeed(collectionName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'collectionName' is set
      if (collectionName === undefined || collectionName === null) {
        throw new Error("Missing the required parameter 'collectionName' when calling collectionsFeed");
      }

      let pathParams = {
        'collection_name': collectionName
      };
      let queryParams = {
        'platform': opts['platform']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/xml'];
      let returnType = Atom;
      return this.apiClient.callApi(
        '/collections/{collection_name}/4od.atom', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the collectionsFeed2 operation.
     * @callback module:api/DiscoveryresourcesApi~collectionsFeed2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Atom} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Collections Feed(2)
     * Collections are editorially controlled groups of brands, series, episodes or    other collections used for promotion and discovery of content. A SIMPLE    collection can contain an assortment of Brands, Series, Episodes or Freeform    items. A GROUP collection contains other collections.    http://api.channel4.com/pmlsd/collections/collection_name.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/collections/4od-home-promo/4od.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx
     * @param {String} collectionName Web safe title for the collection.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [platform] The platform to use for the query. Alias 'client'.
     * @param {module:api/DiscoveryresourcesApi~collectionsFeed2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Atom}
     */
    collectionsFeed2(collectionName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'collectionName' is set
      if (collectionName === undefined || collectionName === null) {
        throw new Error("Missing the required parameter 'collectionName' when calling collectionsFeed2");
      }

      let pathParams = {
        'collection_name': collectionName
      };
      let queryParams = {
        'platform': opts['platform']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/xml'];
      let returnType = Atom;
      return this.apiClient.callApi(
        '/collections/{collection_name}.atom', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the flattenedCollectionFeed operation.
     * @callback module:api/DiscoveryresourcesApi~flattenedCollectionFeedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Atom} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Flattened Collection Feed
     * The Flattened Collections Feed is only applicable for GROUP collections and    its purpose is mainly return 3 items (BRAND, SERIES or EPSIODE) of each of    the simple collections assigned to the GROUP.    http://api.channel4.com/pmlsd/collections/collection_name/flattened/4od.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/collections/4od-home-promo/flattened/4od.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx
     * @param {String} collectionName Web safe title for the collection.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [platform] The platform to use for the query. Alias 'client'.
     * @param {module:api/DiscoveryresourcesApi~flattenedCollectionFeedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Atom}
     */
    flattenedCollectionFeed(collectionName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'collectionName' is set
      if (collectionName === undefined || collectionName === null) {
        throw new Error("Missing the required parameter 'collectionName' when calling flattenedCollectionFeed");
      }

      let pathParams = {
        'collection_name': collectionName
      };
      let queryParams = {
        'platform': opts['platform']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/xml'];
      let returnType = Atom;
      return this.apiClient.callApi(
        '/collections/{collection_name}/flattened/4od.atom', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the flattenedCollectionFeed2 operation.
     * @callback module:api/DiscoveryresourcesApi~flattenedCollectionFeed2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Atom} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Flattened Collection Feed(2)
     * The Flattened Collections Feed is only applicable for GROUP collections and    its purpose is mainly return 3 items (BRAND, SERIES or EPSIODE) of each of    the simple collections assigned to the GROUP.    http://api.channel4.com/pmlsd/collections/collection_name/flattened.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/collections/4od-home-promo/flattened/4od.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx
     * @param {String} collectionName Web safe title for the collection.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [platform] The platform to use for the query. Alias 'client'.
     * @param {module:api/DiscoveryresourcesApi~flattenedCollectionFeed2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Atom}
     */
    flattenedCollectionFeed2(collectionName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'collectionName' is set
      if (collectionName === undefined || collectionName === null) {
        throw new Error("Missing the required parameter 'collectionName' when calling flattenedCollectionFeed2");
      }

      let pathParams = {
        'collection_name': collectionName
      };
      let queryParams = {
        'platform': opts['platform']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/xml'];
      let returnType = Atom;
      return this.apiClient.callApi(
        '/collections/{collection_name}/flattened.atom', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mostPopularBrandsFeed operation.
     * @callback module:api/DiscoveryresourcesApi~mostPopularBrandsFeedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Atom} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Most Popular Brands Feed
     * Lists all Channel 4oD most popular brands for the given category within the    last 7 days, in order of popularity.    http://api.channel4.com/pmlsd/categories/category/4od/popular.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/comedy/4od/popular.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx
     * @param {String} category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx)
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [platform] The platform to use for the query. Alias 'client'.
     * @param {module:api/DiscoveryresourcesApi~mostPopularBrandsFeedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Atom}
     */
    mostPopularBrandsFeed(category, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'category' is set
      if (category === undefined || category === null) {
        throw new Error("Missing the required parameter 'category' when calling mostPopularBrandsFeed");
      }

      let pathParams = {
        'category': category
      };
      let queryParams = {
        'platform': opts['platform']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/xml'];
      let returnType = Atom;
      return this.apiClient.callApi(
        '/categories/{category}/4od/popular.atom', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mostPopularBrandsFeed2 operation.
     * @callback module:api/DiscoveryresourcesApi~mostPopularBrandsFeed2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Atom} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Most Popular Brands Feed(2)
     * Lists all Channel 4oD most popular brands for the given category within the    last 7 days, in order of popularity.    http://api.channel4.com/pmlsd/categories/category/popular.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/comedy/4od/popular.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx
     * @param {String} category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx)
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [platform] The platform to use for the query. Alias 'client'.
     * @param {module:api/DiscoveryresourcesApi~mostPopularBrandsFeed2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Atom}
     */
    mostPopularBrandsFeed2(category, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'category' is set
      if (category === undefined || category === null) {
        throw new Error("Missing the required parameter 'category' when calling mostPopularBrandsFeed2");
      }

      let pathParams = {
        'category': category
      };
      let queryParams = {
        'platform': opts['platform']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/xml'];
      let returnType = Atom;
      return this.apiClient.callApi(
        '/categories/{category}/popular.atom', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mostPopularBrandsFeed3 operation.
     * @callback module:api/DiscoveryresourcesApi~mostPopularBrandsFeed3Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Atom} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Most Popular Brands Feed(3)
     * Lists all Channel 4oD most popular brands for the given category within the    last 7 days, in order of popularity.    http://api.channel4.com/pmlsd/categories/category/channel/[channel]/4od/popular.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/comedy/4od/popular.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx
     * @param {String} category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx)
     * @param {module:model/String} channel The name of the channel for which you seek associated Channel 4oD programmes
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [platform] The platform to use for the query. Alias 'client'.
     * @param {module:api/DiscoveryresourcesApi~mostPopularBrandsFeed3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Atom}
     */
    mostPopularBrandsFeed3(category, channel, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'category' is set
      if (category === undefined || category === null) {
        throw new Error("Missing the required parameter 'category' when calling mostPopularBrandsFeed3");
      }
      // verify the required parameter 'channel' is set
      if (channel === undefined || channel === null) {
        throw new Error("Missing the required parameter 'channel' when calling mostPopularBrandsFeed3");
      }

      let pathParams = {
        'category': category,
        'channel': channel
      };
      let queryParams = {
        'platform': opts['platform']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/xml'];
      let returnType = Atom;
      return this.apiClient.callApi(
        '/categories/{category}/channel/{channel}/4od/popular.atom', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mostPopularBrandsFeed4 operation.
     * @callback module:api/DiscoveryresourcesApi~mostPopularBrandsFeed4Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Atom} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Most Popular Brands Feed(4)
     * Lists all Channel 4oD most popular brands for the given category within the    last 7 days, in order of popularity.    http://api.channel4.com/pmlsd/categories/category/derived/ad/4od/popular.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/comedy/4od/popular.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx
     * @param {String} category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx)
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [platform] The platform to use for the query. Alias 'client'.
     * @param {module:api/DiscoveryresourcesApi~mostPopularBrandsFeed4Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Atom}
     */
    mostPopularBrandsFeed4(category, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'category' is set
      if (category === undefined || category === null) {
        throw new Error("Missing the required parameter 'category' when calling mostPopularBrandsFeed4");
      }

      let pathParams = {
        'category': category
      };
      let queryParams = {
        'platform': opts['platform']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/xml'];
      let returnType = Atom;
      return this.apiClient.callApi(
        '/categories/{category}/derived/ad/4od/popular.atom', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mostPopularBrandsFeed5 operation.
     * @callback module:api/DiscoveryresourcesApi~mostPopularBrandsFeed5Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Atom} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Most Popular Brands Feed(5)
     * Lists all Channel 4oD most popular brands for the given category within the    last 7 days, in order of popularity.    http://api.channel4.com/pmlsd/categories/category/4od/popular/page-{pageno}.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/comedy/4od/popular.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx
     * @param {String} category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx)
     * @param {Number} pageno Page number of results to return
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [platform] The platform to use for the query. Alias 'client'.
     * @param {module:api/DiscoveryresourcesApi~mostPopularBrandsFeed5Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Atom}
     */
    mostPopularBrandsFeed5(category, pageno, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'category' is set
      if (category === undefined || category === null) {
        throw new Error("Missing the required parameter 'category' when calling mostPopularBrandsFeed5");
      }
      // verify the required parameter 'pageno' is set
      if (pageno === undefined || pageno === null) {
        throw new Error("Missing the required parameter 'pageno' when calling mostPopularBrandsFeed5");
      }

      let pathParams = {
        'category': category,
        'pageno': pageno
      };
      let queryParams = {
        'platform': opts['platform']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/xml'];
      let returnType = Atom;
      return this.apiClient.callApi(
        '/categories/{category}/4od/popular/page-{pageno}.atom', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mostPopularBrandsFeed6 operation.
     * @callback module:api/DiscoveryresourcesApi~mostPopularBrandsFeed6Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Atom} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Most Popular Brands Feed(6)
     * Lists all Channel 4oD most popular brands for the given category within the    last 7 days, in order of popularity.    http://api.channel4.com/pmlsd/categories/category/popular/page-{pageno}.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/comedy/4od/popular.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx
     * @param {String} category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx)
     * @param {Number} pageno Page number of results to return
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [platform] The platform to use for the query. Alias 'client'.
     * @param {module:api/DiscoveryresourcesApi~mostPopularBrandsFeed6Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Atom}
     */
    mostPopularBrandsFeed6(category, pageno, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'category' is set
      if (category === undefined || category === null) {
        throw new Error("Missing the required parameter 'category' when calling mostPopularBrandsFeed6");
      }
      // verify the required parameter 'pageno' is set
      if (pageno === undefined || pageno === null) {
        throw new Error("Missing the required parameter 'pageno' when calling mostPopularBrandsFeed6");
      }

      let pathParams = {
        'category': category,
        'pageno': pageno
      };
      let queryParams = {
        'platform': opts['platform']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/xml'];
      let returnType = Atom;
      return this.apiClient.callApi(
        '/categories/{category}/popular/page-{pageno}.atom', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mostPopularBrandsFeed7 operation.
     * @callback module:api/DiscoveryresourcesApi~mostPopularBrandsFeed7Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Atom} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Most Popular Brands Feed(7)
     * Lists all Channel 4oD most popular brands for the given category within the    last 7 days, in order of popularity.    http://api.channel4.com/pmlsd/categories/category/channel/[channel]/4od/popular/page-{pageno}.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/comedy/4od/popular.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx
     * @param {String} category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx)
     * @param {module:model/String} channel The name of the channel for which you seek associated Channel 4oD programmes
     * @param {Number} pageno Page number of results to return
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [platform] The platform to use for the query. Alias 'client'.
     * @param {module:api/DiscoveryresourcesApi~mostPopularBrandsFeed7Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Atom}
     */
    mostPopularBrandsFeed7(category, channel, pageno, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'category' is set
      if (category === undefined || category === null) {
        throw new Error("Missing the required parameter 'category' when calling mostPopularBrandsFeed7");
      }
      // verify the required parameter 'channel' is set
      if (channel === undefined || channel === null) {
        throw new Error("Missing the required parameter 'channel' when calling mostPopularBrandsFeed7");
      }
      // verify the required parameter 'pageno' is set
      if (pageno === undefined || pageno === null) {
        throw new Error("Missing the required parameter 'pageno' when calling mostPopularBrandsFeed7");
      }

      let pathParams = {
        'category': category,
        'channel': channel,
        'pageno': pageno
      };
      let queryParams = {
        'platform': opts['platform']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/xml'];
      let returnType = Atom;
      return this.apiClient.callApi(
        '/categories/{category}/channel/{channel}/4od/popular/page-{pageno}.atom', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mostPopularBrandsFeed8 operation.
     * @callback module:api/DiscoveryresourcesApi~mostPopularBrandsFeed8Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Atom} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Most Popular Brands Feed(8)
     * Lists all Channel 4oD most popular brands for the given category within the    last 7 days, in order of popularity.    http://api.channel4.com/pmlsd/categories/category/derived/ad/4od/popular/page-{pageno}.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/comedy/4od/popular.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx
     * @param {String} category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx)
     * @param {Number} pageno Page number of results to return
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [platform] The platform to use for the query. Alias 'client'.
     * @param {module:api/DiscoveryresourcesApi~mostPopularBrandsFeed8Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Atom}
     */
    mostPopularBrandsFeed8(category, pageno, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'category' is set
      if (category === undefined || category === null) {
        throw new Error("Missing the required parameter 'category' when calling mostPopularBrandsFeed8");
      }
      // verify the required parameter 'pageno' is set
      if (pageno === undefined || pageno === null) {
        throw new Error("Missing the required parameter 'pageno' when calling mostPopularBrandsFeed8");
      }

      let pathParams = {
        'category': category,
        'pageno': pageno
      };
      let queryParams = {
        'platform': opts['platform']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/xml'];
      let returnType = Atom;
      return this.apiClient.callApi(
        '/categories/{category}/derived/ad/4od/popular/page-{pageno}.atom', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the popularBrandsFeed operation.
     * @callback module:api/DiscoveryresourcesApi~popularBrandsFeedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Atom} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Popular Brands Feed
     * Lists all Channel 4 programmes by popularity considering the data gathered    within the last 7 days.    http://api.channel4.com/pmlsd/brands/popular.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/brands/popular.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [platform] The platform to use for the query. Alias 'client'.
     * @param {module:api/DiscoveryresourcesApi~popularBrandsFeedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Atom}
     */
    popularBrandsFeed(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'platform': opts['platform']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/xml'];
      let returnType = Atom;
      return this.apiClient.callApi(
        '/brands/popular.atom', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the popularBrandsFeed2 operation.
     * @callback module:api/DiscoveryresourcesApi~popularBrandsFeed2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Atom} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Popular Brands Feed(2)
     * Lists all Channel 4 programmes by popularity considering the data gathered    within the last 7 days.    http://api.channel4.com/pmlsd/brands/popular/page-{pageno}.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/brands/popular.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx
     * @param {Number} pageno Page number of results to return
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [platform] The platform to use for the query. Alias 'client'.
     * @param {module:api/DiscoveryresourcesApi~popularBrandsFeed2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Atom}
     */
    popularBrandsFeed2(pageno, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'pageno' is set
      if (pageno === undefined || pageno === null) {
        throw new Error("Missing the required parameter 'pageno' when calling popularBrandsFeed2");
      }

      let pathParams = {
        'pageno': pageno
      };
      let queryParams = {
        'platform': opts['platform']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/xml'];
      let returnType = Atom;
      return this.apiClient.callApi(
        '/brands/popular/page-{pageno}.atom', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchFeed operation.
     * @callback module:api/DiscoveryresourcesApi~searchFeedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Atom} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search Feed
     * Lists all Channel 4 programmes where title (brand name) matching the search    term. Matches are made from the beginning of individual words in the title.    http://api.channel4.com/pmlsd/search.atom?q=search-term&apikey=xxx    http://api.channel4.com/pmlsd/search.atom?q=the+it+crowd&apikey=xxxxxxxxxxxxxxxxxxxxxxxx
     * @param {String} q The programme name to look for, minimum length: 2 chars.Looking for programme names with special chars might be URL encoded.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [platform] The platform to use for the query. Alias 'client'.
     * @param {module:api/DiscoveryresourcesApi~searchFeedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Atom}
     */
    searchFeed(q, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'q' is set
      if (q === undefined || q === null) {
        throw new Error("Missing the required parameter 'q' when calling searchFeed");
      }

      let pathParams = {
      };
      let queryParams = {
        'platform': opts['platform'],
        'q': q
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/xml'];
      let returnType = Atom;
      return this.apiClient.callApi(
        '/search.atom', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchFeed2 operation.
     * @callback module:api/DiscoveryresourcesApi~searchFeed2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Atom} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search Feed(2)
     * Lists all Channel 4 programmes where title (brand name) matching the search    term. Matches are made from the beginning of individual words in the title.    http://api.channel4.com/pmlsd/search/search-term.atom?apikey=xxx    http://api.channel4.com/pmlsd/search.atom?q=the+it+crowd&apikey=xxxxxxxxxxxxxxxxxxxxxxxx
     * @param {String} q The programme name to look for, minimum length: 2 chars.Looking for programme names with special chars might be URL encoded.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [platform] The platform to use for the query. Alias 'client'.
     * @param {module:api/DiscoveryresourcesApi~searchFeed2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Atom}
     */
    searchFeed2(q, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'q' is set
      if (q === undefined || q === null) {
        throw new Error("Missing the required parameter 'q' when calling searchFeed2");
      }

      let pathParams = {
        'q': q
      };
      let queryParams = {
        'platform': opts['platform']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/xml'];
      let returnType = Atom;
      return this.apiClient.callApi(
        '/search/{q}.atom', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchFeed3 operation.
     * @callback module:api/DiscoveryresourcesApi~searchFeed3Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Atom} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search Feed(3)
     * Lists all Channel 4 programmes where title (brand name) matching the search    term. Matches are made from the beginning of individual words in the title.    http://api.channel4.com/pmlsd/search/page-{pageno}.atom?q=search-term&apikey=xxx    http://api.channel4.com/pmlsd/search.atom?q=the+it+crowd&apikey=xxxxxxxxxxxxxxxxxxxxxxxx
     * @param {String} q The programme name to look for, minimum length: 2 chars.Looking for programme names with special chars might be URL encoded.
     * @param {Number} pageno Page number of results to return
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [platform] The platform to use for the query. Alias 'client'.
     * @param {module:api/DiscoveryresourcesApi~searchFeed3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Atom}
     */
    searchFeed3(q, pageno, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'q' is set
      if (q === undefined || q === null) {
        throw new Error("Missing the required parameter 'q' when calling searchFeed3");
      }
      // verify the required parameter 'pageno' is set
      if (pageno === undefined || pageno === null) {
        throw new Error("Missing the required parameter 'pageno' when calling searchFeed3");
      }

      let pathParams = {
        'pageno': pageno
      };
      let queryParams = {
        'platform': opts['platform'],
        'q': q
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/xml'];
      let returnType = Atom;
      return this.apiClient.callApi(
        '/search/page-{pageno}.atom', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchFeed4 operation.
     * @callback module:api/DiscoveryresourcesApi~searchFeed4Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Atom} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search Feed(4)
     * Lists all Channel 4 programmes where title (brand name) matching the search    term. Matches are made from the beginning of individual words in the title.    http://api.channel4.com/pmlsd/search/search-term/page-{pageno}.atom?apikey=xxx    http://api.channel4.com/pmlsd/search.atom?q=the+it+crowd&apikey=xxxxxxxxxxxxxxxxxxxxxxxx
     * @param {String} q The programme name to look for, minimum length: 2 chars.Looking for programme names with special chars might be URL encoded.
     * @param {Number} pageno Page number of results to return
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [platform] The platform to use for the query. Alias 'client'.
     * @param {module:api/DiscoveryresourcesApi~searchFeed4Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Atom}
     */
    searchFeed4(q, pageno, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'q' is set
      if (q === undefined || q === null) {
        throw new Error("Missing the required parameter 'q' when calling searchFeed4");
      }
      // verify the required parameter 'pageno' is set
      if (pageno === undefined || pageno === null) {
        throw new Error("Missing the required parameter 'pageno' when calling searchFeed4");
      }

      let pathParams = {
        'q': q,
        'pageno': pageno
      };
      let queryParams = {
        'platform': opts['platform']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/xml'];
      let returnType = Atom;
      return this.apiClient.callApi(
        '/search/{q}/page-{pageno}.atom', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tVListingsFeed operation.
     * @callback module:api/DiscoveryresourcesApi~tVListingsFeedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Atom} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * TV Listings Feed
     * EPG Information of daily broadcast content aired per channels, according to    broadcast date    http://api.channel4.com/pmlsd/tv-listings/daily/[yyyy]/[mm]/[dd].atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/tv-listings/daily/2010/11/28.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx
     * @param {String} yyyy The date for which you wish to see programming information. Note the schedule days start from 6am and run until 6am on the next calendar day.
     * @param {String} mm The date for which you wish to see programming information. Note the schedule days start from 6am and run until 6am on the next calendar day.
     * @param {String} dd The date for which you wish to see programming information. Note the schedule days start from 6am and run until 6am on the next calendar day.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [platform] The platform to use for the query. Alias 'client'.
     * @param {module:api/DiscoveryresourcesApi~tVListingsFeedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Atom}
     */
    tVListingsFeed(yyyy, mm, dd, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'yyyy' is set
      if (yyyy === undefined || yyyy === null) {
        throw new Error("Missing the required parameter 'yyyy' when calling tVListingsFeed");
      }
      // verify the required parameter 'mm' is set
      if (mm === undefined || mm === null) {
        throw new Error("Missing the required parameter 'mm' when calling tVListingsFeed");
      }
      // verify the required parameter 'dd' is set
      if (dd === undefined || dd === null) {
        throw new Error("Missing the required parameter 'dd' when calling tVListingsFeed");
      }

      let pathParams = {
        'yyyy': yyyy,
        'mm': mm,
        'dd': dd
      };
      let queryParams = {
        'platform': opts['platform']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/xml'];
      let returnType = Atom;
      return this.apiClient.callApi(
        '/tv-listings/daily/{yyyy}/{mm}/{dd}.atom', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tVListingsFeed2 operation.
     * @callback module:api/DiscoveryresourcesApi~tVListingsFeed2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Atom} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * TV Listings Feed(2)
     * EPG Information of daily broadcast content aired per channels, according to    broadcast date    http://api.channel4.com/pmlsd/tv-listings/daily/[yyyy]/[mm]/[dd]/[channel].atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/tv-listings/daily/2010/11/28.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx
     * @param {String} yyyy The date for which you wish to see programming information. Note the schedule days start from 6am and run until 6am on the next calendar day.
     * @param {String} mm The date for which you wish to see programming information. Note the schedule days start from 6am and run until 6am on the next calendar day.
     * @param {String} dd The date for which you wish to see programming information. Note the schedule days start from 6am and run until 6am on the next calendar day.
     * @param {module:model/String} channel The EPG for a specific channel (c4, e4, m4, 4m, f4, 4s)
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [platform] The platform to use for the query. Alias 'client'.
     * @param {module:api/DiscoveryresourcesApi~tVListingsFeed2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Atom}
     */
    tVListingsFeed2(yyyy, mm, dd, channel, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'yyyy' is set
      if (yyyy === undefined || yyyy === null) {
        throw new Error("Missing the required parameter 'yyyy' when calling tVListingsFeed2");
      }
      // verify the required parameter 'mm' is set
      if (mm === undefined || mm === null) {
        throw new Error("Missing the required parameter 'mm' when calling tVListingsFeed2");
      }
      // verify the required parameter 'dd' is set
      if (dd === undefined || dd === null) {
        throw new Error("Missing the required parameter 'dd' when calling tVListingsFeed2");
      }
      // verify the required parameter 'channel' is set
      if (channel === undefined || channel === null) {
        throw new Error("Missing the required parameter 'channel' when calling tVListingsFeed2");
      }

      let pathParams = {
        'yyyy': yyyy,
        'mm': mm,
        'dd': dd,
        'channel': channel
      };
      let queryParams = {
        'platform': opts['platform']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/xml'];
      let returnType = Atom;
      return this.apiClient.callApi(
        '/tv-listings/daily/{yyyy}/{mm}/{dd}/{channel}.atom', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
