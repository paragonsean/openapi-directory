/**
 * Channel 4 API
 * This is the place to come for all the technical details you need to power your applications with Channel 4's deep programmes data.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer@channel4.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Atom from '../model/Atom';

/**
* Metadataresources service.
* @module api/MetadataresourcesApi
* @version 1.0.0
*/
export default class MetadataresourcesApi {

    /**
    * Constructs a new MetadataresourcesApi. 
    * @alias module:api/MetadataresourcesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the brandEPGAtomFeed operation.
     * @callback module:api/MetadataresourcesApi~brandEPGAtomFeedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Atom} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Brand EPG Atom Feed
     * This feed contains metadata about upcoming electronic programme guide (EPG)    information for a brand. The entry details upcoming transmission slots for    this brand.    http://api.channel4.com/pmlsd/brand-web-safe-title/epg.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/the-simpsons/epg.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx
     * @param {String} brandWebSafeTitle Title of the programme for which you seek EPG information
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [platform] The platform to use for the query. Alias 'client'.
     * @param {module:api/MetadataresourcesApi~brandEPGAtomFeedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Atom}
     */
    brandEPGAtomFeed(brandWebSafeTitle, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'brandWebSafeTitle' is set
      if (brandWebSafeTitle === undefined || brandWebSafeTitle === null) {
        throw new Error("Missing the required parameter 'brandWebSafeTitle' when calling brandEPGAtomFeed");
      }

      let pathParams = {
        'brand-web-safe-title': brandWebSafeTitle
      };
      let queryParams = {
        'platform': opts['platform']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/xml'];
      let returnType = Atom;
      return this.apiClient.callApi(
        '/{brand-web-safe-title}/epg.atom', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the call4oDFeed operation.
     * @callback module:api/MetadataresourcesApi~call4oDFeedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Atom} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 4oD Feed
     * A feed containing all available on-demand long-form content for a specified    brand. The entries for the 4oD feed contain references to each long-form    asset for a brand, ordered by series number and episode number.    http://api.channel4.com/pmlsd/[brand-web-safe-title]/4od.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/the-it-crowd/4od.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx
     * @param {String} brandWebSafeTitle The title of the programme for which you seek on-demand content
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [platform] The platform to use for the query. Alias 'client'.
     * @param {module:api/MetadataresourcesApi~call4oDFeedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Atom}
     */
    call4oDFeed(brandWebSafeTitle, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'brandWebSafeTitle' is set
      if (brandWebSafeTitle === undefined || brandWebSafeTitle === null) {
        throw new Error("Missing the required parameter 'brandWebSafeTitle' when calling call4oDFeed");
      }

      let pathParams = {
        'brand-web-safe-title': brandWebSafeTitle
      };
      let queryParams = {
        'platform': opts['platform']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/xml'];
      let returnType = Atom;
      return this.apiClient.callApi(
        '/{brand-web-safe-title}/4od.atom', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clipDetailAtomFeed operation.
     * @callback module:api/MetadataresourcesApi~clipDetailAtomFeedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Atom} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clip Detail Atom Feed
     * A feed containing metadata about a single short-form video (clip).    http://api.channel4.com/pmlsd/brand-web-safe-title/videos/clip-asset-id.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/the-it-crowd/videos/TCGS_CLIP_0000001015.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx
     * @param {String} brandWebSafeTitle Title of the brand for which you seek a clip
     * @param {String} clipAssetId Asset id for this clip
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [platform] The platform to use for the query. Alias 'client'.
     * @param {module:api/MetadataresourcesApi~clipDetailAtomFeedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Atom}
     */
    clipDetailAtomFeed(brandWebSafeTitle, clipAssetId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'brandWebSafeTitle' is set
      if (brandWebSafeTitle === undefined || brandWebSafeTitle === null) {
        throw new Error("Missing the required parameter 'brandWebSafeTitle' when calling clipDetailAtomFeed");
      }
      // verify the required parameter 'clipAssetId' is set
      if (clipAssetId === undefined || clipAssetId === null) {
        throw new Error("Missing the required parameter 'clipAssetId' when calling clipDetailAtomFeed");
      }

      let pathParams = {
        'brand-web-safe-title': brandWebSafeTitle,
        'clip-asset-id': clipAssetId
      };
      let queryParams = {
        'platform': opts['platform']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/xml'];
      let returnType = Atom;
      return this.apiClient.callApi(
        '/{brand-web-safe-title}/videos/{clip-asset-id}.atom', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clipsLandingFeedBrandSeriesAndEpisodeLevels operation.
     * @callback module:api/MetadataresourcesApi~clipsLandingFeedBrandSeriesAndEpisodeLevelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Atom} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clips Landing Feed Brand Series and Episode Levels
     * A feed containing metadata about all the short-form (clip) videos. The clips    feed can be accessed at different levels: the content is then filtered    depending on the level, but the structure is identical.When accessed: from    the top, the feed contains all the clips for the brand;  at series level,    the feed contains only clips from the series; and  at episode level, the    feed contains only clips for the episode (and is very unlikely to require    pagination). The entries for the Clips Landing Feed contain references to    each short-form asset.    http://api.channel4.com/pmlsd/brand-web-safe-title/videos/all.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/peep-show/videos.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx
     * @param {String} brandWebSafeTitle Title of brand to which clips belong
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [platform] The platform to use for the query. Alias 'client'.
     * @param {module:api/MetadataresourcesApi~clipsLandingFeedBrandSeriesAndEpisodeLevelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Atom}
     */
    clipsLandingFeedBrandSeriesAndEpisodeLevels(brandWebSafeTitle, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'brandWebSafeTitle' is set
      if (brandWebSafeTitle === undefined || brandWebSafeTitle === null) {
        throw new Error("Missing the required parameter 'brandWebSafeTitle' when calling clipsLandingFeedBrandSeriesAndEpisodeLevels");
      }

      let pathParams = {
        'brand-web-safe-title': brandWebSafeTitle
      };
      let queryParams = {
        'platform': opts['platform']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/xml'];
      let returnType = Atom;
      return this.apiClient.callApi(
        '/{brand-web-safe-title}/videos/all.atom', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clipsLandingFeedBrandSeriesAndEpisodeLevels2 operation.
     * @callback module:api/MetadataresourcesApi~clipsLandingFeedBrandSeriesAndEpisodeLevels2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Atom} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clips Landing Feed Brand Series and Episode Levels(2)
     * A feed containing metadata about all the short-form (clip) videos. The clips    feed can be accessed at different levels: the content is then filtered    depending on the level, but the structure is identical.When accessed: from    the top, the feed contains all the clips for the brand;  at series level,    the feed contains only clips from the series; and  at episode level, the    feed contains only clips for the episode (and is very unlikely to require    pagination). The entries for the Clips Landing Feed contain references to    each short-form asset.    http://api.channel4.com/pmlsd/brand-web-safe-title/videos/series-series_number.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/peep-show/videos.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx
     * @param {String} brandWebSafeTitle Title of brand to which clips belong
     * @param {String} seriesNumber Unique identifier of series to which clips belong
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [platform] The platform to use for the query. Alias 'client'.
     * @param {module:api/MetadataresourcesApi~clipsLandingFeedBrandSeriesAndEpisodeLevels2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Atom}
     */
    clipsLandingFeedBrandSeriesAndEpisodeLevels2(brandWebSafeTitle, seriesNumber, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'brandWebSafeTitle' is set
      if (brandWebSafeTitle === undefined || brandWebSafeTitle === null) {
        throw new Error("Missing the required parameter 'brandWebSafeTitle' when calling clipsLandingFeedBrandSeriesAndEpisodeLevels2");
      }
      // verify the required parameter 'seriesNumber' is set
      if (seriesNumber === undefined || seriesNumber === null) {
        throw new Error("Missing the required parameter 'seriesNumber' when calling clipsLandingFeedBrandSeriesAndEpisodeLevels2");
      }

      let pathParams = {
        'brand-web-safe-title': brandWebSafeTitle,
        'series_number': seriesNumber
      };
      let queryParams = {
        'platform': opts['platform']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/xml'];
      let returnType = Atom;
      return this.apiClient.callApi(
        '/{brand-web-safe-title}/videos/series-{series_number}.atom', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clipsLandingFeedBrandSeriesAndEpisodeLevels3 operation.
     * @callback module:api/MetadataresourcesApi~clipsLandingFeedBrandSeriesAndEpisodeLevels3Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Atom} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clips Landing Feed Brand Series and Episode Levels(3)
     * A feed containing metadata about all the short-form (clip) videos. The clips    feed can be accessed at different levels: the content is then filtered    depending on the level, but the structure is identical.When accessed: from    the top, the feed contains all the clips for the brand;  at series level,    the feed contains only clips from the series; and  at episode level, the    feed contains only clips for the episode (and is very unlikely to require    pagination). The entries for the Clips Landing Feed contain references to    each short-form asset.    http://api.channel4.com/pmlsd/brand-web-safe-title/videos/series-series_number/episode-episode_number.atom?apikey=xxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/peep-show/videos.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx
     * @param {String} brandWebSafeTitle Title of brand to which clips belong
     * @param {String} seriesNumber Unique identifier of series to which clips belong
     * @param {String} episodeNumber Unique identifier of episode to which clips belong
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [platform] The platform to use for the query. Alias 'client'.
     * @param {module:api/MetadataresourcesApi~clipsLandingFeedBrandSeriesAndEpisodeLevels3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Atom}
     */
    clipsLandingFeedBrandSeriesAndEpisodeLevels3(brandWebSafeTitle, seriesNumber, episodeNumber, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'brandWebSafeTitle' is set
      if (brandWebSafeTitle === undefined || brandWebSafeTitle === null) {
        throw new Error("Missing the required parameter 'brandWebSafeTitle' when calling clipsLandingFeedBrandSeriesAndEpisodeLevels3");
      }
      // verify the required parameter 'seriesNumber' is set
      if (seriesNumber === undefined || seriesNumber === null) {
        throw new Error("Missing the required parameter 'seriesNumber' when calling clipsLandingFeedBrandSeriesAndEpisodeLevels3");
      }
      // verify the required parameter 'episodeNumber' is set
      if (episodeNumber === undefined || episodeNumber === null) {
        throw new Error("Missing the required parameter 'episodeNumber' when calling clipsLandingFeedBrandSeriesAndEpisodeLevels3");
      }

      let pathParams = {
        'brand-web-safe-title': brandWebSafeTitle,
        'series_number': seriesNumber,
        'episode_number': episodeNumber
      };
      let queryParams = {
        'platform': opts['platform']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/xml'];
      let returnType = Atom;
      return this.apiClient.callApi(
        '/{brand-web-safe-title}/videos/series-{series_number}/episode-{episode_number}.atom', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comingSoonFeed operation.
     * @callback module:api/MetadataresourcesApi~comingSoonFeedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Atom} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Coming Soon feed
     * Coming Soon feed display a list of episodes coming soon to linear TV so that    I can promote new Channel 4 content.    http://api.channel4.com/pmlsd/coming-soon.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/coming-soon.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [platform] The platform to use for the query. Alias 'client'.
     * @param {module:api/MetadataresourcesApi~comingSoonFeedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Atom}
     */
    comingSoonFeed(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'platform': opts['platform']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/xml'];
      let returnType = Atom;
      return this.apiClient.callApi(
        '/coming-soon.atom', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comingSoonFeed2 operation.
     * @callback module:api/MetadataresourcesApi~comingSoonFeed2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Atom} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Coming Soon feed(2)
     * Coming Soon feed display a list of episodes coming soon to linear TV so that    I can promote new Channel 4 content.    http://api.channel4.com/pmlsd/coming-soon/[category].atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/coming-soon.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx
     * @param {String} category The category websafe_title to filter the coming soon programmes on TV.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [platform] The platform to use for the query. Alias 'client'.
     * @param {module:api/MetadataresourcesApi~comingSoonFeed2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Atom}
     */
    comingSoonFeed2(category, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'category' is set
      if (category === undefined || category === null) {
        throw new Error("Missing the required parameter 'category' when calling comingSoonFeed2");
      }

      let pathParams = {
        'category': category
      };
      let queryParams = {
        'platform': opts['platform']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/xml'];
      let returnType = Atom;
      return this.apiClient.callApi(
        '/coming-soon/{category}.atom', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the episodeGuideFeedEpisodeDetail operation.
     * @callback module:api/MetadataresourcesApi~episodeGuideFeedEpisodeDetailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Atom} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Episode Guide Feed Episode Detail
     * A feed containing metadata about a specified episode. (This feed does not    contain any entries and only contains a feed element regarding this    episode.)    http://api.channel4.com/pmlsd/brand-web-safe-title/episode-guide/series-series_number/episode-episode_number.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/the-it-crowd/episode-guide/series-1/episode-1.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx
     * @param {String} brandWebSafeTitle Title of the brand to which the episode belongs
     * @param {String} seriesNumber Unique enumerated identifier of the series within its brand to which the episode belongs
     * @param {String} episodeNumber Unique enumerated identifier of the episode within its series
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [platform] The platform to use for the query. Alias 'client'.
     * @param {module:api/MetadataresourcesApi~episodeGuideFeedEpisodeDetailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Atom}
     */
    episodeGuideFeedEpisodeDetail(brandWebSafeTitle, seriesNumber, episodeNumber, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'brandWebSafeTitle' is set
      if (brandWebSafeTitle === undefined || brandWebSafeTitle === null) {
        throw new Error("Missing the required parameter 'brandWebSafeTitle' when calling episodeGuideFeedEpisodeDetail");
      }
      // verify the required parameter 'seriesNumber' is set
      if (seriesNumber === undefined || seriesNumber === null) {
        throw new Error("Missing the required parameter 'seriesNumber' when calling episodeGuideFeedEpisodeDetail");
      }
      // verify the required parameter 'episodeNumber' is set
      if (episodeNumber === undefined || episodeNumber === null) {
        throw new Error("Missing the required parameter 'episodeNumber' when calling episodeGuideFeedEpisodeDetail");
      }

      let pathParams = {
        'brand-web-safe-title': brandWebSafeTitle,
        'series_number': seriesNumber,
        'episode_number': episodeNumber
      };
      let queryParams = {
        'platform': opts['platform']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/xml'];
      let returnType = Atom;
      return this.apiClient.callApi(
        '/{brand-web-safe-title}/episode-guide/series-{series_number}/episode-{episode_number}.atom', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the episodeGuideFeedSeriesDetail operation.
     * @callback module:api/MetadataresourcesApi~episodeGuideFeedSeriesDetailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Atom} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Episode Guide Feed Series Detail
     * A feed containing metadata about all the episodes for a specific series. The    entries in this feed contain references to each of the episodes (where    metadata has been published), with some convenient links.    http://api.channel4.com/pmlsd/brand-web-safe-title/episode-guide/series-series_number.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/chelmsford-123/episode-guide/series-1.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx
     * @param {String} brandWebSafeTitle The title of the programme for which you seek series-related information
     * @param {String} seriesNumber Unique enumerated identifier of the series within its brand
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [platform] The platform to use for the query. Alias 'client'.
     * @param {module:api/MetadataresourcesApi~episodeGuideFeedSeriesDetailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Atom}
     */
    episodeGuideFeedSeriesDetail(brandWebSafeTitle, seriesNumber, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'brandWebSafeTitle' is set
      if (brandWebSafeTitle === undefined || brandWebSafeTitle === null) {
        throw new Error("Missing the required parameter 'brandWebSafeTitle' when calling episodeGuideFeedSeriesDetail");
      }
      // verify the required parameter 'seriesNumber' is set
      if (seriesNumber === undefined || seriesNumber === null) {
        throw new Error("Missing the required parameter 'seriesNumber' when calling episodeGuideFeedSeriesDetail");
      }

      let pathParams = {
        'brand-web-safe-title': brandWebSafeTitle,
        'series_number': seriesNumber
      };
      let queryParams = {
        'platform': opts['platform']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/xml'];
      let returnType = Atom;
      return this.apiClient.callApi(
        '/{brand-web-safe-title}/episode-guide/series-{series_number}.atom', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the episodeGuideFeedSeriesLanding operation.
     * @callback module:api/MetadataresourcesApi~episodeGuideFeedSeriesLandingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Atom} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Episode Guide Feed Series Landing
     * A feed containing metadata about all series for a specified brand. The    entries in this feed contain references to each of the series (where    metadata has been published), with some convenient links.    http://api.channel4.com/pmlsd/brand-web-safe-title/episode-guide.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/father-ted/episode-guide.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx
     * @param {String} brandWebSafeTitle The title of the programme for which you seek episode-guide information
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [platform] The platform to use for the query. Alias 'client'.
     * @param {module:api/MetadataresourcesApi~episodeGuideFeedSeriesLandingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Atom}
     */
    episodeGuideFeedSeriesLanding(brandWebSafeTitle, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'brandWebSafeTitle' is set
      if (brandWebSafeTitle === undefined || brandWebSafeTitle === null) {
        throw new Error("Missing the required parameter 'brandWebSafeTitle' when calling episodeGuideFeedSeriesLanding");
      }

      let pathParams = {
        'brand-web-safe-title': brandWebSafeTitle
      };
      let queryParams = {
        'platform': opts['platform']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/xml'];
      let returnType = Atom;
      return this.apiClient.callApi(
        '/{brand-web-safe-title}/episode-guide.atom', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the hubFeed operation.
     * @callback module:api/MetadataresourcesApi~hubFeedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Atom} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Hub Feed
     * The basis for all brand information    http://api.channel4.com/pmlsd/brand-web-safe-title.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/the-it-crowd.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx
     * @param {String} brandWebSafeTitle The title of the programme for which you seek associated data
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [platform] The platform to use for the query. Alias 'client'.
     * @param {module:api/MetadataresourcesApi~hubFeedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Atom}
     */
    hubFeed(brandWebSafeTitle, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'brandWebSafeTitle' is set
      if (brandWebSafeTitle === undefined || brandWebSafeTitle === null) {
        throw new Error("Missing the required parameter 'brandWebSafeTitle' when calling hubFeed");
      }

      let pathParams = {
        'brand-web-safe-title': brandWebSafeTitle
      };
      let queryParams = {
        'platform': opts['platform']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/xml'];
      let returnType = Atom;
      return this.apiClient.callApi(
        '/{brand-web-safe-title}.atom', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the programmeFeed operation.
     * @callback module:api/MetadataresourcesApi~programmeFeedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Atom} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Programme Feed
     * A feed containing all long-form content currently or previously available    for a specified Programme Id. The entries for the Programme feed contain    references to long-form assets for each platform.    http://api.channel4.com/pmlsd/programme/[programme-id].atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/programme/33881-001/4od.atom?apikey=xxxxxxxxxxxxxxxxxxxxxxxx
     * @param {String} programmeId The websafe programme identifier for the episode for which you seek on-demand content
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [platform] The platform to use for the query. Alias 'client'.
     * @param {module:api/MetadataresourcesApi~programmeFeedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Atom}
     */
    programmeFeed(programmeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'programmeId' is set
      if (programmeId === undefined || programmeId === null) {
        throw new Error("Missing the required parameter 'programmeId' when calling programmeFeed");
      }

      let pathParams = {
        'programme-id': programmeId
      };
      let queryParams = {
        'platform': opts['platform']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/xml'];
      let returnType = Atom;
      return this.apiClient.callApi(
        '/programme/{programme-id}.atom', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
