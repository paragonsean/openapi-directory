/*
 * Channel 4 API
 * This is the place to come for all the technical details you need to power your applications with Channel 4's deep programmes data.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer@channel4.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Atom;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MetadataresourcesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MetadataresourcesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MetadataresourcesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for brandEPGAtomFeed
     * @param brandWebSafeTitle Title of the programme for which you seek EPG information (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call brandEPGAtomFeedCall(String brandWebSafeTitle, String platform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{brand-web-safe-title}/epg.atom"
            .replace("{" + "brand-web-safe-title" + "}", localVarApiClient.escapeString(brandWebSafeTitle.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call brandEPGAtomFeedValidateBeforeCall(String brandWebSafeTitle, String platform, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'brandWebSafeTitle' is set
        if (brandWebSafeTitle == null) {
            throw new ApiException("Missing the required parameter 'brandWebSafeTitle' when calling brandEPGAtomFeed(Async)");
        }

        return brandEPGAtomFeedCall(brandWebSafeTitle, platform, _callback);

    }

    /**
     * Brand EPG Atom Feed
     * This feed contains metadata about upcoming electronic programme guide (EPG)    information for a brand. The entry details upcoming transmission slots for    this brand.    http://api.channel4.com/pmlsd/brand-web-safe-title/epg.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/the-simpsons/epg.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param brandWebSafeTitle Title of the programme for which you seek EPG information (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return Atom
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Atom brandEPGAtomFeed(String brandWebSafeTitle, String platform) throws ApiException {
        ApiResponse<Atom> localVarResp = brandEPGAtomFeedWithHttpInfo(brandWebSafeTitle, platform);
        return localVarResp.getData();
    }

    /**
     * Brand EPG Atom Feed
     * This feed contains metadata about upcoming electronic programme guide (EPG)    information for a brand. The entry details upcoming transmission slots for    this brand.    http://api.channel4.com/pmlsd/brand-web-safe-title/epg.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/the-simpsons/epg.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param brandWebSafeTitle Title of the programme for which you seek EPG information (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return ApiResponse&lt;Atom&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Atom> brandEPGAtomFeedWithHttpInfo(String brandWebSafeTitle, String platform) throws ApiException {
        okhttp3.Call localVarCall = brandEPGAtomFeedValidateBeforeCall(brandWebSafeTitle, platform, null);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Brand EPG Atom Feed (asynchronously)
     * This feed contains metadata about upcoming electronic programme guide (EPG)    information for a brand. The entry details upcoming transmission slots for    this brand.    http://api.channel4.com/pmlsd/brand-web-safe-title/epg.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/the-simpsons/epg.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param brandWebSafeTitle Title of the programme for which you seek EPG information (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call brandEPGAtomFeedAsync(String brandWebSafeTitle, String platform, final ApiCallback<Atom> _callback) throws ApiException {

        okhttp3.Call localVarCall = brandEPGAtomFeedValidateBeforeCall(brandWebSafeTitle, platform, _callback);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for call4oDFeed
     * @param brandWebSafeTitle The title of the programme for which you seek on-demand content (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call4oDFeedCall(String brandWebSafeTitle, String platform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{brand-web-safe-title}/4od.atom"
            .replace("{" + "brand-web-safe-title" + "}", localVarApiClient.escapeString(brandWebSafeTitle.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call call4oDFeedValidateBeforeCall(String brandWebSafeTitle, String platform, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'brandWebSafeTitle' is set
        if (brandWebSafeTitle == null) {
            throw new ApiException("Missing the required parameter 'brandWebSafeTitle' when calling call4oDFeed(Async)");
        }

        return call4oDFeedCall(brandWebSafeTitle, platform, _callback);

    }

    /**
     * 4oD Feed
     * A feed containing all available on-demand long-form content for a specified    brand. The entries for the 4oD feed contain references to each long-form    asset for a brand, ordered by series number and episode number.    http://api.channel4.com/pmlsd/[brand-web-safe-title]/4od.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/the-it-crowd/4od.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param brandWebSafeTitle The title of the programme for which you seek on-demand content (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return Atom
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Atom call4oDFeed(String brandWebSafeTitle, String platform) throws ApiException {
        ApiResponse<Atom> localVarResp = call4oDFeedWithHttpInfo(brandWebSafeTitle, platform);
        return localVarResp.getData();
    }

    /**
     * 4oD Feed
     * A feed containing all available on-demand long-form content for a specified    brand. The entries for the 4oD feed contain references to each long-form    asset for a brand, ordered by series number and episode number.    http://api.channel4.com/pmlsd/[brand-web-safe-title]/4od.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/the-it-crowd/4od.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param brandWebSafeTitle The title of the programme for which you seek on-demand content (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return ApiResponse&lt;Atom&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Atom> call4oDFeedWithHttpInfo(String brandWebSafeTitle, String platform) throws ApiException {
        okhttp3.Call localVarCall = call4oDFeedValidateBeforeCall(brandWebSafeTitle, platform, null);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 4oD Feed (asynchronously)
     * A feed containing all available on-demand long-form content for a specified    brand. The entries for the 4oD feed contain references to each long-form    asset for a brand, ordered by series number and episode number.    http://api.channel4.com/pmlsd/[brand-web-safe-title]/4od.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/the-it-crowd/4od.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param brandWebSafeTitle The title of the programme for which you seek on-demand content (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call4oDFeedAsync(String brandWebSafeTitle, String platform, final ApiCallback<Atom> _callback) throws ApiException {

        okhttp3.Call localVarCall = call4oDFeedValidateBeforeCall(brandWebSafeTitle, platform, _callback);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clipDetailAtomFeed
     * @param brandWebSafeTitle Title of the brand for which you seek a clip (required)
     * @param clipAssetId Asset id for this clip (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clipDetailAtomFeedCall(String brandWebSafeTitle, String clipAssetId, String platform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{brand-web-safe-title}/videos/{clip-asset-id}.atom"
            .replace("{" + "brand-web-safe-title" + "}", localVarApiClient.escapeString(brandWebSafeTitle.toString()))
            .replace("{" + "clip-asset-id" + "}", localVarApiClient.escapeString(clipAssetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clipDetailAtomFeedValidateBeforeCall(String brandWebSafeTitle, String clipAssetId, String platform, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'brandWebSafeTitle' is set
        if (brandWebSafeTitle == null) {
            throw new ApiException("Missing the required parameter 'brandWebSafeTitle' when calling clipDetailAtomFeed(Async)");
        }

        // verify the required parameter 'clipAssetId' is set
        if (clipAssetId == null) {
            throw new ApiException("Missing the required parameter 'clipAssetId' when calling clipDetailAtomFeed(Async)");
        }

        return clipDetailAtomFeedCall(brandWebSafeTitle, clipAssetId, platform, _callback);

    }

    /**
     * Clip Detail Atom Feed
     * A feed containing metadata about a single short-form video (clip).    http://api.channel4.com/pmlsd/brand-web-safe-title/videos/clip-asset-id.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/the-it-crowd/videos/TCGS_CLIP_0000001015.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param brandWebSafeTitle Title of the brand for which you seek a clip (required)
     * @param clipAssetId Asset id for this clip (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return Atom
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Atom clipDetailAtomFeed(String brandWebSafeTitle, String clipAssetId, String platform) throws ApiException {
        ApiResponse<Atom> localVarResp = clipDetailAtomFeedWithHttpInfo(brandWebSafeTitle, clipAssetId, platform);
        return localVarResp.getData();
    }

    /**
     * Clip Detail Atom Feed
     * A feed containing metadata about a single short-form video (clip).    http://api.channel4.com/pmlsd/brand-web-safe-title/videos/clip-asset-id.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/the-it-crowd/videos/TCGS_CLIP_0000001015.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param brandWebSafeTitle Title of the brand for which you seek a clip (required)
     * @param clipAssetId Asset id for this clip (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return ApiResponse&lt;Atom&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Atom> clipDetailAtomFeedWithHttpInfo(String brandWebSafeTitle, String clipAssetId, String platform) throws ApiException {
        okhttp3.Call localVarCall = clipDetailAtomFeedValidateBeforeCall(brandWebSafeTitle, clipAssetId, platform, null);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Clip Detail Atom Feed (asynchronously)
     * A feed containing metadata about a single short-form video (clip).    http://api.channel4.com/pmlsd/brand-web-safe-title/videos/clip-asset-id.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/the-it-crowd/videos/TCGS_CLIP_0000001015.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param brandWebSafeTitle Title of the brand for which you seek a clip (required)
     * @param clipAssetId Asset id for this clip (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clipDetailAtomFeedAsync(String brandWebSafeTitle, String clipAssetId, String platform, final ApiCallback<Atom> _callback) throws ApiException {

        okhttp3.Call localVarCall = clipDetailAtomFeedValidateBeforeCall(brandWebSafeTitle, clipAssetId, platform, _callback);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clipsLandingFeedBrandSeriesAndEpisodeLevels
     * @param brandWebSafeTitle Title of brand to which clips belong (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clipsLandingFeedBrandSeriesAndEpisodeLevelsCall(String brandWebSafeTitle, String platform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{brand-web-safe-title}/videos/all.atom"
            .replace("{" + "brand-web-safe-title" + "}", localVarApiClient.escapeString(brandWebSafeTitle.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clipsLandingFeedBrandSeriesAndEpisodeLevelsValidateBeforeCall(String brandWebSafeTitle, String platform, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'brandWebSafeTitle' is set
        if (brandWebSafeTitle == null) {
            throw new ApiException("Missing the required parameter 'brandWebSafeTitle' when calling clipsLandingFeedBrandSeriesAndEpisodeLevels(Async)");
        }

        return clipsLandingFeedBrandSeriesAndEpisodeLevelsCall(brandWebSafeTitle, platform, _callback);

    }

    /**
     * Clips Landing Feed Brand Series and Episode Levels
     * A feed containing metadata about all the short-form (clip) videos. The clips    feed can be accessed at different levels: the content is then filtered    depending on the level, but the structure is identical.When accessed: from    the top, the feed contains all the clips for the brand;  at series level,    the feed contains only clips from the series; and  at episode level, the    feed contains only clips for the episode (and is very unlikely to require    pagination). The entries for the Clips Landing Feed contain references to    each short-form asset.    http://api.channel4.com/pmlsd/brand-web-safe-title/videos/all.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/peep-show/videos.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param brandWebSafeTitle Title of brand to which clips belong (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return Atom
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Atom clipsLandingFeedBrandSeriesAndEpisodeLevels(String brandWebSafeTitle, String platform) throws ApiException {
        ApiResponse<Atom> localVarResp = clipsLandingFeedBrandSeriesAndEpisodeLevelsWithHttpInfo(brandWebSafeTitle, platform);
        return localVarResp.getData();
    }

    /**
     * Clips Landing Feed Brand Series and Episode Levels
     * A feed containing metadata about all the short-form (clip) videos. The clips    feed can be accessed at different levels: the content is then filtered    depending on the level, but the structure is identical.When accessed: from    the top, the feed contains all the clips for the brand;  at series level,    the feed contains only clips from the series; and  at episode level, the    feed contains only clips for the episode (and is very unlikely to require    pagination). The entries for the Clips Landing Feed contain references to    each short-form asset.    http://api.channel4.com/pmlsd/brand-web-safe-title/videos/all.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/peep-show/videos.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param brandWebSafeTitle Title of brand to which clips belong (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return ApiResponse&lt;Atom&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Atom> clipsLandingFeedBrandSeriesAndEpisodeLevelsWithHttpInfo(String brandWebSafeTitle, String platform) throws ApiException {
        okhttp3.Call localVarCall = clipsLandingFeedBrandSeriesAndEpisodeLevelsValidateBeforeCall(brandWebSafeTitle, platform, null);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Clips Landing Feed Brand Series and Episode Levels (asynchronously)
     * A feed containing metadata about all the short-form (clip) videos. The clips    feed can be accessed at different levels: the content is then filtered    depending on the level, but the structure is identical.When accessed: from    the top, the feed contains all the clips for the brand;  at series level,    the feed contains only clips from the series; and  at episode level, the    feed contains only clips for the episode (and is very unlikely to require    pagination). The entries for the Clips Landing Feed contain references to    each short-form asset.    http://api.channel4.com/pmlsd/brand-web-safe-title/videos/all.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/peep-show/videos.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param brandWebSafeTitle Title of brand to which clips belong (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clipsLandingFeedBrandSeriesAndEpisodeLevelsAsync(String brandWebSafeTitle, String platform, final ApiCallback<Atom> _callback) throws ApiException {

        okhttp3.Call localVarCall = clipsLandingFeedBrandSeriesAndEpisodeLevelsValidateBeforeCall(brandWebSafeTitle, platform, _callback);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clipsLandingFeedBrandSeriesAndEpisodeLevels2
     * @param brandWebSafeTitle Title of brand to which clips belong (required)
     * @param seriesNumber Unique identifier of series to which clips belong (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clipsLandingFeedBrandSeriesAndEpisodeLevels2Call(String brandWebSafeTitle, String seriesNumber, String platform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{brand-web-safe-title}/videos/series-{series_number}.atom"
            .replace("{" + "brand-web-safe-title" + "}", localVarApiClient.escapeString(brandWebSafeTitle.toString()))
            .replace("{" + "series_number" + "}", localVarApiClient.escapeString(seriesNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clipsLandingFeedBrandSeriesAndEpisodeLevels2ValidateBeforeCall(String brandWebSafeTitle, String seriesNumber, String platform, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'brandWebSafeTitle' is set
        if (brandWebSafeTitle == null) {
            throw new ApiException("Missing the required parameter 'brandWebSafeTitle' when calling clipsLandingFeedBrandSeriesAndEpisodeLevels2(Async)");
        }

        // verify the required parameter 'seriesNumber' is set
        if (seriesNumber == null) {
            throw new ApiException("Missing the required parameter 'seriesNumber' when calling clipsLandingFeedBrandSeriesAndEpisodeLevels2(Async)");
        }

        return clipsLandingFeedBrandSeriesAndEpisodeLevels2Call(brandWebSafeTitle, seriesNumber, platform, _callback);

    }

    /**
     * Clips Landing Feed Brand Series and Episode Levels(2)
     * A feed containing metadata about all the short-form (clip) videos. The clips    feed can be accessed at different levels: the content is then filtered    depending on the level, but the structure is identical.When accessed: from    the top, the feed contains all the clips for the brand;  at series level,    the feed contains only clips from the series; and  at episode level, the    feed contains only clips for the episode (and is very unlikely to require    pagination). The entries for the Clips Landing Feed contain references to    each short-form asset.    http://api.channel4.com/pmlsd/brand-web-safe-title/videos/series-series_number.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/peep-show/videos.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param brandWebSafeTitle Title of brand to which clips belong (required)
     * @param seriesNumber Unique identifier of series to which clips belong (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return Atom
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Atom clipsLandingFeedBrandSeriesAndEpisodeLevels2(String brandWebSafeTitle, String seriesNumber, String platform) throws ApiException {
        ApiResponse<Atom> localVarResp = clipsLandingFeedBrandSeriesAndEpisodeLevels2WithHttpInfo(brandWebSafeTitle, seriesNumber, platform);
        return localVarResp.getData();
    }

    /**
     * Clips Landing Feed Brand Series and Episode Levels(2)
     * A feed containing metadata about all the short-form (clip) videos. The clips    feed can be accessed at different levels: the content is then filtered    depending on the level, but the structure is identical.When accessed: from    the top, the feed contains all the clips for the brand;  at series level,    the feed contains only clips from the series; and  at episode level, the    feed contains only clips for the episode (and is very unlikely to require    pagination). The entries for the Clips Landing Feed contain references to    each short-form asset.    http://api.channel4.com/pmlsd/brand-web-safe-title/videos/series-series_number.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/peep-show/videos.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param brandWebSafeTitle Title of brand to which clips belong (required)
     * @param seriesNumber Unique identifier of series to which clips belong (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return ApiResponse&lt;Atom&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Atom> clipsLandingFeedBrandSeriesAndEpisodeLevels2WithHttpInfo(String brandWebSafeTitle, String seriesNumber, String platform) throws ApiException {
        okhttp3.Call localVarCall = clipsLandingFeedBrandSeriesAndEpisodeLevels2ValidateBeforeCall(brandWebSafeTitle, seriesNumber, platform, null);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Clips Landing Feed Brand Series and Episode Levels(2) (asynchronously)
     * A feed containing metadata about all the short-form (clip) videos. The clips    feed can be accessed at different levels: the content is then filtered    depending on the level, but the structure is identical.When accessed: from    the top, the feed contains all the clips for the brand;  at series level,    the feed contains only clips from the series; and  at episode level, the    feed contains only clips for the episode (and is very unlikely to require    pagination). The entries for the Clips Landing Feed contain references to    each short-form asset.    http://api.channel4.com/pmlsd/brand-web-safe-title/videos/series-series_number.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/peep-show/videos.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param brandWebSafeTitle Title of brand to which clips belong (required)
     * @param seriesNumber Unique identifier of series to which clips belong (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clipsLandingFeedBrandSeriesAndEpisodeLevels2Async(String brandWebSafeTitle, String seriesNumber, String platform, final ApiCallback<Atom> _callback) throws ApiException {

        okhttp3.Call localVarCall = clipsLandingFeedBrandSeriesAndEpisodeLevels2ValidateBeforeCall(brandWebSafeTitle, seriesNumber, platform, _callback);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clipsLandingFeedBrandSeriesAndEpisodeLevels3
     * @param brandWebSafeTitle Title of brand to which clips belong (required)
     * @param seriesNumber Unique identifier of series to which clips belong (required)
     * @param episodeNumber Unique identifier of episode to which clips belong (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clipsLandingFeedBrandSeriesAndEpisodeLevels3Call(String brandWebSafeTitle, String seriesNumber, String episodeNumber, String platform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{brand-web-safe-title}/videos/series-{series_number}/episode-{episode_number}.atom"
            .replace("{" + "brand-web-safe-title" + "}", localVarApiClient.escapeString(brandWebSafeTitle.toString()))
            .replace("{" + "series_number" + "}", localVarApiClient.escapeString(seriesNumber.toString()))
            .replace("{" + "episode_number" + "}", localVarApiClient.escapeString(episodeNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clipsLandingFeedBrandSeriesAndEpisodeLevels3ValidateBeforeCall(String brandWebSafeTitle, String seriesNumber, String episodeNumber, String platform, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'brandWebSafeTitle' is set
        if (brandWebSafeTitle == null) {
            throw new ApiException("Missing the required parameter 'brandWebSafeTitle' when calling clipsLandingFeedBrandSeriesAndEpisodeLevels3(Async)");
        }

        // verify the required parameter 'seriesNumber' is set
        if (seriesNumber == null) {
            throw new ApiException("Missing the required parameter 'seriesNumber' when calling clipsLandingFeedBrandSeriesAndEpisodeLevels3(Async)");
        }

        // verify the required parameter 'episodeNumber' is set
        if (episodeNumber == null) {
            throw new ApiException("Missing the required parameter 'episodeNumber' when calling clipsLandingFeedBrandSeriesAndEpisodeLevels3(Async)");
        }

        return clipsLandingFeedBrandSeriesAndEpisodeLevels3Call(brandWebSafeTitle, seriesNumber, episodeNumber, platform, _callback);

    }

    /**
     * Clips Landing Feed Brand Series and Episode Levels(3)
     * A feed containing metadata about all the short-form (clip) videos. The clips    feed can be accessed at different levels: the content is then filtered    depending on the level, but the structure is identical.When accessed: from    the top, the feed contains all the clips for the brand;  at series level,    the feed contains only clips from the series; and  at episode level, the    feed contains only clips for the episode (and is very unlikely to require    pagination). The entries for the Clips Landing Feed contain references to    each short-form asset.    http://api.channel4.com/pmlsd/brand-web-safe-title/videos/series-series_number/episode-episode_number.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/peep-show/videos.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param brandWebSafeTitle Title of brand to which clips belong (required)
     * @param seriesNumber Unique identifier of series to which clips belong (required)
     * @param episodeNumber Unique identifier of episode to which clips belong (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return Atom
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Atom clipsLandingFeedBrandSeriesAndEpisodeLevels3(String brandWebSafeTitle, String seriesNumber, String episodeNumber, String platform) throws ApiException {
        ApiResponse<Atom> localVarResp = clipsLandingFeedBrandSeriesAndEpisodeLevels3WithHttpInfo(brandWebSafeTitle, seriesNumber, episodeNumber, platform);
        return localVarResp.getData();
    }

    /**
     * Clips Landing Feed Brand Series and Episode Levels(3)
     * A feed containing metadata about all the short-form (clip) videos. The clips    feed can be accessed at different levels: the content is then filtered    depending on the level, but the structure is identical.When accessed: from    the top, the feed contains all the clips for the brand;  at series level,    the feed contains only clips from the series; and  at episode level, the    feed contains only clips for the episode (and is very unlikely to require    pagination). The entries for the Clips Landing Feed contain references to    each short-form asset.    http://api.channel4.com/pmlsd/brand-web-safe-title/videos/series-series_number/episode-episode_number.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/peep-show/videos.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param brandWebSafeTitle Title of brand to which clips belong (required)
     * @param seriesNumber Unique identifier of series to which clips belong (required)
     * @param episodeNumber Unique identifier of episode to which clips belong (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return ApiResponse&lt;Atom&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Atom> clipsLandingFeedBrandSeriesAndEpisodeLevels3WithHttpInfo(String brandWebSafeTitle, String seriesNumber, String episodeNumber, String platform) throws ApiException {
        okhttp3.Call localVarCall = clipsLandingFeedBrandSeriesAndEpisodeLevels3ValidateBeforeCall(brandWebSafeTitle, seriesNumber, episodeNumber, platform, null);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Clips Landing Feed Brand Series and Episode Levels(3) (asynchronously)
     * A feed containing metadata about all the short-form (clip) videos. The clips    feed can be accessed at different levels: the content is then filtered    depending on the level, but the structure is identical.When accessed: from    the top, the feed contains all the clips for the brand;  at series level,    the feed contains only clips from the series; and  at episode level, the    feed contains only clips for the episode (and is very unlikely to require    pagination). The entries for the Clips Landing Feed contain references to    each short-form asset.    http://api.channel4.com/pmlsd/brand-web-safe-title/videos/series-series_number/episode-episode_number.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/peep-show/videos.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param brandWebSafeTitle Title of brand to which clips belong (required)
     * @param seriesNumber Unique identifier of series to which clips belong (required)
     * @param episodeNumber Unique identifier of episode to which clips belong (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clipsLandingFeedBrandSeriesAndEpisodeLevels3Async(String brandWebSafeTitle, String seriesNumber, String episodeNumber, String platform, final ApiCallback<Atom> _callback) throws ApiException {

        okhttp3.Call localVarCall = clipsLandingFeedBrandSeriesAndEpisodeLevels3ValidateBeforeCall(brandWebSafeTitle, seriesNumber, episodeNumber, platform, _callback);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for comingSoonFeed
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call comingSoonFeedCall(String platform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/coming-soon.atom";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call comingSoonFeedValidateBeforeCall(String platform, final ApiCallback _callback) throws ApiException {
        return comingSoonFeedCall(platform, _callback);

    }

    /**
     * Coming Soon feed
     * Coming Soon feed display a list of episodes coming soon to linear TV so that    I can promote new Channel 4 content.    http://api.channel4.com/pmlsd/coming-soon.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/coming-soon.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return Atom
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Atom comingSoonFeed(String platform) throws ApiException {
        ApiResponse<Atom> localVarResp = comingSoonFeedWithHttpInfo(platform);
        return localVarResp.getData();
    }

    /**
     * Coming Soon feed
     * Coming Soon feed display a list of episodes coming soon to linear TV so that    I can promote new Channel 4 content.    http://api.channel4.com/pmlsd/coming-soon.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/coming-soon.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return ApiResponse&lt;Atom&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Atom> comingSoonFeedWithHttpInfo(String platform) throws ApiException {
        okhttp3.Call localVarCall = comingSoonFeedValidateBeforeCall(platform, null);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Coming Soon feed (asynchronously)
     * Coming Soon feed display a list of episodes coming soon to linear TV so that    I can promote new Channel 4 content.    http://api.channel4.com/pmlsd/coming-soon.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/coming-soon.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call comingSoonFeedAsync(String platform, final ApiCallback<Atom> _callback) throws ApiException {

        okhttp3.Call localVarCall = comingSoonFeedValidateBeforeCall(platform, _callback);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for comingSoonFeed2
     * @param category The category websafe_title to filter the coming soon programmes on TV. (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call comingSoonFeed2Call(String category, String platform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/coming-soon/{category}.atom"
            .replace("{" + "category" + "}", localVarApiClient.escapeString(category.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call comingSoonFeed2ValidateBeforeCall(String category, String platform, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'category' is set
        if (category == null) {
            throw new ApiException("Missing the required parameter 'category' when calling comingSoonFeed2(Async)");
        }

        return comingSoonFeed2Call(category, platform, _callback);

    }

    /**
     * Coming Soon feed(2)
     * Coming Soon feed display a list of episodes coming soon to linear TV so that    I can promote new Channel 4 content.    http://api.channel4.com/pmlsd/coming-soon/[category].atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/coming-soon.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The category websafe_title to filter the coming soon programmes on TV. (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return Atom
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Atom comingSoonFeed2(String category, String platform) throws ApiException {
        ApiResponse<Atom> localVarResp = comingSoonFeed2WithHttpInfo(category, platform);
        return localVarResp.getData();
    }

    /**
     * Coming Soon feed(2)
     * Coming Soon feed display a list of episodes coming soon to linear TV so that    I can promote new Channel 4 content.    http://api.channel4.com/pmlsd/coming-soon/[category].atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/coming-soon.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The category websafe_title to filter the coming soon programmes on TV. (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return ApiResponse&lt;Atom&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Atom> comingSoonFeed2WithHttpInfo(String category, String platform) throws ApiException {
        okhttp3.Call localVarCall = comingSoonFeed2ValidateBeforeCall(category, platform, null);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Coming Soon feed(2) (asynchronously)
     * Coming Soon feed display a list of episodes coming soon to linear TV so that    I can promote new Channel 4 content.    http://api.channel4.com/pmlsd/coming-soon/[category].atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/coming-soon.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The category websafe_title to filter the coming soon programmes on TV. (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call comingSoonFeed2Async(String category, String platform, final ApiCallback<Atom> _callback) throws ApiException {

        okhttp3.Call localVarCall = comingSoonFeed2ValidateBeforeCall(category, platform, _callback);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for episodeGuideFeedEpisodeDetail
     * @param brandWebSafeTitle Title of the brand to which the episode belongs (required)
     * @param seriesNumber Unique enumerated identifier of the series within its brand to which the episode belongs (required)
     * @param episodeNumber Unique enumerated identifier of the episode within its series (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call episodeGuideFeedEpisodeDetailCall(String brandWebSafeTitle, String seriesNumber, String episodeNumber, String platform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{brand-web-safe-title}/episode-guide/series-{series_number}/episode-{episode_number}.atom"
            .replace("{" + "brand-web-safe-title" + "}", localVarApiClient.escapeString(brandWebSafeTitle.toString()))
            .replace("{" + "series_number" + "}", localVarApiClient.escapeString(seriesNumber.toString()))
            .replace("{" + "episode_number" + "}", localVarApiClient.escapeString(episodeNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call episodeGuideFeedEpisodeDetailValidateBeforeCall(String brandWebSafeTitle, String seriesNumber, String episodeNumber, String platform, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'brandWebSafeTitle' is set
        if (brandWebSafeTitle == null) {
            throw new ApiException("Missing the required parameter 'brandWebSafeTitle' when calling episodeGuideFeedEpisodeDetail(Async)");
        }

        // verify the required parameter 'seriesNumber' is set
        if (seriesNumber == null) {
            throw new ApiException("Missing the required parameter 'seriesNumber' when calling episodeGuideFeedEpisodeDetail(Async)");
        }

        // verify the required parameter 'episodeNumber' is set
        if (episodeNumber == null) {
            throw new ApiException("Missing the required parameter 'episodeNumber' when calling episodeGuideFeedEpisodeDetail(Async)");
        }

        return episodeGuideFeedEpisodeDetailCall(brandWebSafeTitle, seriesNumber, episodeNumber, platform, _callback);

    }

    /**
     * Episode Guide Feed Episode Detail
     * A feed containing metadata about a specified episode. (This feed does not    contain any entries and only contains a feed element regarding this    episode.)    http://api.channel4.com/pmlsd/brand-web-safe-title/episode-guide/series-series_number/episode-episode_number.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/the-it-crowd/episode-guide/series-1/episode-1.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param brandWebSafeTitle Title of the brand to which the episode belongs (required)
     * @param seriesNumber Unique enumerated identifier of the series within its brand to which the episode belongs (required)
     * @param episodeNumber Unique enumerated identifier of the episode within its series (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return Atom
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Atom episodeGuideFeedEpisodeDetail(String brandWebSafeTitle, String seriesNumber, String episodeNumber, String platform) throws ApiException {
        ApiResponse<Atom> localVarResp = episodeGuideFeedEpisodeDetailWithHttpInfo(brandWebSafeTitle, seriesNumber, episodeNumber, platform);
        return localVarResp.getData();
    }

    /**
     * Episode Guide Feed Episode Detail
     * A feed containing metadata about a specified episode. (This feed does not    contain any entries and only contains a feed element regarding this    episode.)    http://api.channel4.com/pmlsd/brand-web-safe-title/episode-guide/series-series_number/episode-episode_number.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/the-it-crowd/episode-guide/series-1/episode-1.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param brandWebSafeTitle Title of the brand to which the episode belongs (required)
     * @param seriesNumber Unique enumerated identifier of the series within its brand to which the episode belongs (required)
     * @param episodeNumber Unique enumerated identifier of the episode within its series (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return ApiResponse&lt;Atom&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Atom> episodeGuideFeedEpisodeDetailWithHttpInfo(String brandWebSafeTitle, String seriesNumber, String episodeNumber, String platform) throws ApiException {
        okhttp3.Call localVarCall = episodeGuideFeedEpisodeDetailValidateBeforeCall(brandWebSafeTitle, seriesNumber, episodeNumber, platform, null);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Episode Guide Feed Episode Detail (asynchronously)
     * A feed containing metadata about a specified episode. (This feed does not    contain any entries and only contains a feed element regarding this    episode.)    http://api.channel4.com/pmlsd/brand-web-safe-title/episode-guide/series-series_number/episode-episode_number.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/the-it-crowd/episode-guide/series-1/episode-1.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param brandWebSafeTitle Title of the brand to which the episode belongs (required)
     * @param seriesNumber Unique enumerated identifier of the series within its brand to which the episode belongs (required)
     * @param episodeNumber Unique enumerated identifier of the episode within its series (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call episodeGuideFeedEpisodeDetailAsync(String brandWebSafeTitle, String seriesNumber, String episodeNumber, String platform, final ApiCallback<Atom> _callback) throws ApiException {

        okhttp3.Call localVarCall = episodeGuideFeedEpisodeDetailValidateBeforeCall(brandWebSafeTitle, seriesNumber, episodeNumber, platform, _callback);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for episodeGuideFeedSeriesDetail
     * @param brandWebSafeTitle The title of the programme for which you seek series-related information (required)
     * @param seriesNumber Unique enumerated identifier of the series within its brand (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call episodeGuideFeedSeriesDetailCall(String brandWebSafeTitle, String seriesNumber, String platform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{brand-web-safe-title}/episode-guide/series-{series_number}.atom"
            .replace("{" + "brand-web-safe-title" + "}", localVarApiClient.escapeString(brandWebSafeTitle.toString()))
            .replace("{" + "series_number" + "}", localVarApiClient.escapeString(seriesNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call episodeGuideFeedSeriesDetailValidateBeforeCall(String brandWebSafeTitle, String seriesNumber, String platform, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'brandWebSafeTitle' is set
        if (brandWebSafeTitle == null) {
            throw new ApiException("Missing the required parameter 'brandWebSafeTitle' when calling episodeGuideFeedSeriesDetail(Async)");
        }

        // verify the required parameter 'seriesNumber' is set
        if (seriesNumber == null) {
            throw new ApiException("Missing the required parameter 'seriesNumber' when calling episodeGuideFeedSeriesDetail(Async)");
        }

        return episodeGuideFeedSeriesDetailCall(brandWebSafeTitle, seriesNumber, platform, _callback);

    }

    /**
     * Episode Guide Feed Series Detail
     * A feed containing metadata about all the episodes for a specific series. The    entries in this feed contain references to each of the episodes (where    metadata has been published), with some convenient links.    http://api.channel4.com/pmlsd/brand-web-safe-title/episode-guide/series-series_number.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/chelmsford-123/episode-guide/series-1.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param brandWebSafeTitle The title of the programme for which you seek series-related information (required)
     * @param seriesNumber Unique enumerated identifier of the series within its brand (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return Atom
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Atom episodeGuideFeedSeriesDetail(String brandWebSafeTitle, String seriesNumber, String platform) throws ApiException {
        ApiResponse<Atom> localVarResp = episodeGuideFeedSeriesDetailWithHttpInfo(brandWebSafeTitle, seriesNumber, platform);
        return localVarResp.getData();
    }

    /**
     * Episode Guide Feed Series Detail
     * A feed containing metadata about all the episodes for a specific series. The    entries in this feed contain references to each of the episodes (where    metadata has been published), with some convenient links.    http://api.channel4.com/pmlsd/brand-web-safe-title/episode-guide/series-series_number.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/chelmsford-123/episode-guide/series-1.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param brandWebSafeTitle The title of the programme for which you seek series-related information (required)
     * @param seriesNumber Unique enumerated identifier of the series within its brand (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return ApiResponse&lt;Atom&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Atom> episodeGuideFeedSeriesDetailWithHttpInfo(String brandWebSafeTitle, String seriesNumber, String platform) throws ApiException {
        okhttp3.Call localVarCall = episodeGuideFeedSeriesDetailValidateBeforeCall(brandWebSafeTitle, seriesNumber, platform, null);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Episode Guide Feed Series Detail (asynchronously)
     * A feed containing metadata about all the episodes for a specific series. The    entries in this feed contain references to each of the episodes (where    metadata has been published), with some convenient links.    http://api.channel4.com/pmlsd/brand-web-safe-title/episode-guide/series-series_number.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/chelmsford-123/episode-guide/series-1.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param brandWebSafeTitle The title of the programme for which you seek series-related information (required)
     * @param seriesNumber Unique enumerated identifier of the series within its brand (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call episodeGuideFeedSeriesDetailAsync(String brandWebSafeTitle, String seriesNumber, String platform, final ApiCallback<Atom> _callback) throws ApiException {

        okhttp3.Call localVarCall = episodeGuideFeedSeriesDetailValidateBeforeCall(brandWebSafeTitle, seriesNumber, platform, _callback);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for episodeGuideFeedSeriesLanding
     * @param brandWebSafeTitle The title of the programme for which you seek episode-guide information (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call episodeGuideFeedSeriesLandingCall(String brandWebSafeTitle, String platform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{brand-web-safe-title}/episode-guide.atom"
            .replace("{" + "brand-web-safe-title" + "}", localVarApiClient.escapeString(brandWebSafeTitle.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call episodeGuideFeedSeriesLandingValidateBeforeCall(String brandWebSafeTitle, String platform, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'brandWebSafeTitle' is set
        if (brandWebSafeTitle == null) {
            throw new ApiException("Missing the required parameter 'brandWebSafeTitle' when calling episodeGuideFeedSeriesLanding(Async)");
        }

        return episodeGuideFeedSeriesLandingCall(brandWebSafeTitle, platform, _callback);

    }

    /**
     * Episode Guide Feed Series Landing
     * A feed containing metadata about all series for a specified brand. The    entries in this feed contain references to each of the series (where    metadata has been published), with some convenient links.    http://api.channel4.com/pmlsd/brand-web-safe-title/episode-guide.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/father-ted/episode-guide.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param brandWebSafeTitle The title of the programme for which you seek episode-guide information (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return Atom
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Atom episodeGuideFeedSeriesLanding(String brandWebSafeTitle, String platform) throws ApiException {
        ApiResponse<Atom> localVarResp = episodeGuideFeedSeriesLandingWithHttpInfo(brandWebSafeTitle, platform);
        return localVarResp.getData();
    }

    /**
     * Episode Guide Feed Series Landing
     * A feed containing metadata about all series for a specified brand. The    entries in this feed contain references to each of the series (where    metadata has been published), with some convenient links.    http://api.channel4.com/pmlsd/brand-web-safe-title/episode-guide.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/father-ted/episode-guide.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param brandWebSafeTitle The title of the programme for which you seek episode-guide information (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return ApiResponse&lt;Atom&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Atom> episodeGuideFeedSeriesLandingWithHttpInfo(String brandWebSafeTitle, String platform) throws ApiException {
        okhttp3.Call localVarCall = episodeGuideFeedSeriesLandingValidateBeforeCall(brandWebSafeTitle, platform, null);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Episode Guide Feed Series Landing (asynchronously)
     * A feed containing metadata about all series for a specified brand. The    entries in this feed contain references to each of the series (where    metadata has been published), with some convenient links.    http://api.channel4.com/pmlsd/brand-web-safe-title/episode-guide.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/father-ted/episode-guide.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param brandWebSafeTitle The title of the programme for which you seek episode-guide information (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call episodeGuideFeedSeriesLandingAsync(String brandWebSafeTitle, String platform, final ApiCallback<Atom> _callback) throws ApiException {

        okhttp3.Call localVarCall = episodeGuideFeedSeriesLandingValidateBeforeCall(brandWebSafeTitle, platform, _callback);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for hubFeed
     * @param brandWebSafeTitle The title of the programme for which you seek associated data (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hubFeedCall(String brandWebSafeTitle, String platform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{brand-web-safe-title}.atom"
            .replace("{" + "brand-web-safe-title" + "}", localVarApiClient.escapeString(brandWebSafeTitle.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hubFeedValidateBeforeCall(String brandWebSafeTitle, String platform, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'brandWebSafeTitle' is set
        if (brandWebSafeTitle == null) {
            throw new ApiException("Missing the required parameter 'brandWebSafeTitle' when calling hubFeed(Async)");
        }

        return hubFeedCall(brandWebSafeTitle, platform, _callback);

    }

    /**
     * Hub Feed
     * The basis for all brand information    http://api.channel4.com/pmlsd/brand-web-safe-title.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/the-it-crowd.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param brandWebSafeTitle The title of the programme for which you seek associated data (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return Atom
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Atom hubFeed(String brandWebSafeTitle, String platform) throws ApiException {
        ApiResponse<Atom> localVarResp = hubFeedWithHttpInfo(brandWebSafeTitle, platform);
        return localVarResp.getData();
    }

    /**
     * Hub Feed
     * The basis for all brand information    http://api.channel4.com/pmlsd/brand-web-safe-title.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/the-it-crowd.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param brandWebSafeTitle The title of the programme for which you seek associated data (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return ApiResponse&lt;Atom&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Atom> hubFeedWithHttpInfo(String brandWebSafeTitle, String platform) throws ApiException {
        okhttp3.Call localVarCall = hubFeedValidateBeforeCall(brandWebSafeTitle, platform, null);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Hub Feed (asynchronously)
     * The basis for all brand information    http://api.channel4.com/pmlsd/brand-web-safe-title.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/the-it-crowd.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param brandWebSafeTitle The title of the programme for which you seek associated data (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hubFeedAsync(String brandWebSafeTitle, String platform, final ApiCallback<Atom> _callback) throws ApiException {

        okhttp3.Call localVarCall = hubFeedValidateBeforeCall(brandWebSafeTitle, platform, _callback);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for programmeFeed
     * @param programmeId The websafe programme identifier for the episode for which you seek on-demand content (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call programmeFeedCall(String programmeId, String platform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/programme/{programme-id}.atom"
            .replace("{" + "programme-id" + "}", localVarApiClient.escapeString(programmeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call programmeFeedValidateBeforeCall(String programmeId, String platform, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'programmeId' is set
        if (programmeId == null) {
            throw new ApiException("Missing the required parameter 'programmeId' when calling programmeFeed(Async)");
        }

        return programmeFeedCall(programmeId, platform, _callback);

    }

    /**
     * Programme Feed
     * A feed containing all long-form content currently or previously available    for a specified Programme Id. The entries for the Programme feed contain    references to long-form assets for each platform.    http://api.channel4.com/pmlsd/programme/[programme-id].atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/programme/33881-001/4od.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param programmeId The websafe programme identifier for the episode for which you seek on-demand content (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return Atom
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Atom programmeFeed(String programmeId, String platform) throws ApiException {
        ApiResponse<Atom> localVarResp = programmeFeedWithHttpInfo(programmeId, platform);
        return localVarResp.getData();
    }

    /**
     * Programme Feed
     * A feed containing all long-form content currently or previously available    for a specified Programme Id. The entries for the Programme feed contain    references to long-form assets for each platform.    http://api.channel4.com/pmlsd/programme/[programme-id].atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/programme/33881-001/4od.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param programmeId The websafe programme identifier for the episode for which you seek on-demand content (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return ApiResponse&lt;Atom&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Atom> programmeFeedWithHttpInfo(String programmeId, String platform) throws ApiException {
        okhttp3.Call localVarCall = programmeFeedValidateBeforeCall(programmeId, platform, null);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Programme Feed (asynchronously)
     * A feed containing all long-form content currently or previously available    for a specified Programme Id. The entries for the Programme feed contain    references to long-form assets for each platform.    http://api.channel4.com/pmlsd/programme/[programme-id].atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/programme/33881-001/4od.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param programmeId The websafe programme identifier for the episode for which you seek on-demand content (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call programmeFeedAsync(String programmeId, String platform, final ApiCallback<Atom> _callback) throws ApiException {

        okhttp3.Call localVarCall = programmeFeedValidateBeforeCall(programmeId, platform, _callback);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
