/*
 * Channel 4 API
 * This is the place to come for all the technical details you need to power your applications with Channel 4's deep programmes data.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer@channel4.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Atom;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DiscoveryresourcesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DiscoveryresourcesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DiscoveryresourcesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for aToZLandingFeed
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call aToZLandingFeedCall(String platform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/atoz.atom";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call aToZLandingFeedValidateBeforeCall(String platform, final ApiCallback _callback) throws ApiException {
        return aToZLandingFeedCall(platform, _callback);

    }

    /**
     * A to Z Landing Feed
     * Lists Channel 4 programmes alphabetically from A to Z, providing the same    functionality and information as is available in the A to Z section of the    Channel 4 Programmes page, http://www.channel4.com/programmes.    http://api.channel4.com/pmlsd/atoz.atom    http://api.channel4.com/pmlsd/atoz.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return Atom
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Atom aToZLandingFeed(String platform) throws ApiException {
        ApiResponse<Atom> localVarResp = aToZLandingFeedWithHttpInfo(platform);
        return localVarResp.getData();
    }

    /**
     * A to Z Landing Feed
     * Lists Channel 4 programmes alphabetically from A to Z, providing the same    functionality and information as is available in the A to Z section of the    Channel 4 Programmes page, http://www.channel4.com/programmes.    http://api.channel4.com/pmlsd/atoz.atom    http://api.channel4.com/pmlsd/atoz.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return ApiResponse&lt;Atom&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Atom> aToZLandingFeedWithHttpInfo(String platform) throws ApiException {
        okhttp3.Call localVarCall = aToZLandingFeedValidateBeforeCall(platform, null);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * A to Z Landing Feed (asynchronously)
     * Lists Channel 4 programmes alphabetically from A to Z, providing the same    functionality and information as is available in the A to Z section of the    Channel 4 Programmes page, http://www.channel4.com/programmes.    http://api.channel4.com/pmlsd/atoz.atom    http://api.channel4.com/pmlsd/atoz.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call aToZLandingFeedAsync(String platform, final ApiCallback<Atom> _callback) throws ApiException {

        okhttp3.Call localVarCall = aToZLandingFeedValidateBeforeCall(platform, _callback);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for aToZLetterFeed
     * @param startLetter The letter of the alphabet for which you seek associated Channel 4 programmes (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call aToZLetterFeedCall(String startLetter, String platform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/atoz/{start_letter}.atom"
            .replace("{" + "start_letter" + "}", localVarApiClient.escapeString(startLetter.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call aToZLetterFeedValidateBeforeCall(String startLetter, String platform, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'startLetter' is set
        if (startLetter == null) {
            throw new ApiException("Missing the required parameter 'startLetter' when calling aToZLetterFeed(Async)");
        }

        return aToZLetterFeedCall(startLetter, platform, _callback);

    }

    /**
     * A to Z Letter Feed
     * Lists Channel 4 programmes whose names begin with the associated letter.    http://api.channel4.com/pmlsd/atoz/start_letter.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/atoz/a.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param startLetter The letter of the alphabet for which you seek associated Channel 4 programmes (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return Atom
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Atom aToZLetterFeed(String startLetter, String platform) throws ApiException {
        ApiResponse<Atom> localVarResp = aToZLetterFeedWithHttpInfo(startLetter, platform);
        return localVarResp.getData();
    }

    /**
     * A to Z Letter Feed
     * Lists Channel 4 programmes whose names begin with the associated letter.    http://api.channel4.com/pmlsd/atoz/start_letter.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/atoz/a.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param startLetter The letter of the alphabet for which you seek associated Channel 4 programmes (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return ApiResponse&lt;Atom&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Atom> aToZLetterFeedWithHttpInfo(String startLetter, String platform) throws ApiException {
        okhttp3.Call localVarCall = aToZLetterFeedValidateBeforeCall(startLetter, platform, null);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * A to Z Letter Feed (asynchronously)
     * Lists Channel 4 programmes whose names begin with the associated letter.    http://api.channel4.com/pmlsd/atoz/start_letter.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/atoz/a.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param startLetter The letter of the alphabet for which you seek associated Channel 4 programmes (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call aToZLetterFeedAsync(String startLetter, String platform, final ApiCallback<Atom> _callback) throws ApiException {

        okhttp3.Call localVarCall = aToZLetterFeedValidateBeforeCall(startLetter, platform, _callback);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for aToZLetterFeed2
     * @param startLetter The letter of the alphabet for which you seek associated Channel 4 programmes (required)
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call aToZLetterFeed2Call(String startLetter, Integer pageno, String platform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/atoz/{start_letter}/page-{pageno}.atom"
            .replace("{" + "start_letter" + "}", localVarApiClient.escapeString(startLetter.toString()))
            .replace("{" + "pageno" + "}", localVarApiClient.escapeString(pageno.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call aToZLetterFeed2ValidateBeforeCall(String startLetter, Integer pageno, String platform, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'startLetter' is set
        if (startLetter == null) {
            throw new ApiException("Missing the required parameter 'startLetter' when calling aToZLetterFeed2(Async)");
        }

        // verify the required parameter 'pageno' is set
        if (pageno == null) {
            throw new ApiException("Missing the required parameter 'pageno' when calling aToZLetterFeed2(Async)");
        }

        return aToZLetterFeed2Call(startLetter, pageno, platform, _callback);

    }

    /**
     * A to Z Letter Feed(2)
     * Lists Channel 4 programmes whose names begin with the associated letter.    http://api.channel4.com/pmlsd/atoz/start_letter/page-{pageno}.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/atoz/a.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param startLetter The letter of the alphabet for which you seek associated Channel 4 programmes (required)
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return Atom
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Atom aToZLetterFeed2(String startLetter, Integer pageno, String platform) throws ApiException {
        ApiResponse<Atom> localVarResp = aToZLetterFeed2WithHttpInfo(startLetter, pageno, platform);
        return localVarResp.getData();
    }

    /**
     * A to Z Letter Feed(2)
     * Lists Channel 4 programmes whose names begin with the associated letter.    http://api.channel4.com/pmlsd/atoz/start_letter/page-{pageno}.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/atoz/a.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param startLetter The letter of the alphabet for which you seek associated Channel 4 programmes (required)
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return ApiResponse&lt;Atom&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Atom> aToZLetterFeed2WithHttpInfo(String startLetter, Integer pageno, String platform) throws ApiException {
        okhttp3.Call localVarCall = aToZLetterFeed2ValidateBeforeCall(startLetter, pageno, platform, null);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * A to Z Letter Feed(2) (asynchronously)
     * Lists Channel 4 programmes whose names begin with the associated letter.    http://api.channel4.com/pmlsd/atoz/start_letter/page-{pageno}.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/atoz/a.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param startLetter The letter of the alphabet for which you seek associated Channel 4 programmes (required)
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call aToZLetterFeed2Async(String startLetter, Integer pageno, String platform, final ApiCallback<Atom> _callback) throws ApiException {

        okhttp3.Call localVarCall = aToZLetterFeed2ValidateBeforeCall(startLetter, pageno, platform, _callback);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for allProgrammesByTXDate
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call allProgrammesByTXDateCall(String category, String platform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/categories/{category}.atom"
            .replace("{" + "category" + "}", localVarApiClient.escapeString(category.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call allProgrammesByTXDateValidateBeforeCall(String category, String platform, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'category' is set
        if (category == null) {
            throw new ApiException("Missing the required parameter 'category' when calling allProgrammesByTXDate(Async)");
        }

        return allProgrammesByTXDateCall(category, platform, _callback);

    }

    /**
     * All Programmes by TX Date
     * Lists all Channel 4 programmes associated with the specified category (tag).     By default, the programmes are listed in order of Transmission (TX) Date,    with the most-recently-transmitted programmes listed first.    http://api.channel4.com/pmlsd/categories/category.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/animals.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return Atom
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Atom allProgrammesByTXDate(String category, String platform) throws ApiException {
        ApiResponse<Atom> localVarResp = allProgrammesByTXDateWithHttpInfo(category, platform);
        return localVarResp.getData();
    }

    /**
     * All Programmes by TX Date
     * Lists all Channel 4 programmes associated with the specified category (tag).     By default, the programmes are listed in order of Transmission (TX) Date,    with the most-recently-transmitted programmes listed first.    http://api.channel4.com/pmlsd/categories/category.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/animals.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return ApiResponse&lt;Atom&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Atom> allProgrammesByTXDateWithHttpInfo(String category, String platform) throws ApiException {
        okhttp3.Call localVarCall = allProgrammesByTXDateValidateBeforeCall(category, platform, null);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * All Programmes by TX Date (asynchronously)
     * Lists all Channel 4 programmes associated with the specified category (tag).     By default, the programmes are listed in order of Transmission (TX) Date,    with the most-recently-transmitted programmes listed first.    http://api.channel4.com/pmlsd/categories/category.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/animals.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call allProgrammesByTXDateAsync(String category, String platform, final ApiCallback<Atom> _callback) throws ApiException {

        okhttp3.Call localVarCall = allProgrammesByTXDateValidateBeforeCall(category, platform, _callback);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for allProgrammesByTXDate2
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param channel The name of the channel for which you seek associated Channel 4oD programmes (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call allProgrammesByTXDate2Call(String category, String channel, String platform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/categories/{category}/channel/{channel}.atom"
            .replace("{" + "category" + "}", localVarApiClient.escapeString(category.toString()))
            .replace("{" + "channel" + "}", localVarApiClient.escapeString(channel.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call allProgrammesByTXDate2ValidateBeforeCall(String category, String channel, String platform, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'category' is set
        if (category == null) {
            throw new ApiException("Missing the required parameter 'category' when calling allProgrammesByTXDate2(Async)");
        }

        // verify the required parameter 'channel' is set
        if (channel == null) {
            throw new ApiException("Missing the required parameter 'channel' when calling allProgrammesByTXDate2(Async)");
        }

        return allProgrammesByTXDate2Call(category, channel, platform, _callback);

    }

    /**
     * All Programmes by TX Date(2)
     * Lists all Channel 4 programmes associated with the specified category (tag).     By default, the programmes are listed in order of Transmission (TX) Date,    with the most-recently-transmitted programmes listed first.    http://api.channel4.com/pmlsd/categories/category/channel/[channel].atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/animals.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param channel The name of the channel for which you seek associated Channel 4oD programmes (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return Atom
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Atom allProgrammesByTXDate2(String category, String channel, String platform) throws ApiException {
        ApiResponse<Atom> localVarResp = allProgrammesByTXDate2WithHttpInfo(category, channel, platform);
        return localVarResp.getData();
    }

    /**
     * All Programmes by TX Date(2)
     * Lists all Channel 4 programmes associated with the specified category (tag).     By default, the programmes are listed in order of Transmission (TX) Date,    with the most-recently-transmitted programmes listed first.    http://api.channel4.com/pmlsd/categories/category/channel/[channel].atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/animals.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param channel The name of the channel for which you seek associated Channel 4oD programmes (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return ApiResponse&lt;Atom&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Atom> allProgrammesByTXDate2WithHttpInfo(String category, String channel, String platform) throws ApiException {
        okhttp3.Call localVarCall = allProgrammesByTXDate2ValidateBeforeCall(category, channel, platform, null);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * All Programmes by TX Date(2) (asynchronously)
     * Lists all Channel 4 programmes associated with the specified category (tag).     By default, the programmes are listed in order of Transmission (TX) Date,    with the most-recently-transmitted programmes listed first.    http://api.channel4.com/pmlsd/categories/category/channel/[channel].atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/animals.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param channel The name of the channel for which you seek associated Channel 4oD programmes (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call allProgrammesByTXDate2Async(String category, String channel, String platform, final ApiCallback<Atom> _callback) throws ApiException {

        okhttp3.Call localVarCall = allProgrammesByTXDate2ValidateBeforeCall(category, channel, platform, _callback);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for allProgrammesByTXDate3
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call allProgrammesByTXDate3Call(String category, String platform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/categories/{category}/derived/ad.atom"
            .replace("{" + "category" + "}", localVarApiClient.escapeString(category.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call allProgrammesByTXDate3ValidateBeforeCall(String category, String platform, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'category' is set
        if (category == null) {
            throw new ApiException("Missing the required parameter 'category' when calling allProgrammesByTXDate3(Async)");
        }

        return allProgrammesByTXDate3Call(category, platform, _callback);

    }

    /**
     * All Programmes by TX Date(3)
     * Lists all Channel 4 programmes associated with the specified category (tag).     By default, the programmes are listed in order of Transmission (TX) Date,    with the most-recently-transmitted programmes listed first.    http://api.channel4.com/pmlsd/categories/category/derived/ad.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/animals.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return Atom
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Atom allProgrammesByTXDate3(String category, String platform) throws ApiException {
        ApiResponse<Atom> localVarResp = allProgrammesByTXDate3WithHttpInfo(category, platform);
        return localVarResp.getData();
    }

    /**
     * All Programmes by TX Date(3)
     * Lists all Channel 4 programmes associated with the specified category (tag).     By default, the programmes are listed in order of Transmission (TX) Date,    with the most-recently-transmitted programmes listed first.    http://api.channel4.com/pmlsd/categories/category/derived/ad.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/animals.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return ApiResponse&lt;Atom&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Atom> allProgrammesByTXDate3WithHttpInfo(String category, String platform) throws ApiException {
        okhttp3.Call localVarCall = allProgrammesByTXDate3ValidateBeforeCall(category, platform, null);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * All Programmes by TX Date(3) (asynchronously)
     * Lists all Channel 4 programmes associated with the specified category (tag).     By default, the programmes are listed in order of Transmission (TX) Date,    with the most-recently-transmitted programmes listed first.    http://api.channel4.com/pmlsd/categories/category/derived/ad.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/animals.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call allProgrammesByTXDate3Async(String category, String platform, final ApiCallback<Atom> _callback) throws ApiException {

        okhttp3.Call localVarCall = allProgrammesByTXDate3ValidateBeforeCall(category, platform, _callback);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for allProgrammesByTXDate4
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call allProgrammesByTXDate4Call(String category, Integer pageno, String platform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/categories/{category}/page-{pageno}.atom"
            .replace("{" + "category" + "}", localVarApiClient.escapeString(category.toString()))
            .replace("{" + "pageno" + "}", localVarApiClient.escapeString(pageno.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call allProgrammesByTXDate4ValidateBeforeCall(String category, Integer pageno, String platform, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'category' is set
        if (category == null) {
            throw new ApiException("Missing the required parameter 'category' when calling allProgrammesByTXDate4(Async)");
        }

        // verify the required parameter 'pageno' is set
        if (pageno == null) {
            throw new ApiException("Missing the required parameter 'pageno' when calling allProgrammesByTXDate4(Async)");
        }

        return allProgrammesByTXDate4Call(category, pageno, platform, _callback);

    }

    /**
     * All Programmes by TX Date(4)
     * Lists all Channel 4 programmes associated with the specified category (tag).     By default, the programmes are listed in order of Transmission (TX) Date,    with the most-recently-transmitted programmes listed first.    http://api.channel4.com/pmlsd/categories/category/page-{pageno}.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/animals.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return Atom
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Atom allProgrammesByTXDate4(String category, Integer pageno, String platform) throws ApiException {
        ApiResponse<Atom> localVarResp = allProgrammesByTXDate4WithHttpInfo(category, pageno, platform);
        return localVarResp.getData();
    }

    /**
     * All Programmes by TX Date(4)
     * Lists all Channel 4 programmes associated with the specified category (tag).     By default, the programmes are listed in order of Transmission (TX) Date,    with the most-recently-transmitted programmes listed first.    http://api.channel4.com/pmlsd/categories/category/page-{pageno}.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/animals.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return ApiResponse&lt;Atom&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Atom> allProgrammesByTXDate4WithHttpInfo(String category, Integer pageno, String platform) throws ApiException {
        okhttp3.Call localVarCall = allProgrammesByTXDate4ValidateBeforeCall(category, pageno, platform, null);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * All Programmes by TX Date(4) (asynchronously)
     * Lists all Channel 4 programmes associated with the specified category (tag).     By default, the programmes are listed in order of Transmission (TX) Date,    with the most-recently-transmitted programmes listed first.    http://api.channel4.com/pmlsd/categories/category/page-{pageno}.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/animals.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call allProgrammesByTXDate4Async(String category, Integer pageno, String platform, final ApiCallback<Atom> _callback) throws ApiException {

        okhttp3.Call localVarCall = allProgrammesByTXDate4ValidateBeforeCall(category, pageno, platform, _callback);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for allProgrammesByTXDate5
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param channel The name of the channel for which you seek associated Channel 4oD programmes (required)
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call allProgrammesByTXDate5Call(String category, String channel, Integer pageno, String platform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/categories/{category}/channel/{channel}/page-{pageno}.atom"
            .replace("{" + "category" + "}", localVarApiClient.escapeString(category.toString()))
            .replace("{" + "channel" + "}", localVarApiClient.escapeString(channel.toString()))
            .replace("{" + "pageno" + "}", localVarApiClient.escapeString(pageno.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call allProgrammesByTXDate5ValidateBeforeCall(String category, String channel, Integer pageno, String platform, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'category' is set
        if (category == null) {
            throw new ApiException("Missing the required parameter 'category' when calling allProgrammesByTXDate5(Async)");
        }

        // verify the required parameter 'channel' is set
        if (channel == null) {
            throw new ApiException("Missing the required parameter 'channel' when calling allProgrammesByTXDate5(Async)");
        }

        // verify the required parameter 'pageno' is set
        if (pageno == null) {
            throw new ApiException("Missing the required parameter 'pageno' when calling allProgrammesByTXDate5(Async)");
        }

        return allProgrammesByTXDate5Call(category, channel, pageno, platform, _callback);

    }

    /**
     * All Programmes by TX Date(5)
     * Lists all Channel 4 programmes associated with the specified category (tag).     By default, the programmes are listed in order of Transmission (TX) Date,    with the most-recently-transmitted programmes listed first.    http://api.channel4.com/pmlsd/categories/category/channel/[channel]/page-{pageno}.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/animals.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param channel The name of the channel for which you seek associated Channel 4oD programmes (required)
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return Atom
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Atom allProgrammesByTXDate5(String category, String channel, Integer pageno, String platform) throws ApiException {
        ApiResponse<Atom> localVarResp = allProgrammesByTXDate5WithHttpInfo(category, channel, pageno, platform);
        return localVarResp.getData();
    }

    /**
     * All Programmes by TX Date(5)
     * Lists all Channel 4 programmes associated with the specified category (tag).     By default, the programmes are listed in order of Transmission (TX) Date,    with the most-recently-transmitted programmes listed first.    http://api.channel4.com/pmlsd/categories/category/channel/[channel]/page-{pageno}.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/animals.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param channel The name of the channel for which you seek associated Channel 4oD programmes (required)
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return ApiResponse&lt;Atom&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Atom> allProgrammesByTXDate5WithHttpInfo(String category, String channel, Integer pageno, String platform) throws ApiException {
        okhttp3.Call localVarCall = allProgrammesByTXDate5ValidateBeforeCall(category, channel, pageno, platform, null);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * All Programmes by TX Date(5) (asynchronously)
     * Lists all Channel 4 programmes associated with the specified category (tag).     By default, the programmes are listed in order of Transmission (TX) Date,    with the most-recently-transmitted programmes listed first.    http://api.channel4.com/pmlsd/categories/category/channel/[channel]/page-{pageno}.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/animals.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param channel The name of the channel for which you seek associated Channel 4oD programmes (required)
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call allProgrammesByTXDate5Async(String category, String channel, Integer pageno, String platform, final ApiCallback<Atom> _callback) throws ApiException {

        okhttp3.Call localVarCall = allProgrammesByTXDate5ValidateBeforeCall(category, channel, pageno, platform, _callback);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for allProgrammesByTXDate6
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call allProgrammesByTXDate6Call(String category, Integer pageno, String platform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/categories/{category}/derived/ad/page-{pageno}.atom"
            .replace("{" + "category" + "}", localVarApiClient.escapeString(category.toString()))
            .replace("{" + "pageno" + "}", localVarApiClient.escapeString(pageno.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call allProgrammesByTXDate6ValidateBeforeCall(String category, Integer pageno, String platform, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'category' is set
        if (category == null) {
            throw new ApiException("Missing the required parameter 'category' when calling allProgrammesByTXDate6(Async)");
        }

        // verify the required parameter 'pageno' is set
        if (pageno == null) {
            throw new ApiException("Missing the required parameter 'pageno' when calling allProgrammesByTXDate6(Async)");
        }

        return allProgrammesByTXDate6Call(category, pageno, platform, _callback);

    }

    /**
     * All Programmes by TX Date(6)
     * Lists all Channel 4 programmes associated with the specified category (tag).     By default, the programmes are listed in order of Transmission (TX) Date,    with the most-recently-transmitted programmes listed first.    http://api.channel4.com/pmlsd/categories/category/derived/ad/page-{pageno}.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/animals.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return Atom
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Atom allProgrammesByTXDate6(String category, Integer pageno, String platform) throws ApiException {
        ApiResponse<Atom> localVarResp = allProgrammesByTXDate6WithHttpInfo(category, pageno, platform);
        return localVarResp.getData();
    }

    /**
     * All Programmes by TX Date(6)
     * Lists all Channel 4 programmes associated with the specified category (tag).     By default, the programmes are listed in order of Transmission (TX) Date,    with the most-recently-transmitted programmes listed first.    http://api.channel4.com/pmlsd/categories/category/derived/ad/page-{pageno}.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/animals.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return ApiResponse&lt;Atom&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Atom> allProgrammesByTXDate6WithHttpInfo(String category, Integer pageno, String platform) throws ApiException {
        okhttp3.Call localVarCall = allProgrammesByTXDate6ValidateBeforeCall(category, pageno, platform, null);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * All Programmes by TX Date(6) (asynchronously)
     * Lists all Channel 4 programmes associated with the specified category (tag).     By default, the programmes are listed in order of Transmission (TX) Date,    with the most-recently-transmitted programmes listed first.    http://api.channel4.com/pmlsd/categories/category/derived/ad/page-{pageno}.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/animals.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call allProgrammesByTXDate6Async(String category, Integer pageno, String platform, final ApiCallback<Atom> _callback) throws ApiException {

        okhttp3.Call localVarCall = allProgrammesByTXDate6ValidateBeforeCall(category, pageno, platform, _callback);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for allProgrammesByTitle
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call allProgrammesByTitleCall(String category, String platform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/categories/{category}/title.atom"
            .replace("{" + "category" + "}", localVarApiClient.escapeString(category.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call allProgrammesByTitleValidateBeforeCall(String category, String platform, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'category' is set
        if (category == null) {
            throw new ApiException("Missing the required parameter 'category' when calling allProgrammesByTitle(Async)");
        }

        return allProgrammesByTitleCall(category, platform, _callback);

    }

    /**
     * All Programmes by Title
     * Lists all Channel 4 programmes associated with the specified category (tag),    alphanumerically in order of Title.    http://api.channel4.com/pmlsd/categories/category/title.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/history/title.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return Atom
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Atom allProgrammesByTitle(String category, String platform) throws ApiException {
        ApiResponse<Atom> localVarResp = allProgrammesByTitleWithHttpInfo(category, platform);
        return localVarResp.getData();
    }

    /**
     * All Programmes by Title
     * Lists all Channel 4 programmes associated with the specified category (tag),    alphanumerically in order of Title.    http://api.channel4.com/pmlsd/categories/category/title.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/history/title.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return ApiResponse&lt;Atom&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Atom> allProgrammesByTitleWithHttpInfo(String category, String platform) throws ApiException {
        okhttp3.Call localVarCall = allProgrammesByTitleValidateBeforeCall(category, platform, null);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * All Programmes by Title (asynchronously)
     * Lists all Channel 4 programmes associated with the specified category (tag),    alphanumerically in order of Title.    http://api.channel4.com/pmlsd/categories/category/title.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/history/title.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call allProgrammesByTitleAsync(String category, String platform, final ApiCallback<Atom> _callback) throws ApiException {

        okhttp3.Call localVarCall = allProgrammesByTitleValidateBeforeCall(category, platform, _callback);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for allProgrammesByTitle2
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param channel The name of the channel for which you seek associated Channel 4oD programmes (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call allProgrammesByTitle2Call(String category, String channel, String platform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/categories/{category}/channel/{channel}/title.atom"
            .replace("{" + "category" + "}", localVarApiClient.escapeString(category.toString()))
            .replace("{" + "channel" + "}", localVarApiClient.escapeString(channel.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call allProgrammesByTitle2ValidateBeforeCall(String category, String channel, String platform, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'category' is set
        if (category == null) {
            throw new ApiException("Missing the required parameter 'category' when calling allProgrammesByTitle2(Async)");
        }

        // verify the required parameter 'channel' is set
        if (channel == null) {
            throw new ApiException("Missing the required parameter 'channel' when calling allProgrammesByTitle2(Async)");
        }

        return allProgrammesByTitle2Call(category, channel, platform, _callback);

    }

    /**
     * All Programmes by Title(2)
     * Lists all Channel 4 programmes associated with the specified category (tag),    alphanumerically in order of Title.    http://api.channel4.com/pmlsd/categories/category/channel/[channel]/title.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/history/title.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param channel The name of the channel for which you seek associated Channel 4oD programmes (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return Atom
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Atom allProgrammesByTitle2(String category, String channel, String platform) throws ApiException {
        ApiResponse<Atom> localVarResp = allProgrammesByTitle2WithHttpInfo(category, channel, platform);
        return localVarResp.getData();
    }

    /**
     * All Programmes by Title(2)
     * Lists all Channel 4 programmes associated with the specified category (tag),    alphanumerically in order of Title.    http://api.channel4.com/pmlsd/categories/category/channel/[channel]/title.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/history/title.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param channel The name of the channel for which you seek associated Channel 4oD programmes (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return ApiResponse&lt;Atom&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Atom> allProgrammesByTitle2WithHttpInfo(String category, String channel, String platform) throws ApiException {
        okhttp3.Call localVarCall = allProgrammesByTitle2ValidateBeforeCall(category, channel, platform, null);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * All Programmes by Title(2) (asynchronously)
     * Lists all Channel 4 programmes associated with the specified category (tag),    alphanumerically in order of Title.    http://api.channel4.com/pmlsd/categories/category/channel/[channel]/title.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/history/title.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param channel The name of the channel for which you seek associated Channel 4oD programmes (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call allProgrammesByTitle2Async(String category, String channel, String platform, final ApiCallback<Atom> _callback) throws ApiException {

        okhttp3.Call localVarCall = allProgrammesByTitle2ValidateBeforeCall(category, channel, platform, _callback);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for allProgrammesByTitle3
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call allProgrammesByTitle3Call(String category, String platform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/categories/{category}/derived/ad/title.atom"
            .replace("{" + "category" + "}", localVarApiClient.escapeString(category.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call allProgrammesByTitle3ValidateBeforeCall(String category, String platform, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'category' is set
        if (category == null) {
            throw new ApiException("Missing the required parameter 'category' when calling allProgrammesByTitle3(Async)");
        }

        return allProgrammesByTitle3Call(category, platform, _callback);

    }

    /**
     * All Programmes by Title(3)
     * Lists all Channel 4 programmes associated with the specified category (tag),    alphanumerically in order of Title.    http://api.channel4.com/pmlsd/categories/category/derived/ad/title.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/history/title.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return Atom
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Atom allProgrammesByTitle3(String category, String platform) throws ApiException {
        ApiResponse<Atom> localVarResp = allProgrammesByTitle3WithHttpInfo(category, platform);
        return localVarResp.getData();
    }

    /**
     * All Programmes by Title(3)
     * Lists all Channel 4 programmes associated with the specified category (tag),    alphanumerically in order of Title.    http://api.channel4.com/pmlsd/categories/category/derived/ad/title.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/history/title.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return ApiResponse&lt;Atom&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Atom> allProgrammesByTitle3WithHttpInfo(String category, String platform) throws ApiException {
        okhttp3.Call localVarCall = allProgrammesByTitle3ValidateBeforeCall(category, platform, null);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * All Programmes by Title(3) (asynchronously)
     * Lists all Channel 4 programmes associated with the specified category (tag),    alphanumerically in order of Title.    http://api.channel4.com/pmlsd/categories/category/derived/ad/title.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/history/title.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call allProgrammesByTitle3Async(String category, String platform, final ApiCallback<Atom> _callback) throws ApiException {

        okhttp3.Call localVarCall = allProgrammesByTitle3ValidateBeforeCall(category, platform, _callback);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for allProgrammesByTitle4
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call allProgrammesByTitle4Call(String category, Integer pageno, String platform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/categories/{category}/title/page-{pageno}.atom"
            .replace("{" + "category" + "}", localVarApiClient.escapeString(category.toString()))
            .replace("{" + "pageno" + "}", localVarApiClient.escapeString(pageno.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call allProgrammesByTitle4ValidateBeforeCall(String category, Integer pageno, String platform, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'category' is set
        if (category == null) {
            throw new ApiException("Missing the required parameter 'category' when calling allProgrammesByTitle4(Async)");
        }

        // verify the required parameter 'pageno' is set
        if (pageno == null) {
            throw new ApiException("Missing the required parameter 'pageno' when calling allProgrammesByTitle4(Async)");
        }

        return allProgrammesByTitle4Call(category, pageno, platform, _callback);

    }

    /**
     * All Programmes by Title(4)
     * Lists all Channel 4 programmes associated with the specified category (tag),    alphanumerically in order of Title.    http://api.channel4.com/pmlsd/categories/category/title/page-{pageno}.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/history/title.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return Atom
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Atom allProgrammesByTitle4(String category, Integer pageno, String platform) throws ApiException {
        ApiResponse<Atom> localVarResp = allProgrammesByTitle4WithHttpInfo(category, pageno, platform);
        return localVarResp.getData();
    }

    /**
     * All Programmes by Title(4)
     * Lists all Channel 4 programmes associated with the specified category (tag),    alphanumerically in order of Title.    http://api.channel4.com/pmlsd/categories/category/title/page-{pageno}.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/history/title.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return ApiResponse&lt;Atom&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Atom> allProgrammesByTitle4WithHttpInfo(String category, Integer pageno, String platform) throws ApiException {
        okhttp3.Call localVarCall = allProgrammesByTitle4ValidateBeforeCall(category, pageno, platform, null);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * All Programmes by Title(4) (asynchronously)
     * Lists all Channel 4 programmes associated with the specified category (tag),    alphanumerically in order of Title.    http://api.channel4.com/pmlsd/categories/category/title/page-{pageno}.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/history/title.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call allProgrammesByTitle4Async(String category, Integer pageno, String platform, final ApiCallback<Atom> _callback) throws ApiException {

        okhttp3.Call localVarCall = allProgrammesByTitle4ValidateBeforeCall(category, pageno, platform, _callback);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for allProgrammesByTitle5
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param channel The name of the channel for which you seek associated Channel 4oD programmes (required)
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call allProgrammesByTitle5Call(String category, String channel, Integer pageno, String platform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/categories/{category}/channel/{channel}/title/page-{pageno}.atom"
            .replace("{" + "category" + "}", localVarApiClient.escapeString(category.toString()))
            .replace("{" + "channel" + "}", localVarApiClient.escapeString(channel.toString()))
            .replace("{" + "pageno" + "}", localVarApiClient.escapeString(pageno.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call allProgrammesByTitle5ValidateBeforeCall(String category, String channel, Integer pageno, String platform, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'category' is set
        if (category == null) {
            throw new ApiException("Missing the required parameter 'category' when calling allProgrammesByTitle5(Async)");
        }

        // verify the required parameter 'channel' is set
        if (channel == null) {
            throw new ApiException("Missing the required parameter 'channel' when calling allProgrammesByTitle5(Async)");
        }

        // verify the required parameter 'pageno' is set
        if (pageno == null) {
            throw new ApiException("Missing the required parameter 'pageno' when calling allProgrammesByTitle5(Async)");
        }

        return allProgrammesByTitle5Call(category, channel, pageno, platform, _callback);

    }

    /**
     * All Programmes by Title(5)
     * Lists all Channel 4 programmes associated with the specified category (tag),    alphanumerically in order of Title.    http://api.channel4.com/pmlsd/categories/category/channel/[channel]/title/page-{pageno}.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/history/title.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param channel The name of the channel for which you seek associated Channel 4oD programmes (required)
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return Atom
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Atom allProgrammesByTitle5(String category, String channel, Integer pageno, String platform) throws ApiException {
        ApiResponse<Atom> localVarResp = allProgrammesByTitle5WithHttpInfo(category, channel, pageno, platform);
        return localVarResp.getData();
    }

    /**
     * All Programmes by Title(5)
     * Lists all Channel 4 programmes associated with the specified category (tag),    alphanumerically in order of Title.    http://api.channel4.com/pmlsd/categories/category/channel/[channel]/title/page-{pageno}.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/history/title.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param channel The name of the channel for which you seek associated Channel 4oD programmes (required)
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return ApiResponse&lt;Atom&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Atom> allProgrammesByTitle5WithHttpInfo(String category, String channel, Integer pageno, String platform) throws ApiException {
        okhttp3.Call localVarCall = allProgrammesByTitle5ValidateBeforeCall(category, channel, pageno, platform, null);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * All Programmes by Title(5) (asynchronously)
     * Lists all Channel 4 programmes associated with the specified category (tag),    alphanumerically in order of Title.    http://api.channel4.com/pmlsd/categories/category/channel/[channel]/title/page-{pageno}.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/history/title.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param channel The name of the channel for which you seek associated Channel 4oD programmes (required)
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call allProgrammesByTitle5Async(String category, String channel, Integer pageno, String platform, final ApiCallback<Atom> _callback) throws ApiException {

        okhttp3.Call localVarCall = allProgrammesByTitle5ValidateBeforeCall(category, channel, pageno, platform, _callback);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for allProgrammesByTitle6
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call allProgrammesByTitle6Call(String category, Integer pageno, String platform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/categories/{category}/derived/ad/title/page-{pageno}.atom"
            .replace("{" + "category" + "}", localVarApiClient.escapeString(category.toString()))
            .replace("{" + "pageno" + "}", localVarApiClient.escapeString(pageno.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call allProgrammesByTitle6ValidateBeforeCall(String category, Integer pageno, String platform, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'category' is set
        if (category == null) {
            throw new ApiException("Missing the required parameter 'category' when calling allProgrammesByTitle6(Async)");
        }

        // verify the required parameter 'pageno' is set
        if (pageno == null) {
            throw new ApiException("Missing the required parameter 'pageno' when calling allProgrammesByTitle6(Async)");
        }

        return allProgrammesByTitle6Call(category, pageno, platform, _callback);

    }

    /**
     * All Programmes by Title(6)
     * Lists all Channel 4 programmes associated with the specified category (tag),    alphanumerically in order of Title.    http://api.channel4.com/pmlsd/categories/category/derived/ad/title/page-{pageno}.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/history/title.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return Atom
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Atom allProgrammesByTitle6(String category, Integer pageno, String platform) throws ApiException {
        ApiResponse<Atom> localVarResp = allProgrammesByTitle6WithHttpInfo(category, pageno, platform);
        return localVarResp.getData();
    }

    /**
     * All Programmes by Title(6)
     * Lists all Channel 4 programmes associated with the specified category (tag),    alphanumerically in order of Title.    http://api.channel4.com/pmlsd/categories/category/derived/ad/title/page-{pageno}.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/history/title.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return ApiResponse&lt;Atom&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Atom> allProgrammesByTitle6WithHttpInfo(String category, Integer pageno, String platform) throws ApiException {
        okhttp3.Call localVarCall = allProgrammesByTitle6ValidateBeforeCall(category, pageno, platform, null);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * All Programmes by Title(6) (asynchronously)
     * Lists all Channel 4 programmes associated with the specified category (tag),    alphanumerically in order of Title.    http://api.channel4.com/pmlsd/categories/category/derived/ad/title/page-{pageno}.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/history/title.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call allProgrammesByTitle6Async(String category, Integer pageno, String platform, final ApiCallback<Atom> _callback) throws ApiException {

        okhttp3.Call localVarCall = allProgrammesByTitle6ValidateBeforeCall(category, pageno, platform, _callback);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for call4oDBrowseByDateFeed
     * @param yyyy The date for which you wish to see programming information (required)
     * @param mm The date for which you wish to see programming information (required)
     * @param dd The date for which you wish to see programming information (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call4oDBrowseByDateFeedCall(String yyyy, String mm, String dd, String platform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/4od/episode-list/date/{yyyy}/{mm}/{dd}.atom"
            .replace("{" + "yyyy" + "}", localVarApiClient.escapeString(yyyy.toString()))
            .replace("{" + "mm" + "}", localVarApiClient.escapeString(mm.toString()))
            .replace("{" + "dd" + "}", localVarApiClient.escapeString(dd.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call call4oDBrowseByDateFeedValidateBeforeCall(String yyyy, String mm, String dd, String platform, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'yyyy' is set
        if (yyyy == null) {
            throw new ApiException("Missing the required parameter 'yyyy' when calling call4oDBrowseByDateFeed(Async)");
        }

        // verify the required parameter 'mm' is set
        if (mm == null) {
            throw new ApiException("Missing the required parameter 'mm' when calling call4oDBrowseByDateFeed(Async)");
        }

        // verify the required parameter 'dd' is set
        if (dd == null) {
            throw new ApiException("Missing the required parameter 'dd' when calling call4oDBrowseByDateFeed(Async)");
        }

        return call4oDBrowseByDateFeedCall(yyyy, mm, dd, platform, _callback);

    }

    /**
     * 4oD Browse by Date Feed
     * Information of daily broadcast content available on 4oD, according to    broadcast date    http://api.channel4.com/pmlsd/4od/episode-list/date/[yyyy]/[mm]/[dd].atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/4od/episode-list/date/2010/11/28.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param yyyy The date for which you wish to see programming information (required)
     * @param mm The date for which you wish to see programming information (required)
     * @param dd The date for which you wish to see programming information (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return Atom
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Atom call4oDBrowseByDateFeed(String yyyy, String mm, String dd, String platform) throws ApiException {
        ApiResponse<Atom> localVarResp = call4oDBrowseByDateFeedWithHttpInfo(yyyy, mm, dd, platform);
        return localVarResp.getData();
    }

    /**
     * 4oD Browse by Date Feed
     * Information of daily broadcast content available on 4oD, according to    broadcast date    http://api.channel4.com/pmlsd/4od/episode-list/date/[yyyy]/[mm]/[dd].atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/4od/episode-list/date/2010/11/28.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param yyyy The date for which you wish to see programming information (required)
     * @param mm The date for which you wish to see programming information (required)
     * @param dd The date for which you wish to see programming information (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return ApiResponse&lt;Atom&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Atom> call4oDBrowseByDateFeedWithHttpInfo(String yyyy, String mm, String dd, String platform) throws ApiException {
        okhttp3.Call localVarCall = call4oDBrowseByDateFeedValidateBeforeCall(yyyy, mm, dd, platform, null);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 4oD Browse by Date Feed (asynchronously)
     * Information of daily broadcast content available on 4oD, according to    broadcast date    http://api.channel4.com/pmlsd/4od/episode-list/date/[yyyy]/[mm]/[dd].atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/4od/episode-list/date/2010/11/28.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param yyyy The date for which you wish to see programming information (required)
     * @param mm The date for which you wish to see programming information (required)
     * @param dd The date for which you wish to see programming information (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call4oDBrowseByDateFeedAsync(String yyyy, String mm, String dd, String platform, final ApiCallback<Atom> _callback) throws ApiException {

        okhttp3.Call localVarCall = call4oDBrowseByDateFeedValidateBeforeCall(yyyy, mm, dd, platform, _callback);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for call4oDClipsCatchUpFeed
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call4oDClipsCatchUpFeedCall(String platform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/4od/recently-added/videos.atom";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call call4oDClipsCatchUpFeedValidateBeforeCall(String platform, final ApiCallback _callback) throws ApiException {
        return call4oDClipsCatchUpFeedCall(platform, _callback);

    }

    /**
     * 4oD Clips Catch Up Feed
     * A feed containing metadata about short-form content relating to 4oD Episodes    recently added to 4oD based on linear transmission. The entries for the    Clips Landing Feed contain references to each short-form asset. It will    return up to 20 entries.    http://api.channel4.com/pmlsd/4od/recently-added/videos.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/4od/episode-list/videos.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return Atom
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Atom call4oDClipsCatchUpFeed(String platform) throws ApiException {
        ApiResponse<Atom> localVarResp = call4oDClipsCatchUpFeedWithHttpInfo(platform);
        return localVarResp.getData();
    }

    /**
     * 4oD Clips Catch Up Feed
     * A feed containing metadata about short-form content relating to 4oD Episodes    recently added to 4oD based on linear transmission. The entries for the    Clips Landing Feed contain references to each short-form asset. It will    return up to 20 entries.    http://api.channel4.com/pmlsd/4od/recently-added/videos.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/4od/episode-list/videos.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return ApiResponse&lt;Atom&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Atom> call4oDClipsCatchUpFeedWithHttpInfo(String platform) throws ApiException {
        okhttp3.Call localVarCall = call4oDClipsCatchUpFeedValidateBeforeCall(platform, null);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 4oD Clips Catch Up Feed (asynchronously)
     * A feed containing metadata about short-form content relating to 4oD Episodes    recently added to 4oD based on linear transmission. The entries for the    Clips Landing Feed contain references to each short-form asset. It will    return up to 20 entries.    http://api.channel4.com/pmlsd/4od/recently-added/videos.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/4od/episode-list/videos.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call4oDClipsCatchUpFeedAsync(String platform, final ApiCallback<Atom> _callback) throws ApiException {

        okhttp3.Call localVarCall = call4oDClipsCatchUpFeedValidateBeforeCall(platform, _callback);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for call4oDMostPopularEpisodesFeed
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call4oDMostPopularEpisodesFeedCall(String platform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/4od/episode-list/popular.atom";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call call4oDMostPopularEpisodesFeedValidateBeforeCall(String platform, final ApiCallback _callback) throws ApiException {
        return call4oDMostPopularEpisodesFeedCall(platform, _callback);

    }

    /**
     * 4oD Most Popular Episodes Feed
     * Information of the most popular content available on 4oD, according to user    data driven.    http://api.channel4.com/pmlsd/4od/episode-list/popular.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/4od/episode-list/popular.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return Atom
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Atom call4oDMostPopularEpisodesFeed(String platform) throws ApiException {
        ApiResponse<Atom> localVarResp = call4oDMostPopularEpisodesFeedWithHttpInfo(platform);
        return localVarResp.getData();
    }

    /**
     * 4oD Most Popular Episodes Feed
     * Information of the most popular content available on 4oD, according to user    data driven.    http://api.channel4.com/pmlsd/4od/episode-list/popular.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/4od/episode-list/popular.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return ApiResponse&lt;Atom&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Atom> call4oDMostPopularEpisodesFeedWithHttpInfo(String platform) throws ApiException {
        okhttp3.Call localVarCall = call4oDMostPopularEpisodesFeedValidateBeforeCall(platform, null);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 4oD Most Popular Episodes Feed (asynchronously)
     * Information of the most popular content available on 4oD, according to user    data driven.    http://api.channel4.com/pmlsd/4od/episode-list/popular.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/4od/episode-list/popular.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call4oDMostPopularEpisodesFeedAsync(String platform, final ApiCallback<Atom> _callback) throws ApiException {

        okhttp3.Call localVarCall = call4oDMostPopularEpisodesFeedValidateBeforeCall(platform, _callback);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for call4oDPopularAllBrandsFeed
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call4oDPopularAllBrandsFeedCall(String platform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/brands/4od/popular.atom";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call call4oDPopularAllBrandsFeedValidateBeforeCall(String platform, final ApiCallback _callback) throws ApiException {
        return call4oDPopularAllBrandsFeedCall(platform, _callback);

    }

    /**
     * 4oD Popular All Brands Feed
     * Lists all Channel 4 programmes available on 4oD by popularity considering    the data gathered within the last 7 days.    http://api.channel4.com/pmlsd/brands/4od/popular.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/brands/4od/popular.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return Atom
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Atom call4oDPopularAllBrandsFeed(String platform) throws ApiException {
        ApiResponse<Atom> localVarResp = call4oDPopularAllBrandsFeedWithHttpInfo(platform);
        return localVarResp.getData();
    }

    /**
     * 4oD Popular All Brands Feed
     * Lists all Channel 4 programmes available on 4oD by popularity considering    the data gathered within the last 7 days.    http://api.channel4.com/pmlsd/brands/4od/popular.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/brands/4od/popular.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return ApiResponse&lt;Atom&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Atom> call4oDPopularAllBrandsFeedWithHttpInfo(String platform) throws ApiException {
        okhttp3.Call localVarCall = call4oDPopularAllBrandsFeedValidateBeforeCall(platform, null);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 4oD Popular All Brands Feed (asynchronously)
     * Lists all Channel 4 programmes available on 4oD by popularity considering    the data gathered within the last 7 days.    http://api.channel4.com/pmlsd/brands/4od/popular.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/brands/4od/popular.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call4oDPopularAllBrandsFeedAsync(String platform, final ApiCallback<Atom> _callback) throws ApiException {

        okhttp3.Call localVarCall = call4oDPopularAllBrandsFeedValidateBeforeCall(platform, _callback);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for call4oDPopularAllBrandsFeed2
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call4oDPopularAllBrandsFeed2Call(Integer pageno, String platform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/brands/4od/popular/page-{pageno}.atom"
            .replace("{" + "pageno" + "}", localVarApiClient.escapeString(pageno.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call call4oDPopularAllBrandsFeed2ValidateBeforeCall(Integer pageno, String platform, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pageno' is set
        if (pageno == null) {
            throw new ApiException("Missing the required parameter 'pageno' when calling call4oDPopularAllBrandsFeed2(Async)");
        }

        return call4oDPopularAllBrandsFeed2Call(pageno, platform, _callback);

    }

    /**
     * 4oD Popular All Brands Feed(2)
     * Lists all Channel 4 programmes available on 4oD by popularity considering    the data gathered within the last 7 days.    http://api.channel4.com/pmlsd/brands/4od/popular/page-{pageno}.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/brands/4od/popular.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return Atom
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Atom call4oDPopularAllBrandsFeed2(Integer pageno, String platform) throws ApiException {
        ApiResponse<Atom> localVarResp = call4oDPopularAllBrandsFeed2WithHttpInfo(pageno, platform);
        return localVarResp.getData();
    }

    /**
     * 4oD Popular All Brands Feed(2)
     * Lists all Channel 4 programmes available on 4oD by popularity considering    the data gathered within the last 7 days.    http://api.channel4.com/pmlsd/brands/4od/popular/page-{pageno}.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/brands/4od/popular.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return ApiResponse&lt;Atom&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Atom> call4oDPopularAllBrandsFeed2WithHttpInfo(Integer pageno, String platform) throws ApiException {
        okhttp3.Call localVarCall = call4oDPopularAllBrandsFeed2ValidateBeforeCall(pageno, platform, null);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 4oD Popular All Brands Feed(2) (asynchronously)
     * Lists all Channel 4 programmes available on 4oD by popularity considering    the data gathered within the last 7 days.    http://api.channel4.com/pmlsd/brands/4od/popular/page-{pageno}.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/brands/4od/popular.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call4oDPopularAllBrandsFeed2Async(Integer pageno, String platform, final ApiCallback<Atom> _callback) throws ApiException {

        okhttp3.Call localVarCall = call4oDPopularAllBrandsFeed2ValidateBeforeCall(pageno, platform, _callback);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for call4oDProgrammesByTXDate
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call4oDProgrammesByTXDateCall(String category, String platform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/categories/{category}/4od.atom"
            .replace("{" + "category" + "}", localVarApiClient.escapeString(category.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call call4oDProgrammesByTXDateValidateBeforeCall(String category, String platform, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'category' is set
        if (category == null) {
            throw new ApiException("Missing the required parameter 'category' when calling call4oDProgrammesByTXDate(Async)");
        }

        return call4oDProgrammesByTXDateCall(category, platform, _callback);

    }

    /**
     * 4oD Programmes by TX Date
     * Lists all Channel 4oD programmes associated with the specified category    (tag).By default, the programmes are listed in order of Transmission (TX)    Date, with the most-recently-transmitted programmes listed first.    http://api.channel4.com/pmlsd/categories/category/4od.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/animals/4oD.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return Atom
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Atom call4oDProgrammesByTXDate(String category, String platform) throws ApiException {
        ApiResponse<Atom> localVarResp = call4oDProgrammesByTXDateWithHttpInfo(category, platform);
        return localVarResp.getData();
    }

    /**
     * 4oD Programmes by TX Date
     * Lists all Channel 4oD programmes associated with the specified category    (tag).By default, the programmes are listed in order of Transmission (TX)    Date, with the most-recently-transmitted programmes listed first.    http://api.channel4.com/pmlsd/categories/category/4od.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/animals/4oD.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return ApiResponse&lt;Atom&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Atom> call4oDProgrammesByTXDateWithHttpInfo(String category, String platform) throws ApiException {
        okhttp3.Call localVarCall = call4oDProgrammesByTXDateValidateBeforeCall(category, platform, null);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 4oD Programmes by TX Date (asynchronously)
     * Lists all Channel 4oD programmes associated with the specified category    (tag).By default, the programmes are listed in order of Transmission (TX)    Date, with the most-recently-transmitted programmes listed first.    http://api.channel4.com/pmlsd/categories/category/4od.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/animals/4oD.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call4oDProgrammesByTXDateAsync(String category, String platform, final ApiCallback<Atom> _callback) throws ApiException {

        okhttp3.Call localVarCall = call4oDProgrammesByTXDateValidateBeforeCall(category, platform, _callback);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for call4oDProgrammesByTXDate2
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param channel The name of the channel for which you seek associated Channel 4oD programmes (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call4oDProgrammesByTXDate2Call(String category, String channel, String platform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/categories/{category}/channel/{channel}/4od.atom"
            .replace("{" + "category" + "}", localVarApiClient.escapeString(category.toString()))
            .replace("{" + "channel" + "}", localVarApiClient.escapeString(channel.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call call4oDProgrammesByTXDate2ValidateBeforeCall(String category, String channel, String platform, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'category' is set
        if (category == null) {
            throw new ApiException("Missing the required parameter 'category' when calling call4oDProgrammesByTXDate2(Async)");
        }

        // verify the required parameter 'channel' is set
        if (channel == null) {
            throw new ApiException("Missing the required parameter 'channel' when calling call4oDProgrammesByTXDate2(Async)");
        }

        return call4oDProgrammesByTXDate2Call(category, channel, platform, _callback);

    }

    /**
     * 4oD Programmes by TX Date(2)
     * Lists all Channel 4oD programmes associated with the specified category    (tag).By default, the programmes are listed in order of Transmission (TX)    Date, with the most-recently-transmitted programmes listed first.    http://api.channel4.com/pmlsd/categories/category/channel/[channel]/4od.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/animals/4oD.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param channel The name of the channel for which you seek associated Channel 4oD programmes (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return Atom
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Atom call4oDProgrammesByTXDate2(String category, String channel, String platform) throws ApiException {
        ApiResponse<Atom> localVarResp = call4oDProgrammesByTXDate2WithHttpInfo(category, channel, platform);
        return localVarResp.getData();
    }

    /**
     * 4oD Programmes by TX Date(2)
     * Lists all Channel 4oD programmes associated with the specified category    (tag).By default, the programmes are listed in order of Transmission (TX)    Date, with the most-recently-transmitted programmes listed first.    http://api.channel4.com/pmlsd/categories/category/channel/[channel]/4od.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/animals/4oD.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param channel The name of the channel for which you seek associated Channel 4oD programmes (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return ApiResponse&lt;Atom&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Atom> call4oDProgrammesByTXDate2WithHttpInfo(String category, String channel, String platform) throws ApiException {
        okhttp3.Call localVarCall = call4oDProgrammesByTXDate2ValidateBeforeCall(category, channel, platform, null);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 4oD Programmes by TX Date(2) (asynchronously)
     * Lists all Channel 4oD programmes associated with the specified category    (tag).By default, the programmes are listed in order of Transmission (TX)    Date, with the most-recently-transmitted programmes listed first.    http://api.channel4.com/pmlsd/categories/category/channel/[channel]/4od.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/animals/4oD.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param channel The name of the channel for which you seek associated Channel 4oD programmes (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call4oDProgrammesByTXDate2Async(String category, String channel, String platform, final ApiCallback<Atom> _callback) throws ApiException {

        okhttp3.Call localVarCall = call4oDProgrammesByTXDate2ValidateBeforeCall(category, channel, platform, _callback);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for call4oDProgrammesByTXDate3
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call4oDProgrammesByTXDate3Call(String category, String platform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/categories/{category}/derived/ad/4od.atom"
            .replace("{" + "category" + "}", localVarApiClient.escapeString(category.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call call4oDProgrammesByTXDate3ValidateBeforeCall(String category, String platform, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'category' is set
        if (category == null) {
            throw new ApiException("Missing the required parameter 'category' when calling call4oDProgrammesByTXDate3(Async)");
        }

        return call4oDProgrammesByTXDate3Call(category, platform, _callback);

    }

    /**
     * 4oD Programmes by TX Date(3)
     * Lists all Channel 4oD programmes associated with the specified category    (tag).By default, the programmes are listed in order of Transmission (TX)    Date, with the most-recently-transmitted programmes listed first.    http://api.channel4.com/pmlsd/categories/category/derived/ad/4od.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/animals/4oD.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return Atom
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Atom call4oDProgrammesByTXDate3(String category, String platform) throws ApiException {
        ApiResponse<Atom> localVarResp = call4oDProgrammesByTXDate3WithHttpInfo(category, platform);
        return localVarResp.getData();
    }

    /**
     * 4oD Programmes by TX Date(3)
     * Lists all Channel 4oD programmes associated with the specified category    (tag).By default, the programmes are listed in order of Transmission (TX)    Date, with the most-recently-transmitted programmes listed first.    http://api.channel4.com/pmlsd/categories/category/derived/ad/4od.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/animals/4oD.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return ApiResponse&lt;Atom&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Atom> call4oDProgrammesByTXDate3WithHttpInfo(String category, String platform) throws ApiException {
        okhttp3.Call localVarCall = call4oDProgrammesByTXDate3ValidateBeforeCall(category, platform, null);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 4oD Programmes by TX Date(3) (asynchronously)
     * Lists all Channel 4oD programmes associated with the specified category    (tag).By default, the programmes are listed in order of Transmission (TX)    Date, with the most-recently-transmitted programmes listed first.    http://api.channel4.com/pmlsd/categories/category/derived/ad/4od.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/animals/4oD.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call4oDProgrammesByTXDate3Async(String category, String platform, final ApiCallback<Atom> _callback) throws ApiException {

        okhttp3.Call localVarCall = call4oDProgrammesByTXDate3ValidateBeforeCall(category, platform, _callback);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for call4oDProgrammesByTXDate4
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call4oDProgrammesByTXDate4Call(String category, Integer pageno, String platform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/categories/{category}/4od/page-{pageno}.atom"
            .replace("{" + "category" + "}", localVarApiClient.escapeString(category.toString()))
            .replace("{" + "pageno" + "}", localVarApiClient.escapeString(pageno.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call call4oDProgrammesByTXDate4ValidateBeforeCall(String category, Integer pageno, String platform, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'category' is set
        if (category == null) {
            throw new ApiException("Missing the required parameter 'category' when calling call4oDProgrammesByTXDate4(Async)");
        }

        // verify the required parameter 'pageno' is set
        if (pageno == null) {
            throw new ApiException("Missing the required parameter 'pageno' when calling call4oDProgrammesByTXDate4(Async)");
        }

        return call4oDProgrammesByTXDate4Call(category, pageno, platform, _callback);

    }

    /**
     * 4oD Programmes by TX Date(4)
     * Lists all Channel 4oD programmes associated with the specified category    (tag).By default, the programmes are listed in order of Transmission (TX)    Date, with the most-recently-transmitted programmes listed first.    http://api.channel4.com/pmlsd/categories/category/4od/page-{pageno}.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/animals/4oD.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return Atom
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Atom call4oDProgrammesByTXDate4(String category, Integer pageno, String platform) throws ApiException {
        ApiResponse<Atom> localVarResp = call4oDProgrammesByTXDate4WithHttpInfo(category, pageno, platform);
        return localVarResp.getData();
    }

    /**
     * 4oD Programmes by TX Date(4)
     * Lists all Channel 4oD programmes associated with the specified category    (tag).By default, the programmes are listed in order of Transmission (TX)    Date, with the most-recently-transmitted programmes listed first.    http://api.channel4.com/pmlsd/categories/category/4od/page-{pageno}.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/animals/4oD.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return ApiResponse&lt;Atom&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Atom> call4oDProgrammesByTXDate4WithHttpInfo(String category, Integer pageno, String platform) throws ApiException {
        okhttp3.Call localVarCall = call4oDProgrammesByTXDate4ValidateBeforeCall(category, pageno, platform, null);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 4oD Programmes by TX Date(4) (asynchronously)
     * Lists all Channel 4oD programmes associated with the specified category    (tag).By default, the programmes are listed in order of Transmission (TX)    Date, with the most-recently-transmitted programmes listed first.    http://api.channel4.com/pmlsd/categories/category/4od/page-{pageno}.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/animals/4oD.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call4oDProgrammesByTXDate4Async(String category, Integer pageno, String platform, final ApiCallback<Atom> _callback) throws ApiException {

        okhttp3.Call localVarCall = call4oDProgrammesByTXDate4ValidateBeforeCall(category, pageno, platform, _callback);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for call4oDProgrammesByTXDate5
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param channel The name of the channel for which you seek associated Channel 4oD programmes (required)
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call4oDProgrammesByTXDate5Call(String category, String channel, Integer pageno, String platform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/categories/{category}/channel/{channel}/4od/page-{pageno}.atom"
            .replace("{" + "category" + "}", localVarApiClient.escapeString(category.toString()))
            .replace("{" + "channel" + "}", localVarApiClient.escapeString(channel.toString()))
            .replace("{" + "pageno" + "}", localVarApiClient.escapeString(pageno.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call call4oDProgrammesByTXDate5ValidateBeforeCall(String category, String channel, Integer pageno, String platform, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'category' is set
        if (category == null) {
            throw new ApiException("Missing the required parameter 'category' when calling call4oDProgrammesByTXDate5(Async)");
        }

        // verify the required parameter 'channel' is set
        if (channel == null) {
            throw new ApiException("Missing the required parameter 'channel' when calling call4oDProgrammesByTXDate5(Async)");
        }

        // verify the required parameter 'pageno' is set
        if (pageno == null) {
            throw new ApiException("Missing the required parameter 'pageno' when calling call4oDProgrammesByTXDate5(Async)");
        }

        return call4oDProgrammesByTXDate5Call(category, channel, pageno, platform, _callback);

    }

    /**
     * 4oD Programmes by TX Date(5)
     * Lists all Channel 4oD programmes associated with the specified category    (tag).By default, the programmes are listed in order of Transmission (TX)    Date, with the most-recently-transmitted programmes listed first.    http://api.channel4.com/pmlsd/categories/category/channel/[channel]/4od/page-{pageno}.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/animals/4oD.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param channel The name of the channel for which you seek associated Channel 4oD programmes (required)
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return Atom
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Atom call4oDProgrammesByTXDate5(String category, String channel, Integer pageno, String platform) throws ApiException {
        ApiResponse<Atom> localVarResp = call4oDProgrammesByTXDate5WithHttpInfo(category, channel, pageno, platform);
        return localVarResp.getData();
    }

    /**
     * 4oD Programmes by TX Date(5)
     * Lists all Channel 4oD programmes associated with the specified category    (tag).By default, the programmes are listed in order of Transmission (TX)    Date, with the most-recently-transmitted programmes listed first.    http://api.channel4.com/pmlsd/categories/category/channel/[channel]/4od/page-{pageno}.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/animals/4oD.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param channel The name of the channel for which you seek associated Channel 4oD programmes (required)
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return ApiResponse&lt;Atom&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Atom> call4oDProgrammesByTXDate5WithHttpInfo(String category, String channel, Integer pageno, String platform) throws ApiException {
        okhttp3.Call localVarCall = call4oDProgrammesByTXDate5ValidateBeforeCall(category, channel, pageno, platform, null);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 4oD Programmes by TX Date(5) (asynchronously)
     * Lists all Channel 4oD programmes associated with the specified category    (tag).By default, the programmes are listed in order of Transmission (TX)    Date, with the most-recently-transmitted programmes listed first.    http://api.channel4.com/pmlsd/categories/category/channel/[channel]/4od/page-{pageno}.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/animals/4oD.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param channel The name of the channel for which you seek associated Channel 4oD programmes (required)
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call4oDProgrammesByTXDate5Async(String category, String channel, Integer pageno, String platform, final ApiCallback<Atom> _callback) throws ApiException {

        okhttp3.Call localVarCall = call4oDProgrammesByTXDate5ValidateBeforeCall(category, channel, pageno, platform, _callback);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for call4oDProgrammesByTXDate6
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call4oDProgrammesByTXDate6Call(String category, Integer pageno, String platform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/categories/{category}/derived/ad/4od/page-{pageno}.atom"
            .replace("{" + "category" + "}", localVarApiClient.escapeString(category.toString()))
            .replace("{" + "pageno" + "}", localVarApiClient.escapeString(pageno.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call call4oDProgrammesByTXDate6ValidateBeforeCall(String category, Integer pageno, String platform, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'category' is set
        if (category == null) {
            throw new ApiException("Missing the required parameter 'category' when calling call4oDProgrammesByTXDate6(Async)");
        }

        // verify the required parameter 'pageno' is set
        if (pageno == null) {
            throw new ApiException("Missing the required parameter 'pageno' when calling call4oDProgrammesByTXDate6(Async)");
        }

        return call4oDProgrammesByTXDate6Call(category, pageno, platform, _callback);

    }

    /**
     * 4oD Programmes by TX Date(6)
     * Lists all Channel 4oD programmes associated with the specified category    (tag).By default, the programmes are listed in order of Transmission (TX)    Date, with the most-recently-transmitted programmes listed first.    http://api.channel4.com/pmlsd/categories/category/derived/ad/4od/page-{pageno}.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/animals/4oD.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return Atom
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Atom call4oDProgrammesByTXDate6(String category, Integer pageno, String platform) throws ApiException {
        ApiResponse<Atom> localVarResp = call4oDProgrammesByTXDate6WithHttpInfo(category, pageno, platform);
        return localVarResp.getData();
    }

    /**
     * 4oD Programmes by TX Date(6)
     * Lists all Channel 4oD programmes associated with the specified category    (tag).By default, the programmes are listed in order of Transmission (TX)    Date, with the most-recently-transmitted programmes listed first.    http://api.channel4.com/pmlsd/categories/category/derived/ad/4od/page-{pageno}.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/animals/4oD.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return ApiResponse&lt;Atom&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Atom> call4oDProgrammesByTXDate6WithHttpInfo(String category, Integer pageno, String platform) throws ApiException {
        okhttp3.Call localVarCall = call4oDProgrammesByTXDate6ValidateBeforeCall(category, pageno, platform, null);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 4oD Programmes by TX Date(6) (asynchronously)
     * Lists all Channel 4oD programmes associated with the specified category    (tag).By default, the programmes are listed in order of Transmission (TX)    Date, with the most-recently-transmitted programmes listed first.    http://api.channel4.com/pmlsd/categories/category/derived/ad/4od/page-{pageno}.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/animals/4oD.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call4oDProgrammesByTXDate6Async(String category, Integer pageno, String platform, final ApiCallback<Atom> _callback) throws ApiException {

        okhttp3.Call localVarCall = call4oDProgrammesByTXDate6ValidateBeforeCall(category, pageno, platform, _callback);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for call4oDProgrammesByTitle
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call4oDProgrammesByTitleCall(String category, String platform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/categories/{category}/4od/title.atom"
            .replace("{" + "category" + "}", localVarApiClient.escapeString(category.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call call4oDProgrammesByTitleValidateBeforeCall(String category, String platform, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'category' is set
        if (category == null) {
            throw new ApiException("Missing the required parameter 'category' when calling call4oDProgrammesByTitle(Async)");
        }

        return call4oDProgrammesByTitleCall(category, platform, _callback);

    }

    /**
     * 4oD Programmes by Title
     * Lists all Channel 4oD programmes associated with the specified category    (tag), alphanumerically in order of Title.    http://api.channel4.com/pmlsd/categories/category/4od/title.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/religion-and-belief/4oD/title.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return Atom
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Atom call4oDProgrammesByTitle(String category, String platform) throws ApiException {
        ApiResponse<Atom> localVarResp = call4oDProgrammesByTitleWithHttpInfo(category, platform);
        return localVarResp.getData();
    }

    /**
     * 4oD Programmes by Title
     * Lists all Channel 4oD programmes associated with the specified category    (tag), alphanumerically in order of Title.    http://api.channel4.com/pmlsd/categories/category/4od/title.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/religion-and-belief/4oD/title.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return ApiResponse&lt;Atom&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Atom> call4oDProgrammesByTitleWithHttpInfo(String category, String platform) throws ApiException {
        okhttp3.Call localVarCall = call4oDProgrammesByTitleValidateBeforeCall(category, platform, null);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 4oD Programmes by Title (asynchronously)
     * Lists all Channel 4oD programmes associated with the specified category    (tag), alphanumerically in order of Title.    http://api.channel4.com/pmlsd/categories/category/4od/title.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/religion-and-belief/4oD/title.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call4oDProgrammesByTitleAsync(String category, String platform, final ApiCallback<Atom> _callback) throws ApiException {

        okhttp3.Call localVarCall = call4oDProgrammesByTitleValidateBeforeCall(category, platform, _callback);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for call4oDProgrammesByTitle2
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param channel The name of the channel for which you seek associated Channel 4oD programmes (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call4oDProgrammesByTitle2Call(String category, String channel, String platform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/categories/{category}/channel/{channel}/4od/title.atom"
            .replace("{" + "category" + "}", localVarApiClient.escapeString(category.toString()))
            .replace("{" + "channel" + "}", localVarApiClient.escapeString(channel.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call call4oDProgrammesByTitle2ValidateBeforeCall(String category, String channel, String platform, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'category' is set
        if (category == null) {
            throw new ApiException("Missing the required parameter 'category' when calling call4oDProgrammesByTitle2(Async)");
        }

        // verify the required parameter 'channel' is set
        if (channel == null) {
            throw new ApiException("Missing the required parameter 'channel' when calling call4oDProgrammesByTitle2(Async)");
        }

        return call4oDProgrammesByTitle2Call(category, channel, platform, _callback);

    }

    /**
     * 4oD Programmes by Title(2)
     * Lists all Channel 4oD programmes associated with the specified category    (tag), alphanumerically in order of Title.    http://api.channel4.com/pmlsd/categories/category/channel/[channel]/4od/title.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/religion-and-belief/4oD/title.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param channel The name of the channel for which you seek associated Channel 4oD programmes (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return Atom
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Atom call4oDProgrammesByTitle2(String category, String channel, String platform) throws ApiException {
        ApiResponse<Atom> localVarResp = call4oDProgrammesByTitle2WithHttpInfo(category, channel, platform);
        return localVarResp.getData();
    }

    /**
     * 4oD Programmes by Title(2)
     * Lists all Channel 4oD programmes associated with the specified category    (tag), alphanumerically in order of Title.    http://api.channel4.com/pmlsd/categories/category/channel/[channel]/4od/title.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/religion-and-belief/4oD/title.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param channel The name of the channel for which you seek associated Channel 4oD programmes (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return ApiResponse&lt;Atom&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Atom> call4oDProgrammesByTitle2WithHttpInfo(String category, String channel, String platform) throws ApiException {
        okhttp3.Call localVarCall = call4oDProgrammesByTitle2ValidateBeforeCall(category, channel, platform, null);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 4oD Programmes by Title(2) (asynchronously)
     * Lists all Channel 4oD programmes associated with the specified category    (tag), alphanumerically in order of Title.    http://api.channel4.com/pmlsd/categories/category/channel/[channel]/4od/title.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/religion-and-belief/4oD/title.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param channel The name of the channel for which you seek associated Channel 4oD programmes (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call4oDProgrammesByTitle2Async(String category, String channel, String platform, final ApiCallback<Atom> _callback) throws ApiException {

        okhttp3.Call localVarCall = call4oDProgrammesByTitle2ValidateBeforeCall(category, channel, platform, _callback);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for call4oDProgrammesByTitle3
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call4oDProgrammesByTitle3Call(String category, String platform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/categories/{category}/derived/ad/4od/title.atom"
            .replace("{" + "category" + "}", localVarApiClient.escapeString(category.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call call4oDProgrammesByTitle3ValidateBeforeCall(String category, String platform, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'category' is set
        if (category == null) {
            throw new ApiException("Missing the required parameter 'category' when calling call4oDProgrammesByTitle3(Async)");
        }

        return call4oDProgrammesByTitle3Call(category, platform, _callback);

    }

    /**
     * 4oD Programmes by Title(3)
     * Lists all Channel 4oD programmes associated with the specified category    (tag), alphanumerically in order of Title.    http://api.channel4.com/pmlsd/categories/category/derived/ad/4od/title.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/religion-and-belief/4oD/title.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return Atom
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Atom call4oDProgrammesByTitle3(String category, String platform) throws ApiException {
        ApiResponse<Atom> localVarResp = call4oDProgrammesByTitle3WithHttpInfo(category, platform);
        return localVarResp.getData();
    }

    /**
     * 4oD Programmes by Title(3)
     * Lists all Channel 4oD programmes associated with the specified category    (tag), alphanumerically in order of Title.    http://api.channel4.com/pmlsd/categories/category/derived/ad/4od/title.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/religion-and-belief/4oD/title.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return ApiResponse&lt;Atom&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Atom> call4oDProgrammesByTitle3WithHttpInfo(String category, String platform) throws ApiException {
        okhttp3.Call localVarCall = call4oDProgrammesByTitle3ValidateBeforeCall(category, platform, null);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 4oD Programmes by Title(3) (asynchronously)
     * Lists all Channel 4oD programmes associated with the specified category    (tag), alphanumerically in order of Title.    http://api.channel4.com/pmlsd/categories/category/derived/ad/4od/title.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/religion-and-belief/4oD/title.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call4oDProgrammesByTitle3Async(String category, String platform, final ApiCallback<Atom> _callback) throws ApiException {

        okhttp3.Call localVarCall = call4oDProgrammesByTitle3ValidateBeforeCall(category, platform, _callback);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for call4oDProgrammesByTitle4
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call4oDProgrammesByTitle4Call(String category, Integer pageno, String platform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/categories/{category}/4od/title/page-{pageno}.atom"
            .replace("{" + "category" + "}", localVarApiClient.escapeString(category.toString()))
            .replace("{" + "pageno" + "}", localVarApiClient.escapeString(pageno.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call call4oDProgrammesByTitle4ValidateBeforeCall(String category, Integer pageno, String platform, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'category' is set
        if (category == null) {
            throw new ApiException("Missing the required parameter 'category' when calling call4oDProgrammesByTitle4(Async)");
        }

        // verify the required parameter 'pageno' is set
        if (pageno == null) {
            throw new ApiException("Missing the required parameter 'pageno' when calling call4oDProgrammesByTitle4(Async)");
        }

        return call4oDProgrammesByTitle4Call(category, pageno, platform, _callback);

    }

    /**
     * 4oD Programmes by Title(4)
     * Lists all Channel 4oD programmes associated with the specified category    (tag), alphanumerically in order of Title.    http://api.channel4.com/pmlsd/categories/category/4od/title/page-{pageno}.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/religion-and-belief/4oD/title.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return Atom
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Atom call4oDProgrammesByTitle4(String category, Integer pageno, String platform) throws ApiException {
        ApiResponse<Atom> localVarResp = call4oDProgrammesByTitle4WithHttpInfo(category, pageno, platform);
        return localVarResp.getData();
    }

    /**
     * 4oD Programmes by Title(4)
     * Lists all Channel 4oD programmes associated with the specified category    (tag), alphanumerically in order of Title.    http://api.channel4.com/pmlsd/categories/category/4od/title/page-{pageno}.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/religion-and-belief/4oD/title.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return ApiResponse&lt;Atom&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Atom> call4oDProgrammesByTitle4WithHttpInfo(String category, Integer pageno, String platform) throws ApiException {
        okhttp3.Call localVarCall = call4oDProgrammesByTitle4ValidateBeforeCall(category, pageno, platform, null);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 4oD Programmes by Title(4) (asynchronously)
     * Lists all Channel 4oD programmes associated with the specified category    (tag), alphanumerically in order of Title.    http://api.channel4.com/pmlsd/categories/category/4od/title/page-{pageno}.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/religion-and-belief/4oD/title.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call4oDProgrammesByTitle4Async(String category, Integer pageno, String platform, final ApiCallback<Atom> _callback) throws ApiException {

        okhttp3.Call localVarCall = call4oDProgrammesByTitle4ValidateBeforeCall(category, pageno, platform, _callback);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for call4oDProgrammesByTitle5
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param channel The name of the channel for which you seek associated Channel 4oD programmes (required)
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call4oDProgrammesByTitle5Call(String category, String channel, Integer pageno, String platform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/categories/{category}/channel/{channel}/4od/title/page-{pageno}.atom"
            .replace("{" + "category" + "}", localVarApiClient.escapeString(category.toString()))
            .replace("{" + "channel" + "}", localVarApiClient.escapeString(channel.toString()))
            .replace("{" + "pageno" + "}", localVarApiClient.escapeString(pageno.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call call4oDProgrammesByTitle5ValidateBeforeCall(String category, String channel, Integer pageno, String platform, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'category' is set
        if (category == null) {
            throw new ApiException("Missing the required parameter 'category' when calling call4oDProgrammesByTitle5(Async)");
        }

        // verify the required parameter 'channel' is set
        if (channel == null) {
            throw new ApiException("Missing the required parameter 'channel' when calling call4oDProgrammesByTitle5(Async)");
        }

        // verify the required parameter 'pageno' is set
        if (pageno == null) {
            throw new ApiException("Missing the required parameter 'pageno' when calling call4oDProgrammesByTitle5(Async)");
        }

        return call4oDProgrammesByTitle5Call(category, channel, pageno, platform, _callback);

    }

    /**
     * 4oD Programmes by Title(5)
     * Lists all Channel 4oD programmes associated with the specified category    (tag), alphanumerically in order of Title.    http://api.channel4.com/pmlsd/categories/category/channel/[channel]/4od/title/page-{pageno}.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/religion-and-belief/4oD/title.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param channel The name of the channel for which you seek associated Channel 4oD programmes (required)
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return Atom
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Atom call4oDProgrammesByTitle5(String category, String channel, Integer pageno, String platform) throws ApiException {
        ApiResponse<Atom> localVarResp = call4oDProgrammesByTitle5WithHttpInfo(category, channel, pageno, platform);
        return localVarResp.getData();
    }

    /**
     * 4oD Programmes by Title(5)
     * Lists all Channel 4oD programmes associated with the specified category    (tag), alphanumerically in order of Title.    http://api.channel4.com/pmlsd/categories/category/channel/[channel]/4od/title/page-{pageno}.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/religion-and-belief/4oD/title.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param channel The name of the channel for which you seek associated Channel 4oD programmes (required)
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return ApiResponse&lt;Atom&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Atom> call4oDProgrammesByTitle5WithHttpInfo(String category, String channel, Integer pageno, String platform) throws ApiException {
        okhttp3.Call localVarCall = call4oDProgrammesByTitle5ValidateBeforeCall(category, channel, pageno, platform, null);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 4oD Programmes by Title(5) (asynchronously)
     * Lists all Channel 4oD programmes associated with the specified category    (tag), alphanumerically in order of Title.    http://api.channel4.com/pmlsd/categories/category/channel/[channel]/4od/title/page-{pageno}.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/religion-and-belief/4oD/title.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param channel The name of the channel for which you seek associated Channel 4oD programmes (required)
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call4oDProgrammesByTitle5Async(String category, String channel, Integer pageno, String platform, final ApiCallback<Atom> _callback) throws ApiException {

        okhttp3.Call localVarCall = call4oDProgrammesByTitle5ValidateBeforeCall(category, channel, pageno, platform, _callback);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for call4oDProgrammesByTitle6
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call4oDProgrammesByTitle6Call(String category, Integer pageno, String platform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/categories/{category}/derived/ad/4od/title/page-{pageno}.atom"
            .replace("{" + "category" + "}", localVarApiClient.escapeString(category.toString()))
            .replace("{" + "pageno" + "}", localVarApiClient.escapeString(pageno.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call call4oDProgrammesByTitle6ValidateBeforeCall(String category, Integer pageno, String platform, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'category' is set
        if (category == null) {
            throw new ApiException("Missing the required parameter 'category' when calling call4oDProgrammesByTitle6(Async)");
        }

        // verify the required parameter 'pageno' is set
        if (pageno == null) {
            throw new ApiException("Missing the required parameter 'pageno' when calling call4oDProgrammesByTitle6(Async)");
        }

        return call4oDProgrammesByTitle6Call(category, pageno, platform, _callback);

    }

    /**
     * 4oD Programmes by Title(6)
     * Lists all Channel 4oD programmes associated with the specified category    (tag), alphanumerically in order of Title.    http://api.channel4.com/pmlsd/categories/category/derived/ad/4od/title/page-{pageno}.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/religion-and-belief/4oD/title.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return Atom
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Atom call4oDProgrammesByTitle6(String category, Integer pageno, String platform) throws ApiException {
        ApiResponse<Atom> localVarResp = call4oDProgrammesByTitle6WithHttpInfo(category, pageno, platform);
        return localVarResp.getData();
    }

    /**
     * 4oD Programmes by Title(6)
     * Lists all Channel 4oD programmes associated with the specified category    (tag), alphanumerically in order of Title.    http://api.channel4.com/pmlsd/categories/category/derived/ad/4od/title/page-{pageno}.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/religion-and-belief/4oD/title.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return ApiResponse&lt;Atom&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Atom> call4oDProgrammesByTitle6WithHttpInfo(String category, Integer pageno, String platform) throws ApiException {
        okhttp3.Call localVarCall = call4oDProgrammesByTitle6ValidateBeforeCall(category, pageno, platform, null);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 4oD Programmes by Title(6) (asynchronously)
     * Lists all Channel 4oD programmes associated with the specified category    (tag), alphanumerically in order of Title.    http://api.channel4.com/pmlsd/categories/category/derived/ad/4od/title/page-{pageno}.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/religion-and-belief/4oD/title.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call4oDProgrammesByTitle6Async(String category, Integer pageno, String platform, final ApiCallback<Atom> _callback) throws ApiException {

        okhttp3.Call localVarCall = call4oDProgrammesByTitle6ValidateBeforeCall(category, pageno, platform, _callback);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for call4oDTitleAllBrandsFeed
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call4oDTitleAllBrandsFeedCall(String platform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/brands/4od.atom";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call call4oDTitleAllBrandsFeedValidateBeforeCall(String platform, final ApiCallback _callback) throws ApiException {
        return call4oDTitleAllBrandsFeedCall(platform, _callback);

    }

    /**
     * 4oD Title All Brands Feed
     * Lists all Channel 4 programmes available on 4oD.  By default, the programmes    are listed by title in alphabetical order (case unsensitive).    http://api.channel4.com/pmlsd/brands/4od.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/brands/4od.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return Atom
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Atom call4oDTitleAllBrandsFeed(String platform) throws ApiException {
        ApiResponse<Atom> localVarResp = call4oDTitleAllBrandsFeedWithHttpInfo(platform);
        return localVarResp.getData();
    }

    /**
     * 4oD Title All Brands Feed
     * Lists all Channel 4 programmes available on 4oD.  By default, the programmes    are listed by title in alphabetical order (case unsensitive).    http://api.channel4.com/pmlsd/brands/4od.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/brands/4od.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return ApiResponse&lt;Atom&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Atom> call4oDTitleAllBrandsFeedWithHttpInfo(String platform) throws ApiException {
        okhttp3.Call localVarCall = call4oDTitleAllBrandsFeedValidateBeforeCall(platform, null);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 4oD Title All Brands Feed (asynchronously)
     * Lists all Channel 4 programmes available on 4oD.  By default, the programmes    are listed by title in alphabetical order (case unsensitive).    http://api.channel4.com/pmlsd/brands/4od.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/brands/4od.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call4oDTitleAllBrandsFeedAsync(String platform, final ApiCallback<Atom> _callback) throws ApiException {

        okhttp3.Call localVarCall = call4oDTitleAllBrandsFeedValidateBeforeCall(platform, _callback);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for call4oDTitleAllBrandsFeed2
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call4oDTitleAllBrandsFeed2Call(Integer pageno, String platform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/brands/4od/page-{pageno}.atom"
            .replace("{" + "pageno" + "}", localVarApiClient.escapeString(pageno.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call call4oDTitleAllBrandsFeed2ValidateBeforeCall(Integer pageno, String platform, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pageno' is set
        if (pageno == null) {
            throw new ApiException("Missing the required parameter 'pageno' when calling call4oDTitleAllBrandsFeed2(Async)");
        }

        return call4oDTitleAllBrandsFeed2Call(pageno, platform, _callback);

    }

    /**
     * 4oD Title All Brands Feed(2)
     * Lists all Channel 4 programmes available on 4oD.  By default, the programmes    are listed by title in alphabetical order (case unsensitive).    http://api.channel4.com/pmlsd/brands/4od/page-{pageno}.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/brands/4od.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return Atom
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Atom call4oDTitleAllBrandsFeed2(Integer pageno, String platform) throws ApiException {
        ApiResponse<Atom> localVarResp = call4oDTitleAllBrandsFeed2WithHttpInfo(pageno, platform);
        return localVarResp.getData();
    }

    /**
     * 4oD Title All Brands Feed(2)
     * Lists all Channel 4 programmes available on 4oD.  By default, the programmes    are listed by title in alphabetical order (case unsensitive).    http://api.channel4.com/pmlsd/brands/4od/page-{pageno}.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/brands/4od.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return ApiResponse&lt;Atom&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Atom> call4oDTitleAllBrandsFeed2WithHttpInfo(Integer pageno, String platform) throws ApiException {
        okhttp3.Call localVarCall = call4oDTitleAllBrandsFeed2ValidateBeforeCall(pageno, platform, null);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 4oD Title All Brands Feed(2) (asynchronously)
     * Lists all Channel 4 programmes available on 4oD.  By default, the programmes    are listed by title in alphabetical order (case unsensitive).    http://api.channel4.com/pmlsd/brands/4od/page-{pageno}.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/brands/4od.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call4oDTitleAllBrandsFeed2Async(Integer pageno, String platform, final ApiCallback<Atom> _callback) throws ApiException {

        okhttp3.Call localVarCall = call4oDTitleAllBrandsFeed2ValidateBeforeCall(pageno, platform, _callback);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for categoriesLandingFeed
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoriesLandingFeedCall(String platform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/categories.atom";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call categoriesLandingFeedValidateBeforeCall(String platform, final ApiCallback _callback) throws ApiException {
        return categoriesLandingFeedCall(platform, _callback);

    }

    /**
     * Categories Landing Feed
     * Lists Channel 4 programmes by category (/ tag).    http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return Atom
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Atom categoriesLandingFeed(String platform) throws ApiException {
        ApiResponse<Atom> localVarResp = categoriesLandingFeedWithHttpInfo(platform);
        return localVarResp.getData();
    }

    /**
     * Categories Landing Feed
     * Lists Channel 4 programmes by category (/ tag).    http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return ApiResponse&lt;Atom&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Atom> categoriesLandingFeedWithHttpInfo(String platform) throws ApiException {
        okhttp3.Call localVarCall = categoriesLandingFeedValidateBeforeCall(platform, null);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Categories Landing Feed (asynchronously)
     * Lists Channel 4 programmes by category (/ tag).    http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoriesLandingFeedAsync(String platform, final ApiCallback<Atom> _callback) throws ApiException {

        okhttp3.Call localVarCall = categoriesLandingFeedValidateBeforeCall(platform, _callback);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for collectionsFeed
     * @param collectionName Web safe title for the collection. (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call collectionsFeedCall(String collectionName, String platform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/collections/{collection_name}/4od.atom"
            .replace("{" + "collection_name" + "}", localVarApiClient.escapeString(collectionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call collectionsFeedValidateBeforeCall(String collectionName, String platform, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'collectionName' is set
        if (collectionName == null) {
            throw new ApiException("Missing the required parameter 'collectionName' when calling collectionsFeed(Async)");
        }

        return collectionsFeedCall(collectionName, platform, _callback);

    }

    /**
     * Collections Feed
     * Collections are editorially controlled groups of brands, series, episodes or    other collections used for promotion and discovery of content. A SIMPLE    collection can contain an assortment of Brands, Series, Episodes or Freeform    items. A GROUP collection contains other collections.    http://api.channel4.com/pmlsd/collections/collection_name/4od.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/collections/4od-home-promo/4od.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param collectionName Web safe title for the collection. (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return Atom
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Atom collectionsFeed(String collectionName, String platform) throws ApiException {
        ApiResponse<Atom> localVarResp = collectionsFeedWithHttpInfo(collectionName, platform);
        return localVarResp.getData();
    }

    /**
     * Collections Feed
     * Collections are editorially controlled groups of brands, series, episodes or    other collections used for promotion and discovery of content. A SIMPLE    collection can contain an assortment of Brands, Series, Episodes or Freeform    items. A GROUP collection contains other collections.    http://api.channel4.com/pmlsd/collections/collection_name/4od.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/collections/4od-home-promo/4od.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param collectionName Web safe title for the collection. (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return ApiResponse&lt;Atom&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Atom> collectionsFeedWithHttpInfo(String collectionName, String platform) throws ApiException {
        okhttp3.Call localVarCall = collectionsFeedValidateBeforeCall(collectionName, platform, null);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Collections Feed (asynchronously)
     * Collections are editorially controlled groups of brands, series, episodes or    other collections used for promotion and discovery of content. A SIMPLE    collection can contain an assortment of Brands, Series, Episodes or Freeform    items. A GROUP collection contains other collections.    http://api.channel4.com/pmlsd/collections/collection_name/4od.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/collections/4od-home-promo/4od.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param collectionName Web safe title for the collection. (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call collectionsFeedAsync(String collectionName, String platform, final ApiCallback<Atom> _callback) throws ApiException {

        okhttp3.Call localVarCall = collectionsFeedValidateBeforeCall(collectionName, platform, _callback);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for collectionsFeed2
     * @param collectionName Web safe title for the collection. (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call collectionsFeed2Call(String collectionName, String platform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/collections/{collection_name}.atom"
            .replace("{" + "collection_name" + "}", localVarApiClient.escapeString(collectionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call collectionsFeed2ValidateBeforeCall(String collectionName, String platform, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'collectionName' is set
        if (collectionName == null) {
            throw new ApiException("Missing the required parameter 'collectionName' when calling collectionsFeed2(Async)");
        }

        return collectionsFeed2Call(collectionName, platform, _callback);

    }

    /**
     * Collections Feed(2)
     * Collections are editorially controlled groups of brands, series, episodes or    other collections used for promotion and discovery of content. A SIMPLE    collection can contain an assortment of Brands, Series, Episodes or Freeform    items. A GROUP collection contains other collections.    http://api.channel4.com/pmlsd/collections/collection_name.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/collections/4od-home-promo/4od.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param collectionName Web safe title for the collection. (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return Atom
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Atom collectionsFeed2(String collectionName, String platform) throws ApiException {
        ApiResponse<Atom> localVarResp = collectionsFeed2WithHttpInfo(collectionName, platform);
        return localVarResp.getData();
    }

    /**
     * Collections Feed(2)
     * Collections are editorially controlled groups of brands, series, episodes or    other collections used for promotion and discovery of content. A SIMPLE    collection can contain an assortment of Brands, Series, Episodes or Freeform    items. A GROUP collection contains other collections.    http://api.channel4.com/pmlsd/collections/collection_name.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/collections/4od-home-promo/4od.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param collectionName Web safe title for the collection. (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return ApiResponse&lt;Atom&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Atom> collectionsFeed2WithHttpInfo(String collectionName, String platform) throws ApiException {
        okhttp3.Call localVarCall = collectionsFeed2ValidateBeforeCall(collectionName, platform, null);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Collections Feed(2) (asynchronously)
     * Collections are editorially controlled groups of brands, series, episodes or    other collections used for promotion and discovery of content. A SIMPLE    collection can contain an assortment of Brands, Series, Episodes or Freeform    items. A GROUP collection contains other collections.    http://api.channel4.com/pmlsd/collections/collection_name.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/collections/4od-home-promo/4od.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param collectionName Web safe title for the collection. (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call collectionsFeed2Async(String collectionName, String platform, final ApiCallback<Atom> _callback) throws ApiException {

        okhttp3.Call localVarCall = collectionsFeed2ValidateBeforeCall(collectionName, platform, _callback);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for flattenedCollectionFeed
     * @param collectionName Web safe title for the collection. (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call flattenedCollectionFeedCall(String collectionName, String platform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/collections/{collection_name}/flattened/4od.atom"
            .replace("{" + "collection_name" + "}", localVarApiClient.escapeString(collectionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call flattenedCollectionFeedValidateBeforeCall(String collectionName, String platform, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'collectionName' is set
        if (collectionName == null) {
            throw new ApiException("Missing the required parameter 'collectionName' when calling flattenedCollectionFeed(Async)");
        }

        return flattenedCollectionFeedCall(collectionName, platform, _callback);

    }

    /**
     * Flattened Collection Feed
     * The Flattened Collections Feed is only applicable for GROUP collections and    its purpose is mainly return 3 items (BRAND, SERIES or EPSIODE) of each of    the simple collections assigned to the GROUP.    http://api.channel4.com/pmlsd/collections/collection_name/flattened/4od.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/collections/4od-home-promo/flattened/4od.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param collectionName Web safe title for the collection. (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return Atom
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Atom flattenedCollectionFeed(String collectionName, String platform) throws ApiException {
        ApiResponse<Atom> localVarResp = flattenedCollectionFeedWithHttpInfo(collectionName, platform);
        return localVarResp.getData();
    }

    /**
     * Flattened Collection Feed
     * The Flattened Collections Feed is only applicable for GROUP collections and    its purpose is mainly return 3 items (BRAND, SERIES or EPSIODE) of each of    the simple collections assigned to the GROUP.    http://api.channel4.com/pmlsd/collections/collection_name/flattened/4od.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/collections/4od-home-promo/flattened/4od.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param collectionName Web safe title for the collection. (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return ApiResponse&lt;Atom&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Atom> flattenedCollectionFeedWithHttpInfo(String collectionName, String platform) throws ApiException {
        okhttp3.Call localVarCall = flattenedCollectionFeedValidateBeforeCall(collectionName, platform, null);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Flattened Collection Feed (asynchronously)
     * The Flattened Collections Feed is only applicable for GROUP collections and    its purpose is mainly return 3 items (BRAND, SERIES or EPSIODE) of each of    the simple collections assigned to the GROUP.    http://api.channel4.com/pmlsd/collections/collection_name/flattened/4od.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/collections/4od-home-promo/flattened/4od.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param collectionName Web safe title for the collection. (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call flattenedCollectionFeedAsync(String collectionName, String platform, final ApiCallback<Atom> _callback) throws ApiException {

        okhttp3.Call localVarCall = flattenedCollectionFeedValidateBeforeCall(collectionName, platform, _callback);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for flattenedCollectionFeed2
     * @param collectionName Web safe title for the collection. (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call flattenedCollectionFeed2Call(String collectionName, String platform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/collections/{collection_name}/flattened.atom"
            .replace("{" + "collection_name" + "}", localVarApiClient.escapeString(collectionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call flattenedCollectionFeed2ValidateBeforeCall(String collectionName, String platform, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'collectionName' is set
        if (collectionName == null) {
            throw new ApiException("Missing the required parameter 'collectionName' when calling flattenedCollectionFeed2(Async)");
        }

        return flattenedCollectionFeed2Call(collectionName, platform, _callback);

    }

    /**
     * Flattened Collection Feed(2)
     * The Flattened Collections Feed is only applicable for GROUP collections and    its purpose is mainly return 3 items (BRAND, SERIES or EPSIODE) of each of    the simple collections assigned to the GROUP.    http://api.channel4.com/pmlsd/collections/collection_name/flattened.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/collections/4od-home-promo/flattened/4od.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param collectionName Web safe title for the collection. (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return Atom
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Atom flattenedCollectionFeed2(String collectionName, String platform) throws ApiException {
        ApiResponse<Atom> localVarResp = flattenedCollectionFeed2WithHttpInfo(collectionName, platform);
        return localVarResp.getData();
    }

    /**
     * Flattened Collection Feed(2)
     * The Flattened Collections Feed is only applicable for GROUP collections and    its purpose is mainly return 3 items (BRAND, SERIES or EPSIODE) of each of    the simple collections assigned to the GROUP.    http://api.channel4.com/pmlsd/collections/collection_name/flattened.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/collections/4od-home-promo/flattened/4od.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param collectionName Web safe title for the collection. (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return ApiResponse&lt;Atom&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Atom> flattenedCollectionFeed2WithHttpInfo(String collectionName, String platform) throws ApiException {
        okhttp3.Call localVarCall = flattenedCollectionFeed2ValidateBeforeCall(collectionName, platform, null);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Flattened Collection Feed(2) (asynchronously)
     * The Flattened Collections Feed is only applicable for GROUP collections and    its purpose is mainly return 3 items (BRAND, SERIES or EPSIODE) of each of    the simple collections assigned to the GROUP.    http://api.channel4.com/pmlsd/collections/collection_name/flattened.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/collections/4od-home-promo/flattened/4od.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param collectionName Web safe title for the collection. (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call flattenedCollectionFeed2Async(String collectionName, String platform, final ApiCallback<Atom> _callback) throws ApiException {

        okhttp3.Call localVarCall = flattenedCollectionFeed2ValidateBeforeCall(collectionName, platform, _callback);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mostPopularBrandsFeed
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mostPopularBrandsFeedCall(String category, String platform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/categories/{category}/4od/popular.atom"
            .replace("{" + "category" + "}", localVarApiClient.escapeString(category.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mostPopularBrandsFeedValidateBeforeCall(String category, String platform, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'category' is set
        if (category == null) {
            throw new ApiException("Missing the required parameter 'category' when calling mostPopularBrandsFeed(Async)");
        }

        return mostPopularBrandsFeedCall(category, platform, _callback);

    }

    /**
     * Most Popular Brands Feed
     * Lists all Channel 4oD most popular brands for the given category within the    last 7 days, in order of popularity.    http://api.channel4.com/pmlsd/categories/category/4od/popular.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/comedy/4od/popular.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return Atom
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Atom mostPopularBrandsFeed(String category, String platform) throws ApiException {
        ApiResponse<Atom> localVarResp = mostPopularBrandsFeedWithHttpInfo(category, platform);
        return localVarResp.getData();
    }

    /**
     * Most Popular Brands Feed
     * Lists all Channel 4oD most popular brands for the given category within the    last 7 days, in order of popularity.    http://api.channel4.com/pmlsd/categories/category/4od/popular.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/comedy/4od/popular.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return ApiResponse&lt;Atom&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Atom> mostPopularBrandsFeedWithHttpInfo(String category, String platform) throws ApiException {
        okhttp3.Call localVarCall = mostPopularBrandsFeedValidateBeforeCall(category, platform, null);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Most Popular Brands Feed (asynchronously)
     * Lists all Channel 4oD most popular brands for the given category within the    last 7 days, in order of popularity.    http://api.channel4.com/pmlsd/categories/category/4od/popular.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/comedy/4od/popular.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mostPopularBrandsFeedAsync(String category, String platform, final ApiCallback<Atom> _callback) throws ApiException {

        okhttp3.Call localVarCall = mostPopularBrandsFeedValidateBeforeCall(category, platform, _callback);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mostPopularBrandsFeed2
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mostPopularBrandsFeed2Call(String category, String platform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/categories/{category}/popular.atom"
            .replace("{" + "category" + "}", localVarApiClient.escapeString(category.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mostPopularBrandsFeed2ValidateBeforeCall(String category, String platform, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'category' is set
        if (category == null) {
            throw new ApiException("Missing the required parameter 'category' when calling mostPopularBrandsFeed2(Async)");
        }

        return mostPopularBrandsFeed2Call(category, platform, _callback);

    }

    /**
     * Most Popular Brands Feed(2)
     * Lists all Channel 4oD most popular brands for the given category within the    last 7 days, in order of popularity.    http://api.channel4.com/pmlsd/categories/category/popular.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/comedy/4od/popular.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return Atom
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Atom mostPopularBrandsFeed2(String category, String platform) throws ApiException {
        ApiResponse<Atom> localVarResp = mostPopularBrandsFeed2WithHttpInfo(category, platform);
        return localVarResp.getData();
    }

    /**
     * Most Popular Brands Feed(2)
     * Lists all Channel 4oD most popular brands for the given category within the    last 7 days, in order of popularity.    http://api.channel4.com/pmlsd/categories/category/popular.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/comedy/4od/popular.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return ApiResponse&lt;Atom&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Atom> mostPopularBrandsFeed2WithHttpInfo(String category, String platform) throws ApiException {
        okhttp3.Call localVarCall = mostPopularBrandsFeed2ValidateBeforeCall(category, platform, null);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Most Popular Brands Feed(2) (asynchronously)
     * Lists all Channel 4oD most popular brands for the given category within the    last 7 days, in order of popularity.    http://api.channel4.com/pmlsd/categories/category/popular.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/comedy/4od/popular.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mostPopularBrandsFeed2Async(String category, String platform, final ApiCallback<Atom> _callback) throws ApiException {

        okhttp3.Call localVarCall = mostPopularBrandsFeed2ValidateBeforeCall(category, platform, _callback);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mostPopularBrandsFeed3
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param channel The name of the channel for which you seek associated Channel 4oD programmes (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mostPopularBrandsFeed3Call(String category, String channel, String platform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/categories/{category}/channel/{channel}/4od/popular.atom"
            .replace("{" + "category" + "}", localVarApiClient.escapeString(category.toString()))
            .replace("{" + "channel" + "}", localVarApiClient.escapeString(channel.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mostPopularBrandsFeed3ValidateBeforeCall(String category, String channel, String platform, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'category' is set
        if (category == null) {
            throw new ApiException("Missing the required parameter 'category' when calling mostPopularBrandsFeed3(Async)");
        }

        // verify the required parameter 'channel' is set
        if (channel == null) {
            throw new ApiException("Missing the required parameter 'channel' when calling mostPopularBrandsFeed3(Async)");
        }

        return mostPopularBrandsFeed3Call(category, channel, platform, _callback);

    }

    /**
     * Most Popular Brands Feed(3)
     * Lists all Channel 4oD most popular brands for the given category within the    last 7 days, in order of popularity.    http://api.channel4.com/pmlsd/categories/category/channel/[channel]/4od/popular.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/comedy/4od/popular.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param channel The name of the channel for which you seek associated Channel 4oD programmes (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return Atom
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Atom mostPopularBrandsFeed3(String category, String channel, String platform) throws ApiException {
        ApiResponse<Atom> localVarResp = mostPopularBrandsFeed3WithHttpInfo(category, channel, platform);
        return localVarResp.getData();
    }

    /**
     * Most Popular Brands Feed(3)
     * Lists all Channel 4oD most popular brands for the given category within the    last 7 days, in order of popularity.    http://api.channel4.com/pmlsd/categories/category/channel/[channel]/4od/popular.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/comedy/4od/popular.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param channel The name of the channel for which you seek associated Channel 4oD programmes (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return ApiResponse&lt;Atom&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Atom> mostPopularBrandsFeed3WithHttpInfo(String category, String channel, String platform) throws ApiException {
        okhttp3.Call localVarCall = mostPopularBrandsFeed3ValidateBeforeCall(category, channel, platform, null);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Most Popular Brands Feed(3) (asynchronously)
     * Lists all Channel 4oD most popular brands for the given category within the    last 7 days, in order of popularity.    http://api.channel4.com/pmlsd/categories/category/channel/[channel]/4od/popular.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/comedy/4od/popular.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param channel The name of the channel for which you seek associated Channel 4oD programmes (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mostPopularBrandsFeed3Async(String category, String channel, String platform, final ApiCallback<Atom> _callback) throws ApiException {

        okhttp3.Call localVarCall = mostPopularBrandsFeed3ValidateBeforeCall(category, channel, platform, _callback);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mostPopularBrandsFeed4
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mostPopularBrandsFeed4Call(String category, String platform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/categories/{category}/derived/ad/4od/popular.atom"
            .replace("{" + "category" + "}", localVarApiClient.escapeString(category.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mostPopularBrandsFeed4ValidateBeforeCall(String category, String platform, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'category' is set
        if (category == null) {
            throw new ApiException("Missing the required parameter 'category' when calling mostPopularBrandsFeed4(Async)");
        }

        return mostPopularBrandsFeed4Call(category, platform, _callback);

    }

    /**
     * Most Popular Brands Feed(4)
     * Lists all Channel 4oD most popular brands for the given category within the    last 7 days, in order of popularity.    http://api.channel4.com/pmlsd/categories/category/derived/ad/4od/popular.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/comedy/4od/popular.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return Atom
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Atom mostPopularBrandsFeed4(String category, String platform) throws ApiException {
        ApiResponse<Atom> localVarResp = mostPopularBrandsFeed4WithHttpInfo(category, platform);
        return localVarResp.getData();
    }

    /**
     * Most Popular Brands Feed(4)
     * Lists all Channel 4oD most popular brands for the given category within the    last 7 days, in order of popularity.    http://api.channel4.com/pmlsd/categories/category/derived/ad/4od/popular.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/comedy/4od/popular.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return ApiResponse&lt;Atom&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Atom> mostPopularBrandsFeed4WithHttpInfo(String category, String platform) throws ApiException {
        okhttp3.Call localVarCall = mostPopularBrandsFeed4ValidateBeforeCall(category, platform, null);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Most Popular Brands Feed(4) (asynchronously)
     * Lists all Channel 4oD most popular brands for the given category within the    last 7 days, in order of popularity.    http://api.channel4.com/pmlsd/categories/category/derived/ad/4od/popular.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/comedy/4od/popular.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mostPopularBrandsFeed4Async(String category, String platform, final ApiCallback<Atom> _callback) throws ApiException {

        okhttp3.Call localVarCall = mostPopularBrandsFeed4ValidateBeforeCall(category, platform, _callback);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mostPopularBrandsFeed5
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mostPopularBrandsFeed5Call(String category, Integer pageno, String platform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/categories/{category}/4od/popular/page-{pageno}.atom"
            .replace("{" + "category" + "}", localVarApiClient.escapeString(category.toString()))
            .replace("{" + "pageno" + "}", localVarApiClient.escapeString(pageno.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mostPopularBrandsFeed5ValidateBeforeCall(String category, Integer pageno, String platform, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'category' is set
        if (category == null) {
            throw new ApiException("Missing the required parameter 'category' when calling mostPopularBrandsFeed5(Async)");
        }

        // verify the required parameter 'pageno' is set
        if (pageno == null) {
            throw new ApiException("Missing the required parameter 'pageno' when calling mostPopularBrandsFeed5(Async)");
        }

        return mostPopularBrandsFeed5Call(category, pageno, platform, _callback);

    }

    /**
     * Most Popular Brands Feed(5)
     * Lists all Channel 4oD most popular brands for the given category within the    last 7 days, in order of popularity.    http://api.channel4.com/pmlsd/categories/category/4od/popular/page-{pageno}.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/comedy/4od/popular.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return Atom
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Atom mostPopularBrandsFeed5(String category, Integer pageno, String platform) throws ApiException {
        ApiResponse<Atom> localVarResp = mostPopularBrandsFeed5WithHttpInfo(category, pageno, platform);
        return localVarResp.getData();
    }

    /**
     * Most Popular Brands Feed(5)
     * Lists all Channel 4oD most popular brands for the given category within the    last 7 days, in order of popularity.    http://api.channel4.com/pmlsd/categories/category/4od/popular/page-{pageno}.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/comedy/4od/popular.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return ApiResponse&lt;Atom&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Atom> mostPopularBrandsFeed5WithHttpInfo(String category, Integer pageno, String platform) throws ApiException {
        okhttp3.Call localVarCall = mostPopularBrandsFeed5ValidateBeforeCall(category, pageno, platform, null);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Most Popular Brands Feed(5) (asynchronously)
     * Lists all Channel 4oD most popular brands for the given category within the    last 7 days, in order of popularity.    http://api.channel4.com/pmlsd/categories/category/4od/popular/page-{pageno}.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/comedy/4od/popular.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mostPopularBrandsFeed5Async(String category, Integer pageno, String platform, final ApiCallback<Atom> _callback) throws ApiException {

        okhttp3.Call localVarCall = mostPopularBrandsFeed5ValidateBeforeCall(category, pageno, platform, _callback);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mostPopularBrandsFeed6
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mostPopularBrandsFeed6Call(String category, Integer pageno, String platform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/categories/{category}/popular/page-{pageno}.atom"
            .replace("{" + "category" + "}", localVarApiClient.escapeString(category.toString()))
            .replace("{" + "pageno" + "}", localVarApiClient.escapeString(pageno.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mostPopularBrandsFeed6ValidateBeforeCall(String category, Integer pageno, String platform, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'category' is set
        if (category == null) {
            throw new ApiException("Missing the required parameter 'category' when calling mostPopularBrandsFeed6(Async)");
        }

        // verify the required parameter 'pageno' is set
        if (pageno == null) {
            throw new ApiException("Missing the required parameter 'pageno' when calling mostPopularBrandsFeed6(Async)");
        }

        return mostPopularBrandsFeed6Call(category, pageno, platform, _callback);

    }

    /**
     * Most Popular Brands Feed(6)
     * Lists all Channel 4oD most popular brands for the given category within the    last 7 days, in order of popularity.    http://api.channel4.com/pmlsd/categories/category/popular/page-{pageno}.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/comedy/4od/popular.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return Atom
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Atom mostPopularBrandsFeed6(String category, Integer pageno, String platform) throws ApiException {
        ApiResponse<Atom> localVarResp = mostPopularBrandsFeed6WithHttpInfo(category, pageno, platform);
        return localVarResp.getData();
    }

    /**
     * Most Popular Brands Feed(6)
     * Lists all Channel 4oD most popular brands for the given category within the    last 7 days, in order of popularity.    http://api.channel4.com/pmlsd/categories/category/popular/page-{pageno}.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/comedy/4od/popular.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return ApiResponse&lt;Atom&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Atom> mostPopularBrandsFeed6WithHttpInfo(String category, Integer pageno, String platform) throws ApiException {
        okhttp3.Call localVarCall = mostPopularBrandsFeed6ValidateBeforeCall(category, pageno, platform, null);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Most Popular Brands Feed(6) (asynchronously)
     * Lists all Channel 4oD most popular brands for the given category within the    last 7 days, in order of popularity.    http://api.channel4.com/pmlsd/categories/category/popular/page-{pageno}.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/comedy/4od/popular.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mostPopularBrandsFeed6Async(String category, Integer pageno, String platform, final ApiCallback<Atom> _callback) throws ApiException {

        okhttp3.Call localVarCall = mostPopularBrandsFeed6ValidateBeforeCall(category, pageno, platform, _callback);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mostPopularBrandsFeed7
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param channel The name of the channel for which you seek associated Channel 4oD programmes (required)
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mostPopularBrandsFeed7Call(String category, String channel, Integer pageno, String platform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/categories/{category}/channel/{channel}/4od/popular/page-{pageno}.atom"
            .replace("{" + "category" + "}", localVarApiClient.escapeString(category.toString()))
            .replace("{" + "channel" + "}", localVarApiClient.escapeString(channel.toString()))
            .replace("{" + "pageno" + "}", localVarApiClient.escapeString(pageno.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mostPopularBrandsFeed7ValidateBeforeCall(String category, String channel, Integer pageno, String platform, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'category' is set
        if (category == null) {
            throw new ApiException("Missing the required parameter 'category' when calling mostPopularBrandsFeed7(Async)");
        }

        // verify the required parameter 'channel' is set
        if (channel == null) {
            throw new ApiException("Missing the required parameter 'channel' when calling mostPopularBrandsFeed7(Async)");
        }

        // verify the required parameter 'pageno' is set
        if (pageno == null) {
            throw new ApiException("Missing the required parameter 'pageno' when calling mostPopularBrandsFeed7(Async)");
        }

        return mostPopularBrandsFeed7Call(category, channel, pageno, platform, _callback);

    }

    /**
     * Most Popular Brands Feed(7)
     * Lists all Channel 4oD most popular brands for the given category within the    last 7 days, in order of popularity.    http://api.channel4.com/pmlsd/categories/category/channel/[channel]/4od/popular/page-{pageno}.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/comedy/4od/popular.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param channel The name of the channel for which you seek associated Channel 4oD programmes (required)
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return Atom
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Atom mostPopularBrandsFeed7(String category, String channel, Integer pageno, String platform) throws ApiException {
        ApiResponse<Atom> localVarResp = mostPopularBrandsFeed7WithHttpInfo(category, channel, pageno, platform);
        return localVarResp.getData();
    }

    /**
     * Most Popular Brands Feed(7)
     * Lists all Channel 4oD most popular brands for the given category within the    last 7 days, in order of popularity.    http://api.channel4.com/pmlsd/categories/category/channel/[channel]/4od/popular/page-{pageno}.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/comedy/4od/popular.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param channel The name of the channel for which you seek associated Channel 4oD programmes (required)
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return ApiResponse&lt;Atom&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Atom> mostPopularBrandsFeed7WithHttpInfo(String category, String channel, Integer pageno, String platform) throws ApiException {
        okhttp3.Call localVarCall = mostPopularBrandsFeed7ValidateBeforeCall(category, channel, pageno, platform, null);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Most Popular Brands Feed(7) (asynchronously)
     * Lists all Channel 4oD most popular brands for the given category within the    last 7 days, in order of popularity.    http://api.channel4.com/pmlsd/categories/category/channel/[channel]/4od/popular/page-{pageno}.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/comedy/4od/popular.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param channel The name of the channel for which you seek associated Channel 4oD programmes (required)
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mostPopularBrandsFeed7Async(String category, String channel, Integer pageno, String platform, final ApiCallback<Atom> _callback) throws ApiException {

        okhttp3.Call localVarCall = mostPopularBrandsFeed7ValidateBeforeCall(category, channel, pageno, platform, _callback);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mostPopularBrandsFeed8
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mostPopularBrandsFeed8Call(String category, Integer pageno, String platform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/categories/{category}/derived/ad/4od/popular/page-{pageno}.atom"
            .replace("{" + "category" + "}", localVarApiClient.escapeString(category.toString()))
            .replace("{" + "pageno" + "}", localVarApiClient.escapeString(pageno.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mostPopularBrandsFeed8ValidateBeforeCall(String category, Integer pageno, String platform, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'category' is set
        if (category == null) {
            throw new ApiException("Missing the required parameter 'category' when calling mostPopularBrandsFeed8(Async)");
        }

        // verify the required parameter 'pageno' is set
        if (pageno == null) {
            throw new ApiException("Missing the required parameter 'pageno' when calling mostPopularBrandsFeed8(Async)");
        }

        return mostPopularBrandsFeed8Call(category, pageno, platform, _callback);

    }

    /**
     * Most Popular Brands Feed(8)
     * Lists all Channel 4oD most popular brands for the given category within the    last 7 days, in order of popularity.    http://api.channel4.com/pmlsd/categories/category/derived/ad/4od/popular/page-{pageno}.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/comedy/4od/popular.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return Atom
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Atom mostPopularBrandsFeed8(String category, Integer pageno, String platform) throws ApiException {
        ApiResponse<Atom> localVarResp = mostPopularBrandsFeed8WithHttpInfo(category, pageno, platform);
        return localVarResp.getData();
    }

    /**
     * Most Popular Brands Feed(8)
     * Lists all Channel 4oD most popular brands for the given category within the    last 7 days, in order of popularity.    http://api.channel4.com/pmlsd/categories/category/derived/ad/4od/popular/page-{pageno}.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/comedy/4od/popular.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return ApiResponse&lt;Atom&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Atom> mostPopularBrandsFeed8WithHttpInfo(String category, Integer pageno, String platform) throws ApiException {
        okhttp3.Call localVarCall = mostPopularBrandsFeed8ValidateBeforeCall(category, pageno, platform, null);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Most Popular Brands Feed(8) (asynchronously)
     * Lists all Channel 4oD most popular brands for the given category within the    last 7 days, in order of popularity.    http://api.channel4.com/pmlsd/categories/category/derived/ad/4od/popular/page-{pageno}.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/categories/comedy/4od/popular.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param category The name of the category for which you seek associated Channel 4 programmes. (For a full list of categories, please see http://api.channel4.com/pmlsd/categories.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx) (required)
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mostPopularBrandsFeed8Async(String category, Integer pageno, String platform, final ApiCallback<Atom> _callback) throws ApiException {

        okhttp3.Call localVarCall = mostPopularBrandsFeed8ValidateBeforeCall(category, pageno, platform, _callback);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for popularBrandsFeed
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call popularBrandsFeedCall(String platform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/brands/popular.atom";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call popularBrandsFeedValidateBeforeCall(String platform, final ApiCallback _callback) throws ApiException {
        return popularBrandsFeedCall(platform, _callback);

    }

    /**
     * Popular Brands Feed
     * Lists all Channel 4 programmes by popularity considering the data gathered    within the last 7 days.    http://api.channel4.com/pmlsd/brands/popular.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/brands/popular.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return Atom
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Atom popularBrandsFeed(String platform) throws ApiException {
        ApiResponse<Atom> localVarResp = popularBrandsFeedWithHttpInfo(platform);
        return localVarResp.getData();
    }

    /**
     * Popular Brands Feed
     * Lists all Channel 4 programmes by popularity considering the data gathered    within the last 7 days.    http://api.channel4.com/pmlsd/brands/popular.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/brands/popular.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return ApiResponse&lt;Atom&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Atom> popularBrandsFeedWithHttpInfo(String platform) throws ApiException {
        okhttp3.Call localVarCall = popularBrandsFeedValidateBeforeCall(platform, null);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Popular Brands Feed (asynchronously)
     * Lists all Channel 4 programmes by popularity considering the data gathered    within the last 7 days.    http://api.channel4.com/pmlsd/brands/popular.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/brands/popular.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call popularBrandsFeedAsync(String platform, final ApiCallback<Atom> _callback) throws ApiException {

        okhttp3.Call localVarCall = popularBrandsFeedValidateBeforeCall(platform, _callback);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for popularBrandsFeed2
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call popularBrandsFeed2Call(Integer pageno, String platform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/brands/popular/page-{pageno}.atom"
            .replace("{" + "pageno" + "}", localVarApiClient.escapeString(pageno.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call popularBrandsFeed2ValidateBeforeCall(Integer pageno, String platform, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pageno' is set
        if (pageno == null) {
            throw new ApiException("Missing the required parameter 'pageno' when calling popularBrandsFeed2(Async)");
        }

        return popularBrandsFeed2Call(pageno, platform, _callback);

    }

    /**
     * Popular Brands Feed(2)
     * Lists all Channel 4 programmes by popularity considering the data gathered    within the last 7 days.    http://api.channel4.com/pmlsd/brands/popular/page-{pageno}.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/brands/popular.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return Atom
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Atom popularBrandsFeed2(Integer pageno, String platform) throws ApiException {
        ApiResponse<Atom> localVarResp = popularBrandsFeed2WithHttpInfo(pageno, platform);
        return localVarResp.getData();
    }

    /**
     * Popular Brands Feed(2)
     * Lists all Channel 4 programmes by popularity considering the data gathered    within the last 7 days.    http://api.channel4.com/pmlsd/brands/popular/page-{pageno}.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/brands/popular.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return ApiResponse&lt;Atom&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Atom> popularBrandsFeed2WithHttpInfo(Integer pageno, String platform) throws ApiException {
        okhttp3.Call localVarCall = popularBrandsFeed2ValidateBeforeCall(pageno, platform, null);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Popular Brands Feed(2) (asynchronously)
     * Lists all Channel 4 programmes by popularity considering the data gathered    within the last 7 days.    http://api.channel4.com/pmlsd/brands/popular/page-{pageno}.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/brands/popular.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call popularBrandsFeed2Async(Integer pageno, String platform, final ApiCallback<Atom> _callback) throws ApiException {

        okhttp3.Call localVarCall = popularBrandsFeed2ValidateBeforeCall(pageno, platform, _callback);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchFeed
     * @param q The programme name to look for, minimum length: 2 chars.Looking for programme names with special chars might be URL encoded. (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchFeedCall(String q, String platform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/search.atom";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchFeedValidateBeforeCall(String q, String platform, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'q' is set
        if (q == null) {
            throw new ApiException("Missing the required parameter 'q' when calling searchFeed(Async)");
        }

        return searchFeedCall(q, platform, _callback);

    }

    /**
     * Search Feed
     * Lists all Channel 4 programmes where title (brand name) matching the search    term. Matches are made from the beginning of individual words in the title.    http://api.channel4.com/pmlsd/search.atom?q&#x3D;search-term&amp;apikey&#x3D;xxx    http://api.channel4.com/pmlsd/search.atom?q&#x3D;the+it+crowd&amp;apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param q The programme name to look for, minimum length: 2 chars.Looking for programme names with special chars might be URL encoded. (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return Atom
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Atom searchFeed(String q, String platform) throws ApiException {
        ApiResponse<Atom> localVarResp = searchFeedWithHttpInfo(q, platform);
        return localVarResp.getData();
    }

    /**
     * Search Feed
     * Lists all Channel 4 programmes where title (brand name) matching the search    term. Matches are made from the beginning of individual words in the title.    http://api.channel4.com/pmlsd/search.atom?q&#x3D;search-term&amp;apikey&#x3D;xxx    http://api.channel4.com/pmlsd/search.atom?q&#x3D;the+it+crowd&amp;apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param q The programme name to look for, minimum length: 2 chars.Looking for programme names with special chars might be URL encoded. (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return ApiResponse&lt;Atom&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Atom> searchFeedWithHttpInfo(String q, String platform) throws ApiException {
        okhttp3.Call localVarCall = searchFeedValidateBeforeCall(q, platform, null);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search Feed (asynchronously)
     * Lists all Channel 4 programmes where title (brand name) matching the search    term. Matches are made from the beginning of individual words in the title.    http://api.channel4.com/pmlsd/search.atom?q&#x3D;search-term&amp;apikey&#x3D;xxx    http://api.channel4.com/pmlsd/search.atom?q&#x3D;the+it+crowd&amp;apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param q The programme name to look for, minimum length: 2 chars.Looking for programme names with special chars might be URL encoded. (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchFeedAsync(String q, String platform, final ApiCallback<Atom> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchFeedValidateBeforeCall(q, platform, _callback);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchFeed2
     * @param q The programme name to look for, minimum length: 2 chars.Looking for programme names with special chars might be URL encoded. (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchFeed2Call(String q, String platform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/search/{q}.atom"
            .replace("{" + "q" + "}", localVarApiClient.escapeString(q.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchFeed2ValidateBeforeCall(String q, String platform, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'q' is set
        if (q == null) {
            throw new ApiException("Missing the required parameter 'q' when calling searchFeed2(Async)");
        }

        return searchFeed2Call(q, platform, _callback);

    }

    /**
     * Search Feed(2)
     * Lists all Channel 4 programmes where title (brand name) matching the search    term. Matches are made from the beginning of individual words in the title.    http://api.channel4.com/pmlsd/search/search-term.atom?apikey&#x3D;xxx    http://api.channel4.com/pmlsd/search.atom?q&#x3D;the+it+crowd&amp;apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param q The programme name to look for, minimum length: 2 chars.Looking for programme names with special chars might be URL encoded. (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return Atom
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Atom searchFeed2(String q, String platform) throws ApiException {
        ApiResponse<Atom> localVarResp = searchFeed2WithHttpInfo(q, platform);
        return localVarResp.getData();
    }

    /**
     * Search Feed(2)
     * Lists all Channel 4 programmes where title (brand name) matching the search    term. Matches are made from the beginning of individual words in the title.    http://api.channel4.com/pmlsd/search/search-term.atom?apikey&#x3D;xxx    http://api.channel4.com/pmlsd/search.atom?q&#x3D;the+it+crowd&amp;apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param q The programme name to look for, minimum length: 2 chars.Looking for programme names with special chars might be URL encoded. (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return ApiResponse&lt;Atom&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Atom> searchFeed2WithHttpInfo(String q, String platform) throws ApiException {
        okhttp3.Call localVarCall = searchFeed2ValidateBeforeCall(q, platform, null);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search Feed(2) (asynchronously)
     * Lists all Channel 4 programmes where title (brand name) matching the search    term. Matches are made from the beginning of individual words in the title.    http://api.channel4.com/pmlsd/search/search-term.atom?apikey&#x3D;xxx    http://api.channel4.com/pmlsd/search.atom?q&#x3D;the+it+crowd&amp;apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param q The programme name to look for, minimum length: 2 chars.Looking for programme names with special chars might be URL encoded. (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchFeed2Async(String q, String platform, final ApiCallback<Atom> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchFeed2ValidateBeforeCall(q, platform, _callback);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchFeed3
     * @param q The programme name to look for, minimum length: 2 chars.Looking for programme names with special chars might be URL encoded. (required)
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchFeed3Call(String q, Integer pageno, String platform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/search/page-{pageno}.atom"
            .replace("{" + "pageno" + "}", localVarApiClient.escapeString(pageno.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchFeed3ValidateBeforeCall(String q, Integer pageno, String platform, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'q' is set
        if (q == null) {
            throw new ApiException("Missing the required parameter 'q' when calling searchFeed3(Async)");
        }

        // verify the required parameter 'pageno' is set
        if (pageno == null) {
            throw new ApiException("Missing the required parameter 'pageno' when calling searchFeed3(Async)");
        }

        return searchFeed3Call(q, pageno, platform, _callback);

    }

    /**
     * Search Feed(3)
     * Lists all Channel 4 programmes where title (brand name) matching the search    term. Matches are made from the beginning of individual words in the title.    http://api.channel4.com/pmlsd/search/page-{pageno}.atom?q&#x3D;search-term&amp;apikey&#x3D;xxx    http://api.channel4.com/pmlsd/search.atom?q&#x3D;the+it+crowd&amp;apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param q The programme name to look for, minimum length: 2 chars.Looking for programme names with special chars might be URL encoded. (required)
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return Atom
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Atom searchFeed3(String q, Integer pageno, String platform) throws ApiException {
        ApiResponse<Atom> localVarResp = searchFeed3WithHttpInfo(q, pageno, platform);
        return localVarResp.getData();
    }

    /**
     * Search Feed(3)
     * Lists all Channel 4 programmes where title (brand name) matching the search    term. Matches are made from the beginning of individual words in the title.    http://api.channel4.com/pmlsd/search/page-{pageno}.atom?q&#x3D;search-term&amp;apikey&#x3D;xxx    http://api.channel4.com/pmlsd/search.atom?q&#x3D;the+it+crowd&amp;apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param q The programme name to look for, minimum length: 2 chars.Looking for programme names with special chars might be URL encoded. (required)
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return ApiResponse&lt;Atom&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Atom> searchFeed3WithHttpInfo(String q, Integer pageno, String platform) throws ApiException {
        okhttp3.Call localVarCall = searchFeed3ValidateBeforeCall(q, pageno, platform, null);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search Feed(3) (asynchronously)
     * Lists all Channel 4 programmes where title (brand name) matching the search    term. Matches are made from the beginning of individual words in the title.    http://api.channel4.com/pmlsd/search/page-{pageno}.atom?q&#x3D;search-term&amp;apikey&#x3D;xxx    http://api.channel4.com/pmlsd/search.atom?q&#x3D;the+it+crowd&amp;apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param q The programme name to look for, minimum length: 2 chars.Looking for programme names with special chars might be URL encoded. (required)
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchFeed3Async(String q, Integer pageno, String platform, final ApiCallback<Atom> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchFeed3ValidateBeforeCall(q, pageno, platform, _callback);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchFeed4
     * @param q The programme name to look for, minimum length: 2 chars.Looking for programme names with special chars might be URL encoded. (required)
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchFeed4Call(String q, Integer pageno, String platform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/search/{q}/page-{pageno}.atom"
            .replace("{" + "q" + "}", localVarApiClient.escapeString(q.toString()))
            .replace("{" + "pageno" + "}", localVarApiClient.escapeString(pageno.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchFeed4ValidateBeforeCall(String q, Integer pageno, String platform, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'q' is set
        if (q == null) {
            throw new ApiException("Missing the required parameter 'q' when calling searchFeed4(Async)");
        }

        // verify the required parameter 'pageno' is set
        if (pageno == null) {
            throw new ApiException("Missing the required parameter 'pageno' when calling searchFeed4(Async)");
        }

        return searchFeed4Call(q, pageno, platform, _callback);

    }

    /**
     * Search Feed(4)
     * Lists all Channel 4 programmes where title (brand name) matching the search    term. Matches are made from the beginning of individual words in the title.    http://api.channel4.com/pmlsd/search/search-term/page-{pageno}.atom?apikey&#x3D;xxx    http://api.channel4.com/pmlsd/search.atom?q&#x3D;the+it+crowd&amp;apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param q The programme name to look for, minimum length: 2 chars.Looking for programme names with special chars might be URL encoded. (required)
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return Atom
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Atom searchFeed4(String q, Integer pageno, String platform) throws ApiException {
        ApiResponse<Atom> localVarResp = searchFeed4WithHttpInfo(q, pageno, platform);
        return localVarResp.getData();
    }

    /**
     * Search Feed(4)
     * Lists all Channel 4 programmes where title (brand name) matching the search    term. Matches are made from the beginning of individual words in the title.    http://api.channel4.com/pmlsd/search/search-term/page-{pageno}.atom?apikey&#x3D;xxx    http://api.channel4.com/pmlsd/search.atom?q&#x3D;the+it+crowd&amp;apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param q The programme name to look for, minimum length: 2 chars.Looking for programme names with special chars might be URL encoded. (required)
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return ApiResponse&lt;Atom&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Atom> searchFeed4WithHttpInfo(String q, Integer pageno, String platform) throws ApiException {
        okhttp3.Call localVarCall = searchFeed4ValidateBeforeCall(q, pageno, platform, null);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search Feed(4) (asynchronously)
     * Lists all Channel 4 programmes where title (brand name) matching the search    term. Matches are made from the beginning of individual words in the title.    http://api.channel4.com/pmlsd/search/search-term/page-{pageno}.atom?apikey&#x3D;xxx    http://api.channel4.com/pmlsd/search.atom?q&#x3D;the+it+crowd&amp;apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param q The programme name to look for, minimum length: 2 chars.Looking for programme names with special chars might be URL encoded. (required)
     * @param pageno Page number of results to return (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchFeed4Async(String q, Integer pageno, String platform, final ApiCallback<Atom> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchFeed4ValidateBeforeCall(q, pageno, platform, _callback);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tVListingsFeed
     * @param yyyy The date for which you wish to see programming information. Note the schedule days start from 6am and run until 6am on the next calendar day. (required)
     * @param mm The date for which you wish to see programming information. Note the schedule days start from 6am and run until 6am on the next calendar day. (required)
     * @param dd The date for which you wish to see programming information. Note the schedule days start from 6am and run until 6am on the next calendar day. (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tVListingsFeedCall(String yyyy, String mm, String dd, String platform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tv-listings/daily/{yyyy}/{mm}/{dd}.atom"
            .replace("{" + "yyyy" + "}", localVarApiClient.escapeString(yyyy.toString()))
            .replace("{" + "mm" + "}", localVarApiClient.escapeString(mm.toString()))
            .replace("{" + "dd" + "}", localVarApiClient.escapeString(dd.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tVListingsFeedValidateBeforeCall(String yyyy, String mm, String dd, String platform, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'yyyy' is set
        if (yyyy == null) {
            throw new ApiException("Missing the required parameter 'yyyy' when calling tVListingsFeed(Async)");
        }

        // verify the required parameter 'mm' is set
        if (mm == null) {
            throw new ApiException("Missing the required parameter 'mm' when calling tVListingsFeed(Async)");
        }

        // verify the required parameter 'dd' is set
        if (dd == null) {
            throw new ApiException("Missing the required parameter 'dd' when calling tVListingsFeed(Async)");
        }

        return tVListingsFeedCall(yyyy, mm, dd, platform, _callback);

    }

    /**
     * TV Listings Feed
     * EPG Information of daily broadcast content aired per channels, according to    broadcast date    http://api.channel4.com/pmlsd/tv-listings/daily/[yyyy]/[mm]/[dd].atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/tv-listings/daily/2010/11/28.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param yyyy The date for which you wish to see programming information. Note the schedule days start from 6am and run until 6am on the next calendar day. (required)
     * @param mm The date for which you wish to see programming information. Note the schedule days start from 6am and run until 6am on the next calendar day. (required)
     * @param dd The date for which you wish to see programming information. Note the schedule days start from 6am and run until 6am on the next calendar day. (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return Atom
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Atom tVListingsFeed(String yyyy, String mm, String dd, String platform) throws ApiException {
        ApiResponse<Atom> localVarResp = tVListingsFeedWithHttpInfo(yyyy, mm, dd, platform);
        return localVarResp.getData();
    }

    /**
     * TV Listings Feed
     * EPG Information of daily broadcast content aired per channels, according to    broadcast date    http://api.channel4.com/pmlsd/tv-listings/daily/[yyyy]/[mm]/[dd].atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/tv-listings/daily/2010/11/28.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param yyyy The date for which you wish to see programming information. Note the schedule days start from 6am and run until 6am on the next calendar day. (required)
     * @param mm The date for which you wish to see programming information. Note the schedule days start from 6am and run until 6am on the next calendar day. (required)
     * @param dd The date for which you wish to see programming information. Note the schedule days start from 6am and run until 6am on the next calendar day. (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return ApiResponse&lt;Atom&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Atom> tVListingsFeedWithHttpInfo(String yyyy, String mm, String dd, String platform) throws ApiException {
        okhttp3.Call localVarCall = tVListingsFeedValidateBeforeCall(yyyy, mm, dd, platform, null);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * TV Listings Feed (asynchronously)
     * EPG Information of daily broadcast content aired per channels, according to    broadcast date    http://api.channel4.com/pmlsd/tv-listings/daily/[yyyy]/[mm]/[dd].atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/tv-listings/daily/2010/11/28.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param yyyy The date for which you wish to see programming information. Note the schedule days start from 6am and run until 6am on the next calendar day. (required)
     * @param mm The date for which you wish to see programming information. Note the schedule days start from 6am and run until 6am on the next calendar day. (required)
     * @param dd The date for which you wish to see programming information. Note the schedule days start from 6am and run until 6am on the next calendar day. (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tVListingsFeedAsync(String yyyy, String mm, String dd, String platform, final ApiCallback<Atom> _callback) throws ApiException {

        okhttp3.Call localVarCall = tVListingsFeedValidateBeforeCall(yyyy, mm, dd, platform, _callback);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tVListingsFeed2
     * @param yyyy The date for which you wish to see programming information. Note the schedule days start from 6am and run until 6am on the next calendar day. (required)
     * @param mm The date for which you wish to see programming information. Note the schedule days start from 6am and run until 6am on the next calendar day. (required)
     * @param dd The date for which you wish to see programming information. Note the schedule days start from 6am and run until 6am on the next calendar day. (required)
     * @param channel The EPG for a specific channel (c4, e4, m4, 4m, f4, 4s) (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tVListingsFeed2Call(String yyyy, String mm, String dd, String channel, String platform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tv-listings/daily/{yyyy}/{mm}/{dd}/{channel}.atom"
            .replace("{" + "yyyy" + "}", localVarApiClient.escapeString(yyyy.toString()))
            .replace("{" + "mm" + "}", localVarApiClient.escapeString(mm.toString()))
            .replace("{" + "dd" + "}", localVarApiClient.escapeString(dd.toString()))
            .replace("{" + "channel" + "}", localVarApiClient.escapeString(channel.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tVListingsFeed2ValidateBeforeCall(String yyyy, String mm, String dd, String channel, String platform, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'yyyy' is set
        if (yyyy == null) {
            throw new ApiException("Missing the required parameter 'yyyy' when calling tVListingsFeed2(Async)");
        }

        // verify the required parameter 'mm' is set
        if (mm == null) {
            throw new ApiException("Missing the required parameter 'mm' when calling tVListingsFeed2(Async)");
        }

        // verify the required parameter 'dd' is set
        if (dd == null) {
            throw new ApiException("Missing the required parameter 'dd' when calling tVListingsFeed2(Async)");
        }

        // verify the required parameter 'channel' is set
        if (channel == null) {
            throw new ApiException("Missing the required parameter 'channel' when calling tVListingsFeed2(Async)");
        }

        return tVListingsFeed2Call(yyyy, mm, dd, channel, platform, _callback);

    }

    /**
     * TV Listings Feed(2)
     * EPG Information of daily broadcast content aired per channels, according to    broadcast date    http://api.channel4.com/pmlsd/tv-listings/daily/[yyyy]/[mm]/[dd]/[channel].atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/tv-listings/daily/2010/11/28.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param yyyy The date for which you wish to see programming information. Note the schedule days start from 6am and run until 6am on the next calendar day. (required)
     * @param mm The date for which you wish to see programming information. Note the schedule days start from 6am and run until 6am on the next calendar day. (required)
     * @param dd The date for which you wish to see programming information. Note the schedule days start from 6am and run until 6am on the next calendar day. (required)
     * @param channel The EPG for a specific channel (c4, e4, m4, 4m, f4, 4s) (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return Atom
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public Atom tVListingsFeed2(String yyyy, String mm, String dd, String channel, String platform) throws ApiException {
        ApiResponse<Atom> localVarResp = tVListingsFeed2WithHttpInfo(yyyy, mm, dd, channel, platform);
        return localVarResp.getData();
    }

    /**
     * TV Listings Feed(2)
     * EPG Information of daily broadcast content aired per channels, according to    broadcast date    http://api.channel4.com/pmlsd/tv-listings/daily/[yyyy]/[mm]/[dd]/[channel].atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/tv-listings/daily/2010/11/28.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param yyyy The date for which you wish to see programming information. Note the schedule days start from 6am and run until 6am on the next calendar day. (required)
     * @param mm The date for which you wish to see programming information. Note the schedule days start from 6am and run until 6am on the next calendar day. (required)
     * @param dd The date for which you wish to see programming information. Note the schedule days start from 6am and run until 6am on the next calendar day. (required)
     * @param channel The EPG for a specific channel (c4, e4, m4, 4m, f4, 4s) (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @return ApiResponse&lt;Atom&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Atom> tVListingsFeed2WithHttpInfo(String yyyy, String mm, String dd, String channel, String platform) throws ApiException {
        okhttp3.Call localVarCall = tVListingsFeed2ValidateBeforeCall(yyyy, mm, dd, channel, platform, null);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * TV Listings Feed(2) (asynchronously)
     * EPG Information of daily broadcast content aired per channels, according to    broadcast date    http://api.channel4.com/pmlsd/tv-listings/daily/[yyyy]/[mm]/[dd]/[channel].atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/tv-listings/daily/2010/11/28.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     * @param yyyy The date for which you wish to see programming information. Note the schedule days start from 6am and run until 6am on the next calendar day. (required)
     * @param mm The date for which you wish to see programming information. Note the schedule days start from 6am and run until 6am on the next calendar day. (required)
     * @param dd The date for which you wish to see programming information. Note the schedule days start from 6am and run until 6am on the next calendar day. (required)
     * @param channel The EPG for a specific channel (c4, e4, m4, 4m, f4, 4s) (required)
     * @param platform The platform to use for the query. Alias &#39;client&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tVListingsFeed2Async(String yyyy, String mm, String dd, String channel, String platform, final ApiCallback<Atom> _callback) throws ApiException {

        okhttp3.Call localVarCall = tVListingsFeed2ValidateBeforeCall(yyyy, mm, dd, channel, platform, _callback);
        Type localVarReturnType = new TypeToken<Atom>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
