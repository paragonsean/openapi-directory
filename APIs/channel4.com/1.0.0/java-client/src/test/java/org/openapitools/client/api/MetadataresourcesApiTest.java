/*
 * Channel 4 API
 * This is the place to come for all the technical details you need to power your applications with Channel 4's deep programmes data.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer@channel4.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Atom;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MetadataresourcesApi
 */
@Disabled
public class MetadataresourcesApiTest {

    private final MetadataresourcesApi api = new MetadataresourcesApi();

    /**
     * Brand EPG Atom Feed
     *
     * This feed contains metadata about upcoming electronic programme guide (EPG)    information for a brand. The entry details upcoming transmission slots for    this brand.    http://api.channel4.com/pmlsd/brand-web-safe-title/epg.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/the-simpsons/epg.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void brandEPGAtomFeedTest() throws ApiException {
        String brandWebSafeTitle = null;
        String platform = null;
        Atom response = api.brandEPGAtomFeed(brandWebSafeTitle, platform);
        // TODO: test validations
    }

    /**
     * 4oD Feed
     *
     * A feed containing all available on-demand long-form content for a specified    brand. The entries for the 4oD feed contain references to each long-form    asset for a brand, ordered by series number and episode number.    http://api.channel4.com/pmlsd/[brand-web-safe-title]/4od.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/the-it-crowd/4od.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void call4oDFeedTest() throws ApiException {
        String brandWebSafeTitle = null;
        String platform = null;
        Atom response = api.call4oDFeed(brandWebSafeTitle, platform);
        // TODO: test validations
    }

    /**
     * Clip Detail Atom Feed
     *
     * A feed containing metadata about a single short-form video (clip).    http://api.channel4.com/pmlsd/brand-web-safe-title/videos/clip-asset-id.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/the-it-crowd/videos/TCGS_CLIP_0000001015.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clipDetailAtomFeedTest() throws ApiException {
        String brandWebSafeTitle = null;
        String clipAssetId = null;
        String platform = null;
        Atom response = api.clipDetailAtomFeed(brandWebSafeTitle, clipAssetId, platform);
        // TODO: test validations
    }

    /**
     * Clips Landing Feed Brand Series and Episode Levels
     *
     * A feed containing metadata about all the short-form (clip) videos. The clips    feed can be accessed at different levels: the content is then filtered    depending on the level, but the structure is identical.When accessed: from    the top, the feed contains all the clips for the brand;  at series level,    the feed contains only clips from the series; and  at episode level, the    feed contains only clips for the episode (and is very unlikely to require    pagination). The entries for the Clips Landing Feed contain references to    each short-form asset.    http://api.channel4.com/pmlsd/brand-web-safe-title/videos/all.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/peep-show/videos.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clipsLandingFeedBrandSeriesAndEpisodeLevelsTest() throws ApiException {
        String brandWebSafeTitle = null;
        String platform = null;
        Atom response = api.clipsLandingFeedBrandSeriesAndEpisodeLevels(brandWebSafeTitle, platform);
        // TODO: test validations
    }

    /**
     * Clips Landing Feed Brand Series and Episode Levels(2)
     *
     * A feed containing metadata about all the short-form (clip) videos. The clips    feed can be accessed at different levels: the content is then filtered    depending on the level, but the structure is identical.When accessed: from    the top, the feed contains all the clips for the brand;  at series level,    the feed contains only clips from the series; and  at episode level, the    feed contains only clips for the episode (and is very unlikely to require    pagination). The entries for the Clips Landing Feed contain references to    each short-form asset.    http://api.channel4.com/pmlsd/brand-web-safe-title/videos/series-series_number.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/peep-show/videos.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clipsLandingFeedBrandSeriesAndEpisodeLevels2Test() throws ApiException {
        String brandWebSafeTitle = null;
        String seriesNumber = null;
        String platform = null;
        Atom response = api.clipsLandingFeedBrandSeriesAndEpisodeLevels2(brandWebSafeTitle, seriesNumber, platform);
        // TODO: test validations
    }

    /**
     * Clips Landing Feed Brand Series and Episode Levels(3)
     *
     * A feed containing metadata about all the short-form (clip) videos. The clips    feed can be accessed at different levels: the content is then filtered    depending on the level, but the structure is identical.When accessed: from    the top, the feed contains all the clips for the brand;  at series level,    the feed contains only clips from the series; and  at episode level, the    feed contains only clips for the episode (and is very unlikely to require    pagination). The entries for the Clips Landing Feed contain references to    each short-form asset.    http://api.channel4.com/pmlsd/brand-web-safe-title/videos/series-series_number/episode-episode_number.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/peep-show/videos.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clipsLandingFeedBrandSeriesAndEpisodeLevels3Test() throws ApiException {
        String brandWebSafeTitle = null;
        String seriesNumber = null;
        String episodeNumber = null;
        String platform = null;
        Atom response = api.clipsLandingFeedBrandSeriesAndEpisodeLevels3(brandWebSafeTitle, seriesNumber, episodeNumber, platform);
        // TODO: test validations
    }

    /**
     * Coming Soon feed
     *
     * Coming Soon feed display a list of episodes coming soon to linear TV so that    I can promote new Channel 4 content.    http://api.channel4.com/pmlsd/coming-soon.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/coming-soon.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void comingSoonFeedTest() throws ApiException {
        String platform = null;
        Atom response = api.comingSoonFeed(platform);
        // TODO: test validations
    }

    /**
     * Coming Soon feed(2)
     *
     * Coming Soon feed display a list of episodes coming soon to linear TV so that    I can promote new Channel 4 content.    http://api.channel4.com/pmlsd/coming-soon/[category].atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/coming-soon.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void comingSoonFeed2Test() throws ApiException {
        String category = null;
        String platform = null;
        Atom response = api.comingSoonFeed2(category, platform);
        // TODO: test validations
    }

    /**
     * Episode Guide Feed Episode Detail
     *
     * A feed containing metadata about a specified episode. (This feed does not    contain any entries and only contains a feed element regarding this    episode.)    http://api.channel4.com/pmlsd/brand-web-safe-title/episode-guide/series-series_number/episode-episode_number.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/the-it-crowd/episode-guide/series-1/episode-1.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void episodeGuideFeedEpisodeDetailTest() throws ApiException {
        String brandWebSafeTitle = null;
        String seriesNumber = null;
        String episodeNumber = null;
        String platform = null;
        Atom response = api.episodeGuideFeedEpisodeDetail(brandWebSafeTitle, seriesNumber, episodeNumber, platform);
        // TODO: test validations
    }

    /**
     * Episode Guide Feed Series Detail
     *
     * A feed containing metadata about all the episodes for a specific series. The    entries in this feed contain references to each of the episodes (where    metadata has been published), with some convenient links.    http://api.channel4.com/pmlsd/brand-web-safe-title/episode-guide/series-series_number.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/chelmsford-123/episode-guide/series-1.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void episodeGuideFeedSeriesDetailTest() throws ApiException {
        String brandWebSafeTitle = null;
        String seriesNumber = null;
        String platform = null;
        Atom response = api.episodeGuideFeedSeriesDetail(brandWebSafeTitle, seriesNumber, platform);
        // TODO: test validations
    }

    /**
     * Episode Guide Feed Series Landing
     *
     * A feed containing metadata about all series for a specified brand. The    entries in this feed contain references to each of the series (where    metadata has been published), with some convenient links.    http://api.channel4.com/pmlsd/brand-web-safe-title/episode-guide.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/father-ted/episode-guide.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void episodeGuideFeedSeriesLandingTest() throws ApiException {
        String brandWebSafeTitle = null;
        String platform = null;
        Atom response = api.episodeGuideFeedSeriesLanding(brandWebSafeTitle, platform);
        // TODO: test validations
    }

    /**
     * Hub Feed
     *
     * The basis for all brand information    http://api.channel4.com/pmlsd/brand-web-safe-title.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/the-it-crowd.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hubFeedTest() throws ApiException {
        String brandWebSafeTitle = null;
        String platform = null;
        Atom response = api.hubFeed(brandWebSafeTitle, platform);
        // TODO: test validations
    }

    /**
     * Programme Feed
     *
     * A feed containing all long-form content currently or previously available    for a specified Programme Id. The entries for the Programme feed contain    references to long-form assets for each platform.    http://api.channel4.com/pmlsd/programme/[programme-id].atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx    http://api.channel4.com/pmlsd/programme/33881-001/4od.atom?apikey&#x3D;xxxxxxxxxxxxxxxxxxxxxxxx
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void programmeFeedTest() throws ApiException {
        String programmeId = null;
        String platform = null;
        Atom response = api.programmeFeed(programmeId, platform);
        // TODO: test validations
    }

}
