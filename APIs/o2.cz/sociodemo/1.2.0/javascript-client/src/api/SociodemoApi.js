/**
 * Socio-demo API
 * Socio-demo API can be used to obtain time-aggregated data representing groups of people on the given location in the Czech Republic. Having a location, the API can return count of people belonging to age group or gender aggregated by hours. The socio-demo data is based on presence of mobile stations in O2 mobile network.
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CountResult from '../model/CountResult';
import ErrorResult from '../model/ErrorResult';

/**
* Sociodemo service.
* @module api/SociodemoApi
* @version 1.2.0
*/
export default class SociodemoApi {

    /**
    * Constructs a new SociodemoApi. 
    * @alias module:api/SociodemoApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the age operation.
     * @callback module:api/SociodemoApi~ageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CountResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Presence in a location aggregated by age
     * Get count of people in a given location and an hour, aggregated by age.
     * @param {String} location basic residential unit
     * @param {String} ageGroup age-group specification (1: 8-18, 2: 19-25, 3: 26-35, 4: 36-55, 5: 56+)
     * @param {String} occurenceType occurence type in the basic residential unit (1 - transit, 2 - visit)
     * @param {String} hour time interval for the count aggregation (from 0 to 23)
     * @param {module:api/SociodemoApi~ageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CountResult}
     */
    age(location, ageGroup, occurenceType, hour, callback) {
      let postBody = null;
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling age");
      }
      // verify the required parameter 'ageGroup' is set
      if (ageGroup === undefined || ageGroup === null) {
        throw new Error("Missing the required parameter 'ageGroup' when calling age");
      }
      // verify the required parameter 'occurenceType' is set
      if (occurenceType === undefined || occurenceType === null) {
        throw new Error("Missing the required parameter 'occurenceType' when calling age");
      }
      // verify the required parameter 'hour' is set
      if (hour === undefined || hour === null) {
        throw new Error("Missing the required parameter 'hour' when calling age");
      }

      let pathParams = {
        'location': location
      };
      let queryParams = {
        'ageGroup': ageGroup,
        'occurenceType': occurenceType,
        'hour': hour
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CountResult;
      return this.apiClient.callApi(
        '/age/{location}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gender operation.
     * @callback module:api/SociodemoApi~genderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CountResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Presence in a location aggregated by gender
     * Get count of people in a given location and an hour, aggregated by gender.
     * @param {String} location basic residential unit
     * @param {String} g gender specification (1 - male, 2 - female)
     * @param {String} occurenceType occurence type in the basic residential unit (1 - transit, 2 - visit)
     * @param {String} hour time interval for the count aggregation (from 0 to 23)
     * @param {module:api/SociodemoApi~genderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CountResult}
     */
    gender(location, g, occurenceType, hour, callback) {
      let postBody = null;
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling gender");
      }
      // verify the required parameter 'g' is set
      if (g === undefined || g === null) {
        throw new Error("Missing the required parameter 'g' when calling gender");
      }
      // verify the required parameter 'occurenceType' is set
      if (occurenceType === undefined || occurenceType === null) {
        throw new Error("Missing the required parameter 'occurenceType' when calling gender");
      }
      // verify the required parameter 'hour' is set
      if (hour === undefined || hour === null) {
        throw new Error("Missing the required parameter 'hour' when calling gender");
      }

      let pathParams = {
        'location': location
      };
      let queryParams = {
        'g': g,
        'occurenceType': occurenceType,
        'hour': hour
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CountResult;
      return this.apiClient.callApi(
        '/gender/{location}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
