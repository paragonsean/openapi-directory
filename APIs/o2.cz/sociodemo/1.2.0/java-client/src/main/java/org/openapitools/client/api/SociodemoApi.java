/*
 * Socio-demo API
 * Socio-demo API can be used to obtain time-aggregated data representing groups of people on the given location in the Czech Republic. Having a location, the API can return count of people belonging to age group or gender aggregated by hours. The socio-demo data is based on presence of mobile stations in O2 mobile network.
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CountResult;
import org.openapitools.client.model.ErrorResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SociodemoApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SociodemoApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SociodemoApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for age
     * @param location basic residential unit (required)
     * @param ageGroup age-group specification (1: 8-18, 2: 19-25, 3: 26-35, 4: 36-55, 5: 56+) (required)
     * @param occurenceType occurence type in the basic residential unit (1 - transit, 2 - visit) (required)
     * @param hour time interval for the count aggregation (from 0 to 23) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response with the requested content. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The request is valid, but the platform is not able to serve the data. The reason may be restriction (e.g. differential privacy) or no data were found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request provided, missing or invalid parameter. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ageCall(String location, String ageGroup, String occurenceType, String hour, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/age/{location}"
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ageGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ageGroup", ageGroup));
        }

        if (occurenceType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("occurenceType", occurenceType));
        }

        if (hour != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hour", hour));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ageValidateBeforeCall(String location, String ageGroup, String occurenceType, String hour, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling age(Async)");
        }

        // verify the required parameter 'ageGroup' is set
        if (ageGroup == null) {
            throw new ApiException("Missing the required parameter 'ageGroup' when calling age(Async)");
        }

        // verify the required parameter 'occurenceType' is set
        if (occurenceType == null) {
            throw new ApiException("Missing the required parameter 'occurenceType' when calling age(Async)");
        }

        // verify the required parameter 'hour' is set
        if (hour == null) {
            throw new ApiException("Missing the required parameter 'hour' when calling age(Async)");
        }

        return ageCall(location, ageGroup, occurenceType, hour, _callback);

    }

    /**
     * Presence in a location aggregated by age
     * Get count of people in a given location and an hour, aggregated by age.
     * @param location basic residential unit (required)
     * @param ageGroup age-group specification (1: 8-18, 2: 19-25, 3: 26-35, 4: 36-55, 5: 56+) (required)
     * @param occurenceType occurence type in the basic residential unit (1 - transit, 2 - visit) (required)
     * @param hour time interval for the count aggregation (from 0 to 23) (required)
     * @return CountResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response with the requested content. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The request is valid, but the platform is not able to serve the data. The reason may be restriction (e.g. differential privacy) or no data were found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request provided, missing or invalid parameter. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public CountResult age(String location, String ageGroup, String occurenceType, String hour) throws ApiException {
        ApiResponse<CountResult> localVarResp = ageWithHttpInfo(location, ageGroup, occurenceType, hour);
        return localVarResp.getData();
    }

    /**
     * Presence in a location aggregated by age
     * Get count of people in a given location and an hour, aggregated by age.
     * @param location basic residential unit (required)
     * @param ageGroup age-group specification (1: 8-18, 2: 19-25, 3: 26-35, 4: 36-55, 5: 56+) (required)
     * @param occurenceType occurence type in the basic residential unit (1 - transit, 2 - visit) (required)
     * @param hour time interval for the count aggregation (from 0 to 23) (required)
     * @return ApiResponse&lt;CountResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response with the requested content. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The request is valid, but the platform is not able to serve the data. The reason may be restriction (e.g. differential privacy) or no data were found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request provided, missing or invalid parameter. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CountResult> ageWithHttpInfo(String location, String ageGroup, String occurenceType, String hour) throws ApiException {
        okhttp3.Call localVarCall = ageValidateBeforeCall(location, ageGroup, occurenceType, hour, null);
        Type localVarReturnType = new TypeToken<CountResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Presence in a location aggregated by age (asynchronously)
     * Get count of people in a given location and an hour, aggregated by age.
     * @param location basic residential unit (required)
     * @param ageGroup age-group specification (1: 8-18, 2: 19-25, 3: 26-35, 4: 36-55, 5: 56+) (required)
     * @param occurenceType occurence type in the basic residential unit (1 - transit, 2 - visit) (required)
     * @param hour time interval for the count aggregation (from 0 to 23) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response with the requested content. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The request is valid, but the platform is not able to serve the data. The reason may be restriction (e.g. differential privacy) or no data were found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request provided, missing or invalid parameter. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ageAsync(String location, String ageGroup, String occurenceType, String hour, final ApiCallback<CountResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = ageValidateBeforeCall(location, ageGroup, occurenceType, hour, _callback);
        Type localVarReturnType = new TypeToken<CountResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gender
     * @param location basic residential unit (required)
     * @param g gender specification (1 - male, 2 - female) (required)
     * @param occurenceType occurence type in the basic residential unit (1 - transit, 2 - visit) (required)
     * @param hour time interval for the count aggregation (from 0 to 23) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response with the requested content. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The request is valid, but the platform is not able to serve the data. The reason may be restriction (e.g. differential privacy) or no data were found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request provided, missing or invalid parameter. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call genderCall(String location, String g, String occurenceType, String hour, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gender/{location}"
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (g != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("g", g));
        }

        if (occurenceType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("occurenceType", occurenceType));
        }

        if (hour != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hour", hour));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call genderValidateBeforeCall(String location, String g, String occurenceType, String hour, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling gender(Async)");
        }

        // verify the required parameter 'g' is set
        if (g == null) {
            throw new ApiException("Missing the required parameter 'g' when calling gender(Async)");
        }

        // verify the required parameter 'occurenceType' is set
        if (occurenceType == null) {
            throw new ApiException("Missing the required parameter 'occurenceType' when calling gender(Async)");
        }

        // verify the required parameter 'hour' is set
        if (hour == null) {
            throw new ApiException("Missing the required parameter 'hour' when calling gender(Async)");
        }

        return genderCall(location, g, occurenceType, hour, _callback);

    }

    /**
     * Presence in a location aggregated by gender
     * Get count of people in a given location and an hour, aggregated by gender.
     * @param location basic residential unit (required)
     * @param g gender specification (1 - male, 2 - female) (required)
     * @param occurenceType occurence type in the basic residential unit (1 - transit, 2 - visit) (required)
     * @param hour time interval for the count aggregation (from 0 to 23) (required)
     * @return CountResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response with the requested content. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The request is valid, but the platform is not able to serve the data. The reason may be restriction (e.g. differential privacy) or no data were found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request provided, missing or invalid parameter. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public CountResult gender(String location, String g, String occurenceType, String hour) throws ApiException {
        ApiResponse<CountResult> localVarResp = genderWithHttpInfo(location, g, occurenceType, hour);
        return localVarResp.getData();
    }

    /**
     * Presence in a location aggregated by gender
     * Get count of people in a given location and an hour, aggregated by gender.
     * @param location basic residential unit (required)
     * @param g gender specification (1 - male, 2 - female) (required)
     * @param occurenceType occurence type in the basic residential unit (1 - transit, 2 - visit) (required)
     * @param hour time interval for the count aggregation (from 0 to 23) (required)
     * @return ApiResponse&lt;CountResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response with the requested content. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The request is valid, but the platform is not able to serve the data. The reason may be restriction (e.g. differential privacy) or no data were found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request provided, missing or invalid parameter. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CountResult> genderWithHttpInfo(String location, String g, String occurenceType, String hour) throws ApiException {
        okhttp3.Call localVarCall = genderValidateBeforeCall(location, g, occurenceType, hour, null);
        Type localVarReturnType = new TypeToken<CountResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Presence in a location aggregated by gender (asynchronously)
     * Get count of people in a given location and an hour, aggregated by gender.
     * @param location basic residential unit (required)
     * @param g gender specification (1 - male, 2 - female) (required)
     * @param occurenceType occurence type in the basic residential unit (1 - transit, 2 - visit) (required)
     * @param hour time interval for the count aggregation (from 0 to 23) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response with the requested content. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The request is valid, but the platform is not able to serve the data. The reason may be restriction (e.g. differential privacy) or no data were found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request provided, missing or invalid parameter. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call genderAsync(String location, String g, String occurenceType, String hour, final ApiCallback<CountResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = genderValidateBeforeCall(location, g, occurenceType, hour, _callback);
        Type localVarReturnType = new TypeToken<CountResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
