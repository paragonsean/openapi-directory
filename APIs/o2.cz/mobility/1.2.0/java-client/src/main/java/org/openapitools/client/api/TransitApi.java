/*
 * Mobility API
 * Transit API can be used to obtain time-aggregated data representing moving the people between various spatial points within the Czech Republic. Having A - 'from' and B - 'to' points, the API can return count of people traveling from A to B or people that are from A and traveling to B, etc. The mobility data is based on moving mobile stations in O2 mobile network.
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CountResult;
import org.openapitools.client.model.ErrorResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TransitApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TransitApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TransitApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for transit
     * @param from source basic residential unit (required)
     * @param to destination basic residential unit (required)
     * @param uniques all or only uniques (0 - all, 1 - uniques) (required)
     * @param fromType occurence type in the source basic residential unit (1 - transit, 2 - visit, 0 - both) (optional)
     * @param toType occurence type in the destination basic residential unit (1 - transit, 2 - visit, 0 - both) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response with the requested content. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The request is valid, but the platform is not able to serve the data. The reason may be restriction (e.g. differential privacy) or no data were found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request provided, missing or invalid parameter. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transitCall(String from, String to, String uniques, String fromType, String toType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transit/{from}/{to}"
            .replace("{" + "from" + "}", localVarApiClient.escapeString(from.toString()))
            .replace("{" + "to" + "}", localVarApiClient.escapeString(to.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fromType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromType", fromType));
        }

        if (toType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toType", toType));
        }

        if (uniques != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uniques", uniques));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transitValidateBeforeCall(String from, String to, String uniques, String fromType, String toType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling transit(Async)");
        }

        // verify the required parameter 'to' is set
        if (to == null) {
            throw new ApiException("Missing the required parameter 'to' when calling transit(Async)");
        }

        // verify the required parameter 'uniques' is set
        if (uniques == null) {
            throw new ApiException("Missing the required parameter 'uniques' when calling transit(Async)");
        }

        return transitCall(from, to, uniques, fromType, toType, _callback);

    }

    /**
     * Transit between basic residential units
     * Get count of objects that were moving between basic residential units or objects that were visiting these basic residential units. Specific object&#39;s occurence type in the base residential unit can be requested. If none occurence type is present in the request or both occurence types are zero, the result will be aggregation of all types of occurence for given base residential units. More about base residential units can be found at https://www.czso.cz/csu/rso/zsj_rso (czech).
     * @param from source basic residential unit (required)
     * @param to destination basic residential unit (required)
     * @param uniques all or only uniques (0 - all, 1 - uniques) (required)
     * @param fromType occurence type in the source basic residential unit (1 - transit, 2 - visit, 0 - both) (optional)
     * @param toType occurence type in the destination basic residential unit (1 - transit, 2 - visit, 0 - both) (optional)
     * @return CountResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response with the requested content. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The request is valid, but the platform is not able to serve the data. The reason may be restriction (e.g. differential privacy) or no data were found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request provided, missing or invalid parameter. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public CountResult transit(String from, String to, String uniques, String fromType, String toType) throws ApiException {
        ApiResponse<CountResult> localVarResp = transitWithHttpInfo(from, to, uniques, fromType, toType);
        return localVarResp.getData();
    }

    /**
     * Transit between basic residential units
     * Get count of objects that were moving between basic residential units or objects that were visiting these basic residential units. Specific object&#39;s occurence type in the base residential unit can be requested. If none occurence type is present in the request or both occurence types are zero, the result will be aggregation of all types of occurence for given base residential units. More about base residential units can be found at https://www.czso.cz/csu/rso/zsj_rso (czech).
     * @param from source basic residential unit (required)
     * @param to destination basic residential unit (required)
     * @param uniques all or only uniques (0 - all, 1 - uniques) (required)
     * @param fromType occurence type in the source basic residential unit (1 - transit, 2 - visit, 0 - both) (optional)
     * @param toType occurence type in the destination basic residential unit (1 - transit, 2 - visit, 0 - both) (optional)
     * @return ApiResponse&lt;CountResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response with the requested content. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The request is valid, but the platform is not able to serve the data. The reason may be restriction (e.g. differential privacy) or no data were found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request provided, missing or invalid parameter. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CountResult> transitWithHttpInfo(String from, String to, String uniques, String fromType, String toType) throws ApiException {
        okhttp3.Call localVarCall = transitValidateBeforeCall(from, to, uniques, fromType, toType, null);
        Type localVarReturnType = new TypeToken<CountResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Transit between basic residential units (asynchronously)
     * Get count of objects that were moving between basic residential units or objects that were visiting these basic residential units. Specific object&#39;s occurence type in the base residential unit can be requested. If none occurence type is present in the request or both occurence types are zero, the result will be aggregation of all types of occurence for given base residential units. More about base residential units can be found at https://www.czso.cz/csu/rso/zsj_rso (czech).
     * @param from source basic residential unit (required)
     * @param to destination basic residential unit (required)
     * @param uniques all or only uniques (0 - all, 1 - uniques) (required)
     * @param fromType occurence type in the source basic residential unit (1 - transit, 2 - visit, 0 - both) (optional)
     * @param toType occurence type in the destination basic residential unit (1 - transit, 2 - visit, 0 - both) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response with the requested content. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The request is valid, but the platform is not able to serve the data. The reason may be restriction (e.g. differential privacy) or no data were found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request provided, missing or invalid parameter. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transitAsync(String from, String to, String uniques, String fromType, String toType, final ApiCallback<CountResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = transitValidateBeforeCall(from, to, uniques, fromType, toType, _callback);
        Type localVarReturnType = new TypeToken<CountResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
