/*
 * Mobility API
 * Transit API can be used to obtain time-aggregated data representing moving the people between various spatial points within the Czech Republic. Having A - 'from' and B - 'to' points, the API can return count of people traveling from A to B or people that are from A and traveling to B, etc. The mobility data is based on moving mobile stations in O2 mobile network.
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Response to the info request
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:59.825430-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InfoResult {
  public static final String SERIALIZED_NAME_APP_NAME = "appName";
  @SerializedName(SERIALIZED_NAME_APP_NAME)
  private String appName;

  public static final String SERIALIZED_NAME_APP_VENDOR = "appVendor";
  @SerializedName(SERIALIZED_NAME_APP_VENDOR)
  private String appVendor;

  public static final String SERIALIZED_NAME_APP_VERSION = "appVersion";
  @SerializedName(SERIALIZED_NAME_APP_VERSION)
  private String appVersion;

  public static final String SERIALIZED_NAME_BACKEND_APP_NAME = "backendAppName";
  @SerializedName(SERIALIZED_NAME_BACKEND_APP_NAME)
  private String backendAppName;

  public static final String SERIALIZED_NAME_BACKEND_APP_VENDOR = "backendAppVendor";
  @SerializedName(SERIALIZED_NAME_BACKEND_APP_VENDOR)
  private String backendAppVendor;

  public static final String SERIALIZED_NAME_BACKEND_APP_VERSION = "backendAppVersion";
  @SerializedName(SERIALIZED_NAME_BACKEND_APP_VERSION)
  private String backendAppVersion;

  public static final String SERIALIZED_NAME_BACKEND_DATA_FROM = "backendDataFrom";
  @SerializedName(SERIALIZED_NAME_BACKEND_DATA_FROM)
  private String backendDataFrom;

  public InfoResult() {
  }

  public InfoResult appName(String appName) {
    this.appName = appName;
    return this;
  }

  /**
   * Application name
   * @return appName
   */
  @javax.annotation.Nullable
  public String getAppName() {
    return appName;
  }

  public void setAppName(String appName) {
    this.appName = appName;
  }


  public InfoResult appVendor(String appVendor) {
    this.appVendor = appVendor;
    return this;
  }

  /**
   * Application vendor
   * @return appVendor
   */
  @javax.annotation.Nullable
  public String getAppVendor() {
    return appVendor;
  }

  public void setAppVendor(String appVendor) {
    this.appVendor = appVendor;
  }


  public InfoResult appVersion(String appVersion) {
    this.appVersion = appVersion;
    return this;
  }

  /**
   * Application version
   * @return appVersion
   */
  @javax.annotation.Nullable
  public String getAppVersion() {
    return appVersion;
  }

  public void setAppVersion(String appVersion) {
    this.appVersion = appVersion;
  }


  public InfoResult backendAppName(String backendAppName) {
    this.backendAppName = backendAppName;
    return this;
  }

  /**
   * Backend application name
   * @return backendAppName
   */
  @javax.annotation.Nullable
  public String getBackendAppName() {
    return backendAppName;
  }

  public void setBackendAppName(String backendAppName) {
    this.backendAppName = backendAppName;
  }


  public InfoResult backendAppVendor(String backendAppVendor) {
    this.backendAppVendor = backendAppVendor;
    return this;
  }

  /**
   * Backend application vendor
   * @return backendAppVendor
   */
  @javax.annotation.Nullable
  public String getBackendAppVendor() {
    return backendAppVendor;
  }

  public void setBackendAppVendor(String backendAppVendor) {
    this.backendAppVendor = backendAppVendor;
  }


  public InfoResult backendAppVersion(String backendAppVersion) {
    this.backendAppVersion = backendAppVersion;
    return this;
  }

  /**
   * Backend application version
   * @return backendAppVersion
   */
  @javax.annotation.Nullable
  public String getBackendAppVersion() {
    return backendAppVersion;
  }

  public void setBackendAppVersion(String backendAppVersion) {
    this.backendAppVersion = backendAppVersion;
  }


  public InfoResult backendDataFrom(String backendDataFrom) {
    this.backendDataFrom = backendDataFrom;
    return this;
  }

  /**
   * For which day are data valid
   * @return backendDataFrom
   */
  @javax.annotation.Nullable
  public String getBackendDataFrom() {
    return backendDataFrom;
  }

  public void setBackendDataFrom(String backendDataFrom) {
    this.backendDataFrom = backendDataFrom;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InfoResult infoResult = (InfoResult) o;
    return Objects.equals(this.appName, infoResult.appName) &&
        Objects.equals(this.appVendor, infoResult.appVendor) &&
        Objects.equals(this.appVersion, infoResult.appVersion) &&
        Objects.equals(this.backendAppName, infoResult.backendAppName) &&
        Objects.equals(this.backendAppVendor, infoResult.backendAppVendor) &&
        Objects.equals(this.backendAppVersion, infoResult.backendAppVersion) &&
        Objects.equals(this.backendDataFrom, infoResult.backendDataFrom);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appName, appVendor, appVersion, backendAppName, backendAppVendor, backendAppVersion, backendDataFrom);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InfoResult {\n");
    sb.append("    appName: ").append(toIndentedString(appName)).append("\n");
    sb.append("    appVendor: ").append(toIndentedString(appVendor)).append("\n");
    sb.append("    appVersion: ").append(toIndentedString(appVersion)).append("\n");
    sb.append("    backendAppName: ").append(toIndentedString(backendAppName)).append("\n");
    sb.append("    backendAppVendor: ").append(toIndentedString(backendAppVendor)).append("\n");
    sb.append("    backendAppVersion: ").append(toIndentedString(backendAppVersion)).append("\n");
    sb.append("    backendDataFrom: ").append(toIndentedString(backendDataFrom)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appName");
    openapiFields.add("appVendor");
    openapiFields.add("appVersion");
    openapiFields.add("backendAppName");
    openapiFields.add("backendAppVendor");
    openapiFields.add("backendAppVersion");
    openapiFields.add("backendDataFrom");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InfoResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InfoResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InfoResult is not found in the empty JSON string", InfoResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InfoResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InfoResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("appName") != null && !jsonObj.get("appName").isJsonNull()) && !jsonObj.get("appName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appName").toString()));
      }
      if ((jsonObj.get("appVendor") != null && !jsonObj.get("appVendor").isJsonNull()) && !jsonObj.get("appVendor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appVendor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appVendor").toString()));
      }
      if ((jsonObj.get("appVersion") != null && !jsonObj.get("appVersion").isJsonNull()) && !jsonObj.get("appVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appVersion").toString()));
      }
      if ((jsonObj.get("backendAppName") != null && !jsonObj.get("backendAppName").isJsonNull()) && !jsonObj.get("backendAppName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backendAppName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backendAppName").toString()));
      }
      if ((jsonObj.get("backendAppVendor") != null && !jsonObj.get("backendAppVendor").isJsonNull()) && !jsonObj.get("backendAppVendor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backendAppVendor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backendAppVendor").toString()));
      }
      if ((jsonObj.get("backendAppVersion") != null && !jsonObj.get("backendAppVersion").isJsonNull()) && !jsonObj.get("backendAppVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backendAppVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backendAppVersion").toString()));
      }
      if ((jsonObj.get("backendDataFrom") != null && !jsonObj.get("backendDataFrom").isJsonNull()) && !jsonObj.get("backendDataFrom").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backendDataFrom` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backendDataFrom").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InfoResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InfoResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InfoResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InfoResult.class));

       return (TypeAdapter<T>) new TypeAdapter<InfoResult>() {
           @Override
           public void write(JsonWriter out, InfoResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InfoResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InfoResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InfoResult
   * @throws IOException if the JSON string is invalid with respect to InfoResult
   */
  public static InfoResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InfoResult.class);
  }

  /**
   * Convert an instance of InfoResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

