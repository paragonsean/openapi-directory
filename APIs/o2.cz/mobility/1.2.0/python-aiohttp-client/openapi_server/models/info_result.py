# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InfoResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_name: str=None, app_vendor: str=None, app_version: str=None, backend_app_name: str=None, backend_app_vendor: str=None, backend_app_version: str=None, backend_data_from: str=None):
        """InfoResult - a model defined in OpenAPI

        :param app_name: The app_name of this InfoResult.
        :param app_vendor: The app_vendor of this InfoResult.
        :param app_version: The app_version of this InfoResult.
        :param backend_app_name: The backend_app_name of this InfoResult.
        :param backend_app_vendor: The backend_app_vendor of this InfoResult.
        :param backend_app_version: The backend_app_version of this InfoResult.
        :param backend_data_from: The backend_data_from of this InfoResult.
        """
        self.openapi_types = {
            'app_name': str,
            'app_vendor': str,
            'app_version': str,
            'backend_app_name': str,
            'backend_app_vendor': str,
            'backend_app_version': str,
            'backend_data_from': str
        }

        self.attribute_map = {
            'app_name': 'appName',
            'app_vendor': 'appVendor',
            'app_version': 'appVersion',
            'backend_app_name': 'backendAppName',
            'backend_app_vendor': 'backendAppVendor',
            'backend_app_version': 'backendAppVersion',
            'backend_data_from': 'backendDataFrom'
        }

        self._app_name = app_name
        self._app_vendor = app_vendor
        self._app_version = app_version
        self._backend_app_name = backend_app_name
        self._backend_app_vendor = backend_app_vendor
        self._backend_app_version = backend_app_version
        self._backend_data_from = backend_data_from

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InfoResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InfoResult of this InfoResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_name(self):
        """Gets the app_name of this InfoResult.

        Application name

        :return: The app_name of this InfoResult.
        :rtype: str
        """
        return self._app_name

    @app_name.setter
    def app_name(self, app_name):
        """Sets the app_name of this InfoResult.

        Application name

        :param app_name: The app_name of this InfoResult.
        :type app_name: str
        """

        self._app_name = app_name

    @property
    def app_vendor(self):
        """Gets the app_vendor of this InfoResult.

        Application vendor

        :return: The app_vendor of this InfoResult.
        :rtype: str
        """
        return self._app_vendor

    @app_vendor.setter
    def app_vendor(self, app_vendor):
        """Sets the app_vendor of this InfoResult.

        Application vendor

        :param app_vendor: The app_vendor of this InfoResult.
        :type app_vendor: str
        """

        self._app_vendor = app_vendor

    @property
    def app_version(self):
        """Gets the app_version of this InfoResult.

        Application version

        :return: The app_version of this InfoResult.
        :rtype: str
        """
        return self._app_version

    @app_version.setter
    def app_version(self, app_version):
        """Sets the app_version of this InfoResult.

        Application version

        :param app_version: The app_version of this InfoResult.
        :type app_version: str
        """

        self._app_version = app_version

    @property
    def backend_app_name(self):
        """Gets the backend_app_name of this InfoResult.

        Backend application name

        :return: The backend_app_name of this InfoResult.
        :rtype: str
        """
        return self._backend_app_name

    @backend_app_name.setter
    def backend_app_name(self, backend_app_name):
        """Sets the backend_app_name of this InfoResult.

        Backend application name

        :param backend_app_name: The backend_app_name of this InfoResult.
        :type backend_app_name: str
        """

        self._backend_app_name = backend_app_name

    @property
    def backend_app_vendor(self):
        """Gets the backend_app_vendor of this InfoResult.

        Backend application vendor

        :return: The backend_app_vendor of this InfoResult.
        :rtype: str
        """
        return self._backend_app_vendor

    @backend_app_vendor.setter
    def backend_app_vendor(self, backend_app_vendor):
        """Sets the backend_app_vendor of this InfoResult.

        Backend application vendor

        :param backend_app_vendor: The backend_app_vendor of this InfoResult.
        :type backend_app_vendor: str
        """

        self._backend_app_vendor = backend_app_vendor

    @property
    def backend_app_version(self):
        """Gets the backend_app_version of this InfoResult.

        Backend application version

        :return: The backend_app_version of this InfoResult.
        :rtype: str
        """
        return self._backend_app_version

    @backend_app_version.setter
    def backend_app_version(self, backend_app_version):
        """Sets the backend_app_version of this InfoResult.

        Backend application version

        :param backend_app_version: The backend_app_version of this InfoResult.
        :type backend_app_version: str
        """

        self._backend_app_version = backend_app_version

    @property
    def backend_data_from(self):
        """Gets the backend_data_from of this InfoResult.

        For which day are data valid

        :return: The backend_data_from of this InfoResult.
        :rtype: str
        """
        return self._backend_data_from

    @backend_data_from.setter
    def backend_data_from(self, backend_data_from):
        """Sets the backend_data_from of this InfoResult.

        For which day are data valid

        :param backend_data_from: The backend_data_from of this InfoResult.
        :type backend_data_from: str
        """

        self._backend_data_from = backend_data_from
