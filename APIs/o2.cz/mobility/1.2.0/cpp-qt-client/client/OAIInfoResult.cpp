/**
 * Mobility API
 * Transit API can be used to obtain time-aggregated data representing moving the people between various spatial points within the Czech Republic. Having A - 'from' and B - 'to' points, the API can return count of people traveling from A to B or people that are from A and traveling to B, etc. The mobility data is based on moving mobile stations in O2 mobile network.
 *
 * The version of the OpenAPI document: 1.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInfoResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInfoResult::OAIInfoResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInfoResult::OAIInfoResult() {
    this->initializeModel();
}

OAIInfoResult::~OAIInfoResult() {}

void OAIInfoResult::initializeModel() {

    m_app_name_isSet = false;
    m_app_name_isValid = false;

    m_app_vendor_isSet = false;
    m_app_vendor_isValid = false;

    m_app_version_isSet = false;
    m_app_version_isValid = false;

    m_backend_app_name_isSet = false;
    m_backend_app_name_isValid = false;

    m_backend_app_vendor_isSet = false;
    m_backend_app_vendor_isValid = false;

    m_backend_app_version_isSet = false;
    m_backend_app_version_isValid = false;

    m_backend_data_from_isSet = false;
    m_backend_data_from_isValid = false;
}

void OAIInfoResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInfoResult::fromJsonObject(QJsonObject json) {

    m_app_name_isValid = ::OpenAPI::fromJsonValue(m_app_name, json[QString("appName")]);
    m_app_name_isSet = !json[QString("appName")].isNull() && m_app_name_isValid;

    m_app_vendor_isValid = ::OpenAPI::fromJsonValue(m_app_vendor, json[QString("appVendor")]);
    m_app_vendor_isSet = !json[QString("appVendor")].isNull() && m_app_vendor_isValid;

    m_app_version_isValid = ::OpenAPI::fromJsonValue(m_app_version, json[QString("appVersion")]);
    m_app_version_isSet = !json[QString("appVersion")].isNull() && m_app_version_isValid;

    m_backend_app_name_isValid = ::OpenAPI::fromJsonValue(m_backend_app_name, json[QString("backendAppName")]);
    m_backend_app_name_isSet = !json[QString("backendAppName")].isNull() && m_backend_app_name_isValid;

    m_backend_app_vendor_isValid = ::OpenAPI::fromJsonValue(m_backend_app_vendor, json[QString("backendAppVendor")]);
    m_backend_app_vendor_isSet = !json[QString("backendAppVendor")].isNull() && m_backend_app_vendor_isValid;

    m_backend_app_version_isValid = ::OpenAPI::fromJsonValue(m_backend_app_version, json[QString("backendAppVersion")]);
    m_backend_app_version_isSet = !json[QString("backendAppVersion")].isNull() && m_backend_app_version_isValid;

    m_backend_data_from_isValid = ::OpenAPI::fromJsonValue(m_backend_data_from, json[QString("backendDataFrom")]);
    m_backend_data_from_isSet = !json[QString("backendDataFrom")].isNull() && m_backend_data_from_isValid;
}

QString OAIInfoResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInfoResult::asJsonObject() const {
    QJsonObject obj;
    if (m_app_name_isSet) {
        obj.insert(QString("appName"), ::OpenAPI::toJsonValue(m_app_name));
    }
    if (m_app_vendor_isSet) {
        obj.insert(QString("appVendor"), ::OpenAPI::toJsonValue(m_app_vendor));
    }
    if (m_app_version_isSet) {
        obj.insert(QString("appVersion"), ::OpenAPI::toJsonValue(m_app_version));
    }
    if (m_backend_app_name_isSet) {
        obj.insert(QString("backendAppName"), ::OpenAPI::toJsonValue(m_backend_app_name));
    }
    if (m_backend_app_vendor_isSet) {
        obj.insert(QString("backendAppVendor"), ::OpenAPI::toJsonValue(m_backend_app_vendor));
    }
    if (m_backend_app_version_isSet) {
        obj.insert(QString("backendAppVersion"), ::OpenAPI::toJsonValue(m_backend_app_version));
    }
    if (m_backend_data_from_isSet) {
        obj.insert(QString("backendDataFrom"), ::OpenAPI::toJsonValue(m_backend_data_from));
    }
    return obj;
}

QString OAIInfoResult::getAppName() const {
    return m_app_name;
}
void OAIInfoResult::setAppName(const QString &app_name) {
    m_app_name = app_name;
    m_app_name_isSet = true;
}

bool OAIInfoResult::is_app_name_Set() const{
    return m_app_name_isSet;
}

bool OAIInfoResult::is_app_name_Valid() const{
    return m_app_name_isValid;
}

QString OAIInfoResult::getAppVendor() const {
    return m_app_vendor;
}
void OAIInfoResult::setAppVendor(const QString &app_vendor) {
    m_app_vendor = app_vendor;
    m_app_vendor_isSet = true;
}

bool OAIInfoResult::is_app_vendor_Set() const{
    return m_app_vendor_isSet;
}

bool OAIInfoResult::is_app_vendor_Valid() const{
    return m_app_vendor_isValid;
}

QString OAIInfoResult::getAppVersion() const {
    return m_app_version;
}
void OAIInfoResult::setAppVersion(const QString &app_version) {
    m_app_version = app_version;
    m_app_version_isSet = true;
}

bool OAIInfoResult::is_app_version_Set() const{
    return m_app_version_isSet;
}

bool OAIInfoResult::is_app_version_Valid() const{
    return m_app_version_isValid;
}

QString OAIInfoResult::getBackendAppName() const {
    return m_backend_app_name;
}
void OAIInfoResult::setBackendAppName(const QString &backend_app_name) {
    m_backend_app_name = backend_app_name;
    m_backend_app_name_isSet = true;
}

bool OAIInfoResult::is_backend_app_name_Set() const{
    return m_backend_app_name_isSet;
}

bool OAIInfoResult::is_backend_app_name_Valid() const{
    return m_backend_app_name_isValid;
}

QString OAIInfoResult::getBackendAppVendor() const {
    return m_backend_app_vendor;
}
void OAIInfoResult::setBackendAppVendor(const QString &backend_app_vendor) {
    m_backend_app_vendor = backend_app_vendor;
    m_backend_app_vendor_isSet = true;
}

bool OAIInfoResult::is_backend_app_vendor_Set() const{
    return m_backend_app_vendor_isSet;
}

bool OAIInfoResult::is_backend_app_vendor_Valid() const{
    return m_backend_app_vendor_isValid;
}

QString OAIInfoResult::getBackendAppVersion() const {
    return m_backend_app_version;
}
void OAIInfoResult::setBackendAppVersion(const QString &backend_app_version) {
    m_backend_app_version = backend_app_version;
    m_backend_app_version_isSet = true;
}

bool OAIInfoResult::is_backend_app_version_Set() const{
    return m_backend_app_version_isSet;
}

bool OAIInfoResult::is_backend_app_version_Valid() const{
    return m_backend_app_version_isValid;
}

QString OAIInfoResult::getBackendDataFrom() const {
    return m_backend_data_from;
}
void OAIInfoResult::setBackendDataFrom(const QString &backend_data_from) {
    m_backend_data_from = backend_data_from;
    m_backend_data_from_isSet = true;
}

bool OAIInfoResult::is_backend_data_from_Set() const{
    return m_backend_data_from_isSet;
}

bool OAIInfoResult::is_backend_data_from_Valid() const{
    return m_backend_data_from_isValid;
}

bool OAIInfoResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_vendor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backend_app_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backend_app_vendor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backend_app_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backend_data_from_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInfoResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
