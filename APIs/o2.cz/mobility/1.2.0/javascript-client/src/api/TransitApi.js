/**
 * Mobility API
 * Transit API can be used to obtain time-aggregated data representing moving the people between various spatial points within the Czech Republic. Having A - 'from' and B - 'to' points, the API can return count of people traveling from A to B or people that are from A and traveling to B, etc. The mobility data is based on moving mobile stations in O2 mobile network.
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CountResult from '../model/CountResult';
import ErrorResult from '../model/ErrorResult';

/**
* Transit service.
* @module api/TransitApi
* @version 1.2.0
*/
export default class TransitApi {

    /**
    * Constructs a new TransitApi. 
    * @alias module:api/TransitApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the transit operation.
     * @callback module:api/TransitApi~transitCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CountResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Transit between basic residential units
     * Get count of objects that were moving between basic residential units or objects that were visiting these basic residential units. Specific object's occurence type in the base residential unit can be requested. If none occurence type is present in the request or both occurence types are zero, the result will be aggregation of all types of occurence for given base residential units. More about base residential units can be found at https://www.czso.cz/csu/rso/zsj_rso (czech).
     * @param {String} from source basic residential unit
     * @param {String} to destination basic residential unit
     * @param {String} uniques all or only uniques (0 - all, 1 - uniques)
     * @param {Object} opts Optional parameters
     * @param {String} [fromType] occurence type in the source basic residential unit (1 - transit, 2 - visit, 0 - both)
     * @param {String} [toType] occurence type in the destination basic residential unit (1 - transit, 2 - visit, 0 - both)
     * @param {module:api/TransitApi~transitCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CountResult}
     */
    transit(from, to, uniques, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling transit");
      }
      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling transit");
      }
      // verify the required parameter 'uniques' is set
      if (uniques === undefined || uniques === null) {
        throw new Error("Missing the required parameter 'uniques' when calling transit");
      }

      let pathParams = {
        'from': from,
        'to': to
      };
      let queryParams = {
        'fromType': opts['fromType'],
        'toType': opts['toType'],
        'uniques': uniques
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CountResult;
      return this.apiClient.callApi(
        '/transit/{from}/{to}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
