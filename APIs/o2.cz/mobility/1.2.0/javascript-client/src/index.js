/**
 * Mobility API
 * Transit API can be used to obtain time-aggregated data representing moving the people between various spatial points within the Czech Republic. Having A - 'from' and B - 'to' points, the API can return count of people traveling from A to B or people that are from A and traveling to B, etc. The mobility data is based on moving mobile stations in O2 mobile network.
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import CountResult from './model/CountResult';
import ErrorResult from './model/ErrorResult';
import InfoResult from './model/InfoResult';
import InfoApi from './api/InfoApi';
import TransitApi from './api/TransitApi';


/**
* Transit API can be used to obtain time-aggregated data representing moving the people between various spatial points within the Czech Republic. Having A - &#39;from&#39; and B - &#39;to&#39; points, the API can return count of people traveling from A to B or people that are from A and traveling to B, etc. The mobility data is based on moving mobile stations in O2 mobile network..<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var MobilityApi = require('index'); // See note below*.
* var xxxSvc = new MobilityApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new MobilityApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new MobilityApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new MobilityApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 1.2.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The CountResult model constructor.
     * @property {module:model/CountResult}
     */
    CountResult,

    /**
     * The ErrorResult model constructor.
     * @property {module:model/ErrorResult}
     */
    ErrorResult,

    /**
     * The InfoResult model constructor.
     * @property {module:model/InfoResult}
     */
    InfoResult,

    /**
    * The InfoApi service constructor.
    * @property {module:api/InfoApi}
    */
    InfoApi,

    /**
    * The TransitApi service constructor.
    * @property {module:api/TransitApi}
    */
    TransitApi
};
