/**
 * Mobility API
 * Transit API can be used to obtain time-aggregated data representing moving the people between various spatial points within the Czech Republic. Having A - 'from' and B - 'to' points, the API can return count of people traveling from A to B or people that are from A and traveling to B, etc. The mobility data is based on moving mobile stations in O2 mobile network.
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The InfoResult model module.
 * @module model/InfoResult
 * @version 1.2.0
 */
class InfoResult {
    /**
     * Constructs a new <code>InfoResult</code>.
     * Response to the info request
     * @alias module:model/InfoResult
     */
    constructor() { 
        
        InfoResult.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InfoResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InfoResult} obj Optional instance to populate.
     * @return {module:model/InfoResult} The populated <code>InfoResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InfoResult();

            if (data.hasOwnProperty('appName')) {
                obj['appName'] = ApiClient.convertToType(data['appName'], 'String');
            }
            if (data.hasOwnProperty('appVendor')) {
                obj['appVendor'] = ApiClient.convertToType(data['appVendor'], 'String');
            }
            if (data.hasOwnProperty('appVersion')) {
                obj['appVersion'] = ApiClient.convertToType(data['appVersion'], 'String');
            }
            if (data.hasOwnProperty('backendAppName')) {
                obj['backendAppName'] = ApiClient.convertToType(data['backendAppName'], 'String');
            }
            if (data.hasOwnProperty('backendAppVendor')) {
                obj['backendAppVendor'] = ApiClient.convertToType(data['backendAppVendor'], 'String');
            }
            if (data.hasOwnProperty('backendAppVersion')) {
                obj['backendAppVersion'] = ApiClient.convertToType(data['backendAppVersion'], 'String');
            }
            if (data.hasOwnProperty('backendDataFrom')) {
                obj['backendDataFrom'] = ApiClient.convertToType(data['backendDataFrom'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InfoResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InfoResult</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['appName'] && !(typeof data['appName'] === 'string' || data['appName'] instanceof String)) {
            throw new Error("Expected the field `appName` to be a primitive type in the JSON string but got " + data['appName']);
        }
        // ensure the json data is a string
        if (data['appVendor'] && !(typeof data['appVendor'] === 'string' || data['appVendor'] instanceof String)) {
            throw new Error("Expected the field `appVendor` to be a primitive type in the JSON string but got " + data['appVendor']);
        }
        // ensure the json data is a string
        if (data['appVersion'] && !(typeof data['appVersion'] === 'string' || data['appVersion'] instanceof String)) {
            throw new Error("Expected the field `appVersion` to be a primitive type in the JSON string but got " + data['appVersion']);
        }
        // ensure the json data is a string
        if (data['backendAppName'] && !(typeof data['backendAppName'] === 'string' || data['backendAppName'] instanceof String)) {
            throw new Error("Expected the field `backendAppName` to be a primitive type in the JSON string but got " + data['backendAppName']);
        }
        // ensure the json data is a string
        if (data['backendAppVendor'] && !(typeof data['backendAppVendor'] === 'string' || data['backendAppVendor'] instanceof String)) {
            throw new Error("Expected the field `backendAppVendor` to be a primitive type in the JSON string but got " + data['backendAppVendor']);
        }
        // ensure the json data is a string
        if (data['backendAppVersion'] && !(typeof data['backendAppVersion'] === 'string' || data['backendAppVersion'] instanceof String)) {
            throw new Error("Expected the field `backendAppVersion` to be a primitive type in the JSON string but got " + data['backendAppVersion']);
        }
        // ensure the json data is a string
        if (data['backendDataFrom'] && !(typeof data['backendDataFrom'] === 'string' || data['backendDataFrom'] instanceof String)) {
            throw new Error("Expected the field `backendDataFrom` to be a primitive type in the JSON string but got " + data['backendDataFrom']);
        }

        return true;
    }


}



/**
 * Application name
 * @member {String} appName
 */
InfoResult.prototype['appName'] = undefined;

/**
 * Application vendor
 * @member {String} appVendor
 */
InfoResult.prototype['appVendor'] = undefined;

/**
 * Application version
 * @member {String} appVersion
 */
InfoResult.prototype['appVersion'] = undefined;

/**
 * Backend application name
 * @member {String} backendAppName
 */
InfoResult.prototype['backendAppName'] = undefined;

/**
 * Backend application vendor
 * @member {String} backendAppVendor
 */
InfoResult.prototype['backendAppVendor'] = undefined;

/**
 * Backend application version
 * @member {String} backendAppVersion
 */
InfoResult.prototype['backendAppVersion'] = undefined;

/**
 * For which day are data valid
 * @member {String} backendDataFrom
 */
InfoResult.prototype['backendDataFrom'] = undefined;






export default InfoResult;

