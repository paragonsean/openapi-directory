/*
 * OPTIMADE API
 * The [Open Databases Integration for Materials Design (OPTIMADE) consortium](https://www.optimade.org/) aims to make materials databases interoperational by developing a common REST API.  This specification is generated using [`optimade-python-tools`](https://github.com/Materials-Consortia/optimade-python-tools/tree/v0.16.0) v0.16.0.
 *
 * The version of the OpenAPI document: 1.1.0~develop
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Aggregate;
import org.openapitools.client.model.BaseUrl;
import org.openapitools.client.model.Homepage1;
import org.openapitools.client.model.LinkType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Links endpoint resource object attributes
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:45.612268-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LinksResourceAttributes {
  public static final String SERIALIZED_NAME_AGGREGATE = "aggregate";
  @SerializedName(SERIALIZED_NAME_AGGREGATE)
  private Aggregate aggregate = Aggregate.OK;

  public static final String SERIALIZED_NAME_BASE_URL = "base_url";
  @SerializedName(SERIALIZED_NAME_BASE_URL)
  private BaseUrl baseUrl;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_HOMEPAGE = "homepage";
  @SerializedName(SERIALIZED_NAME_HOMEPAGE)
  private Homepage1 homepage;

  public static final String SERIALIZED_NAME_LINK_TYPE = "link_type";
  @SerializedName(SERIALIZED_NAME_LINK_TYPE)
  private LinkType linkType;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NO_AGGREGATE_REASON = "no_aggregate_reason";
  @SerializedName(SERIALIZED_NAME_NO_AGGREGATE_REASON)
  private String noAggregateReason;

  public LinksResourceAttributes() {
  }

  public LinksResourceAttributes aggregate(Aggregate aggregate) {
    this.aggregate = aggregate;
    return this;
  }

  /**
   * A string indicating whether a client that is following links to aggregate results from different OPTIMADE implementations should follow this link or not. This flag SHOULD NOT be indicated for links where &#x60;link_type&#x60; is not &#x60;child&#x60;.  If not specified, clients MAY assume that the value is &#x60;ok&#x60;. If specified, and the value is anything different than &#x60;ok&#x60;, the client MUST assume that the server is suggesting not to follow the link during aggregation by default (also if the value is not among the known ones, in case a future specification adds new accepted values).  Specific values indicate the reason why the server is providing the suggestion. A client MAY follow the link anyway if it has reason to do so (e.g., if the client is looking for all test databases, it MAY follow the links marked with &#x60;aggregate&#x60;&#x3D;&#x60;test&#x60;).  If specified, it MUST be one of the values listed in section Link Aggregate Options.
   * @return aggregate
   */
  @javax.annotation.Nullable
  public Aggregate getAggregate() {
    return aggregate;
  }

  public void setAggregate(Aggregate aggregate) {
    this.aggregate = aggregate;
  }


  public LinksResourceAttributes baseUrl(BaseUrl baseUrl) {
    this.baseUrl = baseUrl;
    return this;
  }

  /**
   * Get baseUrl
   * @return baseUrl
   */
  @javax.annotation.Nonnull
  public BaseUrl getBaseUrl() {
    return baseUrl;
  }

  public void setBaseUrl(BaseUrl baseUrl) {
    this.baseUrl = baseUrl;
  }


  public LinksResourceAttributes description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Human-readable description for the OPTIMADE API implementation, e.g., for use in clients to show a description to the end-user.
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public LinksResourceAttributes homepage(Homepage1 homepage) {
    this.homepage = homepage;
    return this;
  }

  /**
   * Get homepage
   * @return homepage
   */
  @javax.annotation.Nonnull
  public Homepage1 getHomepage() {
    return homepage;
  }

  public void setHomepage(Homepage1 homepage) {
    this.homepage = homepage;
  }


  public LinksResourceAttributes linkType(LinkType linkType) {
    this.linkType = linkType;
    return this;
  }

  /**
   * The type of the linked relation. MUST be one of these values: &#39;child&#39;, &#39;root&#39;, &#39;external&#39;, &#39;providers&#39;.
   * @return linkType
   */
  @javax.annotation.Nonnull
  public LinkType getLinkType() {
    return linkType;
  }

  public void setLinkType(LinkType linkType) {
    this.linkType = linkType;
  }


  public LinksResourceAttributes name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Human-readable name for the OPTIMADE API implementation, e.g., for use in clients to show the name to the end-user.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public LinksResourceAttributes noAggregateReason(String noAggregateReason) {
    this.noAggregateReason = noAggregateReason;
    return this;
  }

  /**
   * An OPTIONAL human-readable string indicating the reason for suggesting not to aggregate results following the link. It SHOULD NOT be present if &#x60;aggregate&#x60;&#x3D;&#x60;ok&#x60;.
   * @return noAggregateReason
   */
  @javax.annotation.Nullable
  public String getNoAggregateReason() {
    return noAggregateReason;
  }

  public void setNoAggregateReason(String noAggregateReason) {
    this.noAggregateReason = noAggregateReason;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LinksResourceAttributes linksResourceAttributes = (LinksResourceAttributes) o;
    return Objects.equals(this.aggregate, linksResourceAttributes.aggregate) &&
        Objects.equals(this.baseUrl, linksResourceAttributes.baseUrl) &&
        Objects.equals(this.description, linksResourceAttributes.description) &&
        Objects.equals(this.homepage, linksResourceAttributes.homepage) &&
        Objects.equals(this.linkType, linksResourceAttributes.linkType) &&
        Objects.equals(this.name, linksResourceAttributes.name) &&
        Objects.equals(this.noAggregateReason, linksResourceAttributes.noAggregateReason);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aggregate, baseUrl, description, homepage, linkType, name, noAggregateReason);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LinksResourceAttributes {\n");
    sb.append("    aggregate: ").append(toIndentedString(aggregate)).append("\n");
    sb.append("    baseUrl: ").append(toIndentedString(baseUrl)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    homepage: ").append(toIndentedString(homepage)).append("\n");
    sb.append("    linkType: ").append(toIndentedString(linkType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    noAggregateReason: ").append(toIndentedString(noAggregateReason)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aggregate");
    openapiFields.add("base_url");
    openapiFields.add("description");
    openapiFields.add("homepage");
    openapiFields.add("link_type");
    openapiFields.add("name");
    openapiFields.add("no_aggregate_reason");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("base_url");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("homepage");
    openapiRequiredFields.add("link_type");
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LinksResourceAttributes
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LinksResourceAttributes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LinksResourceAttributes is not found in the empty JSON string", LinksResourceAttributes.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LinksResourceAttributes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LinksResourceAttributes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LinksResourceAttributes.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `aggregate`
      if (jsonObj.get("aggregate") != null && !jsonObj.get("aggregate").isJsonNull()) {
        Aggregate.validateJsonElement(jsonObj.get("aggregate"));
      }
      // validate the required field `base_url`
      BaseUrl.validateJsonElement(jsonObj.get("base_url"));
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the required field `homepage`
      Homepage1.validateJsonElement(jsonObj.get("homepage"));
      // validate the required field `link_type`
      LinkType.validateJsonElement(jsonObj.get("link_type"));
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("no_aggregate_reason") != null && !jsonObj.get("no_aggregate_reason").isJsonNull()) && !jsonObj.get("no_aggregate_reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `no_aggregate_reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("no_aggregate_reason").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LinksResourceAttributes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LinksResourceAttributes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LinksResourceAttributes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LinksResourceAttributes.class));

       return (TypeAdapter<T>) new TypeAdapter<LinksResourceAttributes>() {
           @Override
           public void write(JsonWriter out, LinksResourceAttributes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LinksResourceAttributes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LinksResourceAttributes given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LinksResourceAttributes
   * @throws IOException if the JSON string is invalid with respect to LinksResourceAttributes
   */
  public static LinksResourceAttributes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LinksResourceAttributes.class);
  }

  /**
   * Convert an instance of LinksResourceAttributes to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

