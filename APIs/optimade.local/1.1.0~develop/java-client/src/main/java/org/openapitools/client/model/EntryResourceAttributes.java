/*
 * OPTIMADE API
 * The [Open Databases Integration for Materials Design (OPTIMADE) consortium](https://www.optimade.org/) aims to make materials databases interoperational by developing a common REST API.  This specification is generated using [`optimade-python-tools`](https://github.com/Materials-Consortia/optimade-python-tools/tree/v0.16.0) v0.16.0.
 *
 * The version of the OpenAPI document: 1.1.0~develop
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains key-value pairs representing the entry&#39;s properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:45.612268-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EntryResourceAttributes {
  public static final String SERIALIZED_NAME_IMMUTABLE_ID = "immutable_id";
  @SerializedName(SERIALIZED_NAME_IMMUTABLE_ID)
  private String immutableId;

  public static final String SERIALIZED_NAME_LAST_MODIFIED = "last_modified";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED)
  private OffsetDateTime lastModified;

  public EntryResourceAttributes() {
  }

  public EntryResourceAttributes immutableId(String immutableId) {
    this.immutableId = immutableId;
    return this;
  }

  /**
   * The entry&#39;s immutable ID (e.g., an UUID). This is important for databases having preferred IDs that point to \&quot;the latest version\&quot; of a record, but still offer access to older variants. This ID maps to the version-specific record, in case it changes in the future.  - **Type**: string.  - **Requirements/Conventions**:     - **Support**: OPTIONAL support in implementations, i.e., MAY be &#x60;null&#x60;.     - **Query**: MUST be a queryable property with support for all mandatory filter features.  - **Examples**:     - &#x60;\&quot;8bd3e750-b477-41a0-9b11-3a799f21b44f\&quot;&#x60;     - &#x60;\&quot;fjeiwoj,54;@&#x3D;%&lt;&gt;#32\&quot;&#x60; (Strings that are not URL-safe are allowed.)
   * @return immutableId
   */
  @javax.annotation.Nullable
  public String getImmutableId() {
    return immutableId;
  }

  public void setImmutableId(String immutableId) {
    this.immutableId = immutableId;
  }


  public EntryResourceAttributes lastModified(OffsetDateTime lastModified) {
    this.lastModified = lastModified;
    return this;
  }

  /**
   * Date and time representing when the entry was last modified.  - **Type**: timestamp.  - **Requirements/Conventions**:     - **Support**: SHOULD be supported by all implementations, i.e., SHOULD NOT be &#x60;null&#x60;.     - **Query**: MUST be a queryable property with support for all mandatory filter features.     - **Response**: REQUIRED in the response unless the query parameter &#x60;response_fields&#x60; is present and does not include this property.  - **Example**:     - As part of JSON response format: &#x60;\&quot;2007-04-05T14:30:20Z\&quot;&#x60; (i.e., encoded as an [RFC 3339 Internet Date/Time Format](https://tools.ietf.org/html/rfc3339#section-5.6) string.)
   * @return lastModified
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getLastModified() {
    return lastModified;
  }

  public void setLastModified(OffsetDateTime lastModified) {
    this.lastModified = lastModified;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EntryResourceAttributes entryResourceAttributes = (EntryResourceAttributes) o;
    return Objects.equals(this.immutableId, entryResourceAttributes.immutableId) &&
        Objects.equals(this.lastModified, entryResourceAttributes.lastModified);
  }

  @Override
  public int hashCode() {
    return Objects.hash(immutableId, lastModified);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EntryResourceAttributes {\n");
    sb.append("    immutableId: ").append(toIndentedString(immutableId)).append("\n");
    sb.append("    lastModified: ").append(toIndentedString(lastModified)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("immutable_id");
    openapiFields.add("last_modified");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("last_modified");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EntryResourceAttributes
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EntryResourceAttributes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EntryResourceAttributes is not found in the empty JSON string", EntryResourceAttributes.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EntryResourceAttributes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EntryResourceAttributes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EntryResourceAttributes.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("immutable_id") != null && !jsonObj.get("immutable_id").isJsonNull()) && !jsonObj.get("immutable_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `immutable_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("immutable_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EntryResourceAttributes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EntryResourceAttributes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EntryResourceAttributes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EntryResourceAttributes.class));

       return (TypeAdapter<T>) new TypeAdapter<EntryResourceAttributes>() {
           @Override
           public void write(JsonWriter out, EntryResourceAttributes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EntryResourceAttributes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EntryResourceAttributes given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EntryResourceAttributes
   * @throws IOException if the JSON string is invalid with respect to EntryResourceAttributes
   */
  public static EntryResourceAttributes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EntryResourceAttributes.class);
  }

  /**
   * Convert an instance of EntryResourceAttributes to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

