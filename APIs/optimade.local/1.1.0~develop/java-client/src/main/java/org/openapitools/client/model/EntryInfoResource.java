/*
 * OPTIMADE API
 * The [Open Databases Integration for Materials Design (OPTIMADE) consortium](https://www.optimade.org/) aims to make materials databases interoperational by developing a common REST API.  This specification is generated using [`optimade-python-tools`](https://github.com/Materials-Consortia/optimade-python-tools/tree/v0.16.0) v0.16.0.
 *
 * The version of the OpenAPI document: 1.1.0~develop
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.EntryInfoProperty;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EntryInfoResource
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:45.612268-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EntryInfoResource {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_FORMATS = "formats";
  @SerializedName(SERIALIZED_NAME_FORMATS)
  private List<String> formats = new ArrayList<>();

  public static final String SERIALIZED_NAME_OUTPUT_FIELDS_BY_FORMAT = "output_fields_by_format";
  @SerializedName(SERIALIZED_NAME_OUTPUT_FIELDS_BY_FORMAT)
  private Map<String, List<String>> outputFieldsByFormat = new HashMap<>();

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private Map<String, EntryInfoProperty> properties = new HashMap<>();

  public EntryInfoResource() {
  }

  public EntryInfoResource description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the entry.
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public EntryInfoResource formats(List<String> formats) {
    this.formats = formats;
    return this;
  }

  public EntryInfoResource addFormatsItem(String formatsItem) {
    if (this.formats == null) {
      this.formats = new ArrayList<>();
    }
    this.formats.add(formatsItem);
    return this;
  }

  /**
   * List of output formats available for this type of entry.
   * @return formats
   */
  @javax.annotation.Nonnull
  public List<String> getFormats() {
    return formats;
  }

  public void setFormats(List<String> formats) {
    this.formats = formats;
  }


  public EntryInfoResource outputFieldsByFormat(Map<String, List<String>> outputFieldsByFormat) {
    this.outputFieldsByFormat = outputFieldsByFormat;
    return this;
  }

  public EntryInfoResource putOutputFieldsByFormatItem(String key, List<String> outputFieldsByFormatItem) {
    if (this.outputFieldsByFormat == null) {
      this.outputFieldsByFormat = new HashMap<>();
    }
    this.outputFieldsByFormat.put(key, outputFieldsByFormatItem);
    return this;
  }

  /**
   * Dictionary of available output fields for this entry type, where the keys are the values of the &#x60;formats&#x60; list and the values are the keys of the &#x60;properties&#x60; dictionary.
   * @return outputFieldsByFormat
   */
  @javax.annotation.Nonnull
  public Map<String, List<String>> getOutputFieldsByFormat() {
    return outputFieldsByFormat;
  }

  public void setOutputFieldsByFormat(Map<String, List<String>> outputFieldsByFormat) {
    this.outputFieldsByFormat = outputFieldsByFormat;
  }


  public EntryInfoResource properties(Map<String, EntryInfoProperty> properties) {
    this.properties = properties;
    return this;
  }

  public EntryInfoResource putPropertiesItem(String key, EntryInfoProperty propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

  /**
   * A dictionary describing queryable properties for this entry type, where each key is a property name.
   * @return properties
   */
  @javax.annotation.Nonnull
  public Map<String, EntryInfoProperty> getProperties() {
    return properties;
  }

  public void setProperties(Map<String, EntryInfoProperty> properties) {
    this.properties = properties;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EntryInfoResource entryInfoResource = (EntryInfoResource) o;
    return Objects.equals(this.description, entryInfoResource.description) &&
        Objects.equals(this.formats, entryInfoResource.formats) &&
        Objects.equals(this.outputFieldsByFormat, entryInfoResource.outputFieldsByFormat) &&
        Objects.equals(this.properties, entryInfoResource.properties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, formats, outputFieldsByFormat, properties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EntryInfoResource {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    formats: ").append(toIndentedString(formats)).append("\n");
    sb.append("    outputFieldsByFormat: ").append(toIndentedString(outputFieldsByFormat)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("formats");
    openapiFields.add("output_fields_by_format");
    openapiFields.add("properties");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("formats");
    openapiRequiredFields.add("output_fields_by_format");
    openapiRequiredFields.add("properties");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EntryInfoResource
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EntryInfoResource.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EntryInfoResource is not found in the empty JSON string", EntryInfoResource.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EntryInfoResource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EntryInfoResource` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EntryInfoResource.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("formats") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("formats").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `formats` to be an array in the JSON string but got `%s`", jsonObj.get("formats").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EntryInfoResource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EntryInfoResource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EntryInfoResource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EntryInfoResource.class));

       return (TypeAdapter<T>) new TypeAdapter<EntryInfoResource>() {
           @Override
           public void write(JsonWriter out, EntryInfoResource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EntryInfoResource read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EntryInfoResource given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EntryInfoResource
   * @throws IOException if the JSON string is invalid with respect to EntryInfoResource
   */
  public static EntryInfoResource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EntryInfoResource.class);
  }

  /**
   * Convert an instance of EntryInfoResource to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

