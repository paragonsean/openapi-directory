/*
 * OPTIMADE API
 * The [Open Databases Integration for Materials Design (OPTIMADE) consortium](https://www.optimade.org/) aims to make materials databases interoperational by developing a common REST API.  This specification is generated using [`optimade-python-tools`](https://github.com/Materials-Consortia/optimade-python-tools/tree/v0.16.0) v0.16.0.
 *
 * The version of the OpenAPI document: 1.1.0~develop
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A description of groups of sites that are statistically correlated.  - **Examples** (for each entry of the assemblies list):     - &#x60;{\&quot;sites_in_groups\&quot;: [[0], [1]], \&quot;group_probabilities: [0.3, 0.7]}&#x60;: the first site and the second site never occur at the same time in the unit cell.       Statistically, 30 % of the times the first site is present, while 70 % of the times the second site is present.     - &#x60;{\&quot;sites_in_groups\&quot;: [[1,2], [3]], \&quot;group_probabilities: [0.3, 0.7]}&#x60;: the second and third site are either present together or not present; they form the first group of atoms for this assembly.       The second group is formed by the fourth site. Sites of the first group (the second and the third) are never present at the same time as the fourth site.       30 % of times sites 1 and 2 are present (and site 3 is absent); 70 % of times site 3 is present (and sites 1 and 2 are absent).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:45.612268-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Assembly {
  public static final String SERIALIZED_NAME_GROUP_PROBABILITIES = "group_probabilities";
  @SerializedName(SERIALIZED_NAME_GROUP_PROBABILITIES)
  private List<BigDecimal> groupProbabilities = new ArrayList<>();

  public static final String SERIALIZED_NAME_SITES_IN_GROUPS = "sites_in_groups";
  @SerializedName(SERIALIZED_NAME_SITES_IN_GROUPS)
  private List<List<Integer>> sitesInGroups = new ArrayList<>();

  public Assembly() {
  }

  public Assembly groupProbabilities(List<BigDecimal> groupProbabilities) {
    this.groupProbabilities = groupProbabilities;
    return this;
  }

  public Assembly addGroupProbabilitiesItem(BigDecimal groupProbabilitiesItem) {
    if (this.groupProbabilities == null) {
      this.groupProbabilities = new ArrayList<>();
    }
    this.groupProbabilities.add(groupProbabilitiesItem);
    return this;
  }

  /**
   * Statistical probability of each group. It MUST have the same length as &#x60;sites_in_groups&#x60;. It SHOULD sum to one. See below for examples of how to specify the probability of the occurrence of a vacancy. The possible reasons for the values not to sum to one are the same as already specified above for the &#x60;concentration&#x60; of each &#x60;species&#x60;.
   * @return groupProbabilities
   */
  @javax.annotation.Nonnull
  public List<BigDecimal> getGroupProbabilities() {
    return groupProbabilities;
  }

  public void setGroupProbabilities(List<BigDecimal> groupProbabilities) {
    this.groupProbabilities = groupProbabilities;
  }


  public Assembly sitesInGroups(List<List<Integer>> sitesInGroups) {
    this.sitesInGroups = sitesInGroups;
    return this;
  }

  public Assembly addSitesInGroupsItem(List<Integer> sitesInGroupsItem) {
    if (this.sitesInGroups == null) {
      this.sitesInGroups = new ArrayList<>();
    }
    this.sitesInGroups.add(sitesInGroupsItem);
    return this;
  }

  /**
   * Index of the sites (0-based) that belong to each group for each assembly.  - **Examples**:     - &#x60;[[1], [2]]&#x60;: two groups, one with the second site, one with the third.     - &#x60;[[1,2], [3]]&#x60;: one group with the second and third site, one with the fourth.
   * @return sitesInGroups
   */
  @javax.annotation.Nonnull
  public List<List<Integer>> getSitesInGroups() {
    return sitesInGroups;
  }

  public void setSitesInGroups(List<List<Integer>> sitesInGroups) {
    this.sitesInGroups = sitesInGroups;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Assembly assembly = (Assembly) o;
    return Objects.equals(this.groupProbabilities, assembly.groupProbabilities) &&
        Objects.equals(this.sitesInGroups, assembly.sitesInGroups);
  }

  @Override
  public int hashCode() {
    return Objects.hash(groupProbabilities, sitesInGroups);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Assembly {\n");
    sb.append("    groupProbabilities: ").append(toIndentedString(groupProbabilities)).append("\n");
    sb.append("    sitesInGroups: ").append(toIndentedString(sitesInGroups)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("group_probabilities");
    openapiFields.add("sites_in_groups");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("group_probabilities");
    openapiRequiredFields.add("sites_in_groups");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Assembly
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Assembly.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Assembly is not found in the empty JSON string", Assembly.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Assembly.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Assembly` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Assembly.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("group_probabilities") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("group_probabilities").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `group_probabilities` to be an array in the JSON string but got `%s`", jsonObj.get("group_probabilities").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("sites_in_groups") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("sites_in_groups").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sites_in_groups` to be an array in the JSON string but got `%s`", jsonObj.get("sites_in_groups").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Assembly.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Assembly' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Assembly> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Assembly.class));

       return (TypeAdapter<T>) new TypeAdapter<Assembly>() {
           @Override
           public void write(JsonWriter out, Assembly value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Assembly read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Assembly given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Assembly
   * @throws IOException if the JSON string is invalid with respect to Assembly
   */
  public static Assembly fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Assembly.class);
  }

  /**
   * Convert an instance of Assembly to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

