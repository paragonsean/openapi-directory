/*
 * OPTIMADE API
 * The [Open Databases Integration for Materials Design (OPTIMADE) consortium](https://www.optimade.org/) aims to make materials databases interoperational by developing a common REST API.  This specification is generated using [`optimade-python-tools`](https://github.com/Materials-Consortia/optimade-python-tools/tree/v0.16.0) v0.16.0.
 *
 * The version of the OpenAPI document: 1.1.0~develop
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.AvailableApiVersion;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Attributes for Base URL Info endpoint
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:45.612268-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BaseInfoAttributes {
  public static final String SERIALIZED_NAME_API_VERSION = "api_version";
  @SerializedName(SERIALIZED_NAME_API_VERSION)
  private String apiVersion;

  public static final String SERIALIZED_NAME_AVAILABLE_API_VERSIONS = "available_api_versions";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_API_VERSIONS)
  private List<AvailableApiVersion> availableApiVersions = new ArrayList<>();

  public static final String SERIALIZED_NAME_AVAILABLE_ENDPOINTS = "available_endpoints";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_ENDPOINTS)
  private List<String> availableEndpoints = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENTRY_TYPES_BY_FORMAT = "entry_types_by_format";
  @SerializedName(SERIALIZED_NAME_ENTRY_TYPES_BY_FORMAT)
  private Map<String, List<String>> entryTypesByFormat = new HashMap<>();

  public static final String SERIALIZED_NAME_FORMATS = "formats";
  @SerializedName(SERIALIZED_NAME_FORMATS)
  private List<String> formats = new ArrayList<>(Arrays.asList("json"));

  public static final String SERIALIZED_NAME_IS_INDEX = "is_index";
  @SerializedName(SERIALIZED_NAME_IS_INDEX)
  private Boolean isIndex = false;

  public BaseInfoAttributes() {
  }

  public BaseInfoAttributes apiVersion(String apiVersion) {
    this.apiVersion = apiVersion;
    return this;
  }

  /**
   * Presently used full version of the OPTIMADE API. The version number string MUST NOT be prefixed by, e.g., \&quot;v\&quot;. Examples: &#x60;1.0.0&#x60;, &#x60;1.0.0-rc.2&#x60;.
   * @return apiVersion
   */
  @javax.annotation.Nonnull
  public String getApiVersion() {
    return apiVersion;
  }

  public void setApiVersion(String apiVersion) {
    this.apiVersion = apiVersion;
  }


  public BaseInfoAttributes availableApiVersions(List<AvailableApiVersion> availableApiVersions) {
    this.availableApiVersions = availableApiVersions;
    return this;
  }

  public BaseInfoAttributes addAvailableApiVersionsItem(AvailableApiVersion availableApiVersionsItem) {
    if (this.availableApiVersions == null) {
      this.availableApiVersions = new ArrayList<>();
    }
    this.availableApiVersions.add(availableApiVersionsItem);
    return this;
  }

  /**
   * A list of dictionaries of available API versions at other base URLs
   * @return availableApiVersions
   */
  @javax.annotation.Nonnull
  public List<AvailableApiVersion> getAvailableApiVersions() {
    return availableApiVersions;
  }

  public void setAvailableApiVersions(List<AvailableApiVersion> availableApiVersions) {
    this.availableApiVersions = availableApiVersions;
  }


  public BaseInfoAttributes availableEndpoints(List<String> availableEndpoints) {
    this.availableEndpoints = availableEndpoints;
    return this;
  }

  public BaseInfoAttributes addAvailableEndpointsItem(String availableEndpointsItem) {
    if (this.availableEndpoints == null) {
      this.availableEndpoints = new ArrayList<>();
    }
    this.availableEndpoints.add(availableEndpointsItem);
    return this;
  }

  /**
   * List of available endpoints (i.e., the string to be appended to the versioned base URL).
   * @return availableEndpoints
   */
  @javax.annotation.Nonnull
  public List<String> getAvailableEndpoints() {
    return availableEndpoints;
  }

  public void setAvailableEndpoints(List<String> availableEndpoints) {
    this.availableEndpoints = availableEndpoints;
  }


  public BaseInfoAttributes entryTypesByFormat(Map<String, List<String>> entryTypesByFormat) {
    this.entryTypesByFormat = entryTypesByFormat;
    return this;
  }

  public BaseInfoAttributes putEntryTypesByFormatItem(String key, List<String> entryTypesByFormatItem) {
    if (this.entryTypesByFormat == null) {
      this.entryTypesByFormat = new HashMap<>();
    }
    this.entryTypesByFormat.put(key, entryTypesByFormatItem);
    return this;
  }

  /**
   * Available entry endpoints as a function of output formats.
   * @return entryTypesByFormat
   */
  @javax.annotation.Nonnull
  public Map<String, List<String>> getEntryTypesByFormat() {
    return entryTypesByFormat;
  }

  public void setEntryTypesByFormat(Map<String, List<String>> entryTypesByFormat) {
    this.entryTypesByFormat = entryTypesByFormat;
  }


  public BaseInfoAttributes formats(List<String> formats) {
    this.formats = formats;
    return this;
  }

  public BaseInfoAttributes addFormatsItem(String formatsItem) {
    if (this.formats == null) {
      this.formats = new ArrayList<>(Arrays.asList("json"));
    }
    this.formats.add(formatsItem);
    return this;
  }

  /**
   * List of available output formats.
   * @return formats
   */
  @javax.annotation.Nullable
  public List<String> getFormats() {
    return formats;
  }

  public void setFormats(List<String> formats) {
    this.formats = formats;
  }


  public BaseInfoAttributes isIndex(Boolean isIndex) {
    this.isIndex = isIndex;
    return this;
  }

  /**
   * If true, this is an index meta-database base URL (see section Index Meta-Database). If this member is not provided, the client MUST assume this is not an index meta-database base URL (i.e., the default is for &#x60;is_index&#x60; to be &#x60;false&#x60;).
   * @return isIndex
   */
  @javax.annotation.Nullable
  public Boolean getIsIndex() {
    return isIndex;
  }

  public void setIsIndex(Boolean isIndex) {
    this.isIndex = isIndex;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BaseInfoAttributes baseInfoAttributes = (BaseInfoAttributes) o;
    return Objects.equals(this.apiVersion, baseInfoAttributes.apiVersion) &&
        Objects.equals(this.availableApiVersions, baseInfoAttributes.availableApiVersions) &&
        Objects.equals(this.availableEndpoints, baseInfoAttributes.availableEndpoints) &&
        Objects.equals(this.entryTypesByFormat, baseInfoAttributes.entryTypesByFormat) &&
        Objects.equals(this.formats, baseInfoAttributes.formats) &&
        Objects.equals(this.isIndex, baseInfoAttributes.isIndex);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apiVersion, availableApiVersions, availableEndpoints, entryTypesByFormat, formats, isIndex);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BaseInfoAttributes {\n");
    sb.append("    apiVersion: ").append(toIndentedString(apiVersion)).append("\n");
    sb.append("    availableApiVersions: ").append(toIndentedString(availableApiVersions)).append("\n");
    sb.append("    availableEndpoints: ").append(toIndentedString(availableEndpoints)).append("\n");
    sb.append("    entryTypesByFormat: ").append(toIndentedString(entryTypesByFormat)).append("\n");
    sb.append("    formats: ").append(toIndentedString(formats)).append("\n");
    sb.append("    isIndex: ").append(toIndentedString(isIndex)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("api_version");
    openapiFields.add("available_api_versions");
    openapiFields.add("available_endpoints");
    openapiFields.add("entry_types_by_format");
    openapiFields.add("formats");
    openapiFields.add("is_index");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("api_version");
    openapiRequiredFields.add("available_api_versions");
    openapiRequiredFields.add("available_endpoints");
    openapiRequiredFields.add("entry_types_by_format");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BaseInfoAttributes
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BaseInfoAttributes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BaseInfoAttributes is not found in the empty JSON string", BaseInfoAttributes.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BaseInfoAttributes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BaseInfoAttributes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BaseInfoAttributes.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("api_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `api_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("api_version").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("available_api_versions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `available_api_versions` to be an array in the JSON string but got `%s`", jsonObj.get("available_api_versions").toString()));
      }

      JsonArray jsonArrayavailableApiVersions = jsonObj.getAsJsonArray("available_api_versions");
      // validate the required field `available_api_versions` (array)
      for (int i = 0; i < jsonArrayavailableApiVersions.size(); i++) {
        AvailableApiVersion.validateJsonElement(jsonArrayavailableApiVersions.get(i));
      };
      // ensure the required json array is present
      if (jsonObj.get("available_endpoints") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("available_endpoints").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `available_endpoints` to be an array in the JSON string but got `%s`", jsonObj.get("available_endpoints").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("formats") != null && !jsonObj.get("formats").isJsonNull() && !jsonObj.get("formats").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `formats` to be an array in the JSON string but got `%s`", jsonObj.get("formats").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BaseInfoAttributes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BaseInfoAttributes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BaseInfoAttributes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BaseInfoAttributes.class));

       return (TypeAdapter<T>) new TypeAdapter<BaseInfoAttributes>() {
           @Override
           public void write(JsonWriter out, BaseInfoAttributes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BaseInfoAttributes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BaseInfoAttributes given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BaseInfoAttributes
   * @throws IOException if the JSON string is invalid with respect to BaseInfoAttributes
   */
  public static BaseInfoAttributes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BaseInfoAttributes.class);
  }

  /**
   * Convert an instance of BaseInfoAttributes to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

