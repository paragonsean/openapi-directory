/*
 * OPTIMADE API
 * The [Open Databases Integration for Materials Design (OPTIMADE) consortium](https://www.optimade.org/) aims to make materials databases interoperational by developing a common REST API.  This specification is generated using [`optimade-python-tools`](https://github.com/Materials-Consortia/optimade-python-tools/tree/v0.16.0) v0.16.0.
 *
 * The version of the OpenAPI document: 1.1.0~develop
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Set;
import org.openapitools.client.model.Implementation;
import org.openapitools.client.model.Provider;
import org.openapitools.client.model.ResponseMetaQuery;
import org.openapitools.client.model.Warnings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A [JSON API meta member](https://jsonapi.org/format/1.0#document-meta) that contains JSON API meta objects of non-standard meta-information.  OPTIONAL additional information global to the query that is not specified in this document, MUST start with a database-provider-specific prefix.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:45.612268-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ResponseMeta {
  public static final String SERIALIZED_NAME_API_VERSION = "api_version";
  @SerializedName(SERIALIZED_NAME_API_VERSION)
  private String apiVersion;

  public static final String SERIALIZED_NAME_DATA_AVAILABLE = "data_available";
  @SerializedName(SERIALIZED_NAME_DATA_AVAILABLE)
  private Integer dataAvailable;

  public static final String SERIALIZED_NAME_DATA_RETURNED = "data_returned";
  @SerializedName(SERIALIZED_NAME_DATA_RETURNED)
  private Integer dataReturned;

  public static final String SERIALIZED_NAME_IMPLEMENTATION = "implementation";
  @SerializedName(SERIALIZED_NAME_IMPLEMENTATION)
  private Implementation implementation;

  public static final String SERIALIZED_NAME_LAST_ID = "last_id";
  @SerializedName(SERIALIZED_NAME_LAST_ID)
  private String lastId;

  public static final String SERIALIZED_NAME_MORE_DATA_AVAILABLE = "more_data_available";
  @SerializedName(SERIALIZED_NAME_MORE_DATA_AVAILABLE)
  private Boolean moreDataAvailable;

  public static final String SERIALIZED_NAME_PROVIDER = "provider";
  @SerializedName(SERIALIZED_NAME_PROVIDER)
  private Provider provider;

  public static final String SERIALIZED_NAME_QUERY = "query";
  @SerializedName(SERIALIZED_NAME_QUERY)
  private ResponseMetaQuery query;

  public static final String SERIALIZED_NAME_RESPONSE_MESSAGE = "response_message";
  @SerializedName(SERIALIZED_NAME_RESPONSE_MESSAGE)
  private String responseMessage;

  public static final String SERIALIZED_NAME_SCHEMA = "schema";
  @SerializedName(SERIALIZED_NAME_SCHEMA)
  private Schema schema;

  public static final String SERIALIZED_NAME_TIME_STAMP = "time_stamp";
  @SerializedName(SERIALIZED_NAME_TIME_STAMP)
  private OffsetDateTime timeStamp;

  public static final String SERIALIZED_NAME_WARNINGS = "warnings";
  @SerializedName(SERIALIZED_NAME_WARNINGS)
  private Set<Warnings> warnings = new LinkedHashSet<>();

  public ResponseMeta() {
  }

  public ResponseMeta apiVersion(String apiVersion) {
    this.apiVersion = apiVersion;
    return this;
  }

  /**
   * Presently used full version of the OPTIMADE API. The version number string MUST NOT be prefixed by, e.g., \&quot;v\&quot;. Examples: &#x60;1.0.0&#x60;, &#x60;1.0.0-rc.2&#x60;.
   * @return apiVersion
   */
  @javax.annotation.Nonnull
  public String getApiVersion() {
    return apiVersion;
  }

  public void setApiVersion(String apiVersion) {
    this.apiVersion = apiVersion;
  }


  public ResponseMeta dataAvailable(Integer dataAvailable) {
    this.dataAvailable = dataAvailable;
    return this;
  }

  /**
   * An integer containing the total number of data resource objects available in the database for the endpoint.
   * @return dataAvailable
   */
  @javax.annotation.Nullable
  public Integer getDataAvailable() {
    return dataAvailable;
  }

  public void setDataAvailable(Integer dataAvailable) {
    this.dataAvailable = dataAvailable;
  }


  public ResponseMeta dataReturned(Integer dataReturned) {
    this.dataReturned = dataReturned;
    return this;
  }

  /**
   * An integer containing the total number of data resource objects returned for the current &#x60;filter&#x60; query, independent of pagination.
   * minimum: 0
   * @return dataReturned
   */
  @javax.annotation.Nullable
  public Integer getDataReturned() {
    return dataReturned;
  }

  public void setDataReturned(Integer dataReturned) {
    this.dataReturned = dataReturned;
  }


  public ResponseMeta implementation(Implementation implementation) {
    this.implementation = implementation;
    return this;
  }

  /**
   * a dictionary describing the server implementation
   * @return implementation
   */
  @javax.annotation.Nullable
  public Implementation getImplementation() {
    return implementation;
  }

  public void setImplementation(Implementation implementation) {
    this.implementation = implementation;
  }


  public ResponseMeta lastId(String lastId) {
    this.lastId = lastId;
    return this;
  }

  /**
   * a string containing the last ID returned
   * @return lastId
   */
  @javax.annotation.Nullable
  public String getLastId() {
    return lastId;
  }

  public void setLastId(String lastId) {
    this.lastId = lastId;
  }


  public ResponseMeta moreDataAvailable(Boolean moreDataAvailable) {
    this.moreDataAvailable = moreDataAvailable;
    return this;
  }

  /**
   * &#x60;false&#x60; if the response contains all data for the request (e.g., a request issued to a single entry endpoint, or a &#x60;filter&#x60; query at the last page of a paginated response) and &#x60;true&#x60; if the response is incomplete in the sense that multiple objects match the request, and not all of them have been included in the response (e.g., a query with multiple pages that is not at the last page).
   * @return moreDataAvailable
   */
  @javax.annotation.Nonnull
  public Boolean getMoreDataAvailable() {
    return moreDataAvailable;
  }

  public void setMoreDataAvailable(Boolean moreDataAvailable) {
    this.moreDataAvailable = moreDataAvailable;
  }


  public ResponseMeta provider(Provider provider) {
    this.provider = provider;
    return this;
  }

  /**
   * information on the database provider of the implementation.
   * @return provider
   */
  @javax.annotation.Nullable
  public Provider getProvider() {
    return provider;
  }

  public void setProvider(Provider provider) {
    this.provider = provider;
  }


  public ResponseMeta query(ResponseMetaQuery query) {
    this.query = query;
    return this;
  }

  /**
   * Information on the Query that was requested
   * @return query
   */
  @javax.annotation.Nonnull
  public ResponseMetaQuery getQuery() {
    return query;
  }

  public void setQuery(ResponseMetaQuery query) {
    this.query = query;
  }


  public ResponseMeta responseMessage(String responseMessage) {
    this.responseMessage = responseMessage;
    return this;
  }

  /**
   * response string from the server
   * @return responseMessage
   */
  @javax.annotation.Nullable
  public String getResponseMessage() {
    return responseMessage;
  }

  public void setResponseMessage(String responseMessage) {
    this.responseMessage = responseMessage;
  }


  public ResponseMeta schema(Schema schema) {
    this.schema = schema;
    return this;
  }

  /**
   * Get schema
   * @return schema
   */
  @javax.annotation.Nullable
  public Schema getSchema() {
    return schema;
  }

  public void setSchema(Schema schema) {
    this.schema = schema;
  }


  public ResponseMeta timeStamp(OffsetDateTime timeStamp) {
    this.timeStamp = timeStamp;
    return this;
  }

  /**
   * A timestamp containing the date and time at which the query was executed.
   * @return timeStamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimeStamp() {
    return timeStamp;
  }

  public void setTimeStamp(OffsetDateTime timeStamp) {
    this.timeStamp = timeStamp;
  }


  public ResponseMeta warnings(Set<Warnings> warnings) {
    this.warnings = warnings;
    return this;
  }

  public ResponseMeta addWarningsItem(Warnings warningsItem) {
    if (this.warnings == null) {
      this.warnings = new LinkedHashSet<>();
    }
    this.warnings.add(warningsItem);
    return this;
  }

  /**
   * A list of warning resource objects representing non-critical errors or warnings. A warning resource object is defined similarly to a [JSON API error object](http://jsonapi.org/format/1.0/#error-objects), but MUST also include the field &#x60;type&#x60;, which MUST have the value &#x60;\&quot;warning\&quot;&#x60;. The field &#x60;detail&#x60; MUST be present and SHOULD contain a non-critical message, e.g., reporting unrecognized search attributes or deprecated features. The field &#x60;status&#x60;, representing a HTTP response status code, MUST NOT be present for a warning resource object. This is an exclusive field for error resource objects.
   * @return warnings
   */
  @javax.annotation.Nullable
  public Set<Warnings> getWarnings() {
    return warnings;
  }

  public void setWarnings(Set<Warnings> warnings) {
    this.warnings = warnings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResponseMeta responseMeta = (ResponseMeta) o;
    return Objects.equals(this.apiVersion, responseMeta.apiVersion) &&
        Objects.equals(this.dataAvailable, responseMeta.dataAvailable) &&
        Objects.equals(this.dataReturned, responseMeta.dataReturned) &&
        Objects.equals(this.implementation, responseMeta.implementation) &&
        Objects.equals(this.lastId, responseMeta.lastId) &&
        Objects.equals(this.moreDataAvailable, responseMeta.moreDataAvailable) &&
        Objects.equals(this.provider, responseMeta.provider) &&
        Objects.equals(this.query, responseMeta.query) &&
        Objects.equals(this.responseMessage, responseMeta.responseMessage) &&
        Objects.equals(this.schema, responseMeta.schema) &&
        Objects.equals(this.timeStamp, responseMeta.timeStamp) &&
        Objects.equals(this.warnings, responseMeta.warnings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apiVersion, dataAvailable, dataReturned, implementation, lastId, moreDataAvailable, provider, query, responseMessage, schema, timeStamp, warnings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResponseMeta {\n");
    sb.append("    apiVersion: ").append(toIndentedString(apiVersion)).append("\n");
    sb.append("    dataAvailable: ").append(toIndentedString(dataAvailable)).append("\n");
    sb.append("    dataReturned: ").append(toIndentedString(dataReturned)).append("\n");
    sb.append("    implementation: ").append(toIndentedString(implementation)).append("\n");
    sb.append("    lastId: ").append(toIndentedString(lastId)).append("\n");
    sb.append("    moreDataAvailable: ").append(toIndentedString(moreDataAvailable)).append("\n");
    sb.append("    provider: ").append(toIndentedString(provider)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    responseMessage: ").append(toIndentedString(responseMessage)).append("\n");
    sb.append("    schema: ").append(toIndentedString(schema)).append("\n");
    sb.append("    timeStamp: ").append(toIndentedString(timeStamp)).append("\n");
    sb.append("    warnings: ").append(toIndentedString(warnings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("api_version");
    openapiFields.add("data_available");
    openapiFields.add("data_returned");
    openapiFields.add("implementation");
    openapiFields.add("last_id");
    openapiFields.add("more_data_available");
    openapiFields.add("provider");
    openapiFields.add("query");
    openapiFields.add("response_message");
    openapiFields.add("schema");
    openapiFields.add("time_stamp");
    openapiFields.add("warnings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("api_version");
    openapiRequiredFields.add("more_data_available");
    openapiRequiredFields.add("query");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ResponseMeta
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ResponseMeta.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ResponseMeta is not found in the empty JSON string", ResponseMeta.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ResponseMeta.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ResponseMeta` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ResponseMeta.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("api_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `api_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("api_version").toString()));
      }
      // validate the optional field `implementation`
      if (jsonObj.get("implementation") != null && !jsonObj.get("implementation").isJsonNull()) {
        Implementation.validateJsonElement(jsonObj.get("implementation"));
      }
      if ((jsonObj.get("last_id") != null && !jsonObj.get("last_id").isJsonNull()) && !jsonObj.get("last_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_id").toString()));
      }
      // validate the optional field `provider`
      if (jsonObj.get("provider") != null && !jsonObj.get("provider").isJsonNull()) {
        Provider.validateJsonElement(jsonObj.get("provider"));
      }
      // validate the required field `query`
      ResponseMetaQuery.validateJsonElement(jsonObj.get("query"));
      if ((jsonObj.get("response_message") != null && !jsonObj.get("response_message").isJsonNull()) && !jsonObj.get("response_message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `response_message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("response_message").toString()));
      }
      // validate the optional field `schema`
      if (jsonObj.get("schema") != null && !jsonObj.get("schema").isJsonNull()) {
        Schema.validateJsonElement(jsonObj.get("schema"));
      }
      if (jsonObj.get("warnings") != null && !jsonObj.get("warnings").isJsonNull()) {
        JsonArray jsonArraywarnings = jsonObj.getAsJsonArray("warnings");
        if (jsonArraywarnings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("warnings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `warnings` to be an array in the JSON string but got `%s`", jsonObj.get("warnings").toString()));
          }

          // validate the optional field `warnings` (array)
          for (int i = 0; i < jsonArraywarnings.size(); i++) {
            Warnings.validateJsonElement(jsonArraywarnings.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ResponseMeta.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ResponseMeta' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ResponseMeta> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ResponseMeta.class));

       return (TypeAdapter<T>) new TypeAdapter<ResponseMeta>() {
           @Override
           public void write(JsonWriter out, ResponseMeta value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ResponseMeta read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ResponseMeta given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ResponseMeta
   * @throws IOException if the JSON string is invalid with respect to ResponseMeta
   */
  public static ResponseMeta fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ResponseMeta.class);
  }

  /**
   * Convert an instance of ResponseMeta to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

