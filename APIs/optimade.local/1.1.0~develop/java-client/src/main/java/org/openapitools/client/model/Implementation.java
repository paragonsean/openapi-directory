/*
 * OPTIMADE API
 * The [Open Databases Integration for Materials Design (OPTIMADE) consortium](https://www.optimade.org/) aims to make materials databases interoperational by developing a common REST API.  This specification is generated using [`optimade-python-tools`](https://github.com/Materials-Consortia/optimade-python-tools/tree/v0.16.0) v0.16.0.
 *
 * The version of the OpenAPI document: 1.1.0~develop
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Homepage;
import org.openapitools.client.model.ImplementationMaintainer;
import org.openapitools.client.model.IssueTracker;
import org.openapitools.client.model.SourceUrl;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information on the server implementation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:45.612268-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Implementation {
  public static final String SERIALIZED_NAME_HOMEPAGE = "homepage";
  @SerializedName(SERIALIZED_NAME_HOMEPAGE)
  private Homepage homepage;

  public static final String SERIALIZED_NAME_ISSUE_TRACKER = "issue_tracker";
  @SerializedName(SERIALIZED_NAME_ISSUE_TRACKER)
  private IssueTracker issueTracker;

  public static final String SERIALIZED_NAME_MAINTAINER = "maintainer";
  @SerializedName(SERIALIZED_NAME_MAINTAINER)
  private ImplementationMaintainer maintainer;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SOURCE_URL = "source_url";
  @SerializedName(SERIALIZED_NAME_SOURCE_URL)
  private SourceUrl sourceUrl;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public Implementation() {
  }

  public Implementation homepage(Homepage homepage) {
    this.homepage = homepage;
    return this;
  }

  /**
   * Get homepage
   * @return homepage
   */
  @javax.annotation.Nullable
  public Homepage getHomepage() {
    return homepage;
  }

  public void setHomepage(Homepage homepage) {
    this.homepage = homepage;
  }


  public Implementation issueTracker(IssueTracker issueTracker) {
    this.issueTracker = issueTracker;
    return this;
  }

  /**
   * Get issueTracker
   * @return issueTracker
   */
  @javax.annotation.Nullable
  public IssueTracker getIssueTracker() {
    return issueTracker;
  }

  public void setIssueTracker(IssueTracker issueTracker) {
    this.issueTracker = issueTracker;
  }


  public Implementation maintainer(ImplementationMaintainer maintainer) {
    this.maintainer = maintainer;
    return this;
  }

  /**
   * A dictionary providing details about the maintainer of the implementation.
   * @return maintainer
   */
  @javax.annotation.Nullable
  public ImplementationMaintainer getMaintainer() {
    return maintainer;
  }

  public void setMaintainer(ImplementationMaintainer maintainer) {
    this.maintainer = maintainer;
  }


  public Implementation name(String name) {
    this.name = name;
    return this;
  }

  /**
   * name of the implementation
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Implementation sourceUrl(SourceUrl sourceUrl) {
    this.sourceUrl = sourceUrl;
    return this;
  }

  /**
   * Get sourceUrl
   * @return sourceUrl
   */
  @javax.annotation.Nullable
  public SourceUrl getSourceUrl() {
    return sourceUrl;
  }

  public void setSourceUrl(SourceUrl sourceUrl) {
    this.sourceUrl = sourceUrl;
  }


  public Implementation version(String version) {
    this.version = version;
    return this;
  }

  /**
   * version string of the current implementation
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Implementation implementation = (Implementation) o;
    return Objects.equals(this.homepage, implementation.homepage) &&
        Objects.equals(this.issueTracker, implementation.issueTracker) &&
        Objects.equals(this.maintainer, implementation.maintainer) &&
        Objects.equals(this.name, implementation.name) &&
        Objects.equals(this.sourceUrl, implementation.sourceUrl) &&
        Objects.equals(this.version, implementation.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(homepage, issueTracker, maintainer, name, sourceUrl, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Implementation {\n");
    sb.append("    homepage: ").append(toIndentedString(homepage)).append("\n");
    sb.append("    issueTracker: ").append(toIndentedString(issueTracker)).append("\n");
    sb.append("    maintainer: ").append(toIndentedString(maintainer)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    sourceUrl: ").append(toIndentedString(sourceUrl)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("homepage");
    openapiFields.add("issue_tracker");
    openapiFields.add("maintainer");
    openapiFields.add("name");
    openapiFields.add("source_url");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Implementation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Implementation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Implementation is not found in the empty JSON string", Implementation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Implementation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Implementation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `homepage`
      if (jsonObj.get("homepage") != null && !jsonObj.get("homepage").isJsonNull()) {
        Homepage.validateJsonElement(jsonObj.get("homepage"));
      }
      // validate the optional field `issue_tracker`
      if (jsonObj.get("issue_tracker") != null && !jsonObj.get("issue_tracker").isJsonNull()) {
        IssueTracker.validateJsonElement(jsonObj.get("issue_tracker"));
      }
      // validate the optional field `maintainer`
      if (jsonObj.get("maintainer") != null && !jsonObj.get("maintainer").isJsonNull()) {
        ImplementationMaintainer.validateJsonElement(jsonObj.get("maintainer"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `source_url`
      if (jsonObj.get("source_url") != null && !jsonObj.get("source_url").isJsonNull()) {
        SourceUrl.validateJsonElement(jsonObj.get("source_url"));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Implementation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Implementation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Implementation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Implementation.class));

       return (TypeAdapter<T>) new TypeAdapter<Implementation>() {
           @Override
           public void write(JsonWriter out, Implementation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Implementation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Implementation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Implementation
   * @throws IOException if the JSON string is invalid with respect to Implementation
   */
  public static Implementation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Implementation.class);
  }

  /**
   * Convert an instance of Implementation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

