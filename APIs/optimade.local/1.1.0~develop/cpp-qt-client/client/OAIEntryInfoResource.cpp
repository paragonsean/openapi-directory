/**
 * OPTIMADE API
 * The [Open Databases Integration for Materials Design (OPTIMADE) consortium](https://www.optimade.org/) aims to make materials databases interoperational by developing a common REST API.  This specification is generated using [`optimade-python-tools`](https://github.com/Materials-Consortia/optimade-python-tools/tree/v0.16.0) v0.16.0.
 *
 * The version of the OpenAPI document: 1.1.0~develop
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEntryInfoResource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEntryInfoResource::OAIEntryInfoResource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEntryInfoResource::OAIEntryInfoResource() {
    this->initializeModel();
}

OAIEntryInfoResource::~OAIEntryInfoResource() {}

void OAIEntryInfoResource::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_formats_isSet = false;
    m_formats_isValid = false;

    m_output_fields_by_format_isSet = false;
    m_output_fields_by_format_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;
}

void OAIEntryInfoResource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEntryInfoResource::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_formats_isValid = ::OpenAPI::fromJsonValue(m_formats, json[QString("formats")]);
    m_formats_isSet = !json[QString("formats")].isNull() && m_formats_isValid;

    if(json["output_fields_by_format"].isObject()){
        auto varmap = json["output_fields_by_format"].toObject().toVariantMap();
        m_output_fields_by_format_isValid = true;
        if(varmap.count() > 0){
            for(auto val : varmap.keys()){
                QList<QString> item;
                auto jval = QJsonValue::fromVariant(varmap.value(val));
                m_output_fields_by_format_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_output_fields_by_format_isSet &= !jval.isNull() && m_output_fields_by_format_isValid;
                m_output_fields_by_format.insert(m_output_fields_by_format.end(), val, item);
            }
        }
    }

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;
}

QString OAIEntryInfoResource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEntryInfoResource::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_formats.size() > 0) {
        obj.insert(QString("formats"), ::OpenAPI::toJsonValue(m_formats));
    }
    if (m_output_fields_by_format.size() > 0) {
        
        obj.insert(QString("output_fields_by_format"), toJsonValue(m_output_fields_by_format));
    }
    if (m_properties.size() > 0) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    return obj;
}

QString OAIEntryInfoResource::getDescription() const {
    return m_description;
}
void OAIEntryInfoResource::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIEntryInfoResource::is_description_Set() const{
    return m_description_isSet;
}

bool OAIEntryInfoResource::is_description_Valid() const{
    return m_description_isValid;
}

QList<QString> OAIEntryInfoResource::getFormats() const {
    return m_formats;
}
void OAIEntryInfoResource::setFormats(const QList<QString> &formats) {
    m_formats = formats;
    m_formats_isSet = true;
}

bool OAIEntryInfoResource::is_formats_Set() const{
    return m_formats_isSet;
}

bool OAIEntryInfoResource::is_formats_Valid() const{
    return m_formats_isValid;
}

QMap<QString, QList<QString>> OAIEntryInfoResource::getOutputFieldsByFormat() const {
    return m_output_fields_by_format;
}
void OAIEntryInfoResource::setOutputFieldsByFormat(const QMap<QString, QList<QString>> &output_fields_by_format) {
    m_output_fields_by_format = output_fields_by_format;
    m_output_fields_by_format_isSet = true;
}

bool OAIEntryInfoResource::is_output_fields_by_format_Set() const{
    return m_output_fields_by_format_isSet;
}

bool OAIEntryInfoResource::is_output_fields_by_format_Valid() const{
    return m_output_fields_by_format_isValid;
}

QMap<QString, OAIEntryInfoProperty> OAIEntryInfoResource::getProperties() const {
    return m_properties;
}
void OAIEntryInfoResource::setProperties(const QMap<QString, OAIEntryInfoProperty> &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIEntryInfoResource::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIEntryInfoResource::is_properties_Valid() const{
    return m_properties_isValid;
}

bool OAIEntryInfoResource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_formats.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_fields_by_format.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEntryInfoResource::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_description_isValid && m_formats_isValid && m_output_fields_by_format_isValid && m_properties_isValid && true;
}

} // namespace OpenAPI
