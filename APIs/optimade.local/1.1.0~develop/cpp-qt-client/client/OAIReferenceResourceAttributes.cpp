/**
 * OPTIMADE API
 * The [Open Databases Integration for Materials Design (OPTIMADE) consortium](https://www.optimade.org/) aims to make materials databases interoperational by developing a common REST API.  This specification is generated using [`optimade-python-tools`](https://github.com/Materials-Consortia/optimade-python-tools/tree/v0.16.0) v0.16.0.
 *
 * The version of the OpenAPI document: 1.1.0~develop
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReferenceResourceAttributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReferenceResourceAttributes::OAIReferenceResourceAttributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReferenceResourceAttributes::OAIReferenceResourceAttributes() {
    this->initializeModel();
}

OAIReferenceResourceAttributes::~OAIReferenceResourceAttributes() {}

void OAIReferenceResourceAttributes::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_annote_isSet = false;
    m_annote_isValid = false;

    m_authors_isSet = false;
    m_authors_isValid = false;

    m_bib_type_isSet = false;
    m_bib_type_isValid = false;

    m_booktitle_isSet = false;
    m_booktitle_isValid = false;

    m_chapter_isSet = false;
    m_chapter_isValid = false;

    m_crossref_isSet = false;
    m_crossref_isValid = false;

    m_doi_isSet = false;
    m_doi_isValid = false;

    m_edition_isSet = false;
    m_edition_isValid = false;

    m_editors_isSet = false;
    m_editors_isValid = false;

    m_howpublished_isSet = false;
    m_howpublished_isValid = false;

    m_immutable_id_isSet = false;
    m_immutable_id_isValid = false;

    m_institution_isSet = false;
    m_institution_isValid = false;

    m_journal_isSet = false;
    m_journal_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_last_modified_isSet = false;
    m_last_modified_isValid = false;

    m_month_isSet = false;
    m_month_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_organization_isSet = false;
    m_organization_isValid = false;

    m_pages_isSet = false;
    m_pages_isValid = false;

    m_publisher_isSet = false;
    m_publisher_isValid = false;

    m_school_isSet = false;
    m_school_isValid = false;

    m_series_isSet = false;
    m_series_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_volume_isSet = false;
    m_volume_isValid = false;

    m_year_isSet = false;
    m_year_isValid = false;
}

void OAIReferenceResourceAttributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReferenceResourceAttributes::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_annote_isValid = ::OpenAPI::fromJsonValue(m_annote, json[QString("annote")]);
    m_annote_isSet = !json[QString("annote")].isNull() && m_annote_isValid;

    m_authors_isValid = ::OpenAPI::fromJsonValue(m_authors, json[QString("authors")]);
    m_authors_isSet = !json[QString("authors")].isNull() && m_authors_isValid;

    m_bib_type_isValid = ::OpenAPI::fromJsonValue(m_bib_type, json[QString("bib_type")]);
    m_bib_type_isSet = !json[QString("bib_type")].isNull() && m_bib_type_isValid;

    m_booktitle_isValid = ::OpenAPI::fromJsonValue(m_booktitle, json[QString("booktitle")]);
    m_booktitle_isSet = !json[QString("booktitle")].isNull() && m_booktitle_isValid;

    m_chapter_isValid = ::OpenAPI::fromJsonValue(m_chapter, json[QString("chapter")]);
    m_chapter_isSet = !json[QString("chapter")].isNull() && m_chapter_isValid;

    m_crossref_isValid = ::OpenAPI::fromJsonValue(m_crossref, json[QString("crossref")]);
    m_crossref_isSet = !json[QString("crossref")].isNull() && m_crossref_isValid;

    m_doi_isValid = ::OpenAPI::fromJsonValue(m_doi, json[QString("doi")]);
    m_doi_isSet = !json[QString("doi")].isNull() && m_doi_isValid;

    m_edition_isValid = ::OpenAPI::fromJsonValue(m_edition, json[QString("edition")]);
    m_edition_isSet = !json[QString("edition")].isNull() && m_edition_isValid;

    m_editors_isValid = ::OpenAPI::fromJsonValue(m_editors, json[QString("editors")]);
    m_editors_isSet = !json[QString("editors")].isNull() && m_editors_isValid;

    m_howpublished_isValid = ::OpenAPI::fromJsonValue(m_howpublished, json[QString("howpublished")]);
    m_howpublished_isSet = !json[QString("howpublished")].isNull() && m_howpublished_isValid;

    m_immutable_id_isValid = ::OpenAPI::fromJsonValue(m_immutable_id, json[QString("immutable_id")]);
    m_immutable_id_isSet = !json[QString("immutable_id")].isNull() && m_immutable_id_isValid;

    m_institution_isValid = ::OpenAPI::fromJsonValue(m_institution, json[QString("institution")]);
    m_institution_isSet = !json[QString("institution")].isNull() && m_institution_isValid;

    m_journal_isValid = ::OpenAPI::fromJsonValue(m_journal, json[QString("journal")]);
    m_journal_isSet = !json[QString("journal")].isNull() && m_journal_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_last_modified_isValid = ::OpenAPI::fromJsonValue(m_last_modified, json[QString("last_modified")]);
    m_last_modified_isSet = !json[QString("last_modified")].isNull() && m_last_modified_isValid;

    m_month_isValid = ::OpenAPI::fromJsonValue(m_month, json[QString("month")]);
    m_month_isSet = !json[QString("month")].isNull() && m_month_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_organization_isValid = ::OpenAPI::fromJsonValue(m_organization, json[QString("organization")]);
    m_organization_isSet = !json[QString("organization")].isNull() && m_organization_isValid;

    m_pages_isValid = ::OpenAPI::fromJsonValue(m_pages, json[QString("pages")]);
    m_pages_isSet = !json[QString("pages")].isNull() && m_pages_isValid;

    m_publisher_isValid = ::OpenAPI::fromJsonValue(m_publisher, json[QString("publisher")]);
    m_publisher_isSet = !json[QString("publisher")].isNull() && m_publisher_isValid;

    m_school_isValid = ::OpenAPI::fromJsonValue(m_school, json[QString("school")]);
    m_school_isSet = !json[QString("school")].isNull() && m_school_isValid;

    m_series_isValid = ::OpenAPI::fromJsonValue(m_series, json[QString("series")]);
    m_series_isSet = !json[QString("series")].isNull() && m_series_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_volume_isValid = ::OpenAPI::fromJsonValue(m_volume, json[QString("volume")]);
    m_volume_isSet = !json[QString("volume")].isNull() && m_volume_isValid;

    m_year_isValid = ::OpenAPI::fromJsonValue(m_year, json[QString("year")]);
    m_year_isSet = !json[QString("year")].isNull() && m_year_isValid;
}

QString OAIReferenceResourceAttributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReferenceResourceAttributes::asJsonObject() const {
    QJsonObject obj;
    if (m_address_isSet) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_annote_isSet) {
        obj.insert(QString("annote"), ::OpenAPI::toJsonValue(m_annote));
    }
    if (m_authors.size() > 0) {
        obj.insert(QString("authors"), ::OpenAPI::toJsonValue(m_authors));
    }
    if (m_bib_type_isSet) {
        obj.insert(QString("bib_type"), ::OpenAPI::toJsonValue(m_bib_type));
    }
    if (m_booktitle_isSet) {
        obj.insert(QString("booktitle"), ::OpenAPI::toJsonValue(m_booktitle));
    }
    if (m_chapter_isSet) {
        obj.insert(QString("chapter"), ::OpenAPI::toJsonValue(m_chapter));
    }
    if (m_crossref_isSet) {
        obj.insert(QString("crossref"), ::OpenAPI::toJsonValue(m_crossref));
    }
    if (m_doi_isSet) {
        obj.insert(QString("doi"), ::OpenAPI::toJsonValue(m_doi));
    }
    if (m_edition_isSet) {
        obj.insert(QString("edition"), ::OpenAPI::toJsonValue(m_edition));
    }
    if (m_editors.size() > 0) {
        obj.insert(QString("editors"), ::OpenAPI::toJsonValue(m_editors));
    }
    if (m_howpublished_isSet) {
        obj.insert(QString("howpublished"), ::OpenAPI::toJsonValue(m_howpublished));
    }
    if (m_immutable_id_isSet) {
        obj.insert(QString("immutable_id"), ::OpenAPI::toJsonValue(m_immutable_id));
    }
    if (m_institution_isSet) {
        obj.insert(QString("institution"), ::OpenAPI::toJsonValue(m_institution));
    }
    if (m_journal_isSet) {
        obj.insert(QString("journal"), ::OpenAPI::toJsonValue(m_journal));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_last_modified_isSet) {
        obj.insert(QString("last_modified"), ::OpenAPI::toJsonValue(m_last_modified));
    }
    if (m_month_isSet) {
        obj.insert(QString("month"), ::OpenAPI::toJsonValue(m_month));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_organization_isSet) {
        obj.insert(QString("organization"), ::OpenAPI::toJsonValue(m_organization));
    }
    if (m_pages_isSet) {
        obj.insert(QString("pages"), ::OpenAPI::toJsonValue(m_pages));
    }
    if (m_publisher_isSet) {
        obj.insert(QString("publisher"), ::OpenAPI::toJsonValue(m_publisher));
    }
    if (m_school_isSet) {
        obj.insert(QString("school"), ::OpenAPI::toJsonValue(m_school));
    }
    if (m_series_isSet) {
        obj.insert(QString("series"), ::OpenAPI::toJsonValue(m_series));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_volume_isSet) {
        obj.insert(QString("volume"), ::OpenAPI::toJsonValue(m_volume));
    }
    if (m_year_isSet) {
        obj.insert(QString("year"), ::OpenAPI::toJsonValue(m_year));
    }
    return obj;
}

QString OAIReferenceResourceAttributes::getAddress() const {
    return m_address;
}
void OAIReferenceResourceAttributes::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIReferenceResourceAttributes::is_address_Set() const{
    return m_address_isSet;
}

bool OAIReferenceResourceAttributes::is_address_Valid() const{
    return m_address_isValid;
}

QString OAIReferenceResourceAttributes::getAnnote() const {
    return m_annote;
}
void OAIReferenceResourceAttributes::setAnnote(const QString &annote) {
    m_annote = annote;
    m_annote_isSet = true;
}

bool OAIReferenceResourceAttributes::is_annote_Set() const{
    return m_annote_isSet;
}

bool OAIReferenceResourceAttributes::is_annote_Valid() const{
    return m_annote_isValid;
}

QList<OAIPerson> OAIReferenceResourceAttributes::getAuthors() const {
    return m_authors;
}
void OAIReferenceResourceAttributes::setAuthors(const QList<OAIPerson> &authors) {
    m_authors = authors;
    m_authors_isSet = true;
}

bool OAIReferenceResourceAttributes::is_authors_Set() const{
    return m_authors_isSet;
}

bool OAIReferenceResourceAttributes::is_authors_Valid() const{
    return m_authors_isValid;
}

QString OAIReferenceResourceAttributes::getBibType() const {
    return m_bib_type;
}
void OAIReferenceResourceAttributes::setBibType(const QString &bib_type) {
    m_bib_type = bib_type;
    m_bib_type_isSet = true;
}

bool OAIReferenceResourceAttributes::is_bib_type_Set() const{
    return m_bib_type_isSet;
}

bool OAIReferenceResourceAttributes::is_bib_type_Valid() const{
    return m_bib_type_isValid;
}

QString OAIReferenceResourceAttributes::getBooktitle() const {
    return m_booktitle;
}
void OAIReferenceResourceAttributes::setBooktitle(const QString &booktitle) {
    m_booktitle = booktitle;
    m_booktitle_isSet = true;
}

bool OAIReferenceResourceAttributes::is_booktitle_Set() const{
    return m_booktitle_isSet;
}

bool OAIReferenceResourceAttributes::is_booktitle_Valid() const{
    return m_booktitle_isValid;
}

QString OAIReferenceResourceAttributes::getChapter() const {
    return m_chapter;
}
void OAIReferenceResourceAttributes::setChapter(const QString &chapter) {
    m_chapter = chapter;
    m_chapter_isSet = true;
}

bool OAIReferenceResourceAttributes::is_chapter_Set() const{
    return m_chapter_isSet;
}

bool OAIReferenceResourceAttributes::is_chapter_Valid() const{
    return m_chapter_isValid;
}

QString OAIReferenceResourceAttributes::getCrossref() const {
    return m_crossref;
}
void OAIReferenceResourceAttributes::setCrossref(const QString &crossref) {
    m_crossref = crossref;
    m_crossref_isSet = true;
}

bool OAIReferenceResourceAttributes::is_crossref_Set() const{
    return m_crossref_isSet;
}

bool OAIReferenceResourceAttributes::is_crossref_Valid() const{
    return m_crossref_isValid;
}

QString OAIReferenceResourceAttributes::getDoi() const {
    return m_doi;
}
void OAIReferenceResourceAttributes::setDoi(const QString &doi) {
    m_doi = doi;
    m_doi_isSet = true;
}

bool OAIReferenceResourceAttributes::is_doi_Set() const{
    return m_doi_isSet;
}

bool OAIReferenceResourceAttributes::is_doi_Valid() const{
    return m_doi_isValid;
}

QString OAIReferenceResourceAttributes::getEdition() const {
    return m_edition;
}
void OAIReferenceResourceAttributes::setEdition(const QString &edition) {
    m_edition = edition;
    m_edition_isSet = true;
}

bool OAIReferenceResourceAttributes::is_edition_Set() const{
    return m_edition_isSet;
}

bool OAIReferenceResourceAttributes::is_edition_Valid() const{
    return m_edition_isValid;
}

QList<OAIPerson> OAIReferenceResourceAttributes::getEditors() const {
    return m_editors;
}
void OAIReferenceResourceAttributes::setEditors(const QList<OAIPerson> &editors) {
    m_editors = editors;
    m_editors_isSet = true;
}

bool OAIReferenceResourceAttributes::is_editors_Set() const{
    return m_editors_isSet;
}

bool OAIReferenceResourceAttributes::is_editors_Valid() const{
    return m_editors_isValid;
}

QString OAIReferenceResourceAttributes::getHowpublished() const {
    return m_howpublished;
}
void OAIReferenceResourceAttributes::setHowpublished(const QString &howpublished) {
    m_howpublished = howpublished;
    m_howpublished_isSet = true;
}

bool OAIReferenceResourceAttributes::is_howpublished_Set() const{
    return m_howpublished_isSet;
}

bool OAIReferenceResourceAttributes::is_howpublished_Valid() const{
    return m_howpublished_isValid;
}

QString OAIReferenceResourceAttributes::getImmutableId() const {
    return m_immutable_id;
}
void OAIReferenceResourceAttributes::setImmutableId(const QString &immutable_id) {
    m_immutable_id = immutable_id;
    m_immutable_id_isSet = true;
}

bool OAIReferenceResourceAttributes::is_immutable_id_Set() const{
    return m_immutable_id_isSet;
}

bool OAIReferenceResourceAttributes::is_immutable_id_Valid() const{
    return m_immutable_id_isValid;
}

QString OAIReferenceResourceAttributes::getInstitution() const {
    return m_institution;
}
void OAIReferenceResourceAttributes::setInstitution(const QString &institution) {
    m_institution = institution;
    m_institution_isSet = true;
}

bool OAIReferenceResourceAttributes::is_institution_Set() const{
    return m_institution_isSet;
}

bool OAIReferenceResourceAttributes::is_institution_Valid() const{
    return m_institution_isValid;
}

QString OAIReferenceResourceAttributes::getJournal() const {
    return m_journal;
}
void OAIReferenceResourceAttributes::setJournal(const QString &journal) {
    m_journal = journal;
    m_journal_isSet = true;
}

bool OAIReferenceResourceAttributes::is_journal_Set() const{
    return m_journal_isSet;
}

bool OAIReferenceResourceAttributes::is_journal_Valid() const{
    return m_journal_isValid;
}

QString OAIReferenceResourceAttributes::getKey() const {
    return m_key;
}
void OAIReferenceResourceAttributes::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIReferenceResourceAttributes::is_key_Set() const{
    return m_key_isSet;
}

bool OAIReferenceResourceAttributes::is_key_Valid() const{
    return m_key_isValid;
}

QDateTime OAIReferenceResourceAttributes::getLastModified() const {
    return m_last_modified;
}
void OAIReferenceResourceAttributes::setLastModified(const QDateTime &last_modified) {
    m_last_modified = last_modified;
    m_last_modified_isSet = true;
}

bool OAIReferenceResourceAttributes::is_last_modified_Set() const{
    return m_last_modified_isSet;
}

bool OAIReferenceResourceAttributes::is_last_modified_Valid() const{
    return m_last_modified_isValid;
}

QString OAIReferenceResourceAttributes::getMonth() const {
    return m_month;
}
void OAIReferenceResourceAttributes::setMonth(const QString &month) {
    m_month = month;
    m_month_isSet = true;
}

bool OAIReferenceResourceAttributes::is_month_Set() const{
    return m_month_isSet;
}

bool OAIReferenceResourceAttributes::is_month_Valid() const{
    return m_month_isValid;
}

QString OAIReferenceResourceAttributes::getNote() const {
    return m_note;
}
void OAIReferenceResourceAttributes::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAIReferenceResourceAttributes::is_note_Set() const{
    return m_note_isSet;
}

bool OAIReferenceResourceAttributes::is_note_Valid() const{
    return m_note_isValid;
}

QString OAIReferenceResourceAttributes::getNumber() const {
    return m_number;
}
void OAIReferenceResourceAttributes::setNumber(const QString &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIReferenceResourceAttributes::is_number_Set() const{
    return m_number_isSet;
}

bool OAIReferenceResourceAttributes::is_number_Valid() const{
    return m_number_isValid;
}

QString OAIReferenceResourceAttributes::getOrganization() const {
    return m_organization;
}
void OAIReferenceResourceAttributes::setOrganization(const QString &organization) {
    m_organization = organization;
    m_organization_isSet = true;
}

bool OAIReferenceResourceAttributes::is_organization_Set() const{
    return m_organization_isSet;
}

bool OAIReferenceResourceAttributes::is_organization_Valid() const{
    return m_organization_isValid;
}

QString OAIReferenceResourceAttributes::getPages() const {
    return m_pages;
}
void OAIReferenceResourceAttributes::setPages(const QString &pages) {
    m_pages = pages;
    m_pages_isSet = true;
}

bool OAIReferenceResourceAttributes::is_pages_Set() const{
    return m_pages_isSet;
}

bool OAIReferenceResourceAttributes::is_pages_Valid() const{
    return m_pages_isValid;
}

QString OAIReferenceResourceAttributes::getPublisher() const {
    return m_publisher;
}
void OAIReferenceResourceAttributes::setPublisher(const QString &publisher) {
    m_publisher = publisher;
    m_publisher_isSet = true;
}

bool OAIReferenceResourceAttributes::is_publisher_Set() const{
    return m_publisher_isSet;
}

bool OAIReferenceResourceAttributes::is_publisher_Valid() const{
    return m_publisher_isValid;
}

QString OAIReferenceResourceAttributes::getSchool() const {
    return m_school;
}
void OAIReferenceResourceAttributes::setSchool(const QString &school) {
    m_school = school;
    m_school_isSet = true;
}

bool OAIReferenceResourceAttributes::is_school_Set() const{
    return m_school_isSet;
}

bool OAIReferenceResourceAttributes::is_school_Valid() const{
    return m_school_isValid;
}

QString OAIReferenceResourceAttributes::getSeries() const {
    return m_series;
}
void OAIReferenceResourceAttributes::setSeries(const QString &series) {
    m_series = series;
    m_series_isSet = true;
}

bool OAIReferenceResourceAttributes::is_series_Set() const{
    return m_series_isSet;
}

bool OAIReferenceResourceAttributes::is_series_Valid() const{
    return m_series_isValid;
}

QString OAIReferenceResourceAttributes::getTitle() const {
    return m_title;
}
void OAIReferenceResourceAttributes::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIReferenceResourceAttributes::is_title_Set() const{
    return m_title_isSet;
}

bool OAIReferenceResourceAttributes::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIReferenceResourceAttributes::getUrl() const {
    return m_url;
}
void OAIReferenceResourceAttributes::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIReferenceResourceAttributes::is_url_Set() const{
    return m_url_isSet;
}

bool OAIReferenceResourceAttributes::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIReferenceResourceAttributes::getVolume() const {
    return m_volume;
}
void OAIReferenceResourceAttributes::setVolume(const QString &volume) {
    m_volume = volume;
    m_volume_isSet = true;
}

bool OAIReferenceResourceAttributes::is_volume_Set() const{
    return m_volume_isSet;
}

bool OAIReferenceResourceAttributes::is_volume_Valid() const{
    return m_volume_isValid;
}

QString OAIReferenceResourceAttributes::getYear() const {
    return m_year;
}
void OAIReferenceResourceAttributes::setYear(const QString &year) {
    m_year = year;
    m_year_isSet = true;
}

bool OAIReferenceResourceAttributes::is_year_Set() const{
    return m_year_isSet;
}

bool OAIReferenceResourceAttributes::is_year_Valid() const{
    return m_year_isValid;
}

bool OAIReferenceResourceAttributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_annote_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_bib_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_booktitle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_chapter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crossref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_doi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_edition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_editors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_howpublished_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_immutable_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_institution_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_journal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_month_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pages_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publisher_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_school_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_series_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_year_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReferenceResourceAttributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_last_modified_isValid && true;
}

} // namespace OpenAPI
