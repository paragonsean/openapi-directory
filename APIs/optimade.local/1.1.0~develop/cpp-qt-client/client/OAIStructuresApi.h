/**
 * OPTIMADE API
 * The [Open Databases Integration for Materials Design (OPTIMADE) consortium](https://www.optimade.org/) aims to make materials databases interoperational by developing a common REST API.  This specification is generated using [`optimade-python-tools`](https://github.com/Materials-Consortia/optimade-python-tools/tree/v0.16.0) v0.16.0.
 *
 * The version of the OpenAPI document: 1.1.0~develop
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIStructuresApi_H
#define OAI_OAIStructuresApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorResponse.h"
#include "OAIStructureResponseMany.h"
#include "OAIStructureResponseOne.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIStructuresApi : public QObject {
    Q_OBJECT

public:
    OAIStructuresApi(const int timeOut = 0);
    ~OAIStructuresApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  entry_id QString [required]
    * @param[in]  response_format QString [optional]
    * @param[in]  email_address QString [optional]
    * @param[in]  response_fields QString [optional]
    * @param[in]  include QString [optional]
    * @param[in]  api_hint QString [optional]
    */
    virtual void getSingleStructureStructuresEntryIdGet(const QString &entry_id, const ::OpenAPI::OptionalParam<QString> &response_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &email_address = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &response_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &include = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &api_hint = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  filter QString [optional]
    * @param[in]  response_format QString [optional]
    * @param[in]  email_address QString [optional]
    * @param[in]  response_fields QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  page_limit qint32 [optional]
    * @param[in]  page_offset qint32 [optional]
    * @param[in]  page_number qint32 [optional]
    * @param[in]  page_cursor qint32 [optional]
    * @param[in]  page_above qint32 [optional]
    * @param[in]  page_below qint32 [optional]
    * @param[in]  include QString [optional]
    * @param[in]  api_hint QString [optional]
    */
    virtual void getStructuresStructuresGet(const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &response_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &email_address = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &response_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_number = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_cursor = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_above = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_below = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &include = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &api_hint = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getSingleStructureStructuresEntryIdGetCallback(OAIHttpRequestWorker *worker);
    void getStructuresStructuresGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getSingleStructureStructuresEntryIdGetSignal(OAIStructureResponseOne summary);
    void getStructuresStructuresGetSignal(OAIStructureResponseMany summary);


    void getSingleStructureStructuresEntryIdGetSignalFull(OAIHttpRequestWorker *worker, OAIStructureResponseOne summary);
    void getStructuresStructuresGetSignalFull(OAIHttpRequestWorker *worker, OAIStructureResponseMany summary);

    Q_DECL_DEPRECATED_X("Use getSingleStructureStructuresEntryIdGetSignalError() instead")
    void getSingleStructureStructuresEntryIdGetSignalE(OAIStructureResponseOne summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSingleStructureStructuresEntryIdGetSignalError(OAIStructureResponseOne summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStructuresStructuresGetSignalError() instead")
    void getStructuresStructuresGetSignalE(OAIStructureResponseMany summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getStructuresStructuresGetSignalError(OAIStructureResponseMany summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getSingleStructureStructuresEntryIdGetSignalErrorFull() instead")
    void getSingleStructureStructuresEntryIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSingleStructureStructuresEntryIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStructuresStructuresGetSignalErrorFull() instead")
    void getStructuresStructuresGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getStructuresStructuresGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
