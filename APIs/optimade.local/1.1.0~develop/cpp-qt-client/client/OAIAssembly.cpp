/**
 * OPTIMADE API
 * The [Open Databases Integration for Materials Design (OPTIMADE) consortium](https://www.optimade.org/) aims to make materials databases interoperational by developing a common REST API.  This specification is generated using [`optimade-python-tools`](https://github.com/Materials-Consortia/optimade-python-tools/tree/v0.16.0) v0.16.0.
 *
 * The version of the OpenAPI document: 1.1.0~develop
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssembly.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssembly::OAIAssembly(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssembly::OAIAssembly() {
    this->initializeModel();
}

OAIAssembly::~OAIAssembly() {}

void OAIAssembly::initializeModel() {

    m_group_probabilities_isSet = false;
    m_group_probabilities_isValid = false;

    m_sites_in_groups_isSet = false;
    m_sites_in_groups_isValid = false;
}

void OAIAssembly::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssembly::fromJsonObject(QJsonObject json) {

    m_group_probabilities_isValid = ::OpenAPI::fromJsonValue(m_group_probabilities, json[QString("group_probabilities")]);
    m_group_probabilities_isSet = !json[QString("group_probabilities")].isNull() && m_group_probabilities_isValid;

    if(json["sites_in_groups"].isArray()){
        auto arr = json["sites_in_groups"].toArray();
        m_sites_in_groups_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QList<qint32> item;
                m_sites_in_groups_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_sites_in_groups_isSet = !jval.isNull() && m_sites_in_groups_isValid;
                m_sites_in_groups.push_back(item);
            }
        }
    }
}

QString OAIAssembly::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssembly::asJsonObject() const {
    QJsonObject obj;
    if (m_group_probabilities.size() > 0) {
        obj.insert(QString("group_probabilities"), ::OpenAPI::toJsonValue(m_group_probabilities));
    }
    if (m_sites_in_groups.size() > 0) {
        
        obj.insert(QString("sites_in_groups"), toJsonValue(m_sites_in_groups));
    }
    return obj;
}

QList<double> OAIAssembly::getGroupProbabilities() const {
    return m_group_probabilities;
}
void OAIAssembly::setGroupProbabilities(const QList<double> &group_probabilities) {
    m_group_probabilities = group_probabilities;
    m_group_probabilities_isSet = true;
}

bool OAIAssembly::is_group_probabilities_Set() const{
    return m_group_probabilities_isSet;
}

bool OAIAssembly::is_group_probabilities_Valid() const{
    return m_group_probabilities_isValid;
}

QList<QList<qint32>> OAIAssembly::getSitesInGroups() const {
    return m_sites_in_groups;
}
void OAIAssembly::setSitesInGroups(const QList<QList<qint32>> &sites_in_groups) {
    m_sites_in_groups = sites_in_groups;
    m_sites_in_groups_isSet = true;
}

bool OAIAssembly::is_sites_in_groups_Set() const{
    return m_sites_in_groups_isSet;
}

bool OAIAssembly::is_sites_in_groups_Valid() const{
    return m_sites_in_groups_isValid;
}

bool OAIAssembly::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_group_probabilities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sites_in_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssembly::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_group_probabilities_isValid && m_sites_in_groups_isValid && true;
}

} // namespace OpenAPI
