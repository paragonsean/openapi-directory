/**
 * OPTIMADE API
 * The [Open Databases Integration for Materials Design (OPTIMADE) consortium](https://www.optimade.org/) aims to make materials databases interoperational by developing a common REST API.  This specification is generated using [`optimade-python-tools`](https://github.com/Materials-Consortia/optimade-python-tools/tree/v0.16.0) v0.16.0.
 *
 * The version of the OpenAPI document: 1.1.0~develop
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILinkType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILinkType::OAILinkType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILinkType::OAILinkType() {
    this->initializeModel();
}

OAILinkType::~OAILinkType() {}

void OAILinkType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAILinkType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAILinkType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("child", Qt::CaseInsensitive) == 0) {
        m_value = eOAILinkType::CHILD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("root", Qt::CaseInsensitive) == 0) {
        m_value = eOAILinkType::ROOT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("external", Qt::CaseInsensitive) == 0) {
        m_value = eOAILinkType::EXTERNAL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("providers", Qt::CaseInsensitive) == 0) {
        m_value = eOAILinkType::PROVIDERS;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAILinkType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAILinkType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAILinkType::CHILD:
            val = "child";
            break;
        case eOAILinkType::ROOT:
            val = "root";
            break;
        case eOAILinkType::EXTERNAL:
            val = "external";
            break;
        case eOAILinkType::PROVIDERS:
            val = "providers";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAILinkType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAILinkType::eOAILinkType OAILinkType::getValue() const {
    return m_value;
}

void OAILinkType::setValue(const OAILinkType::eOAILinkType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAILinkType::isSet() const {
    
    return m_value_isSet;
}

bool OAILinkType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
