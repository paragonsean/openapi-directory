/**
 * OPTIMADE API
 * The [Open Databases Integration for Materials Design (OPTIMADE) consortium](https://www.optimade.org/) aims to make materials databases interoperational by developing a common REST API.  This specification is generated using [`optimade-python-tools`](https://github.com/Materials-Consortia/optimade-python-tools/tree/v0.16.0) v0.16.0.
 *
 * The version of the OpenAPI document: 1.1.0~develop
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIWarnings.h
 *
 * OPTIMADE-specific warning class based on OPTIMADE-specific JSON API Error.  From the specification:  A warning resource object is defined similarly to a JSON API error object, but MUST also include the field type, which MUST have the value \&quot;warning\&quot;. The field detail MUST be present and SHOULD contain a non-critical message, e.g., reporting unrecognized search attributes or deprecated features.  Note: Must be named \&quot;Warnings\&quot;, since \&quot;Warning\&quot; is a built-in Python class.
 */

#ifndef OAIWarnings_H
#define OAIWarnings_H

#include <QJsonObject>

#include "OAIErrorLinks.h"
#include "OAIErrorSource.h"
#include "OAIObject.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIErrorLinks;
class OAIErrorSource;

class OAIWarnings : public OAIObject {
public:
    OAIWarnings();
    OAIWarnings(QString json);
    ~OAIWarnings() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCode() const;
    void setCode(const QString &code);
    bool is_code_Set() const;
    bool is_code_Valid() const;

    QString getDetail() const;
    void setDetail(const QString &detail);
    bool is_detail_Set() const;
    bool is_detail_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    OAIErrorLinks getLinks() const;
    void setLinks(const OAIErrorLinks &links);
    bool is_links_Set() const;
    bool is_links_Valid() const;

    OAIObject getMeta() const;
    void setMeta(const OAIObject &meta);
    bool is_meta_Set() const;
    bool is_meta_Valid() const;

    OAIErrorSource getSource() const;
    void setSource(const OAIErrorSource &source);
    bool is_source_Set() const;
    bool is_source_Valid() const;

    QString getTitle() const;
    void setTitle(const QString &title);
    bool is_title_Set() const;
    bool is_title_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_code;
    bool m_code_isSet;
    bool m_code_isValid;

    QString m_detail;
    bool m_detail_isSet;
    bool m_detail_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    OAIErrorLinks m_links;
    bool m_links_isSet;
    bool m_links_isValid;

    OAIObject m_meta;
    bool m_meta_isSet;
    bool m_meta_isValid;

    OAIErrorSource m_source;
    bool m_source_isSet;
    bool m_source_isValid;

    QString m_title;
    bool m_title_isSet;
    bool m_title_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIWarnings)

#endif // OAIWarnings_H
