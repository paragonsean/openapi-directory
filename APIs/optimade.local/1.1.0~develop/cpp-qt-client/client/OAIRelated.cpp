/**
 * OPTIMADE API
 * The [Open Databases Integration for Materials Design (OPTIMADE) consortium](https://www.optimade.org/) aims to make materials databases interoperational by developing a common REST API.  This specification is generated using [`optimade-python-tools`](https://github.com/Materials-Consortia/optimade-python-tools/tree/v0.16.0) v0.16.0.
 *
 * The version of the OpenAPI document: 1.1.0~develop
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRelated.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRelated::OAIRelated(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRelated::OAIRelated() {
    this->initializeModel();
}

OAIRelated::~OAIRelated() {}

void OAIRelated::initializeModel() {

    m_href_isSet = false;
    m_href_isValid = false;

    m_meta_isSet = false;
    m_meta_isValid = false;
}

void OAIRelated::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRelated::fromJsonObject(QJsonObject json) {

    m_href_isValid = ::OpenAPI::fromJsonValue(m_href, json[QString("href")]);
    m_href_isSet = !json[QString("href")].isNull() && m_href_isValid;

    m_meta_isValid = ::OpenAPI::fromJsonValue(m_meta, json[QString("meta")]);
    m_meta_isSet = !json[QString("meta")].isNull() && m_meta_isValid;
}

QString OAIRelated::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRelated::asJsonObject() const {
    QJsonObject obj;
    if (m_href_isSet) {
        obj.insert(QString("href"), ::OpenAPI::toJsonValue(m_href));
    }
    if (m_meta_isSet) {
        obj.insert(QString("meta"), ::OpenAPI::toJsonValue(m_meta));
    }
    return obj;
}

QString OAIRelated::getHref() const {
    return m_href;
}
void OAIRelated::setHref(const QString &href) {
    m_href = href;
    m_href_isSet = true;
}

bool OAIRelated::is_href_Set() const{
    return m_href_isSet;
}

bool OAIRelated::is_href_Valid() const{
    return m_href_isValid;
}

OAIObject OAIRelated::getMeta() const {
    return m_meta;
}
void OAIRelated::setMeta(const OAIObject &meta) {
    m_meta = meta;
    m_meta_isSet = true;
}

bool OAIRelated::is_meta_Set() const{
    return m_meta_isSet;
}

bool OAIRelated::is_meta_Valid() const{
    return m_meta_isValid;
}

bool OAIRelated::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_href_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meta_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRelated::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_href_isValid && true;
}

} // namespace OpenAPI
