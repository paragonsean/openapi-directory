/**
 * OPTIMADE API
 * The [Open Databases Integration for Materials Design (OPTIMADE) consortium](https://www.optimade.org/) aims to make materials databases interoperational by developing a common REST API.  This specification is generated using [`optimade-python-tools`](https://github.com/Materials-Consortia/optimade-python-tools/tree/v0.16.0) v0.16.0.
 *
 * The version of the OpenAPI document: 1.1.0~develop
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEntryInfoProperty.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEntryInfoProperty::OAIEntryInfoProperty(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEntryInfoProperty::OAIEntryInfoProperty() {
    this->initializeModel();
}

OAIEntryInfoProperty::~OAIEntryInfoProperty() {}

void OAIEntryInfoProperty::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_sortable_isSet = false;
    m_sortable_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_unit_isSet = false;
    m_unit_isValid = false;
}

void OAIEntryInfoProperty::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEntryInfoProperty::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_sortable_isValid = ::OpenAPI::fromJsonValue(m_sortable, json[QString("sortable")]);
    m_sortable_isSet = !json[QString("sortable")].isNull() && m_sortable_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_unit_isValid = ::OpenAPI::fromJsonValue(m_unit, json[QString("unit")]);
    m_unit_isSet = !json[QString("unit")].isNull() && m_unit_isValid;
}

QString OAIEntryInfoProperty::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEntryInfoProperty::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_sortable_isSet) {
        obj.insert(QString("sortable"), ::OpenAPI::toJsonValue(m_sortable));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_unit_isSet) {
        obj.insert(QString("unit"), ::OpenAPI::toJsonValue(m_unit));
    }
    return obj;
}

QString OAIEntryInfoProperty::getDescription() const {
    return m_description;
}
void OAIEntryInfoProperty::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIEntryInfoProperty::is_description_Set() const{
    return m_description_isSet;
}

bool OAIEntryInfoProperty::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIEntryInfoProperty::isSortable() const {
    return m_sortable;
}
void OAIEntryInfoProperty::setSortable(const bool &sortable) {
    m_sortable = sortable;
    m_sortable_isSet = true;
}

bool OAIEntryInfoProperty::is_sortable_Set() const{
    return m_sortable_isSet;
}

bool OAIEntryInfoProperty::is_sortable_Valid() const{
    return m_sortable_isValid;
}

OAIDataType OAIEntryInfoProperty::getType() const {
    return m_type;
}
void OAIEntryInfoProperty::setType(const OAIDataType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIEntryInfoProperty::is_type_Set() const{
    return m_type_isSet;
}

bool OAIEntryInfoProperty::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIEntryInfoProperty::getUnit() const {
    return m_unit;
}
void OAIEntryInfoProperty::setUnit(const QString &unit) {
    m_unit = unit;
    m_unit_isSet = true;
}

bool OAIEntryInfoProperty::is_unit_Set() const{
    return m_unit_isSet;
}

bool OAIEntryInfoProperty::is_unit_Valid() const{
    return m_unit_isValid;
}

bool OAIEntryInfoProperty::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sortable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEntryInfoProperty::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_description_isValid && true;
}

} // namespace OpenAPI
