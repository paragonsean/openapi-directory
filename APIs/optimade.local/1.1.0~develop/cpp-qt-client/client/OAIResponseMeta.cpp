/**
 * OPTIMADE API
 * The [Open Databases Integration for Materials Design (OPTIMADE) consortium](https://www.optimade.org/) aims to make materials databases interoperational by developing a common REST API.  This specification is generated using [`optimade-python-tools`](https://github.com/Materials-Consortia/optimade-python-tools/tree/v0.16.0) v0.16.0.
 *
 * The version of the OpenAPI document: 1.1.0~develop
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResponseMeta.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResponseMeta::OAIResponseMeta(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResponseMeta::OAIResponseMeta() {
    this->initializeModel();
}

OAIResponseMeta::~OAIResponseMeta() {}

void OAIResponseMeta::initializeModel() {

    m_api_version_isSet = false;
    m_api_version_isValid = false;

    m_data_available_isSet = false;
    m_data_available_isValid = false;

    m_data_returned_isSet = false;
    m_data_returned_isValid = false;

    m_implementation_isSet = false;
    m_implementation_isValid = false;

    m_last_id_isSet = false;
    m_last_id_isValid = false;

    m_more_data_available_isSet = false;
    m_more_data_available_isValid = false;

    m_provider_isSet = false;
    m_provider_isValid = false;

    m_query_isSet = false;
    m_query_isValid = false;

    m_response_message_isSet = false;
    m_response_message_isValid = false;

    m_schema_isSet = false;
    m_schema_isValid = false;

    m_time_stamp_isSet = false;
    m_time_stamp_isValid = false;

    m_warnings_isSet = false;
    m_warnings_isValid = false;
}

void OAIResponseMeta::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResponseMeta::fromJsonObject(QJsonObject json) {

    m_api_version_isValid = ::OpenAPI::fromJsonValue(m_api_version, json[QString("api_version")]);
    m_api_version_isSet = !json[QString("api_version")].isNull() && m_api_version_isValid;

    m_data_available_isValid = ::OpenAPI::fromJsonValue(m_data_available, json[QString("data_available")]);
    m_data_available_isSet = !json[QString("data_available")].isNull() && m_data_available_isValid;

    m_data_returned_isValid = ::OpenAPI::fromJsonValue(m_data_returned, json[QString("data_returned")]);
    m_data_returned_isSet = !json[QString("data_returned")].isNull() && m_data_returned_isValid;

    m_implementation_isValid = ::OpenAPI::fromJsonValue(m_implementation, json[QString("implementation")]);
    m_implementation_isSet = !json[QString("implementation")].isNull() && m_implementation_isValid;

    m_last_id_isValid = ::OpenAPI::fromJsonValue(m_last_id, json[QString("last_id")]);
    m_last_id_isSet = !json[QString("last_id")].isNull() && m_last_id_isValid;

    m_more_data_available_isValid = ::OpenAPI::fromJsonValue(m_more_data_available, json[QString("more_data_available")]);
    m_more_data_available_isSet = !json[QString("more_data_available")].isNull() && m_more_data_available_isValid;

    m_provider_isValid = ::OpenAPI::fromJsonValue(m_provider, json[QString("provider")]);
    m_provider_isSet = !json[QString("provider")].isNull() && m_provider_isValid;

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;

    m_response_message_isValid = ::OpenAPI::fromJsonValue(m_response_message, json[QString("response_message")]);
    m_response_message_isSet = !json[QString("response_message")].isNull() && m_response_message_isValid;

    m_schema_isValid = ::OpenAPI::fromJsonValue(m_schema, json[QString("schema")]);
    m_schema_isSet = !json[QString("schema")].isNull() && m_schema_isValid;

    m_time_stamp_isValid = ::OpenAPI::fromJsonValue(m_time_stamp, json[QString("time_stamp")]);
    m_time_stamp_isSet = !json[QString("time_stamp")].isNull() && m_time_stamp_isValid;

    m_warnings_isValid = ::OpenAPI::fromJsonValue(m_warnings, json[QString("warnings")]);
    m_warnings_isSet = !json[QString("warnings")].isNull() && m_warnings_isValid;
}

QString OAIResponseMeta::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResponseMeta::asJsonObject() const {
    QJsonObject obj;
    if (m_api_version_isSet) {
        obj.insert(QString("api_version"), ::OpenAPI::toJsonValue(m_api_version));
    }
    if (m_data_available_isSet) {
        obj.insert(QString("data_available"), ::OpenAPI::toJsonValue(m_data_available));
    }
    if (m_data_returned_isSet) {
        obj.insert(QString("data_returned"), ::OpenAPI::toJsonValue(m_data_returned));
    }
    if (m_implementation.isSet()) {
        obj.insert(QString("implementation"), ::OpenAPI::toJsonValue(m_implementation));
    }
    if (m_last_id_isSet) {
        obj.insert(QString("last_id"), ::OpenAPI::toJsonValue(m_last_id));
    }
    if (m_more_data_available_isSet) {
        obj.insert(QString("more_data_available"), ::OpenAPI::toJsonValue(m_more_data_available));
    }
    if (m_provider.isSet()) {
        obj.insert(QString("provider"), ::OpenAPI::toJsonValue(m_provider));
    }
    if (m_query.isSet()) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    if (m_response_message_isSet) {
        obj.insert(QString("response_message"), ::OpenAPI::toJsonValue(m_response_message));
    }
    if (m_schema.isSet()) {
        obj.insert(QString("schema"), ::OpenAPI::toJsonValue(m_schema));
    }
    if (m_time_stamp_isSet) {
        obj.insert(QString("time_stamp"), ::OpenAPI::toJsonValue(m_time_stamp));
    }
    if (m_warnings.size() > 0) {
        obj.insert(QString("warnings"), ::OpenAPI::toJsonValue(m_warnings));
    }
    return obj;
}

QString OAIResponseMeta::getApiVersion() const {
    return m_api_version;
}
void OAIResponseMeta::setApiVersion(const QString &api_version) {
    m_api_version = api_version;
    m_api_version_isSet = true;
}

bool OAIResponseMeta::is_api_version_Set() const{
    return m_api_version_isSet;
}

bool OAIResponseMeta::is_api_version_Valid() const{
    return m_api_version_isValid;
}

qint32 OAIResponseMeta::getDataAvailable() const {
    return m_data_available;
}
void OAIResponseMeta::setDataAvailable(const qint32 &data_available) {
    m_data_available = data_available;
    m_data_available_isSet = true;
}

bool OAIResponseMeta::is_data_available_Set() const{
    return m_data_available_isSet;
}

bool OAIResponseMeta::is_data_available_Valid() const{
    return m_data_available_isValid;
}

qint32 OAIResponseMeta::getDataReturned() const {
    return m_data_returned;
}
void OAIResponseMeta::setDataReturned(const qint32 &data_returned) {
    m_data_returned = data_returned;
    m_data_returned_isSet = true;
}

bool OAIResponseMeta::is_data_returned_Set() const{
    return m_data_returned_isSet;
}

bool OAIResponseMeta::is_data_returned_Valid() const{
    return m_data_returned_isValid;
}

OAIImplementation OAIResponseMeta::getImplementation() const {
    return m_implementation;
}
void OAIResponseMeta::setImplementation(const OAIImplementation &implementation) {
    m_implementation = implementation;
    m_implementation_isSet = true;
}

bool OAIResponseMeta::is_implementation_Set() const{
    return m_implementation_isSet;
}

bool OAIResponseMeta::is_implementation_Valid() const{
    return m_implementation_isValid;
}

QString OAIResponseMeta::getLastId() const {
    return m_last_id;
}
void OAIResponseMeta::setLastId(const QString &last_id) {
    m_last_id = last_id;
    m_last_id_isSet = true;
}

bool OAIResponseMeta::is_last_id_Set() const{
    return m_last_id_isSet;
}

bool OAIResponseMeta::is_last_id_Valid() const{
    return m_last_id_isValid;
}

bool OAIResponseMeta::isMoreDataAvailable() const {
    return m_more_data_available;
}
void OAIResponseMeta::setMoreDataAvailable(const bool &more_data_available) {
    m_more_data_available = more_data_available;
    m_more_data_available_isSet = true;
}

bool OAIResponseMeta::is_more_data_available_Set() const{
    return m_more_data_available_isSet;
}

bool OAIResponseMeta::is_more_data_available_Valid() const{
    return m_more_data_available_isValid;
}

OAIProvider OAIResponseMeta::getProvider() const {
    return m_provider;
}
void OAIResponseMeta::setProvider(const OAIProvider &provider) {
    m_provider = provider;
    m_provider_isSet = true;
}

bool OAIResponseMeta::is_provider_Set() const{
    return m_provider_isSet;
}

bool OAIResponseMeta::is_provider_Valid() const{
    return m_provider_isValid;
}

OAIResponseMetaQuery OAIResponseMeta::getQuery() const {
    return m_query;
}
void OAIResponseMeta::setQuery(const OAIResponseMetaQuery &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAIResponseMeta::is_query_Set() const{
    return m_query_isSet;
}

bool OAIResponseMeta::is_query_Valid() const{
    return m_query_isValid;
}

QString OAIResponseMeta::getResponseMessage() const {
    return m_response_message;
}
void OAIResponseMeta::setResponseMessage(const QString &response_message) {
    m_response_message = response_message;
    m_response_message_isSet = true;
}

bool OAIResponseMeta::is_response_message_Set() const{
    return m_response_message_isSet;
}

bool OAIResponseMeta::is_response_message_Valid() const{
    return m_response_message_isValid;
}

OAISchema OAIResponseMeta::getSchema() const {
    return m_schema;
}
void OAIResponseMeta::setSchema(const OAISchema &schema) {
    m_schema = schema;
    m_schema_isSet = true;
}

bool OAIResponseMeta::is_schema_Set() const{
    return m_schema_isSet;
}

bool OAIResponseMeta::is_schema_Valid() const{
    return m_schema_isValid;
}

QDateTime OAIResponseMeta::getTimeStamp() const {
    return m_time_stamp;
}
void OAIResponseMeta::setTimeStamp(const QDateTime &time_stamp) {
    m_time_stamp = time_stamp;
    m_time_stamp_isSet = true;
}

bool OAIResponseMeta::is_time_stamp_Set() const{
    return m_time_stamp_isSet;
}

bool OAIResponseMeta::is_time_stamp_Valid() const{
    return m_time_stamp_isValid;
}

QSet<OAIWarnings> OAIResponseMeta::getWarnings() const {
    return m_warnings;
}
void OAIResponseMeta::setWarnings(const QSet<OAIWarnings> &warnings) {
    m_warnings = warnings;
    m_warnings_isSet = true;
}

bool OAIResponseMeta::is_warnings_Set() const{
    return m_warnings_isSet;
}

bool OAIResponseMeta::is_warnings_Valid() const{
    return m_warnings_isValid;
}

bool OAIResponseMeta::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_returned_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_implementation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_more_data_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_query.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_stamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warnings.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResponseMeta::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_api_version_isValid && m_more_data_available_isValid && m_query_isValid && true;
}

} // namespace OpenAPI
