/**
 * OPTIMADE API
 * The [Open Databases Integration for Materials Design (OPTIMADE) consortium](https://www.optimade.org/) aims to make materials databases interoperational by developing a common REST API.  This specification is generated using [`optimade-python-tools`](https://github.com/Materials-Consortia/optimade-python-tools/tree/v0.16.0) v0.16.0.
 *
 * The version of the OpenAPI document: 1.1.0~develop
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISpecies.h
 *
 * A list describing the species of the sites of this structure.  Species can represent pure chemical elements, virtual-crystal atoms representing a statistical occupation of a given site by multiple chemical elements, and/or a location to which there are attached atoms, i.e., atoms whose precise location are unknown beyond that they are attached to that position (frequently used to indicate hydrogen atoms attached to another element, e.g., a carbon with three attached hydrogens might represent a methyl group, -CH3).  - **Examples**:     - &#x60;[ {\&quot;name\&quot;: \&quot;Ti\&quot;, \&quot;chemical_symbols\&quot;: [\&quot;Ti\&quot;], \&quot;concentration\&quot;: [1.0]} ]&#x60;: any site with this species is occupied by a Ti atom.     - &#x60;[ {\&quot;name\&quot;: \&quot;Ti\&quot;, \&quot;chemical_symbols\&quot;: [\&quot;Ti\&quot;, \&quot;vacancy\&quot;], \&quot;concentration\&quot;: [0.9, 0.1]} ]&#x60;: any site with this species is occupied by a Ti atom with 90 % probability, and has a vacancy with 10 % probability.     - &#x60;[ {\&quot;name\&quot;: \&quot;BaCa\&quot;, \&quot;chemical_symbols\&quot;: [\&quot;vacancy\&quot;, \&quot;Ba\&quot;, \&quot;Ca\&quot;], \&quot;concentration\&quot;: [0.05, 0.45, 0.5], \&quot;mass\&quot;: [0.0, 137.327, 40.078]} ]&#x60;: any site with this species is occupied by a Ba atom with 45 % probability, a Ca atom with 50 % probability, and by a vacancy with 5 % probability. The mass of this site is (on average) 88.5 a.m.u.     - &#x60;[ {\&quot;name\&quot;: \&quot;C12\&quot;, \&quot;chemical_symbols\&quot;: [\&quot;C\&quot;], \&quot;concentration\&quot;: [1.0], \&quot;mass\&quot;: [12.0]} ]&#x60;: any site with this species is occupied by a carbon isotope with mass 12.     - &#x60;[ {\&quot;name\&quot;: \&quot;C13\&quot;, \&quot;chemical_symbols\&quot;: [\&quot;C\&quot;], \&quot;concentration\&quot;: [1.0], \&quot;mass\&quot;: [13.0]} ]&#x60;: any site with this species is occupied by a carbon isotope with mass 13.     - &#x60;[ {\&quot;name\&quot;: \&quot;CH3\&quot;, \&quot;chemical_symbols\&quot;: [\&quot;C\&quot;], \&quot;concentration\&quot;: [1.0], \&quot;attached\&quot;: [\&quot;H\&quot;], \&quot;nattached\&quot;: [3]} ]&#x60;: any site with this species is occupied by a methyl group, -CH3, which is represented without specifying precise positions of the hydrogen atoms.
 */

#ifndef OAISpecies_H
#define OAISpecies_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISpecies : public OAIObject {
public:
    OAISpecies();
    OAISpecies(QString json);
    ~OAISpecies() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getAttached() const;
    void setAttached(const QList<QString> &attached);
    bool is_attached_Set() const;
    bool is_attached_Valid() const;

    QList<QString> getChemicalSymbols() const;
    void setChemicalSymbols(const QList<QString> &chemical_symbols);
    bool is_chemical_symbols_Set() const;
    bool is_chemical_symbols_Valid() const;

    QList<double> getConcentration() const;
    void setConcentration(const QList<double> &concentration);
    bool is_concentration_Set() const;
    bool is_concentration_Valid() const;

    QList<double> getMass() const;
    void setMass(const QList<double> &mass);
    bool is_mass_Set() const;
    bool is_mass_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QList<qint32> getNattached() const;
    void setNattached(const QList<qint32> &nattached);
    bool is_nattached_Set() const;
    bool is_nattached_Valid() const;

    QString getOriginalName() const;
    void setOriginalName(const QString &original_name);
    bool is_original_name_Set() const;
    bool is_original_name_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_attached;
    bool m_attached_isSet;
    bool m_attached_isValid;

    QList<QString> m_chemical_symbols;
    bool m_chemical_symbols_isSet;
    bool m_chemical_symbols_isValid;

    QList<double> m_concentration;
    bool m_concentration_isSet;
    bool m_concentration_isValid;

    QList<double> m_mass;
    bool m_mass_isSet;
    bool m_mass_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QList<qint32> m_nattached;
    bool m_nattached_isSet;
    bool m_nattached_isValid;

    QString m_original_name;
    bool m_original_name_isSet;
    bool m_original_name_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISpecies)

#endif // OAISpecies_H
