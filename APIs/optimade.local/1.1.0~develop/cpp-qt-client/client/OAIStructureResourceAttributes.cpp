/**
 * OPTIMADE API
 * The [Open Databases Integration for Materials Design (OPTIMADE) consortium](https://www.optimade.org/) aims to make materials databases interoperational by developing a common REST API.  This specification is generated using [`optimade-python-tools`](https://github.com/Materials-Consortia/optimade-python-tools/tree/v0.16.0) v0.16.0.
 *
 * The version of the OpenAPI document: 1.1.0~develop
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStructureResourceAttributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStructureResourceAttributes::OAIStructureResourceAttributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStructureResourceAttributes::OAIStructureResourceAttributes() {
    this->initializeModel();
}

OAIStructureResourceAttributes::~OAIStructureResourceAttributes() {}

void OAIStructureResourceAttributes::initializeModel() {

    m_assemblies_isSet = false;
    m_assemblies_isValid = false;

    m_cartesian_site_positions_isSet = false;
    m_cartesian_site_positions_isValid = false;

    m_chemical_formula_anonymous_isSet = false;
    m_chemical_formula_anonymous_isValid = false;

    m_chemical_formula_descriptive_isSet = false;
    m_chemical_formula_descriptive_isValid = false;

    m_chemical_formula_hill_isSet = false;
    m_chemical_formula_hill_isValid = false;

    m_chemical_formula_reduced_isSet = false;
    m_chemical_formula_reduced_isValid = false;

    m_dimension_types_isSet = false;
    m_dimension_types_isValid = false;

    m_elements_isSet = false;
    m_elements_isValid = false;

    m_elements_ratios_isSet = false;
    m_elements_ratios_isValid = false;

    m_immutable_id_isSet = false;
    m_immutable_id_isValid = false;

    m_last_modified_isSet = false;
    m_last_modified_isValid = false;

    m_lattice_vectors_isSet = false;
    m_lattice_vectors_isValid = false;

    m_nelements_isSet = false;
    m_nelements_isValid = false;

    m_nperiodic_dimensions_isSet = false;
    m_nperiodic_dimensions_isValid = false;

    m_nsites_isSet = false;
    m_nsites_isValid = false;

    m_species_isSet = false;
    m_species_isValid = false;

    m_species_at_sites_isSet = false;
    m_species_at_sites_isValid = false;

    m_structure_features_isSet = false;
    m_structure_features_isValid = false;
}

void OAIStructureResourceAttributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStructureResourceAttributes::fromJsonObject(QJsonObject json) {

    m_assemblies_isValid = ::OpenAPI::fromJsonValue(m_assemblies, json[QString("assemblies")]);
    m_assemblies_isSet = !json[QString("assemblies")].isNull() && m_assemblies_isValid;

    if(json["cartesian_site_positions"].isArray()){
        auto arr = json["cartesian_site_positions"].toArray();
        m_cartesian_site_positions_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QList<double> item;
                m_cartesian_site_positions_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_cartesian_site_positions_isSet = !jval.isNull() && m_cartesian_site_positions_isValid;
                m_cartesian_site_positions.push_back(item);
            }
        }
    }

    m_chemical_formula_anonymous_isValid = ::OpenAPI::fromJsonValue(m_chemical_formula_anonymous, json[QString("chemical_formula_anonymous")]);
    m_chemical_formula_anonymous_isSet = !json[QString("chemical_formula_anonymous")].isNull() && m_chemical_formula_anonymous_isValid;

    m_chemical_formula_descriptive_isValid = ::OpenAPI::fromJsonValue(m_chemical_formula_descriptive, json[QString("chemical_formula_descriptive")]);
    m_chemical_formula_descriptive_isSet = !json[QString("chemical_formula_descriptive")].isNull() && m_chemical_formula_descriptive_isValid;

    m_chemical_formula_hill_isValid = ::OpenAPI::fromJsonValue(m_chemical_formula_hill, json[QString("chemical_formula_hill")]);
    m_chemical_formula_hill_isSet = !json[QString("chemical_formula_hill")].isNull() && m_chemical_formula_hill_isValid;

    m_chemical_formula_reduced_isValid = ::OpenAPI::fromJsonValue(m_chemical_formula_reduced, json[QString("chemical_formula_reduced")]);
    m_chemical_formula_reduced_isSet = !json[QString("chemical_formula_reduced")].isNull() && m_chemical_formula_reduced_isValid;

    m_dimension_types_isValid = ::OpenAPI::fromJsonValue(m_dimension_types, json[QString("dimension_types")]);
    m_dimension_types_isSet = !json[QString("dimension_types")].isNull() && m_dimension_types_isValid;

    m_elements_isValid = ::OpenAPI::fromJsonValue(m_elements, json[QString("elements")]);
    m_elements_isSet = !json[QString("elements")].isNull() && m_elements_isValid;

    m_elements_ratios_isValid = ::OpenAPI::fromJsonValue(m_elements_ratios, json[QString("elements_ratios")]);
    m_elements_ratios_isSet = !json[QString("elements_ratios")].isNull() && m_elements_ratios_isValid;

    m_immutable_id_isValid = ::OpenAPI::fromJsonValue(m_immutable_id, json[QString("immutable_id")]);
    m_immutable_id_isSet = !json[QString("immutable_id")].isNull() && m_immutable_id_isValid;

    m_last_modified_isValid = ::OpenAPI::fromJsonValue(m_last_modified, json[QString("last_modified")]);
    m_last_modified_isSet = !json[QString("last_modified")].isNull() && m_last_modified_isValid;

    if(json["lattice_vectors"].isArray()){
        auto arr = json["lattice_vectors"].toArray();
        m_lattice_vectors_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QList<double> item;
                m_lattice_vectors_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_lattice_vectors_isSet = !jval.isNull() && m_lattice_vectors_isValid;
                m_lattice_vectors.push_back(item);
            }
        }
    }

    m_nelements_isValid = ::OpenAPI::fromJsonValue(m_nelements, json[QString("nelements")]);
    m_nelements_isSet = !json[QString("nelements")].isNull() && m_nelements_isValid;

    m_nperiodic_dimensions_isValid = ::OpenAPI::fromJsonValue(m_nperiodic_dimensions, json[QString("nperiodic_dimensions")]);
    m_nperiodic_dimensions_isSet = !json[QString("nperiodic_dimensions")].isNull() && m_nperiodic_dimensions_isValid;

    m_nsites_isValid = ::OpenAPI::fromJsonValue(m_nsites, json[QString("nsites")]);
    m_nsites_isSet = !json[QString("nsites")].isNull() && m_nsites_isValid;

    m_species_isValid = ::OpenAPI::fromJsonValue(m_species, json[QString("species")]);
    m_species_isSet = !json[QString("species")].isNull() && m_species_isValid;

    m_species_at_sites_isValid = ::OpenAPI::fromJsonValue(m_species_at_sites, json[QString("species_at_sites")]);
    m_species_at_sites_isSet = !json[QString("species_at_sites")].isNull() && m_species_at_sites_isValid;

    m_structure_features_isValid = ::OpenAPI::fromJsonValue(m_structure_features, json[QString("structure_features")]);
    m_structure_features_isSet = !json[QString("structure_features")].isNull() && m_structure_features_isValid;
}

QString OAIStructureResourceAttributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStructureResourceAttributes::asJsonObject() const {
    QJsonObject obj;
    if (m_assemblies.size() > 0) {
        obj.insert(QString("assemblies"), ::OpenAPI::toJsonValue(m_assemblies));
    }
    if (m_cartesian_site_positions.size() > 0) {
        
        obj.insert(QString("cartesian_site_positions"), toJsonValue(m_cartesian_site_positions));
    }
    if (m_chemical_formula_anonymous_isSet) {
        obj.insert(QString("chemical_formula_anonymous"), ::OpenAPI::toJsonValue(m_chemical_formula_anonymous));
    }
    if (m_chemical_formula_descriptive_isSet) {
        obj.insert(QString("chemical_formula_descriptive"), ::OpenAPI::toJsonValue(m_chemical_formula_descriptive));
    }
    if (m_chemical_formula_hill_isSet) {
        obj.insert(QString("chemical_formula_hill"), ::OpenAPI::toJsonValue(m_chemical_formula_hill));
    }
    if (m_chemical_formula_reduced_isSet) {
        obj.insert(QString("chemical_formula_reduced"), ::OpenAPI::toJsonValue(m_chemical_formula_reduced));
    }
    if (m_dimension_types.size() > 0) {
        obj.insert(QString("dimension_types"), ::OpenAPI::toJsonValue(m_dimension_types));
    }
    if (m_elements.size() > 0) {
        obj.insert(QString("elements"), ::OpenAPI::toJsonValue(m_elements));
    }
    if (m_elements_ratios.size() > 0) {
        obj.insert(QString("elements_ratios"), ::OpenAPI::toJsonValue(m_elements_ratios));
    }
    if (m_immutable_id_isSet) {
        obj.insert(QString("immutable_id"), ::OpenAPI::toJsonValue(m_immutable_id));
    }
    if (m_last_modified_isSet) {
        obj.insert(QString("last_modified"), ::OpenAPI::toJsonValue(m_last_modified));
    }
    if (m_lattice_vectors.size() > 0) {
        
        obj.insert(QString("lattice_vectors"), toJsonValue(m_lattice_vectors));
    }
    if (m_nelements_isSet) {
        obj.insert(QString("nelements"), ::OpenAPI::toJsonValue(m_nelements));
    }
    if (m_nperiodic_dimensions_isSet) {
        obj.insert(QString("nperiodic_dimensions"), ::OpenAPI::toJsonValue(m_nperiodic_dimensions));
    }
    if (m_nsites_isSet) {
        obj.insert(QString("nsites"), ::OpenAPI::toJsonValue(m_nsites));
    }
    if (m_species.size() > 0) {
        obj.insert(QString("species"), ::OpenAPI::toJsonValue(m_species));
    }
    if (m_species_at_sites.size() > 0) {
        obj.insert(QString("species_at_sites"), ::OpenAPI::toJsonValue(m_species_at_sites));
    }
    if (m_structure_features.size() > 0) {
        obj.insert(QString("structure_features"), ::OpenAPI::toJsonValue(m_structure_features));
    }
    return obj;
}

QList<OAIAssembly> OAIStructureResourceAttributes::getAssemblies() const {
    return m_assemblies;
}
void OAIStructureResourceAttributes::setAssemblies(const QList<OAIAssembly> &assemblies) {
    m_assemblies = assemblies;
    m_assemblies_isSet = true;
}

bool OAIStructureResourceAttributes::is_assemblies_Set() const{
    return m_assemblies_isSet;
}

bool OAIStructureResourceAttributes::is_assemblies_Valid() const{
    return m_assemblies_isValid;
}

QList<QList<double>> OAIStructureResourceAttributes::getCartesianSitePositions() const {
    return m_cartesian_site_positions;
}
void OAIStructureResourceAttributes::setCartesianSitePositions(const QList<QList<double>> &cartesian_site_positions) {
    m_cartesian_site_positions = cartesian_site_positions;
    m_cartesian_site_positions_isSet = true;
}

bool OAIStructureResourceAttributes::is_cartesian_site_positions_Set() const{
    return m_cartesian_site_positions_isSet;
}

bool OAIStructureResourceAttributes::is_cartesian_site_positions_Valid() const{
    return m_cartesian_site_positions_isValid;
}

QString OAIStructureResourceAttributes::getChemicalFormulaAnonymous() const {
    return m_chemical_formula_anonymous;
}
void OAIStructureResourceAttributes::setChemicalFormulaAnonymous(const QString &chemical_formula_anonymous) {
    m_chemical_formula_anonymous = chemical_formula_anonymous;
    m_chemical_formula_anonymous_isSet = true;
}

bool OAIStructureResourceAttributes::is_chemical_formula_anonymous_Set() const{
    return m_chemical_formula_anonymous_isSet;
}

bool OAIStructureResourceAttributes::is_chemical_formula_anonymous_Valid() const{
    return m_chemical_formula_anonymous_isValid;
}

QString OAIStructureResourceAttributes::getChemicalFormulaDescriptive() const {
    return m_chemical_formula_descriptive;
}
void OAIStructureResourceAttributes::setChemicalFormulaDescriptive(const QString &chemical_formula_descriptive) {
    m_chemical_formula_descriptive = chemical_formula_descriptive;
    m_chemical_formula_descriptive_isSet = true;
}

bool OAIStructureResourceAttributes::is_chemical_formula_descriptive_Set() const{
    return m_chemical_formula_descriptive_isSet;
}

bool OAIStructureResourceAttributes::is_chemical_formula_descriptive_Valid() const{
    return m_chemical_formula_descriptive_isValid;
}

QString OAIStructureResourceAttributes::getChemicalFormulaHill() const {
    return m_chemical_formula_hill;
}
void OAIStructureResourceAttributes::setChemicalFormulaHill(const QString &chemical_formula_hill) {
    m_chemical_formula_hill = chemical_formula_hill;
    m_chemical_formula_hill_isSet = true;
}

bool OAIStructureResourceAttributes::is_chemical_formula_hill_Set() const{
    return m_chemical_formula_hill_isSet;
}

bool OAIStructureResourceAttributes::is_chemical_formula_hill_Valid() const{
    return m_chemical_formula_hill_isValid;
}

QString OAIStructureResourceAttributes::getChemicalFormulaReduced() const {
    return m_chemical_formula_reduced;
}
void OAIStructureResourceAttributes::setChemicalFormulaReduced(const QString &chemical_formula_reduced) {
    m_chemical_formula_reduced = chemical_formula_reduced;
    m_chemical_formula_reduced_isSet = true;
}

bool OAIStructureResourceAttributes::is_chemical_formula_reduced_Set() const{
    return m_chemical_formula_reduced_isSet;
}

bool OAIStructureResourceAttributes::is_chemical_formula_reduced_Valid() const{
    return m_chemical_formula_reduced_isValid;
}

QList<OAIPeriodicity> OAIStructureResourceAttributes::getDimensionTypes() const {
    return m_dimension_types;
}
void OAIStructureResourceAttributes::setDimensionTypes(const QList<OAIPeriodicity> &dimension_types) {
    m_dimension_types = dimension_types;
    m_dimension_types_isSet = true;
}

bool OAIStructureResourceAttributes::is_dimension_types_Set() const{
    return m_dimension_types_isSet;
}

bool OAIStructureResourceAttributes::is_dimension_types_Valid() const{
    return m_dimension_types_isValid;
}

QList<QString> OAIStructureResourceAttributes::getElements() const {
    return m_elements;
}
void OAIStructureResourceAttributes::setElements(const QList<QString> &elements) {
    m_elements = elements;
    m_elements_isSet = true;
}

bool OAIStructureResourceAttributes::is_elements_Set() const{
    return m_elements_isSet;
}

bool OAIStructureResourceAttributes::is_elements_Valid() const{
    return m_elements_isValid;
}

QList<double> OAIStructureResourceAttributes::getElementsRatios() const {
    return m_elements_ratios;
}
void OAIStructureResourceAttributes::setElementsRatios(const QList<double> &elements_ratios) {
    m_elements_ratios = elements_ratios;
    m_elements_ratios_isSet = true;
}

bool OAIStructureResourceAttributes::is_elements_ratios_Set() const{
    return m_elements_ratios_isSet;
}

bool OAIStructureResourceAttributes::is_elements_ratios_Valid() const{
    return m_elements_ratios_isValid;
}

QString OAIStructureResourceAttributes::getImmutableId() const {
    return m_immutable_id;
}
void OAIStructureResourceAttributes::setImmutableId(const QString &immutable_id) {
    m_immutable_id = immutable_id;
    m_immutable_id_isSet = true;
}

bool OAIStructureResourceAttributes::is_immutable_id_Set() const{
    return m_immutable_id_isSet;
}

bool OAIStructureResourceAttributes::is_immutable_id_Valid() const{
    return m_immutable_id_isValid;
}

QDateTime OAIStructureResourceAttributes::getLastModified() const {
    return m_last_modified;
}
void OAIStructureResourceAttributes::setLastModified(const QDateTime &last_modified) {
    m_last_modified = last_modified;
    m_last_modified_isSet = true;
}

bool OAIStructureResourceAttributes::is_last_modified_Set() const{
    return m_last_modified_isSet;
}

bool OAIStructureResourceAttributes::is_last_modified_Valid() const{
    return m_last_modified_isValid;
}

QList<QList<double>> OAIStructureResourceAttributes::getLatticeVectors() const {
    return m_lattice_vectors;
}
void OAIStructureResourceAttributes::setLatticeVectors(const QList<QList<double>> &lattice_vectors) {
    m_lattice_vectors = lattice_vectors;
    m_lattice_vectors_isSet = true;
}

bool OAIStructureResourceAttributes::is_lattice_vectors_Set() const{
    return m_lattice_vectors_isSet;
}

bool OAIStructureResourceAttributes::is_lattice_vectors_Valid() const{
    return m_lattice_vectors_isValid;
}

qint32 OAIStructureResourceAttributes::getNelements() const {
    return m_nelements;
}
void OAIStructureResourceAttributes::setNelements(const qint32 &nelements) {
    m_nelements = nelements;
    m_nelements_isSet = true;
}

bool OAIStructureResourceAttributes::is_nelements_Set() const{
    return m_nelements_isSet;
}

bool OAIStructureResourceAttributes::is_nelements_Valid() const{
    return m_nelements_isValid;
}

qint32 OAIStructureResourceAttributes::getNperiodicDimensions() const {
    return m_nperiodic_dimensions;
}
void OAIStructureResourceAttributes::setNperiodicDimensions(const qint32 &nperiodic_dimensions) {
    m_nperiodic_dimensions = nperiodic_dimensions;
    m_nperiodic_dimensions_isSet = true;
}

bool OAIStructureResourceAttributes::is_nperiodic_dimensions_Set() const{
    return m_nperiodic_dimensions_isSet;
}

bool OAIStructureResourceAttributes::is_nperiodic_dimensions_Valid() const{
    return m_nperiodic_dimensions_isValid;
}

qint32 OAIStructureResourceAttributes::getNsites() const {
    return m_nsites;
}
void OAIStructureResourceAttributes::setNsites(const qint32 &nsites) {
    m_nsites = nsites;
    m_nsites_isSet = true;
}

bool OAIStructureResourceAttributes::is_nsites_Set() const{
    return m_nsites_isSet;
}

bool OAIStructureResourceAttributes::is_nsites_Valid() const{
    return m_nsites_isValid;
}

QList<OAISpecies> OAIStructureResourceAttributes::getSpecies() const {
    return m_species;
}
void OAIStructureResourceAttributes::setSpecies(const QList<OAISpecies> &species) {
    m_species = species;
    m_species_isSet = true;
}

bool OAIStructureResourceAttributes::is_species_Set() const{
    return m_species_isSet;
}

bool OAIStructureResourceAttributes::is_species_Valid() const{
    return m_species_isValid;
}

QList<QString> OAIStructureResourceAttributes::getSpeciesAtSites() const {
    return m_species_at_sites;
}
void OAIStructureResourceAttributes::setSpeciesAtSites(const QList<QString> &species_at_sites) {
    m_species_at_sites = species_at_sites;
    m_species_at_sites_isSet = true;
}

bool OAIStructureResourceAttributes::is_species_at_sites_Set() const{
    return m_species_at_sites_isSet;
}

bool OAIStructureResourceAttributes::is_species_at_sites_Valid() const{
    return m_species_at_sites_isValid;
}

QList<OAIStructureFeatures> OAIStructureResourceAttributes::getStructureFeatures() const {
    return m_structure_features;
}
void OAIStructureResourceAttributes::setStructureFeatures(const QList<OAIStructureFeatures> &structure_features) {
    m_structure_features = structure_features;
    m_structure_features_isSet = true;
}

bool OAIStructureResourceAttributes::is_structure_features_Set() const{
    return m_structure_features_isSet;
}

bool OAIStructureResourceAttributes::is_structure_features_Valid() const{
    return m_structure_features_isValid;
}

bool OAIStructureResourceAttributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assemblies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cartesian_site_positions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_chemical_formula_anonymous_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_chemical_formula_descriptive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_chemical_formula_hill_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_chemical_formula_reduced_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimension_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_elements.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_elements_ratios.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_immutable_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lattice_vectors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_nelements_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nperiodic_dimensions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nsites_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_species.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_species_at_sites.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_structure_features.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStructureResourceAttributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cartesian_site_positions_isValid && m_chemical_formula_anonymous_isValid && m_chemical_formula_descriptive_isValid && m_chemical_formula_reduced_isValid && m_dimension_types_isValid && m_elements_isValid && m_elements_ratios_isValid && m_last_modified_isValid && m_lattice_vectors_isValid && m_nelements_isValid && m_nperiodic_dimensions_isValid && m_nsites_isValid && m_species_isValid && m_species_at_sites_isValid && m_structure_features_isValid && true;
}

} // namespace OpenAPI
