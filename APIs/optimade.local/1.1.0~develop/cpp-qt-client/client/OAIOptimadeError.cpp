/**
 * OPTIMADE API
 * The [Open Databases Integration for Materials Design (OPTIMADE) consortium](https://www.optimade.org/) aims to make materials databases interoperational by developing a common REST API.  This specification is generated using [`optimade-python-tools`](https://github.com/Materials-Consortia/optimade-python-tools/tree/v0.16.0) v0.16.0.
 *
 * The version of the OpenAPI document: 1.1.0~develop
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOptimadeError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOptimadeError::OAIOptimadeError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOptimadeError::OAIOptimadeError() {
    this->initializeModel();
}

OAIOptimadeError::~OAIOptimadeError() {}

void OAIOptimadeError::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_detail_isSet = false;
    m_detail_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_meta_isSet = false;
    m_meta_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIOptimadeError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOptimadeError::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_detail_isValid = ::OpenAPI::fromJsonValue(m_detail, json[QString("detail")]);
    m_detail_isSet = !json[QString("detail")].isNull() && m_detail_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_meta_isValid = ::OpenAPI::fromJsonValue(m_meta, json[QString("meta")]);
    m_meta_isSet = !json[QString("meta")].isNull() && m_meta_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIOptimadeError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOptimadeError::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_detail_isSet) {
        obj.insert(QString("detail"), ::OpenAPI::toJsonValue(m_detail));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_links.isSet()) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_meta_isSet) {
        obj.insert(QString("meta"), ::OpenAPI::toJsonValue(m_meta));
    }
    if (m_source.isSet()) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QString OAIOptimadeError::getCode() const {
    return m_code;
}
void OAIOptimadeError::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIOptimadeError::is_code_Set() const{
    return m_code_isSet;
}

bool OAIOptimadeError::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIOptimadeError::getDetail() const {
    return m_detail;
}
void OAIOptimadeError::setDetail(const QString &detail) {
    m_detail = detail;
    m_detail_isSet = true;
}

bool OAIOptimadeError::is_detail_Set() const{
    return m_detail_isSet;
}

bool OAIOptimadeError::is_detail_Valid() const{
    return m_detail_isValid;
}

QString OAIOptimadeError::getId() const {
    return m_id;
}
void OAIOptimadeError::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIOptimadeError::is_id_Set() const{
    return m_id_isSet;
}

bool OAIOptimadeError::is_id_Valid() const{
    return m_id_isValid;
}

OAIErrorLinks OAIOptimadeError::getLinks() const {
    return m_links;
}
void OAIOptimadeError::setLinks(const OAIErrorLinks &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIOptimadeError::is_links_Set() const{
    return m_links_isSet;
}

bool OAIOptimadeError::is_links_Valid() const{
    return m_links_isValid;
}

OAIObject OAIOptimadeError::getMeta() const {
    return m_meta;
}
void OAIOptimadeError::setMeta(const OAIObject &meta) {
    m_meta = meta;
    m_meta_isSet = true;
}

bool OAIOptimadeError::is_meta_Set() const{
    return m_meta_isSet;
}

bool OAIOptimadeError::is_meta_Valid() const{
    return m_meta_isValid;
}

OAIErrorSource OAIOptimadeError::getSource() const {
    return m_source;
}
void OAIOptimadeError::setSource(const OAIErrorSource &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIOptimadeError::is_source_Set() const{
    return m_source_isSet;
}

bool OAIOptimadeError::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIOptimadeError::getStatus() const {
    return m_status;
}
void OAIOptimadeError::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIOptimadeError::is_status_Set() const{
    return m_status_isSet;
}

bool OAIOptimadeError::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIOptimadeError::getTitle() const {
    return m_title;
}
void OAIOptimadeError::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIOptimadeError::is_title_Set() const{
    return m_title_isSet;
}

bool OAIOptimadeError::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIOptimadeError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_detail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_meta_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOptimadeError::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_detail_isValid && true;
}

} // namespace OpenAPI
