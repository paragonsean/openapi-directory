/**
 * OPTIMADE API
 * The [Open Databases Integration for Materials Design (OPTIMADE) consortium](https://www.optimade.org/) aims to make materials databases interoperational by developing a common REST API.  This specification is generated using [`optimade-python-tools`](https://github.com/Materials-Consortia/optimade-python-tools/tree/v0.16.0) v0.16.0.
 *
 * The version of the OpenAPI document: 1.1.0~develop
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILinksResourceAttributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILinksResourceAttributes::OAILinksResourceAttributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILinksResourceAttributes::OAILinksResourceAttributes() {
    this->initializeModel();
}

OAILinksResourceAttributes::~OAILinksResourceAttributes() {}

void OAILinksResourceAttributes::initializeModel() {

    m_aggregate_isSet = false;
    m_aggregate_isValid = false;

    m_base_url_isSet = false;
    m_base_url_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_homepage_isSet = false;
    m_homepage_isValid = false;

    m_link_type_isSet = false;
    m_link_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_no_aggregate_reason_isSet = false;
    m_no_aggregate_reason_isValid = false;
}

void OAILinksResourceAttributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILinksResourceAttributes::fromJsonObject(QJsonObject json) {

    m_aggregate_isValid = ::OpenAPI::fromJsonValue(m_aggregate, json[QString("aggregate")]);
    m_aggregate_isSet = !json[QString("aggregate")].isNull() && m_aggregate_isValid;

    m_base_url_isValid = ::OpenAPI::fromJsonValue(m_base_url, json[QString("base_url")]);
    m_base_url_isSet = !json[QString("base_url")].isNull() && m_base_url_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_homepage_isValid = ::OpenAPI::fromJsonValue(m_homepage, json[QString("homepage")]);
    m_homepage_isSet = !json[QString("homepage")].isNull() && m_homepage_isValid;

    m_link_type_isValid = ::OpenAPI::fromJsonValue(m_link_type, json[QString("link_type")]);
    m_link_type_isSet = !json[QString("link_type")].isNull() && m_link_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_no_aggregate_reason_isValid = ::OpenAPI::fromJsonValue(m_no_aggregate_reason, json[QString("no_aggregate_reason")]);
    m_no_aggregate_reason_isSet = !json[QString("no_aggregate_reason")].isNull() && m_no_aggregate_reason_isValid;
}

QString OAILinksResourceAttributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILinksResourceAttributes::asJsonObject() const {
    QJsonObject obj;
    if (m_aggregate.isSet()) {
        obj.insert(QString("aggregate"), ::OpenAPI::toJsonValue(m_aggregate));
    }
    if (m_base_url.isSet()) {
        obj.insert(QString("base_url"), ::OpenAPI::toJsonValue(m_base_url));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_homepage.isSet()) {
        obj.insert(QString("homepage"), ::OpenAPI::toJsonValue(m_homepage));
    }
    if (m_link_type.isSet()) {
        obj.insert(QString("link_type"), ::OpenAPI::toJsonValue(m_link_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_no_aggregate_reason_isSet) {
        obj.insert(QString("no_aggregate_reason"), ::OpenAPI::toJsonValue(m_no_aggregate_reason));
    }
    return obj;
}

OAIAggregate OAILinksResourceAttributes::getAggregate() const {
    return m_aggregate;
}
void OAILinksResourceAttributes::setAggregate(const OAIAggregate &aggregate) {
    m_aggregate = aggregate;
    m_aggregate_isSet = true;
}

bool OAILinksResourceAttributes::is_aggregate_Set() const{
    return m_aggregate_isSet;
}

bool OAILinksResourceAttributes::is_aggregate_Valid() const{
    return m_aggregate_isValid;
}

OAIBase_Url OAILinksResourceAttributes::getBaseUrl() const {
    return m_base_url;
}
void OAILinksResourceAttributes::setBaseUrl(const OAIBase_Url &base_url) {
    m_base_url = base_url;
    m_base_url_isSet = true;
}

bool OAILinksResourceAttributes::is_base_url_Set() const{
    return m_base_url_isSet;
}

bool OAILinksResourceAttributes::is_base_url_Valid() const{
    return m_base_url_isValid;
}

QString OAILinksResourceAttributes::getDescription() const {
    return m_description;
}
void OAILinksResourceAttributes::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAILinksResourceAttributes::is_description_Set() const{
    return m_description_isSet;
}

bool OAILinksResourceAttributes::is_description_Valid() const{
    return m_description_isValid;
}

OAIHomepage_1 OAILinksResourceAttributes::getHomepage() const {
    return m_homepage;
}
void OAILinksResourceAttributes::setHomepage(const OAIHomepage_1 &homepage) {
    m_homepage = homepage;
    m_homepage_isSet = true;
}

bool OAILinksResourceAttributes::is_homepage_Set() const{
    return m_homepage_isSet;
}

bool OAILinksResourceAttributes::is_homepage_Valid() const{
    return m_homepage_isValid;
}

OAILinkType OAILinksResourceAttributes::getLinkType() const {
    return m_link_type;
}
void OAILinksResourceAttributes::setLinkType(const OAILinkType &link_type) {
    m_link_type = link_type;
    m_link_type_isSet = true;
}

bool OAILinksResourceAttributes::is_link_type_Set() const{
    return m_link_type_isSet;
}

bool OAILinksResourceAttributes::is_link_type_Valid() const{
    return m_link_type_isValid;
}

QString OAILinksResourceAttributes::getName() const {
    return m_name;
}
void OAILinksResourceAttributes::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAILinksResourceAttributes::is_name_Set() const{
    return m_name_isSet;
}

bool OAILinksResourceAttributes::is_name_Valid() const{
    return m_name_isValid;
}

QString OAILinksResourceAttributes::getNoAggregateReason() const {
    return m_no_aggregate_reason;
}
void OAILinksResourceAttributes::setNoAggregateReason(const QString &no_aggregate_reason) {
    m_no_aggregate_reason = no_aggregate_reason;
    m_no_aggregate_reason_isSet = true;
}

bool OAILinksResourceAttributes::is_no_aggregate_reason_Set() const{
    return m_no_aggregate_reason_isSet;
}

bool OAILinksResourceAttributes::is_no_aggregate_reason_Valid() const{
    return m_no_aggregate_reason_isValid;
}

bool OAILinksResourceAttributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aggregate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_url.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_homepage.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_no_aggregate_reason_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILinksResourceAttributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_base_url_isValid && m_description_isValid && m_homepage_isValid && m_link_type_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
