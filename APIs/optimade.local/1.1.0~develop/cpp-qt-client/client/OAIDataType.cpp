/**
 * OPTIMADE API
 * The [Open Databases Integration for Materials Design (OPTIMADE) consortium](https://www.optimade.org/) aims to make materials databases interoperational by developing a common REST API.  This specification is generated using [`optimade-python-tools`](https://github.com/Materials-Consortia/optimade-python-tools/tree/v0.16.0) v0.16.0.
 *
 * The version of the OpenAPI document: 1.1.0~develop
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataType::OAIDataType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataType::OAIDataType() {
    this->initializeModel();
}

OAIDataType::~OAIDataType() {}

void OAIDataType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIDataType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIDataType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("string", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataType::STRING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("integer", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataType::INTEGER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("float", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataType::FLOAT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("boolean", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataType::BOOLEAN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("timestamp", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataType::TIMESTAMP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("list", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataType::LIST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("dictionary", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataType::DICTIONARY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("unknown", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataType::UNKNOWN;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIDataType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIDataType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIDataType::STRING:
            val = "string";
            break;
        case eOAIDataType::INTEGER:
            val = "integer";
            break;
        case eOAIDataType::FLOAT:
            val = "float";
            break;
        case eOAIDataType::BOOLEAN:
            val = "boolean";
            break;
        case eOAIDataType::TIMESTAMP:
            val = "timestamp";
            break;
        case eOAIDataType::LIST:
            val = "list";
            break;
        case eOAIDataType::DICTIONARY:
            val = "dictionary";
            break;
        case eOAIDataType::UNKNOWN:
            val = "unknown";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIDataType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIDataType::eOAIDataType OAIDataType::getValue() const {
    return m_value;
}

void OAIDataType::setValue(const OAIDataType::eOAIDataType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIDataType::isSet() const {
    
    return m_value_isSet;
}

bool OAIDataType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
