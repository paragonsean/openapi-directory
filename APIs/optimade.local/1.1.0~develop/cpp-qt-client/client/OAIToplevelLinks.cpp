/**
 * OPTIMADE API
 * The [Open Databases Integration for Materials Design (OPTIMADE) consortium](https://www.optimade.org/) aims to make materials databases interoperational by developing a common REST API.  This specification is generated using [`optimade-python-tools`](https://github.com/Materials-Consortia/optimade-python-tools/tree/v0.16.0) v0.16.0.
 *
 * The version of the OpenAPI document: 1.1.0~develop
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIToplevelLinks.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIToplevelLinks::OAIToplevelLinks(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIToplevelLinks::OAIToplevelLinks() {
    this->initializeModel();
}

OAIToplevelLinks::~OAIToplevelLinks() {}

void OAIToplevelLinks::initializeModel() {

    m_first_isSet = false;
    m_first_isValid = false;

    m_last_isSet = false;
    m_last_isValid = false;

    m_next_isSet = false;
    m_next_isValid = false;

    m_prev_isSet = false;
    m_prev_isValid = false;

    m_related_isSet = false;
    m_related_isValid = false;

    m_self_isSet = false;
    m_self_isValid = false;
}

void OAIToplevelLinks::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIToplevelLinks::fromJsonObject(QJsonObject json) {

    m_first_isValid = ::OpenAPI::fromJsonValue(m_first, json[QString("first")]);
    m_first_isSet = !json[QString("first")].isNull() && m_first_isValid;

    m_last_isValid = ::OpenAPI::fromJsonValue(m_last, json[QString("last")]);
    m_last_isSet = !json[QString("last")].isNull() && m_last_isValid;

    m_next_isValid = ::OpenAPI::fromJsonValue(m_next, json[QString("next")]);
    m_next_isSet = !json[QString("next")].isNull() && m_next_isValid;

    m_prev_isValid = ::OpenAPI::fromJsonValue(m_prev, json[QString("prev")]);
    m_prev_isSet = !json[QString("prev")].isNull() && m_prev_isValid;

    m_related_isValid = ::OpenAPI::fromJsonValue(m_related, json[QString("related")]);
    m_related_isSet = !json[QString("related")].isNull() && m_related_isValid;

    m_self_isValid = ::OpenAPI::fromJsonValue(m_self, json[QString("self")]);
    m_self_isSet = !json[QString("self")].isNull() && m_self_isValid;
}

QString OAIToplevelLinks::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIToplevelLinks::asJsonObject() const {
    QJsonObject obj;
    if (m_first.isSet()) {
        obj.insert(QString("first"), ::OpenAPI::toJsonValue(m_first));
    }
    if (m_last.isSet()) {
        obj.insert(QString("last"), ::OpenAPI::toJsonValue(m_last));
    }
    if (m_next.isSet()) {
        obj.insert(QString("next"), ::OpenAPI::toJsonValue(m_next));
    }
    if (m_prev.isSet()) {
        obj.insert(QString("prev"), ::OpenAPI::toJsonValue(m_prev));
    }
    if (m_related.isSet()) {
        obj.insert(QString("related"), ::OpenAPI::toJsonValue(m_related));
    }
    if (m_self.isSet()) {
        obj.insert(QString("self"), ::OpenAPI::toJsonValue(m_self));
    }
    return obj;
}

OAIFirst OAIToplevelLinks::getFirst() const {
    return m_first;
}
void OAIToplevelLinks::setFirst(const OAIFirst &first) {
    m_first = first;
    m_first_isSet = true;
}

bool OAIToplevelLinks::is_first_Set() const{
    return m_first_isSet;
}

bool OAIToplevelLinks::is_first_Valid() const{
    return m_first_isValid;
}

OAILast OAIToplevelLinks::getLast() const {
    return m_last;
}
void OAIToplevelLinks::setLast(const OAILast &last) {
    m_last = last;
    m_last_isSet = true;
}

bool OAIToplevelLinks::is_last_Set() const{
    return m_last_isSet;
}

bool OAIToplevelLinks::is_last_Valid() const{
    return m_last_isValid;
}

OAINext OAIToplevelLinks::getNext() const {
    return m_next;
}
void OAIToplevelLinks::setNext(const OAINext &next) {
    m_next = next;
    m_next_isSet = true;
}

bool OAIToplevelLinks::is_next_Set() const{
    return m_next_isSet;
}

bool OAIToplevelLinks::is_next_Valid() const{
    return m_next_isValid;
}

OAIPrev OAIToplevelLinks::getPrev() const {
    return m_prev;
}
void OAIToplevelLinks::setPrev(const OAIPrev &prev) {
    m_prev = prev;
    m_prev_isSet = true;
}

bool OAIToplevelLinks::is_prev_Set() const{
    return m_prev_isSet;
}

bool OAIToplevelLinks::is_prev_Valid() const{
    return m_prev_isValid;
}

OAIRelated_1 OAIToplevelLinks::getRelated() const {
    return m_related;
}
void OAIToplevelLinks::setRelated(const OAIRelated_1 &related) {
    m_related = related;
    m_related_isSet = true;
}

bool OAIToplevelLinks::is_related_Set() const{
    return m_related_isSet;
}

bool OAIToplevelLinks::is_related_Valid() const{
    return m_related_isValid;
}

OAISelf_2 OAIToplevelLinks::getSelf() const {
    return m_self;
}
void OAIToplevelLinks::setSelf(const OAISelf_2 &self) {
    m_self = self;
    m_self_isSet = true;
}

bool OAIToplevelLinks::is_self_Set() const{
    return m_self_isSet;
}

bool OAIToplevelLinks::is_self_Valid() const{
    return m_self_isValid;
}

bool OAIToplevelLinks::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_first.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_prev.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_related.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_self.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIToplevelLinks::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
