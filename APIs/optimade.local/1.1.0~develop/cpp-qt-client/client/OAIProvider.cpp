/**
 * OPTIMADE API
 * The [Open Databases Integration for Materials Design (OPTIMADE) consortium](https://www.optimade.org/) aims to make materials databases interoperational by developing a common REST API.  This specification is generated using [`optimade-python-tools`](https://github.com/Materials-Consortia/optimade-python-tools/tree/v0.16.0) v0.16.0.
 *
 * The version of the OpenAPI document: 1.1.0~develop
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProvider.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProvider::OAIProvider(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProvider::OAIProvider() {
    this->initializeModel();
}

OAIProvider::~OAIProvider() {}

void OAIProvider::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_homepage_isSet = false;
    m_homepage_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_prefix_isSet = false;
    m_prefix_isValid = false;
}

void OAIProvider::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProvider::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_homepage_isValid = ::OpenAPI::fromJsonValue(m_homepage, json[QString("homepage")]);
    m_homepage_isSet = !json[QString("homepage")].isNull() && m_homepage_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_prefix_isValid = ::OpenAPI::fromJsonValue(m_prefix, json[QString("prefix")]);
    m_prefix_isSet = !json[QString("prefix")].isNull() && m_prefix_isValid;
}

QString OAIProvider::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProvider::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_homepage.isSet()) {
        obj.insert(QString("homepage"), ::OpenAPI::toJsonValue(m_homepage));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_prefix_isSet) {
        obj.insert(QString("prefix"), ::OpenAPI::toJsonValue(m_prefix));
    }
    return obj;
}

QString OAIProvider::getDescription() const {
    return m_description;
}
void OAIProvider::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIProvider::is_description_Set() const{
    return m_description_isSet;
}

bool OAIProvider::is_description_Valid() const{
    return m_description_isValid;
}

OAIHomepage_2 OAIProvider::getHomepage() const {
    return m_homepage;
}
void OAIProvider::setHomepage(const OAIHomepage_2 &homepage) {
    m_homepage = homepage;
    m_homepage_isSet = true;
}

bool OAIProvider::is_homepage_Set() const{
    return m_homepage_isSet;
}

bool OAIProvider::is_homepage_Valid() const{
    return m_homepage_isValid;
}

QString OAIProvider::getName() const {
    return m_name;
}
void OAIProvider::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProvider::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProvider::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIProvider::getPrefix() const {
    return m_prefix;
}
void OAIProvider::setPrefix(const QString &prefix) {
    m_prefix = prefix;
    m_prefix_isSet = true;
}

bool OAIProvider::is_prefix_Set() const{
    return m_prefix_isSet;
}

bool OAIProvider::is_prefix_Valid() const{
    return m_prefix_isValid;
}

bool OAIProvider::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_homepage.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProvider::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_description_isValid && m_name_isValid && m_prefix_isValid && true;
}

} // namespace OpenAPI
