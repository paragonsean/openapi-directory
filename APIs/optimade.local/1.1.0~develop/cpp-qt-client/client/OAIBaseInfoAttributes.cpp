/**
 * OPTIMADE API
 * The [Open Databases Integration for Materials Design (OPTIMADE) consortium](https://www.optimade.org/) aims to make materials databases interoperational by developing a common REST API.  This specification is generated using [`optimade-python-tools`](https://github.com/Materials-Consortia/optimade-python-tools/tree/v0.16.0) v0.16.0.
 *
 * The version of the OpenAPI document: 1.1.0~develop
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBaseInfoAttributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBaseInfoAttributes::OAIBaseInfoAttributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBaseInfoAttributes::OAIBaseInfoAttributes() {
    this->initializeModel();
}

OAIBaseInfoAttributes::~OAIBaseInfoAttributes() {}

void OAIBaseInfoAttributes::initializeModel() {

    m_api_version_isSet = false;
    m_api_version_isValid = false;

    m_available_api_versions_isSet = false;
    m_available_api_versions_isValid = false;

    m_available_endpoints_isSet = false;
    m_available_endpoints_isValid = false;

    m_entry_types_by_format_isSet = false;
    m_entry_types_by_format_isValid = false;

    m_formats_isSet = false;
    m_formats_isValid = false;

    m_is_index_isSet = false;
    m_is_index_isValid = false;
}

void OAIBaseInfoAttributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBaseInfoAttributes::fromJsonObject(QJsonObject json) {

    m_api_version_isValid = ::OpenAPI::fromJsonValue(m_api_version, json[QString("api_version")]);
    m_api_version_isSet = !json[QString("api_version")].isNull() && m_api_version_isValid;

    m_available_api_versions_isValid = ::OpenAPI::fromJsonValue(m_available_api_versions, json[QString("available_api_versions")]);
    m_available_api_versions_isSet = !json[QString("available_api_versions")].isNull() && m_available_api_versions_isValid;

    m_available_endpoints_isValid = ::OpenAPI::fromJsonValue(m_available_endpoints, json[QString("available_endpoints")]);
    m_available_endpoints_isSet = !json[QString("available_endpoints")].isNull() && m_available_endpoints_isValid;

    if(json["entry_types_by_format"].isObject()){
        auto varmap = json["entry_types_by_format"].toObject().toVariantMap();
        m_entry_types_by_format_isValid = true;
        if(varmap.count() > 0){
            for(auto val : varmap.keys()){
                QList<QString> item;
                auto jval = QJsonValue::fromVariant(varmap.value(val));
                m_entry_types_by_format_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_entry_types_by_format_isSet &= !jval.isNull() && m_entry_types_by_format_isValid;
                m_entry_types_by_format.insert(m_entry_types_by_format.end(), val, item);
            }
        }
    }

    m_formats_isValid = ::OpenAPI::fromJsonValue(m_formats, json[QString("formats")]);
    m_formats_isSet = !json[QString("formats")].isNull() && m_formats_isValid;

    m_is_index_isValid = ::OpenAPI::fromJsonValue(m_is_index, json[QString("is_index")]);
    m_is_index_isSet = !json[QString("is_index")].isNull() && m_is_index_isValid;
}

QString OAIBaseInfoAttributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBaseInfoAttributes::asJsonObject() const {
    QJsonObject obj;
    if (m_api_version_isSet) {
        obj.insert(QString("api_version"), ::OpenAPI::toJsonValue(m_api_version));
    }
    if (m_available_api_versions.size() > 0) {
        obj.insert(QString("available_api_versions"), ::OpenAPI::toJsonValue(m_available_api_versions));
    }
    if (m_available_endpoints.size() > 0) {
        obj.insert(QString("available_endpoints"), ::OpenAPI::toJsonValue(m_available_endpoints));
    }
    if (m_entry_types_by_format.size() > 0) {
        
        obj.insert(QString("entry_types_by_format"), toJsonValue(m_entry_types_by_format));
    }
    if (m_formats.size() > 0) {
        obj.insert(QString("formats"), ::OpenAPI::toJsonValue(m_formats));
    }
    if (m_is_index_isSet) {
        obj.insert(QString("is_index"), ::OpenAPI::toJsonValue(m_is_index));
    }
    return obj;
}

QString OAIBaseInfoAttributes::getApiVersion() const {
    return m_api_version;
}
void OAIBaseInfoAttributes::setApiVersion(const QString &api_version) {
    m_api_version = api_version;
    m_api_version_isSet = true;
}

bool OAIBaseInfoAttributes::is_api_version_Set() const{
    return m_api_version_isSet;
}

bool OAIBaseInfoAttributes::is_api_version_Valid() const{
    return m_api_version_isValid;
}

QList<OAIAvailableApiVersion> OAIBaseInfoAttributes::getAvailableApiVersions() const {
    return m_available_api_versions;
}
void OAIBaseInfoAttributes::setAvailableApiVersions(const QList<OAIAvailableApiVersion> &available_api_versions) {
    m_available_api_versions = available_api_versions;
    m_available_api_versions_isSet = true;
}

bool OAIBaseInfoAttributes::is_available_api_versions_Set() const{
    return m_available_api_versions_isSet;
}

bool OAIBaseInfoAttributes::is_available_api_versions_Valid() const{
    return m_available_api_versions_isValid;
}

QList<QString> OAIBaseInfoAttributes::getAvailableEndpoints() const {
    return m_available_endpoints;
}
void OAIBaseInfoAttributes::setAvailableEndpoints(const QList<QString> &available_endpoints) {
    m_available_endpoints = available_endpoints;
    m_available_endpoints_isSet = true;
}

bool OAIBaseInfoAttributes::is_available_endpoints_Set() const{
    return m_available_endpoints_isSet;
}

bool OAIBaseInfoAttributes::is_available_endpoints_Valid() const{
    return m_available_endpoints_isValid;
}

QMap<QString, QList<QString>> OAIBaseInfoAttributes::getEntryTypesByFormat() const {
    return m_entry_types_by_format;
}
void OAIBaseInfoAttributes::setEntryTypesByFormat(const QMap<QString, QList<QString>> &entry_types_by_format) {
    m_entry_types_by_format = entry_types_by_format;
    m_entry_types_by_format_isSet = true;
}

bool OAIBaseInfoAttributes::is_entry_types_by_format_Set() const{
    return m_entry_types_by_format_isSet;
}

bool OAIBaseInfoAttributes::is_entry_types_by_format_Valid() const{
    return m_entry_types_by_format_isValid;
}

QList<QString> OAIBaseInfoAttributes::getFormats() const {
    return m_formats;
}
void OAIBaseInfoAttributes::setFormats(const QList<QString> &formats) {
    m_formats = formats;
    m_formats_isSet = true;
}

bool OAIBaseInfoAttributes::is_formats_Set() const{
    return m_formats_isSet;
}

bool OAIBaseInfoAttributes::is_formats_Valid() const{
    return m_formats_isValid;
}

bool OAIBaseInfoAttributes::isIsIndex() const {
    return m_is_index;
}
void OAIBaseInfoAttributes::setIsIndex(const bool &is_index) {
    m_is_index = is_index;
    m_is_index_isSet = true;
}

bool OAIBaseInfoAttributes::is_is_index_Set() const{
    return m_is_index_isSet;
}

bool OAIBaseInfoAttributes::is_is_index_Valid() const{
    return m_is_index_isValid;
}

bool OAIBaseInfoAttributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_api_versions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_endpoints.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_entry_types_by_format.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_formats.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_index_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBaseInfoAttributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_api_version_isValid && m_available_api_versions_isValid && m_available_endpoints_isValid && m_entry_types_by_format_isValid && true;
}

} // namespace OpenAPI
