/**
 * OPTIMADE API
 * The [Open Databases Integration for Materials Design (OPTIMADE) consortium](https://www.optimade.org/) aims to make materials databases interoperational by developing a common REST API.  This specification is generated using [`optimade-python-tools`](https://github.com/Materials-Consortia/optimade-python-tools/tree/v0.16.0) v0.16.0.
 *
 * The version of the OpenAPI document: 1.1.0~develop
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISpecies.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISpecies::OAISpecies(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISpecies::OAISpecies() {
    this->initializeModel();
}

OAISpecies::~OAISpecies() {}

void OAISpecies::initializeModel() {

    m_attached_isSet = false;
    m_attached_isValid = false;

    m_chemical_symbols_isSet = false;
    m_chemical_symbols_isValid = false;

    m_concentration_isSet = false;
    m_concentration_isValid = false;

    m_mass_isSet = false;
    m_mass_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_nattached_isSet = false;
    m_nattached_isValid = false;

    m_original_name_isSet = false;
    m_original_name_isValid = false;
}

void OAISpecies::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISpecies::fromJsonObject(QJsonObject json) {

    m_attached_isValid = ::OpenAPI::fromJsonValue(m_attached, json[QString("attached")]);
    m_attached_isSet = !json[QString("attached")].isNull() && m_attached_isValid;

    m_chemical_symbols_isValid = ::OpenAPI::fromJsonValue(m_chemical_symbols, json[QString("chemical_symbols")]);
    m_chemical_symbols_isSet = !json[QString("chemical_symbols")].isNull() && m_chemical_symbols_isValid;

    m_concentration_isValid = ::OpenAPI::fromJsonValue(m_concentration, json[QString("concentration")]);
    m_concentration_isSet = !json[QString("concentration")].isNull() && m_concentration_isValid;

    m_mass_isValid = ::OpenAPI::fromJsonValue(m_mass, json[QString("mass")]);
    m_mass_isSet = !json[QString("mass")].isNull() && m_mass_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_nattached_isValid = ::OpenAPI::fromJsonValue(m_nattached, json[QString("nattached")]);
    m_nattached_isSet = !json[QString("nattached")].isNull() && m_nattached_isValid;

    m_original_name_isValid = ::OpenAPI::fromJsonValue(m_original_name, json[QString("original_name")]);
    m_original_name_isSet = !json[QString("original_name")].isNull() && m_original_name_isValid;
}

QString OAISpecies::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISpecies::asJsonObject() const {
    QJsonObject obj;
    if (m_attached.size() > 0) {
        obj.insert(QString("attached"), ::OpenAPI::toJsonValue(m_attached));
    }
    if (m_chemical_symbols.size() > 0) {
        obj.insert(QString("chemical_symbols"), ::OpenAPI::toJsonValue(m_chemical_symbols));
    }
    if (m_concentration.size() > 0) {
        obj.insert(QString("concentration"), ::OpenAPI::toJsonValue(m_concentration));
    }
    if (m_mass.size() > 0) {
        obj.insert(QString("mass"), ::OpenAPI::toJsonValue(m_mass));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_nattached.size() > 0) {
        obj.insert(QString("nattached"), ::OpenAPI::toJsonValue(m_nattached));
    }
    if (m_original_name_isSet) {
        obj.insert(QString("original_name"), ::OpenAPI::toJsonValue(m_original_name));
    }
    return obj;
}

QList<QString> OAISpecies::getAttached() const {
    return m_attached;
}
void OAISpecies::setAttached(const QList<QString> &attached) {
    m_attached = attached;
    m_attached_isSet = true;
}

bool OAISpecies::is_attached_Set() const{
    return m_attached_isSet;
}

bool OAISpecies::is_attached_Valid() const{
    return m_attached_isValid;
}

QList<QString> OAISpecies::getChemicalSymbols() const {
    return m_chemical_symbols;
}
void OAISpecies::setChemicalSymbols(const QList<QString> &chemical_symbols) {
    m_chemical_symbols = chemical_symbols;
    m_chemical_symbols_isSet = true;
}

bool OAISpecies::is_chemical_symbols_Set() const{
    return m_chemical_symbols_isSet;
}

bool OAISpecies::is_chemical_symbols_Valid() const{
    return m_chemical_symbols_isValid;
}

QList<double> OAISpecies::getConcentration() const {
    return m_concentration;
}
void OAISpecies::setConcentration(const QList<double> &concentration) {
    m_concentration = concentration;
    m_concentration_isSet = true;
}

bool OAISpecies::is_concentration_Set() const{
    return m_concentration_isSet;
}

bool OAISpecies::is_concentration_Valid() const{
    return m_concentration_isValid;
}

QList<double> OAISpecies::getMass() const {
    return m_mass;
}
void OAISpecies::setMass(const QList<double> &mass) {
    m_mass = mass;
    m_mass_isSet = true;
}

bool OAISpecies::is_mass_Set() const{
    return m_mass_isSet;
}

bool OAISpecies::is_mass_Valid() const{
    return m_mass_isValid;
}

QString OAISpecies::getName() const {
    return m_name;
}
void OAISpecies::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISpecies::is_name_Set() const{
    return m_name_isSet;
}

bool OAISpecies::is_name_Valid() const{
    return m_name_isValid;
}

QList<qint32> OAISpecies::getNattached() const {
    return m_nattached;
}
void OAISpecies::setNattached(const QList<qint32> &nattached) {
    m_nattached = nattached;
    m_nattached_isSet = true;
}

bool OAISpecies::is_nattached_Set() const{
    return m_nattached_isSet;
}

bool OAISpecies::is_nattached_Valid() const{
    return m_nattached_isValid;
}

QString OAISpecies::getOriginalName() const {
    return m_original_name;
}
void OAISpecies::setOriginalName(const QString &original_name) {
    m_original_name = original_name;
    m_original_name_isSet = true;
}

bool OAISpecies::is_original_name_Set() const{
    return m_original_name_isSet;
}

bool OAISpecies::is_original_name_Valid() const{
    return m_original_name_isValid;
}

bool OAISpecies::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attached.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_chemical_symbols.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_concentration.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mass.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nattached.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISpecies::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_chemical_symbols_isValid && m_concentration_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
