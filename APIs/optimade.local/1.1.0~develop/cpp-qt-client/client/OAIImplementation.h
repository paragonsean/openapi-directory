/**
 * OPTIMADE API
 * The [Open Databases Integration for Materials Design (OPTIMADE) consortium](https://www.optimade.org/) aims to make materials databases interoperational by developing a common REST API.  This specification is generated using [`optimade-python-tools`](https://github.com/Materials-Consortia/optimade-python-tools/tree/v0.16.0) v0.16.0.
 *
 * The version of the OpenAPI document: 1.1.0~develop
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIImplementation.h
 *
 * Information on the server implementation
 */

#ifndef OAIImplementation_H
#define OAIImplementation_H

#include <QJsonObject>

#include "OAIHomepage.h"
#include "OAIImplementationMaintainer.h"
#include "OAIIssue_Tracker.h"
#include "OAISource_Url.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIHomepage;
class OAIIssue_Tracker;
class OAIImplementationMaintainer;
class OAISource_Url;

class OAIImplementation : public OAIObject {
public:
    OAIImplementation();
    OAIImplementation(QString json);
    ~OAIImplementation() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIHomepage getHomepage() const;
    void setHomepage(const OAIHomepage &homepage);
    bool is_homepage_Set() const;
    bool is_homepage_Valid() const;

    OAIIssue_Tracker getIssueTracker() const;
    void setIssueTracker(const OAIIssue_Tracker &issue_tracker);
    bool is_issue_tracker_Set() const;
    bool is_issue_tracker_Valid() const;

    OAIImplementationMaintainer getMaintainer() const;
    void setMaintainer(const OAIImplementationMaintainer &maintainer);
    bool is_maintainer_Set() const;
    bool is_maintainer_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAISource_Url getSourceUrl() const;
    void setSourceUrl(const OAISource_Url &source_url);
    bool is_source_url_Set() const;
    bool is_source_url_Valid() const;

    QString getVersion() const;
    void setVersion(const QString &version);
    bool is_version_Set() const;
    bool is_version_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIHomepage m_homepage;
    bool m_homepage_isSet;
    bool m_homepage_isValid;

    OAIIssue_Tracker m_issue_tracker;
    bool m_issue_tracker_isSet;
    bool m_issue_tracker_isValid;

    OAIImplementationMaintainer m_maintainer;
    bool m_maintainer_isSet;
    bool m_maintainer_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAISource_Url m_source_url;
    bool m_source_url_isSet;
    bool m_source_url_isValid;

    QString m_version;
    bool m_version_isSet;
    bool m_version_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIImplementation)

#endif // OAIImplementation_H
