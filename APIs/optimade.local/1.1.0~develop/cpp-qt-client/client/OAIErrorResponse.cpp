/**
 * OPTIMADE API
 * The [Open Databases Integration for Materials Design (OPTIMADE) consortium](https://www.optimade.org/) aims to make materials databases interoperational by developing a common REST API.  This specification is generated using [`optimade-python-tools`](https://github.com/Materials-Consortia/optimade-python-tools/tree/v0.16.0) v0.16.0.
 *
 * The version of the OpenAPI document: 1.1.0~develop
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIErrorResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIErrorResponse::OAIErrorResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIErrorResponse::OAIErrorResponse() {
    this->initializeModel();
}

OAIErrorResponse::~OAIErrorResponse() {}

void OAIErrorResponse::initializeModel() {

    m_data_isSet = false;
    m_data_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_included_isSet = false;
    m_included_isValid = false;

    m_jsonapi_isSet = false;
    m_jsonapi_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_meta_isSet = false;
    m_meta_isValid = false;
}

void OAIErrorResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIErrorResponse::fromJsonObject(QJsonObject json) {

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_included_isValid = ::OpenAPI::fromJsonValue(m_included, json[QString("included")]);
    m_included_isSet = !json[QString("included")].isNull() && m_included_isValid;

    m_jsonapi_isValid = ::OpenAPI::fromJsonValue(m_jsonapi, json[QString("jsonapi")]);
    m_jsonapi_isSet = !json[QString("jsonapi")].isNull() && m_jsonapi_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_meta_isValid = ::OpenAPI::fromJsonValue(m_meta, json[QString("meta")]);
    m_meta_isSet = !json[QString("meta")].isNull() && m_meta_isValid;
}

QString OAIErrorResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIErrorResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_data.isSet()) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_errors.size() > 0) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_included.size() > 0) {
        obj.insert(QString("included"), ::OpenAPI::toJsonValue(m_included));
    }
    if (m_jsonapi.isSet()) {
        obj.insert(QString("jsonapi"), ::OpenAPI::toJsonValue(m_jsonapi));
    }
    if (m_links.isSet()) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_meta.isSet()) {
        obj.insert(QString("meta"), ::OpenAPI::toJsonValue(m_meta));
    }
    return obj;
}

OAIData OAIErrorResponse::getData() const {
    return m_data;
}
void OAIErrorResponse::setData(const OAIData &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIErrorResponse::is_data_Set() const{
    return m_data_isSet;
}

bool OAIErrorResponse::is_data_Valid() const{
    return m_data_isValid;
}

QSet<OAIOptimadeError> OAIErrorResponse::getErrors() const {
    return m_errors;
}
void OAIErrorResponse::setErrors(const QSet<OAIOptimadeError> &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAIErrorResponse::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIErrorResponse::is_errors_Valid() const{
    return m_errors_isValid;
}

QSet<OAIResource> OAIErrorResponse::getIncluded() const {
    return m_included;
}
void OAIErrorResponse::setIncluded(const QSet<OAIResource> &included) {
    m_included = included;
    m_included_isSet = true;
}

bool OAIErrorResponse::is_included_Set() const{
    return m_included_isSet;
}

bool OAIErrorResponse::is_included_Valid() const{
    return m_included_isValid;
}

OAIJsonApi OAIErrorResponse::getJsonapi() const {
    return m_jsonapi;
}
void OAIErrorResponse::setJsonapi(const OAIJsonApi &jsonapi) {
    m_jsonapi = jsonapi;
    m_jsonapi_isSet = true;
}

bool OAIErrorResponse::is_jsonapi_Set() const{
    return m_jsonapi_isSet;
}

bool OAIErrorResponse::is_jsonapi_Valid() const{
    return m_jsonapi_isValid;
}

OAIToplevelLinks OAIErrorResponse::getLinks() const {
    return m_links;
}
void OAIErrorResponse::setLinks(const OAIToplevelLinks &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIErrorResponse::is_links_Set() const{
    return m_links_isSet;
}

bool OAIErrorResponse::is_links_Valid() const{
    return m_links_isValid;
}

OAIResponseMeta OAIErrorResponse::getMeta() const {
    return m_meta;
}
void OAIErrorResponse::setMeta(const OAIResponseMeta &meta) {
    m_meta = meta;
    m_meta_isSet = true;
}

bool OAIErrorResponse::is_meta_Set() const{
    return m_meta_isSet;
}

bool OAIErrorResponse::is_meta_Valid() const{
    return m_meta_isValid;
}

bool OAIErrorResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_included.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_jsonapi.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_meta.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIErrorResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_errors_isValid && m_meta_isValid && true;
}

} // namespace OpenAPI
