/**
 * OPTIMADE API
 * The [Open Databases Integration for Materials Design (OPTIMADE) consortium](https://www.optimade.org/) aims to make materials databases interoperational by developing a common REST API.  This specification is generated using [`optimade-python-tools`](https://github.com/Materials-Consortia/optimade-python-tools/tree/v0.16.0) v0.16.0.
 *
 * The version of the OpenAPI document: 1.1.0~develop
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIEntryInfoResponse.h
 *
 * errors are not allowed
 */

#ifndef OAIEntryInfoResponse_H
#define OAIEntryInfoResponse_H

#include <QJsonObject>

#include "OAIEntryInfoResource.h"
#include "OAIError.h"
#include "OAIJsonApi.h"
#include "OAIResource.h"
#include "OAIResponseMeta.h"
#include "OAIToplevelLinks.h"
#include <QSet>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIEntryInfoResource;
class OAIError;
class OAIResource;
class OAIJsonApi;
class OAIToplevelLinks;
class OAIResponseMeta;

class OAIEntryInfoResponse : public OAIObject {
public:
    OAIEntryInfoResponse();
    OAIEntryInfoResponse(QString json);
    ~OAIEntryInfoResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIEntryInfoResource getData() const;
    void setData(const OAIEntryInfoResource &data);
    bool is_data_Set() const;
    bool is_data_Valid() const;

    QSet<OAIError> getErrors() const;
    void setErrors(const QSet<OAIError> &errors);
    bool is_errors_Set() const;
    bool is_errors_Valid() const;

    QSet<OAIResource> getIncluded() const;
    void setIncluded(const QSet<OAIResource> &included);
    bool is_included_Set() const;
    bool is_included_Valid() const;

    OAIJsonApi getJsonapi() const;
    void setJsonapi(const OAIJsonApi &jsonapi);
    bool is_jsonapi_Set() const;
    bool is_jsonapi_Valid() const;

    OAIToplevelLinks getLinks() const;
    void setLinks(const OAIToplevelLinks &links);
    bool is_links_Set() const;
    bool is_links_Valid() const;

    OAIResponseMeta getMeta() const;
    void setMeta(const OAIResponseMeta &meta);
    bool is_meta_Set() const;
    bool is_meta_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIEntryInfoResource m_data;
    bool m_data_isSet;
    bool m_data_isValid;

    QSet<OAIError> m_errors;
    bool m_errors_isSet;
    bool m_errors_isValid;

    QSet<OAIResource> m_included;
    bool m_included_isSet;
    bool m_included_isValid;

    OAIJsonApi m_jsonapi;
    bool m_jsonapi_isSet;
    bool m_jsonapi_isValid;

    OAIToplevelLinks m_links;
    bool m_links_isSet;
    bool m_links_isValid;

    OAIResponseMeta m_meta;
    bool m_meta_isSet;
    bool m_meta_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIEntryInfoResponse)

#endif // OAIEntryInfoResponse_H
