/**
 * OPTIMADE API
 * The [Open Databases Integration for Materials Design (OPTIMADE) consortium](https://www.optimade.org/) aims to make materials databases interoperational by developing a common REST API.  This specification is generated using [`optimade-python-tools`](https://github.com/Materials-Consortia/optimade-python-tools/tree/v0.16.0) v0.16.0.
 *
 * The version of the OpenAPI document: 1.1.0~develop
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImplementation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImplementation::OAIImplementation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImplementation::OAIImplementation() {
    this->initializeModel();
}

OAIImplementation::~OAIImplementation() {}

void OAIImplementation::initializeModel() {

    m_homepage_isSet = false;
    m_homepage_isValid = false;

    m_issue_tracker_isSet = false;
    m_issue_tracker_isValid = false;

    m_maintainer_isSet = false;
    m_maintainer_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_source_url_isSet = false;
    m_source_url_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIImplementation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImplementation::fromJsonObject(QJsonObject json) {

    m_homepage_isValid = ::OpenAPI::fromJsonValue(m_homepage, json[QString("homepage")]);
    m_homepage_isSet = !json[QString("homepage")].isNull() && m_homepage_isValid;

    m_issue_tracker_isValid = ::OpenAPI::fromJsonValue(m_issue_tracker, json[QString("issue_tracker")]);
    m_issue_tracker_isSet = !json[QString("issue_tracker")].isNull() && m_issue_tracker_isValid;

    m_maintainer_isValid = ::OpenAPI::fromJsonValue(m_maintainer, json[QString("maintainer")]);
    m_maintainer_isSet = !json[QString("maintainer")].isNull() && m_maintainer_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_source_url_isValid = ::OpenAPI::fromJsonValue(m_source_url, json[QString("source_url")]);
    m_source_url_isSet = !json[QString("source_url")].isNull() && m_source_url_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIImplementation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImplementation::asJsonObject() const {
    QJsonObject obj;
    if (m_homepage.isSet()) {
        obj.insert(QString("homepage"), ::OpenAPI::toJsonValue(m_homepage));
    }
    if (m_issue_tracker.isSet()) {
        obj.insert(QString("issue_tracker"), ::OpenAPI::toJsonValue(m_issue_tracker));
    }
    if (m_maintainer.isSet()) {
        obj.insert(QString("maintainer"), ::OpenAPI::toJsonValue(m_maintainer));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_source_url.isSet()) {
        obj.insert(QString("source_url"), ::OpenAPI::toJsonValue(m_source_url));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

OAIHomepage OAIImplementation::getHomepage() const {
    return m_homepage;
}
void OAIImplementation::setHomepage(const OAIHomepage &homepage) {
    m_homepage = homepage;
    m_homepage_isSet = true;
}

bool OAIImplementation::is_homepage_Set() const{
    return m_homepage_isSet;
}

bool OAIImplementation::is_homepage_Valid() const{
    return m_homepage_isValid;
}

OAIIssue_Tracker OAIImplementation::getIssueTracker() const {
    return m_issue_tracker;
}
void OAIImplementation::setIssueTracker(const OAIIssue_Tracker &issue_tracker) {
    m_issue_tracker = issue_tracker;
    m_issue_tracker_isSet = true;
}

bool OAIImplementation::is_issue_tracker_Set() const{
    return m_issue_tracker_isSet;
}

bool OAIImplementation::is_issue_tracker_Valid() const{
    return m_issue_tracker_isValid;
}

OAIImplementationMaintainer OAIImplementation::getMaintainer() const {
    return m_maintainer;
}
void OAIImplementation::setMaintainer(const OAIImplementationMaintainer &maintainer) {
    m_maintainer = maintainer;
    m_maintainer_isSet = true;
}

bool OAIImplementation::is_maintainer_Set() const{
    return m_maintainer_isSet;
}

bool OAIImplementation::is_maintainer_Valid() const{
    return m_maintainer_isValid;
}

QString OAIImplementation::getName() const {
    return m_name;
}
void OAIImplementation::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIImplementation::is_name_Set() const{
    return m_name_isSet;
}

bool OAIImplementation::is_name_Valid() const{
    return m_name_isValid;
}

OAISource_Url OAIImplementation::getSourceUrl() const {
    return m_source_url;
}
void OAIImplementation::setSourceUrl(const OAISource_Url &source_url) {
    m_source_url = source_url;
    m_source_url_isSet = true;
}

bool OAIImplementation::is_source_url_Set() const{
    return m_source_url_isSet;
}

bool OAIImplementation::is_source_url_Valid() const{
    return m_source_url_isValid;
}

QString OAIImplementation::getVersion() const {
    return m_version;
}
void OAIImplementation::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIImplementation::is_version_Set() const{
    return m_version_isSet;
}

bool OAIImplementation::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIImplementation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_homepage.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_issue_tracker.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_maintainer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_url.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImplementation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
