/**
 * OPTIMADE API
 * The [Open Databases Integration for Materials Design (OPTIMADE) consortium](https://www.optimade.org/) aims to make materials databases interoperational by developing a common REST API.  This specification is generated using [`optimade-python-tools`](https://github.com/Materials-Consortia/optimade-python-tools/tree/v0.16.0) v0.16.0.
 *
 * The version of the OpenAPI document: 1.1.0~develop
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBaseInfoAttributes.h
 *
 * Attributes for Base URL Info endpoint
 */

#ifndef OAIBaseInfoAttributes_H
#define OAIBaseInfoAttributes_H

#include <QJsonObject>

#include "OAIAvailableApiVersion.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAvailableApiVersion;

class OAIBaseInfoAttributes : public OAIObject {
public:
    OAIBaseInfoAttributes();
    OAIBaseInfoAttributes(QString json);
    ~OAIBaseInfoAttributes() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getApiVersion() const;
    void setApiVersion(const QString &api_version);
    bool is_api_version_Set() const;
    bool is_api_version_Valid() const;

    QList<OAIAvailableApiVersion> getAvailableApiVersions() const;
    void setAvailableApiVersions(const QList<OAIAvailableApiVersion> &available_api_versions);
    bool is_available_api_versions_Set() const;
    bool is_available_api_versions_Valid() const;

    QList<QString> getAvailableEndpoints() const;
    void setAvailableEndpoints(const QList<QString> &available_endpoints);
    bool is_available_endpoints_Set() const;
    bool is_available_endpoints_Valid() const;

    QMap<QString, QList<QString>> getEntryTypesByFormat() const;
    void setEntryTypesByFormat(const QMap<QString, QList<QString>> &entry_types_by_format);
    bool is_entry_types_by_format_Set() const;
    bool is_entry_types_by_format_Valid() const;

    QList<QString> getFormats() const;
    void setFormats(const QList<QString> &formats);
    bool is_formats_Set() const;
    bool is_formats_Valid() const;

    bool isIsIndex() const;
    void setIsIndex(const bool &is_index);
    bool is_is_index_Set() const;
    bool is_is_index_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_api_version;
    bool m_api_version_isSet;
    bool m_api_version_isValid;

    QList<OAIAvailableApiVersion> m_available_api_versions;
    bool m_available_api_versions_isSet;
    bool m_available_api_versions_isValid;

    QList<QString> m_available_endpoints;
    bool m_available_endpoints_isSet;
    bool m_available_endpoints_isValid;

    QMap<QString, QList<QString>> m_entry_types_by_format;
    bool m_entry_types_by_format_isSet;
    bool m_entry_types_by_format_isValid;

    QList<QString> m_formats;
    bool m_formats_isSet;
    bool m_formats_isValid;

    bool m_is_index;
    bool m_is_index_isSet;
    bool m_is_index_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBaseInfoAttributes)

#endif // OAIBaseInfoAttributes_H
