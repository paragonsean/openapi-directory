# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.link import Link
from openapi_server import util


class BaseUrl(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, href: str=None, meta: object=None):
        """BaseUrl - a model defined in OpenAPI

        :param href: The href of this BaseUrl.
        :param meta: The meta of this BaseUrl.
        """
        self.openapi_types = {
            'href': str,
            'meta': object
        }

        self.attribute_map = {
            'href': 'href',
            'meta': 'meta'
        }

        self._href = href
        self._meta = meta

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BaseUrl':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Base_Url of this BaseUrl.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def href(self):
        """Gets the href of this BaseUrl.

        a string containing the link’s URL.

        :return: The href of this BaseUrl.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this BaseUrl.

        a string containing the link’s URL.

        :param href: The href of this BaseUrl.
        :type href: str
        """
        if href is None:
            raise ValueError("Invalid value for `href`, must not be `None`")
        if href is not None and len(href) > 65536:
            raise ValueError("Invalid value for `href`, length must be less than or equal to `65536`")
        if href is not None and len(href) < 1:
            raise ValueError("Invalid value for `href`, length must be greater than or equal to `1`")

        self._href = href

    @property
    def meta(self):
        """Gets the meta of this BaseUrl.

        a meta object containing non-standard meta-information about the link.

        :return: The meta of this BaseUrl.
        :rtype: object
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this BaseUrl.

        a meta object containing non-standard meta-information about the link.

        :param meta: The meta of this BaseUrl.
        :type meta: object
        """

        self._meta = meta
