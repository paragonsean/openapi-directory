# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.entry_relationships import EntryRelationships
from openapi_server.models.reference_resource_attributes import ReferenceResourceAttributes
from openapi_server.models.resource_links import ResourceLinks
import re
from openapi_server import util


class ReferenceResource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attributes: ReferenceResourceAttributes=None, id: str=None, links: ResourceLinks=None, meta: object=None, relationships: EntryRelationships=None, type: str=None):
        """ReferenceResource - a model defined in OpenAPI

        :param attributes: The attributes of this ReferenceResource.
        :param id: The id of this ReferenceResource.
        :param links: The links of this ReferenceResource.
        :param meta: The meta of this ReferenceResource.
        :param relationships: The relationships of this ReferenceResource.
        :param type: The type of this ReferenceResource.
        """
        self.openapi_types = {
            'attributes': ReferenceResourceAttributes,
            'id': str,
            'links': ResourceLinks,
            'meta': object,
            'relationships': EntryRelationships,
            'type': str
        }

        self.attribute_map = {
            'attributes': 'attributes',
            'id': 'id',
            'links': 'links',
            'meta': 'meta',
            'relationships': 'relationships',
            'type': 'type'
        }

        self._attributes = attributes
        self._id = id
        self._links = links
        self._meta = meta
        self._relationships = relationships
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReferenceResource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReferenceResource of this ReferenceResource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attributes(self):
        """Gets the attributes of this ReferenceResource.


        :return: The attributes of this ReferenceResource.
        :rtype: ReferenceResourceAttributes
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this ReferenceResource.


        :param attributes: The attributes of this ReferenceResource.
        :type attributes: ReferenceResourceAttributes
        """
        if attributes is None:
            raise ValueError("Invalid value for `attributes`, must not be `None`")

        self._attributes = attributes

    @property
    def id(self):
        """Gets the id of this ReferenceResource.

        An entry's ID as defined in section Definition of Terms.  - **Type**: string.  - **Requirements/Conventions**:     - **Support**: MUST be supported by all implementations, MUST NOT be `null`.     - **Query**: MUST be a queryable property with support for all mandatory filter features.     - **Response**: REQUIRED in the response.  - **Examples**:     - `\"db/1234567\"`     - `\"cod/2000000\"`     - `\"cod/2000000@1234567\"`     - `\"nomad/L1234567890\"`     - `\"42\"`

        :return: The id of this ReferenceResource.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ReferenceResource.

        An entry's ID as defined in section Definition of Terms.  - **Type**: string.  - **Requirements/Conventions**:     - **Support**: MUST be supported by all implementations, MUST NOT be `null`.     - **Query**: MUST be a queryable property with support for all mandatory filter features.     - **Response**: REQUIRED in the response.  - **Examples**:     - `\"db/1234567\"`     - `\"cod/2000000\"`     - `\"cod/2000000@1234567\"`     - `\"nomad/L1234567890\"`     - `\"42\"`

        :param id: The id of this ReferenceResource.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def links(self):
        """Gets the links of this ReferenceResource.

        a links object containing links related to the resource.

        :return: The links of this ReferenceResource.
        :rtype: ResourceLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ReferenceResource.

        a links object containing links related to the resource.

        :param links: The links of this ReferenceResource.
        :type links: ResourceLinks
        """

        self._links = links

    @property
    def meta(self):
        """Gets the meta of this ReferenceResource.

        a meta object containing non-standard meta-information about a resource that can not be represented as an attribute or relationship.

        :return: The meta of this ReferenceResource.
        :rtype: object
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this ReferenceResource.

        a meta object containing non-standard meta-information about a resource that can not be represented as an attribute or relationship.

        :param meta: The meta of this ReferenceResource.
        :type meta: object
        """

        self._meta = meta

    @property
    def relationships(self):
        """Gets the relationships of this ReferenceResource.

        A dictionary containing references to other entries according to the description in section Relationships encoded as [JSON API Relationships](https://jsonapi.org/format/1.0/#document-resource-object-relationships). The OPTIONAL human-readable description of the relationship MAY be provided in the `description` field inside the `meta` dictionary of the JSON API resource identifier object.

        :return: The relationships of this ReferenceResource.
        :rtype: EntryRelationships
        """
        return self._relationships

    @relationships.setter
    def relationships(self, relationships):
        """Sets the relationships of this ReferenceResource.

        A dictionary containing references to other entries according to the description in section Relationships encoded as [JSON API Relationships](https://jsonapi.org/format/1.0/#document-resource-object-relationships). The OPTIONAL human-readable description of the relationship MAY be provided in the `description` field inside the `meta` dictionary of the JSON API resource identifier object.

        :param relationships: The relationships of this ReferenceResource.
        :type relationships: EntryRelationships
        """

        self._relationships = relationships

    @property
    def type(self):
        """Gets the type of this ReferenceResource.

        The name of the type of an entry. - **Type**: string. - **Requirements/Conventions**:     - **Support**: MUST be supported by all implementations, MUST NOT be `null`.     - **Query**: MUST be a queryable property with support for all mandatory filter features.     - **Response**: REQUIRED in the response.     - MUST be an existing entry type.     - The entry of type <type> and ID <id> MUST be returned in response to a request for `/<type>/<id>` under the versioned base URL. - **Example**: `\"structures\"`

        :return: The type of this ReferenceResource.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ReferenceResource.

        The name of the type of an entry. - **Type**: string. - **Requirements/Conventions**:     - **Support**: MUST be supported by all implementations, MUST NOT be `null`.     - **Query**: MUST be a queryable property with support for all mandatory filter features.     - **Response**: REQUIRED in the response.     - MUST be an existing entry type.     - The entry of type <type> and ID <id> MUST be returned in response to a request for `/<type>/<id>` under the versioned base URL. - **Example**: `\"structures\"`

        :param type: The type of this ReferenceResource.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")
        if type is not None and not re.search(r'^references$', type):
            raise ValueError("Invalid value for `type`, must be a follow pattern or equal to `/^references$/`")

        self._type = type
