# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Person(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, firstname: str=None, lastname: str=None, name: str=None):
        """Person - a model defined in OpenAPI

        :param firstname: The firstname of this Person.
        :param lastname: The lastname of this Person.
        :param name: The name of this Person.
        """
        self.openapi_types = {
            'firstname': str,
            'lastname': str,
            'name': str
        }

        self.attribute_map = {
            'firstname': 'firstname',
            'lastname': 'lastname',
            'name': 'name'
        }

        self._firstname = firstname
        self._lastname = lastname
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Person':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Person of this Person.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def firstname(self):
        """Gets the firstname of this Person.

        First name of the person.

        :return: The firstname of this Person.
        :rtype: str
        """
        return self._firstname

    @firstname.setter
    def firstname(self, firstname):
        """Sets the firstname of this Person.

        First name of the person.

        :param firstname: The firstname of this Person.
        :type firstname: str
        """

        self._firstname = firstname

    @property
    def lastname(self):
        """Gets the lastname of this Person.

        Last name of the person.

        :return: The lastname of this Person.
        :rtype: str
        """
        return self._lastname

    @lastname.setter
    def lastname(self, lastname):
        """Sets the lastname of this Person.

        Last name of the person.

        :param lastname: The lastname of this Person.
        :type lastname: str
        """

        self._lastname = lastname

    @property
    def name(self):
        """Gets the name of this Person.

        Full name of the person, REQUIRED.

        :return: The name of this Person.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Person.

        Full name of the person, REQUIRED.

        :param name: The name of this Person.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
