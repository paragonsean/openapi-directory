# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.data_type import DataType
from openapi_server import util


class EntryInfoProperty(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, sortable: bool=None, type: DataType=None, unit: str=None):
        """EntryInfoProperty - a model defined in OpenAPI

        :param description: The description of this EntryInfoProperty.
        :param sortable: The sortable of this EntryInfoProperty.
        :param type: The type of this EntryInfoProperty.
        :param unit: The unit of this EntryInfoProperty.
        """
        self.openapi_types = {
            'description': str,
            'sortable': bool,
            'type': DataType,
            'unit': str
        }

        self.attribute_map = {
            'description': 'description',
            'sortable': 'sortable',
            'type': 'type',
            'unit': 'unit'
        }

        self._description = description
        self._sortable = sortable
        self._type = type
        self._unit = unit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EntryInfoProperty':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EntryInfoProperty of this EntryInfoProperty.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this EntryInfoProperty.

        A human-readable description of the entry property

        :return: The description of this EntryInfoProperty.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EntryInfoProperty.

        A human-readable description of the entry property

        :param description: The description of this EntryInfoProperty.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def sortable(self):
        """Gets the sortable of this EntryInfoProperty.

        Defines whether the entry property can be used for sorting with the \"sort\" parameter. If the entry listing endpoint supports sorting, this key MUST be present for sortable properties with value `true`.

        :return: The sortable of this EntryInfoProperty.
        :rtype: bool
        """
        return self._sortable

    @sortable.setter
    def sortable(self, sortable):
        """Sets the sortable of this EntryInfoProperty.

        Defines whether the entry property can be used for sorting with the \"sort\" parameter. If the entry listing endpoint supports sorting, this key MUST be present for sortable properties with value `true`.

        :param sortable: The sortable of this EntryInfoProperty.
        :type sortable: bool
        """

        self._sortable = sortable

    @property
    def type(self):
        """Gets the type of this EntryInfoProperty.

        The type of the property's value. This MUST be any of the types defined in the Data types section. For the purpose of compatibility with future versions of this specification, a client MUST accept values that are not `string` values specifying any of the OPTIMADE Data types, but MUST then also disregard the `type` field. Note, if the value is a nested type, only the outermost type should be reported. E.g., for the entry resource `structures`, the `species` property is defined as a list of dictionaries, hence its `type` value would be `list`.

        :return: The type of this EntryInfoProperty.
        :rtype: DataType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EntryInfoProperty.

        The type of the property's value. This MUST be any of the types defined in the Data types section. For the purpose of compatibility with future versions of this specification, a client MUST accept values that are not `string` values specifying any of the OPTIMADE Data types, but MUST then also disregard the `type` field. Note, if the value is a nested type, only the outermost type should be reported. E.g., for the entry resource `structures`, the `species` property is defined as a list of dictionaries, hence its `type` value would be `list`.

        :param type: The type of this EntryInfoProperty.
        :type type: DataType
        """

        self._type = type

    @property
    def unit(self):
        """Gets the unit of this EntryInfoProperty.

        The physical unit of the entry property. This MUST be a valid representation of units according to version 2.1 of [The Unified Code for Units of Measure](https://unitsofmeasure.org/ucum.html). It is RECOMMENDED that non-standard (non-SI) units are described in the description for the property.

        :return: The unit of this EntryInfoProperty.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this EntryInfoProperty.

        The physical unit of the entry property. This MUST be a valid representation of units according to version 2.1 of [The Unified Code for Units of Measure](https://unitsofmeasure.org/ucum.html). It is RECOMMENDED that non-standard (non-SI) units are described in the description for the property.

        :param unit: The unit of this EntryInfoProperty.
        :type unit: str
        """

        self._unit = unit
