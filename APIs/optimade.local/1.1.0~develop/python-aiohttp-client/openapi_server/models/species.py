# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Species(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attached: List[str]=None, chemical_symbols: List[str]=None, concentration: List[float]=None, mass: List[float]=None, name: str=None, nattached: List[int]=None, original_name: str=None):
        """Species - a model defined in OpenAPI

        :param attached: The attached of this Species.
        :param chemical_symbols: The chemical_symbols of this Species.
        :param concentration: The concentration of this Species.
        :param mass: The mass of this Species.
        :param name: The name of this Species.
        :param nattached: The nattached of this Species.
        :param original_name: The original_name of this Species.
        """
        self.openapi_types = {
            'attached': List[str],
            'chemical_symbols': List[str],
            'concentration': List[float],
            'mass': List[float],
            'name': str,
            'nattached': List[int],
            'original_name': str
        }

        self.attribute_map = {
            'attached': 'attached',
            'chemical_symbols': 'chemical_symbols',
            'concentration': 'concentration',
            'mass': 'mass',
            'name': 'name',
            'nattached': 'nattached',
            'original_name': 'original_name'
        }

        self._attached = attached
        self._chemical_symbols = chemical_symbols
        self._concentration = concentration
        self._mass = mass
        self._name = name
        self._nattached = nattached
        self._original_name = original_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Species':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Species of this Species.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attached(self):
        """Gets the attached of this Species.

        If provided MUST be a list of length 1 or more of strings of chemical symbols for the elements attached to this site, or \"X\" for a non-chemical element.

        :return: The attached of this Species.
        :rtype: List[str]
        """
        return self._attached

    @attached.setter
    def attached(self, attached):
        """Sets the attached of this Species.

        If provided MUST be a list of length 1 or more of strings of chemical symbols for the elements attached to this site, or \"X\" for a non-chemical element.

        :param attached: The attached of this Species.
        :type attached: List[str]
        """

        self._attached = attached

    @property
    def chemical_symbols(self):
        """Gets the chemical_symbols of this Species.

        MUST be a list of strings of all chemical elements composing this species. Each item of the list MUST be one of the following:  - a valid chemical-element name, or - the special value `\"X\"` to represent a non-chemical element, or - the special value `\"vacancy\"` to represent that this site has a non-zero probability of having a vacancy (the respective probability is indicated in the `concentration` list, see below).  If any one entry in the `species` list has a `chemical_symbols` list that is longer than 1 element, the correct flag MUST be set in the list `structure_features`.

        :return: The chemical_symbols of this Species.
        :rtype: List[str]
        """
        return self._chemical_symbols

    @chemical_symbols.setter
    def chemical_symbols(self, chemical_symbols):
        """Sets the chemical_symbols of this Species.

        MUST be a list of strings of all chemical elements composing this species. Each item of the list MUST be one of the following:  - a valid chemical-element name, or - the special value `\"X\"` to represent a non-chemical element, or - the special value `\"vacancy\"` to represent that this site has a non-zero probability of having a vacancy (the respective probability is indicated in the `concentration` list, see below).  If any one entry in the `species` list has a `chemical_symbols` list that is longer than 1 element, the correct flag MUST be set in the list `structure_features`.

        :param chemical_symbols: The chemical_symbols of this Species.
        :type chemical_symbols: List[str]
        """
        if chemical_symbols is None:
            raise ValueError("Invalid value for `chemical_symbols`, must not be `None`")

        self._chemical_symbols = chemical_symbols

    @property
    def concentration(self):
        """Gets the concentration of this Species.

        MUST be a list of floats, with same length as `chemical_symbols`. The numbers represent the relative concentration of the corresponding chemical symbol in this species. The numbers SHOULD sum to one. Cases in which the numbers do not sum to one typically fall only in the following two categories:  - Numerical errors when representing float numbers in fixed precision, e.g. for two chemical symbols with concentrations `1/3` and `2/3`, the concentration might look something like `[0.33333333333, 0.66666666666]`. If the client is aware that the sum is not one because of numerical precision, it can renormalize the values so that the sum is exactly one. - Experimental errors in the data present in the database. In this case, it is the responsibility of the client to decide how to process the data.  Note that concentrations are uncorrelated between different site (even of the same species).

        :return: The concentration of this Species.
        :rtype: List[float]
        """
        return self._concentration

    @concentration.setter
    def concentration(self, concentration):
        """Sets the concentration of this Species.

        MUST be a list of floats, with same length as `chemical_symbols`. The numbers represent the relative concentration of the corresponding chemical symbol in this species. The numbers SHOULD sum to one. Cases in which the numbers do not sum to one typically fall only in the following two categories:  - Numerical errors when representing float numbers in fixed precision, e.g. for two chemical symbols with concentrations `1/3` and `2/3`, the concentration might look something like `[0.33333333333, 0.66666666666]`. If the client is aware that the sum is not one because of numerical precision, it can renormalize the values so that the sum is exactly one. - Experimental errors in the data present in the database. In this case, it is the responsibility of the client to decide how to process the data.  Note that concentrations are uncorrelated between different site (even of the same species).

        :param concentration: The concentration of this Species.
        :type concentration: List[float]
        """
        if concentration is None:
            raise ValueError("Invalid value for `concentration`, must not be `None`")

        self._concentration = concentration

    @property
    def mass(self):
        """Gets the mass of this Species.

        If present MUST be a list of floats expressed in a.m.u. Elements denoting vacancies MUST have masses equal to 0.

        :return: The mass of this Species.
        :rtype: List[float]
        """
        return self._mass

    @mass.setter
    def mass(self, mass):
        """Sets the mass of this Species.

        If present MUST be a list of floats expressed in a.m.u. Elements denoting vacancies MUST have masses equal to 0.

        :param mass: The mass of this Species.
        :type mass: List[float]
        """

        self._mass = mass

    @property
    def name(self):
        """Gets the name of this Species.

        Gives the name of the species; the **name** value MUST be unique in the `species` list.

        :return: The name of this Species.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Species.

        Gives the name of the species; the **name** value MUST be unique in the `species` list.

        :param name: The name of this Species.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def nattached(self):
        """Gets the nattached of this Species.

        If provided MUST be a list of length 1 or more of integers indicating the number of attached atoms of the kind specified in the value of the :field:`attached` key.

        :return: The nattached of this Species.
        :rtype: List[int]
        """
        return self._nattached

    @nattached.setter
    def nattached(self, nattached):
        """Sets the nattached of this Species.

        If provided MUST be a list of length 1 or more of integers indicating the number of attached atoms of the kind specified in the value of the :field:`attached` key.

        :param nattached: The nattached of this Species.
        :type nattached: List[int]
        """

        self._nattached = nattached

    @property
    def original_name(self):
        """Gets the original_name of this Species.

        Can be any valid Unicode string, and SHOULD contain (if specified) the name of the species that is used internally in the source database.  Note: With regards to \"source database\", we refer to the immediate source being queried via the OPTIMADE API implementation.

        :return: The original_name of this Species.
        :rtype: str
        """
        return self._original_name

    @original_name.setter
    def original_name(self, original_name):
        """Sets the original_name of this Species.

        Can be any valid Unicode string, and SHOULD contain (if specified) the name of the species that is used internally in the source database.  Note: With regards to \"source database\", we refer to the immediate source being queried via the OPTIMADE API implementation.

        :param original_name: The original_name of this Species.
        :type original_name: str
        """

        self._original_name = original_name
