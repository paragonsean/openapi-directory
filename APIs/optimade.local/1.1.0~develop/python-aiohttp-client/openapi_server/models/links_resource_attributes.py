# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.aggregate import Aggregate
from openapi_server.models.base_url import BaseUrl
from openapi_server.models.homepage1 import Homepage1
from openapi_server.models.link_type import LinkType
from openapi_server import util


class LinksResourceAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aggregate: Aggregate=None, base_url: BaseUrl=None, description: str=None, homepage: Homepage1=None, link_type: LinkType=None, name: str=None, no_aggregate_reason: str=None):
        """LinksResourceAttributes - a model defined in OpenAPI

        :param aggregate: The aggregate of this LinksResourceAttributes.
        :param base_url: The base_url of this LinksResourceAttributes.
        :param description: The description of this LinksResourceAttributes.
        :param homepage: The homepage of this LinksResourceAttributes.
        :param link_type: The link_type of this LinksResourceAttributes.
        :param name: The name of this LinksResourceAttributes.
        :param no_aggregate_reason: The no_aggregate_reason of this LinksResourceAttributes.
        """
        self.openapi_types = {
            'aggregate': Aggregate,
            'base_url': BaseUrl,
            'description': str,
            'homepage': Homepage1,
            'link_type': LinkType,
            'name': str,
            'no_aggregate_reason': str
        }

        self.attribute_map = {
            'aggregate': 'aggregate',
            'base_url': 'base_url',
            'description': 'description',
            'homepage': 'homepage',
            'link_type': 'link_type',
            'name': 'name',
            'no_aggregate_reason': 'no_aggregate_reason'
        }

        self._aggregate = aggregate
        self._base_url = base_url
        self._description = description
        self._homepage = homepage
        self._link_type = link_type
        self._name = name
        self._no_aggregate_reason = no_aggregate_reason

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LinksResourceAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LinksResourceAttributes of this LinksResourceAttributes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aggregate(self):
        """Gets the aggregate of this LinksResourceAttributes.

        A string indicating whether a client that is following links to aggregate results from different OPTIMADE implementations should follow this link or not. This flag SHOULD NOT be indicated for links where `link_type` is not `child`.  If not specified, clients MAY assume that the value is `ok`. If specified, and the value is anything different than `ok`, the client MUST assume that the server is suggesting not to follow the link during aggregation by default (also if the value is not among the known ones, in case a future specification adds new accepted values).  Specific values indicate the reason why the server is providing the suggestion. A client MAY follow the link anyway if it has reason to do so (e.g., if the client is looking for all test databases, it MAY follow the links marked with `aggregate`=`test`).  If specified, it MUST be one of the values listed in section Link Aggregate Options.

        :return: The aggregate of this LinksResourceAttributes.
        :rtype: Aggregate
        """
        return self._aggregate

    @aggregate.setter
    def aggregate(self, aggregate):
        """Sets the aggregate of this LinksResourceAttributes.

        A string indicating whether a client that is following links to aggregate results from different OPTIMADE implementations should follow this link or not. This flag SHOULD NOT be indicated for links where `link_type` is not `child`.  If not specified, clients MAY assume that the value is `ok`. If specified, and the value is anything different than `ok`, the client MUST assume that the server is suggesting not to follow the link during aggregation by default (also if the value is not among the known ones, in case a future specification adds new accepted values).  Specific values indicate the reason why the server is providing the suggestion. A client MAY follow the link anyway if it has reason to do so (e.g., if the client is looking for all test databases, it MAY follow the links marked with `aggregate`=`test`).  If specified, it MUST be one of the values listed in section Link Aggregate Options.

        :param aggregate: The aggregate of this LinksResourceAttributes.
        :type aggregate: Aggregate
        """

        self._aggregate = aggregate

    @property
    def base_url(self):
        """Gets the base_url of this LinksResourceAttributes.


        :return: The base_url of this LinksResourceAttributes.
        :rtype: BaseUrl
        """
        return self._base_url

    @base_url.setter
    def base_url(self, base_url):
        """Sets the base_url of this LinksResourceAttributes.


        :param base_url: The base_url of this LinksResourceAttributes.
        :type base_url: BaseUrl
        """
        if base_url is None:
            raise ValueError("Invalid value for `base_url`, must not be `None`")

        self._base_url = base_url

    @property
    def description(self):
        """Gets the description of this LinksResourceAttributes.

        Human-readable description for the OPTIMADE API implementation, e.g., for use in clients to show a description to the end-user.

        :return: The description of this LinksResourceAttributes.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this LinksResourceAttributes.

        Human-readable description for the OPTIMADE API implementation, e.g., for use in clients to show a description to the end-user.

        :param description: The description of this LinksResourceAttributes.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def homepage(self):
        """Gets the homepage of this LinksResourceAttributes.


        :return: The homepage of this LinksResourceAttributes.
        :rtype: Homepage1
        """
        return self._homepage

    @homepage.setter
    def homepage(self, homepage):
        """Sets the homepage of this LinksResourceAttributes.


        :param homepage: The homepage of this LinksResourceAttributes.
        :type homepage: Homepage1
        """
        if homepage is None:
            raise ValueError("Invalid value for `homepage`, must not be `None`")

        self._homepage = homepage

    @property
    def link_type(self):
        """Gets the link_type of this LinksResourceAttributes.

        The type of the linked relation. MUST be one of these values: 'child', 'root', 'external', 'providers'.

        :return: The link_type of this LinksResourceAttributes.
        :rtype: LinkType
        """
        return self._link_type

    @link_type.setter
    def link_type(self, link_type):
        """Sets the link_type of this LinksResourceAttributes.

        The type of the linked relation. MUST be one of these values: 'child', 'root', 'external', 'providers'.

        :param link_type: The link_type of this LinksResourceAttributes.
        :type link_type: LinkType
        """
        if link_type is None:
            raise ValueError("Invalid value for `link_type`, must not be `None`")

        self._link_type = link_type

    @property
    def name(self):
        """Gets the name of this LinksResourceAttributes.

        Human-readable name for the OPTIMADE API implementation, e.g., for use in clients to show the name to the end-user.

        :return: The name of this LinksResourceAttributes.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LinksResourceAttributes.

        Human-readable name for the OPTIMADE API implementation, e.g., for use in clients to show the name to the end-user.

        :param name: The name of this LinksResourceAttributes.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def no_aggregate_reason(self):
        """Gets the no_aggregate_reason of this LinksResourceAttributes.

        An OPTIONAL human-readable string indicating the reason for suggesting not to aggregate results following the link. It SHOULD NOT be present if `aggregate`=`ok`.

        :return: The no_aggregate_reason of this LinksResourceAttributes.
        :rtype: str
        """
        return self._no_aggregate_reason

    @no_aggregate_reason.setter
    def no_aggregate_reason(self, no_aggregate_reason):
        """Sets the no_aggregate_reason of this LinksResourceAttributes.

        An OPTIONAL human-readable string indicating the reason for suggesting not to aggregate results following the link. It SHOULD NOT be present if `aggregate`=`ok`.

        :param no_aggregate_reason: The no_aggregate_reason of this LinksResourceAttributes.
        :type no_aggregate_reason: str
        """

        self._no_aggregate_reason = no_aggregate_reason
