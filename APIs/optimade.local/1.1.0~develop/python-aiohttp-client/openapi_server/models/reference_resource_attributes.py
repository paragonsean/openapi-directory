# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.person import Person
from openapi_server import util


class ReferenceResourceAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, annote: str=None, authors: List[Person]=None, bib_type: str=None, booktitle: str=None, chapter: str=None, crossref: str=None, doi: str=None, edition: str=None, editors: List[Person]=None, howpublished: str=None, immutable_id: str=None, institution: str=None, journal: str=None, key: str=None, last_modified: datetime=None, month: str=None, note: str=None, number: str=None, organization: str=None, pages: str=None, publisher: str=None, school: str=None, series: str=None, title: str=None, url: str=None, volume: str=None, year: str=None):
        """ReferenceResourceAttributes - a model defined in OpenAPI

        :param address: The address of this ReferenceResourceAttributes.
        :param annote: The annote of this ReferenceResourceAttributes.
        :param authors: The authors of this ReferenceResourceAttributes.
        :param bib_type: The bib_type of this ReferenceResourceAttributes.
        :param booktitle: The booktitle of this ReferenceResourceAttributes.
        :param chapter: The chapter of this ReferenceResourceAttributes.
        :param crossref: The crossref of this ReferenceResourceAttributes.
        :param doi: The doi of this ReferenceResourceAttributes.
        :param edition: The edition of this ReferenceResourceAttributes.
        :param editors: The editors of this ReferenceResourceAttributes.
        :param howpublished: The howpublished of this ReferenceResourceAttributes.
        :param immutable_id: The immutable_id of this ReferenceResourceAttributes.
        :param institution: The institution of this ReferenceResourceAttributes.
        :param journal: The journal of this ReferenceResourceAttributes.
        :param key: The key of this ReferenceResourceAttributes.
        :param last_modified: The last_modified of this ReferenceResourceAttributes.
        :param month: The month of this ReferenceResourceAttributes.
        :param note: The note of this ReferenceResourceAttributes.
        :param number: The number of this ReferenceResourceAttributes.
        :param organization: The organization of this ReferenceResourceAttributes.
        :param pages: The pages of this ReferenceResourceAttributes.
        :param publisher: The publisher of this ReferenceResourceAttributes.
        :param school: The school of this ReferenceResourceAttributes.
        :param series: The series of this ReferenceResourceAttributes.
        :param title: The title of this ReferenceResourceAttributes.
        :param url: The url of this ReferenceResourceAttributes.
        :param volume: The volume of this ReferenceResourceAttributes.
        :param year: The year of this ReferenceResourceAttributes.
        """
        self.openapi_types = {
            'address': str,
            'annote': str,
            'authors': List[Person],
            'bib_type': str,
            'booktitle': str,
            'chapter': str,
            'crossref': str,
            'doi': str,
            'edition': str,
            'editors': List[Person],
            'howpublished': str,
            'immutable_id': str,
            'institution': str,
            'journal': str,
            'key': str,
            'last_modified': datetime,
            'month': str,
            'note': str,
            'number': str,
            'organization': str,
            'pages': str,
            'publisher': str,
            'school': str,
            'series': str,
            'title': str,
            'url': str,
            'volume': str,
            'year': str
        }

        self.attribute_map = {
            'address': 'address',
            'annote': 'annote',
            'authors': 'authors',
            'bib_type': 'bib_type',
            'booktitle': 'booktitle',
            'chapter': 'chapter',
            'crossref': 'crossref',
            'doi': 'doi',
            'edition': 'edition',
            'editors': 'editors',
            'howpublished': 'howpublished',
            'immutable_id': 'immutable_id',
            'institution': 'institution',
            'journal': 'journal',
            'key': 'key',
            'last_modified': 'last_modified',
            'month': 'month',
            'note': 'note',
            'number': 'number',
            'organization': 'organization',
            'pages': 'pages',
            'publisher': 'publisher',
            'school': 'school',
            'series': 'series',
            'title': 'title',
            'url': 'url',
            'volume': 'volume',
            'year': 'year'
        }

        self._address = address
        self._annote = annote
        self._authors = authors
        self._bib_type = bib_type
        self._booktitle = booktitle
        self._chapter = chapter
        self._crossref = crossref
        self._doi = doi
        self._edition = edition
        self._editors = editors
        self._howpublished = howpublished
        self._immutable_id = immutable_id
        self._institution = institution
        self._journal = journal
        self._key = key
        self._last_modified = last_modified
        self._month = month
        self._note = note
        self._number = number
        self._organization = organization
        self._pages = pages
        self._publisher = publisher
        self._school = school
        self._series = series
        self._title = title
        self._url = url
        self._volume = volume
        self._year = year

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReferenceResourceAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReferenceResourceAttributes of this ReferenceResourceAttributes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this ReferenceResourceAttributes.

        Meaning of property matches the BiBTeX specification.

        :return: The address of this ReferenceResourceAttributes.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this ReferenceResourceAttributes.

        Meaning of property matches the BiBTeX specification.

        :param address: The address of this ReferenceResourceAttributes.
        :type address: str
        """

        self._address = address

    @property
    def annote(self):
        """Gets the annote of this ReferenceResourceAttributes.

        Meaning of property matches the BiBTeX specification.

        :return: The annote of this ReferenceResourceAttributes.
        :rtype: str
        """
        return self._annote

    @annote.setter
    def annote(self, annote):
        """Sets the annote of this ReferenceResourceAttributes.

        Meaning of property matches the BiBTeX specification.

        :param annote: The annote of this ReferenceResourceAttributes.
        :type annote: str
        """

        self._annote = annote

    @property
    def authors(self):
        """Gets the authors of this ReferenceResourceAttributes.

        List of person objects containing the authors of the reference.

        :return: The authors of this ReferenceResourceAttributes.
        :rtype: List[Person]
        """
        return self._authors

    @authors.setter
    def authors(self, authors):
        """Sets the authors of this ReferenceResourceAttributes.

        List of person objects containing the authors of the reference.

        :param authors: The authors of this ReferenceResourceAttributes.
        :type authors: List[Person]
        """

        self._authors = authors

    @property
    def bib_type(self):
        """Gets the bib_type of this ReferenceResourceAttributes.

        Type of the reference, corresponding to the **type** property in the BiBTeX specification.

        :return: The bib_type of this ReferenceResourceAttributes.
        :rtype: str
        """
        return self._bib_type

    @bib_type.setter
    def bib_type(self, bib_type):
        """Sets the bib_type of this ReferenceResourceAttributes.

        Type of the reference, corresponding to the **type** property in the BiBTeX specification.

        :param bib_type: The bib_type of this ReferenceResourceAttributes.
        :type bib_type: str
        """

        self._bib_type = bib_type

    @property
    def booktitle(self):
        """Gets the booktitle of this ReferenceResourceAttributes.

        Meaning of property matches the BiBTeX specification.

        :return: The booktitle of this ReferenceResourceAttributes.
        :rtype: str
        """
        return self._booktitle

    @booktitle.setter
    def booktitle(self, booktitle):
        """Sets the booktitle of this ReferenceResourceAttributes.

        Meaning of property matches the BiBTeX specification.

        :param booktitle: The booktitle of this ReferenceResourceAttributes.
        :type booktitle: str
        """

        self._booktitle = booktitle

    @property
    def chapter(self):
        """Gets the chapter of this ReferenceResourceAttributes.

        Meaning of property matches the BiBTeX specification.

        :return: The chapter of this ReferenceResourceAttributes.
        :rtype: str
        """
        return self._chapter

    @chapter.setter
    def chapter(self, chapter):
        """Sets the chapter of this ReferenceResourceAttributes.

        Meaning of property matches the BiBTeX specification.

        :param chapter: The chapter of this ReferenceResourceAttributes.
        :type chapter: str
        """

        self._chapter = chapter

    @property
    def crossref(self):
        """Gets the crossref of this ReferenceResourceAttributes.

        Meaning of property matches the BiBTeX specification.

        :return: The crossref of this ReferenceResourceAttributes.
        :rtype: str
        """
        return self._crossref

    @crossref.setter
    def crossref(self, crossref):
        """Sets the crossref of this ReferenceResourceAttributes.

        Meaning of property matches the BiBTeX specification.

        :param crossref: The crossref of this ReferenceResourceAttributes.
        :type crossref: str
        """

        self._crossref = crossref

    @property
    def doi(self):
        """Gets the doi of this ReferenceResourceAttributes.

        The digital object identifier of the reference.

        :return: The doi of this ReferenceResourceAttributes.
        :rtype: str
        """
        return self._doi

    @doi.setter
    def doi(self, doi):
        """Sets the doi of this ReferenceResourceAttributes.

        The digital object identifier of the reference.

        :param doi: The doi of this ReferenceResourceAttributes.
        :type doi: str
        """

        self._doi = doi

    @property
    def edition(self):
        """Gets the edition of this ReferenceResourceAttributes.

        Meaning of property matches the BiBTeX specification.

        :return: The edition of this ReferenceResourceAttributes.
        :rtype: str
        """
        return self._edition

    @edition.setter
    def edition(self, edition):
        """Sets the edition of this ReferenceResourceAttributes.

        Meaning of property matches the BiBTeX specification.

        :param edition: The edition of this ReferenceResourceAttributes.
        :type edition: str
        """

        self._edition = edition

    @property
    def editors(self):
        """Gets the editors of this ReferenceResourceAttributes.

        List of person objects containing the editors of the reference.

        :return: The editors of this ReferenceResourceAttributes.
        :rtype: List[Person]
        """
        return self._editors

    @editors.setter
    def editors(self, editors):
        """Sets the editors of this ReferenceResourceAttributes.

        List of person objects containing the editors of the reference.

        :param editors: The editors of this ReferenceResourceAttributes.
        :type editors: List[Person]
        """

        self._editors = editors

    @property
    def howpublished(self):
        """Gets the howpublished of this ReferenceResourceAttributes.

        Meaning of property matches the BiBTeX specification.

        :return: The howpublished of this ReferenceResourceAttributes.
        :rtype: str
        """
        return self._howpublished

    @howpublished.setter
    def howpublished(self, howpublished):
        """Sets the howpublished of this ReferenceResourceAttributes.

        Meaning of property matches the BiBTeX specification.

        :param howpublished: The howpublished of this ReferenceResourceAttributes.
        :type howpublished: str
        """

        self._howpublished = howpublished

    @property
    def immutable_id(self):
        """Gets the immutable_id of this ReferenceResourceAttributes.

        The entry's immutable ID (e.g., an UUID). This is important for databases having preferred IDs that point to \"the latest version\" of a record, but still offer access to older variants. This ID maps to the version-specific record, in case it changes in the future.  - **Type**: string.  - **Requirements/Conventions**:     - **Support**: OPTIONAL support in implementations, i.e., MAY be `null`.     - **Query**: MUST be a queryable property with support for all mandatory filter features.  - **Examples**:     - `\"8bd3e750-b477-41a0-9b11-3a799f21b44f\"`     - `\"fjeiwoj,54;@=%<>#32\"` (Strings that are not URL-safe are allowed.)

        :return: The immutable_id of this ReferenceResourceAttributes.
        :rtype: str
        """
        return self._immutable_id

    @immutable_id.setter
    def immutable_id(self, immutable_id):
        """Sets the immutable_id of this ReferenceResourceAttributes.

        The entry's immutable ID (e.g., an UUID). This is important for databases having preferred IDs that point to \"the latest version\" of a record, but still offer access to older variants. This ID maps to the version-specific record, in case it changes in the future.  - **Type**: string.  - **Requirements/Conventions**:     - **Support**: OPTIONAL support in implementations, i.e., MAY be `null`.     - **Query**: MUST be a queryable property with support for all mandatory filter features.  - **Examples**:     - `\"8bd3e750-b477-41a0-9b11-3a799f21b44f\"`     - `\"fjeiwoj,54;@=%<>#32\"` (Strings that are not URL-safe are allowed.)

        :param immutable_id: The immutable_id of this ReferenceResourceAttributes.
        :type immutable_id: str
        """

        self._immutable_id = immutable_id

    @property
    def institution(self):
        """Gets the institution of this ReferenceResourceAttributes.

        Meaning of property matches the BiBTeX specification.

        :return: The institution of this ReferenceResourceAttributes.
        :rtype: str
        """
        return self._institution

    @institution.setter
    def institution(self, institution):
        """Sets the institution of this ReferenceResourceAttributes.

        Meaning of property matches the BiBTeX specification.

        :param institution: The institution of this ReferenceResourceAttributes.
        :type institution: str
        """

        self._institution = institution

    @property
    def journal(self):
        """Gets the journal of this ReferenceResourceAttributes.

        Meaning of property matches the BiBTeX specification.

        :return: The journal of this ReferenceResourceAttributes.
        :rtype: str
        """
        return self._journal

    @journal.setter
    def journal(self, journal):
        """Sets the journal of this ReferenceResourceAttributes.

        Meaning of property matches the BiBTeX specification.

        :param journal: The journal of this ReferenceResourceAttributes.
        :type journal: str
        """

        self._journal = journal

    @property
    def key(self):
        """Gets the key of this ReferenceResourceAttributes.

        Meaning of property matches the BiBTeX specification.

        :return: The key of this ReferenceResourceAttributes.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this ReferenceResourceAttributes.

        Meaning of property matches the BiBTeX specification.

        :param key: The key of this ReferenceResourceAttributes.
        :type key: str
        """

        self._key = key

    @property
    def last_modified(self):
        """Gets the last_modified of this ReferenceResourceAttributes.

        Date and time representing when the entry was last modified.  - **Type**: timestamp.  - **Requirements/Conventions**:     - **Support**: SHOULD be supported by all implementations, i.e., SHOULD NOT be `null`.     - **Query**: MUST be a queryable property with support for all mandatory filter features.     - **Response**: REQUIRED in the response unless the query parameter `response_fields` is present and does not include this property.  - **Example**:     - As part of JSON response format: `\"2007-04-05T14:30:20Z\"` (i.e., encoded as an [RFC 3339 Internet Date/Time Format](https://tools.ietf.org/html/rfc3339#section-5.6) string.)

        :return: The last_modified of this ReferenceResourceAttributes.
        :rtype: datetime
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this ReferenceResourceAttributes.

        Date and time representing when the entry was last modified.  - **Type**: timestamp.  - **Requirements/Conventions**:     - **Support**: SHOULD be supported by all implementations, i.e., SHOULD NOT be `null`.     - **Query**: MUST be a queryable property with support for all mandatory filter features.     - **Response**: REQUIRED in the response unless the query parameter `response_fields` is present and does not include this property.  - **Example**:     - As part of JSON response format: `\"2007-04-05T14:30:20Z\"` (i.e., encoded as an [RFC 3339 Internet Date/Time Format](https://tools.ietf.org/html/rfc3339#section-5.6) string.)

        :param last_modified: The last_modified of this ReferenceResourceAttributes.
        :type last_modified: datetime
        """
        if last_modified is None:
            raise ValueError("Invalid value for `last_modified`, must not be `None`")

        self._last_modified = last_modified

    @property
    def month(self):
        """Gets the month of this ReferenceResourceAttributes.

        Meaning of property matches the BiBTeX specification.

        :return: The month of this ReferenceResourceAttributes.
        :rtype: str
        """
        return self._month

    @month.setter
    def month(self, month):
        """Sets the month of this ReferenceResourceAttributes.

        Meaning of property matches the BiBTeX specification.

        :param month: The month of this ReferenceResourceAttributes.
        :type month: str
        """

        self._month = month

    @property
    def note(self):
        """Gets the note of this ReferenceResourceAttributes.

        Meaning of property matches the BiBTeX specification.

        :return: The note of this ReferenceResourceAttributes.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this ReferenceResourceAttributes.

        Meaning of property matches the BiBTeX specification.

        :param note: The note of this ReferenceResourceAttributes.
        :type note: str
        """

        self._note = note

    @property
    def number(self):
        """Gets the number of this ReferenceResourceAttributes.

        Meaning of property matches the BiBTeX specification.

        :return: The number of this ReferenceResourceAttributes.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this ReferenceResourceAttributes.

        Meaning of property matches the BiBTeX specification.

        :param number: The number of this ReferenceResourceAttributes.
        :type number: str
        """

        self._number = number

    @property
    def organization(self):
        """Gets the organization of this ReferenceResourceAttributes.

        Meaning of property matches the BiBTeX specification.

        :return: The organization of this ReferenceResourceAttributes.
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this ReferenceResourceAttributes.

        Meaning of property matches the BiBTeX specification.

        :param organization: The organization of this ReferenceResourceAttributes.
        :type organization: str
        """

        self._organization = organization

    @property
    def pages(self):
        """Gets the pages of this ReferenceResourceAttributes.

        Meaning of property matches the BiBTeX specification.

        :return: The pages of this ReferenceResourceAttributes.
        :rtype: str
        """
        return self._pages

    @pages.setter
    def pages(self, pages):
        """Sets the pages of this ReferenceResourceAttributes.

        Meaning of property matches the BiBTeX specification.

        :param pages: The pages of this ReferenceResourceAttributes.
        :type pages: str
        """

        self._pages = pages

    @property
    def publisher(self):
        """Gets the publisher of this ReferenceResourceAttributes.

        Meaning of property matches the BiBTeX specification.

        :return: The publisher of this ReferenceResourceAttributes.
        :rtype: str
        """
        return self._publisher

    @publisher.setter
    def publisher(self, publisher):
        """Sets the publisher of this ReferenceResourceAttributes.

        Meaning of property matches the BiBTeX specification.

        :param publisher: The publisher of this ReferenceResourceAttributes.
        :type publisher: str
        """

        self._publisher = publisher

    @property
    def school(self):
        """Gets the school of this ReferenceResourceAttributes.

        Meaning of property matches the BiBTeX specification.

        :return: The school of this ReferenceResourceAttributes.
        :rtype: str
        """
        return self._school

    @school.setter
    def school(self, school):
        """Sets the school of this ReferenceResourceAttributes.

        Meaning of property matches the BiBTeX specification.

        :param school: The school of this ReferenceResourceAttributes.
        :type school: str
        """

        self._school = school

    @property
    def series(self):
        """Gets the series of this ReferenceResourceAttributes.

        Meaning of property matches the BiBTeX specification.

        :return: The series of this ReferenceResourceAttributes.
        :rtype: str
        """
        return self._series

    @series.setter
    def series(self, series):
        """Sets the series of this ReferenceResourceAttributes.

        Meaning of property matches the BiBTeX specification.

        :param series: The series of this ReferenceResourceAttributes.
        :type series: str
        """

        self._series = series

    @property
    def title(self):
        """Gets the title of this ReferenceResourceAttributes.

        Meaning of property matches the BiBTeX specification.

        :return: The title of this ReferenceResourceAttributes.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ReferenceResourceAttributes.

        Meaning of property matches the BiBTeX specification.

        :param title: The title of this ReferenceResourceAttributes.
        :type title: str
        """

        self._title = title

    @property
    def url(self):
        """Gets the url of this ReferenceResourceAttributes.

        The URL of the reference.

        :return: The url of this ReferenceResourceAttributes.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ReferenceResourceAttributes.

        The URL of the reference.

        :param url: The url of this ReferenceResourceAttributes.
        :type url: str
        """
        if url is not None and len(url) > 65536:
            raise ValueError("Invalid value for `url`, length must be less than or equal to `65536`")
        if url is not None and len(url) < 1:
            raise ValueError("Invalid value for `url`, length must be greater than or equal to `1`")

        self._url = url

    @property
    def volume(self):
        """Gets the volume of this ReferenceResourceAttributes.

        Meaning of property matches the BiBTeX specification.

        :return: The volume of this ReferenceResourceAttributes.
        :rtype: str
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this ReferenceResourceAttributes.

        Meaning of property matches the BiBTeX specification.

        :param volume: The volume of this ReferenceResourceAttributes.
        :type volume: str
        """

        self._volume = volume

    @property
    def year(self):
        """Gets the year of this ReferenceResourceAttributes.

        Meaning of property matches the BiBTeX specification.

        :return: The year of this ReferenceResourceAttributes.
        :rtype: str
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this ReferenceResourceAttributes.

        Meaning of property matches the BiBTeX specification.

        :param year: The year of this ReferenceResourceAttributes.
        :type year: str
        """

        self._year = year
