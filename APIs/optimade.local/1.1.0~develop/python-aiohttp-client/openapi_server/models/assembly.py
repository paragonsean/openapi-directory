# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Assembly(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, group_probabilities: List[float]=None, sites_in_groups: List[List[int]]=None):
        """Assembly - a model defined in OpenAPI

        :param group_probabilities: The group_probabilities of this Assembly.
        :param sites_in_groups: The sites_in_groups of this Assembly.
        """
        self.openapi_types = {
            'group_probabilities': List[float],
            'sites_in_groups': List[List[int]]
        }

        self.attribute_map = {
            'group_probabilities': 'group_probabilities',
            'sites_in_groups': 'sites_in_groups'
        }

        self._group_probabilities = group_probabilities
        self._sites_in_groups = sites_in_groups

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Assembly':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Assembly of this Assembly.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def group_probabilities(self):
        """Gets the group_probabilities of this Assembly.

        Statistical probability of each group. It MUST have the same length as `sites_in_groups`. It SHOULD sum to one. See below for examples of how to specify the probability of the occurrence of a vacancy. The possible reasons for the values not to sum to one are the same as already specified above for the `concentration` of each `species`.

        :return: The group_probabilities of this Assembly.
        :rtype: List[float]
        """
        return self._group_probabilities

    @group_probabilities.setter
    def group_probabilities(self, group_probabilities):
        """Sets the group_probabilities of this Assembly.

        Statistical probability of each group. It MUST have the same length as `sites_in_groups`. It SHOULD sum to one. See below for examples of how to specify the probability of the occurrence of a vacancy. The possible reasons for the values not to sum to one are the same as already specified above for the `concentration` of each `species`.

        :param group_probabilities: The group_probabilities of this Assembly.
        :type group_probabilities: List[float]
        """
        if group_probabilities is None:
            raise ValueError("Invalid value for `group_probabilities`, must not be `None`")

        self._group_probabilities = group_probabilities

    @property
    def sites_in_groups(self):
        """Gets the sites_in_groups of this Assembly.

        Index of the sites (0-based) that belong to each group for each assembly.  - **Examples**:     - `[[1], [2]]`: two groups, one with the second site, one with the third.     - `[[1,2], [3]]`: one group with the second and third site, one with the fourth.

        :return: The sites_in_groups of this Assembly.
        :rtype: List[List[int]]
        """
        return self._sites_in_groups

    @sites_in_groups.setter
    def sites_in_groups(self, sites_in_groups):
        """Sets the sites_in_groups of this Assembly.

        Index of the sites (0-based) that belong to each group for each assembly.  - **Examples**:     - `[[1], [2]]`: two groups, one with the second site, one with the third.     - `[[1,2], [3]]`: one group with the second and third site, one with the fourth.

        :param sites_in_groups: The sites_in_groups of this Assembly.
        :type sites_in_groups: List[List[int]]
        """
        if sites_in_groups is None:
            raise ValueError("Invalid value for `sites_in_groups`, must not be `None`")

        self._sites_in_groups = sites_in_groups
