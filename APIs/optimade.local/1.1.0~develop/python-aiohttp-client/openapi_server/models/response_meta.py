# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.implementation import Implementation
from openapi_server.models.model_schema import ModelSchema
from openapi_server.models.provider import Provider
from openapi_server.models.response_meta_query import ResponseMetaQuery
from openapi_server.models.warnings import Warnings
import re
from openapi_server import util


class ResponseMeta(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, api_version: str=None, data_available: int=None, data_returned: int=None, implementation: Implementation=None, last_id: str=None, more_data_available: bool=None, provider: Provider=None, query: ResponseMetaQuery=None, response_message: str=None, _schema: ModelSchema=None, time_stamp: datetime=None, warnings: list[Warnings]=None):
        """ResponseMeta - a model defined in OpenAPI

        :param api_version: The api_version of this ResponseMeta.
        :param data_available: The data_available of this ResponseMeta.
        :param data_returned: The data_returned of this ResponseMeta.
        :param implementation: The implementation of this ResponseMeta.
        :param last_id: The last_id of this ResponseMeta.
        :param more_data_available: The more_data_available of this ResponseMeta.
        :param provider: The provider of this ResponseMeta.
        :param query: The query of this ResponseMeta.
        :param response_message: The response_message of this ResponseMeta.
        :param _schema: The _schema of this ResponseMeta.
        :param time_stamp: The time_stamp of this ResponseMeta.
        :param warnings: The warnings of this ResponseMeta.
        """
        self.openapi_types = {
            'api_version': str,
            'data_available': int,
            'data_returned': int,
            'implementation': Implementation,
            'last_id': str,
            'more_data_available': bool,
            'provider': Provider,
            'query': ResponseMetaQuery,
            'response_message': str,
            '_schema': ModelSchema,
            'time_stamp': datetime,
            'warnings': list[Warnings]
        }

        self.attribute_map = {
            'api_version': 'api_version',
            'data_available': 'data_available',
            'data_returned': 'data_returned',
            'implementation': 'implementation',
            'last_id': 'last_id',
            'more_data_available': 'more_data_available',
            'provider': 'provider',
            'query': 'query',
            'response_message': 'response_message',
            '_schema': 'schema',
            'time_stamp': 'time_stamp',
            'warnings': 'warnings'
        }

        self._api_version = api_version
        self._data_available = data_available
        self._data_returned = data_returned
        self._implementation = implementation
        self._last_id = last_id
        self._more_data_available = more_data_available
        self._provider = provider
        self._query = query
        self._response_message = response_message
        self.__schema = _schema
        self._time_stamp = time_stamp
        self._warnings = warnings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResponseMeta':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResponseMeta of this ResponseMeta.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_version(self):
        """Gets the api_version of this ResponseMeta.

        Presently used full version of the OPTIMADE API. The version number string MUST NOT be prefixed by, e.g., \"v\". Examples: `1.0.0`, `1.0.0-rc.2`.

        :return: The api_version of this ResponseMeta.
        :rtype: str
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version):
        """Sets the api_version of this ResponseMeta.

        Presently used full version of the OPTIMADE API. The version number string MUST NOT be prefixed by, e.g., \"v\". Examples: `1.0.0`, `1.0.0-rc.2`.

        :param api_version: The api_version of this ResponseMeta.
        :type api_version: str
        """
        if api_version is None:
            raise ValueError("Invalid value for `api_version`, must not be `None`")
        if api_version is not None and not re.search(r'^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$', api_version):
            raise ValueError("Invalid value for `api_version`, must be a follow pattern or equal to `/^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/`")

        self._api_version = api_version

    @property
    def data_available(self):
        """Gets the data_available of this ResponseMeta.

        An integer containing the total number of data resource objects available in the database for the endpoint.

        :return: The data_available of this ResponseMeta.
        :rtype: int
        """
        return self._data_available

    @data_available.setter
    def data_available(self, data_available):
        """Sets the data_available of this ResponseMeta.

        An integer containing the total number of data resource objects available in the database for the endpoint.

        :param data_available: The data_available of this ResponseMeta.
        :type data_available: int
        """

        self._data_available = data_available

    @property
    def data_returned(self):
        """Gets the data_returned of this ResponseMeta.

        An integer containing the total number of data resource objects returned for the current `filter` query, independent of pagination.

        :return: The data_returned of this ResponseMeta.
        :rtype: int
        """
        return self._data_returned

    @data_returned.setter
    def data_returned(self, data_returned):
        """Sets the data_returned of this ResponseMeta.

        An integer containing the total number of data resource objects returned for the current `filter` query, independent of pagination.

        :param data_returned: The data_returned of this ResponseMeta.
        :type data_returned: int
        """
        if data_returned is not None and data_returned < 0:
            raise ValueError("Invalid value for `data_returned`, must be a value greater than or equal to `0`")

        self._data_returned = data_returned

    @property
    def implementation(self):
        """Gets the implementation of this ResponseMeta.

        a dictionary describing the server implementation

        :return: The implementation of this ResponseMeta.
        :rtype: Implementation
        """
        return self._implementation

    @implementation.setter
    def implementation(self, implementation):
        """Sets the implementation of this ResponseMeta.

        a dictionary describing the server implementation

        :param implementation: The implementation of this ResponseMeta.
        :type implementation: Implementation
        """

        self._implementation = implementation

    @property
    def last_id(self):
        """Gets the last_id of this ResponseMeta.

        a string containing the last ID returned

        :return: The last_id of this ResponseMeta.
        :rtype: str
        """
        return self._last_id

    @last_id.setter
    def last_id(self, last_id):
        """Sets the last_id of this ResponseMeta.

        a string containing the last ID returned

        :param last_id: The last_id of this ResponseMeta.
        :type last_id: str
        """

        self._last_id = last_id

    @property
    def more_data_available(self):
        """Gets the more_data_available of this ResponseMeta.

        `false` if the response contains all data for the request (e.g., a request issued to a single entry endpoint, or a `filter` query at the last page of a paginated response) and `true` if the response is incomplete in the sense that multiple objects match the request, and not all of them have been included in the response (e.g., a query with multiple pages that is not at the last page).

        :return: The more_data_available of this ResponseMeta.
        :rtype: bool
        """
        return self._more_data_available

    @more_data_available.setter
    def more_data_available(self, more_data_available):
        """Sets the more_data_available of this ResponseMeta.

        `false` if the response contains all data for the request (e.g., a request issued to a single entry endpoint, or a `filter` query at the last page of a paginated response) and `true` if the response is incomplete in the sense that multiple objects match the request, and not all of them have been included in the response (e.g., a query with multiple pages that is not at the last page).

        :param more_data_available: The more_data_available of this ResponseMeta.
        :type more_data_available: bool
        """
        if more_data_available is None:
            raise ValueError("Invalid value for `more_data_available`, must not be `None`")

        self._more_data_available = more_data_available

    @property
    def provider(self):
        """Gets the provider of this ResponseMeta.

        information on the database provider of the implementation.

        :return: The provider of this ResponseMeta.
        :rtype: Provider
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this ResponseMeta.

        information on the database provider of the implementation.

        :param provider: The provider of this ResponseMeta.
        :type provider: Provider
        """

        self._provider = provider

    @property
    def query(self):
        """Gets the query of this ResponseMeta.

        Information on the Query that was requested

        :return: The query of this ResponseMeta.
        :rtype: ResponseMetaQuery
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this ResponseMeta.

        Information on the Query that was requested

        :param query: The query of this ResponseMeta.
        :type query: ResponseMetaQuery
        """
        if query is None:
            raise ValueError("Invalid value for `query`, must not be `None`")

        self._query = query

    @property
    def response_message(self):
        """Gets the response_message of this ResponseMeta.

        response string from the server

        :return: The response_message of this ResponseMeta.
        :rtype: str
        """
        return self._response_message

    @response_message.setter
    def response_message(self, response_message):
        """Sets the response_message of this ResponseMeta.

        response string from the server

        :param response_message: The response_message of this ResponseMeta.
        :type response_message: str
        """

        self._response_message = response_message

    @property
    def _schema(self):
        """Gets the _schema of this ResponseMeta.


        :return: The _schema of this ResponseMeta.
        :rtype: ModelSchema
        """
        return self.__schema

    @_schema.setter
    def _schema(self, _schema):
        """Sets the _schema of this ResponseMeta.


        :param _schema: The _schema of this ResponseMeta.
        :type _schema: ModelSchema
        """

        self.__schema = _schema

    @property
    def time_stamp(self):
        """Gets the time_stamp of this ResponseMeta.

        A timestamp containing the date and time at which the query was executed.

        :return: The time_stamp of this ResponseMeta.
        :rtype: datetime
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp):
        """Sets the time_stamp of this ResponseMeta.

        A timestamp containing the date and time at which the query was executed.

        :param time_stamp: The time_stamp of this ResponseMeta.
        :type time_stamp: datetime
        """

        self._time_stamp = time_stamp

    @property
    def warnings(self):
        """Gets the warnings of this ResponseMeta.

        A list of warning resource objects representing non-critical errors or warnings. A warning resource object is defined similarly to a [JSON API error object](http://jsonapi.org/format/1.0/#error-objects), but MUST also include the field `type`, which MUST have the value `\"warning\"`. The field `detail` MUST be present and SHOULD contain a non-critical message, e.g., reporting unrecognized search attributes or deprecated features. The field `status`, representing a HTTP response status code, MUST NOT be present for a warning resource object. This is an exclusive field for error resource objects.

        :return: The warnings of this ResponseMeta.
        :rtype: list[Warnings]
        """
        return self._warnings

    @warnings.setter
    def warnings(self, warnings):
        """Sets the warnings of this ResponseMeta.

        A list of warning resource objects representing non-critical errors or warnings. A warning resource object is defined similarly to a [JSON API error object](http://jsonapi.org/format/1.0/#error-objects), but MUST also include the field `type`, which MUST have the value `\"warning\"`. The field `detail` MUST be present and SHOULD contain a non-critical message, e.g., reporting unrecognized search attributes or deprecated features. The field `status`, representing a HTTP response status code, MUST NOT be present for a warning resource object. This is an exclusive field for error resource objects.

        :param warnings: The warnings of this ResponseMeta.
        :type warnings: list[Warnings]
        """

        self._warnings = warnings
