# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.homepage import Homepage
from openapi_server.models.implementation_maintainer import ImplementationMaintainer
from openapi_server.models.issue_tracker import IssueTracker
from openapi_server.models.source_url import SourceUrl
from openapi_server import util


class Implementation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, homepage: Homepage=None, issue_tracker: IssueTracker=None, maintainer: ImplementationMaintainer=None, name: str=None, source_url: SourceUrl=None, version: str=None):
        """Implementation - a model defined in OpenAPI

        :param homepage: The homepage of this Implementation.
        :param issue_tracker: The issue_tracker of this Implementation.
        :param maintainer: The maintainer of this Implementation.
        :param name: The name of this Implementation.
        :param source_url: The source_url of this Implementation.
        :param version: The version of this Implementation.
        """
        self.openapi_types = {
            'homepage': Homepage,
            'issue_tracker': IssueTracker,
            'maintainer': ImplementationMaintainer,
            'name': str,
            'source_url': SourceUrl,
            'version': str
        }

        self.attribute_map = {
            'homepage': 'homepage',
            'issue_tracker': 'issue_tracker',
            'maintainer': 'maintainer',
            'name': 'name',
            'source_url': 'source_url',
            'version': 'version'
        }

        self._homepage = homepage
        self._issue_tracker = issue_tracker
        self._maintainer = maintainer
        self._name = name
        self._source_url = source_url
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Implementation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Implementation of this Implementation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def homepage(self):
        """Gets the homepage of this Implementation.


        :return: The homepage of this Implementation.
        :rtype: Homepage
        """
        return self._homepage

    @homepage.setter
    def homepage(self, homepage):
        """Sets the homepage of this Implementation.


        :param homepage: The homepage of this Implementation.
        :type homepage: Homepage
        """

        self._homepage = homepage

    @property
    def issue_tracker(self):
        """Gets the issue_tracker of this Implementation.


        :return: The issue_tracker of this Implementation.
        :rtype: IssueTracker
        """
        return self._issue_tracker

    @issue_tracker.setter
    def issue_tracker(self, issue_tracker):
        """Sets the issue_tracker of this Implementation.


        :param issue_tracker: The issue_tracker of this Implementation.
        :type issue_tracker: IssueTracker
        """

        self._issue_tracker = issue_tracker

    @property
    def maintainer(self):
        """Gets the maintainer of this Implementation.

        A dictionary providing details about the maintainer of the implementation.

        :return: The maintainer of this Implementation.
        :rtype: ImplementationMaintainer
        """
        return self._maintainer

    @maintainer.setter
    def maintainer(self, maintainer):
        """Sets the maintainer of this Implementation.

        A dictionary providing details about the maintainer of the implementation.

        :param maintainer: The maintainer of this Implementation.
        :type maintainer: ImplementationMaintainer
        """

        self._maintainer = maintainer

    @property
    def name(self):
        """Gets the name of this Implementation.

        name of the implementation

        :return: The name of this Implementation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Implementation.

        name of the implementation

        :param name: The name of this Implementation.
        :type name: str
        """

        self._name = name

    @property
    def source_url(self):
        """Gets the source_url of this Implementation.


        :return: The source_url of this Implementation.
        :rtype: SourceUrl
        """
        return self._source_url

    @source_url.setter
    def source_url(self, source_url):
        """Sets the source_url of this Implementation.


        :param source_url: The source_url of this Implementation.
        :type source_url: SourceUrl
        """

        self._source_url = source_url

    @property
    def version(self):
        """Gets the version of this Implementation.

        version string of the current implementation

        :return: The version of this Implementation.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Implementation.

        version string of the current implementation

        :param version: The version of this Implementation.
        :type version: str
        """

        self._version = version
