# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.available_api_version import AvailableApiVersion
import re
from openapi_server import util


class BaseInfoAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, api_version: str=None, available_api_versions: List[AvailableApiVersion]=None, available_endpoints: List[str]=None, entry_types_by_format: Dict[str, List[str]]=None, formats: List[str]=["json"], is_index: bool=False):
        """BaseInfoAttributes - a model defined in OpenAPI

        :param api_version: The api_version of this BaseInfoAttributes.
        :param available_api_versions: The available_api_versions of this BaseInfoAttributes.
        :param available_endpoints: The available_endpoints of this BaseInfoAttributes.
        :param entry_types_by_format: The entry_types_by_format of this BaseInfoAttributes.
        :param formats: The formats of this BaseInfoAttributes.
        :param is_index: The is_index of this BaseInfoAttributes.
        """
        self.openapi_types = {
            'api_version': str,
            'available_api_versions': List[AvailableApiVersion],
            'available_endpoints': List[str],
            'entry_types_by_format': Dict[str, List[str]],
            'formats': List[str],
            'is_index': bool
        }

        self.attribute_map = {
            'api_version': 'api_version',
            'available_api_versions': 'available_api_versions',
            'available_endpoints': 'available_endpoints',
            'entry_types_by_format': 'entry_types_by_format',
            'formats': 'formats',
            'is_index': 'is_index'
        }

        self._api_version = api_version
        self._available_api_versions = available_api_versions
        self._available_endpoints = available_endpoints
        self._entry_types_by_format = entry_types_by_format
        self._formats = formats
        self._is_index = is_index

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BaseInfoAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BaseInfoAttributes of this BaseInfoAttributes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_version(self):
        """Gets the api_version of this BaseInfoAttributes.

        Presently used full version of the OPTIMADE API. The version number string MUST NOT be prefixed by, e.g., \"v\". Examples: `1.0.0`, `1.0.0-rc.2`.

        :return: The api_version of this BaseInfoAttributes.
        :rtype: str
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version):
        """Sets the api_version of this BaseInfoAttributes.

        Presently used full version of the OPTIMADE API. The version number string MUST NOT be prefixed by, e.g., \"v\". Examples: `1.0.0`, `1.0.0-rc.2`.

        :param api_version: The api_version of this BaseInfoAttributes.
        :type api_version: str
        """
        if api_version is None:
            raise ValueError("Invalid value for `api_version`, must not be `None`")
        if api_version is not None and not re.search(r'^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$', api_version):
            raise ValueError("Invalid value for `api_version`, must be a follow pattern or equal to `/^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/`")

        self._api_version = api_version

    @property
    def available_api_versions(self):
        """Gets the available_api_versions of this BaseInfoAttributes.

        A list of dictionaries of available API versions at other base URLs

        :return: The available_api_versions of this BaseInfoAttributes.
        :rtype: List[AvailableApiVersion]
        """
        return self._available_api_versions

    @available_api_versions.setter
    def available_api_versions(self, available_api_versions):
        """Sets the available_api_versions of this BaseInfoAttributes.

        A list of dictionaries of available API versions at other base URLs

        :param available_api_versions: The available_api_versions of this BaseInfoAttributes.
        :type available_api_versions: List[AvailableApiVersion]
        """
        if available_api_versions is None:
            raise ValueError("Invalid value for `available_api_versions`, must not be `None`")

        self._available_api_versions = available_api_versions

    @property
    def available_endpoints(self):
        """Gets the available_endpoints of this BaseInfoAttributes.

        List of available endpoints (i.e., the string to be appended to the versioned base URL).

        :return: The available_endpoints of this BaseInfoAttributes.
        :rtype: List[str]
        """
        return self._available_endpoints

    @available_endpoints.setter
    def available_endpoints(self, available_endpoints):
        """Sets the available_endpoints of this BaseInfoAttributes.

        List of available endpoints (i.e., the string to be appended to the versioned base URL).

        :param available_endpoints: The available_endpoints of this BaseInfoAttributes.
        :type available_endpoints: List[str]
        """
        if available_endpoints is None:
            raise ValueError("Invalid value for `available_endpoints`, must not be `None`")

        self._available_endpoints = available_endpoints

    @property
    def entry_types_by_format(self):
        """Gets the entry_types_by_format of this BaseInfoAttributes.

        Available entry endpoints as a function of output formats.

        :return: The entry_types_by_format of this BaseInfoAttributes.
        :rtype: Dict[str, List[str]]
        """
        return self._entry_types_by_format

    @entry_types_by_format.setter
    def entry_types_by_format(self, entry_types_by_format):
        """Sets the entry_types_by_format of this BaseInfoAttributes.

        Available entry endpoints as a function of output formats.

        :param entry_types_by_format: The entry_types_by_format of this BaseInfoAttributes.
        :type entry_types_by_format: Dict[str, List[str]]
        """
        if entry_types_by_format is None:
            raise ValueError("Invalid value for `entry_types_by_format`, must not be `None`")

        self._entry_types_by_format = entry_types_by_format

    @property
    def formats(self):
        """Gets the formats of this BaseInfoAttributes.

        List of available output formats.

        :return: The formats of this BaseInfoAttributes.
        :rtype: List[str]
        """
        return self._formats

    @formats.setter
    def formats(self, formats):
        """Sets the formats of this BaseInfoAttributes.

        List of available output formats.

        :param formats: The formats of this BaseInfoAttributes.
        :type formats: List[str]
        """

        self._formats = formats

    @property
    def is_index(self):
        """Gets the is_index of this BaseInfoAttributes.

        If true, this is an index meta-database base URL (see section Index Meta-Database). If this member is not provided, the client MUST assume this is not an index meta-database base URL (i.e., the default is for `is_index` to be `false`).

        :return: The is_index of this BaseInfoAttributes.
        :rtype: bool
        """
        return self._is_index

    @is_index.setter
    def is_index(self, is_index):
        """Sets the is_index of this BaseInfoAttributes.

        If true, this is an index meta-database base URL (see section Index Meta-Database). If this member is not provided, the client MUST assume this is not an index meta-database base URL (i.e., the default is for `is_index` to be `false`).

        :param is_index: The is_index of this BaseInfoAttributes.
        :type is_index: bool
        """

        self._is_index = is_index
