# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class AvailableApiVersion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, url: str=None, version: str=None):
        """AvailableApiVersion - a model defined in OpenAPI

        :param url: The url of this AvailableApiVersion.
        :param version: The version of this AvailableApiVersion.
        """
        self.openapi_types = {
            'url': str,
            'version': str
        }

        self.attribute_map = {
            'url': 'url',
            'version': 'version'
        }

        self._url = url
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AvailableApiVersion':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AvailableApiVersion of this AvailableApiVersion.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def url(self):
        """Gets the url of this AvailableApiVersion.

        A string specifying a versioned base URL that MUST adhere to the rules in section Base URL

        :return: The url of this AvailableApiVersion.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this AvailableApiVersion.

        A string specifying a versioned base URL that MUST adhere to the rules in section Base URL

        :param url: The url of this AvailableApiVersion.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")
        if url is not None and len(url) > 65536:
            raise ValueError("Invalid value for `url`, length must be less than or equal to `65536`")
        if url is not None and len(url) < 1:
            raise ValueError("Invalid value for `url`, length must be greater than or equal to `1`")
        if url is not None and not re.search(r'.+\/v[0-1](\.[0-9]+)*\/?$', url):
            raise ValueError("Invalid value for `url`, must be a follow pattern or equal to `/.+\/v[0-1](\.[0-9]+)*\/?$/`")

        self._url = url

    @property
    def version(self):
        """Gets the version of this AvailableApiVersion.

        A string containing the full version number of the API served at that versioned base URL. The version number string MUST NOT be prefixed by, e.g., 'v'. Examples: `1.0.0`, `1.0.0-rc.2`.

        :return: The version of this AvailableApiVersion.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this AvailableApiVersion.

        A string containing the full version number of the API served at that versioned base URL. The version number string MUST NOT be prefixed by, e.g., 'v'. Examples: `1.0.0`, `1.0.0-rc.2`.

        :param version: The version of this AvailableApiVersion.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")
        if version is not None and not re.search(r'^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$', version):
            raise ValueError("Invalid value for `version`, must be a follow pattern or equal to `/^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/`")

        self._version = version
