# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.entry_info_property import EntryInfoProperty
from openapi_server import util


class EntryInfoResource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, formats: List[str]=None, output_fields_by_format: Dict[str, List[str]]=None, properties: Dict[str, EntryInfoProperty]=None):
        """EntryInfoResource - a model defined in OpenAPI

        :param description: The description of this EntryInfoResource.
        :param formats: The formats of this EntryInfoResource.
        :param output_fields_by_format: The output_fields_by_format of this EntryInfoResource.
        :param properties: The properties of this EntryInfoResource.
        """
        self.openapi_types = {
            'description': str,
            'formats': List[str],
            'output_fields_by_format': Dict[str, List[str]],
            'properties': Dict[str, EntryInfoProperty]
        }

        self.attribute_map = {
            'description': 'description',
            'formats': 'formats',
            'output_fields_by_format': 'output_fields_by_format',
            'properties': 'properties'
        }

        self._description = description
        self._formats = formats
        self._output_fields_by_format = output_fields_by_format
        self._properties = properties

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EntryInfoResource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EntryInfoResource of this EntryInfoResource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this EntryInfoResource.

        Description of the entry.

        :return: The description of this EntryInfoResource.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EntryInfoResource.

        Description of the entry.

        :param description: The description of this EntryInfoResource.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def formats(self):
        """Gets the formats of this EntryInfoResource.

        List of output formats available for this type of entry.

        :return: The formats of this EntryInfoResource.
        :rtype: List[str]
        """
        return self._formats

    @formats.setter
    def formats(self, formats):
        """Sets the formats of this EntryInfoResource.

        List of output formats available for this type of entry.

        :param formats: The formats of this EntryInfoResource.
        :type formats: List[str]
        """
        if formats is None:
            raise ValueError("Invalid value for `formats`, must not be `None`")

        self._formats = formats

    @property
    def output_fields_by_format(self):
        """Gets the output_fields_by_format of this EntryInfoResource.

        Dictionary of available output fields for this entry type, where the keys are the values of the `formats` list and the values are the keys of the `properties` dictionary.

        :return: The output_fields_by_format of this EntryInfoResource.
        :rtype: Dict[str, List[str]]
        """
        return self._output_fields_by_format

    @output_fields_by_format.setter
    def output_fields_by_format(self, output_fields_by_format):
        """Sets the output_fields_by_format of this EntryInfoResource.

        Dictionary of available output fields for this entry type, where the keys are the values of the `formats` list and the values are the keys of the `properties` dictionary.

        :param output_fields_by_format: The output_fields_by_format of this EntryInfoResource.
        :type output_fields_by_format: Dict[str, List[str]]
        """
        if output_fields_by_format is None:
            raise ValueError("Invalid value for `output_fields_by_format`, must not be `None`")

        self._output_fields_by_format = output_fields_by_format

    @property
    def properties(self):
        """Gets the properties of this EntryInfoResource.

        A dictionary describing queryable properties for this entry type, where each key is a property name.

        :return: The properties of this EntryInfoResource.
        :rtype: Dict[str, EntryInfoProperty]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this EntryInfoResource.

        A dictionary describing queryable properties for this entry type, where each key is a property name.

        :param properties: The properties of this EntryInfoResource.
        :type properties: Dict[str, EntryInfoProperty]
        """
        if properties is None:
            raise ValueError("Invalid value for `properties`, must not be `None`")

        self._properties = properties
