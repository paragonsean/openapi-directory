# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.homepage2 import Homepage2
import re
from openapi_server import util


class Provider(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, homepage: Homepage2=None, name: str=None, prefix: str=None):
        """Provider - a model defined in OpenAPI

        :param description: The description of this Provider.
        :param homepage: The homepage of this Provider.
        :param name: The name of this Provider.
        :param prefix: The prefix of this Provider.
        """
        self.openapi_types = {
            'description': str,
            'homepage': Homepage2,
            'name': str,
            'prefix': str
        }

        self.attribute_map = {
            'description': 'description',
            'homepage': 'homepage',
            'name': 'name',
            'prefix': 'prefix'
        }

        self._description = description
        self._homepage = homepage
        self._name = name
        self._prefix = prefix

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Provider':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Provider of this Provider.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this Provider.

        a longer description of the database provider

        :return: The description of this Provider.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Provider.

        a longer description of the database provider

        :param description: The description of this Provider.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def homepage(self):
        """Gets the homepage of this Provider.


        :return: The homepage of this Provider.
        :rtype: Homepage2
        """
        return self._homepage

    @homepage.setter
    def homepage(self, homepage):
        """Sets the homepage of this Provider.


        :param homepage: The homepage of this Provider.
        :type homepage: Homepage2
        """

        self._homepage = homepage

    @property
    def name(self):
        """Gets the name of this Provider.

        a short name for the database provider

        :return: The name of this Provider.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Provider.

        a short name for the database provider

        :param name: The name of this Provider.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def prefix(self):
        """Gets the prefix of this Provider.

        database-provider-specific prefix as found in section Database-Provider-Specific Namespace Prefixes.

        :return: The prefix of this Provider.
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this Provider.

        database-provider-specific prefix as found in section Database-Provider-Specific Namespace Prefixes.

        :param prefix: The prefix of this Provider.
        :type prefix: str
        """
        if prefix is None:
            raise ValueError("Invalid value for `prefix`, must not be `None`")
        if prefix is not None and not re.search(r'^[a-z]([a-z]|[0-9]|_)*$', prefix):
            raise ValueError("Invalid value for `prefix`, must be a follow pattern or equal to `/^[a-z]([a-z]|[0-9]|_)*$/`")

        self._prefix = prefix
