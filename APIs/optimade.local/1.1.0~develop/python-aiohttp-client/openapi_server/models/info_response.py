# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.base_info_resource import BaseInfoResource
from openapi_server.models.error import Error
from openapi_server.models.json_api import JsonApi
from openapi_server.models.resource import Resource
from openapi_server.models.response_meta import ResponseMeta
from openapi_server.models.toplevel_links import ToplevelLinks
from openapi_server import util


class InfoResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data: BaseInfoResource=None, errors: list[Error]=None, included: list[Resource]=None, jsonapi: JsonApi=None, links: ToplevelLinks=None, meta: ResponseMeta=None):
        """InfoResponse - a model defined in OpenAPI

        :param data: The data of this InfoResponse.
        :param errors: The errors of this InfoResponse.
        :param included: The included of this InfoResponse.
        :param jsonapi: The jsonapi of this InfoResponse.
        :param links: The links of this InfoResponse.
        :param meta: The meta of this InfoResponse.
        """
        self.openapi_types = {
            'data': BaseInfoResource,
            'errors': list[Error],
            'included': list[Resource],
            'jsonapi': JsonApi,
            'links': ToplevelLinks,
            'meta': ResponseMeta
        }

        self.attribute_map = {
            'data': 'data',
            'errors': 'errors',
            'included': 'included',
            'jsonapi': 'jsonapi',
            'links': 'links',
            'meta': 'meta'
        }

        self._data = data
        self._errors = errors
        self._included = included
        self._jsonapi = jsonapi
        self._links = links
        self._meta = meta

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InfoResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InfoResponse of this InfoResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data(self):
        """Gets the data of this InfoResponse.

        The implementations /info data

        :return: The data of this InfoResponse.
        :rtype: BaseInfoResource
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this InfoResponse.

        The implementations /info data

        :param data: The data of this InfoResponse.
        :type data: BaseInfoResource
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")

        self._data = data

    @property
    def errors(self):
        """Gets the errors of this InfoResponse.

        A list of unique errors

        :return: The errors of this InfoResponse.
        :rtype: list[Error]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this InfoResponse.

        A list of unique errors

        :param errors: The errors of this InfoResponse.
        :type errors: list[Error]
        """

        self._errors = errors

    @property
    def included(self):
        """Gets the included of this InfoResponse.

        A list of unique included resources

        :return: The included of this InfoResponse.
        :rtype: list[Resource]
        """
        return self._included

    @included.setter
    def included(self, included):
        """Sets the included of this InfoResponse.

        A list of unique included resources

        :param included: The included of this InfoResponse.
        :type included: list[Resource]
        """

        self._included = included

    @property
    def jsonapi(self):
        """Gets the jsonapi of this InfoResponse.

        Information about the JSON API used

        :return: The jsonapi of this InfoResponse.
        :rtype: JsonApi
        """
        return self._jsonapi

    @jsonapi.setter
    def jsonapi(self, jsonapi):
        """Sets the jsonapi of this InfoResponse.

        Information about the JSON API used

        :param jsonapi: The jsonapi of this InfoResponse.
        :type jsonapi: JsonApi
        """

        self._jsonapi = jsonapi

    @property
    def links(self):
        """Gets the links of this InfoResponse.

        Links associated with the primary data or errors

        :return: The links of this InfoResponse.
        :rtype: ToplevelLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this InfoResponse.

        Links associated with the primary data or errors

        :param links: The links of this InfoResponse.
        :type links: ToplevelLinks
        """

        self._links = links

    @property
    def meta(self):
        """Gets the meta of this InfoResponse.

        A meta object containing non-standard information

        :return: The meta of this InfoResponse.
        :rtype: ResponseMeta
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this InfoResponse.

        A meta object containing non-standard information

        :param meta: The meta of this InfoResponse.
        :type meta: ResponseMeta
        """
        if meta is None:
            raise ValueError("Invalid value for `meta`, must not be `None`")

        self._meta = meta
