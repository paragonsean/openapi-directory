# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.base_relationship_meta import BaseRelationshipMeta
from openapi_server.models.base_relationship_resource import BaseRelationshipResource
from openapi_server import util


class Data2(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, meta: BaseRelationshipMeta=None, type: str=None):
        """Data2 - a model defined in OpenAPI

        :param id: The id of this Data2.
        :param meta: The meta of this Data2.
        :param type: The type of this Data2.
        """
        self.openapi_types = {
            'id': str,
            'meta': BaseRelationshipMeta,
            'type': str
        }

        self.attribute_map = {
            'id': 'id',
            'meta': 'meta',
            'type': 'type'
        }

        self._id = id
        self._meta = meta
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Data2':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Data_2 of this Data2.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Data2.

        Resource ID

        :return: The id of this Data2.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Data2.

        Resource ID

        :param id: The id of this Data2.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def meta(self):
        """Gets the meta of this Data2.

        Relationship meta field. MUST contain 'description' if supplied.

        :return: The meta of this Data2.
        :rtype: BaseRelationshipMeta
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this Data2.

        Relationship meta field. MUST contain 'description' if supplied.

        :param meta: The meta of this Data2.
        :type meta: BaseRelationshipMeta
        """

        self._meta = meta

    @property
    def type(self):
        """Gets the type of this Data2.

        Resource type

        :return: The type of this Data2.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Data2.

        Resource type

        :param type: The type of this Data2.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
