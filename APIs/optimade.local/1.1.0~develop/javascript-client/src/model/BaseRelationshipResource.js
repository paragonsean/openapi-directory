/**
 * OPTIMADE API
 * The [Open Databases Integration for Materials Design (OPTIMADE) consortium](https://www.optimade.org/) aims to make materials databases interoperational by developing a common REST API.  This specification is generated using [`optimade-python-tools`](https://github.com/Materials-Consortia/optimade-python-tools/tree/v0.16.0) v0.16.0.
 *
 * The version of the OpenAPI document: 1.1.0~develop
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BaseRelationshipMeta from './BaseRelationshipMeta';

/**
 * The BaseRelationshipResource model module.
 * @module model/BaseRelationshipResource
 * @version 1.1.0~develop
 */
class BaseRelationshipResource {
    /**
     * Constructs a new <code>BaseRelationshipResource</code>.
     * Minimum requirements to represent a relationship resource
     * @alias module:model/BaseRelationshipResource
     * @param id {String} Resource ID
     * @param type {String} Resource type
     */
    constructor(id, type) { 
        
        BaseRelationshipResource.initialize(this, id, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, type) { 
        obj['id'] = id;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>BaseRelationshipResource</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BaseRelationshipResource} obj Optional instance to populate.
     * @return {module:model/BaseRelationshipResource} The populated <code>BaseRelationshipResource</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BaseRelationshipResource();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('meta')) {
                obj['meta'] = ApiClient.convertToType(data['meta'], BaseRelationshipMeta);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BaseRelationshipResource</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BaseRelationshipResource</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BaseRelationshipResource.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `meta`
        if (data['meta']) { // data not null
          BaseRelationshipMeta.validateJSON(data['meta']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

BaseRelationshipResource.RequiredProperties = ["id", "type"];

/**
 * Resource ID
 * @member {String} id
 */
BaseRelationshipResource.prototype['id'] = undefined;

/**
 * Relationship meta field. MUST contain 'description' if supplied.
 * @member {module:model/BaseRelationshipMeta} meta
 */
BaseRelationshipResource.prototype['meta'] = undefined;

/**
 * Resource type
 * @member {String} type
 */
BaseRelationshipResource.prototype['type'] = undefined;






export default BaseRelationshipResource;

