/**
 * OPTIMADE API
 * The [Open Databases Integration for Materials Design (OPTIMADE) consortium](https://www.optimade.org/) aims to make materials databases interoperational by developing a common REST API.  This specification is generated using [`optimade-python-tools`](https://github.com/Materials-Consortia/optimade-python-tools/tree/v0.16.0) v0.16.0.
 *
 * The version of the OpenAPI document: 1.1.0~develop
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AvailableApiVersion from './AvailableApiVersion';

/**
 * The BaseInfoAttributes model module.
 * @module model/BaseInfoAttributes
 * @version 1.1.0~develop
 */
class BaseInfoAttributes {
    /**
     * Constructs a new <code>BaseInfoAttributes</code>.
     * Attributes for Base URL Info endpoint
     * @alias module:model/BaseInfoAttributes
     * @param apiVersion {String} Presently used full version of the OPTIMADE API. The version number string MUST NOT be prefixed by, e.g., \"v\". Examples: `1.0.0`, `1.0.0-rc.2`.
     * @param availableApiVersions {Array.<module:model/AvailableApiVersion>} A list of dictionaries of available API versions at other base URLs
     * @param availableEndpoints {Array.<String>} List of available endpoints (i.e., the string to be appended to the versioned base URL).
     * @param entryTypesByFormat {Object.<String, Array.<String>>} Available entry endpoints as a function of output formats.
     */
    constructor(apiVersion, availableApiVersions, availableEndpoints, entryTypesByFormat) { 
        
        BaseInfoAttributes.initialize(this, apiVersion, availableApiVersions, availableEndpoints, entryTypesByFormat);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, apiVersion, availableApiVersions, availableEndpoints, entryTypesByFormat) { 
        obj['api_version'] = apiVersion;
        obj['available_api_versions'] = availableApiVersions;
        obj['available_endpoints'] = availableEndpoints;
        obj['entry_types_by_format'] = entryTypesByFormat;
        obj['is_index'] = false;
    }

    /**
     * Constructs a <code>BaseInfoAttributes</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BaseInfoAttributes} obj Optional instance to populate.
     * @return {module:model/BaseInfoAttributes} The populated <code>BaseInfoAttributes</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BaseInfoAttributes();

            if (data.hasOwnProperty('api_version')) {
                obj['api_version'] = ApiClient.convertToType(data['api_version'], 'String');
            }
            if (data.hasOwnProperty('available_api_versions')) {
                obj['available_api_versions'] = ApiClient.convertToType(data['available_api_versions'], [AvailableApiVersion]);
            }
            if (data.hasOwnProperty('available_endpoints')) {
                obj['available_endpoints'] = ApiClient.convertToType(data['available_endpoints'], ['String']);
            }
            if (data.hasOwnProperty('entry_types_by_format')) {
                obj['entry_types_by_format'] = ApiClient.convertToType(data['entry_types_by_format'], {'String': ['String']});
            }
            if (data.hasOwnProperty('formats')) {
                obj['formats'] = ApiClient.convertToType(data['formats'], ['String']);
            }
            if (data.hasOwnProperty('is_index')) {
                obj['is_index'] = ApiClient.convertToType(data['is_index'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BaseInfoAttributes</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BaseInfoAttributes</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BaseInfoAttributes.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['api_version'] && !(typeof data['api_version'] === 'string' || data['api_version'] instanceof String)) {
            throw new Error("Expected the field `api_version` to be a primitive type in the JSON string but got " + data['api_version']);
        }
        if (data['available_api_versions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['available_api_versions'])) {
                throw new Error("Expected the field `available_api_versions` to be an array in the JSON data but got " + data['available_api_versions']);
            }
            // validate the optional field `available_api_versions` (array)
            for (const item of data['available_api_versions']) {
                AvailableApiVersion.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['available_endpoints'])) {
            throw new Error("Expected the field `available_endpoints` to be an array in the JSON data but got " + data['available_endpoints']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['formats'])) {
            throw new Error("Expected the field `formats` to be an array in the JSON data but got " + data['formats']);
        }

        return true;
    }


}

BaseInfoAttributes.RequiredProperties = ["api_version", "available_api_versions", "available_endpoints", "entry_types_by_format"];

/**
 * Presently used full version of the OPTIMADE API. The version number string MUST NOT be prefixed by, e.g., \"v\". Examples: `1.0.0`, `1.0.0-rc.2`.
 * @member {String} api_version
 */
BaseInfoAttributes.prototype['api_version'] = undefined;

/**
 * A list of dictionaries of available API versions at other base URLs
 * @member {Array.<module:model/AvailableApiVersion>} available_api_versions
 */
BaseInfoAttributes.prototype['available_api_versions'] = undefined;

/**
 * List of available endpoints (i.e., the string to be appended to the versioned base URL).
 * @member {Array.<String>} available_endpoints
 */
BaseInfoAttributes.prototype['available_endpoints'] = undefined;

/**
 * Available entry endpoints as a function of output formats.
 * @member {Object.<String, Array.<String>>} entry_types_by_format
 */
BaseInfoAttributes.prototype['entry_types_by_format'] = undefined;

/**
 * List of available output formats.
 * @member {Array.<String>} formats
 */
BaseInfoAttributes.prototype['formats'] = undefined;

/**
 * If true, this is an index meta-database base URL (see section Index Meta-Database). If this member is not provided, the client MUST assume this is not an index meta-database base URL (i.e., the default is for `is_index` to be `false`).
 * @member {Boolean} is_index
 * @default false
 */
BaseInfoAttributes.prototype['is_index'] = false;






export default BaseInfoAttributes;

