/**
 * OPTIMADE API
 * The [Open Databases Integration for Materials Design (OPTIMADE) consortium](https://www.optimade.org/) aims to make materials databases interoperational by developing a common REST API.  This specification is generated using [`optimade-python-tools`](https://github.com/Materials-Consortia/optimade-python-tools/tree/v0.16.0) v0.16.0.
 *
 * The version of the OpenAPI document: 1.1.0~develop
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Aggregate from './Aggregate';
import BaseUrl from './BaseUrl';
import Homepage1 from './Homepage1';
import LinkType from './LinkType';

/**
 * The LinksResourceAttributes model module.
 * @module model/LinksResourceAttributes
 * @version 1.1.0~develop
 */
class LinksResourceAttributes {
    /**
     * Constructs a new <code>LinksResourceAttributes</code>.
     * Links endpoint resource object attributes
     * @alias module:model/LinksResourceAttributes
     * @param baseUrl {module:model/BaseUrl} 
     * @param description {String} Human-readable description for the OPTIMADE API implementation, e.g., for use in clients to show a description to the end-user.
     * @param homepage {module:model/Homepage1} 
     * @param linkType {module:model/LinkType} The type of the linked relation. MUST be one of these values: 'child', 'root', 'external', 'providers'.
     * @param name {String} Human-readable name for the OPTIMADE API implementation, e.g., for use in clients to show the name to the end-user.
     */
    constructor(baseUrl, description, homepage, linkType, name) { 
        
        LinksResourceAttributes.initialize(this, baseUrl, description, homepage, linkType, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, baseUrl, description, homepage, linkType, name) { 
        obj['base_url'] = baseUrl;
        obj['description'] = description;
        obj['homepage'] = homepage;
        obj['link_type'] = linkType;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>LinksResourceAttributes</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LinksResourceAttributes} obj Optional instance to populate.
     * @return {module:model/LinksResourceAttributes} The populated <code>LinksResourceAttributes</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LinksResourceAttributes();

            if (data.hasOwnProperty('aggregate')) {
                obj['aggregate'] = ApiClient.convertToType(data['aggregate'], Aggregate);
            }
            if (data.hasOwnProperty('base_url')) {
                obj['base_url'] = BaseUrl.constructFromObject(data['base_url']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('homepage')) {
                obj['homepage'] = Homepage1.constructFromObject(data['homepage']);
            }
            if (data.hasOwnProperty('link_type')) {
                obj['link_type'] = ApiClient.convertToType(data['link_type'], LinkType);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('no_aggregate_reason')) {
                obj['no_aggregate_reason'] = ApiClient.convertToType(data['no_aggregate_reason'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LinksResourceAttributes</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LinksResourceAttributes</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of LinksResourceAttributes.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `base_url`
        if (data['base_url']) { // data not null
          BaseUrl.validateJSON(data['base_url']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `homepage`
        if (data['homepage']) { // data not null
          Homepage1.validateJSON(data['homepage']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['no_aggregate_reason'] && !(typeof data['no_aggregate_reason'] === 'string' || data['no_aggregate_reason'] instanceof String)) {
            throw new Error("Expected the field `no_aggregate_reason` to be a primitive type in the JSON string but got " + data['no_aggregate_reason']);
        }

        return true;
    }


}

LinksResourceAttributes.RequiredProperties = ["base_url", "description", "homepage", "link_type", "name"];

/**
 * A string indicating whether a client that is following links to aggregate results from different OPTIMADE implementations should follow this link or not. This flag SHOULD NOT be indicated for links where `link_type` is not `child`.  If not specified, clients MAY assume that the value is `ok`. If specified, and the value is anything different than `ok`, the client MUST assume that the server is suggesting not to follow the link during aggregation by default (also if the value is not among the known ones, in case a future specification adds new accepted values).  Specific values indicate the reason why the server is providing the suggestion. A client MAY follow the link anyway if it has reason to do so (e.g., if the client is looking for all test databases, it MAY follow the links marked with `aggregate`=`test`).  If specified, it MUST be one of the values listed in section Link Aggregate Options.
 * @member {module:model/Aggregate} aggregate
 */
LinksResourceAttributes.prototype['aggregate'] = undefined;

/**
 * @member {module:model/BaseUrl} base_url
 */
LinksResourceAttributes.prototype['base_url'] = undefined;

/**
 * Human-readable description for the OPTIMADE API implementation, e.g., for use in clients to show a description to the end-user.
 * @member {String} description
 */
LinksResourceAttributes.prototype['description'] = undefined;

/**
 * @member {module:model/Homepage1} homepage
 */
LinksResourceAttributes.prototype['homepage'] = undefined;

/**
 * The type of the linked relation. MUST be one of these values: 'child', 'root', 'external', 'providers'.
 * @member {module:model/LinkType} link_type
 */
LinksResourceAttributes.prototype['link_type'] = undefined;

/**
 * Human-readable name for the OPTIMADE API implementation, e.g., for use in clients to show the name to the end-user.
 * @member {String} name
 */
LinksResourceAttributes.prototype['name'] = undefined;

/**
 * An OPTIONAL human-readable string indicating the reason for suggesting not to aggregate results following the link. It SHOULD NOT be present if `aggregate`=`ok`.
 * @member {String} no_aggregate_reason
 */
LinksResourceAttributes.prototype['no_aggregate_reason'] = undefined;






export default LinksResourceAttributes;

