/**
 * OPTIMADE API
 * The [Open Databases Integration for Materials Design (OPTIMADE) consortium](https://www.optimade.org/) aims to make materials databases interoperational by developing a common REST API.  This specification is generated using [`optimade-python-tools`](https://github.com/Materials-Consortia/optimade-python-tools/tree/v0.16.0) v0.16.0.
 *
 * The version of the OpenAPI document: 1.1.0~develop
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Implementation from './Implementation';
import Provider from './Provider';
import ResponseMetaQuery from './ResponseMetaQuery';
import Schema from './Schema';
import Warnings from './Warnings';

/**
 * The ResponseMeta model module.
 * @module model/ResponseMeta
 * @version 1.1.0~develop
 */
class ResponseMeta {
    /**
     * Constructs a new <code>ResponseMeta</code>.
     * A [JSON API meta member](https://jsonapi.org/format/1.0#document-meta) that contains JSON API meta objects of non-standard meta-information.  OPTIONAL additional information global to the query that is not specified in this document, MUST start with a database-provider-specific prefix.
     * @alias module:model/ResponseMeta
     * @param apiVersion {String} Presently used full version of the OPTIMADE API. The version number string MUST NOT be prefixed by, e.g., \"v\". Examples: `1.0.0`, `1.0.0-rc.2`.
     * @param moreDataAvailable {Boolean} `false` if the response contains all data for the request (e.g., a request issued to a single entry endpoint, or a `filter` query at the last page of a paginated response) and `true` if the response is incomplete in the sense that multiple objects match the request, and not all of them have been included in the response (e.g., a query with multiple pages that is not at the last page).
     * @param query {module:model/ResponseMetaQuery} Information on the Query that was requested
     */
    constructor(apiVersion, moreDataAvailable, query) { 
        
        ResponseMeta.initialize(this, apiVersion, moreDataAvailable, query);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, apiVersion, moreDataAvailable, query) { 
        obj['api_version'] = apiVersion;
        obj['more_data_available'] = moreDataAvailable;
        obj['query'] = query;
    }

    /**
     * Constructs a <code>ResponseMeta</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ResponseMeta} obj Optional instance to populate.
     * @return {module:model/ResponseMeta} The populated <code>ResponseMeta</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ResponseMeta();

            if (data.hasOwnProperty('api_version')) {
                obj['api_version'] = ApiClient.convertToType(data['api_version'], 'String');
            }
            if (data.hasOwnProperty('data_available')) {
                obj['data_available'] = ApiClient.convertToType(data['data_available'], 'Number');
            }
            if (data.hasOwnProperty('data_returned')) {
                obj['data_returned'] = ApiClient.convertToType(data['data_returned'], 'Number');
            }
            if (data.hasOwnProperty('implementation')) {
                obj['implementation'] = ApiClient.convertToType(data['implementation'], Implementation);
            }
            if (data.hasOwnProperty('last_id')) {
                obj['last_id'] = ApiClient.convertToType(data['last_id'], 'String');
            }
            if (data.hasOwnProperty('more_data_available')) {
                obj['more_data_available'] = ApiClient.convertToType(data['more_data_available'], 'Boolean');
            }
            if (data.hasOwnProperty('provider')) {
                obj['provider'] = ApiClient.convertToType(data['provider'], Provider);
            }
            if (data.hasOwnProperty('query')) {
                obj['query'] = ApiClient.convertToType(data['query'], ResponseMetaQuery);
            }
            if (data.hasOwnProperty('response_message')) {
                obj['response_message'] = ApiClient.convertToType(data['response_message'], 'String');
            }
            if (data.hasOwnProperty('schema')) {
                obj['schema'] = Schema.constructFromObject(data['schema']);
            }
            if (data.hasOwnProperty('time_stamp')) {
                obj['time_stamp'] = ApiClient.convertToType(data['time_stamp'], 'Date');
            }
            if (data.hasOwnProperty('warnings')) {
                obj['warnings'] = ApiClient.convertToType(data['warnings'], [Warnings]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ResponseMeta</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ResponseMeta</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ResponseMeta.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['api_version'] && !(typeof data['api_version'] === 'string' || data['api_version'] instanceof String)) {
            throw new Error("Expected the field `api_version` to be a primitive type in the JSON string but got " + data['api_version']);
        }
        // validate the optional field `implementation`
        if (data['implementation']) { // data not null
          Implementation.validateJSON(data['implementation']);
        }
        // ensure the json data is a string
        if (data['last_id'] && !(typeof data['last_id'] === 'string' || data['last_id'] instanceof String)) {
            throw new Error("Expected the field `last_id` to be a primitive type in the JSON string but got " + data['last_id']);
        }
        // validate the optional field `provider`
        if (data['provider']) { // data not null
          Provider.validateJSON(data['provider']);
        }
        // validate the optional field `query`
        if (data['query']) { // data not null
          ResponseMetaQuery.validateJSON(data['query']);
        }
        // ensure the json data is a string
        if (data['response_message'] && !(typeof data['response_message'] === 'string' || data['response_message'] instanceof String)) {
            throw new Error("Expected the field `response_message` to be a primitive type in the JSON string but got " + data['response_message']);
        }
        // validate the optional field `schema`
        if (data['schema']) { // data not null
          Schema.validateJSON(data['schema']);
        }
        if (data['warnings']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['warnings'])) {
                throw new Error("Expected the field `warnings` to be an array in the JSON data but got " + data['warnings']);
            }
            // validate the optional field `warnings` (array)
            for (const item of data['warnings']) {
                Warnings.validateJSON(item);
            };
        }

        return true;
    }


}

ResponseMeta.RequiredProperties = ["api_version", "more_data_available", "query"];

/**
 * Presently used full version of the OPTIMADE API. The version number string MUST NOT be prefixed by, e.g., \"v\". Examples: `1.0.0`, `1.0.0-rc.2`.
 * @member {String} api_version
 */
ResponseMeta.prototype['api_version'] = undefined;

/**
 * An integer containing the total number of data resource objects available in the database for the endpoint.
 * @member {Number} data_available
 */
ResponseMeta.prototype['data_available'] = undefined;

/**
 * An integer containing the total number of data resource objects returned for the current `filter` query, independent of pagination.
 * @member {Number} data_returned
 */
ResponseMeta.prototype['data_returned'] = undefined;

/**
 * a dictionary describing the server implementation
 * @member {module:model/Implementation} implementation
 */
ResponseMeta.prototype['implementation'] = undefined;

/**
 * a string containing the last ID returned
 * @member {String} last_id
 */
ResponseMeta.prototype['last_id'] = undefined;

/**
 * `false` if the response contains all data for the request (e.g., a request issued to a single entry endpoint, or a `filter` query at the last page of a paginated response) and `true` if the response is incomplete in the sense that multiple objects match the request, and not all of them have been included in the response (e.g., a query with multiple pages that is not at the last page).
 * @member {Boolean} more_data_available
 */
ResponseMeta.prototype['more_data_available'] = undefined;

/**
 * information on the database provider of the implementation.
 * @member {module:model/Provider} provider
 */
ResponseMeta.prototype['provider'] = undefined;

/**
 * Information on the Query that was requested
 * @member {module:model/ResponseMetaQuery} query
 */
ResponseMeta.prototype['query'] = undefined;

/**
 * response string from the server
 * @member {String} response_message
 */
ResponseMeta.prototype['response_message'] = undefined;

/**
 * @member {module:model/Schema} schema
 */
ResponseMeta.prototype['schema'] = undefined;

/**
 * A timestamp containing the date and time at which the query was executed.
 * @member {Date} time_stamp
 */
ResponseMeta.prototype['time_stamp'] = undefined;

/**
 * A list of warning resource objects representing non-critical errors or warnings. A warning resource object is defined similarly to a [JSON API error object](http://jsonapi.org/format/1.0/#error-objects), but MUST also include the field `type`, which MUST have the value `\"warning\"`. The field `detail` MUST be present and SHOULD contain a non-critical message, e.g., reporting unrecognized search attributes or deprecated features. The field `status`, representing a HTTP response status code, MUST NOT be present for a warning resource object. This is an exclusive field for error resource objects.
 * @member {Array.<module:model/Warnings>} warnings
 */
ResponseMeta.prototype['warnings'] = undefined;






export default ResponseMeta;

