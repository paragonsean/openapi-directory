/**
 * OPTIMADE API
 * The [Open Databases Integration for Materials Design (OPTIMADE) consortium](https://www.optimade.org/) aims to make materials databases interoperational by developing a common REST API.  This specification is generated using [`optimade-python-tools`](https://github.com/Materials-Consortia/optimade-python-tools/tree/v0.16.0) v0.16.0.
 *
 * The version of the OpenAPI document: 1.1.0~develop
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EntryRelationships from './EntryRelationships';
import ReferenceResourceAttributes from './ReferenceResourceAttributes';
import ResourceLinks from './ResourceLinks';

/**
 * The ReferenceResource model module.
 * @module model/ReferenceResource
 * @version 1.1.0~develop
 */
class ReferenceResource {
    /**
     * Constructs a new <code>ReferenceResource</code>.
     * The &#x60;references&#x60; entries describe bibliographic references.  The following properties are used to provide the bibliographic details:  - **address**, **annote**, **booktitle**, **chapter**, **crossref**, **edition**, **howpublished**, **institution**, **journal**, **key**, **month**, **note**, **number**, **organization**, **pages**, **publisher**, **school**, **series**, **title**, **volume**, **year**: meanings of these properties match the [BibTeX specification](http://bibtexml.sourceforge.net/btxdoc.pdf), values are strings; - **bib_type**: type of the reference, corresponding to **type** property in the BibTeX specification, value is string; - **authors** and **editors**: lists of *person objects* which are dictionaries with the following keys:     - **name**: Full name of the person, REQUIRED.     - **firstname**, **lastname**: Parts of the person&#39;s name, OPTIONAL. - **doi** and **url**: values are strings. - **Requirements/Conventions**:     - **Support**: OPTIONAL support in implementations, i.e., any of the properties MAY be &#x60;null&#x60;.     - **Query**: Support for queries on any of these properties is OPTIONAL.         If supported, filters MAY support only a subset of comparison operators.     - Every references entry MUST contain at least one of the properties.
     * @alias module:model/ReferenceResource
     * @param attributes {module:model/ReferenceResourceAttributes} 
     * @param id {String} An entry's ID as defined in section Definition of Terms.  - **Type**: string.  - **Requirements/Conventions**:     - **Support**: MUST be supported by all implementations, MUST NOT be `null`.     - **Query**: MUST be a queryable property with support for all mandatory filter features.     - **Response**: REQUIRED in the response.  - **Examples**:     - `\"db/1234567\"`     - `\"cod/2000000\"`     - `\"cod/2000000@1234567\"`     - `\"nomad/L1234567890\"`     - `\"42\"`
     * @param type {String} The name of the type of an entry. - **Type**: string. - **Requirements/Conventions**:     - **Support**: MUST be supported by all implementations, MUST NOT be `null`.     - **Query**: MUST be a queryable property with support for all mandatory filter features.     - **Response**: REQUIRED in the response.     - MUST be an existing entry type.     - The entry of type <type> and ID <id> MUST be returned in response to a request for `/<type>/<id>` under the versioned base URL. - **Example**: `\"structures\"`
     */
    constructor(attributes, id, type) { 
        
        ReferenceResource.initialize(this, attributes, id, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, attributes, id, type) { 
        obj['attributes'] = attributes;
        obj['id'] = id;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>ReferenceResource</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReferenceResource} obj Optional instance to populate.
     * @return {module:model/ReferenceResource} The populated <code>ReferenceResource</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReferenceResource();

            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = ReferenceResourceAttributes.constructFromObject(data['attributes']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('links')) {
                obj['links'] = ApiClient.convertToType(data['links'], ResourceLinks);
            }
            if (data.hasOwnProperty('meta')) {
                obj['meta'] = ApiClient.convertToType(data['meta'], Object);
            }
            if (data.hasOwnProperty('relationships')) {
                obj['relationships'] = ApiClient.convertToType(data['relationships'], EntryRelationships);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReferenceResource</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReferenceResource</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ReferenceResource.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `attributes`
        if (data['attributes']) { // data not null
          ReferenceResourceAttributes.validateJSON(data['attributes']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `links`
        if (data['links']) { // data not null
          ResourceLinks.validateJSON(data['links']);
        }
        // validate the optional field `relationships`
        if (data['relationships']) { // data not null
          EntryRelationships.validateJSON(data['relationships']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

ReferenceResource.RequiredProperties = ["attributes", "id", "type"];

/**
 * @member {module:model/ReferenceResourceAttributes} attributes
 */
ReferenceResource.prototype['attributes'] = undefined;

/**
 * An entry's ID as defined in section Definition of Terms.  - **Type**: string.  - **Requirements/Conventions**:     - **Support**: MUST be supported by all implementations, MUST NOT be `null`.     - **Query**: MUST be a queryable property with support for all mandatory filter features.     - **Response**: REQUIRED in the response.  - **Examples**:     - `\"db/1234567\"`     - `\"cod/2000000\"`     - `\"cod/2000000@1234567\"`     - `\"nomad/L1234567890\"`     - `\"42\"`
 * @member {String} id
 */
ReferenceResource.prototype['id'] = undefined;

/**
 * a links object containing links related to the resource.
 * @member {module:model/ResourceLinks} links
 */
ReferenceResource.prototype['links'] = undefined;

/**
 * a meta object containing non-standard meta-information about a resource that can not be represented as an attribute or relationship.
 * @member {Object} meta
 */
ReferenceResource.prototype['meta'] = undefined;

/**
 * A dictionary containing references to other entries according to the description in section Relationships encoded as [JSON API Relationships](https://jsonapi.org/format/1.0/#document-resource-object-relationships). The OPTIONAL human-readable description of the relationship MAY be provided in the `description` field inside the `meta` dictionary of the JSON API resource identifier object.
 * @member {module:model/EntryRelationships} relationships
 */
ReferenceResource.prototype['relationships'] = undefined;

/**
 * The name of the type of an entry. - **Type**: string. - **Requirements/Conventions**:     - **Support**: MUST be supported by all implementations, MUST NOT be `null`.     - **Query**: MUST be a queryable property with support for all mandatory filter features.     - **Response**: REQUIRED in the response.     - MUST be an existing entry type.     - The entry of type <type> and ID <id> MUST be returned in response to a request for `/<type>/<id>` under the versioned base URL. - **Example**: `\"structures\"`
 * @member {String} type
 */
ReferenceResource.prototype['type'] = undefined;






export default ReferenceResource;

