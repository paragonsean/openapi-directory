/**
 * OPTIMADE API
 * The [Open Databases Integration for Materials Design (OPTIMADE) consortium](https://www.optimade.org/) aims to make materials databases interoperational by developing a common REST API.  This specification is generated using [`optimade-python-tools`](https://github.com/Materials-Consortia/optimade-python-tools/tree/v0.16.0) v0.16.0.
 *
 * The version of the OpenAPI document: 1.1.0~develop
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ErrorLinks from './ErrorLinks';
import ErrorSource from './ErrorSource';

/**
 * The Warnings model module.
 * @module model/Warnings
 * @version 1.1.0~develop
 */
class Warnings {
    /**
     * Constructs a new <code>Warnings</code>.
     * OPTIMADE-specific warning class based on OPTIMADE-specific JSON API Error.  From the specification:  A warning resource object is defined similarly to a JSON API error object, but MUST also include the field type, which MUST have the value \&quot;warning\&quot;. The field detail MUST be present and SHOULD contain a non-critical message, e.g., reporting unrecognized search attributes or deprecated features.  Note: Must be named \&quot;Warnings\&quot;, since \&quot;Warning\&quot; is a built-in Python class.
     * @alias module:model/Warnings
     * @param detail {String} A human-readable explanation specific to this occurrence of the problem.
     * @param type {String} Warnings must be of type \"warning\"
     */
    constructor(detail, type) { 
        
        Warnings.initialize(this, detail, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, detail, type) { 
        obj['detail'] = detail;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>Warnings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Warnings} obj Optional instance to populate.
     * @return {module:model/Warnings} The populated <code>Warnings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Warnings();

            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('detail')) {
                obj['detail'] = ApiClient.convertToType(data['detail'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('links')) {
                obj['links'] = ApiClient.convertToType(data['links'], ErrorLinks);
            }
            if (data.hasOwnProperty('meta')) {
                obj['meta'] = ApiClient.convertToType(data['meta'], Object);
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], ErrorSource);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Warnings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Warnings</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Warnings.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // ensure the json data is a string
        if (data['detail'] && !(typeof data['detail'] === 'string' || data['detail'] instanceof String)) {
            throw new Error("Expected the field `detail` to be a primitive type in the JSON string but got " + data['detail']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `links`
        if (data['links']) { // data not null
          ErrorLinks.validateJSON(data['links']);
        }
        // validate the optional field `source`
        if (data['source']) { // data not null
          ErrorSource.validateJSON(data['source']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

Warnings.RequiredProperties = ["detail", "type"];

/**
 * an application-specific error code, expressed as a string value.
 * @member {String} code
 */
Warnings.prototype['code'] = undefined;

/**
 * A human-readable explanation specific to this occurrence of the problem.
 * @member {String} detail
 */
Warnings.prototype['detail'] = undefined;

/**
 * A unique identifier for this particular occurrence of the problem.
 * @member {String} id
 */
Warnings.prototype['id'] = undefined;

/**
 * A links object storing about
 * @member {module:model/ErrorLinks} links
 */
Warnings.prototype['links'] = undefined;

/**
 * a meta object containing non-standard meta-information about the error.
 * @member {Object} meta
 */
Warnings.prototype['meta'] = undefined;

/**
 * An object containing references to the source of the error
 * @member {module:model/ErrorSource} source
 */
Warnings.prototype['source'] = undefined;

/**
 * A short, human-readable summary of the problem. It **SHOULD NOT** change from occurrence to occurrence of the problem, except for purposes of localization.
 * @member {String} title
 */
Warnings.prototype['title'] = undefined;

/**
 * Warnings must be of type \"warning\"
 * @member {String} type
 */
Warnings.prototype['type'] = undefined;






export default Warnings;

