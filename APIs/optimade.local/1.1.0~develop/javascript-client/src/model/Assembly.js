/**
 * OPTIMADE API
 * The [Open Databases Integration for Materials Design (OPTIMADE) consortium](https://www.optimade.org/) aims to make materials databases interoperational by developing a common REST API.  This specification is generated using [`optimade-python-tools`](https://github.com/Materials-Consortia/optimade-python-tools/tree/v0.16.0) v0.16.0.
 *
 * The version of the OpenAPI document: 1.1.0~develop
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Assembly model module.
 * @module model/Assembly
 * @version 1.1.0~develop
 */
class Assembly {
    /**
     * Constructs a new <code>Assembly</code>.
     * A description of groups of sites that are statistically correlated.  - **Examples** (for each entry of the assemblies list):     - &#x60;{\&quot;sites_in_groups\&quot;: [[0], [1]], \&quot;group_probabilities: [0.3, 0.7]}&#x60;: the first site and the second site never occur at the same time in the unit cell.       Statistically, 30 % of the times the first site is present, while 70 % of the times the second site is present.     - &#x60;{\&quot;sites_in_groups\&quot;: [[1,2], [3]], \&quot;group_probabilities: [0.3, 0.7]}&#x60;: the second and third site are either present together or not present; they form the first group of atoms for this assembly.       The second group is formed by the fourth site. Sites of the first group (the second and the third) are never present at the same time as the fourth site.       30 % of times sites 1 and 2 are present (and site 3 is absent); 70 % of times site 3 is present (and sites 1 and 2 are absent).
     * @alias module:model/Assembly
     * @param groupProbabilities {Array.<Number>} Statistical probability of each group. It MUST have the same length as `sites_in_groups`. It SHOULD sum to one. See below for examples of how to specify the probability of the occurrence of a vacancy. The possible reasons for the values not to sum to one are the same as already specified above for the `concentration` of each `species`.
     * @param sitesInGroups {Array.<Array.<Number>>} Index of the sites (0-based) that belong to each group for each assembly.  - **Examples**:     - `[[1], [2]]`: two groups, one with the second site, one with the third.     - `[[1,2], [3]]`: one group with the second and third site, one with the fourth.
     */
    constructor(groupProbabilities, sitesInGroups) { 
        
        Assembly.initialize(this, groupProbabilities, sitesInGroups);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, groupProbabilities, sitesInGroups) { 
        obj['group_probabilities'] = groupProbabilities;
        obj['sites_in_groups'] = sitesInGroups;
    }

    /**
     * Constructs a <code>Assembly</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Assembly} obj Optional instance to populate.
     * @return {module:model/Assembly} The populated <code>Assembly</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Assembly();

            if (data.hasOwnProperty('group_probabilities')) {
                obj['group_probabilities'] = ApiClient.convertToType(data['group_probabilities'], ['Number']);
            }
            if (data.hasOwnProperty('sites_in_groups')) {
                obj['sites_in_groups'] = ApiClient.convertToType(data['sites_in_groups'], [['Number']]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Assembly</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Assembly</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Assembly.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['group_probabilities'])) {
            throw new Error("Expected the field `group_probabilities` to be an array in the JSON data but got " + data['group_probabilities']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['sites_in_groups'])) {
            throw new Error("Expected the field `sites_in_groups` to be an array in the JSON data but got " + data['sites_in_groups']);
        }

        return true;
    }


}

Assembly.RequiredProperties = ["group_probabilities", "sites_in_groups"];

/**
 * Statistical probability of each group. It MUST have the same length as `sites_in_groups`. It SHOULD sum to one. See below for examples of how to specify the probability of the occurrence of a vacancy. The possible reasons for the values not to sum to one are the same as already specified above for the `concentration` of each `species`.
 * @member {Array.<Number>} group_probabilities
 */
Assembly.prototype['group_probabilities'] = undefined;

/**
 * Index of the sites (0-based) that belong to each group for each assembly.  - **Examples**:     - `[[1], [2]]`: two groups, one with the second site, one with the third.     - `[[1,2], [3]]`: one group with the second and third site, one with the fourth.
 * @member {Array.<Array.<Number>>} sites_in_groups
 */
Assembly.prototype['sites_in_groups'] = undefined;






export default Assembly;

