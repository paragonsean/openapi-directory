/**
 * OPTIMADE API
 * The [Open Databases Integration for Materials Design (OPTIMADE) consortium](https://www.optimade.org/) aims to make materials databases interoperational by developing a common REST API.  This specification is generated using [`optimade-python-tools`](https://github.com/Materials-Consortia/optimade-python-tools/tree/v0.16.0) v0.16.0.
 *
 * The version of the OpenAPI document: 1.1.0~develop
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Data2 from './Data2';
import RelationshipLinks from './RelationshipLinks';

/**
 * The StructureRelationship model module.
 * @module model/StructureRelationship
 * @version 1.1.0~develop
 */
class StructureRelationship {
    /**
     * Constructs a new <code>StructureRelationship</code>.
     * Similar to normal JSON API relationship, but with addition of OPTIONAL meta field for a resource
     * @alias module:model/StructureRelationship
     */
    constructor() { 
        
        StructureRelationship.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>StructureRelationship</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StructureRelationship} obj Optional instance to populate.
     * @return {module:model/StructureRelationship} The populated <code>StructureRelationship</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StructureRelationship();

            if (data.hasOwnProperty('data')) {
                obj['data'] = Data2.constructFromObject(data['data']);
            }
            if (data.hasOwnProperty('links')) {
                obj['links'] = ApiClient.convertToType(data['links'], RelationshipLinks);
            }
            if (data.hasOwnProperty('meta')) {
                obj['meta'] = ApiClient.convertToType(data['meta'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StructureRelationship</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StructureRelationship</code>.
     */
    static validateJSON(data) {
        // validate the optional field `data`
        if (data['data']) { // data not null
          Data2.validateJSON(data['data']);
        }
        // validate the optional field `links`
        if (data['links']) { // data not null
          RelationshipLinks.validateJSON(data['links']);
        }

        return true;
    }


}



/**
 * @member {module:model/Data2} data
 */
StructureRelationship.prototype['data'] = undefined;

/**
 * a links object containing at least one of the following: self, related
 * @member {module:model/RelationshipLinks} links
 */
StructureRelationship.prototype['links'] = undefined;

/**
 * a meta object that contains non-standard meta-information about the relationship.
 * @member {Object} meta
 */
StructureRelationship.prototype['meta'] = undefined;






export default StructureRelationship;

