/**
 * OPTIMADE API
 * The [Open Databases Integration for Materials Design (OPTIMADE) consortium](https://www.optimade.org/) aims to make materials databases interoperational by developing a common REST API.  This specification is generated using [`optimade-python-tools`](https://github.com/Materials-Consortia/optimade-python-tools/tree/v0.16.0) v0.16.0.
 *
 * The version of the OpenAPI document: 1.1.0~develop
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ResponseMetaQuery model module.
 * @module model/ResponseMetaQuery
 * @version 1.1.0~develop
 */
class ResponseMetaQuery {
    /**
     * Constructs a new <code>ResponseMetaQuery</code>.
     * Information on the query that was requested.
     * @alias module:model/ResponseMetaQuery
     * @param representation {String} A string with the part of the URL following the versioned or unversioned base URL that serves the API. Query parameters that have not been used in processing the request MAY be omitted. In particular, if no query parameters have been involved in processing the request, the query part of the URL MAY be excluded. Example: `/structures?filter=nelements=2`
     */
    constructor(representation) { 
        
        ResponseMetaQuery.initialize(this, representation);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, representation) { 
        obj['representation'] = representation;
    }

    /**
     * Constructs a <code>ResponseMetaQuery</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ResponseMetaQuery} obj Optional instance to populate.
     * @return {module:model/ResponseMetaQuery} The populated <code>ResponseMetaQuery</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ResponseMetaQuery();

            if (data.hasOwnProperty('representation')) {
                obj['representation'] = ApiClient.convertToType(data['representation'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ResponseMetaQuery</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ResponseMetaQuery</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ResponseMetaQuery.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['representation'] && !(typeof data['representation'] === 'string' || data['representation'] instanceof String)) {
            throw new Error("Expected the field `representation` to be a primitive type in the JSON string but got " + data['representation']);
        }

        return true;
    }


}

ResponseMetaQuery.RequiredProperties = ["representation"];

/**
 * A string with the part of the URL following the versioned or unversioned base URL that serves the API. Query parameters that have not been used in processing the request MAY be omitted. In particular, if no query parameters have been involved in processing the request, the query part of the URL MAY be excluded. Example: `/structures?filter=nelements=2`
 * @member {String} representation
 */
ResponseMetaQuery.prototype['representation'] = undefined;






export default ResponseMetaQuery;

