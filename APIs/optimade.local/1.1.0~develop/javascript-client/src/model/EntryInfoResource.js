/**
 * OPTIMADE API
 * The [Open Databases Integration for Materials Design (OPTIMADE) consortium](https://www.optimade.org/) aims to make materials databases interoperational by developing a common REST API.  This specification is generated using [`optimade-python-tools`](https://github.com/Materials-Consortia/optimade-python-tools/tree/v0.16.0) v0.16.0.
 *
 * The version of the OpenAPI document: 1.1.0~develop
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EntryInfoProperty from './EntryInfoProperty';

/**
 * The EntryInfoResource model module.
 * @module model/EntryInfoResource
 * @version 1.1.0~develop
 */
class EntryInfoResource {
    /**
     * Constructs a new <code>EntryInfoResource</code>.
     * @alias module:model/EntryInfoResource
     * @param description {String} Description of the entry.
     * @param formats {Array.<String>} List of output formats available for this type of entry.
     * @param outputFieldsByFormat {Object.<String, Array.<String>>} Dictionary of available output fields for this entry type, where the keys are the values of the `formats` list and the values are the keys of the `properties` dictionary.
     * @param properties {Object.<String, module:model/EntryInfoProperty>} A dictionary describing queryable properties for this entry type, where each key is a property name.
     */
    constructor(description, formats, outputFieldsByFormat, properties) { 
        
        EntryInfoResource.initialize(this, description, formats, outputFieldsByFormat, properties);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, description, formats, outputFieldsByFormat, properties) { 
        obj['description'] = description;
        obj['formats'] = formats;
        obj['output_fields_by_format'] = outputFieldsByFormat;
        obj['properties'] = properties;
    }

    /**
     * Constructs a <code>EntryInfoResource</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EntryInfoResource} obj Optional instance to populate.
     * @return {module:model/EntryInfoResource} The populated <code>EntryInfoResource</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EntryInfoResource();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('formats')) {
                obj['formats'] = ApiClient.convertToType(data['formats'], ['String']);
            }
            if (data.hasOwnProperty('output_fields_by_format')) {
                obj['output_fields_by_format'] = ApiClient.convertToType(data['output_fields_by_format'], {'String': ['String']});
            }
            if (data.hasOwnProperty('properties')) {
                obj['properties'] = ApiClient.convertToType(data['properties'], {'String': EntryInfoProperty});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EntryInfoResource</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EntryInfoResource</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of EntryInfoResource.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['formats'])) {
            throw new Error("Expected the field `formats` to be an array in the JSON data but got " + data['formats']);
        }

        return true;
    }


}

EntryInfoResource.RequiredProperties = ["description", "formats", "output_fields_by_format", "properties"];

/**
 * Description of the entry.
 * @member {String} description
 */
EntryInfoResource.prototype['description'] = undefined;

/**
 * List of output formats available for this type of entry.
 * @member {Array.<String>} formats
 */
EntryInfoResource.prototype['formats'] = undefined;

/**
 * Dictionary of available output fields for this entry type, where the keys are the values of the `formats` list and the values are the keys of the `properties` dictionary.
 * @member {Object.<String, Array.<String>>} output_fields_by_format
 */
EntryInfoResource.prototype['output_fields_by_format'] = undefined;

/**
 * A dictionary describing queryable properties for this entry type, where each key is a property name.
 * @member {Object.<String, module:model/EntryInfoProperty>} properties
 */
EntryInfoResource.prototype['properties'] = undefined;






export default EntryInfoResource;

