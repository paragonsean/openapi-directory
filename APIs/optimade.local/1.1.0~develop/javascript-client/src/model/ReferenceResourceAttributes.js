/**
 * OPTIMADE API
 * The [Open Databases Integration for Materials Design (OPTIMADE) consortium](https://www.optimade.org/) aims to make materials databases interoperational by developing a common REST API.  This specification is generated using [`optimade-python-tools`](https://github.com/Materials-Consortia/optimade-python-tools/tree/v0.16.0) v0.16.0.
 *
 * The version of the OpenAPI document: 1.1.0~develop
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Person from './Person';

/**
 * The ReferenceResourceAttributes model module.
 * @module model/ReferenceResourceAttributes
 * @version 1.1.0~develop
 */
class ReferenceResourceAttributes {
    /**
     * Constructs a new <code>ReferenceResourceAttributes</code>.
     * Model that stores the attributes of a reference.  Many properties match the meaning described in the [BibTeX specification](http://bibtexml.sourceforge.net/btxdoc.pdf).
     * @alias module:model/ReferenceResourceAttributes
     * @param lastModified {Date} Date and time representing when the entry was last modified.  - **Type**: timestamp.  - **Requirements/Conventions**:     - **Support**: SHOULD be supported by all implementations, i.e., SHOULD NOT be `null`.     - **Query**: MUST be a queryable property with support for all mandatory filter features.     - **Response**: REQUIRED in the response unless the query parameter `response_fields` is present and does not include this property.  - **Example**:     - As part of JSON response format: `\"2007-04-05T14:30:20Z\"` (i.e., encoded as an [RFC 3339 Internet Date/Time Format](https://tools.ietf.org/html/rfc3339#section-5.6) string.)
     */
    constructor(lastModified) { 
        
        ReferenceResourceAttributes.initialize(this, lastModified);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, lastModified) { 
        obj['last_modified'] = lastModified;
    }

    /**
     * Constructs a <code>ReferenceResourceAttributes</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReferenceResourceAttributes} obj Optional instance to populate.
     * @return {module:model/ReferenceResourceAttributes} The populated <code>ReferenceResourceAttributes</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReferenceResourceAttributes();

            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
            if (data.hasOwnProperty('annote')) {
                obj['annote'] = ApiClient.convertToType(data['annote'], 'String');
            }
            if (data.hasOwnProperty('authors')) {
                obj['authors'] = ApiClient.convertToType(data['authors'], [Person]);
            }
            if (data.hasOwnProperty('bib_type')) {
                obj['bib_type'] = ApiClient.convertToType(data['bib_type'], 'String');
            }
            if (data.hasOwnProperty('booktitle')) {
                obj['booktitle'] = ApiClient.convertToType(data['booktitle'], 'String');
            }
            if (data.hasOwnProperty('chapter')) {
                obj['chapter'] = ApiClient.convertToType(data['chapter'], 'String');
            }
            if (data.hasOwnProperty('crossref')) {
                obj['crossref'] = ApiClient.convertToType(data['crossref'], 'String');
            }
            if (data.hasOwnProperty('doi')) {
                obj['doi'] = ApiClient.convertToType(data['doi'], 'String');
            }
            if (data.hasOwnProperty('edition')) {
                obj['edition'] = ApiClient.convertToType(data['edition'], 'String');
            }
            if (data.hasOwnProperty('editors')) {
                obj['editors'] = ApiClient.convertToType(data['editors'], [Person]);
            }
            if (data.hasOwnProperty('howpublished')) {
                obj['howpublished'] = ApiClient.convertToType(data['howpublished'], 'String');
            }
            if (data.hasOwnProperty('immutable_id')) {
                obj['immutable_id'] = ApiClient.convertToType(data['immutable_id'], 'String');
            }
            if (data.hasOwnProperty('institution')) {
                obj['institution'] = ApiClient.convertToType(data['institution'], 'String');
            }
            if (data.hasOwnProperty('journal')) {
                obj['journal'] = ApiClient.convertToType(data['journal'], 'String');
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'String');
            }
            if (data.hasOwnProperty('last_modified')) {
                obj['last_modified'] = ApiClient.convertToType(data['last_modified'], 'Date');
            }
            if (data.hasOwnProperty('month')) {
                obj['month'] = ApiClient.convertToType(data['month'], 'String');
            }
            if (data.hasOwnProperty('note')) {
                obj['note'] = ApiClient.convertToType(data['note'], 'String');
            }
            if (data.hasOwnProperty('number')) {
                obj['number'] = ApiClient.convertToType(data['number'], 'String');
            }
            if (data.hasOwnProperty('organization')) {
                obj['organization'] = ApiClient.convertToType(data['organization'], 'String');
            }
            if (data.hasOwnProperty('pages')) {
                obj['pages'] = ApiClient.convertToType(data['pages'], 'String');
            }
            if (data.hasOwnProperty('publisher')) {
                obj['publisher'] = ApiClient.convertToType(data['publisher'], 'String');
            }
            if (data.hasOwnProperty('school')) {
                obj['school'] = ApiClient.convertToType(data['school'], 'String');
            }
            if (data.hasOwnProperty('series')) {
                obj['series'] = ApiClient.convertToType(data['series'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('volume')) {
                obj['volume'] = ApiClient.convertToType(data['volume'], 'String');
            }
            if (data.hasOwnProperty('year')) {
                obj['year'] = ApiClient.convertToType(data['year'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReferenceResourceAttributes</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReferenceResourceAttributes</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ReferenceResourceAttributes.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['address'] && !(typeof data['address'] === 'string' || data['address'] instanceof String)) {
            throw new Error("Expected the field `address` to be a primitive type in the JSON string but got " + data['address']);
        }
        // ensure the json data is a string
        if (data['annote'] && !(typeof data['annote'] === 'string' || data['annote'] instanceof String)) {
            throw new Error("Expected the field `annote` to be a primitive type in the JSON string but got " + data['annote']);
        }
        if (data['authors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['authors'])) {
                throw new Error("Expected the field `authors` to be an array in the JSON data but got " + data['authors']);
            }
            // validate the optional field `authors` (array)
            for (const item of data['authors']) {
                Person.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['bib_type'] && !(typeof data['bib_type'] === 'string' || data['bib_type'] instanceof String)) {
            throw new Error("Expected the field `bib_type` to be a primitive type in the JSON string but got " + data['bib_type']);
        }
        // ensure the json data is a string
        if (data['booktitle'] && !(typeof data['booktitle'] === 'string' || data['booktitle'] instanceof String)) {
            throw new Error("Expected the field `booktitle` to be a primitive type in the JSON string but got " + data['booktitle']);
        }
        // ensure the json data is a string
        if (data['chapter'] && !(typeof data['chapter'] === 'string' || data['chapter'] instanceof String)) {
            throw new Error("Expected the field `chapter` to be a primitive type in the JSON string but got " + data['chapter']);
        }
        // ensure the json data is a string
        if (data['crossref'] && !(typeof data['crossref'] === 'string' || data['crossref'] instanceof String)) {
            throw new Error("Expected the field `crossref` to be a primitive type in the JSON string but got " + data['crossref']);
        }
        // ensure the json data is a string
        if (data['doi'] && !(typeof data['doi'] === 'string' || data['doi'] instanceof String)) {
            throw new Error("Expected the field `doi` to be a primitive type in the JSON string but got " + data['doi']);
        }
        // ensure the json data is a string
        if (data['edition'] && !(typeof data['edition'] === 'string' || data['edition'] instanceof String)) {
            throw new Error("Expected the field `edition` to be a primitive type in the JSON string but got " + data['edition']);
        }
        if (data['editors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['editors'])) {
                throw new Error("Expected the field `editors` to be an array in the JSON data but got " + data['editors']);
            }
            // validate the optional field `editors` (array)
            for (const item of data['editors']) {
                Person.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['howpublished'] && !(typeof data['howpublished'] === 'string' || data['howpublished'] instanceof String)) {
            throw new Error("Expected the field `howpublished` to be a primitive type in the JSON string but got " + data['howpublished']);
        }
        // ensure the json data is a string
        if (data['immutable_id'] && !(typeof data['immutable_id'] === 'string' || data['immutable_id'] instanceof String)) {
            throw new Error("Expected the field `immutable_id` to be a primitive type in the JSON string but got " + data['immutable_id']);
        }
        // ensure the json data is a string
        if (data['institution'] && !(typeof data['institution'] === 'string' || data['institution'] instanceof String)) {
            throw new Error("Expected the field `institution` to be a primitive type in the JSON string but got " + data['institution']);
        }
        // ensure the json data is a string
        if (data['journal'] && !(typeof data['journal'] === 'string' || data['journal'] instanceof String)) {
            throw new Error("Expected the field `journal` to be a primitive type in the JSON string but got " + data['journal']);
        }
        // ensure the json data is a string
        if (data['key'] && !(typeof data['key'] === 'string' || data['key'] instanceof String)) {
            throw new Error("Expected the field `key` to be a primitive type in the JSON string but got " + data['key']);
        }
        // ensure the json data is a string
        if (data['month'] && !(typeof data['month'] === 'string' || data['month'] instanceof String)) {
            throw new Error("Expected the field `month` to be a primitive type in the JSON string but got " + data['month']);
        }
        // ensure the json data is a string
        if (data['note'] && !(typeof data['note'] === 'string' || data['note'] instanceof String)) {
            throw new Error("Expected the field `note` to be a primitive type in the JSON string but got " + data['note']);
        }
        // ensure the json data is a string
        if (data['number'] && !(typeof data['number'] === 'string' || data['number'] instanceof String)) {
            throw new Error("Expected the field `number` to be a primitive type in the JSON string but got " + data['number']);
        }
        // ensure the json data is a string
        if (data['organization'] && !(typeof data['organization'] === 'string' || data['organization'] instanceof String)) {
            throw new Error("Expected the field `organization` to be a primitive type in the JSON string but got " + data['organization']);
        }
        // ensure the json data is a string
        if (data['pages'] && !(typeof data['pages'] === 'string' || data['pages'] instanceof String)) {
            throw new Error("Expected the field `pages` to be a primitive type in the JSON string but got " + data['pages']);
        }
        // ensure the json data is a string
        if (data['publisher'] && !(typeof data['publisher'] === 'string' || data['publisher'] instanceof String)) {
            throw new Error("Expected the field `publisher` to be a primitive type in the JSON string but got " + data['publisher']);
        }
        // ensure the json data is a string
        if (data['school'] && !(typeof data['school'] === 'string' || data['school'] instanceof String)) {
            throw new Error("Expected the field `school` to be a primitive type in the JSON string but got " + data['school']);
        }
        // ensure the json data is a string
        if (data['series'] && !(typeof data['series'] === 'string' || data['series'] instanceof String)) {
            throw new Error("Expected the field `series` to be a primitive type in the JSON string but got " + data['series']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['volume'] && !(typeof data['volume'] === 'string' || data['volume'] instanceof String)) {
            throw new Error("Expected the field `volume` to be a primitive type in the JSON string but got " + data['volume']);
        }
        // ensure the json data is a string
        if (data['year'] && !(typeof data['year'] === 'string' || data['year'] instanceof String)) {
            throw new Error("Expected the field `year` to be a primitive type in the JSON string but got " + data['year']);
        }

        return true;
    }


}

ReferenceResourceAttributes.RequiredProperties = ["last_modified"];

/**
 * Meaning of property matches the BiBTeX specification.
 * @member {String} address
 */
ReferenceResourceAttributes.prototype['address'] = undefined;

/**
 * Meaning of property matches the BiBTeX specification.
 * @member {String} annote
 */
ReferenceResourceAttributes.prototype['annote'] = undefined;

/**
 * List of person objects containing the authors of the reference.
 * @member {Array.<module:model/Person>} authors
 */
ReferenceResourceAttributes.prototype['authors'] = undefined;

/**
 * Type of the reference, corresponding to the **type** property in the BiBTeX specification.
 * @member {String} bib_type
 */
ReferenceResourceAttributes.prototype['bib_type'] = undefined;

/**
 * Meaning of property matches the BiBTeX specification.
 * @member {String} booktitle
 */
ReferenceResourceAttributes.prototype['booktitle'] = undefined;

/**
 * Meaning of property matches the BiBTeX specification.
 * @member {String} chapter
 */
ReferenceResourceAttributes.prototype['chapter'] = undefined;

/**
 * Meaning of property matches the BiBTeX specification.
 * @member {String} crossref
 */
ReferenceResourceAttributes.prototype['crossref'] = undefined;

/**
 * The digital object identifier of the reference.
 * @member {String} doi
 */
ReferenceResourceAttributes.prototype['doi'] = undefined;

/**
 * Meaning of property matches the BiBTeX specification.
 * @member {String} edition
 */
ReferenceResourceAttributes.prototype['edition'] = undefined;

/**
 * List of person objects containing the editors of the reference.
 * @member {Array.<module:model/Person>} editors
 */
ReferenceResourceAttributes.prototype['editors'] = undefined;

/**
 * Meaning of property matches the BiBTeX specification.
 * @member {String} howpublished
 */
ReferenceResourceAttributes.prototype['howpublished'] = undefined;

/**
 * The entry's immutable ID (e.g., an UUID). This is important for databases having preferred IDs that point to \"the latest version\" of a record, but still offer access to older variants. This ID maps to the version-specific record, in case it changes in the future.  - **Type**: string.  - **Requirements/Conventions**:     - **Support**: OPTIONAL support in implementations, i.e., MAY be `null`.     - **Query**: MUST be a queryable property with support for all mandatory filter features.  - **Examples**:     - `\"8bd3e750-b477-41a0-9b11-3a799f21b44f\"`     - `\"fjeiwoj,54;@=%<>#32\"` (Strings that are not URL-safe are allowed.)
 * @member {String} immutable_id
 */
ReferenceResourceAttributes.prototype['immutable_id'] = undefined;

/**
 * Meaning of property matches the BiBTeX specification.
 * @member {String} institution
 */
ReferenceResourceAttributes.prototype['institution'] = undefined;

/**
 * Meaning of property matches the BiBTeX specification.
 * @member {String} journal
 */
ReferenceResourceAttributes.prototype['journal'] = undefined;

/**
 * Meaning of property matches the BiBTeX specification.
 * @member {String} key
 */
ReferenceResourceAttributes.prototype['key'] = undefined;

/**
 * Date and time representing when the entry was last modified.  - **Type**: timestamp.  - **Requirements/Conventions**:     - **Support**: SHOULD be supported by all implementations, i.e., SHOULD NOT be `null`.     - **Query**: MUST be a queryable property with support for all mandatory filter features.     - **Response**: REQUIRED in the response unless the query parameter `response_fields` is present and does not include this property.  - **Example**:     - As part of JSON response format: `\"2007-04-05T14:30:20Z\"` (i.e., encoded as an [RFC 3339 Internet Date/Time Format](https://tools.ietf.org/html/rfc3339#section-5.6) string.)
 * @member {Date} last_modified
 */
ReferenceResourceAttributes.prototype['last_modified'] = undefined;

/**
 * Meaning of property matches the BiBTeX specification.
 * @member {String} month
 */
ReferenceResourceAttributes.prototype['month'] = undefined;

/**
 * Meaning of property matches the BiBTeX specification.
 * @member {String} note
 */
ReferenceResourceAttributes.prototype['note'] = undefined;

/**
 * Meaning of property matches the BiBTeX specification.
 * @member {String} number
 */
ReferenceResourceAttributes.prototype['number'] = undefined;

/**
 * Meaning of property matches the BiBTeX specification.
 * @member {String} organization
 */
ReferenceResourceAttributes.prototype['organization'] = undefined;

/**
 * Meaning of property matches the BiBTeX specification.
 * @member {String} pages
 */
ReferenceResourceAttributes.prototype['pages'] = undefined;

/**
 * Meaning of property matches the BiBTeX specification.
 * @member {String} publisher
 */
ReferenceResourceAttributes.prototype['publisher'] = undefined;

/**
 * Meaning of property matches the BiBTeX specification.
 * @member {String} school
 */
ReferenceResourceAttributes.prototype['school'] = undefined;

/**
 * Meaning of property matches the BiBTeX specification.
 * @member {String} series
 */
ReferenceResourceAttributes.prototype['series'] = undefined;

/**
 * Meaning of property matches the BiBTeX specification.
 * @member {String} title
 */
ReferenceResourceAttributes.prototype['title'] = undefined;

/**
 * The URL of the reference.
 * @member {String} url
 */
ReferenceResourceAttributes.prototype['url'] = undefined;

/**
 * Meaning of property matches the BiBTeX specification.
 * @member {String} volume
 */
ReferenceResourceAttributes.prototype['volume'] = undefined;

/**
 * Meaning of property matches the BiBTeX specification.
 * @member {String} year
 */
ReferenceResourceAttributes.prototype['year'] = undefined;






export default ReferenceResourceAttributes;

