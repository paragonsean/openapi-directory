/**
 * OPTIMADE API
 * The [Open Databases Integration for Materials Design (OPTIMADE) consortium](https://www.optimade.org/) aims to make materials databases interoperational by developing a common REST API.  This specification is generated using [`optimade-python-tools`](https://github.com/Materials-Consortia/optimade-python-tools/tree/v0.16.0) v0.16.0.
 *
 * The version of the OpenAPI document: 1.1.0~develop
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Data6 from './Data6';
import Error from './Error';
import Included from './Included';
import JsonApi from './JsonApi';
import ResponseMeta from './ResponseMeta';
import ToplevelLinks from './ToplevelLinks';

/**
 * The StructureResponseOne model module.
 * @module model/StructureResponseOne
 * @version 1.1.0~develop
 */
class StructureResponseOne {
    /**
     * Constructs a new <code>StructureResponseOne</code>.
     * errors are not allowed
     * @alias module:model/StructureResponseOne
     * @param data {module:model/Data6} 
     * @param meta {module:model/ResponseMeta} A meta object containing non-standard information
     */
    constructor(data, meta) { 
        
        StructureResponseOne.initialize(this, data, meta);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, data, meta) { 
        obj['data'] = data;
        obj['meta'] = meta;
    }

    /**
     * Constructs a <code>StructureResponseOne</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StructureResponseOne} obj Optional instance to populate.
     * @return {module:model/StructureResponseOne} The populated <code>StructureResponseOne</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StructureResponseOne();

            if (data.hasOwnProperty('data')) {
                obj['data'] = Data6.constructFromObject(data['data']);
            }
            if (data.hasOwnProperty('errors')) {
                obj['errors'] = ApiClient.convertToType(data['errors'], [Error]);
            }
            if (data.hasOwnProperty('included')) {
                obj['included'] = Included.constructFromObject(data['included']);
            }
            if (data.hasOwnProperty('jsonapi')) {
                obj['jsonapi'] = ApiClient.convertToType(data['jsonapi'], JsonApi);
            }
            if (data.hasOwnProperty('links')) {
                obj['links'] = ApiClient.convertToType(data['links'], ToplevelLinks);
            }
            if (data.hasOwnProperty('meta')) {
                obj['meta'] = ApiClient.convertToType(data['meta'], ResponseMeta);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StructureResponseOne</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StructureResponseOne</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of StructureResponseOne.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `data`
        if (data['data']) { // data not null
          Data6.validateJSON(data['data']);
        }
        if (data['errors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['errors'])) {
                throw new Error("Expected the field `errors` to be an array in the JSON data but got " + data['errors']);
            }
            // validate the optional field `errors` (array)
            for (const item of data['errors']) {
                Error.validateJSON(item);
            };
        }
        // validate the optional field `included`
        if (data['included']) { // data not null
          Included.validateJSON(data['included']);
        }
        // validate the optional field `jsonapi`
        if (data['jsonapi']) { // data not null
          JsonApi.validateJSON(data['jsonapi']);
        }
        // validate the optional field `links`
        if (data['links']) { // data not null
          ToplevelLinks.validateJSON(data['links']);
        }
        // validate the optional field `meta`
        if (data['meta']) { // data not null
          ResponseMeta.validateJSON(data['meta']);
        }

        return true;
    }


}

StructureResponseOne.RequiredProperties = ["data", "meta"];

/**
 * @member {module:model/Data6} data
 */
StructureResponseOne.prototype['data'] = undefined;

/**
 * A list of unique errors
 * @member {Array.<module:model/Error>} errors
 */
StructureResponseOne.prototype['errors'] = undefined;

/**
 * @member {module:model/Included} included
 */
StructureResponseOne.prototype['included'] = undefined;

/**
 * Information about the JSON API used
 * @member {module:model/JsonApi} jsonapi
 */
StructureResponseOne.prototype['jsonapi'] = undefined;

/**
 * Links associated with the primary data or errors
 * @member {module:model/ToplevelLinks} links
 */
StructureResponseOne.prototype['links'] = undefined;

/**
 * A meta object containing non-standard information
 * @member {module:model/ResponseMeta} meta
 */
StructureResponseOne.prototype['meta'] = undefined;






export default StructureResponseOne;

