/**
 * OPTIMADE API
 * The [Open Databases Integration for Materials Design (OPTIMADE) consortium](https://www.optimade.org/) aims to make materials databases interoperational by developing a common REST API.  This specification is generated using [`optimade-python-tools`](https://github.com/Materials-Consortia/optimade-python-tools/tree/v0.16.0) v0.16.0.
 *
 * The version of the OpenAPI document: 1.1.0~develop
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Species model module.
 * @module model/Species
 * @version 1.1.0~develop
 */
class Species {
    /**
     * Constructs a new <code>Species</code>.
     * A list describing the species of the sites of this structure.  Species can represent pure chemical elements, virtual-crystal atoms representing a statistical occupation of a given site by multiple chemical elements, and/or a location to which there are attached atoms, i.e., atoms whose precise location are unknown beyond that they are attached to that position (frequently used to indicate hydrogen atoms attached to another element, e.g., a carbon with three attached hydrogens might represent a methyl group, -CH3).  - **Examples**:     - &#x60;[ {\&quot;name\&quot;: \&quot;Ti\&quot;, \&quot;chemical_symbols\&quot;: [\&quot;Ti\&quot;], \&quot;concentration\&quot;: [1.0]} ]&#x60;: any site with this species is occupied by a Ti atom.     - &#x60;[ {\&quot;name\&quot;: \&quot;Ti\&quot;, \&quot;chemical_symbols\&quot;: [\&quot;Ti\&quot;, \&quot;vacancy\&quot;], \&quot;concentration\&quot;: [0.9, 0.1]} ]&#x60;: any site with this species is occupied by a Ti atom with 90 % probability, and has a vacancy with 10 % probability.     - &#x60;[ {\&quot;name\&quot;: \&quot;BaCa\&quot;, \&quot;chemical_symbols\&quot;: [\&quot;vacancy\&quot;, \&quot;Ba\&quot;, \&quot;Ca\&quot;], \&quot;concentration\&quot;: [0.05, 0.45, 0.5], \&quot;mass\&quot;: [0.0, 137.327, 40.078]} ]&#x60;: any site with this species is occupied by a Ba atom with 45 % probability, a Ca atom with 50 % probability, and by a vacancy with 5 % probability. The mass of this site is (on average) 88.5 a.m.u.     - &#x60;[ {\&quot;name\&quot;: \&quot;C12\&quot;, \&quot;chemical_symbols\&quot;: [\&quot;C\&quot;], \&quot;concentration\&quot;: [1.0], \&quot;mass\&quot;: [12.0]} ]&#x60;: any site with this species is occupied by a carbon isotope with mass 12.     - &#x60;[ {\&quot;name\&quot;: \&quot;C13\&quot;, \&quot;chemical_symbols\&quot;: [\&quot;C\&quot;], \&quot;concentration\&quot;: [1.0], \&quot;mass\&quot;: [13.0]} ]&#x60;: any site with this species is occupied by a carbon isotope with mass 13.     - &#x60;[ {\&quot;name\&quot;: \&quot;CH3\&quot;, \&quot;chemical_symbols\&quot;: [\&quot;C\&quot;], \&quot;concentration\&quot;: [1.0], \&quot;attached\&quot;: [\&quot;H\&quot;], \&quot;nattached\&quot;: [3]} ]&#x60;: any site with this species is occupied by a methyl group, -CH3, which is represented without specifying precise positions of the hydrogen atoms.
     * @alias module:model/Species
     * @param chemicalSymbols {Array.<String>} MUST be a list of strings of all chemical elements composing this species. Each item of the list MUST be one of the following:  - a valid chemical-element name, or - the special value `\"X\"` to represent a non-chemical element, or - the special value `\"vacancy\"` to represent that this site has a non-zero probability of having a vacancy (the respective probability is indicated in the `concentration` list, see below).  If any one entry in the `species` list has a `chemical_symbols` list that is longer than 1 element, the correct flag MUST be set in the list `structure_features`.
     * @param concentration {Array.<Number>} MUST be a list of floats, with same length as `chemical_symbols`. The numbers represent the relative concentration of the corresponding chemical symbol in this species. The numbers SHOULD sum to one. Cases in which the numbers do not sum to one typically fall only in the following two categories:  - Numerical errors when representing float numbers in fixed precision, e.g. for two chemical symbols with concentrations `1/3` and `2/3`, the concentration might look something like `[0.33333333333, 0.66666666666]`. If the client is aware that the sum is not one because of numerical precision, it can renormalize the values so that the sum is exactly one. - Experimental errors in the data present in the database. In this case, it is the responsibility of the client to decide how to process the data.  Note that concentrations are uncorrelated between different site (even of the same species).
     * @param name {String} Gives the name of the species; the **name** value MUST be unique in the `species` list.
     */
    constructor(chemicalSymbols, concentration, name) { 
        
        Species.initialize(this, chemicalSymbols, concentration, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, chemicalSymbols, concentration, name) { 
        obj['chemical_symbols'] = chemicalSymbols;
        obj['concentration'] = concentration;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>Species</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Species} obj Optional instance to populate.
     * @return {module:model/Species} The populated <code>Species</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Species();

            if (data.hasOwnProperty('attached')) {
                obj['attached'] = ApiClient.convertToType(data['attached'], ['String']);
            }
            if (data.hasOwnProperty('chemical_symbols')) {
                obj['chemical_symbols'] = ApiClient.convertToType(data['chemical_symbols'], ['String']);
            }
            if (data.hasOwnProperty('concentration')) {
                obj['concentration'] = ApiClient.convertToType(data['concentration'], ['Number']);
            }
            if (data.hasOwnProperty('mass')) {
                obj['mass'] = ApiClient.convertToType(data['mass'], ['Number']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('nattached')) {
                obj['nattached'] = ApiClient.convertToType(data['nattached'], ['Number']);
            }
            if (data.hasOwnProperty('original_name')) {
                obj['original_name'] = ApiClient.convertToType(data['original_name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Species</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Species</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Species.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['attached'])) {
            throw new Error("Expected the field `attached` to be an array in the JSON data but got " + data['attached']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['chemical_symbols'])) {
            throw new Error("Expected the field `chemical_symbols` to be an array in the JSON data but got " + data['chemical_symbols']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['concentration'])) {
            throw new Error("Expected the field `concentration` to be an array in the JSON data but got " + data['concentration']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['mass'])) {
            throw new Error("Expected the field `mass` to be an array in the JSON data but got " + data['mass']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['nattached'])) {
            throw new Error("Expected the field `nattached` to be an array in the JSON data but got " + data['nattached']);
        }
        // ensure the json data is a string
        if (data['original_name'] && !(typeof data['original_name'] === 'string' || data['original_name'] instanceof String)) {
            throw new Error("Expected the field `original_name` to be a primitive type in the JSON string but got " + data['original_name']);
        }

        return true;
    }


}

Species.RequiredProperties = ["chemical_symbols", "concentration", "name"];

/**
 * If provided MUST be a list of length 1 or more of strings of chemical symbols for the elements attached to this site, or \"X\" for a non-chemical element.
 * @member {Array.<String>} attached
 */
Species.prototype['attached'] = undefined;

/**
 * MUST be a list of strings of all chemical elements composing this species. Each item of the list MUST be one of the following:  - a valid chemical-element name, or - the special value `\"X\"` to represent a non-chemical element, or - the special value `\"vacancy\"` to represent that this site has a non-zero probability of having a vacancy (the respective probability is indicated in the `concentration` list, see below).  If any one entry in the `species` list has a `chemical_symbols` list that is longer than 1 element, the correct flag MUST be set in the list `structure_features`.
 * @member {Array.<String>} chemical_symbols
 */
Species.prototype['chemical_symbols'] = undefined;

/**
 * MUST be a list of floats, with same length as `chemical_symbols`. The numbers represent the relative concentration of the corresponding chemical symbol in this species. The numbers SHOULD sum to one. Cases in which the numbers do not sum to one typically fall only in the following two categories:  - Numerical errors when representing float numbers in fixed precision, e.g. for two chemical symbols with concentrations `1/3` and `2/3`, the concentration might look something like `[0.33333333333, 0.66666666666]`. If the client is aware that the sum is not one because of numerical precision, it can renormalize the values so that the sum is exactly one. - Experimental errors in the data present in the database. In this case, it is the responsibility of the client to decide how to process the data.  Note that concentrations are uncorrelated between different site (even of the same species).
 * @member {Array.<Number>} concentration
 */
Species.prototype['concentration'] = undefined;

/**
 * If present MUST be a list of floats expressed in a.m.u. Elements denoting vacancies MUST have masses equal to 0.
 * @member {Array.<Number>} mass
 */
Species.prototype['mass'] = undefined;

/**
 * Gives the name of the species; the **name** value MUST be unique in the `species` list.
 * @member {String} name
 */
Species.prototype['name'] = undefined;

/**
 * If provided MUST be a list of length 1 or more of integers indicating the number of attached atoms of the kind specified in the value of the :field:`attached` key.
 * @member {Array.<Number>} nattached
 */
Species.prototype['nattached'] = undefined;

/**
 * Can be any valid Unicode string, and SHOULD contain (if specified) the name of the species that is used internally in the source database.  Note: With regards to \"source database\", we refer to the immediate source being queried via the OPTIMADE API implementation.
 * @member {String} original_name
 */
Species.prototype['original_name'] = undefined;






export default Species;

