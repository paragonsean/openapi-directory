/**
 * OPTIMADE API
 * The [Open Databases Integration for Materials Design (OPTIMADE) consortium](https://www.optimade.org/) aims to make materials databases interoperational by developing a common REST API.  This specification is generated using [`optimade-python-tools`](https://github.com/Materials-Consortia/optimade-python-tools/tree/v0.16.0) v0.16.0.
 *
 * The version of the OpenAPI document: 1.1.0~develop
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Related from './Related';
import Self from './Self';

/**
 * The RelationshipLinks model module.
 * @module model/RelationshipLinks
 * @version 1.1.0~develop
 */
class RelationshipLinks {
    /**
     * Constructs a new <code>RelationshipLinks</code>.
     * A resource object **MAY** contain references to other resource objects (\&quot;relationships\&quot;). Relationships may be to-one or to-many. Relationships can be specified by including a member in a resource&#39;s links object.
     * @alias module:model/RelationshipLinks
     */
    constructor() { 
        
        RelationshipLinks.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RelationshipLinks</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RelationshipLinks} obj Optional instance to populate.
     * @return {module:model/RelationshipLinks} The populated <code>RelationshipLinks</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RelationshipLinks();

            if (data.hasOwnProperty('related')) {
                obj['related'] = Related.constructFromObject(data['related']);
            }
            if (data.hasOwnProperty('self')) {
                obj['self'] = Self.constructFromObject(data['self']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RelationshipLinks</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RelationshipLinks</code>.
     */
    static validateJSON(data) {
        // validate the optional field `related`
        if (data['related']) { // data not null
          Related.validateJSON(data['related']);
        }
        // validate the optional field `self`
        if (data['self']) { // data not null
          Self.validateJSON(data['self']);
        }

        return true;
    }


}



/**
 * @member {module:model/Related} related
 */
RelationshipLinks.prototype['related'] = undefined;

/**
 * @member {module:model/Self} self
 */
RelationshipLinks.prototype['self'] = undefined;






export default RelationshipLinks;

