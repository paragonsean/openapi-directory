/**
 * OPTIMADE API
 * The [Open Databases Integration for Materials Design (OPTIMADE) consortium](https://www.optimade.org/) aims to make materials databases interoperational by developing a common REST API.  This specification is generated using [`optimade-python-tools`](https://github.com/Materials-Consortia/optimade-python-tools/tree/v0.16.0) v0.16.0.
 *
 * The version of the OpenAPI document: 1.1.0~develop
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.OptimadeApi);
  }
}(this, function(expect, OptimadeApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new OptimadeApi.ResponseMeta();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ResponseMeta', function() {
    it('should create an instance of ResponseMeta', function() {
      // uncomment below and update the code to test ResponseMeta
      //var instance = new OptimadeApi.ResponseMeta();
      //expect(instance).to.be.a(OptimadeApi.ResponseMeta);
    });

    it('should have the property apiVersion (base name: "api_version")', function() {
      // uncomment below and update the code to test the property apiVersion
      //var instance = new OptimadeApi.ResponseMeta();
      //expect(instance).to.be();
    });

    it('should have the property dataAvailable (base name: "data_available")', function() {
      // uncomment below and update the code to test the property dataAvailable
      //var instance = new OptimadeApi.ResponseMeta();
      //expect(instance).to.be();
    });

    it('should have the property dataReturned (base name: "data_returned")', function() {
      // uncomment below and update the code to test the property dataReturned
      //var instance = new OptimadeApi.ResponseMeta();
      //expect(instance).to.be();
    });

    it('should have the property implementation (base name: "implementation")', function() {
      // uncomment below and update the code to test the property implementation
      //var instance = new OptimadeApi.ResponseMeta();
      //expect(instance).to.be();
    });

    it('should have the property lastId (base name: "last_id")', function() {
      // uncomment below and update the code to test the property lastId
      //var instance = new OptimadeApi.ResponseMeta();
      //expect(instance).to.be();
    });

    it('should have the property moreDataAvailable (base name: "more_data_available")', function() {
      // uncomment below and update the code to test the property moreDataAvailable
      //var instance = new OptimadeApi.ResponseMeta();
      //expect(instance).to.be();
    });

    it('should have the property provider (base name: "provider")', function() {
      // uncomment below and update the code to test the property provider
      //var instance = new OptimadeApi.ResponseMeta();
      //expect(instance).to.be();
    });

    it('should have the property query (base name: "query")', function() {
      // uncomment below and update the code to test the property query
      //var instance = new OptimadeApi.ResponseMeta();
      //expect(instance).to.be();
    });

    it('should have the property responseMessage (base name: "response_message")', function() {
      // uncomment below and update the code to test the property responseMessage
      //var instance = new OptimadeApi.ResponseMeta();
      //expect(instance).to.be();
    });

    it('should have the property schema (base name: "schema")', function() {
      // uncomment below and update the code to test the property schema
      //var instance = new OptimadeApi.ResponseMeta();
      //expect(instance).to.be();
    });

    it('should have the property timeStamp (base name: "time_stamp")', function() {
      // uncomment below and update the code to test the property timeStamp
      //var instance = new OptimadeApi.ResponseMeta();
      //expect(instance).to.be();
    });

    it('should have the property warnings (base name: "warnings")', function() {
      // uncomment below and update the code to test the property warnings
      //var instance = new OptimadeApi.ResponseMeta();
      //expect(instance).to.be();
    });

  });

}));
