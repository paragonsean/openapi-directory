/**
 * OPTIMADE API
 * The [Open Databases Integration for Materials Design (OPTIMADE) consortium](https://www.optimade.org/) aims to make materials databases interoperational by developing a common REST API.  This specification is generated using [`optimade-python-tools`](https://github.com/Materials-Consortia/optimade-python-tools/tree/v0.16.0) v0.16.0.
 *
 * The version of the OpenAPI document: 1.1.0~develop
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.OptimadeApi);
  }
}(this, function(expect, OptimadeApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new OptimadeApi.ReferenceResourceAttributes();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ReferenceResourceAttributes', function() {
    it('should create an instance of ReferenceResourceAttributes', function() {
      // uncomment below and update the code to test ReferenceResourceAttributes
      //var instance = new OptimadeApi.ReferenceResourceAttributes();
      //expect(instance).to.be.a(OptimadeApi.ReferenceResourceAttributes);
    });

    it('should have the property address (base name: "address")', function() {
      // uncomment below and update the code to test the property address
      //var instance = new OptimadeApi.ReferenceResourceAttributes();
      //expect(instance).to.be();
    });

    it('should have the property annote (base name: "annote")', function() {
      // uncomment below and update the code to test the property annote
      //var instance = new OptimadeApi.ReferenceResourceAttributes();
      //expect(instance).to.be();
    });

    it('should have the property authors (base name: "authors")', function() {
      // uncomment below and update the code to test the property authors
      //var instance = new OptimadeApi.ReferenceResourceAttributes();
      //expect(instance).to.be();
    });

    it('should have the property bibType (base name: "bib_type")', function() {
      // uncomment below and update the code to test the property bibType
      //var instance = new OptimadeApi.ReferenceResourceAttributes();
      //expect(instance).to.be();
    });

    it('should have the property booktitle (base name: "booktitle")', function() {
      // uncomment below and update the code to test the property booktitle
      //var instance = new OptimadeApi.ReferenceResourceAttributes();
      //expect(instance).to.be();
    });

    it('should have the property chapter (base name: "chapter")', function() {
      // uncomment below and update the code to test the property chapter
      //var instance = new OptimadeApi.ReferenceResourceAttributes();
      //expect(instance).to.be();
    });

    it('should have the property crossref (base name: "crossref")', function() {
      // uncomment below and update the code to test the property crossref
      //var instance = new OptimadeApi.ReferenceResourceAttributes();
      //expect(instance).to.be();
    });

    it('should have the property doi (base name: "doi")', function() {
      // uncomment below and update the code to test the property doi
      //var instance = new OptimadeApi.ReferenceResourceAttributes();
      //expect(instance).to.be();
    });

    it('should have the property edition (base name: "edition")', function() {
      // uncomment below and update the code to test the property edition
      //var instance = new OptimadeApi.ReferenceResourceAttributes();
      //expect(instance).to.be();
    });

    it('should have the property editors (base name: "editors")', function() {
      // uncomment below and update the code to test the property editors
      //var instance = new OptimadeApi.ReferenceResourceAttributes();
      //expect(instance).to.be();
    });

    it('should have the property howpublished (base name: "howpublished")', function() {
      // uncomment below and update the code to test the property howpublished
      //var instance = new OptimadeApi.ReferenceResourceAttributes();
      //expect(instance).to.be();
    });

    it('should have the property immutableId (base name: "immutable_id")', function() {
      // uncomment below and update the code to test the property immutableId
      //var instance = new OptimadeApi.ReferenceResourceAttributes();
      //expect(instance).to.be();
    });

    it('should have the property institution (base name: "institution")', function() {
      // uncomment below and update the code to test the property institution
      //var instance = new OptimadeApi.ReferenceResourceAttributes();
      //expect(instance).to.be();
    });

    it('should have the property journal (base name: "journal")', function() {
      // uncomment below and update the code to test the property journal
      //var instance = new OptimadeApi.ReferenceResourceAttributes();
      //expect(instance).to.be();
    });

    it('should have the property key (base name: "key")', function() {
      // uncomment below and update the code to test the property key
      //var instance = new OptimadeApi.ReferenceResourceAttributes();
      //expect(instance).to.be();
    });

    it('should have the property lastModified (base name: "last_modified")', function() {
      // uncomment below and update the code to test the property lastModified
      //var instance = new OptimadeApi.ReferenceResourceAttributes();
      //expect(instance).to.be();
    });

    it('should have the property month (base name: "month")', function() {
      // uncomment below and update the code to test the property month
      //var instance = new OptimadeApi.ReferenceResourceAttributes();
      //expect(instance).to.be();
    });

    it('should have the property note (base name: "note")', function() {
      // uncomment below and update the code to test the property note
      //var instance = new OptimadeApi.ReferenceResourceAttributes();
      //expect(instance).to.be();
    });

    it('should have the property number (base name: "number")', function() {
      // uncomment below and update the code to test the property number
      //var instance = new OptimadeApi.ReferenceResourceAttributes();
      //expect(instance).to.be();
    });

    it('should have the property organization (base name: "organization")', function() {
      // uncomment below and update the code to test the property organization
      //var instance = new OptimadeApi.ReferenceResourceAttributes();
      //expect(instance).to.be();
    });

    it('should have the property pages (base name: "pages")', function() {
      // uncomment below and update the code to test the property pages
      //var instance = new OptimadeApi.ReferenceResourceAttributes();
      //expect(instance).to.be();
    });

    it('should have the property publisher (base name: "publisher")', function() {
      // uncomment below and update the code to test the property publisher
      //var instance = new OptimadeApi.ReferenceResourceAttributes();
      //expect(instance).to.be();
    });

    it('should have the property school (base name: "school")', function() {
      // uncomment below and update the code to test the property school
      //var instance = new OptimadeApi.ReferenceResourceAttributes();
      //expect(instance).to.be();
    });

    it('should have the property series (base name: "series")', function() {
      // uncomment below and update the code to test the property series
      //var instance = new OptimadeApi.ReferenceResourceAttributes();
      //expect(instance).to.be();
    });

    it('should have the property title (base name: "title")', function() {
      // uncomment below and update the code to test the property title
      //var instance = new OptimadeApi.ReferenceResourceAttributes();
      //expect(instance).to.be();
    });

    it('should have the property url (base name: "url")', function() {
      // uncomment below and update the code to test the property url
      //var instance = new OptimadeApi.ReferenceResourceAttributes();
      //expect(instance).to.be();
    });

    it('should have the property volume (base name: "volume")', function() {
      // uncomment below and update the code to test the property volume
      //var instance = new OptimadeApi.ReferenceResourceAttributes();
      //expect(instance).to.be();
    });

    it('should have the property year (base name: "year")', function() {
      // uncomment below and update the code to test the property year
      //var instance = new OptimadeApi.ReferenceResourceAttributes();
      //expect(instance).to.be();
    });

  });

}));
