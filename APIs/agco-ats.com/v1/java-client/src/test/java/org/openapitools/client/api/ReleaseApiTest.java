/*
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.APIModelsApiError;
import org.openapitools.client.model.APIPagedResponseContentSubmissionSharedBusinessEntitiesRelease;
import org.openapitools.client.model.ContentSubmissionSharedBusinessEntitiesRelease;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ReleaseApi
 */
@Disabled
public class ReleaseApiTest {

    private final ReleaseApi api = new ReleaseApi();

    /**
     * Deletes the association between a release and a bundle.
     *
     * No Documentation Found.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void releaseDeleteReleaseBundleTest() throws ApiException {
        Integer releaseId = null;
        String bundleId = null;
        api.releaseDeleteReleaseBundle(releaseId, bundleId);
        // TODO: test validations
    }

    /**
     * Get a  Release by ID
     *
     * Gets a Release by ID. When successful, the response is the requested Release.              If unsuccessful, an appropriate ApiError is returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void releaseGetReleaseTest() throws ApiException {
        Integer releaseId = null;
        ContentSubmissionSharedBusinessEntitiesRelease response = api.releaseGetRelease(releaseId);
        // TODO: test validations
    }

    /**
     * Get Release
     *
     * Gets a collection of Release. When successful, the response is a PagedResponse of Release.              If unsuccessful, an appropriate ApiError is returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void releaseGetReleasesTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        Boolean visible = null;
        String bundleID = null;
        APIPagedResponseContentSubmissionSharedBusinessEntitiesRelease response = api.releaseGetReleases(limit, offset, visible, bundleID);
        // TODO: test validations
    }

    /**
     * Create a Release
     *
     * Creates a Release.  The body of the POST is the Release to create.              The ReleaseId will be assigned on creation of the Job.  When successful, the response              is the Release Id.  If unsuccessful, an appropriate ApiError is returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void releasePostReleaseTest() throws ApiException {
        ContentSubmissionSharedBusinessEntitiesRelease contentSubmissionSharedBusinessEntitiesRelease = null;
        Integer response = api.releasePostRelease(contentSubmissionSharedBusinessEntitiesRelease);
        // TODO: test validations
    }

    /**
     * Associates the release with a bundle.
     *
     * No Documentation Found.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void releasePostReleaseBundleTest() throws ApiException {
        Integer releaseId = null;
        String bundleId = null;
        api.releasePostReleaseBundle(releaseId, bundleId);
        // TODO: test validations
    }

    /**
     * Update a Release
     *
     * Updates a Release.  The body of the PUT is the updated Release.                When successful, the response is empty.  If unsuccessful, an appropriate ApiError is returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void releasePutContentDefinitionTest() throws ApiException {
        Integer releaseId = null;
        ContentSubmissionSharedBusinessEntitiesRelease contentSubmissionSharedBusinessEntitiesRelease = null;
        api.releasePutContentDefinition(releaseId, contentSubmissionSharedBusinessEntitiesRelease);
        // TODO: test validations
    }

}
