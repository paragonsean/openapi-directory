/*
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.APIModelsApiError;
import org.openapitools.client.model.APIPagedResponseBuildSystemSharedDTOActivityRun;
import org.openapitools.client.model.BuildSystemSharedDTOActivityRun;
import org.openapitools.client.model.BuildSystemSharedDTOActivityRunStatus;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ActivityRunsApi
 */
@Disabled
public class ActivityRunsApiTest {

    private final ActivityRunsApi api = new ActivityRunsApi();

    /**
     * Get an ActivityRun by ID
     *
     * Gets an ActivityRun by ID. When successful, the response is the requested ActivityRun.  If unsuccessful,              an appropriate ApiError is returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void activityRunsGetActivityRunTest() throws ApiException {
        Integer activityRunID = null;
        BuildSystemSharedDTOActivityRun response = api.activityRunsGetActivityRun(activityRunID);
        // TODO: test validations
    }

    /**
     * Get the ActivityRunStatus of an ActivityRun
     *
     * Gets the ActivityRunStatus of an ActivityRun.  When successful, the response is the requested ActivityRunStatus.              If unsuccessful, an appropriate ApiError is returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void activityRunsGetActivityRunStatusTest() throws ApiException {
        Integer activityRunID = null;
        BuildSystemSharedDTOActivityRunStatus response = api.activityRunsGetActivityRunStatus(activityRunID);
        // TODO: test validations
    }

    /**
     * Get ActivityRuns
     *
     * Gets a collection of ActivityRuns. When successful, the response is a PagedResponse of ActivityRuns.                If unsuccessful, an appropriate ApiError is returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void activityRunsGetActivityRunsTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        String status = null;
        APIPagedResponseBuildSystemSharedDTOActivityRun response = api.activityRunsGetActivityRuns(limit, offset, status);
        // TODO: test validations
    }

    /**
     * Update an ActivityRun
     *
     * Updates the ActivityRunStatus of an ActivityRun.  The body of the PUT is the updated ActivityRunStatus.              When successful, the response is empty.  If unsuccessful, an appropriate ApiError is returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void activityRunsPutActivityRunTest() throws ApiException {
        Integer activityRunID = null;
        BuildSystemSharedDTOActivityRun buildSystemSharedDTOActivityRun = null;
        api.activityRunsPutActivityRun(activityRunID, buildSystemSharedDTOActivityRun);
        // TODO: test validations
    }

    /**
     * Update the ActivityRunStatus of an ActivityRun
     *
     * Updates the ActivityRunStatus of an ActivityRun.  The body of the PUT is the updated ActivityRunStatus.              When successful, the response is empty.  If unsuccessful, an appropriate ApiError is returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void activityRunsPutActivityRunStatusTest() throws ApiException {
        Integer activityRunID = null;
        BuildSystemSharedDTOActivityRunStatus buildSystemSharedDTOActivityRunStatus = null;
        api.activityRunsPutActivityRunStatus(activityRunID, buildSystemSharedDTOActivityRunStatus);
        // TODO: test validations
    }

}
