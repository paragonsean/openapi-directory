/*
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BuildSystemSharedInterfacesIActivityRunStatus;
import org.openapitools.client.model.BuildSystemSharedInterfacesIActivityStep;
import org.openapitools.client.model.BuildSystemSharedInterfacesIParameterValue;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IActivityRun
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:35.511967-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BuildSystemSharedInterfacesIActivityRun {
  public static final String SERIALIZED_NAME_ACTIVITY_RUN_I_D = "ActivityRunID";
  @SerializedName(SERIALIZED_NAME_ACTIVITY_RUN_I_D)
  private Integer activityRunID;

  public static final String SERIALIZED_NAME_END_DATE = "EndDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private OffsetDateTime endDate;

  public static final String SERIALIZED_NAME_JOB_ACTIVITY_I_D = "JobActivityID";
  @SerializedName(SERIALIZED_NAME_JOB_ACTIVITY_I_D)
  private Integer jobActivityID;

  public static final String SERIALIZED_NAME_JOB_RUN_I_D = "JobRunID";
  @SerializedName(SERIALIZED_NAME_JOB_RUN_I_D)
  private Integer jobRunID;

  public static final String SERIALIZED_NAME_PARAMETERS = "Parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private List<BuildSystemSharedInterfacesIParameterValue> parameters = new ArrayList<>();

  public static final String SERIALIZED_NAME_START_DATE = "StartDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private BuildSystemSharedInterfacesIActivityRunStatus status;

  public static final String SERIALIZED_NAME_STEPS = "Steps";
  @SerializedName(SERIALIZED_NAME_STEPS)
  private List<BuildSystemSharedInterfacesIActivityStep> steps = new ArrayList<>();

  public BuildSystemSharedInterfacesIActivityRun() {
  }

  public BuildSystemSharedInterfacesIActivityRun(
     Integer activityRunID, 
     OffsetDateTime endDate, 
     Integer jobActivityID, 
     Integer jobRunID, 
     OffsetDateTime startDate, 
     List<BuildSystemSharedInterfacesIActivityStep> steps
  ) {
    this();
    this.activityRunID = activityRunID;
    this.endDate = endDate;
    this.jobActivityID = jobActivityID;
    this.jobRunID = jobRunID;
    this.startDate = startDate;
    this.steps = steps;
  }

  /**
   * ActivityRunID
   * @return activityRunID
   */
  @javax.annotation.Nullable
  public Integer getActivityRunID() {
    return activityRunID;
  }



  /**
   * EndDate
   * @return endDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndDate() {
    return endDate;
  }



  /**
   * JobActivityID
   * @return jobActivityID
   */
  @javax.annotation.Nullable
  public Integer getJobActivityID() {
    return jobActivityID;
  }



  /**
   * JobRunID
   * @return jobRunID
   */
  @javax.annotation.Nullable
  public Integer getJobRunID() {
    return jobRunID;
  }



  public BuildSystemSharedInterfacesIActivityRun parameters(List<BuildSystemSharedInterfacesIParameterValue> parameters) {
    this.parameters = parameters;
    return this;
  }

  public BuildSystemSharedInterfacesIActivityRun addParametersItem(BuildSystemSharedInterfacesIParameterValue parametersItem) {
    if (this.parameters == null) {
      this.parameters = new ArrayList<>();
    }
    this.parameters.add(parametersItem);
    return this;
  }

  /**
   * Parameters
   * @return parameters
   */
  @javax.annotation.Nullable
  public List<BuildSystemSharedInterfacesIParameterValue> getParameters() {
    return parameters;
  }

  public void setParameters(List<BuildSystemSharedInterfacesIParameterValue> parameters) {
    this.parameters = parameters;
  }


  /**
   * StartDate
   * @return startDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartDate() {
    return startDate;
  }



  public BuildSystemSharedInterfacesIActivityRun status(BuildSystemSharedInterfacesIActivityRunStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public BuildSystemSharedInterfacesIActivityRunStatus getStatus() {
    return status;
  }

  public void setStatus(BuildSystemSharedInterfacesIActivityRunStatus status) {
    this.status = status;
  }


  /**
   * Steps
   * @return steps
   */
  @javax.annotation.Nullable
  public List<BuildSystemSharedInterfacesIActivityStep> getSteps() {
    return steps;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BuildSystemSharedInterfacesIActivityRun buildSystemSharedInterfacesIActivityRun = (BuildSystemSharedInterfacesIActivityRun) o;
    return Objects.equals(this.activityRunID, buildSystemSharedInterfacesIActivityRun.activityRunID) &&
        Objects.equals(this.endDate, buildSystemSharedInterfacesIActivityRun.endDate) &&
        Objects.equals(this.jobActivityID, buildSystemSharedInterfacesIActivityRun.jobActivityID) &&
        Objects.equals(this.jobRunID, buildSystemSharedInterfacesIActivityRun.jobRunID) &&
        Objects.equals(this.parameters, buildSystemSharedInterfacesIActivityRun.parameters) &&
        Objects.equals(this.startDate, buildSystemSharedInterfacesIActivityRun.startDate) &&
        Objects.equals(this.status, buildSystemSharedInterfacesIActivityRun.status) &&
        Objects.equals(this.steps, buildSystemSharedInterfacesIActivityRun.steps);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activityRunID, endDate, jobActivityID, jobRunID, parameters, startDate, status, steps);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BuildSystemSharedInterfacesIActivityRun {\n");
    sb.append("    activityRunID: ").append(toIndentedString(activityRunID)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    jobActivityID: ").append(toIndentedString(jobActivityID)).append("\n");
    sb.append("    jobRunID: ").append(toIndentedString(jobRunID)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    steps: ").append(toIndentedString(steps)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ActivityRunID");
    openapiFields.add("EndDate");
    openapiFields.add("JobActivityID");
    openapiFields.add("JobRunID");
    openapiFields.add("Parameters");
    openapiFields.add("StartDate");
    openapiFields.add("Status");
    openapiFields.add("Steps");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BuildSystemSharedInterfacesIActivityRun
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BuildSystemSharedInterfacesIActivityRun.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BuildSystemSharedInterfacesIActivityRun is not found in the empty JSON string", BuildSystemSharedInterfacesIActivityRun.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BuildSystemSharedInterfacesIActivityRun.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BuildSystemSharedInterfacesIActivityRun` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("Parameters") != null && !jsonObj.get("Parameters").isJsonNull()) {
        JsonArray jsonArrayparameters = jsonObj.getAsJsonArray("Parameters");
        if (jsonArrayparameters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Parameters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Parameters` to be an array in the JSON string but got `%s`", jsonObj.get("Parameters").toString()));
          }

          // validate the optional field `Parameters` (array)
          for (int i = 0; i < jsonArrayparameters.size(); i++) {
            BuildSystemSharedInterfacesIParameterValue.validateJsonElement(jsonArrayparameters.get(i));
          };
        }
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        BuildSystemSharedInterfacesIActivityRunStatus.validateJsonElement(jsonObj.get("Status"));
      }
      if (jsonObj.get("Steps") != null && !jsonObj.get("Steps").isJsonNull()) {
        JsonArray jsonArraysteps = jsonObj.getAsJsonArray("Steps");
        if (jsonArraysteps != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Steps").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Steps` to be an array in the JSON string but got `%s`", jsonObj.get("Steps").toString()));
          }

          // validate the optional field `Steps` (array)
          for (int i = 0; i < jsonArraysteps.size(); i++) {
            BuildSystemSharedInterfacesIActivityStep.validateJsonElement(jsonArraysteps.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BuildSystemSharedInterfacesIActivityRun.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BuildSystemSharedInterfacesIActivityRun' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BuildSystemSharedInterfacesIActivityRun> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BuildSystemSharedInterfacesIActivityRun.class));

       return (TypeAdapter<T>) new TypeAdapter<BuildSystemSharedInterfacesIActivityRun>() {
           @Override
           public void write(JsonWriter out, BuildSystemSharedInterfacesIActivityRun value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BuildSystemSharedInterfacesIActivityRun read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BuildSystemSharedInterfacesIActivityRun given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BuildSystemSharedInterfacesIActivityRun
   * @throws IOException if the JSON string is invalid with respect to BuildSystemSharedInterfacesIActivityRun
   */
  public static BuildSystemSharedInterfacesIActivityRun fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BuildSystemSharedInterfacesIActivityRun.class);
  }

  /**
   * Convert an instance of BuildSystemSharedInterfacesIActivityRun to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

