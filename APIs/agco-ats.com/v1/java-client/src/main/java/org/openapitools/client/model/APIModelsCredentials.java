/*
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * APIModelsCredentials
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:35.511967-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class APIModelsCredentials {
  /**
   * The action to perform on the bearer token. Optional. Defaults to ‘None’.
   */
  @JsonAdapter(BearerActionEnum.Adapter.class)
  public enum BearerActionEnum {
    NONE("None"),
    
    RESET("Reset"),
    
    DISABLE("Disable");

    private String value;

    BearerActionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BearerActionEnum fromValue(String value) {
      for (BearerActionEnum b : BearerActionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BearerActionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BearerActionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BearerActionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BearerActionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BearerActionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BEARER_ACTION = "BearerAction";
  @SerializedName(SERIALIZED_NAME_BEARER_ACTION)
  private BearerActionEnum bearerAction;

  /**
   * The action to perform on the MAC token. Optional. Defaults to ‘None’.
   */
  @JsonAdapter(MaCActionEnum.Adapter.class)
  public enum MaCActionEnum {
    NONE("None"),
    
    RESET("Reset"),
    
    DISABLE("Disable");

    private String value;

    MaCActionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MaCActionEnum fromValue(String value) {
      for (MaCActionEnum b : MaCActionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MaCActionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MaCActionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MaCActionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MaCActionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MaCActionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MA_C_ACTION = "MACAction";
  @SerializedName(SERIALIZED_NAME_MA_C_ACTION)
  private MaCActionEnum maCAction;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public APIModelsCredentials() {
  }

  public APIModelsCredentials bearerAction(BearerActionEnum bearerAction) {
    this.bearerAction = bearerAction;
    return this;
  }

  /**
   * The action to perform on the bearer token. Optional. Defaults to ‘None’.
   * @return bearerAction
   */
  @javax.annotation.Nullable
  public BearerActionEnum getBearerAction() {
    return bearerAction;
  }

  public void setBearerAction(BearerActionEnum bearerAction) {
    this.bearerAction = bearerAction;
  }


  public APIModelsCredentials maCAction(MaCActionEnum maCAction) {
    this.maCAction = maCAction;
    return this;
  }

  /**
   * The action to perform on the MAC token. Optional. Defaults to ‘None’.
   * @return maCAction
   */
  @javax.annotation.Nullable
  public MaCActionEnum getMaCAction() {
    return maCAction;
  }

  public void setMaCAction(MaCActionEnum maCAction) {
    this.maCAction = maCAction;
  }


  public APIModelsCredentials password(String password) {
    this.password = password;
    return this;
  }

  /**
   * A secret word or phrase that must be used to gain admission
   * @return password
   */
  @javax.annotation.Nonnull
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }


  public APIModelsCredentials username(String username) {
    this.username = username;
    return this;
  }

  /**
   * A unique ID a user needs to login with
   * @return username
   */
  @javax.annotation.Nonnull
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    APIModelsCredentials apIModelsCredentials = (APIModelsCredentials) o;
    return Objects.equals(this.bearerAction, apIModelsCredentials.bearerAction) &&
        Objects.equals(this.maCAction, apIModelsCredentials.maCAction) &&
        Objects.equals(this.password, apIModelsCredentials.password) &&
        Objects.equals(this.username, apIModelsCredentials.username);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bearerAction, maCAction, password, username);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class APIModelsCredentials {\n");
    sb.append("    bearerAction: ").append(toIndentedString(bearerAction)).append("\n");
    sb.append("    maCAction: ").append(toIndentedString(maCAction)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("BearerAction");
    openapiFields.add("MACAction");
    openapiFields.add("password");
    openapiFields.add("username");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("password");
    openapiRequiredFields.add("username");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to APIModelsCredentials
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!APIModelsCredentials.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in APIModelsCredentials is not found in the empty JSON string", APIModelsCredentials.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!APIModelsCredentials.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `APIModelsCredentials` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : APIModelsCredentials.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("BearerAction") != null && !jsonObj.get("BearerAction").isJsonNull()) && !jsonObj.get("BearerAction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BearerAction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BearerAction").toString()));
      }
      // validate the optional field `BearerAction`
      if (jsonObj.get("BearerAction") != null && !jsonObj.get("BearerAction").isJsonNull()) {
        BearerActionEnum.validateJsonElement(jsonObj.get("BearerAction"));
      }
      if ((jsonObj.get("MACAction") != null && !jsonObj.get("MACAction").isJsonNull()) && !jsonObj.get("MACAction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MACAction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MACAction").toString()));
      }
      // validate the optional field `MACAction`
      if (jsonObj.get("MACAction") != null && !jsonObj.get("MACAction").isJsonNull()) {
        MaCActionEnum.validateJsonElement(jsonObj.get("MACAction"));
      }
      if (!jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if (!jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!APIModelsCredentials.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'APIModelsCredentials' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<APIModelsCredentials> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(APIModelsCredentials.class));

       return (TypeAdapter<T>) new TypeAdapter<APIModelsCredentials>() {
           @Override
           public void write(JsonWriter out, APIModelsCredentials value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public APIModelsCredentials read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of APIModelsCredentials given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of APIModelsCredentials
   * @throws IOException if the JSON string is invalid with respect to APIModelsCredentials
   */
  public static APIModelsCredentials fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, APIModelsCredentials.class);
  }

  /**
   * Convert an instance of APIModelsCredentials to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

