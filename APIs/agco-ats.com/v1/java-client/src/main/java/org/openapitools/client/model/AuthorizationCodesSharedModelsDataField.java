/*
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AuthorizationCodesSharedModelsDataField
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:35.511967-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AuthorizationCodesSharedModelsDataField {
  public static final String SERIALIZED_NAME_DIGITS_PRECISION = "DigitsPrecision";
  @SerializedName(SERIALIZED_NAME_DIGITS_PRECISION)
  private Integer digitsPrecision;

  public static final String SERIALIZED_NAME_MAX_EXPONENT = "MaxExponent";
  @SerializedName(SERIALIZED_NAME_MAX_EXPONENT)
  private Integer maxExponent;

  public static final String SERIALIZED_NAME_MAX_VALUE = "MaxValue";
  @SerializedName(SERIALIZED_NAME_MAX_VALUE)
  private Double maxValue;

  public static final String SERIALIZED_NAME_MIN_EXPONENT = "MinExponent";
  @SerializedName(SERIALIZED_NAME_MIN_EXPONENT)
  private Integer minExponent;

  public static final String SERIALIZED_NAME_MIN_VALUE = "MinValue";
  @SerializedName(SERIALIZED_NAME_MIN_VALUE)
  private Double minValue;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SCALE_FACTOR = "ScaleFactor";
  @SerializedName(SERIALIZED_NAME_SCALE_FACTOR)
  private Double scaleFactor;

  public static final String SERIALIZED_NAME_SIGNED = "Signed";
  @SerializedName(SERIALIZED_NAME_SIGNED)
  private Boolean signed;

  /**
   * The type of this data field.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    BOOLEAN("Boolean"),
    
    DECIMAL("Decimal"),
    
    FLOAT("Float"),
    
    VARIABLE_LENGTH_BYTE_ARRAY("VariableLengthByteArray");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public AuthorizationCodesSharedModelsDataField() {
  }

  public AuthorizationCodesSharedModelsDataField digitsPrecision(Integer digitsPrecision) {
    this.digitsPrecision = digitsPrecision;
    return this;
  }

  /**
   * The number of decimal digits to be used by this data field. Required only by the &#39;Float&#39; data type. Must be in range 1 - 15.
   * @return digitsPrecision
   */
  @javax.annotation.Nullable
  public Integer getDigitsPrecision() {
    return digitsPrecision;
  }

  public void setDigitsPrecision(Integer digitsPrecision) {
    this.digitsPrecision = digitsPrecision;
  }


  public AuthorizationCodesSharedModelsDataField maxExponent(Integer maxExponent) {
    this.maxExponent = maxExponent;
    return this;
  }

  /**
   * The maximum exponent to be used by this data field. Required only by the &#39;Float&#39; data type. May not be greater than 307.
   * @return maxExponent
   */
  @javax.annotation.Nullable
  public Integer getMaxExponent() {
    return maxExponent;
  }

  public void setMaxExponent(Integer maxExponent) {
    this.maxExponent = maxExponent;
  }


  public AuthorizationCodesSharedModelsDataField maxValue(Double maxValue) {
    this.maxValue = maxValue;
    return this;
  }

  /**
   * The maximum value that can be represented by this data field. Required only by the &#39;Decimal&#39; data type.
   * @return maxValue
   */
  @javax.annotation.Nullable
  public Double getMaxValue() {
    return maxValue;
  }

  public void setMaxValue(Double maxValue) {
    this.maxValue = maxValue;
  }


  public AuthorizationCodesSharedModelsDataField minExponent(Integer minExponent) {
    this.minExponent = minExponent;
    return this;
  }

  /**
   * The minimum exponent to be used by this data field. Required only by the &#39;Float&#39; data type. May not be less than -292.
   * @return minExponent
   */
  @javax.annotation.Nullable
  public Integer getMinExponent() {
    return minExponent;
  }

  public void setMinExponent(Integer minExponent) {
    this.minExponent = minExponent;
  }


  public AuthorizationCodesSharedModelsDataField minValue(Double minValue) {
    this.minValue = minValue;
    return this;
  }

  /**
   * The minimum value that can be represented by this data field. Required only by the &#39;Decimal&#39; data type.
   * @return minValue
   */
  @javax.annotation.Nullable
  public Double getMinValue() {
    return minValue;
  }

  public void setMinValue(Double minValue) {
    this.minValue = minValue;
  }


  public AuthorizationCodesSharedModelsDataField name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the field.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public AuthorizationCodesSharedModelsDataField scaleFactor(Double scaleFactor) {
    this.scaleFactor = scaleFactor;
    return this;
  }

  /**
   * The resolution of values that can be represented by this data field. The base value is multiplied by this to compute the final value. Required only by the &#39;Decimal&#39; data type.
   * @return scaleFactor
   */
  @javax.annotation.Nullable
  public Double getScaleFactor() {
    return scaleFactor;
  }

  public void setScaleFactor(Double scaleFactor) {
    this.scaleFactor = scaleFactor;
  }


  public AuthorizationCodesSharedModelsDataField signed(Boolean signed) {
    this.signed = signed;
    return this;
  }

  /**
   * Indicates whether this value is signed. Required only by the &#39;Float&#39; data type.
   * @return signed
   */
  @javax.annotation.Nullable
  public Boolean getSigned() {
    return signed;
  }

  public void setSigned(Boolean signed) {
    this.signed = signed;
  }


  public AuthorizationCodesSharedModelsDataField type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The type of this data field.
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuthorizationCodesSharedModelsDataField authorizationCodesSharedModelsDataField = (AuthorizationCodesSharedModelsDataField) o;
    return Objects.equals(this.digitsPrecision, authorizationCodesSharedModelsDataField.digitsPrecision) &&
        Objects.equals(this.maxExponent, authorizationCodesSharedModelsDataField.maxExponent) &&
        Objects.equals(this.maxValue, authorizationCodesSharedModelsDataField.maxValue) &&
        Objects.equals(this.minExponent, authorizationCodesSharedModelsDataField.minExponent) &&
        Objects.equals(this.minValue, authorizationCodesSharedModelsDataField.minValue) &&
        Objects.equals(this.name, authorizationCodesSharedModelsDataField.name) &&
        Objects.equals(this.scaleFactor, authorizationCodesSharedModelsDataField.scaleFactor) &&
        Objects.equals(this.signed, authorizationCodesSharedModelsDataField.signed) &&
        Objects.equals(this.type, authorizationCodesSharedModelsDataField.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(digitsPrecision, maxExponent, maxValue, minExponent, minValue, name, scaleFactor, signed, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuthorizationCodesSharedModelsDataField {\n");
    sb.append("    digitsPrecision: ").append(toIndentedString(digitsPrecision)).append("\n");
    sb.append("    maxExponent: ").append(toIndentedString(maxExponent)).append("\n");
    sb.append("    maxValue: ").append(toIndentedString(maxValue)).append("\n");
    sb.append("    minExponent: ").append(toIndentedString(minExponent)).append("\n");
    sb.append("    minValue: ").append(toIndentedString(minValue)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    scaleFactor: ").append(toIndentedString(scaleFactor)).append("\n");
    sb.append("    signed: ").append(toIndentedString(signed)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DigitsPrecision");
    openapiFields.add("MaxExponent");
    openapiFields.add("MaxValue");
    openapiFields.add("MinExponent");
    openapiFields.add("MinValue");
    openapiFields.add("Name");
    openapiFields.add("ScaleFactor");
    openapiFields.add("Signed");
    openapiFields.add("Type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Name");
    openapiRequiredFields.add("Type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AuthorizationCodesSharedModelsDataField
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AuthorizationCodesSharedModelsDataField.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AuthorizationCodesSharedModelsDataField is not found in the empty JSON string", AuthorizationCodesSharedModelsDataField.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AuthorizationCodesSharedModelsDataField.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AuthorizationCodesSharedModelsDataField` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AuthorizationCodesSharedModelsDataField.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if (!jsonObj.get("Type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Type").toString()));
      }
      // validate the required field `Type`
      TypeEnum.validateJsonElement(jsonObj.get("Type"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AuthorizationCodesSharedModelsDataField.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AuthorizationCodesSharedModelsDataField' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AuthorizationCodesSharedModelsDataField> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AuthorizationCodesSharedModelsDataField.class));

       return (TypeAdapter<T>) new TypeAdapter<AuthorizationCodesSharedModelsDataField>() {
           @Override
           public void write(JsonWriter out, AuthorizationCodesSharedModelsDataField value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AuthorizationCodesSharedModelsDataField read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AuthorizationCodesSharedModelsDataField given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AuthorizationCodesSharedModelsDataField
   * @throws IOException if the JSON string is invalid with respect to AuthorizationCodesSharedModelsDataField
   */
  public static AuthorizationCodesSharedModelsDataField fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AuthorizationCodesSharedModelsDataField.class);
  }

  /**
   * Convert an instance of AuthorizationCodesSharedModelsDataField to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

