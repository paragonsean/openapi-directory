/*
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GlobalResourcesSharedModelsGlobalImageCategory;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An image from the Global Image library.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:35.511967-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GlobalResourcesSharedModelsGlobalImage {
  public static final String SERIALIZED_NAME_C_R_C = "CRC";
  @SerializedName(SERIALIZED_NAME_C_R_C)
  private String CRC;

  public static final String SERIALIZED_NAME_CATEGORIES = "Categories";
  @SerializedName(SERIALIZED_NAME_CATEGORIES)
  private List<GlobalResourcesSharedModelsGlobalImageCategory> categories = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATE = "Date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private OffsetDateTime date;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_HEIGHT = "Height";
  @SerializedName(SERIALIZED_NAME_HEIGHT)
  private Integer height;

  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PUBLISHER = "Publisher";
  @SerializedName(SERIALIZED_NAME_PUBLISHER)
  private String publisher;

  public static final String SERIALIZED_NAME_SIZE = "Size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private Long size;

  /**
   * Indicates the state of this file. Must be &#39;Created&#39; when created. Read Only.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    CREATED("Created"),
    
    AVAILABLE("Available"),
    
    REMOVED("Removed");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "State";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_THUMBNAIL_C_R_C = "ThumbnailCRC";
  @SerializedName(SERIALIZED_NAME_THUMBNAIL_C_R_C)
  private String thumbnailCRC;

  public static final String SERIALIZED_NAME_THUMBNAIL_SIZE = "ThumbnailSize";
  @SerializedName(SERIALIZED_NAME_THUMBNAIL_SIZE)
  private Long thumbnailSize;

  public static final String SERIALIZED_NAME_WIDTH = "Width";
  @SerializedName(SERIALIZED_NAME_WIDTH)
  private Integer width;

  public GlobalResourcesSharedModelsGlobalImage() {
  }

  public GlobalResourcesSharedModelsGlobalImage CRC(String CRC) {
    this.CRC = CRC;
    return this;
  }

  /**
   * The Hash of the file (SHA256, HEX-encoded).
   * @return CRC
   */
  @javax.annotation.Nonnull
  public String getCRC() {
    return CRC;
  }

  public void setCRC(String CRC) {
    this.CRC = CRC;
  }


  public GlobalResourcesSharedModelsGlobalImage categories(List<GlobalResourcesSharedModelsGlobalImageCategory> categories) {
    this.categories = categories;
    return this;
  }

  public GlobalResourcesSharedModelsGlobalImage addCategoriesItem(GlobalResourcesSharedModelsGlobalImageCategory categoriesItem) {
    if (this.categories == null) {
      this.categories = new ArrayList<>();
    }
    this.categories.add(categoriesItem);
    return this;
  }

  /**
   * The category of the file.
   * @return categories
   */
  @javax.annotation.Nullable
  public List<GlobalResourcesSharedModelsGlobalImageCategory> getCategories() {
    return categories;
  }

  public void setCategories(List<GlobalResourcesSharedModelsGlobalImageCategory> categories) {
    this.categories = categories;
  }


  public GlobalResourcesSharedModelsGlobalImage date(OffsetDateTime date) {
    this.date = date;
    return this;
  }

  /**
   * The date of the file.
   * @return date
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDate() {
    return date;
  }

  public void setDate(OffsetDateTime date) {
    this.date = date;
  }


  public GlobalResourcesSharedModelsGlobalImage description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of the file.
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public GlobalResourcesSharedModelsGlobalImage height(Integer height) {
    this.height = height;
    return this;
  }

  /**
   * The height of the file.
   * @return height
   */
  @javax.annotation.Nonnull
  public Integer getHeight() {
    return height;
  }

  public void setHeight(Integer height) {
    this.height = height;
  }


  public GlobalResourcesSharedModelsGlobalImage id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The Id of the GlobalImage Metadata.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public GlobalResourcesSharedModelsGlobalImage name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the file when downloaded.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GlobalResourcesSharedModelsGlobalImage publisher(String publisher) {
    this.publisher = publisher;
    return this;
  }

  /**
   * The Publisher of the file.
   * @return publisher
   */
  @javax.annotation.Nullable
  public String getPublisher() {
    return publisher;
  }

  public void setPublisher(String publisher) {
    this.publisher = publisher;
  }


  public GlobalResourcesSharedModelsGlobalImage size(Long size) {
    this.size = size;
    return this;
  }

  /**
   * The size of the file in bytes. Null until assigned by server when marked as &#39;Available&#39;. Read Only
   * @return size
   */
  @javax.annotation.Nullable
  public Long getSize() {
    return size;
  }

  public void setSize(Long size) {
    this.size = size;
  }


  public GlobalResourcesSharedModelsGlobalImage state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * Indicates the state of this file. Must be &#39;Created&#39; when created. Read Only.
   * @return state
   */
  @javax.annotation.Nonnull
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  public GlobalResourcesSharedModelsGlobalImage thumbnailCRC(String thumbnailCRC) {
    this.thumbnailCRC = thumbnailCRC;
    return this;
  }

  /**
   * The Hash of the thumbnail file (SHA256, HEX-encoded).
   * @return thumbnailCRC
   */
  @javax.annotation.Nonnull
  public String getThumbnailCRC() {
    return thumbnailCRC;
  }

  public void setThumbnailCRC(String thumbnailCRC) {
    this.thumbnailCRC = thumbnailCRC;
  }


  public GlobalResourcesSharedModelsGlobalImage thumbnailSize(Long thumbnailSize) {
    this.thumbnailSize = thumbnailSize;
    return this;
  }

  /**
   * The size of the thumbnail file in bytes. Null until assigned by server when marked as &#39;Available&#39;. Read Only
   * @return thumbnailSize
   */
  @javax.annotation.Nullable
  public Long getThumbnailSize() {
    return thumbnailSize;
  }

  public void setThumbnailSize(Long thumbnailSize) {
    this.thumbnailSize = thumbnailSize;
  }


  public GlobalResourcesSharedModelsGlobalImage width(Integer width) {
    this.width = width;
    return this;
  }

  /**
   * The width of the file.
   * @return width
   */
  @javax.annotation.Nonnull
  public Integer getWidth() {
    return width;
  }

  public void setWidth(Integer width) {
    this.width = width;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GlobalResourcesSharedModelsGlobalImage globalResourcesSharedModelsGlobalImage = (GlobalResourcesSharedModelsGlobalImage) o;
    return Objects.equals(this.CRC, globalResourcesSharedModelsGlobalImage.CRC) &&
        Objects.equals(this.categories, globalResourcesSharedModelsGlobalImage.categories) &&
        Objects.equals(this.date, globalResourcesSharedModelsGlobalImage.date) &&
        Objects.equals(this.description, globalResourcesSharedModelsGlobalImage.description) &&
        Objects.equals(this.height, globalResourcesSharedModelsGlobalImage.height) &&
        Objects.equals(this.id, globalResourcesSharedModelsGlobalImage.id) &&
        Objects.equals(this.name, globalResourcesSharedModelsGlobalImage.name) &&
        Objects.equals(this.publisher, globalResourcesSharedModelsGlobalImage.publisher) &&
        Objects.equals(this.size, globalResourcesSharedModelsGlobalImage.size) &&
        Objects.equals(this.state, globalResourcesSharedModelsGlobalImage.state) &&
        Objects.equals(this.thumbnailCRC, globalResourcesSharedModelsGlobalImage.thumbnailCRC) &&
        Objects.equals(this.thumbnailSize, globalResourcesSharedModelsGlobalImage.thumbnailSize) &&
        Objects.equals(this.width, globalResourcesSharedModelsGlobalImage.width);
  }

  @Override
  public int hashCode() {
    return Objects.hash(CRC, categories, date, description, height, id, name, publisher, size, state, thumbnailCRC, thumbnailSize, width);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GlobalResourcesSharedModelsGlobalImage {\n");
    sb.append("    CRC: ").append(toIndentedString(CRC)).append("\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    publisher: ").append(toIndentedString(publisher)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    thumbnailCRC: ").append(toIndentedString(thumbnailCRC)).append("\n");
    sb.append("    thumbnailSize: ").append(toIndentedString(thumbnailSize)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CRC");
    openapiFields.add("Categories");
    openapiFields.add("Date");
    openapiFields.add("Description");
    openapiFields.add("Height");
    openapiFields.add("Id");
    openapiFields.add("Name");
    openapiFields.add("Publisher");
    openapiFields.add("Size");
    openapiFields.add("State");
    openapiFields.add("ThumbnailCRC");
    openapiFields.add("ThumbnailSize");
    openapiFields.add("Width");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("CRC");
    openapiRequiredFields.add("Description");
    openapiRequiredFields.add("Height");
    openapiRequiredFields.add("Name");
    openapiRequiredFields.add("State");
    openapiRequiredFields.add("ThumbnailCRC");
    openapiRequiredFields.add("Width");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GlobalResourcesSharedModelsGlobalImage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GlobalResourcesSharedModelsGlobalImage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GlobalResourcesSharedModelsGlobalImage is not found in the empty JSON string", GlobalResourcesSharedModelsGlobalImage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GlobalResourcesSharedModelsGlobalImage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GlobalResourcesSharedModelsGlobalImage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GlobalResourcesSharedModelsGlobalImage.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("CRC").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CRC` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CRC").toString()));
      }
      if (jsonObj.get("Categories") != null && !jsonObj.get("Categories").isJsonNull()) {
        JsonArray jsonArraycategories = jsonObj.getAsJsonArray("Categories");
        if (jsonArraycategories != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Categories").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Categories` to be an array in the JSON string but got `%s`", jsonObj.get("Categories").toString()));
          }

          // validate the optional field `Categories` (array)
          for (int i = 0; i < jsonArraycategories.size(); i++) {
            GlobalResourcesSharedModelsGlobalImageCategory.validateJsonElement(jsonArraycategories.get(i));
          };
        }
      }
      if (!jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      if ((jsonObj.get("Id") != null && !jsonObj.get("Id").isJsonNull()) && !jsonObj.get("Id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Id").toString()));
      }
      if (!jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("Publisher") != null && !jsonObj.get("Publisher").isJsonNull()) && !jsonObj.get("Publisher").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Publisher` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Publisher").toString()));
      }
      if (!jsonObj.get("State").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `State` to be a primitive type in the JSON string but got `%s`", jsonObj.get("State").toString()));
      }
      // validate the required field `State`
      StateEnum.validateJsonElement(jsonObj.get("State"));
      if (!jsonObj.get("ThumbnailCRC").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ThumbnailCRC` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ThumbnailCRC").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GlobalResourcesSharedModelsGlobalImage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GlobalResourcesSharedModelsGlobalImage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GlobalResourcesSharedModelsGlobalImage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GlobalResourcesSharedModelsGlobalImage.class));

       return (TypeAdapter<T>) new TypeAdapter<GlobalResourcesSharedModelsGlobalImage>() {
           @Override
           public void write(JsonWriter out, GlobalResourcesSharedModelsGlobalImage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GlobalResourcesSharedModelsGlobalImage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GlobalResourcesSharedModelsGlobalImage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GlobalResourcesSharedModelsGlobalImage
   * @throws IOException if the JSON string is invalid with respect to GlobalResourcesSharedModelsGlobalImage
   */
  public static GlobalResourcesSharedModelsGlobalImage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GlobalResourcesSharedModelsGlobalImage.class);
  }

  /**
   * Convert an instance of GlobalResourcesSharedModelsGlobalImage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

