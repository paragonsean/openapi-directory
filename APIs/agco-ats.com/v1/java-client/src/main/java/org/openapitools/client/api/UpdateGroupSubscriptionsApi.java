/*
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.APIModelsApiError;
import org.openapitools.client.model.APIPagedResponseUpdateSystemModelsUpdateGroupSubscription;
import org.openapitools.client.model.UpdateSystemModelsUpdateGroupSubscription;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UpdateGroupSubscriptionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UpdateGroupSubscriptionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UpdateGroupSubscriptionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for updateGroupSubscriptionsDeleteUpdateGroupSubscription
     * @param updateGroupSubscriptionID The Update Group Subscription ID to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGroupSubscriptionsDeleteUpdateGroupSubscriptionCall(Integer updateGroupSubscriptionID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/UpdateGroupSubscriptions/{UpdateGroupSubscriptionID}"
            .replace("{" + "UpdateGroupSubscriptionID" + "}", localVarApiClient.escapeString(updateGroupSubscriptionID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateGroupSubscriptionsDeleteUpdateGroupSubscriptionValidateBeforeCall(Integer updateGroupSubscriptionID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateGroupSubscriptionID' is set
        if (updateGroupSubscriptionID == null) {
            throw new ApiException("Missing the required parameter 'updateGroupSubscriptionID' when calling updateGroupSubscriptionsDeleteUpdateGroupSubscription(Async)");
        }

        return updateGroupSubscriptionsDeleteUpdateGroupSubscriptionCall(updateGroupSubscriptionID, _callback);

    }

    /**
     * Delete an Update Group Subscription
     * No Documentation Found.
     * @param updateGroupSubscriptionID The Update Group Subscription ID to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public void updateGroupSubscriptionsDeleteUpdateGroupSubscription(Integer updateGroupSubscriptionID) throws ApiException {
        updateGroupSubscriptionsDeleteUpdateGroupSubscriptionWithHttpInfo(updateGroupSubscriptionID);
    }

    /**
     * Delete an Update Group Subscription
     * No Documentation Found.
     * @param updateGroupSubscriptionID The Update Group Subscription ID to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateGroupSubscriptionsDeleteUpdateGroupSubscriptionWithHttpInfo(Integer updateGroupSubscriptionID) throws ApiException {
        okhttp3.Call localVarCall = updateGroupSubscriptionsDeleteUpdateGroupSubscriptionValidateBeforeCall(updateGroupSubscriptionID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an Update Group Subscription (asynchronously)
     * No Documentation Found.
     * @param updateGroupSubscriptionID The Update Group Subscription ID to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGroupSubscriptionsDeleteUpdateGroupSubscriptionAsync(Integer updateGroupSubscriptionID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateGroupSubscriptionsDeleteUpdateGroupSubscriptionValidateBeforeCall(updateGroupSubscriptionID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateGroupSubscriptionsGetUpdateGroupSubscription
     * @param updateGroupSubscriptionID The Update Group Subscription ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGroupSubscriptionsGetUpdateGroupSubscriptionCall(Integer updateGroupSubscriptionID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/UpdateGroupSubscriptions/{UpdateGroupSubscriptionID}"
            .replace("{" + "UpdateGroupSubscriptionID" + "}", localVarApiClient.escapeString(updateGroupSubscriptionID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateGroupSubscriptionsGetUpdateGroupSubscriptionValidateBeforeCall(Integer updateGroupSubscriptionID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateGroupSubscriptionID' is set
        if (updateGroupSubscriptionID == null) {
            throw new ApiException("Missing the required parameter 'updateGroupSubscriptionID' when calling updateGroupSubscriptionsGetUpdateGroupSubscription(Async)");
        }

        return updateGroupSubscriptionsGetUpdateGroupSubscriptionCall(updateGroupSubscriptionID, _callback);

    }

    /**
     * Get an Update Group Subscription
     * No Documentation Found.
     * @param updateGroupSubscriptionID The Update Group Subscription ID (required)
     * @return UpdateSystemModelsUpdateGroupSubscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSystemModelsUpdateGroupSubscription updateGroupSubscriptionsGetUpdateGroupSubscription(Integer updateGroupSubscriptionID) throws ApiException {
        ApiResponse<UpdateSystemModelsUpdateGroupSubscription> localVarResp = updateGroupSubscriptionsGetUpdateGroupSubscriptionWithHttpInfo(updateGroupSubscriptionID);
        return localVarResp.getData();
    }

    /**
     * Get an Update Group Subscription
     * No Documentation Found.
     * @param updateGroupSubscriptionID The Update Group Subscription ID (required)
     * @return ApiResponse&lt;UpdateSystemModelsUpdateGroupSubscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateSystemModelsUpdateGroupSubscription> updateGroupSubscriptionsGetUpdateGroupSubscriptionWithHttpInfo(Integer updateGroupSubscriptionID) throws ApiException {
        okhttp3.Call localVarCall = updateGroupSubscriptionsGetUpdateGroupSubscriptionValidateBeforeCall(updateGroupSubscriptionID, null);
        Type localVarReturnType = new TypeToken<UpdateSystemModelsUpdateGroupSubscription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an Update Group Subscription (asynchronously)
     * No Documentation Found.
     * @param updateGroupSubscriptionID The Update Group Subscription ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGroupSubscriptionsGetUpdateGroupSubscriptionAsync(Integer updateGroupSubscriptionID, final ApiCallback<UpdateSystemModelsUpdateGroupSubscription> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateGroupSubscriptionsGetUpdateGroupSubscriptionValidateBeforeCall(updateGroupSubscriptionID, _callback);
        Type localVarReturnType = new TypeToken<UpdateSystemModelsUpdateGroupSubscription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateGroupSubscriptionsGetUpdateGroupSubscriptions
     * @param updateGroupID Optional. Filter by Update Group ID. (optional)
     * @param packageTypeID Optional. Filter by Package Type ID. (optional)
     * @param clientID Optional. Filter by Client ID. (optional)
     * @param limit Optional. The page limit. The default page limit is 10. (optional)
     * @param offset Optional. The page offset. The default page offset is 0. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGroupSubscriptionsGetUpdateGroupSubscriptionsCall(String updateGroupID, String packageTypeID, String clientID, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/UpdateGroupSubscriptions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updateGroupID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("UpdateGroupID", updateGroupID));
        }

        if (packageTypeID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PackageTypeID", packageTypeID));
        }

        if (clientID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ClientID", clientID));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateGroupSubscriptionsGetUpdateGroupSubscriptionsValidateBeforeCall(String updateGroupID, String packageTypeID, String clientID, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return updateGroupSubscriptionsGetUpdateGroupSubscriptionsCall(updateGroupID, packageTypeID, clientID, limit, offset, _callback);

    }

    /**
     * Get Update Group Subscriptions
     * No Documentation Found.
     * @param updateGroupID Optional. Filter by Update Group ID. (optional)
     * @param packageTypeID Optional. Filter by Package Type ID. (optional)
     * @param clientID Optional. Filter by Client ID. (optional)
     * @param limit Optional. The page limit. The default page limit is 10. (optional)
     * @param offset Optional. The page offset. The default page offset is 0. (optional)
     * @return APIPagedResponseUpdateSystemModelsUpdateGroupSubscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public APIPagedResponseUpdateSystemModelsUpdateGroupSubscription updateGroupSubscriptionsGetUpdateGroupSubscriptions(String updateGroupID, String packageTypeID, String clientID, Integer limit, Integer offset) throws ApiException {
        ApiResponse<APIPagedResponseUpdateSystemModelsUpdateGroupSubscription> localVarResp = updateGroupSubscriptionsGetUpdateGroupSubscriptionsWithHttpInfo(updateGroupID, packageTypeID, clientID, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Get Update Group Subscriptions
     * No Documentation Found.
     * @param updateGroupID Optional. Filter by Update Group ID. (optional)
     * @param packageTypeID Optional. Filter by Package Type ID. (optional)
     * @param clientID Optional. Filter by Client ID. (optional)
     * @param limit Optional. The page limit. The default page limit is 10. (optional)
     * @param offset Optional. The page offset. The default page offset is 0. (optional)
     * @return ApiResponse&lt;APIPagedResponseUpdateSystemModelsUpdateGroupSubscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<APIPagedResponseUpdateSystemModelsUpdateGroupSubscription> updateGroupSubscriptionsGetUpdateGroupSubscriptionsWithHttpInfo(String updateGroupID, String packageTypeID, String clientID, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = updateGroupSubscriptionsGetUpdateGroupSubscriptionsValidateBeforeCall(updateGroupID, packageTypeID, clientID, limit, offset, null);
        Type localVarReturnType = new TypeToken<APIPagedResponseUpdateSystemModelsUpdateGroupSubscription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Update Group Subscriptions (asynchronously)
     * No Documentation Found.
     * @param updateGroupID Optional. Filter by Update Group ID. (optional)
     * @param packageTypeID Optional. Filter by Package Type ID. (optional)
     * @param clientID Optional. Filter by Client ID. (optional)
     * @param limit Optional. The page limit. The default page limit is 10. (optional)
     * @param offset Optional. The page offset. The default page offset is 0. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGroupSubscriptionsGetUpdateGroupSubscriptionsAsync(String updateGroupID, String packageTypeID, String clientID, Integer limit, Integer offset, final ApiCallback<APIPagedResponseUpdateSystemModelsUpdateGroupSubscription> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateGroupSubscriptionsGetUpdateGroupSubscriptionsValidateBeforeCall(updateGroupID, packageTypeID, clientID, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<APIPagedResponseUpdateSystemModelsUpdateGroupSubscription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateGroupSubscriptionsPostUpdateGroupSubscription
     * @param updateSystemModelsUpdateGroupSubscription The Update Group Subscription to add (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGroupSubscriptionsPostUpdateGroupSubscriptionCall(UpdateSystemModelsUpdateGroupSubscription updateSystemModelsUpdateGroupSubscription, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateSystemModelsUpdateGroupSubscription;

        // create path and map variables
        String localVarPath = "/api/v2/UpdateGroupSubscriptions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateGroupSubscriptionsPostUpdateGroupSubscriptionValidateBeforeCall(UpdateSystemModelsUpdateGroupSubscription updateSystemModelsUpdateGroupSubscription, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateSystemModelsUpdateGroupSubscription' is set
        if (updateSystemModelsUpdateGroupSubscription == null) {
            throw new ApiException("Missing the required parameter 'updateSystemModelsUpdateGroupSubscription' when calling updateGroupSubscriptionsPostUpdateGroupSubscription(Async)");
        }

        return updateGroupSubscriptionsPostUpdateGroupSubscriptionCall(updateSystemModelsUpdateGroupSubscription, _callback);

    }

    /**
     * Add an Update Group Subscription
     * No Documentation Found.
     * @param updateSystemModelsUpdateGroupSubscription The Update Group Subscription to add (required)
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public Integer updateGroupSubscriptionsPostUpdateGroupSubscription(UpdateSystemModelsUpdateGroupSubscription updateSystemModelsUpdateGroupSubscription) throws ApiException {
        ApiResponse<Integer> localVarResp = updateGroupSubscriptionsPostUpdateGroupSubscriptionWithHttpInfo(updateSystemModelsUpdateGroupSubscription);
        return localVarResp.getData();
    }

    /**
     * Add an Update Group Subscription
     * No Documentation Found.
     * @param updateSystemModelsUpdateGroupSubscription The Update Group Subscription to add (required)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Integer> updateGroupSubscriptionsPostUpdateGroupSubscriptionWithHttpInfo(UpdateSystemModelsUpdateGroupSubscription updateSystemModelsUpdateGroupSubscription) throws ApiException {
        okhttp3.Call localVarCall = updateGroupSubscriptionsPostUpdateGroupSubscriptionValidateBeforeCall(updateSystemModelsUpdateGroupSubscription, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add an Update Group Subscription (asynchronously)
     * No Documentation Found.
     * @param updateSystemModelsUpdateGroupSubscription The Update Group Subscription to add (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGroupSubscriptionsPostUpdateGroupSubscriptionAsync(UpdateSystemModelsUpdateGroupSubscription updateSystemModelsUpdateGroupSubscription, final ApiCallback<Integer> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateGroupSubscriptionsPostUpdateGroupSubscriptionValidateBeforeCall(updateSystemModelsUpdateGroupSubscription, _callback);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateGroupSubscriptionsPostUpdateGroupSubscriptions
     * @param updateSystemModelsUpdateGroupSubscription  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGroupSubscriptionsPostUpdateGroupSubscriptionsCall(List<UpdateSystemModelsUpdateGroupSubscription> updateSystemModelsUpdateGroupSubscription, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateSystemModelsUpdateGroupSubscription;

        // create path and map variables
        String localVarPath = "/api/v2/UpdateGroupSubscriptions/Batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateGroupSubscriptionsPostUpdateGroupSubscriptionsValidateBeforeCall(List<UpdateSystemModelsUpdateGroupSubscription> updateSystemModelsUpdateGroupSubscription, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateSystemModelsUpdateGroupSubscription' is set
        if (updateSystemModelsUpdateGroupSubscription == null) {
            throw new ApiException("Missing the required parameter 'updateSystemModelsUpdateGroupSubscription' when calling updateGroupSubscriptionsPostUpdateGroupSubscriptions(Async)");
        }

        return updateGroupSubscriptionsPostUpdateGroupSubscriptionsCall(updateSystemModelsUpdateGroupSubscription, _callback);

    }

    /**
     * No Documentation Found.
     * No Documentation Found.
     * @param updateSystemModelsUpdateGroupSubscription  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public void updateGroupSubscriptionsPostUpdateGroupSubscriptions(List<UpdateSystemModelsUpdateGroupSubscription> updateSystemModelsUpdateGroupSubscription) throws ApiException {
        updateGroupSubscriptionsPostUpdateGroupSubscriptionsWithHttpInfo(updateSystemModelsUpdateGroupSubscription);
    }

    /**
     * No Documentation Found.
     * No Documentation Found.
     * @param updateSystemModelsUpdateGroupSubscription  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateGroupSubscriptionsPostUpdateGroupSubscriptionsWithHttpInfo(List<UpdateSystemModelsUpdateGroupSubscription> updateSystemModelsUpdateGroupSubscription) throws ApiException {
        okhttp3.Call localVarCall = updateGroupSubscriptionsPostUpdateGroupSubscriptionsValidateBeforeCall(updateSystemModelsUpdateGroupSubscription, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * No Documentation Found. (asynchronously)
     * No Documentation Found.
     * @param updateSystemModelsUpdateGroupSubscription  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGroupSubscriptionsPostUpdateGroupSubscriptionsAsync(List<UpdateSystemModelsUpdateGroupSubscription> updateSystemModelsUpdateGroupSubscription, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateGroupSubscriptionsPostUpdateGroupSubscriptionsValidateBeforeCall(updateSystemModelsUpdateGroupSubscription, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateGroupSubscriptionsPutUpdateGroupSubscription
     * @param updateGroupSubscriptionID The Update Group Subscription ID (required)
     * @param updateSystemModelsUpdateGroupSubscription The updated Update Group Subscription (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGroupSubscriptionsPutUpdateGroupSubscriptionCall(Integer updateGroupSubscriptionID, UpdateSystemModelsUpdateGroupSubscription updateSystemModelsUpdateGroupSubscription, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateSystemModelsUpdateGroupSubscription;

        // create path and map variables
        String localVarPath = "/api/v2/UpdateGroupSubscriptions/{UpdateGroupSubscriptionID}"
            .replace("{" + "UpdateGroupSubscriptionID" + "}", localVarApiClient.escapeString(updateGroupSubscriptionID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateGroupSubscriptionsPutUpdateGroupSubscriptionValidateBeforeCall(Integer updateGroupSubscriptionID, UpdateSystemModelsUpdateGroupSubscription updateSystemModelsUpdateGroupSubscription, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateGroupSubscriptionID' is set
        if (updateGroupSubscriptionID == null) {
            throw new ApiException("Missing the required parameter 'updateGroupSubscriptionID' when calling updateGroupSubscriptionsPutUpdateGroupSubscription(Async)");
        }

        // verify the required parameter 'updateSystemModelsUpdateGroupSubscription' is set
        if (updateSystemModelsUpdateGroupSubscription == null) {
            throw new ApiException("Missing the required parameter 'updateSystemModelsUpdateGroupSubscription' when calling updateGroupSubscriptionsPutUpdateGroupSubscription(Async)");
        }

        return updateGroupSubscriptionsPutUpdateGroupSubscriptionCall(updateGroupSubscriptionID, updateSystemModelsUpdateGroupSubscription, _callback);

    }

    /**
     * Update an Update Group Subscription
     * No Documentation Found.
     * @param updateGroupSubscriptionID The Update Group Subscription ID (required)
     * @param updateSystemModelsUpdateGroupSubscription The updated Update Group Subscription (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public void updateGroupSubscriptionsPutUpdateGroupSubscription(Integer updateGroupSubscriptionID, UpdateSystemModelsUpdateGroupSubscription updateSystemModelsUpdateGroupSubscription) throws ApiException {
        updateGroupSubscriptionsPutUpdateGroupSubscriptionWithHttpInfo(updateGroupSubscriptionID, updateSystemModelsUpdateGroupSubscription);
    }

    /**
     * Update an Update Group Subscription
     * No Documentation Found.
     * @param updateGroupSubscriptionID The Update Group Subscription ID (required)
     * @param updateSystemModelsUpdateGroupSubscription The updated Update Group Subscription (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateGroupSubscriptionsPutUpdateGroupSubscriptionWithHttpInfo(Integer updateGroupSubscriptionID, UpdateSystemModelsUpdateGroupSubscription updateSystemModelsUpdateGroupSubscription) throws ApiException {
        okhttp3.Call localVarCall = updateGroupSubscriptionsPutUpdateGroupSubscriptionValidateBeforeCall(updateGroupSubscriptionID, updateSystemModelsUpdateGroupSubscription, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update an Update Group Subscription (asynchronously)
     * No Documentation Found.
     * @param updateGroupSubscriptionID The Update Group Subscription ID (required)
     * @param updateSystemModelsUpdateGroupSubscription The updated Update Group Subscription (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGroupSubscriptionsPutUpdateGroupSubscriptionAsync(Integer updateGroupSubscriptionID, UpdateSystemModelsUpdateGroupSubscription updateSystemModelsUpdateGroupSubscription, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateGroupSubscriptionsPutUpdateGroupSubscriptionValidateBeforeCall(updateGroupSubscriptionID, updateSystemModelsUpdateGroupSubscription, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateGroupSubscriptionsPutUpdateGroupSubscriptions
     * @param updateSystemModelsUpdateGroupSubscription  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGroupSubscriptionsPutUpdateGroupSubscriptionsCall(List<UpdateSystemModelsUpdateGroupSubscription> updateSystemModelsUpdateGroupSubscription, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateSystemModelsUpdateGroupSubscription;

        // create path and map variables
        String localVarPath = "/api/v2/UpdateGroupSubscriptions/Batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateGroupSubscriptionsPutUpdateGroupSubscriptionsValidateBeforeCall(List<UpdateSystemModelsUpdateGroupSubscription> updateSystemModelsUpdateGroupSubscription, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateSystemModelsUpdateGroupSubscription' is set
        if (updateSystemModelsUpdateGroupSubscription == null) {
            throw new ApiException("Missing the required parameter 'updateSystemModelsUpdateGroupSubscription' when calling updateGroupSubscriptionsPutUpdateGroupSubscriptions(Async)");
        }

        return updateGroupSubscriptionsPutUpdateGroupSubscriptionsCall(updateSystemModelsUpdateGroupSubscription, _callback);

    }

    /**
     * No Documentation Found.
     * No Documentation Found.
     * @param updateSystemModelsUpdateGroupSubscription  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public void updateGroupSubscriptionsPutUpdateGroupSubscriptions(List<UpdateSystemModelsUpdateGroupSubscription> updateSystemModelsUpdateGroupSubscription) throws ApiException {
        updateGroupSubscriptionsPutUpdateGroupSubscriptionsWithHttpInfo(updateSystemModelsUpdateGroupSubscription);
    }

    /**
     * No Documentation Found.
     * No Documentation Found.
     * @param updateSystemModelsUpdateGroupSubscription  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateGroupSubscriptionsPutUpdateGroupSubscriptionsWithHttpInfo(List<UpdateSystemModelsUpdateGroupSubscription> updateSystemModelsUpdateGroupSubscription) throws ApiException {
        okhttp3.Call localVarCall = updateGroupSubscriptionsPutUpdateGroupSubscriptionsValidateBeforeCall(updateSystemModelsUpdateGroupSubscription, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * No Documentation Found. (asynchronously)
     * No Documentation Found.
     * @param updateSystemModelsUpdateGroupSubscription  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGroupSubscriptionsPutUpdateGroupSubscriptionsAsync(List<UpdateSystemModelsUpdateGroupSubscription> updateSystemModelsUpdateGroupSubscription, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateGroupSubscriptionsPutUpdateGroupSubscriptionsValidateBeforeCall(updateSystemModelsUpdateGroupSubscription, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
