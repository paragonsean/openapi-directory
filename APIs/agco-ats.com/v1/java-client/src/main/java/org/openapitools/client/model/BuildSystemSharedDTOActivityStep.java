/*
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BuildSystemSharedDTOParameterMapping;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A DTO for an IActivityStep
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:35.511967-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BuildSystemSharedDTOActivityStep {
  public static final String SERIALIZED_NAME_ACTIVITY_I_D = "ActivityID";
  @SerializedName(SERIALIZED_NAME_ACTIVITY_I_D)
  private Integer activityID;

  public static final String SERIALIZED_NAME_ACTIVITY_STEP_I_D = "ActivityStepID";
  @SerializedName(SERIALIZED_NAME_ACTIVITY_STEP_I_D)
  private Integer activityStepID;

  public static final String SERIALIZED_NAME_IMPLEMENTATION_I_D = "ImplementationID";
  @SerializedName(SERIALIZED_NAME_IMPLEMENTATION_I_D)
  private String implementationID;

  public static final String SERIALIZED_NAME_PARAMETER_MAPPINGS = "ParameterMappings";
  @SerializedName(SERIALIZED_NAME_PARAMETER_MAPPINGS)
  private List<BuildSystemSharedDTOParameterMapping> parameterMappings = new ArrayList<>();

  public static final String SERIALIZED_NAME_RUN_ORDER = "RunOrder";
  @SerializedName(SERIALIZED_NAME_RUN_ORDER)
  private Integer runOrder;

  public static final String SERIALIZED_NAME_STEP_I_D = "StepID";
  @SerializedName(SERIALIZED_NAME_STEP_I_D)
  private Integer stepID;

  public static final String SERIALIZED_NAME_STEP_NAME = "StepName";
  @SerializedName(SERIALIZED_NAME_STEP_NAME)
  private String stepName;

  public static final String SERIALIZED_NAME_USE_CONFIG = "UseConfig";
  @SerializedName(SERIALIZED_NAME_USE_CONFIG)
  private String useConfig;

  public BuildSystemSharedDTOActivityStep() {
  }

  public BuildSystemSharedDTOActivityStep(
     List<BuildSystemSharedDTOParameterMapping> parameterMappings
  ) {
    this();
    this.parameterMappings = parameterMappings;
  }

  public BuildSystemSharedDTOActivityStep activityID(Integer activityID) {
    this.activityID = activityID;
    return this;
  }

  /**
   * The id of the activity this activity step belongs to
   * @return activityID
   */
  @javax.annotation.Nullable
  public Integer getActivityID() {
    return activityID;
  }

  public void setActivityID(Integer activityID) {
    this.activityID = activityID;
  }


  public BuildSystemSharedDTOActivityStep activityStepID(Integer activityStepID) {
    this.activityStepID = activityStepID;
    return this;
  }

  /**
   * The id of this activity step
   * @return activityStepID
   */
  @javax.annotation.Nullable
  public Integer getActivityStepID() {
    return activityStepID;
  }

  public void setActivityStepID(Integer activityStepID) {
    this.activityStepID = activityStepID;
  }


  public BuildSystemSharedDTOActivityStep implementationID(String implementationID) {
    this.implementationID = implementationID;
    return this;
  }

  /**
   * The implementation id which is used to look up the step implementation
   * @return implementationID
   */
  @javax.annotation.Nullable
  public String getImplementationID() {
    return implementationID;
  }

  public void setImplementationID(String implementationID) {
    this.implementationID = implementationID;
  }


  /**
   * The mapping of values from a source to be used for the step parameters
   * @return parameterMappings
   */
  @javax.annotation.Nullable
  public List<BuildSystemSharedDTOParameterMapping> getParameterMappings() {
    return parameterMappings;
  }



  public BuildSystemSharedDTOActivityStep runOrder(Integer runOrder) {
    this.runOrder = runOrder;
    return this;
  }

  /**
   * The order of this activity step relative to other activity steps
   * @return runOrder
   */
  @javax.annotation.Nullable
  public Integer getRunOrder() {
    return runOrder;
  }

  public void setRunOrder(Integer runOrder) {
    this.runOrder = runOrder;
  }


  public BuildSystemSharedDTOActivityStep stepID(Integer stepID) {
    this.stepID = stepID;
    return this;
  }

  /**
   * The id of the step
   * @return stepID
   */
  @javax.annotation.Nullable
  public Integer getStepID() {
    return stepID;
  }

  public void setStepID(Integer stepID) {
    this.stepID = stepID;
  }


  public BuildSystemSharedDTOActivityStep stepName(String stepName) {
    this.stepName = stepName;
    return this;
  }

  /**
   * The name of the step
   * @return stepName
   */
  @javax.annotation.Nullable
  public String getStepName() {
    return stepName;
  }

  public void setStepName(String stepName) {
    this.stepName = stepName;
  }


  public BuildSystemSharedDTOActivityStep useConfig(String useConfig) {
    this.useConfig = useConfig;
    return this;
  }

  /**
   * Indicates the configuration for the ActivityStep to use at runtime.  The build agent must provide this configuration
   * @return useConfig
   */
  @javax.annotation.Nullable
  public String getUseConfig() {
    return useConfig;
  }

  public void setUseConfig(String useConfig) {
    this.useConfig = useConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BuildSystemSharedDTOActivityStep buildSystemSharedDTOActivityStep = (BuildSystemSharedDTOActivityStep) o;
    return Objects.equals(this.activityID, buildSystemSharedDTOActivityStep.activityID) &&
        Objects.equals(this.activityStepID, buildSystemSharedDTOActivityStep.activityStepID) &&
        Objects.equals(this.implementationID, buildSystemSharedDTOActivityStep.implementationID) &&
        Objects.equals(this.parameterMappings, buildSystemSharedDTOActivityStep.parameterMappings) &&
        Objects.equals(this.runOrder, buildSystemSharedDTOActivityStep.runOrder) &&
        Objects.equals(this.stepID, buildSystemSharedDTOActivityStep.stepID) &&
        Objects.equals(this.stepName, buildSystemSharedDTOActivityStep.stepName) &&
        Objects.equals(this.useConfig, buildSystemSharedDTOActivityStep.useConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activityID, activityStepID, implementationID, parameterMappings, runOrder, stepID, stepName, useConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BuildSystemSharedDTOActivityStep {\n");
    sb.append("    activityID: ").append(toIndentedString(activityID)).append("\n");
    sb.append("    activityStepID: ").append(toIndentedString(activityStepID)).append("\n");
    sb.append("    implementationID: ").append(toIndentedString(implementationID)).append("\n");
    sb.append("    parameterMappings: ").append(toIndentedString(parameterMappings)).append("\n");
    sb.append("    runOrder: ").append(toIndentedString(runOrder)).append("\n");
    sb.append("    stepID: ").append(toIndentedString(stepID)).append("\n");
    sb.append("    stepName: ").append(toIndentedString(stepName)).append("\n");
    sb.append("    useConfig: ").append(toIndentedString(useConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ActivityID");
    openapiFields.add("ActivityStepID");
    openapiFields.add("ImplementationID");
    openapiFields.add("ParameterMappings");
    openapiFields.add("RunOrder");
    openapiFields.add("StepID");
    openapiFields.add("StepName");
    openapiFields.add("UseConfig");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BuildSystemSharedDTOActivityStep
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BuildSystemSharedDTOActivityStep.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BuildSystemSharedDTOActivityStep is not found in the empty JSON string", BuildSystemSharedDTOActivityStep.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BuildSystemSharedDTOActivityStep.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BuildSystemSharedDTOActivityStep` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ImplementationID") != null && !jsonObj.get("ImplementationID").isJsonNull()) && !jsonObj.get("ImplementationID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ImplementationID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ImplementationID").toString()));
      }
      if (jsonObj.get("ParameterMappings") != null && !jsonObj.get("ParameterMappings").isJsonNull()) {
        JsonArray jsonArrayparameterMappings = jsonObj.getAsJsonArray("ParameterMappings");
        if (jsonArrayparameterMappings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ParameterMappings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ParameterMappings` to be an array in the JSON string but got `%s`", jsonObj.get("ParameterMappings").toString()));
          }

          // validate the optional field `ParameterMappings` (array)
          for (int i = 0; i < jsonArrayparameterMappings.size(); i++) {
            BuildSystemSharedDTOParameterMapping.validateJsonElement(jsonArrayparameterMappings.get(i));
          };
        }
      }
      if ((jsonObj.get("StepName") != null && !jsonObj.get("StepName").isJsonNull()) && !jsonObj.get("StepName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StepName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StepName").toString()));
      }
      if ((jsonObj.get("UseConfig") != null && !jsonObj.get("UseConfig").isJsonNull()) && !jsonObj.get("UseConfig").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UseConfig` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UseConfig").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BuildSystemSharedDTOActivityStep.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BuildSystemSharedDTOActivityStep' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BuildSystemSharedDTOActivityStep> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BuildSystemSharedDTOActivityStep.class));

       return (TypeAdapter<T>) new TypeAdapter<BuildSystemSharedDTOActivityStep>() {
           @Override
           public void write(JsonWriter out, BuildSystemSharedDTOActivityStep value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BuildSystemSharedDTOActivityStep read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BuildSystemSharedDTOActivityStep given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BuildSystemSharedDTOActivityStep
   * @throws IOException if the JSON string is invalid with respect to BuildSystemSharedDTOActivityStep
   */
  public static BuildSystemSharedDTOActivityStep fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BuildSystemSharedDTOActivityStep.class);
  }

  /**
   * Convert an instance of BuildSystemSharedDTOActivityStep to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

