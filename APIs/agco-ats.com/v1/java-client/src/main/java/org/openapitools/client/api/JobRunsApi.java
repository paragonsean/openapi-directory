/*
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.APIModelsApiError;
import org.openapitools.client.model.APIPagedResponseBuildSystemSharedDTOJobRun;
import org.openapitools.client.model.BuildSystemSharedDTOJobRun;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class JobRunsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public JobRunsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public JobRunsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for jobRunsDeleteJobRun
     * @param jobRunID The id of the JobRun to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobRunsDeleteJobRunCall(Integer jobRunID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/jobRuns/{jobRunID}"
            .replace("{" + "jobRunID" + "}", localVarApiClient.escapeString(jobRunID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobRunsDeleteJobRunValidateBeforeCall(Integer jobRunID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobRunID' is set
        if (jobRunID == null) {
            throw new ApiException("Missing the required parameter 'jobRunID' when calling jobRunsDeleteJobRun(Async)");
        }

        return jobRunsDeleteJobRunCall(jobRunID, _callback);

    }

    /**
     * Delete a JobRun
     * Deletes a JobRun. When successful, the response is empty.  If unsuccessful, an appropriate              ApiError is returned.
     * @param jobRunID The id of the JobRun to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public void jobRunsDeleteJobRun(Integer jobRunID) throws ApiException {
        jobRunsDeleteJobRunWithHttpInfo(jobRunID);
    }

    /**
     * Delete a JobRun
     * Deletes a JobRun. When successful, the response is empty.  If unsuccessful, an appropriate              ApiError is returned.
     * @param jobRunID The id of the JobRun to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> jobRunsDeleteJobRunWithHttpInfo(Integer jobRunID) throws ApiException {
        okhttp3.Call localVarCall = jobRunsDeleteJobRunValidateBeforeCall(jobRunID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a JobRun (asynchronously)
     * Deletes a JobRun. When successful, the response is empty.  If unsuccessful, an appropriate              ApiError is returned.
     * @param jobRunID The id of the JobRun to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobRunsDeleteJobRunAsync(Integer jobRunID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobRunsDeleteJobRunValidateBeforeCall(jobRunID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobRunsGetJobRun
     * @param jobRunID The ID of the JobRun to get. (required)
     * @param includeActivityRunDetails Optional. Indicates whether to include ActivityRun details.  Defaults to false. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobRunsGetJobRunCall(Integer jobRunID, Boolean includeActivityRunDetails, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/jobRuns/{jobRunID}"
            .replace("{" + "jobRunID" + "}", localVarApiClient.escapeString(jobRunID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeActivityRunDetails != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeActivityRunDetails", includeActivityRunDetails));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobRunsGetJobRunValidateBeforeCall(Integer jobRunID, Boolean includeActivityRunDetails, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobRunID' is set
        if (jobRunID == null) {
            throw new ApiException("Missing the required parameter 'jobRunID' when calling jobRunsGetJobRun(Async)");
        }

        return jobRunsGetJobRunCall(jobRunID, includeActivityRunDetails, _callback);

    }

    /**
     * Get a JobRun by ID
     * Gets a JobRun by ID. When successful, the response is the requested JobRun.              If unsuccessful, an appropriate ApiError is returned.
     * @param jobRunID The ID of the JobRun to get. (required)
     * @param includeActivityRunDetails Optional. Indicates whether to include ActivityRun details.  Defaults to false. (optional)
     * @return BuildSystemSharedDTOJobRun
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public BuildSystemSharedDTOJobRun jobRunsGetJobRun(Integer jobRunID, Boolean includeActivityRunDetails) throws ApiException {
        ApiResponse<BuildSystemSharedDTOJobRun> localVarResp = jobRunsGetJobRunWithHttpInfo(jobRunID, includeActivityRunDetails);
        return localVarResp.getData();
    }

    /**
     * Get a JobRun by ID
     * Gets a JobRun by ID. When successful, the response is the requested JobRun.              If unsuccessful, an appropriate ApiError is returned.
     * @param jobRunID The ID of the JobRun to get. (required)
     * @param includeActivityRunDetails Optional. Indicates whether to include ActivityRun details.  Defaults to false. (optional)
     * @return ApiResponse&lt;BuildSystemSharedDTOJobRun&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BuildSystemSharedDTOJobRun> jobRunsGetJobRunWithHttpInfo(Integer jobRunID, Boolean includeActivityRunDetails) throws ApiException {
        okhttp3.Call localVarCall = jobRunsGetJobRunValidateBeforeCall(jobRunID, includeActivityRunDetails, null);
        Type localVarReturnType = new TypeToken<BuildSystemSharedDTOJobRun>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a JobRun by ID (asynchronously)
     * Gets a JobRun by ID. When successful, the response is the requested JobRun.              If unsuccessful, an appropriate ApiError is returned.
     * @param jobRunID The ID of the JobRun to get. (required)
     * @param includeActivityRunDetails Optional. Indicates whether to include ActivityRun details.  Defaults to false. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobRunsGetJobRunAsync(Integer jobRunID, Boolean includeActivityRunDetails, final ApiCallback<BuildSystemSharedDTOJobRun> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobRunsGetJobRunValidateBeforeCall(jobRunID, includeActivityRunDetails, _callback);
        Type localVarReturnType = new TypeToken<BuildSystemSharedDTOJobRun>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobRunsGetJobRuns
     * @param limit Optional. The page limit.  If not specified, the default page limit is 10. (optional)
     * @param offset Optional. The page offset.  If not specified, the default page offset is 0. (optional)
     * @param includeActivityRunDetails Optional. Indicates whether to include ActivityRun details.  Defaults to false. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobRunsGetJobRunsCall(Integer limit, Integer offset, Boolean includeActivityRunDetails, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/jobRuns";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (includeActivityRunDetails != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeActivityRunDetails", includeActivityRunDetails));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobRunsGetJobRunsValidateBeforeCall(Integer limit, Integer offset, Boolean includeActivityRunDetails, final ApiCallback _callback) throws ApiException {
        return jobRunsGetJobRunsCall(limit, offset, includeActivityRunDetails, _callback);

    }

    /**
     * Get JobRuns
     * Gets a collection of JobRuns. When successful, the response is a PagedResponse of JobRuns.              If unsuccessful, an appropriate ApiError is returned.
     * @param limit Optional. The page limit.  If not specified, the default page limit is 10. (optional)
     * @param offset Optional. The page offset.  If not specified, the default page offset is 0. (optional)
     * @param includeActivityRunDetails Optional. Indicates whether to include ActivityRun details.  Defaults to false. (optional)
     * @return APIPagedResponseBuildSystemSharedDTOJobRun
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public APIPagedResponseBuildSystemSharedDTOJobRun jobRunsGetJobRuns(Integer limit, Integer offset, Boolean includeActivityRunDetails) throws ApiException {
        ApiResponse<APIPagedResponseBuildSystemSharedDTOJobRun> localVarResp = jobRunsGetJobRunsWithHttpInfo(limit, offset, includeActivityRunDetails);
        return localVarResp.getData();
    }

    /**
     * Get JobRuns
     * Gets a collection of JobRuns. When successful, the response is a PagedResponse of JobRuns.              If unsuccessful, an appropriate ApiError is returned.
     * @param limit Optional. The page limit.  If not specified, the default page limit is 10. (optional)
     * @param offset Optional. The page offset.  If not specified, the default page offset is 0. (optional)
     * @param includeActivityRunDetails Optional. Indicates whether to include ActivityRun details.  Defaults to false. (optional)
     * @return ApiResponse&lt;APIPagedResponseBuildSystemSharedDTOJobRun&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<APIPagedResponseBuildSystemSharedDTOJobRun> jobRunsGetJobRunsWithHttpInfo(Integer limit, Integer offset, Boolean includeActivityRunDetails) throws ApiException {
        okhttp3.Call localVarCall = jobRunsGetJobRunsValidateBeforeCall(limit, offset, includeActivityRunDetails, null);
        Type localVarReturnType = new TypeToken<APIPagedResponseBuildSystemSharedDTOJobRun>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get JobRuns (asynchronously)
     * Gets a collection of JobRuns. When successful, the response is a PagedResponse of JobRuns.              If unsuccessful, an appropriate ApiError is returned.
     * @param limit Optional. The page limit.  If not specified, the default page limit is 10. (optional)
     * @param offset Optional. The page offset.  If not specified, the default page offset is 0. (optional)
     * @param includeActivityRunDetails Optional. Indicates whether to include ActivityRun details.  Defaults to false. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobRunsGetJobRunsAsync(Integer limit, Integer offset, Boolean includeActivityRunDetails, final ApiCallback<APIPagedResponseBuildSystemSharedDTOJobRun> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobRunsGetJobRunsValidateBeforeCall(limit, offset, includeActivityRunDetails, _callback);
        Type localVarReturnType = new TypeToken<APIPagedResponseBuildSystemSharedDTOJobRun>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobRunsPostJobRun
     * @param buildSystemSharedDTOJobRun The JobRun to create.  The JobRunID will be assigned on creation of the JobRun. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobRunsPostJobRunCall(BuildSystemSharedDTOJobRun buildSystemSharedDTOJobRun, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = buildSystemSharedDTOJobRun;

        // create path and map variables
        String localVarPath = "/api/v2/jobRuns";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobRunsPostJobRunValidateBeforeCall(BuildSystemSharedDTOJobRun buildSystemSharedDTOJobRun, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'buildSystemSharedDTOJobRun' is set
        if (buildSystemSharedDTOJobRun == null) {
            throw new ApiException("Missing the required parameter 'buildSystemSharedDTOJobRun' when calling jobRunsPostJobRun(Async)");
        }

        return jobRunsPostJobRunCall(buildSystemSharedDTOJobRun, _callback);

    }

    /**
     * Create a JobRun
     * Creates a JobRun.  The body of the POST is the JobRun to create.  The JobRunID will be assigned on              creation of the JobRun.  When successful, the response is the JobRunID.  If unsuccessful, an               appropriate ApiError is returned.
     * @param buildSystemSharedDTOJobRun The JobRun to create.  The JobRunID will be assigned on creation of the JobRun. (required)
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public Integer jobRunsPostJobRun(BuildSystemSharedDTOJobRun buildSystemSharedDTOJobRun) throws ApiException {
        ApiResponse<Integer> localVarResp = jobRunsPostJobRunWithHttpInfo(buildSystemSharedDTOJobRun);
        return localVarResp.getData();
    }

    /**
     * Create a JobRun
     * Creates a JobRun.  The body of the POST is the JobRun to create.  The JobRunID will be assigned on              creation of the JobRun.  When successful, the response is the JobRunID.  If unsuccessful, an               appropriate ApiError is returned.
     * @param buildSystemSharedDTOJobRun The JobRun to create.  The JobRunID will be assigned on creation of the JobRun. (required)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Integer> jobRunsPostJobRunWithHttpInfo(BuildSystemSharedDTOJobRun buildSystemSharedDTOJobRun) throws ApiException {
        okhttp3.Call localVarCall = jobRunsPostJobRunValidateBeforeCall(buildSystemSharedDTOJobRun, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a JobRun (asynchronously)
     * Creates a JobRun.  The body of the POST is the JobRun to create.  The JobRunID will be assigned on              creation of the JobRun.  When successful, the response is the JobRunID.  If unsuccessful, an               appropriate ApiError is returned.
     * @param buildSystemSharedDTOJobRun The JobRun to create.  The JobRunID will be assigned on creation of the JobRun. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobRunsPostJobRunAsync(BuildSystemSharedDTOJobRun buildSystemSharedDTOJobRun, final ApiCallback<Integer> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobRunsPostJobRunValidateBeforeCall(buildSystemSharedDTOJobRun, _callback);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobRunsPutJobRun
     * @param jobRunID The id of the JobRun to update (required)
     * @param buildSystemSharedDTOJobRun The updated JobRun (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobRunsPutJobRunCall(Integer jobRunID, BuildSystemSharedDTOJobRun buildSystemSharedDTOJobRun, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = buildSystemSharedDTOJobRun;

        // create path and map variables
        String localVarPath = "/api/v2/jobRuns/{jobRunID}"
            .replace("{" + "jobRunID" + "}", localVarApiClient.escapeString(jobRunID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobRunsPutJobRunValidateBeforeCall(Integer jobRunID, BuildSystemSharedDTOJobRun buildSystemSharedDTOJobRun, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobRunID' is set
        if (jobRunID == null) {
            throw new ApiException("Missing the required parameter 'jobRunID' when calling jobRunsPutJobRun(Async)");
        }

        // verify the required parameter 'buildSystemSharedDTOJobRun' is set
        if (buildSystemSharedDTOJobRun == null) {
            throw new ApiException("Missing the required parameter 'buildSystemSharedDTOJobRun' when calling jobRunsPutJobRun(Async)");
        }

        return jobRunsPutJobRunCall(jobRunID, buildSystemSharedDTOJobRun, _callback);

    }

    /**
     * Update a JobRun
     * ///               Updates a JobRun.  The body of the PUT is the updated JobRun.              When successful, the response is empty.  If unsuccessful, an appropriate ApiError is returned.
     * @param jobRunID The id of the JobRun to update (required)
     * @param buildSystemSharedDTOJobRun The updated JobRun (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public void jobRunsPutJobRun(Integer jobRunID, BuildSystemSharedDTOJobRun buildSystemSharedDTOJobRun) throws ApiException {
        jobRunsPutJobRunWithHttpInfo(jobRunID, buildSystemSharedDTOJobRun);
    }

    /**
     * Update a JobRun
     * ///               Updates a JobRun.  The body of the PUT is the updated JobRun.              When successful, the response is empty.  If unsuccessful, an appropriate ApiError is returned.
     * @param jobRunID The id of the JobRun to update (required)
     * @param buildSystemSharedDTOJobRun The updated JobRun (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> jobRunsPutJobRunWithHttpInfo(Integer jobRunID, BuildSystemSharedDTOJobRun buildSystemSharedDTOJobRun) throws ApiException {
        okhttp3.Call localVarCall = jobRunsPutJobRunValidateBeforeCall(jobRunID, buildSystemSharedDTOJobRun, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update a JobRun (asynchronously)
     * ///               Updates a JobRun.  The body of the PUT is the updated JobRun.              When successful, the response is empty.  If unsuccessful, an appropriate ApiError is returned.
     * @param jobRunID The id of the JobRun to update (required)
     * @param buildSystemSharedDTOJobRun The updated JobRun (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobRunsPutJobRunAsync(Integer jobRunID, BuildSystemSharedDTOJobRun buildSystemSharedDTOJobRun, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobRunsPutJobRunValidateBeforeCall(jobRunID, buildSystemSharedDTOJobRun, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
