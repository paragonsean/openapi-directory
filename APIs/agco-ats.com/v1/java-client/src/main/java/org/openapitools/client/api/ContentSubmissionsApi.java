/*
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.APIModelsApiError;
import org.openapitools.client.model.APIPagedResponseContentSubmissionSharedBusinessEntitiesContentSubmission;
import org.openapitools.client.model.APIPagedResponseContentSubmissionSharedBusinessEntitiesContentSubmissionAttribute;
import org.openapitools.client.model.BuildSystemSharedInterfacesIJobRun;
import org.openapitools.client.model.ContentSubmissionSharedBusinessEntitiesContentSubmission;
import org.openapitools.client.model.ContentSubmissionSharedBusinessEntitiesContentSubmissionAttribute;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ContentSubmissionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ContentSubmissionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ContentSubmissionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for contentSubmissionsDeleteContentSubmission
     * @param contentSubmissionID The ID of the ContentSubmission to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentSubmissionsDeleteContentSubmissionCall(Integer contentSubmissionID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/ContentSubmissions/{contentSubmissionID}"
            .replace("{" + "contentSubmissionID" + "}", localVarApiClient.escapeString(contentSubmissionID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contentSubmissionsDeleteContentSubmissionValidateBeforeCall(Integer contentSubmissionID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentSubmissionID' is set
        if (contentSubmissionID == null) {
            throw new ApiException("Missing the required parameter 'contentSubmissionID' when calling contentSubmissionsDeleteContentSubmission(Async)");
        }

        return contentSubmissionsDeleteContentSubmissionCall(contentSubmissionID, _callback);

    }

    /**
     * Delete a ContentSubmission
     * Deletes an ContentSubmission. When successful, the response is empty.  If unsuccessful, an appropriate              ApiError is returned.
     * @param contentSubmissionID The ID of the ContentSubmission to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public void contentSubmissionsDeleteContentSubmission(Integer contentSubmissionID) throws ApiException {
        contentSubmissionsDeleteContentSubmissionWithHttpInfo(contentSubmissionID);
    }

    /**
     * Delete a ContentSubmission
     * Deletes an ContentSubmission. When successful, the response is empty.  If unsuccessful, an appropriate              ApiError is returned.
     * @param contentSubmissionID The ID of the ContentSubmission to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> contentSubmissionsDeleteContentSubmissionWithHttpInfo(Integer contentSubmissionID) throws ApiException {
        okhttp3.Call localVarCall = contentSubmissionsDeleteContentSubmissionValidateBeforeCall(contentSubmissionID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a ContentSubmission (asynchronously)
     * Deletes an ContentSubmission. When successful, the response is empty.  If unsuccessful, an appropriate              ApiError is returned.
     * @param contentSubmissionID The ID of the ContentSubmission to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentSubmissionsDeleteContentSubmissionAsync(Integer contentSubmissionID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = contentSubmissionsDeleteContentSubmissionValidateBeforeCall(contentSubmissionID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for contentSubmissionsDeleteContentSubmissionAttribute
     * @param contentSubmissionAttributeID The ID of the Attribute to remove. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentSubmissionsDeleteContentSubmissionAttributeCall(Integer contentSubmissionAttributeID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/ContentSubmissionAttributes/{contentSubmissionAttributeID}"
            .replace("{" + "contentSubmissionAttributeID" + "}", localVarApiClient.escapeString(contentSubmissionAttributeID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contentSubmissionsDeleteContentSubmissionAttributeValidateBeforeCall(Integer contentSubmissionAttributeID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentSubmissionAttributeID' is set
        if (contentSubmissionAttributeID == null) {
            throw new ApiException("Missing the required parameter 'contentSubmissionAttributeID' when calling contentSubmissionsDeleteContentSubmissionAttribute(Async)");
        }

        return contentSubmissionsDeleteContentSubmissionAttributeCall(contentSubmissionAttributeID, _callback);

    }

    /**
     * Remove an Attribute from a ContentSubmission
     * No Documentation Found.
     * @param contentSubmissionAttributeID The ID of the Attribute to remove. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public void contentSubmissionsDeleteContentSubmissionAttribute(Integer contentSubmissionAttributeID) throws ApiException {
        contentSubmissionsDeleteContentSubmissionAttributeWithHttpInfo(contentSubmissionAttributeID);
    }

    /**
     * Remove an Attribute from a ContentSubmission
     * No Documentation Found.
     * @param contentSubmissionAttributeID The ID of the Attribute to remove. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> contentSubmissionsDeleteContentSubmissionAttributeWithHttpInfo(Integer contentSubmissionAttributeID) throws ApiException {
        okhttp3.Call localVarCall = contentSubmissionsDeleteContentSubmissionAttributeValidateBeforeCall(contentSubmissionAttributeID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove an Attribute from a ContentSubmission (asynchronously)
     * No Documentation Found.
     * @param contentSubmissionAttributeID The ID of the Attribute to remove. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentSubmissionsDeleteContentSubmissionAttributeAsync(Integer contentSubmissionAttributeID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = contentSubmissionsDeleteContentSubmissionAttributeValidateBeforeCall(contentSubmissionAttributeID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for contentSubmissionsGetContentSubmission
     * @param contentSubmissionID The ID of the ContentSubmission to get. (required)
     * @param includeAttributes Names of Attributes to include when retrieving this submission. This should be a comma-separated list. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentSubmissionsGetContentSubmissionCall(Integer contentSubmissionID, String includeAttributes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/ContentSubmissions/{contentSubmissionID}"
            .replace("{" + "contentSubmissionID" + "}", localVarApiClient.escapeString(contentSubmissionID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeAttributes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeAttributes", includeAttributes));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contentSubmissionsGetContentSubmissionValidateBeforeCall(Integer contentSubmissionID, String includeAttributes, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentSubmissionID' is set
        if (contentSubmissionID == null) {
            throw new ApiException("Missing the required parameter 'contentSubmissionID' when calling contentSubmissionsGetContentSubmission(Async)");
        }

        return contentSubmissionsGetContentSubmissionCall(contentSubmissionID, includeAttributes, _callback);

    }

    /**
     * Get a ContentSubmission by ID
     * Gets a ContentSubmission by ID. When successful, the response is the requested ContentSubmission.              If unsuccessful, an appropriate ApiError is returned.
     * @param contentSubmissionID The ID of the ContentSubmission to get. (required)
     * @param includeAttributes Names of Attributes to include when retrieving this submission. This should be a comma-separated list. (optional)
     * @return ContentSubmissionSharedBusinessEntitiesContentSubmission
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ContentSubmissionSharedBusinessEntitiesContentSubmission contentSubmissionsGetContentSubmission(Integer contentSubmissionID, String includeAttributes) throws ApiException {
        ApiResponse<ContentSubmissionSharedBusinessEntitiesContentSubmission> localVarResp = contentSubmissionsGetContentSubmissionWithHttpInfo(contentSubmissionID, includeAttributes);
        return localVarResp.getData();
    }

    /**
     * Get a ContentSubmission by ID
     * Gets a ContentSubmission by ID. When successful, the response is the requested ContentSubmission.              If unsuccessful, an appropriate ApiError is returned.
     * @param contentSubmissionID The ID of the ContentSubmission to get. (required)
     * @param includeAttributes Names of Attributes to include when retrieving this submission. This should be a comma-separated list. (optional)
     * @return ApiResponse&lt;ContentSubmissionSharedBusinessEntitiesContentSubmission&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContentSubmissionSharedBusinessEntitiesContentSubmission> contentSubmissionsGetContentSubmissionWithHttpInfo(Integer contentSubmissionID, String includeAttributes) throws ApiException {
        okhttp3.Call localVarCall = contentSubmissionsGetContentSubmissionValidateBeforeCall(contentSubmissionID, includeAttributes, null);
        Type localVarReturnType = new TypeToken<ContentSubmissionSharedBusinessEntitiesContentSubmission>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a ContentSubmission by ID (asynchronously)
     * Gets a ContentSubmission by ID. When successful, the response is the requested ContentSubmission.              If unsuccessful, an appropriate ApiError is returned.
     * @param contentSubmissionID The ID of the ContentSubmission to get. (required)
     * @param includeAttributes Names of Attributes to include when retrieving this submission. This should be a comma-separated list. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentSubmissionsGetContentSubmissionAsync(Integer contentSubmissionID, String includeAttributes, final ApiCallback<ContentSubmissionSharedBusinessEntitiesContentSubmission> _callback) throws ApiException {

        okhttp3.Call localVarCall = contentSubmissionsGetContentSubmissionValidateBeforeCall(contentSubmissionID, includeAttributes, _callback);
        Type localVarReturnType = new TypeToken<ContentSubmissionSharedBusinessEntitiesContentSubmission>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contentSubmissionsGetContentSubmissionAttributes
     * @param contentSubmissionID The ID of the ContentSubmission. (required)
     * @param limit Optional. The page limit.  If not specified, the default page limit is 10. (optional)
     * @param offset Optional. The page offset.  If not specified, the default page offset is 0. (optional)
     * @param name Optional. Filter the attributes by Name. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentSubmissionsGetContentSubmissionAttributesCall(Integer contentSubmissionID, Integer limit, Integer offset, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/ContentSubmissions/{contentSubmissionID}/Attributes"
            .replace("{" + "contentSubmissionID" + "}", localVarApiClient.escapeString(contentSubmissionID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contentSubmissionsGetContentSubmissionAttributesValidateBeforeCall(Integer contentSubmissionID, Integer limit, Integer offset, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentSubmissionID' is set
        if (contentSubmissionID == null) {
            throw new ApiException("Missing the required parameter 'contentSubmissionID' when calling contentSubmissionsGetContentSubmissionAttributes(Async)");
        }

        return contentSubmissionsGetContentSubmissionAttributesCall(contentSubmissionID, limit, offset, name, _callback);

    }

    /**
     * Get Attributes for a ContentSubmission
     * No Documentation Found.
     * @param contentSubmissionID The ID of the ContentSubmission. (required)
     * @param limit Optional. The page limit.  If not specified, the default page limit is 10. (optional)
     * @param offset Optional. The page offset.  If not specified, the default page offset is 0. (optional)
     * @param name Optional. Filter the attributes by Name. (optional)
     * @return APIPagedResponseContentSubmissionSharedBusinessEntitiesContentSubmissionAttribute
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public APIPagedResponseContentSubmissionSharedBusinessEntitiesContentSubmissionAttribute contentSubmissionsGetContentSubmissionAttributes(Integer contentSubmissionID, Integer limit, Integer offset, String name) throws ApiException {
        ApiResponse<APIPagedResponseContentSubmissionSharedBusinessEntitiesContentSubmissionAttribute> localVarResp = contentSubmissionsGetContentSubmissionAttributesWithHttpInfo(contentSubmissionID, limit, offset, name);
        return localVarResp.getData();
    }

    /**
     * Get Attributes for a ContentSubmission
     * No Documentation Found.
     * @param contentSubmissionID The ID of the ContentSubmission. (required)
     * @param limit Optional. The page limit.  If not specified, the default page limit is 10. (optional)
     * @param offset Optional. The page offset.  If not specified, the default page offset is 0. (optional)
     * @param name Optional. Filter the attributes by Name. (optional)
     * @return ApiResponse&lt;APIPagedResponseContentSubmissionSharedBusinessEntitiesContentSubmissionAttribute&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<APIPagedResponseContentSubmissionSharedBusinessEntitiesContentSubmissionAttribute> contentSubmissionsGetContentSubmissionAttributesWithHttpInfo(Integer contentSubmissionID, Integer limit, Integer offset, String name) throws ApiException {
        okhttp3.Call localVarCall = contentSubmissionsGetContentSubmissionAttributesValidateBeforeCall(contentSubmissionID, limit, offset, name, null);
        Type localVarReturnType = new TypeToken<APIPagedResponseContentSubmissionSharedBusinessEntitiesContentSubmissionAttribute>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Attributes for a ContentSubmission (asynchronously)
     * No Documentation Found.
     * @param contentSubmissionID The ID of the ContentSubmission. (required)
     * @param limit Optional. The page limit.  If not specified, the default page limit is 10. (optional)
     * @param offset Optional. The page offset.  If not specified, the default page offset is 0. (optional)
     * @param name Optional. Filter the attributes by Name. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentSubmissionsGetContentSubmissionAttributesAsync(Integer contentSubmissionID, Integer limit, Integer offset, String name, final ApiCallback<APIPagedResponseContentSubmissionSharedBusinessEntitiesContentSubmissionAttribute> _callback) throws ApiException {

        okhttp3.Call localVarCall = contentSubmissionsGetContentSubmissionAttributesValidateBeforeCall(contentSubmissionID, limit, offset, name, _callback);
        Type localVarReturnType = new TypeToken<APIPagedResponseContentSubmissionSharedBusinessEntitiesContentSubmissionAttribute>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contentSubmissionsGetContentSubmissionStatus
     * @param contentSubmissionID The ID of the ContentSubmission to get. (required)
     * @param includeActivityRunDetails True to include all status details if JobRun. Defaults to false (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentSubmissionsGetContentSubmissionStatusCall(Integer contentSubmissionID, Boolean includeActivityRunDetails, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/ContentSubmissions/{contentSubmissionID}/Status"
            .replace("{" + "contentSubmissionID" + "}", localVarApiClient.escapeString(contentSubmissionID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeActivityRunDetails != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeActivityRunDetails", includeActivityRunDetails));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contentSubmissionsGetContentSubmissionStatusValidateBeforeCall(Integer contentSubmissionID, Boolean includeActivityRunDetails, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentSubmissionID' is set
        if (contentSubmissionID == null) {
            throw new ApiException("Missing the required parameter 'contentSubmissionID' when calling contentSubmissionsGetContentSubmissionStatus(Async)");
        }

        return contentSubmissionsGetContentSubmissionStatusCall(contentSubmissionID, includeActivityRunDetails, _callback);

    }

    /**
     * Get the status of a ContentSubmission
     * No Documentation Found.
     * @param contentSubmissionID The ID of the ContentSubmission to get. (required)
     * @param includeActivityRunDetails True to include all status details if JobRun. Defaults to false (optional)
     * @return BuildSystemSharedInterfacesIJobRun
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public BuildSystemSharedInterfacesIJobRun contentSubmissionsGetContentSubmissionStatus(Integer contentSubmissionID, Boolean includeActivityRunDetails) throws ApiException {
        ApiResponse<BuildSystemSharedInterfacesIJobRun> localVarResp = contentSubmissionsGetContentSubmissionStatusWithHttpInfo(contentSubmissionID, includeActivityRunDetails);
        return localVarResp.getData();
    }

    /**
     * Get the status of a ContentSubmission
     * No Documentation Found.
     * @param contentSubmissionID The ID of the ContentSubmission to get. (required)
     * @param includeActivityRunDetails True to include all status details if JobRun. Defaults to false (optional)
     * @return ApiResponse&lt;BuildSystemSharedInterfacesIJobRun&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BuildSystemSharedInterfacesIJobRun> contentSubmissionsGetContentSubmissionStatusWithHttpInfo(Integer contentSubmissionID, Boolean includeActivityRunDetails) throws ApiException {
        okhttp3.Call localVarCall = contentSubmissionsGetContentSubmissionStatusValidateBeforeCall(contentSubmissionID, includeActivityRunDetails, null);
        Type localVarReturnType = new TypeToken<BuildSystemSharedInterfacesIJobRun>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the status of a ContentSubmission (asynchronously)
     * No Documentation Found.
     * @param contentSubmissionID The ID of the ContentSubmission to get. (required)
     * @param includeActivityRunDetails True to include all status details if JobRun. Defaults to false (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentSubmissionsGetContentSubmissionStatusAsync(Integer contentSubmissionID, Boolean includeActivityRunDetails, final ApiCallback<BuildSystemSharedInterfacesIJobRun> _callback) throws ApiException {

        okhttp3.Call localVarCall = contentSubmissionsGetContentSubmissionStatusValidateBeforeCall(contentSubmissionID, includeActivityRunDetails, _callback);
        Type localVarReturnType = new TypeToken<BuildSystemSharedInterfacesIJobRun>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contentSubmissionsGetContentSubmissions
     * @param limit Optional. The page limit.  If not specified, the default page limit is 10. (optional)
     * @param offset Optional. The page offset.  If not specified, the default page offset is 0. (optional)
     * @param userID Optional. Filter by UserID. (optional)
     * @param contentDefinitionID Optional. Filter by ContentDefinitionID (optional)
     * @param includeAttributes Names of Attributes to include when retrieving this submission. This should be a comma-separated list. If not provided, Attributes are not included. If &#39;*&#39;, all Attributes are included. (optional)
     * @param releaseID Optional. Filter the submissions by whether they are part of the Release with the specified Release ID. (optional)
     * @param typeID Optional. Filter submissions by their ContentDefinition&#39;s Type ID. (optional)
     * @param version Optional. Filter submissions by their Version. (optional)
     * @param includeDefinition Optional. If true, includes the ContentDefinition for each submission. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentSubmissionsGetContentSubmissionsCall(Integer limit, Integer offset, Integer userID, Integer contentDefinitionID, String includeAttributes, Integer releaseID, Integer typeID, Integer version, Boolean includeDefinition, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/ContentSubmissions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (userID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userID", userID));
        }

        if (contentDefinitionID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contentDefinitionID", contentDefinitionID));
        }

        if (includeAttributes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeAttributes", includeAttributes));
        }

        if (releaseID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("releaseID", releaseID));
        }

        if (typeID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("typeID", typeID));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        if (includeDefinition != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeDefinition", includeDefinition));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contentSubmissionsGetContentSubmissionsValidateBeforeCall(Integer limit, Integer offset, Integer userID, Integer contentDefinitionID, String includeAttributes, Integer releaseID, Integer typeID, Integer version, Boolean includeDefinition, final ApiCallback _callback) throws ApiException {
        return contentSubmissionsGetContentSubmissionsCall(limit, offset, userID, contentDefinitionID, includeAttributes, releaseID, typeID, version, includeDefinition, _callback);

    }

    /**
     * Get ContentSubmissions
     * Gets a collection of ContentSubmissions. When successful, the response is a PagedResponse of ContentSubmissions. Additional searches: attributes[Name]&#x3D;Value. This can be used to search for submissions that have the specified values for attributes. Beginning and ending wildcard (*) supported for value.              If unsuccessful, an appropriate ApiError is returned.
     * @param limit Optional. The page limit.  If not specified, the default page limit is 10. (optional)
     * @param offset Optional. The page offset.  If not specified, the default page offset is 0. (optional)
     * @param userID Optional. Filter by UserID. (optional)
     * @param contentDefinitionID Optional. Filter by ContentDefinitionID (optional)
     * @param includeAttributes Names of Attributes to include when retrieving this submission. This should be a comma-separated list. If not provided, Attributes are not included. If &#39;*&#39;, all Attributes are included. (optional)
     * @param releaseID Optional. Filter the submissions by whether they are part of the Release with the specified Release ID. (optional)
     * @param typeID Optional. Filter submissions by their ContentDefinition&#39;s Type ID. (optional)
     * @param version Optional. Filter submissions by their Version. (optional)
     * @param includeDefinition Optional. If true, includes the ContentDefinition for each submission. (optional)
     * @return APIPagedResponseContentSubmissionSharedBusinessEntitiesContentSubmission
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public APIPagedResponseContentSubmissionSharedBusinessEntitiesContentSubmission contentSubmissionsGetContentSubmissions(Integer limit, Integer offset, Integer userID, Integer contentDefinitionID, String includeAttributes, Integer releaseID, Integer typeID, Integer version, Boolean includeDefinition) throws ApiException {
        ApiResponse<APIPagedResponseContentSubmissionSharedBusinessEntitiesContentSubmission> localVarResp = contentSubmissionsGetContentSubmissionsWithHttpInfo(limit, offset, userID, contentDefinitionID, includeAttributes, releaseID, typeID, version, includeDefinition);
        return localVarResp.getData();
    }

    /**
     * Get ContentSubmissions
     * Gets a collection of ContentSubmissions. When successful, the response is a PagedResponse of ContentSubmissions. Additional searches: attributes[Name]&#x3D;Value. This can be used to search for submissions that have the specified values for attributes. Beginning and ending wildcard (*) supported for value.              If unsuccessful, an appropriate ApiError is returned.
     * @param limit Optional. The page limit.  If not specified, the default page limit is 10. (optional)
     * @param offset Optional. The page offset.  If not specified, the default page offset is 0. (optional)
     * @param userID Optional. Filter by UserID. (optional)
     * @param contentDefinitionID Optional. Filter by ContentDefinitionID (optional)
     * @param includeAttributes Names of Attributes to include when retrieving this submission. This should be a comma-separated list. If not provided, Attributes are not included. If &#39;*&#39;, all Attributes are included. (optional)
     * @param releaseID Optional. Filter the submissions by whether they are part of the Release with the specified Release ID. (optional)
     * @param typeID Optional. Filter submissions by their ContentDefinition&#39;s Type ID. (optional)
     * @param version Optional. Filter submissions by their Version. (optional)
     * @param includeDefinition Optional. If true, includes the ContentDefinition for each submission. (optional)
     * @return ApiResponse&lt;APIPagedResponseContentSubmissionSharedBusinessEntitiesContentSubmission&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<APIPagedResponseContentSubmissionSharedBusinessEntitiesContentSubmission> contentSubmissionsGetContentSubmissionsWithHttpInfo(Integer limit, Integer offset, Integer userID, Integer contentDefinitionID, String includeAttributes, Integer releaseID, Integer typeID, Integer version, Boolean includeDefinition) throws ApiException {
        okhttp3.Call localVarCall = contentSubmissionsGetContentSubmissionsValidateBeforeCall(limit, offset, userID, contentDefinitionID, includeAttributes, releaseID, typeID, version, includeDefinition, null);
        Type localVarReturnType = new TypeToken<APIPagedResponseContentSubmissionSharedBusinessEntitiesContentSubmission>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get ContentSubmissions (asynchronously)
     * Gets a collection of ContentSubmissions. When successful, the response is a PagedResponse of ContentSubmissions. Additional searches: attributes[Name]&#x3D;Value. This can be used to search for submissions that have the specified values for attributes. Beginning and ending wildcard (*) supported for value.              If unsuccessful, an appropriate ApiError is returned.
     * @param limit Optional. The page limit.  If not specified, the default page limit is 10. (optional)
     * @param offset Optional. The page offset.  If not specified, the default page offset is 0. (optional)
     * @param userID Optional. Filter by UserID. (optional)
     * @param contentDefinitionID Optional. Filter by ContentDefinitionID (optional)
     * @param includeAttributes Names of Attributes to include when retrieving this submission. This should be a comma-separated list. If not provided, Attributes are not included. If &#39;*&#39;, all Attributes are included. (optional)
     * @param releaseID Optional. Filter the submissions by whether they are part of the Release with the specified Release ID. (optional)
     * @param typeID Optional. Filter submissions by their ContentDefinition&#39;s Type ID. (optional)
     * @param version Optional. Filter submissions by their Version. (optional)
     * @param includeDefinition Optional. If true, includes the ContentDefinition for each submission. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentSubmissionsGetContentSubmissionsAsync(Integer limit, Integer offset, Integer userID, Integer contentDefinitionID, String includeAttributes, Integer releaseID, Integer typeID, Integer version, Boolean includeDefinition, final ApiCallback<APIPagedResponseContentSubmissionSharedBusinessEntitiesContentSubmission> _callback) throws ApiException {

        okhttp3.Call localVarCall = contentSubmissionsGetContentSubmissionsValidateBeforeCall(limit, offset, userID, contentDefinitionID, includeAttributes, releaseID, typeID, version, includeDefinition, _callback);
        Type localVarReturnType = new TypeToken<APIPagedResponseContentSubmissionSharedBusinessEntitiesContentSubmission>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contentSubmissionsPostContentSubmission
     * @param contentSubmissionSharedBusinessEntitiesContentSubmission The ContentSubmission to create. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentSubmissionsPostContentSubmissionCall(ContentSubmissionSharedBusinessEntitiesContentSubmission contentSubmissionSharedBusinessEntitiesContentSubmission, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contentSubmissionSharedBusinessEntitiesContentSubmission;

        // create path and map variables
        String localVarPath = "/api/v2/ContentSubmissions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contentSubmissionsPostContentSubmissionValidateBeforeCall(ContentSubmissionSharedBusinessEntitiesContentSubmission contentSubmissionSharedBusinessEntitiesContentSubmission, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentSubmissionSharedBusinessEntitiesContentSubmission' is set
        if (contentSubmissionSharedBusinessEntitiesContentSubmission == null) {
            throw new ApiException("Missing the required parameter 'contentSubmissionSharedBusinessEntitiesContentSubmission' when calling contentSubmissionsPostContentSubmission(Async)");
        }

        return contentSubmissionsPostContentSubmissionCall(contentSubmissionSharedBusinessEntitiesContentSubmission, _callback);

    }

    /**
     * Create a ContentSubmission
     * Creates a ContentSubmission.  The body of the POST is the ContentSubmission to create.              The ContentSubmissionID will be assigned on creation of the Job.  When successful, the response              is the ContentSubmissionID.  If unsuccessful, an appropriate ApiError is returned.
     * @param contentSubmissionSharedBusinessEntitiesContentSubmission The ContentSubmission to create. (required)
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public Integer contentSubmissionsPostContentSubmission(ContentSubmissionSharedBusinessEntitiesContentSubmission contentSubmissionSharedBusinessEntitiesContentSubmission) throws ApiException {
        ApiResponse<Integer> localVarResp = contentSubmissionsPostContentSubmissionWithHttpInfo(contentSubmissionSharedBusinessEntitiesContentSubmission);
        return localVarResp.getData();
    }

    /**
     * Create a ContentSubmission
     * Creates a ContentSubmission.  The body of the POST is the ContentSubmission to create.              The ContentSubmissionID will be assigned on creation of the Job.  When successful, the response              is the ContentSubmissionID.  If unsuccessful, an appropriate ApiError is returned.
     * @param contentSubmissionSharedBusinessEntitiesContentSubmission The ContentSubmission to create. (required)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Integer> contentSubmissionsPostContentSubmissionWithHttpInfo(ContentSubmissionSharedBusinessEntitiesContentSubmission contentSubmissionSharedBusinessEntitiesContentSubmission) throws ApiException {
        okhttp3.Call localVarCall = contentSubmissionsPostContentSubmissionValidateBeforeCall(contentSubmissionSharedBusinessEntitiesContentSubmission, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a ContentSubmission (asynchronously)
     * Creates a ContentSubmission.  The body of the POST is the ContentSubmission to create.              The ContentSubmissionID will be assigned on creation of the Job.  When successful, the response              is the ContentSubmissionID.  If unsuccessful, an appropriate ApiError is returned.
     * @param contentSubmissionSharedBusinessEntitiesContentSubmission The ContentSubmission to create. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentSubmissionsPostContentSubmissionAsync(ContentSubmissionSharedBusinessEntitiesContentSubmission contentSubmissionSharedBusinessEntitiesContentSubmission, final ApiCallback<Integer> _callback) throws ApiException {

        okhttp3.Call localVarCall = contentSubmissionsPostContentSubmissionValidateBeforeCall(contentSubmissionSharedBusinessEntitiesContentSubmission, _callback);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contentSubmissionsPostContentSubmissionAttribute
     * @param contentSubmissionID The ID of the ContentSubmission (required)
     * @param contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute The Attribute to add. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentSubmissionsPostContentSubmissionAttributeCall(Integer contentSubmissionID, ContentSubmissionSharedBusinessEntitiesContentSubmissionAttribute contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute;

        // create path and map variables
        String localVarPath = "/api/v2/ContentSubmissions/{contentSubmissionID}/Attributes"
            .replace("{" + "contentSubmissionID" + "}", localVarApiClient.escapeString(contentSubmissionID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contentSubmissionsPostContentSubmissionAttributeValidateBeforeCall(Integer contentSubmissionID, ContentSubmissionSharedBusinessEntitiesContentSubmissionAttribute contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentSubmissionID' is set
        if (contentSubmissionID == null) {
            throw new ApiException("Missing the required parameter 'contentSubmissionID' when calling contentSubmissionsPostContentSubmissionAttribute(Async)");
        }

        // verify the required parameter 'contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute' is set
        if (contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute == null) {
            throw new ApiException("Missing the required parameter 'contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute' when calling contentSubmissionsPostContentSubmissionAttribute(Async)");
        }

        return contentSubmissionsPostContentSubmissionAttributeCall(contentSubmissionID, contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute, _callback);

    }

    /**
     * Add an Attribute to a ContentSubmission
     * No Documentation Found.
     * @param contentSubmissionID The ID of the ContentSubmission (required)
     * @param contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute The Attribute to add. (required)
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public Integer contentSubmissionsPostContentSubmissionAttribute(Integer contentSubmissionID, ContentSubmissionSharedBusinessEntitiesContentSubmissionAttribute contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute) throws ApiException {
        ApiResponse<Integer> localVarResp = contentSubmissionsPostContentSubmissionAttributeWithHttpInfo(contentSubmissionID, contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute);
        return localVarResp.getData();
    }

    /**
     * Add an Attribute to a ContentSubmission
     * No Documentation Found.
     * @param contentSubmissionID The ID of the ContentSubmission (required)
     * @param contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute The Attribute to add. (required)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Integer> contentSubmissionsPostContentSubmissionAttributeWithHttpInfo(Integer contentSubmissionID, ContentSubmissionSharedBusinessEntitiesContentSubmissionAttribute contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute) throws ApiException {
        okhttp3.Call localVarCall = contentSubmissionsPostContentSubmissionAttributeValidateBeforeCall(contentSubmissionID, contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add an Attribute to a ContentSubmission (asynchronously)
     * No Documentation Found.
     * @param contentSubmissionID The ID of the ContentSubmission (required)
     * @param contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute The Attribute to add. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentSubmissionsPostContentSubmissionAttributeAsync(Integer contentSubmissionID, ContentSubmissionSharedBusinessEntitiesContentSubmissionAttribute contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute, final ApiCallback<Integer> _callback) throws ApiException {

        okhttp3.Call localVarCall = contentSubmissionsPostContentSubmissionAttributeValidateBeforeCall(contentSubmissionID, contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute, _callback);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contentSubmissionsPostContentSubmissionAttributes
     * @param contentSubmissionID  (required)
     * @param contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentSubmissionsPostContentSubmissionAttributesCall(Integer contentSubmissionID, List<ContentSubmissionSharedBusinessEntitiesContentSubmissionAttribute> contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute;

        // create path and map variables
        String localVarPath = "/api/v2/ContentSubmissions/{contentSubmissionID}/Attributes/Batch"
            .replace("{" + "contentSubmissionID" + "}", localVarApiClient.escapeString(contentSubmissionID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contentSubmissionsPostContentSubmissionAttributesValidateBeforeCall(Integer contentSubmissionID, List<ContentSubmissionSharedBusinessEntitiesContentSubmissionAttribute> contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentSubmissionID' is set
        if (contentSubmissionID == null) {
            throw new ApiException("Missing the required parameter 'contentSubmissionID' when calling contentSubmissionsPostContentSubmissionAttributes(Async)");
        }

        // verify the required parameter 'contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute' is set
        if (contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute == null) {
            throw new ApiException("Missing the required parameter 'contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute' when calling contentSubmissionsPostContentSubmissionAttributes(Async)");
        }

        return contentSubmissionsPostContentSubmissionAttributesCall(contentSubmissionID, contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute, _callback);

    }

    /**
     * No Documentation Found.
     * No Documentation Found.
     * @param contentSubmissionID  (required)
     * @param contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public void contentSubmissionsPostContentSubmissionAttributes(Integer contentSubmissionID, List<ContentSubmissionSharedBusinessEntitiesContentSubmissionAttribute> contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute) throws ApiException {
        contentSubmissionsPostContentSubmissionAttributesWithHttpInfo(contentSubmissionID, contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute);
    }

    /**
     * No Documentation Found.
     * No Documentation Found.
     * @param contentSubmissionID  (required)
     * @param contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> contentSubmissionsPostContentSubmissionAttributesWithHttpInfo(Integer contentSubmissionID, List<ContentSubmissionSharedBusinessEntitiesContentSubmissionAttribute> contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute) throws ApiException {
        okhttp3.Call localVarCall = contentSubmissionsPostContentSubmissionAttributesValidateBeforeCall(contentSubmissionID, contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * No Documentation Found. (asynchronously)
     * No Documentation Found.
     * @param contentSubmissionID  (required)
     * @param contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentSubmissionsPostContentSubmissionAttributesAsync(Integer contentSubmissionID, List<ContentSubmissionSharedBusinessEntitiesContentSubmissionAttribute> contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = contentSubmissionsPostContentSubmissionAttributesValidateBeforeCall(contentSubmissionID, contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for contentSubmissionsPutContentSubmission
     * @param contentSubmissionID The ID of the ContentSubmission to update (required)
     * @param contentSubmissionSharedBusinessEntitiesContentSubmission The updated ContentSubmission (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentSubmissionsPutContentSubmissionCall(Integer contentSubmissionID, ContentSubmissionSharedBusinessEntitiesContentSubmission contentSubmissionSharedBusinessEntitiesContentSubmission, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contentSubmissionSharedBusinessEntitiesContentSubmission;

        // create path and map variables
        String localVarPath = "/api/v2/ContentSubmissions/{contentSubmissionID}"
            .replace("{" + "contentSubmissionID" + "}", localVarApiClient.escapeString(contentSubmissionID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contentSubmissionsPutContentSubmissionValidateBeforeCall(Integer contentSubmissionID, ContentSubmissionSharedBusinessEntitiesContentSubmission contentSubmissionSharedBusinessEntitiesContentSubmission, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentSubmissionID' is set
        if (contentSubmissionID == null) {
            throw new ApiException("Missing the required parameter 'contentSubmissionID' when calling contentSubmissionsPutContentSubmission(Async)");
        }

        // verify the required parameter 'contentSubmissionSharedBusinessEntitiesContentSubmission' is set
        if (contentSubmissionSharedBusinessEntitiesContentSubmission == null) {
            throw new ApiException("Missing the required parameter 'contentSubmissionSharedBusinessEntitiesContentSubmission' when calling contentSubmissionsPutContentSubmission(Async)");
        }

        return contentSubmissionsPutContentSubmissionCall(contentSubmissionID, contentSubmissionSharedBusinessEntitiesContentSubmission, _callback);

    }

    /**
     * Update a ContentSubmission
     * Updates a ContentSubmission.  The body of the PUT is the updated ContentSubmission.                When successful, the response is empty.  If unsuccessful, an appropriate ApiError is returned.
     * @param contentSubmissionID The ID of the ContentSubmission to update (required)
     * @param contentSubmissionSharedBusinessEntitiesContentSubmission The updated ContentSubmission (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public void contentSubmissionsPutContentSubmission(Integer contentSubmissionID, ContentSubmissionSharedBusinessEntitiesContentSubmission contentSubmissionSharedBusinessEntitiesContentSubmission) throws ApiException {
        contentSubmissionsPutContentSubmissionWithHttpInfo(contentSubmissionID, contentSubmissionSharedBusinessEntitiesContentSubmission);
    }

    /**
     * Update a ContentSubmission
     * Updates a ContentSubmission.  The body of the PUT is the updated ContentSubmission.                When successful, the response is empty.  If unsuccessful, an appropriate ApiError is returned.
     * @param contentSubmissionID The ID of the ContentSubmission to update (required)
     * @param contentSubmissionSharedBusinessEntitiesContentSubmission The updated ContentSubmission (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> contentSubmissionsPutContentSubmissionWithHttpInfo(Integer contentSubmissionID, ContentSubmissionSharedBusinessEntitiesContentSubmission contentSubmissionSharedBusinessEntitiesContentSubmission) throws ApiException {
        okhttp3.Call localVarCall = contentSubmissionsPutContentSubmissionValidateBeforeCall(contentSubmissionID, contentSubmissionSharedBusinessEntitiesContentSubmission, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update a ContentSubmission (asynchronously)
     * Updates a ContentSubmission.  The body of the PUT is the updated ContentSubmission.                When successful, the response is empty.  If unsuccessful, an appropriate ApiError is returned.
     * @param contentSubmissionID The ID of the ContentSubmission to update (required)
     * @param contentSubmissionSharedBusinessEntitiesContentSubmission The updated ContentSubmission (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentSubmissionsPutContentSubmissionAsync(Integer contentSubmissionID, ContentSubmissionSharedBusinessEntitiesContentSubmission contentSubmissionSharedBusinessEntitiesContentSubmission, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = contentSubmissionsPutContentSubmissionValidateBeforeCall(contentSubmissionID, contentSubmissionSharedBusinessEntitiesContentSubmission, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for contentSubmissionsPutContentSubmissionAttributeAsync
     * @param contentSubmissionAttributeID The ID of the Attribute to update. (required)
     * @param contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute The Attribute to update. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentSubmissionsPutContentSubmissionAttributeAsyncCall(Integer contentSubmissionAttributeID, ContentSubmissionSharedBusinessEntitiesContentSubmissionAttribute contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute;

        // create path and map variables
        String localVarPath = "/api/v2/ContentSubmissionAttributes/{contentSubmissionAttributeID}"
            .replace("{" + "contentSubmissionAttributeID" + "}", localVarApiClient.escapeString(contentSubmissionAttributeID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contentSubmissionsPutContentSubmissionAttributeAsyncValidateBeforeCall(Integer contentSubmissionAttributeID, ContentSubmissionSharedBusinessEntitiesContentSubmissionAttribute contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentSubmissionAttributeID' is set
        if (contentSubmissionAttributeID == null) {
            throw new ApiException("Missing the required parameter 'contentSubmissionAttributeID' when calling contentSubmissionsPutContentSubmissionAttributeAsync(Async)");
        }

        // verify the required parameter 'contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute' is set
        if (contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute == null) {
            throw new ApiException("Missing the required parameter 'contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute' when calling contentSubmissionsPutContentSubmissionAttributeAsync(Async)");
        }

        return contentSubmissionsPutContentSubmissionAttributeAsyncCall(contentSubmissionAttributeID, contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute, _callback);

    }

    /**
     * Update an Attribute for a ContentSubmission
     * No Documentation Found.
     * @param contentSubmissionAttributeID The ID of the Attribute to update. (required)
     * @param contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute The Attribute to update. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public void contentSubmissionsPutContentSubmissionAttributeAsync(Integer contentSubmissionAttributeID, ContentSubmissionSharedBusinessEntitiesContentSubmissionAttribute contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute) throws ApiException {
        contentSubmissionsPutContentSubmissionAttributeAsyncWithHttpInfo(contentSubmissionAttributeID, contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute);
    }

    /**
     * Update an Attribute for a ContentSubmission
     * No Documentation Found.
     * @param contentSubmissionAttributeID The ID of the Attribute to update. (required)
     * @param contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute The Attribute to update. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> contentSubmissionsPutContentSubmissionAttributeAsyncWithHttpInfo(Integer contentSubmissionAttributeID, ContentSubmissionSharedBusinessEntitiesContentSubmissionAttribute contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute) throws ApiException {
        okhttp3.Call localVarCall = contentSubmissionsPutContentSubmissionAttributeAsyncValidateBeforeCall(contentSubmissionAttributeID, contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update an Attribute for a ContentSubmission (asynchronously)
     * No Documentation Found.
     * @param contentSubmissionAttributeID The ID of the Attribute to update. (required)
     * @param contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute The Attribute to update. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentSubmissionsPutContentSubmissionAttributeAsyncAsync(Integer contentSubmissionAttributeID, ContentSubmissionSharedBusinessEntitiesContentSubmissionAttribute contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = contentSubmissionsPutContentSubmissionAttributeAsyncValidateBeforeCall(contentSubmissionAttributeID, contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for contentSubmissionsPutContentSubmissionAttributes
     * @param contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentSubmissionsPutContentSubmissionAttributesCall(List<ContentSubmissionSharedBusinessEntitiesContentSubmissionAttribute> contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute;

        // create path and map variables
        String localVarPath = "/api/v2/ContentSubmissionAttributes/Batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contentSubmissionsPutContentSubmissionAttributesValidateBeforeCall(List<ContentSubmissionSharedBusinessEntitiesContentSubmissionAttribute> contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute' is set
        if (contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute == null) {
            throw new ApiException("Missing the required parameter 'contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute' when calling contentSubmissionsPutContentSubmissionAttributes(Async)");
        }

        return contentSubmissionsPutContentSubmissionAttributesCall(contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute, _callback);

    }

    /**
     * No Documentation Found.
     * No Documentation Found.
     * @param contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public void contentSubmissionsPutContentSubmissionAttributes(List<ContentSubmissionSharedBusinessEntitiesContentSubmissionAttribute> contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute) throws ApiException {
        contentSubmissionsPutContentSubmissionAttributesWithHttpInfo(contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute);
    }

    /**
     * No Documentation Found.
     * No Documentation Found.
     * @param contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> contentSubmissionsPutContentSubmissionAttributesWithHttpInfo(List<ContentSubmissionSharedBusinessEntitiesContentSubmissionAttribute> contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute) throws ApiException {
        okhttp3.Call localVarCall = contentSubmissionsPutContentSubmissionAttributesValidateBeforeCall(contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * No Documentation Found. (asynchronously)
     * No Documentation Found.
     * @param contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentSubmissionsPutContentSubmissionAttributesAsync(List<ContentSubmissionSharedBusinessEntitiesContentSubmissionAttribute> contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = contentSubmissionsPutContentSubmissionAttributesValidateBeforeCall(contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
