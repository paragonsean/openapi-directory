/*
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateSystemModelsPackageTypeIDtoBundle
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:35.511967-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateSystemModelsPackageTypeIDtoBundle {
  public static final String SERIALIZED_NAME_BUNDLE_I_D = "BundleID";
  @SerializedName(SERIALIZED_NAME_BUNDLE_I_D)
  private String bundleID;

  public static final String SERIALIZED_NAME_PACKAGE_TYPE_I_D = "PackageTypeID";
  @SerializedName(SERIALIZED_NAME_PACKAGE_TYPE_I_D)
  private String packageTypeID;

  public static final String SERIALIZED_NAME_PACKAGE_VERSION = "PackageVersion";
  @SerializedName(SERIALIZED_NAME_PACKAGE_VERSION)
  private Integer packageVersion;

  public static final String SERIALIZED_NAME_PRIORITY = "Priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private Integer priority;

  /**
   * Optional. The type of subscription supported.  The default subscription type is Required.
   */
  @JsonAdapter(SubscriptionTypeEnum.Adapter.class)
  public enum SubscriptionTypeEnum {
    REQUIRED("Required"),
    
    INCLUDE_BY_DEFAULT("IncludeByDefault"),
    
    EXCLUDE_BY_DEFAULT("ExcludeByDefault");

    private String value;

    SubscriptionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SubscriptionTypeEnum fromValue(String value) {
      for (SubscriptionTypeEnum b : SubscriptionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SubscriptionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SubscriptionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SubscriptionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SubscriptionTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SubscriptionTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SUBSCRIPTION_TYPE = "SubscriptionType";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_TYPE)
  private SubscriptionTypeEnum subscriptionType;

  public UpdateSystemModelsPackageTypeIDtoBundle() {
  }

  public UpdateSystemModelsPackageTypeIDtoBundle bundleID(String bundleID) {
    this.bundleID = bundleID;
    return this;
  }

  /**
   * The bundle to include the package in.
   * @return bundleID
   */
  @javax.annotation.Nonnull
  public String getBundleID() {
    return bundleID;
  }

  public void setBundleID(String bundleID) {
    this.bundleID = bundleID;
  }


  public UpdateSystemModelsPackageTypeIDtoBundle packageTypeID(String packageTypeID) {
    this.packageTypeID = packageTypeID;
    return this;
  }

  /**
   * The package type id of the package to include
   * @return packageTypeID
   */
  @javax.annotation.Nonnull
  public String getPackageTypeID() {
    return packageTypeID;
  }

  public void setPackageTypeID(String packageTypeID) {
    this.packageTypeID = packageTypeID;
  }


  public UpdateSystemModelsPackageTypeIDtoBundle packageVersion(Integer packageVersion) {
    this.packageVersion = packageVersion;
    return this;
  }

  /**
   * The package version of the package to include
   * @return packageVersion
   */
  @javax.annotation.Nonnull
  public Integer getPackageVersion() {
    return packageVersion;
  }

  public void setPackageVersion(Integer packageVersion) {
    this.packageVersion = packageVersion;
  }


  public UpdateSystemModelsPackageTypeIDtoBundle priority(Integer priority) {
    this.priority = priority;
    return this;
  }

  /**
   * The execution priority of the package relative to other packages in the bundle. Range 1 - 100, lower value indication higher priority.
   * minimum: 1
   * maximum: 100
   * @return priority
   */
  @javax.annotation.Nonnull
  public Integer getPriority() {
    return priority;
  }

  public void setPriority(Integer priority) {
    this.priority = priority;
  }


  public UpdateSystemModelsPackageTypeIDtoBundle subscriptionType(SubscriptionTypeEnum subscriptionType) {
    this.subscriptionType = subscriptionType;
    return this;
  }

  /**
   * Optional. The type of subscription supported.  The default subscription type is Required.
   * @return subscriptionType
   */
  @javax.annotation.Nullable
  public SubscriptionTypeEnum getSubscriptionType() {
    return subscriptionType;
  }

  public void setSubscriptionType(SubscriptionTypeEnum subscriptionType) {
    this.subscriptionType = subscriptionType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateSystemModelsPackageTypeIDtoBundle updateSystemModelsPackageTypeIDtoBundle = (UpdateSystemModelsPackageTypeIDtoBundle) o;
    return Objects.equals(this.bundleID, updateSystemModelsPackageTypeIDtoBundle.bundleID) &&
        Objects.equals(this.packageTypeID, updateSystemModelsPackageTypeIDtoBundle.packageTypeID) &&
        Objects.equals(this.packageVersion, updateSystemModelsPackageTypeIDtoBundle.packageVersion) &&
        Objects.equals(this.priority, updateSystemModelsPackageTypeIDtoBundle.priority) &&
        Objects.equals(this.subscriptionType, updateSystemModelsPackageTypeIDtoBundle.subscriptionType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bundleID, packageTypeID, packageVersion, priority, subscriptionType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateSystemModelsPackageTypeIDtoBundle {\n");
    sb.append("    bundleID: ").append(toIndentedString(bundleID)).append("\n");
    sb.append("    packageTypeID: ").append(toIndentedString(packageTypeID)).append("\n");
    sb.append("    packageVersion: ").append(toIndentedString(packageVersion)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    subscriptionType: ").append(toIndentedString(subscriptionType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("BundleID");
    openapiFields.add("PackageTypeID");
    openapiFields.add("PackageVersion");
    openapiFields.add("Priority");
    openapiFields.add("SubscriptionType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("BundleID");
    openapiRequiredFields.add("PackageTypeID");
    openapiRequiredFields.add("PackageVersion");
    openapiRequiredFields.add("Priority");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateSystemModelsPackageTypeIDtoBundle
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateSystemModelsPackageTypeIDtoBundle.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateSystemModelsPackageTypeIDtoBundle is not found in the empty JSON string", UpdateSystemModelsPackageTypeIDtoBundle.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateSystemModelsPackageTypeIDtoBundle.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateSystemModelsPackageTypeIDtoBundle` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateSystemModelsPackageTypeIDtoBundle.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("BundleID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BundleID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BundleID").toString()));
      }
      if (!jsonObj.get("PackageTypeID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PackageTypeID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PackageTypeID").toString()));
      }
      if ((jsonObj.get("SubscriptionType") != null && !jsonObj.get("SubscriptionType").isJsonNull()) && !jsonObj.get("SubscriptionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SubscriptionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SubscriptionType").toString()));
      }
      // validate the optional field `SubscriptionType`
      if (jsonObj.get("SubscriptionType") != null && !jsonObj.get("SubscriptionType").isJsonNull()) {
        SubscriptionTypeEnum.validateJsonElement(jsonObj.get("SubscriptionType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateSystemModelsPackageTypeIDtoBundle.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateSystemModelsPackageTypeIDtoBundle' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateSystemModelsPackageTypeIDtoBundle> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateSystemModelsPackageTypeIDtoBundle.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateSystemModelsPackageTypeIDtoBundle>() {
           @Override
           public void write(JsonWriter out, UpdateSystemModelsPackageTypeIDtoBundle value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateSystemModelsPackageTypeIDtoBundle read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateSystemModelsPackageTypeIDtoBundle given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateSystemModelsPackageTypeIDtoBundle
   * @throws IOException if the JSON string is invalid with respect to UpdateSystemModelsPackageTypeIDtoBundle
   */
  public static UpdateSystemModelsPackageTypeIDtoBundle fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateSystemModelsPackageTypeIDtoBundle.class);
  }

  /**
   * Convert an instance of UpdateSystemModelsPackageTypeIDtoBundle to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

