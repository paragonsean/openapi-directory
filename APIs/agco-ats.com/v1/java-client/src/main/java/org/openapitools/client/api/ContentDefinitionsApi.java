/*
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.APIModelsApiError;
import org.openapitools.client.model.APIPagedResponseContentSubmissionSharedBusinessEntitiesContentDefinition;
import org.openapitools.client.model.APIPagedResponseContentSubmissionSharedBusinessEntitiesContentDefinitionAttribute;
import org.openapitools.client.model.ContentSubmissionSharedBusinessEntitiesContentDefinition;
import org.openapitools.client.model.ContentSubmissionSharedBusinessEntitiesContentDefinitionAttribute;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ContentDefinitionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ContentDefinitionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ContentDefinitionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for contentDefinitionsDeleteContentDefinition
     * @param contentDefinitionID The ID of the ContentDefinition to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentDefinitionsDeleteContentDefinitionCall(Integer contentDefinitionID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/ContentDefinitions/{contentDefinitionID}"
            .replace("{" + "contentDefinitionID" + "}", localVarApiClient.escapeString(contentDefinitionID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contentDefinitionsDeleteContentDefinitionValidateBeforeCall(Integer contentDefinitionID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentDefinitionID' is set
        if (contentDefinitionID == null) {
            throw new ApiException("Missing the required parameter 'contentDefinitionID' when calling contentDefinitionsDeleteContentDefinition(Async)");
        }

        return contentDefinitionsDeleteContentDefinitionCall(contentDefinitionID, _callback);

    }

    /**
     * Delete a ContentDefinition
     * Deletes an ContentDefinition. When successful, the response is empty.  If unsuccessful, an appropriate              ApiError is returned.
     * @param contentDefinitionID The ID of the ContentDefinition to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public void contentDefinitionsDeleteContentDefinition(Integer contentDefinitionID) throws ApiException {
        contentDefinitionsDeleteContentDefinitionWithHttpInfo(contentDefinitionID);
    }

    /**
     * Delete a ContentDefinition
     * Deletes an ContentDefinition. When successful, the response is empty.  If unsuccessful, an appropriate              ApiError is returned.
     * @param contentDefinitionID The ID of the ContentDefinition to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> contentDefinitionsDeleteContentDefinitionWithHttpInfo(Integer contentDefinitionID) throws ApiException {
        okhttp3.Call localVarCall = contentDefinitionsDeleteContentDefinitionValidateBeforeCall(contentDefinitionID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a ContentDefinition (asynchronously)
     * Deletes an ContentDefinition. When successful, the response is empty.  If unsuccessful, an appropriate              ApiError is returned.
     * @param contentDefinitionID The ID of the ContentDefinition to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentDefinitionsDeleteContentDefinitionAsync(Integer contentDefinitionID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = contentDefinitionsDeleteContentDefinitionValidateBeforeCall(contentDefinitionID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for contentDefinitionsDeleteContentDefinitionAttribute
     * @param contentDefinitionAttributeID The ID of the Attribute to remove. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentDefinitionsDeleteContentDefinitionAttributeCall(Integer contentDefinitionAttributeID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/ContentDefinitionAttributes/{contentDefinitionAttributeID}"
            .replace("{" + "contentDefinitionAttributeID" + "}", localVarApiClient.escapeString(contentDefinitionAttributeID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contentDefinitionsDeleteContentDefinitionAttributeValidateBeforeCall(Integer contentDefinitionAttributeID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentDefinitionAttributeID' is set
        if (contentDefinitionAttributeID == null) {
            throw new ApiException("Missing the required parameter 'contentDefinitionAttributeID' when calling contentDefinitionsDeleteContentDefinitionAttribute(Async)");
        }

        return contentDefinitionsDeleteContentDefinitionAttributeCall(contentDefinitionAttributeID, _callback);

    }

    /**
     * Remove an Attribute from a ContentDefinition
     * No Documentation Found.
     * @param contentDefinitionAttributeID The ID of the Attribute to remove. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public void contentDefinitionsDeleteContentDefinitionAttribute(Integer contentDefinitionAttributeID) throws ApiException {
        contentDefinitionsDeleteContentDefinitionAttributeWithHttpInfo(contentDefinitionAttributeID);
    }

    /**
     * Remove an Attribute from a ContentDefinition
     * No Documentation Found.
     * @param contentDefinitionAttributeID The ID of the Attribute to remove. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> contentDefinitionsDeleteContentDefinitionAttributeWithHttpInfo(Integer contentDefinitionAttributeID) throws ApiException {
        okhttp3.Call localVarCall = contentDefinitionsDeleteContentDefinitionAttributeValidateBeforeCall(contentDefinitionAttributeID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove an Attribute from a ContentDefinition (asynchronously)
     * No Documentation Found.
     * @param contentDefinitionAttributeID The ID of the Attribute to remove. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentDefinitionsDeleteContentDefinitionAttributeAsync(Integer contentDefinitionAttributeID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = contentDefinitionsDeleteContentDefinitionAttributeValidateBeforeCall(contentDefinitionAttributeID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for contentDefinitionsGetContentDefinition
     * @param contentDefinitionID The ID of the ContentDefinition to get. (required)
     * @param includeAttributes Names of Attributes to include when retrieving this definition. This should be a comma-separated list. If not provided, Attributes are not included. If &#39;*&#39;, all Attributes are included. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentDefinitionsGetContentDefinitionCall(Integer contentDefinitionID, String includeAttributes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/ContentDefinitions/{contentDefinitionID}"
            .replace("{" + "contentDefinitionID" + "}", localVarApiClient.escapeString(contentDefinitionID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeAttributes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeAttributes", includeAttributes));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contentDefinitionsGetContentDefinitionValidateBeforeCall(Integer contentDefinitionID, String includeAttributes, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentDefinitionID' is set
        if (contentDefinitionID == null) {
            throw new ApiException("Missing the required parameter 'contentDefinitionID' when calling contentDefinitionsGetContentDefinition(Async)");
        }

        return contentDefinitionsGetContentDefinitionCall(contentDefinitionID, includeAttributes, _callback);

    }

    /**
     * Get a ContentDefinition by ID
     * Gets a ContentDefinition by ID. When successful, the response is the requested ContentDefinition.              If unsuccessful, an appropriate ApiError is returned.
     * @param contentDefinitionID The ID of the ContentDefinition to get. (required)
     * @param includeAttributes Names of Attributes to include when retrieving this definition. This should be a comma-separated list. If not provided, Attributes are not included. If &#39;*&#39;, all Attributes are included. (optional)
     * @return ContentSubmissionSharedBusinessEntitiesContentDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ContentSubmissionSharedBusinessEntitiesContentDefinition contentDefinitionsGetContentDefinition(Integer contentDefinitionID, String includeAttributes) throws ApiException {
        ApiResponse<ContentSubmissionSharedBusinessEntitiesContentDefinition> localVarResp = contentDefinitionsGetContentDefinitionWithHttpInfo(contentDefinitionID, includeAttributes);
        return localVarResp.getData();
    }

    /**
     * Get a ContentDefinition by ID
     * Gets a ContentDefinition by ID. When successful, the response is the requested ContentDefinition.              If unsuccessful, an appropriate ApiError is returned.
     * @param contentDefinitionID The ID of the ContentDefinition to get. (required)
     * @param includeAttributes Names of Attributes to include when retrieving this definition. This should be a comma-separated list. If not provided, Attributes are not included. If &#39;*&#39;, all Attributes are included. (optional)
     * @return ApiResponse&lt;ContentSubmissionSharedBusinessEntitiesContentDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContentSubmissionSharedBusinessEntitiesContentDefinition> contentDefinitionsGetContentDefinitionWithHttpInfo(Integer contentDefinitionID, String includeAttributes) throws ApiException {
        okhttp3.Call localVarCall = contentDefinitionsGetContentDefinitionValidateBeforeCall(contentDefinitionID, includeAttributes, null);
        Type localVarReturnType = new TypeToken<ContentSubmissionSharedBusinessEntitiesContentDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a ContentDefinition by ID (asynchronously)
     * Gets a ContentDefinition by ID. When successful, the response is the requested ContentDefinition.              If unsuccessful, an appropriate ApiError is returned.
     * @param contentDefinitionID The ID of the ContentDefinition to get. (required)
     * @param includeAttributes Names of Attributes to include when retrieving this definition. This should be a comma-separated list. If not provided, Attributes are not included. If &#39;*&#39;, all Attributes are included. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentDefinitionsGetContentDefinitionAsync(Integer contentDefinitionID, String includeAttributes, final ApiCallback<ContentSubmissionSharedBusinessEntitiesContentDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = contentDefinitionsGetContentDefinitionValidateBeforeCall(contentDefinitionID, includeAttributes, _callback);
        Type localVarReturnType = new TypeToken<ContentSubmissionSharedBusinessEntitiesContentDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contentDefinitionsGetContentDefinitionAttributes
     * @param contentDefinitionID The ID of the ContentDefinition. (required)
     * @param limit Optional. The page limit.  If not specified, the default page limit is 10. (optional)
     * @param offset Optional. The page offset.  If not specified, the default page offset is 0. (optional)
     * @param name Optional. Filter the attributes by Name. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentDefinitionsGetContentDefinitionAttributesCall(Integer contentDefinitionID, Integer limit, Integer offset, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/ContentDefinitions/{contentDefinitionID}/Attributes"
            .replace("{" + "contentDefinitionID" + "}", localVarApiClient.escapeString(contentDefinitionID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contentDefinitionsGetContentDefinitionAttributesValidateBeforeCall(Integer contentDefinitionID, Integer limit, Integer offset, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentDefinitionID' is set
        if (contentDefinitionID == null) {
            throw new ApiException("Missing the required parameter 'contentDefinitionID' when calling contentDefinitionsGetContentDefinitionAttributes(Async)");
        }

        return contentDefinitionsGetContentDefinitionAttributesCall(contentDefinitionID, limit, offset, name, _callback);

    }

    /**
     * Get Attributes for a ContentDefinition
     * No Documentation Found.
     * @param contentDefinitionID The ID of the ContentDefinition. (required)
     * @param limit Optional. The page limit.  If not specified, the default page limit is 10. (optional)
     * @param offset Optional. The page offset.  If not specified, the default page offset is 0. (optional)
     * @param name Optional. Filter the attributes by Name. (optional)
     * @return APIPagedResponseContentSubmissionSharedBusinessEntitiesContentDefinitionAttribute
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public APIPagedResponseContentSubmissionSharedBusinessEntitiesContentDefinitionAttribute contentDefinitionsGetContentDefinitionAttributes(Integer contentDefinitionID, Integer limit, Integer offset, String name) throws ApiException {
        ApiResponse<APIPagedResponseContentSubmissionSharedBusinessEntitiesContentDefinitionAttribute> localVarResp = contentDefinitionsGetContentDefinitionAttributesWithHttpInfo(contentDefinitionID, limit, offset, name);
        return localVarResp.getData();
    }

    /**
     * Get Attributes for a ContentDefinition
     * No Documentation Found.
     * @param contentDefinitionID The ID of the ContentDefinition. (required)
     * @param limit Optional. The page limit.  If not specified, the default page limit is 10. (optional)
     * @param offset Optional. The page offset.  If not specified, the default page offset is 0. (optional)
     * @param name Optional. Filter the attributes by Name. (optional)
     * @return ApiResponse&lt;APIPagedResponseContentSubmissionSharedBusinessEntitiesContentDefinitionAttribute&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<APIPagedResponseContentSubmissionSharedBusinessEntitiesContentDefinitionAttribute> contentDefinitionsGetContentDefinitionAttributesWithHttpInfo(Integer contentDefinitionID, Integer limit, Integer offset, String name) throws ApiException {
        okhttp3.Call localVarCall = contentDefinitionsGetContentDefinitionAttributesValidateBeforeCall(contentDefinitionID, limit, offset, name, null);
        Type localVarReturnType = new TypeToken<APIPagedResponseContentSubmissionSharedBusinessEntitiesContentDefinitionAttribute>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Attributes for a ContentDefinition (asynchronously)
     * No Documentation Found.
     * @param contentDefinitionID The ID of the ContentDefinition. (required)
     * @param limit Optional. The page limit.  If not specified, the default page limit is 10. (optional)
     * @param offset Optional. The page offset.  If not specified, the default page offset is 0. (optional)
     * @param name Optional. Filter the attributes by Name. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentDefinitionsGetContentDefinitionAttributesAsync(Integer contentDefinitionID, Integer limit, Integer offset, String name, final ApiCallback<APIPagedResponseContentSubmissionSharedBusinessEntitiesContentDefinitionAttribute> _callback) throws ApiException {

        okhttp3.Call localVarCall = contentDefinitionsGetContentDefinitionAttributesValidateBeforeCall(contentDefinitionID, limit, offset, name, _callback);
        Type localVarReturnType = new TypeToken<APIPagedResponseContentSubmissionSharedBusinessEntitiesContentDefinitionAttribute>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contentDefinitionsGetContentDefinitions
     * @param limit Optional. The page limit.  If not specified, the default page limit is 10. (optional)
     * @param offset Optional. The page offset.  If not specified, the default page offset is 0. (optional)
     * @param userID Optional. Filter by UserID. (optional)
     * @param includeAttributes Names of Attributes to include when retrieving this definition. This should be a comma-separated list. If not provided, Attributes are not included. If &#39;*&#39;, all Attributes are included. (optional)
     * @param name Optional. Filter by Name. Supports beginning and ending wildcard (*). (optional)
     * @param typeID Optional. Filter by TypeID. (optional)
     * @param packageTypeID Optional. Filter by PackageTypeID. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentDefinitionsGetContentDefinitionsCall(Integer limit, Integer offset, Integer userID, String includeAttributes, String name, Integer typeID, String packageTypeID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/ContentDefinitions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (userID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userID", userID));
        }

        if (includeAttributes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeAttributes", includeAttributes));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (typeID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("typeID", typeID));
        }

        if (packageTypeID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("packageTypeID", packageTypeID));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contentDefinitionsGetContentDefinitionsValidateBeforeCall(Integer limit, Integer offset, Integer userID, String includeAttributes, String name, Integer typeID, String packageTypeID, final ApiCallback _callback) throws ApiException {
        return contentDefinitionsGetContentDefinitionsCall(limit, offset, userID, includeAttributes, name, typeID, packageTypeID, _callback);

    }

    /**
     * Get ContentDefinitions
     * Gets a collection of ContentDefinitions. When successful, the response is a PagedResponse of ContentDefinitions.              If unsuccessful, an appropriate ApiError is returned.
     * @param limit Optional. The page limit.  If not specified, the default page limit is 10. (optional)
     * @param offset Optional. The page offset.  If not specified, the default page offset is 0. (optional)
     * @param userID Optional. Filter by UserID. (optional)
     * @param includeAttributes Names of Attributes to include when retrieving this definition. This should be a comma-separated list. If not provided, Attributes are not included. If &#39;*&#39;, all Attributes are included. (optional)
     * @param name Optional. Filter by Name. Supports beginning and ending wildcard (*). (optional)
     * @param typeID Optional. Filter by TypeID. (optional)
     * @param packageTypeID Optional. Filter by PackageTypeID. (optional)
     * @return APIPagedResponseContentSubmissionSharedBusinessEntitiesContentDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public APIPagedResponseContentSubmissionSharedBusinessEntitiesContentDefinition contentDefinitionsGetContentDefinitions(Integer limit, Integer offset, Integer userID, String includeAttributes, String name, Integer typeID, String packageTypeID) throws ApiException {
        ApiResponse<APIPagedResponseContentSubmissionSharedBusinessEntitiesContentDefinition> localVarResp = contentDefinitionsGetContentDefinitionsWithHttpInfo(limit, offset, userID, includeAttributes, name, typeID, packageTypeID);
        return localVarResp.getData();
    }

    /**
     * Get ContentDefinitions
     * Gets a collection of ContentDefinitions. When successful, the response is a PagedResponse of ContentDefinitions.              If unsuccessful, an appropriate ApiError is returned.
     * @param limit Optional. The page limit.  If not specified, the default page limit is 10. (optional)
     * @param offset Optional. The page offset.  If not specified, the default page offset is 0. (optional)
     * @param userID Optional. Filter by UserID. (optional)
     * @param includeAttributes Names of Attributes to include when retrieving this definition. This should be a comma-separated list. If not provided, Attributes are not included. If &#39;*&#39;, all Attributes are included. (optional)
     * @param name Optional. Filter by Name. Supports beginning and ending wildcard (*). (optional)
     * @param typeID Optional. Filter by TypeID. (optional)
     * @param packageTypeID Optional. Filter by PackageTypeID. (optional)
     * @return ApiResponse&lt;APIPagedResponseContentSubmissionSharedBusinessEntitiesContentDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<APIPagedResponseContentSubmissionSharedBusinessEntitiesContentDefinition> contentDefinitionsGetContentDefinitionsWithHttpInfo(Integer limit, Integer offset, Integer userID, String includeAttributes, String name, Integer typeID, String packageTypeID) throws ApiException {
        okhttp3.Call localVarCall = contentDefinitionsGetContentDefinitionsValidateBeforeCall(limit, offset, userID, includeAttributes, name, typeID, packageTypeID, null);
        Type localVarReturnType = new TypeToken<APIPagedResponseContentSubmissionSharedBusinessEntitiesContentDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get ContentDefinitions (asynchronously)
     * Gets a collection of ContentDefinitions. When successful, the response is a PagedResponse of ContentDefinitions.              If unsuccessful, an appropriate ApiError is returned.
     * @param limit Optional. The page limit.  If not specified, the default page limit is 10. (optional)
     * @param offset Optional. The page offset.  If not specified, the default page offset is 0. (optional)
     * @param userID Optional. Filter by UserID. (optional)
     * @param includeAttributes Names of Attributes to include when retrieving this definition. This should be a comma-separated list. If not provided, Attributes are not included. If &#39;*&#39;, all Attributes are included. (optional)
     * @param name Optional. Filter by Name. Supports beginning and ending wildcard (*). (optional)
     * @param typeID Optional. Filter by TypeID. (optional)
     * @param packageTypeID Optional. Filter by PackageTypeID. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentDefinitionsGetContentDefinitionsAsync(Integer limit, Integer offset, Integer userID, String includeAttributes, String name, Integer typeID, String packageTypeID, final ApiCallback<APIPagedResponseContentSubmissionSharedBusinessEntitiesContentDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = contentDefinitionsGetContentDefinitionsValidateBeforeCall(limit, offset, userID, includeAttributes, name, typeID, packageTypeID, _callback);
        Type localVarReturnType = new TypeToken<APIPagedResponseContentSubmissionSharedBusinessEntitiesContentDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contentDefinitionsPostContentDefinition
     * @param contentSubmissionSharedBusinessEntitiesContentDefinition The ContentDefinition to create. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentDefinitionsPostContentDefinitionCall(ContentSubmissionSharedBusinessEntitiesContentDefinition contentSubmissionSharedBusinessEntitiesContentDefinition, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contentSubmissionSharedBusinessEntitiesContentDefinition;

        // create path and map variables
        String localVarPath = "/api/v2/ContentDefinitions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contentDefinitionsPostContentDefinitionValidateBeforeCall(ContentSubmissionSharedBusinessEntitiesContentDefinition contentSubmissionSharedBusinessEntitiesContentDefinition, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentSubmissionSharedBusinessEntitiesContentDefinition' is set
        if (contentSubmissionSharedBusinessEntitiesContentDefinition == null) {
            throw new ApiException("Missing the required parameter 'contentSubmissionSharedBusinessEntitiesContentDefinition' when calling contentDefinitionsPostContentDefinition(Async)");
        }

        return contentDefinitionsPostContentDefinitionCall(contentSubmissionSharedBusinessEntitiesContentDefinition, _callback);

    }

    /**
     * Create a ContentDefinition
     * Creates a ContentDefinition.  The body of the POST is the ContentDefinition to create.              The ContentDefinitionID will be assigned on creation of the Job.  When successful, the response              is the JobID.  If unsuccessful, an appropriate ApiError is returned.
     * @param contentSubmissionSharedBusinessEntitiesContentDefinition The ContentDefinition to create. (required)
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public Integer contentDefinitionsPostContentDefinition(ContentSubmissionSharedBusinessEntitiesContentDefinition contentSubmissionSharedBusinessEntitiesContentDefinition) throws ApiException {
        ApiResponse<Integer> localVarResp = contentDefinitionsPostContentDefinitionWithHttpInfo(contentSubmissionSharedBusinessEntitiesContentDefinition);
        return localVarResp.getData();
    }

    /**
     * Create a ContentDefinition
     * Creates a ContentDefinition.  The body of the POST is the ContentDefinition to create.              The ContentDefinitionID will be assigned on creation of the Job.  When successful, the response              is the JobID.  If unsuccessful, an appropriate ApiError is returned.
     * @param contentSubmissionSharedBusinessEntitiesContentDefinition The ContentDefinition to create. (required)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Integer> contentDefinitionsPostContentDefinitionWithHttpInfo(ContentSubmissionSharedBusinessEntitiesContentDefinition contentSubmissionSharedBusinessEntitiesContentDefinition) throws ApiException {
        okhttp3.Call localVarCall = contentDefinitionsPostContentDefinitionValidateBeforeCall(contentSubmissionSharedBusinessEntitiesContentDefinition, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a ContentDefinition (asynchronously)
     * Creates a ContentDefinition.  The body of the POST is the ContentDefinition to create.              The ContentDefinitionID will be assigned on creation of the Job.  When successful, the response              is the JobID.  If unsuccessful, an appropriate ApiError is returned.
     * @param contentSubmissionSharedBusinessEntitiesContentDefinition The ContentDefinition to create. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentDefinitionsPostContentDefinitionAsync(ContentSubmissionSharedBusinessEntitiesContentDefinition contentSubmissionSharedBusinessEntitiesContentDefinition, final ApiCallback<Integer> _callback) throws ApiException {

        okhttp3.Call localVarCall = contentDefinitionsPostContentDefinitionValidateBeforeCall(contentSubmissionSharedBusinessEntitiesContentDefinition, _callback);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contentDefinitionsPostContentDefinitionAttribute
     * @param contentDefinitionID The ID of the ContentDefinition (required)
     * @param contentSubmissionSharedBusinessEntitiesContentDefinitionAttribute The Attribute to add. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentDefinitionsPostContentDefinitionAttributeCall(Integer contentDefinitionID, ContentSubmissionSharedBusinessEntitiesContentDefinitionAttribute contentSubmissionSharedBusinessEntitiesContentDefinitionAttribute, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contentSubmissionSharedBusinessEntitiesContentDefinitionAttribute;

        // create path and map variables
        String localVarPath = "/api/v2/ContentDefinitions/{contentDefinitionID}/Attributes"
            .replace("{" + "contentDefinitionID" + "}", localVarApiClient.escapeString(contentDefinitionID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contentDefinitionsPostContentDefinitionAttributeValidateBeforeCall(Integer contentDefinitionID, ContentSubmissionSharedBusinessEntitiesContentDefinitionAttribute contentSubmissionSharedBusinessEntitiesContentDefinitionAttribute, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentDefinitionID' is set
        if (contentDefinitionID == null) {
            throw new ApiException("Missing the required parameter 'contentDefinitionID' when calling contentDefinitionsPostContentDefinitionAttribute(Async)");
        }

        // verify the required parameter 'contentSubmissionSharedBusinessEntitiesContentDefinitionAttribute' is set
        if (contentSubmissionSharedBusinessEntitiesContentDefinitionAttribute == null) {
            throw new ApiException("Missing the required parameter 'contentSubmissionSharedBusinessEntitiesContentDefinitionAttribute' when calling contentDefinitionsPostContentDefinitionAttribute(Async)");
        }

        return contentDefinitionsPostContentDefinitionAttributeCall(contentDefinitionID, contentSubmissionSharedBusinessEntitiesContentDefinitionAttribute, _callback);

    }

    /**
     * Add an Attribute to a ContentDefinition
     * No Documentation Found.
     * @param contentDefinitionID The ID of the ContentDefinition (required)
     * @param contentSubmissionSharedBusinessEntitiesContentDefinitionAttribute The Attribute to add. (required)
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public Integer contentDefinitionsPostContentDefinitionAttribute(Integer contentDefinitionID, ContentSubmissionSharedBusinessEntitiesContentDefinitionAttribute contentSubmissionSharedBusinessEntitiesContentDefinitionAttribute) throws ApiException {
        ApiResponse<Integer> localVarResp = contentDefinitionsPostContentDefinitionAttributeWithHttpInfo(contentDefinitionID, contentSubmissionSharedBusinessEntitiesContentDefinitionAttribute);
        return localVarResp.getData();
    }

    /**
     * Add an Attribute to a ContentDefinition
     * No Documentation Found.
     * @param contentDefinitionID The ID of the ContentDefinition (required)
     * @param contentSubmissionSharedBusinessEntitiesContentDefinitionAttribute The Attribute to add. (required)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Integer> contentDefinitionsPostContentDefinitionAttributeWithHttpInfo(Integer contentDefinitionID, ContentSubmissionSharedBusinessEntitiesContentDefinitionAttribute contentSubmissionSharedBusinessEntitiesContentDefinitionAttribute) throws ApiException {
        okhttp3.Call localVarCall = contentDefinitionsPostContentDefinitionAttributeValidateBeforeCall(contentDefinitionID, contentSubmissionSharedBusinessEntitiesContentDefinitionAttribute, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add an Attribute to a ContentDefinition (asynchronously)
     * No Documentation Found.
     * @param contentDefinitionID The ID of the ContentDefinition (required)
     * @param contentSubmissionSharedBusinessEntitiesContentDefinitionAttribute The Attribute to add. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentDefinitionsPostContentDefinitionAttributeAsync(Integer contentDefinitionID, ContentSubmissionSharedBusinessEntitiesContentDefinitionAttribute contentSubmissionSharedBusinessEntitiesContentDefinitionAttribute, final ApiCallback<Integer> _callback) throws ApiException {

        okhttp3.Call localVarCall = contentDefinitionsPostContentDefinitionAttributeValidateBeforeCall(contentDefinitionID, contentSubmissionSharedBusinessEntitiesContentDefinitionAttribute, _callback);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contentDefinitionsPostContentDefinitionAttributes
     * @param contentDefinitionID  (required)
     * @param contentSubmissionSharedBusinessEntitiesContentDefinitionAttribute  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentDefinitionsPostContentDefinitionAttributesCall(Integer contentDefinitionID, List<ContentSubmissionSharedBusinessEntitiesContentDefinitionAttribute> contentSubmissionSharedBusinessEntitiesContentDefinitionAttribute, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contentSubmissionSharedBusinessEntitiesContentDefinitionAttribute;

        // create path and map variables
        String localVarPath = "/api/v2/ContentDefinitions/{contentDefinitionID}/Attributes/Batch"
            .replace("{" + "contentDefinitionID" + "}", localVarApiClient.escapeString(contentDefinitionID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contentDefinitionsPostContentDefinitionAttributesValidateBeforeCall(Integer contentDefinitionID, List<ContentSubmissionSharedBusinessEntitiesContentDefinitionAttribute> contentSubmissionSharedBusinessEntitiesContentDefinitionAttribute, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentDefinitionID' is set
        if (contentDefinitionID == null) {
            throw new ApiException("Missing the required parameter 'contentDefinitionID' when calling contentDefinitionsPostContentDefinitionAttributes(Async)");
        }

        // verify the required parameter 'contentSubmissionSharedBusinessEntitiesContentDefinitionAttribute' is set
        if (contentSubmissionSharedBusinessEntitiesContentDefinitionAttribute == null) {
            throw new ApiException("Missing the required parameter 'contentSubmissionSharedBusinessEntitiesContentDefinitionAttribute' when calling contentDefinitionsPostContentDefinitionAttributes(Async)");
        }

        return contentDefinitionsPostContentDefinitionAttributesCall(contentDefinitionID, contentSubmissionSharedBusinessEntitiesContentDefinitionAttribute, _callback);

    }

    /**
     * No Documentation Found.
     * No Documentation Found.
     * @param contentDefinitionID  (required)
     * @param contentSubmissionSharedBusinessEntitiesContentDefinitionAttribute  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public void contentDefinitionsPostContentDefinitionAttributes(Integer contentDefinitionID, List<ContentSubmissionSharedBusinessEntitiesContentDefinitionAttribute> contentSubmissionSharedBusinessEntitiesContentDefinitionAttribute) throws ApiException {
        contentDefinitionsPostContentDefinitionAttributesWithHttpInfo(contentDefinitionID, contentSubmissionSharedBusinessEntitiesContentDefinitionAttribute);
    }

    /**
     * No Documentation Found.
     * No Documentation Found.
     * @param contentDefinitionID  (required)
     * @param contentSubmissionSharedBusinessEntitiesContentDefinitionAttribute  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> contentDefinitionsPostContentDefinitionAttributesWithHttpInfo(Integer contentDefinitionID, List<ContentSubmissionSharedBusinessEntitiesContentDefinitionAttribute> contentSubmissionSharedBusinessEntitiesContentDefinitionAttribute) throws ApiException {
        okhttp3.Call localVarCall = contentDefinitionsPostContentDefinitionAttributesValidateBeforeCall(contentDefinitionID, contentSubmissionSharedBusinessEntitiesContentDefinitionAttribute, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * No Documentation Found. (asynchronously)
     * No Documentation Found.
     * @param contentDefinitionID  (required)
     * @param contentSubmissionSharedBusinessEntitiesContentDefinitionAttribute  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentDefinitionsPostContentDefinitionAttributesAsync(Integer contentDefinitionID, List<ContentSubmissionSharedBusinessEntitiesContentDefinitionAttribute> contentSubmissionSharedBusinessEntitiesContentDefinitionAttribute, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = contentDefinitionsPostContentDefinitionAttributesValidateBeforeCall(contentDefinitionID, contentSubmissionSharedBusinessEntitiesContentDefinitionAttribute, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for contentDefinitionsPutContentDefinition
     * @param contentDefinitionID The ID of the ContentDefinition to update (required)
     * @param contentSubmissionSharedBusinessEntitiesContentDefinition The updated ContentDefinition (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentDefinitionsPutContentDefinitionCall(Integer contentDefinitionID, ContentSubmissionSharedBusinessEntitiesContentDefinition contentSubmissionSharedBusinessEntitiesContentDefinition, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contentSubmissionSharedBusinessEntitiesContentDefinition;

        // create path and map variables
        String localVarPath = "/api/v2/ContentDefinitions/{contentDefinitionID}"
            .replace("{" + "contentDefinitionID" + "}", localVarApiClient.escapeString(contentDefinitionID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contentDefinitionsPutContentDefinitionValidateBeforeCall(Integer contentDefinitionID, ContentSubmissionSharedBusinessEntitiesContentDefinition contentSubmissionSharedBusinessEntitiesContentDefinition, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentDefinitionID' is set
        if (contentDefinitionID == null) {
            throw new ApiException("Missing the required parameter 'contentDefinitionID' when calling contentDefinitionsPutContentDefinition(Async)");
        }

        // verify the required parameter 'contentSubmissionSharedBusinessEntitiesContentDefinition' is set
        if (contentSubmissionSharedBusinessEntitiesContentDefinition == null) {
            throw new ApiException("Missing the required parameter 'contentSubmissionSharedBusinessEntitiesContentDefinition' when calling contentDefinitionsPutContentDefinition(Async)");
        }

        return contentDefinitionsPutContentDefinitionCall(contentDefinitionID, contentSubmissionSharedBusinessEntitiesContentDefinition, _callback);

    }

    /**
     * Update a ContentDefinition
     * Updates a ContentDefinition.  The body of the PUT is the updated ContentDefinition.                When successful, the response is empty.  If unsuccessful, an appropriate ApiError is returned.
     * @param contentDefinitionID The ID of the ContentDefinition to update (required)
     * @param contentSubmissionSharedBusinessEntitiesContentDefinition The updated ContentDefinition (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public void contentDefinitionsPutContentDefinition(Integer contentDefinitionID, ContentSubmissionSharedBusinessEntitiesContentDefinition contentSubmissionSharedBusinessEntitiesContentDefinition) throws ApiException {
        contentDefinitionsPutContentDefinitionWithHttpInfo(contentDefinitionID, contentSubmissionSharedBusinessEntitiesContentDefinition);
    }

    /**
     * Update a ContentDefinition
     * Updates a ContentDefinition.  The body of the PUT is the updated ContentDefinition.                When successful, the response is empty.  If unsuccessful, an appropriate ApiError is returned.
     * @param contentDefinitionID The ID of the ContentDefinition to update (required)
     * @param contentSubmissionSharedBusinessEntitiesContentDefinition The updated ContentDefinition (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> contentDefinitionsPutContentDefinitionWithHttpInfo(Integer contentDefinitionID, ContentSubmissionSharedBusinessEntitiesContentDefinition contentSubmissionSharedBusinessEntitiesContentDefinition) throws ApiException {
        okhttp3.Call localVarCall = contentDefinitionsPutContentDefinitionValidateBeforeCall(contentDefinitionID, contentSubmissionSharedBusinessEntitiesContentDefinition, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update a ContentDefinition (asynchronously)
     * Updates a ContentDefinition.  The body of the PUT is the updated ContentDefinition.                When successful, the response is empty.  If unsuccessful, an appropriate ApiError is returned.
     * @param contentDefinitionID The ID of the ContentDefinition to update (required)
     * @param contentSubmissionSharedBusinessEntitiesContentDefinition The updated ContentDefinition (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentDefinitionsPutContentDefinitionAsync(Integer contentDefinitionID, ContentSubmissionSharedBusinessEntitiesContentDefinition contentSubmissionSharedBusinessEntitiesContentDefinition, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = contentDefinitionsPutContentDefinitionValidateBeforeCall(contentDefinitionID, contentSubmissionSharedBusinessEntitiesContentDefinition, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for contentDefinitionsPutContentDefinitionAttributeAsync
     * @param contentDefinitionAttributeID The ID of the Attribute to update. (required)
     * @param contentSubmissionSharedBusinessEntitiesContentDefinitionAttribute The Attribute to update. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentDefinitionsPutContentDefinitionAttributeAsyncCall(Integer contentDefinitionAttributeID, ContentSubmissionSharedBusinessEntitiesContentDefinitionAttribute contentSubmissionSharedBusinessEntitiesContentDefinitionAttribute, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contentSubmissionSharedBusinessEntitiesContentDefinitionAttribute;

        // create path and map variables
        String localVarPath = "/api/v2/ContentDefinitionAttributes/{contentDefinitionAttributeID}"
            .replace("{" + "contentDefinitionAttributeID" + "}", localVarApiClient.escapeString(contentDefinitionAttributeID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contentDefinitionsPutContentDefinitionAttributeAsyncValidateBeforeCall(Integer contentDefinitionAttributeID, ContentSubmissionSharedBusinessEntitiesContentDefinitionAttribute contentSubmissionSharedBusinessEntitiesContentDefinitionAttribute, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentDefinitionAttributeID' is set
        if (contentDefinitionAttributeID == null) {
            throw new ApiException("Missing the required parameter 'contentDefinitionAttributeID' when calling contentDefinitionsPutContentDefinitionAttributeAsync(Async)");
        }

        // verify the required parameter 'contentSubmissionSharedBusinessEntitiesContentDefinitionAttribute' is set
        if (contentSubmissionSharedBusinessEntitiesContentDefinitionAttribute == null) {
            throw new ApiException("Missing the required parameter 'contentSubmissionSharedBusinessEntitiesContentDefinitionAttribute' when calling contentDefinitionsPutContentDefinitionAttributeAsync(Async)");
        }

        return contentDefinitionsPutContentDefinitionAttributeAsyncCall(contentDefinitionAttributeID, contentSubmissionSharedBusinessEntitiesContentDefinitionAttribute, _callback);

    }

    /**
     * Update an Attribute for a ContentDefinition
     * No Documentation Found.
     * @param contentDefinitionAttributeID The ID of the Attribute to update. (required)
     * @param contentSubmissionSharedBusinessEntitiesContentDefinitionAttribute The Attribute to update. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public void contentDefinitionsPutContentDefinitionAttributeAsync(Integer contentDefinitionAttributeID, ContentSubmissionSharedBusinessEntitiesContentDefinitionAttribute contentSubmissionSharedBusinessEntitiesContentDefinitionAttribute) throws ApiException {
        contentDefinitionsPutContentDefinitionAttributeAsyncWithHttpInfo(contentDefinitionAttributeID, contentSubmissionSharedBusinessEntitiesContentDefinitionAttribute);
    }

    /**
     * Update an Attribute for a ContentDefinition
     * No Documentation Found.
     * @param contentDefinitionAttributeID The ID of the Attribute to update. (required)
     * @param contentSubmissionSharedBusinessEntitiesContentDefinitionAttribute The Attribute to update. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> contentDefinitionsPutContentDefinitionAttributeAsyncWithHttpInfo(Integer contentDefinitionAttributeID, ContentSubmissionSharedBusinessEntitiesContentDefinitionAttribute contentSubmissionSharedBusinessEntitiesContentDefinitionAttribute) throws ApiException {
        okhttp3.Call localVarCall = contentDefinitionsPutContentDefinitionAttributeAsyncValidateBeforeCall(contentDefinitionAttributeID, contentSubmissionSharedBusinessEntitiesContentDefinitionAttribute, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update an Attribute for a ContentDefinition (asynchronously)
     * No Documentation Found.
     * @param contentDefinitionAttributeID The ID of the Attribute to update. (required)
     * @param contentSubmissionSharedBusinessEntitiesContentDefinitionAttribute The Attribute to update. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentDefinitionsPutContentDefinitionAttributeAsyncAsync(Integer contentDefinitionAttributeID, ContentSubmissionSharedBusinessEntitiesContentDefinitionAttribute contentSubmissionSharedBusinessEntitiesContentDefinitionAttribute, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = contentDefinitionsPutContentDefinitionAttributeAsyncValidateBeforeCall(contentDefinitionAttributeID, contentSubmissionSharedBusinessEntitiesContentDefinitionAttribute, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for contentDefinitionsPutContentDefinitionAttributes
     * @param contentSubmissionSharedBusinessEntitiesContentDefinitionAttribute  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentDefinitionsPutContentDefinitionAttributesCall(List<ContentSubmissionSharedBusinessEntitiesContentDefinitionAttribute> contentSubmissionSharedBusinessEntitiesContentDefinitionAttribute, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contentSubmissionSharedBusinessEntitiesContentDefinitionAttribute;

        // create path and map variables
        String localVarPath = "/api/v2/ContentDefinitionAttributes/Batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contentDefinitionsPutContentDefinitionAttributesValidateBeforeCall(List<ContentSubmissionSharedBusinessEntitiesContentDefinitionAttribute> contentSubmissionSharedBusinessEntitiesContentDefinitionAttribute, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentSubmissionSharedBusinessEntitiesContentDefinitionAttribute' is set
        if (contentSubmissionSharedBusinessEntitiesContentDefinitionAttribute == null) {
            throw new ApiException("Missing the required parameter 'contentSubmissionSharedBusinessEntitiesContentDefinitionAttribute' when calling contentDefinitionsPutContentDefinitionAttributes(Async)");
        }

        return contentDefinitionsPutContentDefinitionAttributesCall(contentSubmissionSharedBusinessEntitiesContentDefinitionAttribute, _callback);

    }

    /**
     * No Documentation Found.
     * No Documentation Found.
     * @param contentSubmissionSharedBusinessEntitiesContentDefinitionAttribute  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public void contentDefinitionsPutContentDefinitionAttributes(List<ContentSubmissionSharedBusinessEntitiesContentDefinitionAttribute> contentSubmissionSharedBusinessEntitiesContentDefinitionAttribute) throws ApiException {
        contentDefinitionsPutContentDefinitionAttributesWithHttpInfo(contentSubmissionSharedBusinessEntitiesContentDefinitionAttribute);
    }

    /**
     * No Documentation Found.
     * No Documentation Found.
     * @param contentSubmissionSharedBusinessEntitiesContentDefinitionAttribute  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> contentDefinitionsPutContentDefinitionAttributesWithHttpInfo(List<ContentSubmissionSharedBusinessEntitiesContentDefinitionAttribute> contentSubmissionSharedBusinessEntitiesContentDefinitionAttribute) throws ApiException {
        okhttp3.Call localVarCall = contentDefinitionsPutContentDefinitionAttributesValidateBeforeCall(contentSubmissionSharedBusinessEntitiesContentDefinitionAttribute, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * No Documentation Found. (asynchronously)
     * No Documentation Found.
     * @param contentSubmissionSharedBusinessEntitiesContentDefinitionAttribute  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentDefinitionsPutContentDefinitionAttributesAsync(List<ContentSubmissionSharedBusinessEntitiesContentDefinitionAttribute> contentSubmissionSharedBusinessEntitiesContentDefinitionAttribute, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = contentDefinitionsPutContentDefinitionAttributesValidateBeforeCall(contentSubmissionSharedBusinessEntitiesContentDefinitionAttribute, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
