/*
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.APIIPagedResponseGlobalResourcesSharedModelsGlobalImage;
import org.openapitools.client.model.APIModelsApiError;
import org.openapitools.client.model.GlobalResourcesSharedModelsGlobalImage;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GlobalImagesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GlobalImagesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GlobalImagesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for globalImagesDeleteFile
     * @param ID The GlobalImage&#39;s id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalImagesDeleteFileCall(String ID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/GlobalImages/{ID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call globalImagesDeleteFileValidateBeforeCall(String ID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling globalImagesDeleteFile(Async)");
        }

        return globalImagesDeleteFileCall(ID, _callback);

    }

    /**
     * Mark a file as &#39;Removed&#39;. Disables download of the image and hides metadata from GET all method
     * No Documentation Found.
     * @param ID The GlobalImage&#39;s id. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public void globalImagesDeleteFile(String ID) throws ApiException {
        globalImagesDeleteFileWithHttpInfo(ID);
    }

    /**
     * Mark a file as &#39;Removed&#39;. Disables download of the image and hides metadata from GET all method
     * No Documentation Found.
     * @param ID The GlobalImage&#39;s id. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> globalImagesDeleteFileWithHttpInfo(String ID) throws ApiException {
        okhttp3.Call localVarCall = globalImagesDeleteFileValidateBeforeCall(ID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Mark a file as &#39;Removed&#39;. Disables download of the image and hides metadata from GET all method (asynchronously)
     * No Documentation Found.
     * @param ID The GlobalImage&#39;s id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalImagesDeleteFileAsync(String ID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = globalImagesDeleteFileValidateBeforeCall(ID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for globalImagesGetGlobalImage
     * @param ID The GlobalImage&#39;s id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalImagesGetGlobalImageCall(String ID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/GlobalImages/{ID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call globalImagesGetGlobalImageValidateBeforeCall(String ID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling globalImagesGetGlobalImage(Async)");
        }

        return globalImagesGetGlobalImageCall(ID, _callback);

    }

    /**
     * Gets a GlobalImage&#39;s metadata.
     * No Documentation Found.
     * @param ID The GlobalImage&#39;s id. (required)
     * @return GlobalResourcesSharedModelsGlobalImage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public GlobalResourcesSharedModelsGlobalImage globalImagesGetGlobalImage(String ID) throws ApiException {
        ApiResponse<GlobalResourcesSharedModelsGlobalImage> localVarResp = globalImagesGetGlobalImageWithHttpInfo(ID);
        return localVarResp.getData();
    }

    /**
     * Gets a GlobalImage&#39;s metadata.
     * No Documentation Found.
     * @param ID The GlobalImage&#39;s id. (required)
     * @return ApiResponse&lt;GlobalResourcesSharedModelsGlobalImage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GlobalResourcesSharedModelsGlobalImage> globalImagesGetGlobalImageWithHttpInfo(String ID) throws ApiException {
        okhttp3.Call localVarCall = globalImagesGetGlobalImageValidateBeforeCall(ID, null);
        Type localVarReturnType = new TypeToken<GlobalResourcesSharedModelsGlobalImage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a GlobalImage&#39;s metadata. (asynchronously)
     * No Documentation Found.
     * @param ID The GlobalImage&#39;s id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalImagesGetGlobalImageAsync(String ID, final ApiCallback<GlobalResourcesSharedModelsGlobalImage> _callback) throws ApiException {

        okhttp3.Call localVarCall = globalImagesGetGlobalImageValidateBeforeCall(ID, _callback);
        Type localVarReturnType = new TypeToken<GlobalResourcesSharedModelsGlobalImage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for globalImagesGetGlobalImageContents
     * @param ID The global image metadata id. (required)
     * @param isFullImage Indicated whether to download the full image or the thumbnail. Defaults to &#39;true&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalImagesGetGlobalImageContentsCall(String ID, Boolean isFullImage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/GlobalImages/{ID}/ImageContents"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (isFullImage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isFullImage", isFullImage));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call globalImagesGetGlobalImageContentsValidateBeforeCall(String ID, Boolean isFullImage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling globalImagesGetGlobalImageContents(Async)");
        }

        return globalImagesGetGlobalImageContentsCall(ID, isFullImage, _callback);

    }

    /**
     * Download the contents of a GlobalImage. The current State of the GlobalImage should be &#39;Available&#39;.
     * No Documentation Found.
     * @param ID The global image metadata id. (required)
     * @param isFullImage Indicated whether to download the full image or the thumbnail. Defaults to &#39;true&#39;. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public Object globalImagesGetGlobalImageContents(String ID, Boolean isFullImage) throws ApiException {
        ApiResponse<Object> localVarResp = globalImagesGetGlobalImageContentsWithHttpInfo(ID, isFullImage);
        return localVarResp.getData();
    }

    /**
     * Download the contents of a GlobalImage. The current State of the GlobalImage should be &#39;Available&#39;.
     * No Documentation Found.
     * @param ID The global image metadata id. (required)
     * @param isFullImage Indicated whether to download the full image or the thumbnail. Defaults to &#39;true&#39;. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> globalImagesGetGlobalImageContentsWithHttpInfo(String ID, Boolean isFullImage) throws ApiException {
        okhttp3.Call localVarCall = globalImagesGetGlobalImageContentsValidateBeforeCall(ID, isFullImage, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Download the contents of a GlobalImage. The current State of the GlobalImage should be &#39;Available&#39;. (asynchronously)
     * No Documentation Found.
     * @param ID The global image metadata id. (required)
     * @param isFullImage Indicated whether to download the full image or the thumbnail. Defaults to &#39;true&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalImagesGetGlobalImageContentsAsync(String ID, Boolean isFullImage, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = globalImagesGetGlobalImageContentsValidateBeforeCall(ID, isFullImage, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for globalImagesGetGlobalImages
     * @param search Optional. Searches for matching global images with the matching Category Name, Publisher or Description (optional)
     * @param categoryId  (optional)
     * @param publisher  (optional)
     * @param includeDeleted Indicates whether to include GlobalImages marked as removed. (optional)
     * @param limit Optional. The page limit. The default page limit is 10. (optional)
     * @param offset Optional. The page offset. The default page offset is 0. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalImagesGetGlobalImagesCall(String search, String categoryId, String publisher, Boolean includeDeleted, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/GlobalImages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (categoryId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("categoryId", categoryId));
        }

        if (publisher != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("publisher", publisher));
        }

        if (includeDeleted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeDeleted", includeDeleted));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call globalImagesGetGlobalImagesValidateBeforeCall(String search, String categoryId, String publisher, Boolean includeDeleted, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return globalImagesGetGlobalImagesCall(search, categoryId, publisher, includeDeleted, limit, offset, _callback);

    }

    /**
     * Get a paged response of GlobalImage.
     * No Documentation Found.
     * @param search Optional. Searches for matching global images with the matching Category Name, Publisher or Description (optional)
     * @param categoryId  (optional)
     * @param publisher  (optional)
     * @param includeDeleted Indicates whether to include GlobalImages marked as removed. (optional)
     * @param limit Optional. The page limit. The default page limit is 10. (optional)
     * @param offset Optional. The page offset. The default page offset is 0. (optional)
     * @return APIIPagedResponseGlobalResourcesSharedModelsGlobalImage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public APIIPagedResponseGlobalResourcesSharedModelsGlobalImage globalImagesGetGlobalImages(String search, String categoryId, String publisher, Boolean includeDeleted, Integer limit, Integer offset) throws ApiException {
        ApiResponse<APIIPagedResponseGlobalResourcesSharedModelsGlobalImage> localVarResp = globalImagesGetGlobalImagesWithHttpInfo(search, categoryId, publisher, includeDeleted, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Get a paged response of GlobalImage.
     * No Documentation Found.
     * @param search Optional. Searches for matching global images with the matching Category Name, Publisher or Description (optional)
     * @param categoryId  (optional)
     * @param publisher  (optional)
     * @param includeDeleted Indicates whether to include GlobalImages marked as removed. (optional)
     * @param limit Optional. The page limit. The default page limit is 10. (optional)
     * @param offset Optional. The page offset. The default page offset is 0. (optional)
     * @return ApiResponse&lt;APIIPagedResponseGlobalResourcesSharedModelsGlobalImage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<APIIPagedResponseGlobalResourcesSharedModelsGlobalImage> globalImagesGetGlobalImagesWithHttpInfo(String search, String categoryId, String publisher, Boolean includeDeleted, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = globalImagesGetGlobalImagesValidateBeforeCall(search, categoryId, publisher, includeDeleted, limit, offset, null);
        Type localVarReturnType = new TypeToken<APIIPagedResponseGlobalResourcesSharedModelsGlobalImage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a paged response of GlobalImage. (asynchronously)
     * No Documentation Found.
     * @param search Optional. Searches for matching global images with the matching Category Name, Publisher or Description (optional)
     * @param categoryId  (optional)
     * @param publisher  (optional)
     * @param includeDeleted Indicates whether to include GlobalImages marked as removed. (optional)
     * @param limit Optional. The page limit. The default page limit is 10. (optional)
     * @param offset Optional. The page offset. The default page offset is 0. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalImagesGetGlobalImagesAsync(String search, String categoryId, String publisher, Boolean includeDeleted, Integer limit, Integer offset, final ApiCallback<APIIPagedResponseGlobalResourcesSharedModelsGlobalImage> _callback) throws ApiException {

        okhttp3.Call localVarCall = globalImagesGetGlobalImagesValidateBeforeCall(search, categoryId, publisher, includeDeleted, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<APIIPagedResponseGlobalResourcesSharedModelsGlobalImage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for globalImagesPostGlobalImage
     * @param globalResourcesSharedModelsGlobalImage The file&#39;s metadata. (required)
     * @param overridePublisherOrDate Whether to set the publisher and date to the provided values. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalImagesPostGlobalImageCall(GlobalResourcesSharedModelsGlobalImage globalResourcesSharedModelsGlobalImage, Boolean overridePublisherOrDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = globalResourcesSharedModelsGlobalImage;

        // create path and map variables
        String localVarPath = "/api/v2/GlobalImages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (overridePublisherOrDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("overridePublisherOrDate", overridePublisherOrDate));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call globalImagesPostGlobalImageValidateBeforeCall(GlobalResourcesSharedModelsGlobalImage globalResourcesSharedModelsGlobalImage, Boolean overridePublisherOrDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'globalResourcesSharedModelsGlobalImage' is set
        if (globalResourcesSharedModelsGlobalImage == null) {
            throw new ApiException("Missing the required parameter 'globalResourcesSharedModelsGlobalImage' when calling globalImagesPostGlobalImage(Async)");
        }

        return globalImagesPostGlobalImageCall(globalResourcesSharedModelsGlobalImage, overridePublisherOrDate, _callback);

    }

    /**
     * Create the metadata for a GlobalImage before uploading. The State should be &#39;Created&#39;.
     * No Documentation Found.
     * @param globalResourcesSharedModelsGlobalImage The file&#39;s metadata. (required)
     * @param overridePublisherOrDate Whether to set the publisher and date to the provided values. (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public String globalImagesPostGlobalImage(GlobalResourcesSharedModelsGlobalImage globalResourcesSharedModelsGlobalImage, Boolean overridePublisherOrDate) throws ApiException {
        ApiResponse<String> localVarResp = globalImagesPostGlobalImageWithHttpInfo(globalResourcesSharedModelsGlobalImage, overridePublisherOrDate);
        return localVarResp.getData();
    }

    /**
     * Create the metadata for a GlobalImage before uploading. The State should be &#39;Created&#39;.
     * No Documentation Found.
     * @param globalResourcesSharedModelsGlobalImage The file&#39;s metadata. (required)
     * @param overridePublisherOrDate Whether to set the publisher and date to the provided values. (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> globalImagesPostGlobalImageWithHttpInfo(GlobalResourcesSharedModelsGlobalImage globalResourcesSharedModelsGlobalImage, Boolean overridePublisherOrDate) throws ApiException {
        okhttp3.Call localVarCall = globalImagesPostGlobalImageValidateBeforeCall(globalResourcesSharedModelsGlobalImage, overridePublisherOrDate, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create the metadata for a GlobalImage before uploading. The State should be &#39;Created&#39;. (asynchronously)
     * No Documentation Found.
     * @param globalResourcesSharedModelsGlobalImage The file&#39;s metadata. (required)
     * @param overridePublisherOrDate Whether to set the publisher and date to the provided values. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalImagesPostGlobalImageAsync(GlobalResourcesSharedModelsGlobalImage globalResourcesSharedModelsGlobalImage, Boolean overridePublisherOrDate, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = globalImagesPostGlobalImageValidateBeforeCall(globalResourcesSharedModelsGlobalImage, overridePublisherOrDate, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for globalImagesPutGlobalImage
     * @param ID The GlobalImage&#39;s id. (required)
     * @param globalResourcesSharedModelsGlobalImage The GlobalImage&#39;s metadata (required)
     * @param overridePublisherOrDate Whether to set the publisher and date to the provided values. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalImagesPutGlobalImageCall(String ID, GlobalResourcesSharedModelsGlobalImage globalResourcesSharedModelsGlobalImage, Boolean overridePublisherOrDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = globalResourcesSharedModelsGlobalImage;

        // create path and map variables
        String localVarPath = "/api/v2/GlobalImages/{ID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (overridePublisherOrDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("overridePublisherOrDate", overridePublisherOrDate));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call globalImagesPutGlobalImageValidateBeforeCall(String ID, GlobalResourcesSharedModelsGlobalImage globalResourcesSharedModelsGlobalImage, Boolean overridePublisherOrDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling globalImagesPutGlobalImage(Async)");
        }

        // verify the required parameter 'globalResourcesSharedModelsGlobalImage' is set
        if (globalResourcesSharedModelsGlobalImage == null) {
            throw new ApiException("Missing the required parameter 'globalResourcesSharedModelsGlobalImage' when calling globalImagesPutGlobalImage(Async)");
        }

        return globalImagesPutGlobalImageCall(ID, globalResourcesSharedModelsGlobalImage, overridePublisherOrDate, _callback);

    }

    /**
     * Update the metadata for an image.
     * Update the metadata for an image. Size may not be modified by the client.                   Set status to &#39;Available&#39; to publish an image. Both the image and thumbnail must be uploaded.                  Set status to &#39;Created&#39; to reset an image&#39;s contents and re-upload.                   A file may only be &#39;Removed&#39; by the DELETE method.
     * @param ID The GlobalImage&#39;s id. (required)
     * @param globalResourcesSharedModelsGlobalImage The GlobalImage&#39;s metadata (required)
     * @param overridePublisherOrDate Whether to set the publisher and date to the provided values. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public void globalImagesPutGlobalImage(String ID, GlobalResourcesSharedModelsGlobalImage globalResourcesSharedModelsGlobalImage, Boolean overridePublisherOrDate) throws ApiException {
        globalImagesPutGlobalImageWithHttpInfo(ID, globalResourcesSharedModelsGlobalImage, overridePublisherOrDate);
    }

    /**
     * Update the metadata for an image.
     * Update the metadata for an image. Size may not be modified by the client.                   Set status to &#39;Available&#39; to publish an image. Both the image and thumbnail must be uploaded.                  Set status to &#39;Created&#39; to reset an image&#39;s contents and re-upload.                   A file may only be &#39;Removed&#39; by the DELETE method.
     * @param ID The GlobalImage&#39;s id. (required)
     * @param globalResourcesSharedModelsGlobalImage The GlobalImage&#39;s metadata (required)
     * @param overridePublisherOrDate Whether to set the publisher and date to the provided values. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> globalImagesPutGlobalImageWithHttpInfo(String ID, GlobalResourcesSharedModelsGlobalImage globalResourcesSharedModelsGlobalImage, Boolean overridePublisherOrDate) throws ApiException {
        okhttp3.Call localVarCall = globalImagesPutGlobalImageValidateBeforeCall(ID, globalResourcesSharedModelsGlobalImage, overridePublisherOrDate, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update the metadata for an image. (asynchronously)
     * Update the metadata for an image. Size may not be modified by the client.                   Set status to &#39;Available&#39; to publish an image. Both the image and thumbnail must be uploaded.                  Set status to &#39;Created&#39; to reset an image&#39;s contents and re-upload.                   A file may only be &#39;Removed&#39; by the DELETE method.
     * @param ID The GlobalImage&#39;s id. (required)
     * @param globalResourcesSharedModelsGlobalImage The GlobalImage&#39;s metadata (required)
     * @param overridePublisherOrDate Whether to set the publisher and date to the provided values. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalImagesPutGlobalImageAsync(String ID, GlobalResourcesSharedModelsGlobalImage globalResourcesSharedModelsGlobalImage, Boolean overridePublisherOrDate, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = globalImagesPutGlobalImageValidateBeforeCall(ID, globalResourcesSharedModelsGlobalImage, overridePublisherOrDate, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for globalImagesPutGlobalImageContents
     * @param ID The global image metadata id. (required)
     * @param isFullImage Indicated whether this is the full image or the thumbnail. Defaults to &#39;true&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalImagesPutGlobalImageContentsCall(String ID, Boolean isFullImage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/GlobalImages/{ID}/ImageContents"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (isFullImage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isFullImage", isFullImage));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call globalImagesPutGlobalImageContentsValidateBeforeCall(String ID, Boolean isFullImage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling globalImagesPutGlobalImageContents(Async)");
        }

        return globalImagesPutGlobalImageContentsCall(ID, isFullImage, _callback);

    }

    /**
     * Upload the contents of a GlobalImage. The current State of the File for the GlobalImage should be &#39;Created&#39;.
     * Both the image and thumbnail must be uploaded.                  Set isFullImage &#x3D; &#39;True&#39; for Full Image, isFullImage &#x3D; &#39;False&#39; for Thumbnail
     * @param ID The global image metadata id. (required)
     * @param isFullImage Indicated whether this is the full image or the thumbnail. Defaults to &#39;true&#39;. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public Object globalImagesPutGlobalImageContents(String ID, Boolean isFullImage) throws ApiException {
        ApiResponse<Object> localVarResp = globalImagesPutGlobalImageContentsWithHttpInfo(ID, isFullImage);
        return localVarResp.getData();
    }

    /**
     * Upload the contents of a GlobalImage. The current State of the File for the GlobalImage should be &#39;Created&#39;.
     * Both the image and thumbnail must be uploaded.                  Set isFullImage &#x3D; &#39;True&#39; for Full Image, isFullImage &#x3D; &#39;False&#39; for Thumbnail
     * @param ID The global image metadata id. (required)
     * @param isFullImage Indicated whether this is the full image or the thumbnail. Defaults to &#39;true&#39;. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> globalImagesPutGlobalImageContentsWithHttpInfo(String ID, Boolean isFullImage) throws ApiException {
        okhttp3.Call localVarCall = globalImagesPutGlobalImageContentsValidateBeforeCall(ID, isFullImage, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upload the contents of a GlobalImage. The current State of the File for the GlobalImage should be &#39;Created&#39;. (asynchronously)
     * Both the image and thumbnail must be uploaded.                  Set isFullImage &#x3D; &#39;True&#39; for Full Image, isFullImage &#x3D; &#39;False&#39; for Thumbnail
     * @param ID The global image metadata id. (required)
     * @param isFullImage Indicated whether this is the full image or the thumbnail. Defaults to &#39;true&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalImagesPutGlobalImageContentsAsync(String ID, Boolean isFullImage, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = globalImagesPutGlobalImageContentsValidateBeforeCall(ID, isFullImage, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
