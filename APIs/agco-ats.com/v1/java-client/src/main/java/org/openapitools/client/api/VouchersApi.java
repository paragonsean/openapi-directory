/*
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.APIPagedResponseDealerDBModelsVoucher;
import org.openapitools.client.model.APIPagedResponseDealerDBModelsVoucherHistory;
import org.openapitools.client.model.DealerDBModelsVoucher;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VouchersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VouchersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VouchersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiV2VouchersVoucherCodeGet
     * @param voucherCode The voucher code of the voucher to get. (required)
     * @param deleted Optional. Filter vouchers by Deleted state. By default only vouchers that are not deleted are returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2VouchersVoucherCodeGetCall(String voucherCode, String deleted, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/Vouchers/{VoucherCode}"
            .replace("{" + "VoucherCode" + "}", localVarApiClient.escapeString(voucherCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (deleted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Deleted", deleted));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2VouchersVoucherCodeGetValidateBeforeCall(String voucherCode, String deleted, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'voucherCode' is set
        if (voucherCode == null) {
            throw new ApiException("Missing the required parameter 'voucherCode' when calling apiV2VouchersVoucherCodeGet(Async)");
        }

        return apiV2VouchersVoucherCodeGetCall(voucherCode, deleted, _callback);

    }

    /**
     * Get a voucher
     * No Documentation Found.
     * @param voucherCode The voucher code of the voucher to get. (required)
     * @param deleted Optional. Filter vouchers by Deleted state. By default only vouchers that are not deleted are returned. (optional)
     * @return DealerDBModelsVoucher
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DealerDBModelsVoucher apiV2VouchersVoucherCodeGet(String voucherCode, String deleted) throws ApiException {
        ApiResponse<DealerDBModelsVoucher> localVarResp = apiV2VouchersVoucherCodeGetWithHttpInfo(voucherCode, deleted);
        return localVarResp.getData();
    }

    /**
     * Get a voucher
     * No Documentation Found.
     * @param voucherCode The voucher code of the voucher to get. (required)
     * @param deleted Optional. Filter vouchers by Deleted state. By default only vouchers that are not deleted are returned. (optional)
     * @return ApiResponse&lt;DealerDBModelsVoucher&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DealerDBModelsVoucher> apiV2VouchersVoucherCodeGetWithHttpInfo(String voucherCode, String deleted) throws ApiException {
        okhttp3.Call localVarCall = apiV2VouchersVoucherCodeGetValidateBeforeCall(voucherCode, deleted, null);
        Type localVarReturnType = new TypeToken<DealerDBModelsVoucher>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a voucher (asynchronously)
     * No Documentation Found.
     * @param voucherCode The voucher code of the voucher to get. (required)
     * @param deleted Optional. Filter vouchers by Deleted state. By default only vouchers that are not deleted are returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2VouchersVoucherCodeGetAsync(String voucherCode, String deleted, final ApiCallback<DealerDBModelsVoucher> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2VouchersVoucherCodeGetValidateBeforeCall(voucherCode, deleted, _callback);
        Type localVarReturnType = new TypeToken<DealerDBModelsVoucher>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for vouchersDelete
     * @param voucherCode The voucher code of the voucher to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vouchersDeleteCall(String voucherCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/Vouchers/{VoucherCode}"
            .replace("{" + "VoucherCode" + "}", localVarApiClient.escapeString(voucherCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vouchersDeleteValidateBeforeCall(String voucherCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'voucherCode' is set
        if (voucherCode == null) {
            throw new ApiException("Missing the required parameter 'voucherCode' when calling vouchersDelete(Async)");
        }

        return vouchersDeleteCall(voucherCode, _callback);

    }

    /**
     * Delete a voucher
     * No Documentation Found.
     * @param voucherCode The voucher code of the voucher to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void vouchersDelete(String voucherCode) throws ApiException {
        vouchersDeleteWithHttpInfo(voucherCode);
    }

    /**
     * Delete a voucher
     * No Documentation Found.
     * @param voucherCode The voucher code of the voucher to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> vouchersDeleteWithHttpInfo(String voucherCode) throws ApiException {
        okhttp3.Call localVarCall = vouchersDeleteValidateBeforeCall(voucherCode, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a voucher (asynchronously)
     * No Documentation Found.
     * @param voucherCode The voucher code of the voucher to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vouchersDeleteAsync(String voucherCode, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = vouchersDeleteValidateBeforeCall(voucherCode, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for vouchersGet
     * @param type Optional. Filter vouchers by Type (optional)
     * @param dealerCode Optional. Filter vouchers by DealerCode (optional)
     * @param licenseTo Optional. Filter vouchers by LicenseTo. Wildcard supported (*). (optional)
     * @param purpose Optional. Filter vouchers by Purpose. Wildcard supported (*). (optional)
     * @param orderNumber Optional. Filter vouchers by OrderNumber (optional)
     * @param email Optional. Filter vouchers by Email. Wildcard supported (*). (optional)
     * @param modifiedBy Optional. Filter vouchers by ModifiedBy (optional)
     * @param createdAfter Optional. Filter vouchers by CreatedDate (optional)
     * @param createdBefore Optional. Filter vouchers by CreatedDate (optional)
     * @param punchedAfter Optional. Filter vouchers by PunchedDate (optional)
     * @param punchedBefore Optional. Filter vouchers by PunchedDate (optional)
     * @param punched Optional. Filter vouchers by Punched status (optional)
     * @param expirationAfter Optional. Filter vouchers by ExpirationDate (optional)
     * @param expirationBefore Optional. Filter vouchers by ExpirationDate (optional)
     * @param deleted Optional. Filter vouchers by Deleted state. By default only vouchers that are not deleted are returned. (optional)
     * @param limit Optional. The page limit. The default page limit is 10. (optional)
     * @param offset Optional. The page offset. The default page offset is 0. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vouchersGetCall(String type, String dealerCode, String licenseTo, String purpose, String orderNumber, String email, String modifiedBy, OffsetDateTime createdAfter, OffsetDateTime createdBefore, OffsetDateTime punchedAfter, OffsetDateTime punchedBefore, Boolean punched, OffsetDateTime expirationAfter, OffsetDateTime expirationBefore, String deleted, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/Vouchers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Type", type));
        }

        if (dealerCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DealerCode", dealerCode));
        }

        if (licenseTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LicenseTo", licenseTo));
        }

        if (purpose != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Purpose", purpose));
        }

        if (orderNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OrderNumber", orderNumber));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Email", email));
        }

        if (modifiedBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ModifiedBy", modifiedBy));
        }

        if (createdAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CreatedAfter", createdAfter));
        }

        if (createdBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CreatedBefore", createdBefore));
        }

        if (punchedAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PunchedAfter", punchedAfter));
        }

        if (punchedBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PunchedBefore", punchedBefore));
        }

        if (punched != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Punched", punched));
        }

        if (expirationAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ExpirationAfter", expirationAfter));
        }

        if (expirationBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ExpirationBefore", expirationBefore));
        }

        if (deleted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Deleted", deleted));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vouchersGetValidateBeforeCall(String type, String dealerCode, String licenseTo, String purpose, String orderNumber, String email, String modifiedBy, OffsetDateTime createdAfter, OffsetDateTime createdBefore, OffsetDateTime punchedAfter, OffsetDateTime punchedBefore, Boolean punched, OffsetDateTime expirationAfter, OffsetDateTime expirationBefore, String deleted, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return vouchersGetCall(type, dealerCode, licenseTo, purpose, orderNumber, email, modifiedBy, createdAfter, createdBefore, punchedAfter, punchedBefore, punched, expirationAfter, expirationBefore, deleted, limit, offset, _callback);

    }

    /**
     * Gets a list of vouchers
     * No Documentation Found.
     * @param type Optional. Filter vouchers by Type (optional)
     * @param dealerCode Optional. Filter vouchers by DealerCode (optional)
     * @param licenseTo Optional. Filter vouchers by LicenseTo. Wildcard supported (*). (optional)
     * @param purpose Optional. Filter vouchers by Purpose. Wildcard supported (*). (optional)
     * @param orderNumber Optional. Filter vouchers by OrderNumber (optional)
     * @param email Optional. Filter vouchers by Email. Wildcard supported (*). (optional)
     * @param modifiedBy Optional. Filter vouchers by ModifiedBy (optional)
     * @param createdAfter Optional. Filter vouchers by CreatedDate (optional)
     * @param createdBefore Optional. Filter vouchers by CreatedDate (optional)
     * @param punchedAfter Optional. Filter vouchers by PunchedDate (optional)
     * @param punchedBefore Optional. Filter vouchers by PunchedDate (optional)
     * @param punched Optional. Filter vouchers by Punched status (optional)
     * @param expirationAfter Optional. Filter vouchers by ExpirationDate (optional)
     * @param expirationBefore Optional. Filter vouchers by ExpirationDate (optional)
     * @param deleted Optional. Filter vouchers by Deleted state. By default only vouchers that are not deleted are returned. (optional)
     * @param limit Optional. The page limit. The default page limit is 10. (optional)
     * @param offset Optional. The page offset. The default page offset is 0. (optional)
     * @return APIPagedResponseDealerDBModelsVoucher
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIPagedResponseDealerDBModelsVoucher vouchersGet(String type, String dealerCode, String licenseTo, String purpose, String orderNumber, String email, String modifiedBy, OffsetDateTime createdAfter, OffsetDateTime createdBefore, OffsetDateTime punchedAfter, OffsetDateTime punchedBefore, Boolean punched, OffsetDateTime expirationAfter, OffsetDateTime expirationBefore, String deleted, Integer limit, Integer offset) throws ApiException {
        ApiResponse<APIPagedResponseDealerDBModelsVoucher> localVarResp = vouchersGetWithHttpInfo(type, dealerCode, licenseTo, purpose, orderNumber, email, modifiedBy, createdAfter, createdBefore, punchedAfter, punchedBefore, punched, expirationAfter, expirationBefore, deleted, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Gets a list of vouchers
     * No Documentation Found.
     * @param type Optional. Filter vouchers by Type (optional)
     * @param dealerCode Optional. Filter vouchers by DealerCode (optional)
     * @param licenseTo Optional. Filter vouchers by LicenseTo. Wildcard supported (*). (optional)
     * @param purpose Optional. Filter vouchers by Purpose. Wildcard supported (*). (optional)
     * @param orderNumber Optional. Filter vouchers by OrderNumber (optional)
     * @param email Optional. Filter vouchers by Email. Wildcard supported (*). (optional)
     * @param modifiedBy Optional. Filter vouchers by ModifiedBy (optional)
     * @param createdAfter Optional. Filter vouchers by CreatedDate (optional)
     * @param createdBefore Optional. Filter vouchers by CreatedDate (optional)
     * @param punchedAfter Optional. Filter vouchers by PunchedDate (optional)
     * @param punchedBefore Optional. Filter vouchers by PunchedDate (optional)
     * @param punched Optional. Filter vouchers by Punched status (optional)
     * @param expirationAfter Optional. Filter vouchers by ExpirationDate (optional)
     * @param expirationBefore Optional. Filter vouchers by ExpirationDate (optional)
     * @param deleted Optional. Filter vouchers by Deleted state. By default only vouchers that are not deleted are returned. (optional)
     * @param limit Optional. The page limit. The default page limit is 10. (optional)
     * @param offset Optional. The page offset. The default page offset is 0. (optional)
     * @return ApiResponse&lt;APIPagedResponseDealerDBModelsVoucher&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<APIPagedResponseDealerDBModelsVoucher> vouchersGetWithHttpInfo(String type, String dealerCode, String licenseTo, String purpose, String orderNumber, String email, String modifiedBy, OffsetDateTime createdAfter, OffsetDateTime createdBefore, OffsetDateTime punchedAfter, OffsetDateTime punchedBefore, Boolean punched, OffsetDateTime expirationAfter, OffsetDateTime expirationBefore, String deleted, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = vouchersGetValidateBeforeCall(type, dealerCode, licenseTo, purpose, orderNumber, email, modifiedBy, createdAfter, createdBefore, punchedAfter, punchedBefore, punched, expirationAfter, expirationBefore, deleted, limit, offset, null);
        Type localVarReturnType = new TypeToken<APIPagedResponseDealerDBModelsVoucher>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a list of vouchers (asynchronously)
     * No Documentation Found.
     * @param type Optional. Filter vouchers by Type (optional)
     * @param dealerCode Optional. Filter vouchers by DealerCode (optional)
     * @param licenseTo Optional. Filter vouchers by LicenseTo. Wildcard supported (*). (optional)
     * @param purpose Optional. Filter vouchers by Purpose. Wildcard supported (*). (optional)
     * @param orderNumber Optional. Filter vouchers by OrderNumber (optional)
     * @param email Optional. Filter vouchers by Email. Wildcard supported (*). (optional)
     * @param modifiedBy Optional. Filter vouchers by ModifiedBy (optional)
     * @param createdAfter Optional. Filter vouchers by CreatedDate (optional)
     * @param createdBefore Optional. Filter vouchers by CreatedDate (optional)
     * @param punchedAfter Optional. Filter vouchers by PunchedDate (optional)
     * @param punchedBefore Optional. Filter vouchers by PunchedDate (optional)
     * @param punched Optional. Filter vouchers by Punched status (optional)
     * @param expirationAfter Optional. Filter vouchers by ExpirationDate (optional)
     * @param expirationBefore Optional. Filter vouchers by ExpirationDate (optional)
     * @param deleted Optional. Filter vouchers by Deleted state. By default only vouchers that are not deleted are returned. (optional)
     * @param limit Optional. The page limit. The default page limit is 10. (optional)
     * @param offset Optional. The page offset. The default page offset is 0. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vouchersGetAsync(String type, String dealerCode, String licenseTo, String purpose, String orderNumber, String email, String modifiedBy, OffsetDateTime createdAfter, OffsetDateTime createdBefore, OffsetDateTime punchedAfter, OffsetDateTime punchedBefore, Boolean punched, OffsetDateTime expirationAfter, OffsetDateTime expirationBefore, String deleted, Integer limit, Integer offset, final ApiCallback<APIPagedResponseDealerDBModelsVoucher> _callback) throws ApiException {

        okhttp3.Call localVarCall = vouchersGetValidateBeforeCall(type, dealerCode, licenseTo, purpose, orderNumber, email, modifiedBy, createdAfter, createdBefore, punchedAfter, punchedBefore, punched, expirationAfter, expirationBefore, deleted, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<APIPagedResponseDealerDBModelsVoucher>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for vouchersGetVoucherHistory
     * @param voucherCode The voucher code to get history for. (required)
     * @param limit Optional. The page limit. The default page limit is 10. (optional)
     * @param offset Optional. The page offset. The default page offset is 0. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vouchersGetVoucherHistoryCall(String voucherCode, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/Vouchers/{VoucherCode}/VoucherHistory"
            .replace("{" + "VoucherCode" + "}", localVarApiClient.escapeString(voucherCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vouchersGetVoucherHistoryValidateBeforeCall(String voucherCode, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'voucherCode' is set
        if (voucherCode == null) {
            throw new ApiException("Missing the required parameter 'voucherCode' when calling vouchersGetVoucherHistory(Async)");
        }

        return vouchersGetVoucherHistoryCall(voucherCode, limit, offset, _callback);

    }

    /**
     * Get a voucher&#39;s history.
     * No Documentation Found.
     * @param voucherCode The voucher code to get history for. (required)
     * @param limit Optional. The page limit. The default page limit is 10. (optional)
     * @param offset Optional. The page offset. The default page offset is 0. (optional)
     * @return APIPagedResponseDealerDBModelsVoucherHistory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIPagedResponseDealerDBModelsVoucherHistory vouchersGetVoucherHistory(String voucherCode, Integer limit, Integer offset) throws ApiException {
        ApiResponse<APIPagedResponseDealerDBModelsVoucherHistory> localVarResp = vouchersGetVoucherHistoryWithHttpInfo(voucherCode, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Get a voucher&#39;s history.
     * No Documentation Found.
     * @param voucherCode The voucher code to get history for. (required)
     * @param limit Optional. The page limit. The default page limit is 10. (optional)
     * @param offset Optional. The page offset. The default page offset is 0. (optional)
     * @return ApiResponse&lt;APIPagedResponseDealerDBModelsVoucherHistory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<APIPagedResponseDealerDBModelsVoucherHistory> vouchersGetVoucherHistoryWithHttpInfo(String voucherCode, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = vouchersGetVoucherHistoryValidateBeforeCall(voucherCode, limit, offset, null);
        Type localVarReturnType = new TypeToken<APIPagedResponseDealerDBModelsVoucherHistory>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a voucher&#39;s history. (asynchronously)
     * No Documentation Found.
     * @param voucherCode The voucher code to get history for. (required)
     * @param limit Optional. The page limit. The default page limit is 10. (optional)
     * @param offset Optional. The page offset. The default page offset is 0. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vouchersGetVoucherHistoryAsync(String voucherCode, Integer limit, Integer offset, final ApiCallback<APIPagedResponseDealerDBModelsVoucherHistory> _callback) throws ApiException {

        okhttp3.Call localVarCall = vouchersGetVoucherHistoryValidateBeforeCall(voucherCode, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<APIPagedResponseDealerDBModelsVoucherHistory>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for vouchersPost
     * @param dealerDBModelsVoucher The voucher to add. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vouchersPostCall(DealerDBModelsVoucher dealerDBModelsVoucher, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dealerDBModelsVoucher;

        // create path and map variables
        String localVarPath = "/api/v2/Vouchers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vouchersPostValidateBeforeCall(DealerDBModelsVoucher dealerDBModelsVoucher, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dealerDBModelsVoucher' is set
        if (dealerDBModelsVoucher == null) {
            throw new ApiException("Missing the required parameter 'dealerDBModelsVoucher' when calling vouchersPost(Async)");
        }

        return vouchersPostCall(dealerDBModelsVoucher, _callback);

    }

    /**
     * Create a voucher
     * No Documentation Found.
     * @param dealerDBModelsVoucher The voucher to add. (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public String vouchersPost(DealerDBModelsVoucher dealerDBModelsVoucher) throws ApiException {
        ApiResponse<String> localVarResp = vouchersPostWithHttpInfo(dealerDBModelsVoucher);
        return localVarResp.getData();
    }

    /**
     * Create a voucher
     * No Documentation Found.
     * @param dealerDBModelsVoucher The voucher to add. (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> vouchersPostWithHttpInfo(DealerDBModelsVoucher dealerDBModelsVoucher) throws ApiException {
        okhttp3.Call localVarCall = vouchersPostValidateBeforeCall(dealerDBModelsVoucher, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a voucher (asynchronously)
     * No Documentation Found.
     * @param dealerDBModelsVoucher The voucher to add. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vouchersPostAsync(DealerDBModelsVoucher dealerDBModelsVoucher, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = vouchersPostValidateBeforeCall(dealerDBModelsVoucher, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for vouchersPut
     * @param voucherCode The voucher code of the voucher to update. (required)
     * @param dealerDBModelsVoucher The updated voucher. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vouchersPutCall(String voucherCode, DealerDBModelsVoucher dealerDBModelsVoucher, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dealerDBModelsVoucher;

        // create path and map variables
        String localVarPath = "/api/v2/Vouchers/{VoucherCode}"
            .replace("{" + "VoucherCode" + "}", localVarApiClient.escapeString(voucherCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vouchersPutValidateBeforeCall(String voucherCode, DealerDBModelsVoucher dealerDBModelsVoucher, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'voucherCode' is set
        if (voucherCode == null) {
            throw new ApiException("Missing the required parameter 'voucherCode' when calling vouchersPut(Async)");
        }

        // verify the required parameter 'dealerDBModelsVoucher' is set
        if (dealerDBModelsVoucher == null) {
            throw new ApiException("Missing the required parameter 'dealerDBModelsVoucher' when calling vouchersPut(Async)");
        }

        return vouchersPutCall(voucherCode, dealerDBModelsVoucher, _callback);

    }

    /**
     * Update a voucher
     * No Documentation Found.
     * @param voucherCode The voucher code of the voucher to update. (required)
     * @param dealerDBModelsVoucher The updated voucher. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void vouchersPut(String voucherCode, DealerDBModelsVoucher dealerDBModelsVoucher) throws ApiException {
        vouchersPutWithHttpInfo(voucherCode, dealerDBModelsVoucher);
    }

    /**
     * Update a voucher
     * No Documentation Found.
     * @param voucherCode The voucher code of the voucher to update. (required)
     * @param dealerDBModelsVoucher The updated voucher. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> vouchersPutWithHttpInfo(String voucherCode, DealerDBModelsVoucher dealerDBModelsVoucher) throws ApiException {
        okhttp3.Call localVarCall = vouchersPutValidateBeforeCall(voucherCode, dealerDBModelsVoucher, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update a voucher (asynchronously)
     * No Documentation Found.
     * @param voucherCode The voucher code of the voucher to update. (required)
     * @param dealerDBModelsVoucher The updated voucher. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vouchersPutAsync(String voucherCode, DealerDBModelsVoucher dealerDBModelsVoucher, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = vouchersPutValidateBeforeCall(voucherCode, dealerDBModelsVoucher, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
