/*
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.APIIPagedResponseAuthorizationCodesSharedModelsAuthorizationCode;
import org.openapitools.client.model.APIModelsApiError;
import org.openapitools.client.model.AuthorizationCodesSharedModelsAuthorizationCode;
import org.openapitools.client.model.AuthorizationCodesSharedModelsAuthorizationContactInformation;
import org.openapitools.client.model.AuthorizationCodesSharedModelsCodeValidationModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AuthorizationCodesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AuthorizationCodesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AuthorizationCodesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for authorizationCodesDeleteAuthorizationCode
     * @param id The id of the authorization code. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authorizationCodesDeleteAuthorizationCodeCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/AuthorizationCodes/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authorizationCodesDeleteAuthorizationCodeValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling authorizationCodesDeleteAuthorizationCode(Async)");
        }

        return authorizationCodesDeleteAuthorizationCodeCall(id, _callback);

    }

    /**
     * Hide an authorization code.
     * No Documentation Found.
     * @param id The id of the authorization code. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public void authorizationCodesDeleteAuthorizationCode(Integer id) throws ApiException {
        authorizationCodesDeleteAuthorizationCodeWithHttpInfo(id);
    }

    /**
     * Hide an authorization code.
     * No Documentation Found.
     * @param id The id of the authorization code. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> authorizationCodesDeleteAuthorizationCodeWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = authorizationCodesDeleteAuthorizationCodeValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Hide an authorization code. (asynchronously)
     * No Documentation Found.
     * @param id The id of the authorization code. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authorizationCodesDeleteAuthorizationCodeAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = authorizationCodesDeleteAuthorizationCodeValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for authorizationCodesGetAuthorizationCode
     * @param id The id of the authorization code. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authorizationCodesGetAuthorizationCodeCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/AuthorizationCodes/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authorizationCodesGetAuthorizationCodeValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling authorizationCodesGetAuthorizationCode(Async)");
        }

        return authorizationCodesGetAuthorizationCodeCall(id, _callback);

    }

    /**
     * Get an authorization code by its ID.
     * No Documentation Found.
     * @param id The id of the authorization code. (required)
     * @return AuthorizationCodesSharedModelsAuthorizationCode
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public AuthorizationCodesSharedModelsAuthorizationCode authorizationCodesGetAuthorizationCode(Integer id) throws ApiException {
        ApiResponse<AuthorizationCodesSharedModelsAuthorizationCode> localVarResp = authorizationCodesGetAuthorizationCodeWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get an authorization code by its ID.
     * No Documentation Found.
     * @param id The id of the authorization code. (required)
     * @return ApiResponse&lt;AuthorizationCodesSharedModelsAuthorizationCode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthorizationCodesSharedModelsAuthorizationCode> authorizationCodesGetAuthorizationCodeWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = authorizationCodesGetAuthorizationCodeValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<AuthorizationCodesSharedModelsAuthorizationCode>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an authorization code by its ID. (asynchronously)
     * No Documentation Found.
     * @param id The id of the authorization code. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authorizationCodesGetAuthorizationCodeAsync(Integer id, final ApiCallback<AuthorizationCodesSharedModelsAuthorizationCode> _callback) throws ApiException {

        okhttp3.Call localVarCall = authorizationCodesGetAuthorizationCodeValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<AuthorizationCodesSharedModelsAuthorizationCode>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for authorizationCodesGetAuthorizationCodes
     * @param code Optional. If provided, searches for entities with the provided authorization code. (optional)
     * @param limit Optional. The page limit.  If not specified, the default page limit is 10. (optional)
     * @param offset Optional. The page offset.  If not specified, the default page offset is 0. (optional)
     * @param definitionID Optional. If specified, filters codes by definition id. (optional)
     * @param createdByUserID Optional. If specified, filters codes to those created by the given User ID. (optional)
     * @param deletedByUserID Optional. If specified, filters codes to those deleted by the given User ID. (optional)
     * @param includeDeleted Optional. Whether to include deleted codes. &#39;False&#39; by default. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authorizationCodesGetAuthorizationCodesCall(String code, Integer limit, Integer offset, String definitionID, Integer createdByUserID, Integer deletedByUserID, Boolean includeDeleted, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/AuthorizationCodes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (code != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("code", code));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (definitionID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("definitionID", definitionID));
        }

        if (createdByUserID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdByUserID", createdByUserID));
        }

        if (deletedByUserID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deletedByUserID", deletedByUserID));
        }

        if (includeDeleted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeDeleted", includeDeleted));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authorizationCodesGetAuthorizationCodesValidateBeforeCall(String code, Integer limit, Integer offset, String definitionID, Integer createdByUserID, Integer deletedByUserID, Boolean includeDeleted, final ApiCallback _callback) throws ApiException {
        return authorizationCodesGetAuthorizationCodesCall(code, limit, offset, definitionID, createdByUserID, deletedByUserID, includeDeleted, _callback);

    }

    /**
     * Get authorization codes.
     * Additional searches: validationParameters[Name]&#x3D;Value and dataParameters[Name]&#x3D;Value. These can be used to search for authorization codes that have been generated using specified values for data or validation parameters.
     * @param code Optional. If provided, searches for entities with the provided authorization code. (optional)
     * @param limit Optional. The page limit.  If not specified, the default page limit is 10. (optional)
     * @param offset Optional. The page offset.  If not specified, the default page offset is 0. (optional)
     * @param definitionID Optional. If specified, filters codes by definition id. (optional)
     * @param createdByUserID Optional. If specified, filters codes to those created by the given User ID. (optional)
     * @param deletedByUserID Optional. If specified, filters codes to those deleted by the given User ID. (optional)
     * @param includeDeleted Optional. Whether to include deleted codes. &#39;False&#39; by default. (optional)
     * @return APIIPagedResponseAuthorizationCodesSharedModelsAuthorizationCode
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public APIIPagedResponseAuthorizationCodesSharedModelsAuthorizationCode authorizationCodesGetAuthorizationCodes(String code, Integer limit, Integer offset, String definitionID, Integer createdByUserID, Integer deletedByUserID, Boolean includeDeleted) throws ApiException {
        ApiResponse<APIIPagedResponseAuthorizationCodesSharedModelsAuthorizationCode> localVarResp = authorizationCodesGetAuthorizationCodesWithHttpInfo(code, limit, offset, definitionID, createdByUserID, deletedByUserID, includeDeleted);
        return localVarResp.getData();
    }

    /**
     * Get authorization codes.
     * Additional searches: validationParameters[Name]&#x3D;Value and dataParameters[Name]&#x3D;Value. These can be used to search for authorization codes that have been generated using specified values for data or validation parameters.
     * @param code Optional. If provided, searches for entities with the provided authorization code. (optional)
     * @param limit Optional. The page limit.  If not specified, the default page limit is 10. (optional)
     * @param offset Optional. The page offset.  If not specified, the default page offset is 0. (optional)
     * @param definitionID Optional. If specified, filters codes by definition id. (optional)
     * @param createdByUserID Optional. If specified, filters codes to those created by the given User ID. (optional)
     * @param deletedByUserID Optional. If specified, filters codes to those deleted by the given User ID. (optional)
     * @param includeDeleted Optional. Whether to include deleted codes. &#39;False&#39; by default. (optional)
     * @return ApiResponse&lt;APIIPagedResponseAuthorizationCodesSharedModelsAuthorizationCode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<APIIPagedResponseAuthorizationCodesSharedModelsAuthorizationCode> authorizationCodesGetAuthorizationCodesWithHttpInfo(String code, Integer limit, Integer offset, String definitionID, Integer createdByUserID, Integer deletedByUserID, Boolean includeDeleted) throws ApiException {
        okhttp3.Call localVarCall = authorizationCodesGetAuthorizationCodesValidateBeforeCall(code, limit, offset, definitionID, createdByUserID, deletedByUserID, includeDeleted, null);
        Type localVarReturnType = new TypeToken<APIIPagedResponseAuthorizationCodesSharedModelsAuthorizationCode>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get authorization codes. (asynchronously)
     * Additional searches: validationParameters[Name]&#x3D;Value and dataParameters[Name]&#x3D;Value. These can be used to search for authorization codes that have been generated using specified values for data or validation parameters.
     * @param code Optional. If provided, searches for entities with the provided authorization code. (optional)
     * @param limit Optional. The page limit.  If not specified, the default page limit is 10. (optional)
     * @param offset Optional. The page offset.  If not specified, the default page offset is 0. (optional)
     * @param definitionID Optional. If specified, filters codes by definition id. (optional)
     * @param createdByUserID Optional. If specified, filters codes to those created by the given User ID. (optional)
     * @param deletedByUserID Optional. If specified, filters codes to those deleted by the given User ID. (optional)
     * @param includeDeleted Optional. Whether to include deleted codes. &#39;False&#39; by default. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authorizationCodesGetAuthorizationCodesAsync(String code, Integer limit, Integer offset, String definitionID, Integer createdByUserID, Integer deletedByUserID, Boolean includeDeleted, final ApiCallback<APIIPagedResponseAuthorizationCodesSharedModelsAuthorizationCode> _callback) throws ApiException {

        okhttp3.Call localVarCall = authorizationCodesGetAuthorizationCodesValidateBeforeCall(code, limit, offset, definitionID, createdByUserID, deletedByUserID, includeDeleted, _callback);
        Type localVarReturnType = new TypeToken<APIIPagedResponseAuthorizationCodesSharedModelsAuthorizationCode>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for authorizationCodesGetContactInformation
     * @param id The id of the authorization code. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authorizationCodesGetContactInformationCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/AuthorizationCodes/{id}/ContactInformation"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authorizationCodesGetContactInformationValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling authorizationCodesGetContactInformation(Async)");
        }

        return authorizationCodesGetContactInformationCall(id, _callback);

    }

    /**
     * Get contact information for an authorization code.
     * No Documentation Found.
     * @param id The id of the authorization code. (required)
     * @return AuthorizationCodesSharedModelsAuthorizationContactInformation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public AuthorizationCodesSharedModelsAuthorizationContactInformation authorizationCodesGetContactInformation(Integer id) throws ApiException {
        ApiResponse<AuthorizationCodesSharedModelsAuthorizationContactInformation> localVarResp = authorizationCodesGetContactInformationWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get contact information for an authorization code.
     * No Documentation Found.
     * @param id The id of the authorization code. (required)
     * @return ApiResponse&lt;AuthorizationCodesSharedModelsAuthorizationContactInformation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthorizationCodesSharedModelsAuthorizationContactInformation> authorizationCodesGetContactInformationWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = authorizationCodesGetContactInformationValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<AuthorizationCodesSharedModelsAuthorizationContactInformation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get contact information for an authorization code. (asynchronously)
     * No Documentation Found.
     * @param id The id of the authorization code. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authorizationCodesGetContactInformationAsync(Integer id, final ApiCallback<AuthorizationCodesSharedModelsAuthorizationContactInformation> _callback) throws ApiException {

        okhttp3.Call localVarCall = authorizationCodesGetContactInformationValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<AuthorizationCodesSharedModelsAuthorizationContactInformation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for authorizationCodesPostAuthorizationCode
     * @param authorizationCodesSharedModelsAuthorizationCode The model from which to generate an authorization code. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authorizationCodesPostAuthorizationCodeCall(AuthorizationCodesSharedModelsAuthorizationCode authorizationCodesSharedModelsAuthorizationCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authorizationCodesSharedModelsAuthorizationCode;

        // create path and map variables
        String localVarPath = "/api/v2/AuthorizationCodes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authorizationCodesPostAuthorizationCodeValidateBeforeCall(AuthorizationCodesSharedModelsAuthorizationCode authorizationCodesSharedModelsAuthorizationCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorizationCodesSharedModelsAuthorizationCode' is set
        if (authorizationCodesSharedModelsAuthorizationCode == null) {
            throw new ApiException("Missing the required parameter 'authorizationCodesSharedModelsAuthorizationCode' when calling authorizationCodesPostAuthorizationCode(Async)");
        }

        return authorizationCodesPostAuthorizationCodeCall(authorizationCodesSharedModelsAuthorizationCode, _callback);

    }

    /**
     * Generates an authorization code using the provided definition and parameters.
     * No Documentation Found.
     * @param authorizationCodesSharedModelsAuthorizationCode The model from which to generate an authorization code. (required)
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public Integer authorizationCodesPostAuthorizationCode(AuthorizationCodesSharedModelsAuthorizationCode authorizationCodesSharedModelsAuthorizationCode) throws ApiException {
        ApiResponse<Integer> localVarResp = authorizationCodesPostAuthorizationCodeWithHttpInfo(authorizationCodesSharedModelsAuthorizationCode);
        return localVarResp.getData();
    }

    /**
     * Generates an authorization code using the provided definition and parameters.
     * No Documentation Found.
     * @param authorizationCodesSharedModelsAuthorizationCode The model from which to generate an authorization code. (required)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Integer> authorizationCodesPostAuthorizationCodeWithHttpInfo(AuthorizationCodesSharedModelsAuthorizationCode authorizationCodesSharedModelsAuthorizationCode) throws ApiException {
        okhttp3.Call localVarCall = authorizationCodesPostAuthorizationCodeValidateBeforeCall(authorizationCodesSharedModelsAuthorizationCode, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generates an authorization code using the provided definition and parameters. (asynchronously)
     * No Documentation Found.
     * @param authorizationCodesSharedModelsAuthorizationCode The model from which to generate an authorization code. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authorizationCodesPostAuthorizationCodeAsync(AuthorizationCodesSharedModelsAuthorizationCode authorizationCodesSharedModelsAuthorizationCode, final ApiCallback<Integer> _callback) throws ApiException {

        okhttp3.Call localVarCall = authorizationCodesPostAuthorizationCodeValidateBeforeCall(authorizationCodesSharedModelsAuthorizationCode, _callback);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for authorizationCodesPutAuthorizationCode
     * @param id The id of the authorization code. (required)
     * @param authorizationCodesSharedModelsAuthorizationCode The model from which to update an authorization code. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authorizationCodesPutAuthorizationCodeCall(Integer id, AuthorizationCodesSharedModelsAuthorizationCode authorizationCodesSharedModelsAuthorizationCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authorizationCodesSharedModelsAuthorizationCode;

        // create path and map variables
        String localVarPath = "/api/v2/AuthorizationCodes/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authorizationCodesPutAuthorizationCodeValidateBeforeCall(Integer id, AuthorizationCodesSharedModelsAuthorizationCode authorizationCodesSharedModelsAuthorizationCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling authorizationCodesPutAuthorizationCode(Async)");
        }

        // verify the required parameter 'authorizationCodesSharedModelsAuthorizationCode' is set
        if (authorizationCodesSharedModelsAuthorizationCode == null) {
            throw new ApiException("Missing the required parameter 'authorizationCodesSharedModelsAuthorizationCode' when calling authorizationCodesPutAuthorizationCode(Async)");
        }

        return authorizationCodesPutAuthorizationCodeCall(id, authorizationCodesSharedModelsAuthorizationCode, _callback);

    }

    /**
     * Update an authorization code.
     * No Documentation Found.
     * @param id The id of the authorization code. (required)
     * @param authorizationCodesSharedModelsAuthorizationCode The model from which to update an authorization code. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public void authorizationCodesPutAuthorizationCode(Integer id, AuthorizationCodesSharedModelsAuthorizationCode authorizationCodesSharedModelsAuthorizationCode) throws ApiException {
        authorizationCodesPutAuthorizationCodeWithHttpInfo(id, authorizationCodesSharedModelsAuthorizationCode);
    }

    /**
     * Update an authorization code.
     * No Documentation Found.
     * @param id The id of the authorization code. (required)
     * @param authorizationCodesSharedModelsAuthorizationCode The model from which to update an authorization code. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> authorizationCodesPutAuthorizationCodeWithHttpInfo(Integer id, AuthorizationCodesSharedModelsAuthorizationCode authorizationCodesSharedModelsAuthorizationCode) throws ApiException {
        okhttp3.Call localVarCall = authorizationCodesPutAuthorizationCodeValidateBeforeCall(id, authorizationCodesSharedModelsAuthorizationCode, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update an authorization code. (asynchronously)
     * No Documentation Found.
     * @param id The id of the authorization code. (required)
     * @param authorizationCodesSharedModelsAuthorizationCode The model from which to update an authorization code. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authorizationCodesPutAuthorizationCodeAsync(Integer id, AuthorizationCodesSharedModelsAuthorizationCode authorizationCodesSharedModelsAuthorizationCode, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = authorizationCodesPutAuthorizationCodeValidateBeforeCall(id, authorizationCodesSharedModelsAuthorizationCode, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for authorizationCodesValidateAuthorizationCode
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authorizationCodesValidateAuthorizationCodeCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/AuthorizationCodes/{id}/Validate"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authorizationCodesValidateAuthorizationCodeValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling authorizationCodesValidateAuthorizationCode(Async)");
        }

        return authorizationCodesValidateAuthorizationCodeCall(id, _callback);

    }

    /**
     * No Documentation Found.
     * No Documentation Found.
     * @param id  (required)
     * @return AuthorizationCodesSharedModelsCodeValidationModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public AuthorizationCodesSharedModelsCodeValidationModel authorizationCodesValidateAuthorizationCode(Integer id) throws ApiException {
        ApiResponse<AuthorizationCodesSharedModelsCodeValidationModel> localVarResp = authorizationCodesValidateAuthorizationCodeWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * No Documentation Found.
     * No Documentation Found.
     * @param id  (required)
     * @return ApiResponse&lt;AuthorizationCodesSharedModelsCodeValidationModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthorizationCodesSharedModelsCodeValidationModel> authorizationCodesValidateAuthorizationCodeWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = authorizationCodesValidateAuthorizationCodeValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<AuthorizationCodesSharedModelsCodeValidationModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * No Documentation Found. (asynchronously)
     * No Documentation Found.
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authorizationCodesValidateAuthorizationCodeAsync(Integer id, final ApiCallback<AuthorizationCodesSharedModelsCodeValidationModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = authorizationCodesValidateAuthorizationCodeValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<AuthorizationCodesSharedModelsCodeValidationModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
