/*
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateSystemModelsUpdateGroupSubscription
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:35.511967-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateSystemModelsUpdateGroupSubscription {
  public static final String SERIALIZED_NAME_CLIENT_I_D = "ClientID";
  @SerializedName(SERIALIZED_NAME_CLIENT_I_D)
  private String clientID;

  public static final String SERIALIZED_NAME_INCLUDE = "Include";
  @SerializedName(SERIALIZED_NAME_INCLUDE)
  private Boolean include;

  public static final String SERIALIZED_NAME_PACKAGE_TYPE_I_D = "PackageTypeID";
  @SerializedName(SERIALIZED_NAME_PACKAGE_TYPE_I_D)
  private String packageTypeID;

  public static final String SERIALIZED_NAME_UPDATE_GROUP_I_D = "UpdateGroupID";
  @SerializedName(SERIALIZED_NAME_UPDATE_GROUP_I_D)
  private String updateGroupID;

  public static final String SERIALIZED_NAME_UPDATE_GROUP_SUBSCRIPTION_I_D = "UpdateGroupSubscriptionID";
  @SerializedName(SERIALIZED_NAME_UPDATE_GROUP_SUBSCRIPTION_I_D)
  private Integer updateGroupSubscriptionID;

  public UpdateSystemModelsUpdateGroupSubscription() {
  }

  public UpdateSystemModelsUpdateGroupSubscription clientID(String clientID) {
    this.clientID = clientID;
    return this;
  }

  /**
   * The ClientID.
   * @return clientID
   */
  @javax.annotation.Nonnull
  public String getClientID() {
    return clientID;
  }

  public void setClientID(String clientID) {
    this.clientID = clientID;
  }


  public UpdateSystemModelsUpdateGroupSubscription include(Boolean include) {
    this.include = include;
    return this;
  }

  /**
   * True to receive content of type indicated by PackageTypeID.
   * @return include
   */
  @javax.annotation.Nonnull
  public Boolean getInclude() {
    return include;
  }

  public void setInclude(Boolean include) {
    this.include = include;
  }


  public UpdateSystemModelsUpdateGroupSubscription packageTypeID(String packageTypeID) {
    this.packageTypeID = packageTypeID;
    return this;
  }

  /**
   * The PackageType to set subscription status for
   * @return packageTypeID
   */
  @javax.annotation.Nonnull
  public String getPackageTypeID() {
    return packageTypeID;
  }

  public void setPackageTypeID(String packageTypeID) {
    this.packageTypeID = packageTypeID;
  }


  public UpdateSystemModelsUpdateGroupSubscription updateGroupID(String updateGroupID) {
    this.updateGroupID = updateGroupID;
    return this;
  }

  /**
   * The Update Group this subscription is relevant for.
   * @return updateGroupID
   */
  @javax.annotation.Nonnull
  public String getUpdateGroupID() {
    return updateGroupID;
  }

  public void setUpdateGroupID(String updateGroupID) {
    this.updateGroupID = updateGroupID;
  }


  public UpdateSystemModelsUpdateGroupSubscription updateGroupSubscriptionID(Integer updateGroupSubscriptionID) {
    this.updateGroupSubscriptionID = updateGroupSubscriptionID;
    return this;
  }

  /**
   * The Update Group Subscription ID.  This ID will be automatically assigned when creating an Update Group Subscription.
   * @return updateGroupSubscriptionID
   */
  @javax.annotation.Nullable
  public Integer getUpdateGroupSubscriptionID() {
    return updateGroupSubscriptionID;
  }

  public void setUpdateGroupSubscriptionID(Integer updateGroupSubscriptionID) {
    this.updateGroupSubscriptionID = updateGroupSubscriptionID;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateSystemModelsUpdateGroupSubscription updateSystemModelsUpdateGroupSubscription = (UpdateSystemModelsUpdateGroupSubscription) o;
    return Objects.equals(this.clientID, updateSystemModelsUpdateGroupSubscription.clientID) &&
        Objects.equals(this.include, updateSystemModelsUpdateGroupSubscription.include) &&
        Objects.equals(this.packageTypeID, updateSystemModelsUpdateGroupSubscription.packageTypeID) &&
        Objects.equals(this.updateGroupID, updateSystemModelsUpdateGroupSubscription.updateGroupID) &&
        Objects.equals(this.updateGroupSubscriptionID, updateSystemModelsUpdateGroupSubscription.updateGroupSubscriptionID);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientID, include, packageTypeID, updateGroupID, updateGroupSubscriptionID);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateSystemModelsUpdateGroupSubscription {\n");
    sb.append("    clientID: ").append(toIndentedString(clientID)).append("\n");
    sb.append("    include: ").append(toIndentedString(include)).append("\n");
    sb.append("    packageTypeID: ").append(toIndentedString(packageTypeID)).append("\n");
    sb.append("    updateGroupID: ").append(toIndentedString(updateGroupID)).append("\n");
    sb.append("    updateGroupSubscriptionID: ").append(toIndentedString(updateGroupSubscriptionID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ClientID");
    openapiFields.add("Include");
    openapiFields.add("PackageTypeID");
    openapiFields.add("UpdateGroupID");
    openapiFields.add("UpdateGroupSubscriptionID");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ClientID");
    openapiRequiredFields.add("Include");
    openapiRequiredFields.add("PackageTypeID");
    openapiRequiredFields.add("UpdateGroupID");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateSystemModelsUpdateGroupSubscription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateSystemModelsUpdateGroupSubscription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateSystemModelsUpdateGroupSubscription is not found in the empty JSON string", UpdateSystemModelsUpdateGroupSubscription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateSystemModelsUpdateGroupSubscription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateSystemModelsUpdateGroupSubscription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateSystemModelsUpdateGroupSubscription.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("ClientID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ClientID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ClientID").toString()));
      }
      if (!jsonObj.get("PackageTypeID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PackageTypeID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PackageTypeID").toString()));
      }
      if (!jsonObj.get("UpdateGroupID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UpdateGroupID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UpdateGroupID").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateSystemModelsUpdateGroupSubscription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateSystemModelsUpdateGroupSubscription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateSystemModelsUpdateGroupSubscription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateSystemModelsUpdateGroupSubscription.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateSystemModelsUpdateGroupSubscription>() {
           @Override
           public void write(JsonWriter out, UpdateSystemModelsUpdateGroupSubscription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateSystemModelsUpdateGroupSubscription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateSystemModelsUpdateGroupSubscription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateSystemModelsUpdateGroupSubscription
   * @throws IOException if the JSON string is invalid with respect to UpdateSystemModelsUpdateGroupSubscription
   */
  public static UpdateSystemModelsUpdateGroupSubscription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateSystemModelsUpdateGroupSubscription.class);
  }

  /**
   * Convert an instance of UpdateSystemModelsUpdateGroupSubscription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

