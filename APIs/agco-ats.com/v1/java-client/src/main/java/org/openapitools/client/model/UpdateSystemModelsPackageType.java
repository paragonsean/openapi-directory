/*
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateSystemModelsPackageType
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:35.511967-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateSystemModelsPackageType {
  public static final String SERIALIZED_NAME_ATTRIBUTE = "Attribute";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE)
  private String attribute;

  public static final String SERIALIZED_NAME_CATEGORY = "Category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private String category;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ICON = "Icon";
  @SerializedName(SERIALIZED_NAME_ICON)
  private String icon;

  public static final String SERIALIZED_NAME_INVENTORY_FREQUENCY = "InventoryFrequency";
  @SerializedName(SERIALIZED_NAME_INVENTORY_FREQUENCY)
  private Integer inventoryFrequency;

  public static final String SERIALIZED_NAME_INVENTORY_PACKAGE = "InventoryPackage";
  @SerializedName(SERIALIZED_NAME_INVENTORY_PACKAGE)
  private String inventoryPackage;

  public static final String SERIALIZED_NAME_LOCALIZED_DESCRIPTION = "LocalizedDescription";
  @SerializedName(SERIALIZED_NAME_LOCALIZED_DESCRIPTION)
  private String localizedDescription;

  public static final String SERIALIZED_NAME_LOCALIZED_NAME = "LocalizedName";
  @SerializedName(SERIALIZED_NAME_LOCALIZED_NAME)
  private String localizedName;

  public static final String SERIALIZED_NAME_MAX_DELTA_PACKAGES = "MaxDeltaPackages";
  @SerializedName(SERIALIZED_NAME_MAX_DELTA_PACKAGES)
  private Integer maxDeltaPackages;

  public static final String SERIALIZED_NAME_PACKAGE_TYPE_I_D = "PackageTypeID";
  @SerializedName(SERIALIZED_NAME_PACKAGE_TYPE_I_D)
  private String packageTypeID;

  public UpdateSystemModelsPackageType() {
  }

  public UpdateSystemModelsPackageType attribute(String attribute) {
    this.attribute = attribute;
    return this;
  }

  /**
   * The inventory attribute (from the InventoryPackage) used to determine what version of this package type is installed.
   * @return attribute
   */
  @javax.annotation.Nullable
  public String getAttribute() {
    return attribute;
  }

  public void setAttribute(String attribute) {
    this.attribute = attribute;
  }


  public UpdateSystemModelsPackageType category(String category) {
    this.category = category;
    return this;
  }

  /**
   * The inventory category (from the InventoryPackage) used to determine what version of this package type is installed.
   * @return category
   */
  @javax.annotation.Nullable
  public String getCategory() {
    return category;
  }

  public void setCategory(String category) {
    this.category = category;
  }


  public UpdateSystemModelsPackageType description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of the package type
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public UpdateSystemModelsPackageType icon(String icon) {
    this.icon = icon;
    return this;
  }

  /**
   * Optional.  The icon to use for the PackageType, in base 64
   * @return icon
   */
  @javax.annotation.Nullable
  public String getIcon() {
    return icon;
  }

  public void setIcon(String icon) {
    this.icon = icon;
  }


  public UpdateSystemModelsPackageType inventoryFrequency(Integer inventoryFrequency) {
    this.inventoryFrequency = inventoryFrequency;
    return this;
  }

  /**
   * The number of minutes to wait before requesting another inventory.  The default value is 1440 (24 hours).
   * @return inventoryFrequency
   */
  @javax.annotation.Nullable
  public Integer getInventoryFrequency() {
    return inventoryFrequency;
  }

  public void setInventoryFrequency(Integer inventoryFrequency) {
    this.inventoryFrequency = inventoryFrequency;
  }


  public UpdateSystemModelsPackageType inventoryPackage(String inventoryPackage) {
    this.inventoryPackage = inventoryPackage;
    return this;
  }

  /**
   * The inventory package used to determine what version of this package type is installed.
   * @return inventoryPackage
   */
  @javax.annotation.Nullable
  public String getInventoryPackage() {
    return inventoryPackage;
  }

  public void setInventoryPackage(String inventoryPackage) {
    this.inventoryPackage = inventoryPackage;
  }


  public UpdateSystemModelsPackageType localizedDescription(String localizedDescription) {
    this.localizedDescription = localizedDescription;
    return this;
  }

  /**
   * Optional. The StringID used to localize the description of the PackageType
   * @return localizedDescription
   */
  @javax.annotation.Nullable
  public String getLocalizedDescription() {
    return localizedDescription;
  }

  public void setLocalizedDescription(String localizedDescription) {
    this.localizedDescription = localizedDescription;
  }


  public UpdateSystemModelsPackageType localizedName(String localizedName) {
    this.localizedName = localizedName;
    return this;
  }

  /**
   * Optional. The StringID used to localize the name of the PackageType
   * @return localizedName
   */
  @javax.annotation.Nullable
  public String getLocalizedName() {
    return localizedName;
  }

  public void setLocalizedName(String localizedName) {
    this.localizedName = localizedName;
  }


  public UpdateSystemModelsPackageType maxDeltaPackages(Integer maxDeltaPackages) {
    this.maxDeltaPackages = maxDeltaPackages;
    return this;
  }

  /**
   * The maximum number of \&quot;chained\&quot; delta packages to use when updating the client
   * @return maxDeltaPackages
   */
  @javax.annotation.Nullable
  public Integer getMaxDeltaPackages() {
    return maxDeltaPackages;
  }

  public void setMaxDeltaPackages(Integer maxDeltaPackages) {
    this.maxDeltaPackages = maxDeltaPackages;
  }


  public UpdateSystemModelsPackageType packageTypeID(String packageTypeID) {
    this.packageTypeID = packageTypeID;
    return this;
  }

  /**
   * Read Only. The package type id.
   * @return packageTypeID
   */
  @javax.annotation.Nullable
  public String getPackageTypeID() {
    return packageTypeID;
  }

  public void setPackageTypeID(String packageTypeID) {
    this.packageTypeID = packageTypeID;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateSystemModelsPackageType updateSystemModelsPackageType = (UpdateSystemModelsPackageType) o;
    return Objects.equals(this.attribute, updateSystemModelsPackageType.attribute) &&
        Objects.equals(this.category, updateSystemModelsPackageType.category) &&
        Objects.equals(this.description, updateSystemModelsPackageType.description) &&
        Objects.equals(this.icon, updateSystemModelsPackageType.icon) &&
        Objects.equals(this.inventoryFrequency, updateSystemModelsPackageType.inventoryFrequency) &&
        Objects.equals(this.inventoryPackage, updateSystemModelsPackageType.inventoryPackage) &&
        Objects.equals(this.localizedDescription, updateSystemModelsPackageType.localizedDescription) &&
        Objects.equals(this.localizedName, updateSystemModelsPackageType.localizedName) &&
        Objects.equals(this.maxDeltaPackages, updateSystemModelsPackageType.maxDeltaPackages) &&
        Objects.equals(this.packageTypeID, updateSystemModelsPackageType.packageTypeID);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attribute, category, description, icon, inventoryFrequency, inventoryPackage, localizedDescription, localizedName, maxDeltaPackages, packageTypeID);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateSystemModelsPackageType {\n");
    sb.append("    attribute: ").append(toIndentedString(attribute)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    icon: ").append(toIndentedString(icon)).append("\n");
    sb.append("    inventoryFrequency: ").append(toIndentedString(inventoryFrequency)).append("\n");
    sb.append("    inventoryPackage: ").append(toIndentedString(inventoryPackage)).append("\n");
    sb.append("    localizedDescription: ").append(toIndentedString(localizedDescription)).append("\n");
    sb.append("    localizedName: ").append(toIndentedString(localizedName)).append("\n");
    sb.append("    maxDeltaPackages: ").append(toIndentedString(maxDeltaPackages)).append("\n");
    sb.append("    packageTypeID: ").append(toIndentedString(packageTypeID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Attribute");
    openapiFields.add("Category");
    openapiFields.add("Description");
    openapiFields.add("Icon");
    openapiFields.add("InventoryFrequency");
    openapiFields.add("InventoryPackage");
    openapiFields.add("LocalizedDescription");
    openapiFields.add("LocalizedName");
    openapiFields.add("MaxDeltaPackages");
    openapiFields.add("PackageTypeID");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Description");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateSystemModelsPackageType
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateSystemModelsPackageType.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateSystemModelsPackageType is not found in the empty JSON string", UpdateSystemModelsPackageType.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateSystemModelsPackageType.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateSystemModelsPackageType` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateSystemModelsPackageType.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Attribute") != null && !jsonObj.get("Attribute").isJsonNull()) && !jsonObj.get("Attribute").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Attribute` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Attribute").toString()));
      }
      if ((jsonObj.get("Category") != null && !jsonObj.get("Category").isJsonNull()) && !jsonObj.get("Category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Category").toString()));
      }
      if (!jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      if ((jsonObj.get("Icon") != null && !jsonObj.get("Icon").isJsonNull()) && !jsonObj.get("Icon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Icon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Icon").toString()));
      }
      if ((jsonObj.get("InventoryPackage") != null && !jsonObj.get("InventoryPackage").isJsonNull()) && !jsonObj.get("InventoryPackage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `InventoryPackage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("InventoryPackage").toString()));
      }
      if ((jsonObj.get("LocalizedDescription") != null && !jsonObj.get("LocalizedDescription").isJsonNull()) && !jsonObj.get("LocalizedDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LocalizedDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LocalizedDescription").toString()));
      }
      if ((jsonObj.get("LocalizedName") != null && !jsonObj.get("LocalizedName").isJsonNull()) && !jsonObj.get("LocalizedName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LocalizedName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LocalizedName").toString()));
      }
      if ((jsonObj.get("PackageTypeID") != null && !jsonObj.get("PackageTypeID").isJsonNull()) && !jsonObj.get("PackageTypeID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PackageTypeID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PackageTypeID").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateSystemModelsPackageType.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateSystemModelsPackageType' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateSystemModelsPackageType> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateSystemModelsPackageType.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateSystemModelsPackageType>() {
           @Override
           public void write(JsonWriter out, UpdateSystemModelsPackageType value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateSystemModelsPackageType read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateSystemModelsPackageType given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateSystemModelsPackageType
   * @throws IOException if the JSON string is invalid with respect to UpdateSystemModelsPackageType
   */
  public static UpdateSystemModelsPackageType fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateSystemModelsPackageType.class);
  }

  /**
   * Convert an instance of UpdateSystemModelsPackageType to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

