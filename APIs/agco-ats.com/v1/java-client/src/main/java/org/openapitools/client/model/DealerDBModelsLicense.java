/*
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DealerDBModelsLicense
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:35.511967-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DealerDBModelsLicense {
  public static final String SERIALIZED_NAME_ACTIVE = "Active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  public static final String SERIALIZED_NAME_CREATED_DATE = "CreatedDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private OffsetDateTime createdDate;

  public static final String SERIALIZED_NAME_DEACTIVATED_DATE = "DeactivatedDate";
  @SerializedName(SERIALIZED_NAME_DEACTIVATED_DATE)
  private OffsetDateTime deactivatedDate;

  /**
   * The type of license (e.g. EDT, EDT Lite)
   */
  @JsonAdapter(LicenseActivationTypeEnum.Adapter.class)
  public enum LicenseActivationTypeEnum {
    EDT("EDT"),
    
    EDT_LITE("EDTLite");

    private String value;

    LicenseActivationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LicenseActivationTypeEnum fromValue(String value) {
      for (LicenseActivationTypeEnum b : LicenseActivationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LicenseActivationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LicenseActivationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LicenseActivationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LicenseActivationTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LicenseActivationTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LICENSE_ACTIVATION_TYPE = "LicenseActivationType";
  @SerializedName(SERIALIZED_NAME_LICENSE_ACTIVATION_TYPE)
  private LicenseActivationTypeEnum licenseActivationType;

  public static final String SERIALIZED_NAME_LICENSE_I_D = "LicenseID";
  @SerializedName(SERIALIZED_NAME_LICENSE_I_D)
  private String licenseID;

  public static final String SERIALIZED_NAME_LICENSE_VERSION = "LicenseVersion";
  @SerializedName(SERIALIZED_NAME_LICENSE_VERSION)
  private String licenseVersion;

  public static final String SERIALIZED_NAME_REFRESH_DATE = "RefreshDate";
  @SerializedName(SERIALIZED_NAME_REFRESH_DATE)
  private OffsetDateTime refreshDate;

  public static final String SERIALIZED_NAME_SYSTEM_INFO = "SystemInfo";
  @SerializedName(SERIALIZED_NAME_SYSTEM_INFO)
  private String systemInfo;

  public static final String SERIALIZED_NAME_UPDATED_LICENSE_VERSION = "UpdatedLicenseVersion";
  @SerializedName(SERIALIZED_NAME_UPDATED_LICENSE_VERSION)
  private String updatedLicenseVersion;

  public static final String SERIALIZED_NAME_VOUCHER_CODE = "VoucherCode";
  @SerializedName(SERIALIZED_NAME_VOUCHER_CODE)
  private String voucherCode;

  public DealerDBModelsLicense() {
  }

  public DealerDBModelsLicense active(Boolean active) {
    this.active = active;
    return this;
  }

  /**
   * True if license is active.
   * @return active
   */
  @javax.annotation.Nullable
  public Boolean getActive() {
    return active;
  }

  public void setActive(Boolean active) {
    this.active = active;
  }


  public DealerDBModelsLicense createdDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
    return this;
  }

  /**
   * The date the license was created.
   * @return createdDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedDate() {
    return createdDate;
  }

  public void setCreatedDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
  }


  public DealerDBModelsLicense deactivatedDate(OffsetDateTime deactivatedDate) {
    this.deactivatedDate = deactivatedDate;
    return this;
  }

  /**
   * The date the license was deactivated.
   * @return deactivatedDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDeactivatedDate() {
    return deactivatedDate;
  }

  public void setDeactivatedDate(OffsetDateTime deactivatedDate) {
    this.deactivatedDate = deactivatedDate;
  }


  public DealerDBModelsLicense licenseActivationType(LicenseActivationTypeEnum licenseActivationType) {
    this.licenseActivationType = licenseActivationType;
    return this;
  }

  /**
   * The type of license (e.g. EDT, EDT Lite)
   * @return licenseActivationType
   */
  @javax.annotation.Nullable
  public LicenseActivationTypeEnum getLicenseActivationType() {
    return licenseActivationType;
  }

  public void setLicenseActivationType(LicenseActivationTypeEnum licenseActivationType) {
    this.licenseActivationType = licenseActivationType;
  }


  public DealerDBModelsLicense licenseID(String licenseID) {
    this.licenseID = licenseID;
    return this;
  }

  /**
   * The LicenseID
   * @return licenseID
   */
  @javax.annotation.Nullable
  public String getLicenseID() {
    return licenseID;
  }

  public void setLicenseID(String licenseID) {
    this.licenseID = licenseID;
  }


  public DealerDBModelsLicense licenseVersion(String licenseVersion) {
    this.licenseVersion = licenseVersion;
    return this;
  }

  /**
   * The version of the license.
   * @return licenseVersion
   */
  @javax.annotation.Nullable
  public String getLicenseVersion() {
    return licenseVersion;
  }

  public void setLicenseVersion(String licenseVersion) {
    this.licenseVersion = licenseVersion;
  }


  public DealerDBModelsLicense refreshDate(OffsetDateTime refreshDate) {
    this.refreshDate = refreshDate;
    return this;
  }

  /**
   * The date the license was refreshed.
   * @return refreshDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getRefreshDate() {
    return refreshDate;
  }

  public void setRefreshDate(OffsetDateTime refreshDate) {
    this.refreshDate = refreshDate;
  }


  public DealerDBModelsLicense systemInfo(String systemInfo) {
    this.systemInfo = systemInfo;
    return this;
  }

  /**
   * Information about the system which is licensed.
   * @return systemInfo
   */
  @javax.annotation.Nullable
  public String getSystemInfo() {
    return systemInfo;
  }

  public void setSystemInfo(String systemInfo) {
    this.systemInfo = systemInfo;
  }


  public DealerDBModelsLicense updatedLicenseVersion(String updatedLicenseVersion) {
    this.updatedLicenseVersion = updatedLicenseVersion;
    return this;
  }

  /**
   * The updated version of the license.  A value in this field indicates that the update has not been confirmed.
   * @return updatedLicenseVersion
   */
  @javax.annotation.Nullable
  public String getUpdatedLicenseVersion() {
    return updatedLicenseVersion;
  }

  public void setUpdatedLicenseVersion(String updatedLicenseVersion) {
    this.updatedLicenseVersion = updatedLicenseVersion;
  }


  public DealerDBModelsLicense voucherCode(String voucherCode) {
    this.voucherCode = voucherCode;
    return this;
  }

  /**
   * The voucher code that generated the license.
   * @return voucherCode
   */
  @javax.annotation.Nullable
  public String getVoucherCode() {
    return voucherCode;
  }

  public void setVoucherCode(String voucherCode) {
    this.voucherCode = voucherCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DealerDBModelsLicense dealerDBModelsLicense = (DealerDBModelsLicense) o;
    return Objects.equals(this.active, dealerDBModelsLicense.active) &&
        Objects.equals(this.createdDate, dealerDBModelsLicense.createdDate) &&
        Objects.equals(this.deactivatedDate, dealerDBModelsLicense.deactivatedDate) &&
        Objects.equals(this.licenseActivationType, dealerDBModelsLicense.licenseActivationType) &&
        Objects.equals(this.licenseID, dealerDBModelsLicense.licenseID) &&
        Objects.equals(this.licenseVersion, dealerDBModelsLicense.licenseVersion) &&
        Objects.equals(this.refreshDate, dealerDBModelsLicense.refreshDate) &&
        Objects.equals(this.systemInfo, dealerDBModelsLicense.systemInfo) &&
        Objects.equals(this.updatedLicenseVersion, dealerDBModelsLicense.updatedLicenseVersion) &&
        Objects.equals(this.voucherCode, dealerDBModelsLicense.voucherCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(active, createdDate, deactivatedDate, licenseActivationType, licenseID, licenseVersion, refreshDate, systemInfo, updatedLicenseVersion, voucherCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DealerDBModelsLicense {\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    deactivatedDate: ").append(toIndentedString(deactivatedDate)).append("\n");
    sb.append("    licenseActivationType: ").append(toIndentedString(licenseActivationType)).append("\n");
    sb.append("    licenseID: ").append(toIndentedString(licenseID)).append("\n");
    sb.append("    licenseVersion: ").append(toIndentedString(licenseVersion)).append("\n");
    sb.append("    refreshDate: ").append(toIndentedString(refreshDate)).append("\n");
    sb.append("    systemInfo: ").append(toIndentedString(systemInfo)).append("\n");
    sb.append("    updatedLicenseVersion: ").append(toIndentedString(updatedLicenseVersion)).append("\n");
    sb.append("    voucherCode: ").append(toIndentedString(voucherCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Active");
    openapiFields.add("CreatedDate");
    openapiFields.add("DeactivatedDate");
    openapiFields.add("LicenseActivationType");
    openapiFields.add("LicenseID");
    openapiFields.add("LicenseVersion");
    openapiFields.add("RefreshDate");
    openapiFields.add("SystemInfo");
    openapiFields.add("UpdatedLicenseVersion");
    openapiFields.add("VoucherCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DealerDBModelsLicense
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DealerDBModelsLicense.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DealerDBModelsLicense is not found in the empty JSON string", DealerDBModelsLicense.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DealerDBModelsLicense.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DealerDBModelsLicense` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("LicenseActivationType") != null && !jsonObj.get("LicenseActivationType").isJsonNull()) && !jsonObj.get("LicenseActivationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LicenseActivationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LicenseActivationType").toString()));
      }
      // validate the optional field `LicenseActivationType`
      if (jsonObj.get("LicenseActivationType") != null && !jsonObj.get("LicenseActivationType").isJsonNull()) {
        LicenseActivationTypeEnum.validateJsonElement(jsonObj.get("LicenseActivationType"));
      }
      if ((jsonObj.get("LicenseID") != null && !jsonObj.get("LicenseID").isJsonNull()) && !jsonObj.get("LicenseID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LicenseID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LicenseID").toString()));
      }
      if ((jsonObj.get("LicenseVersion") != null && !jsonObj.get("LicenseVersion").isJsonNull()) && !jsonObj.get("LicenseVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LicenseVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LicenseVersion").toString()));
      }
      if ((jsonObj.get("SystemInfo") != null && !jsonObj.get("SystemInfo").isJsonNull()) && !jsonObj.get("SystemInfo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SystemInfo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SystemInfo").toString()));
      }
      if ((jsonObj.get("UpdatedLicenseVersion") != null && !jsonObj.get("UpdatedLicenseVersion").isJsonNull()) && !jsonObj.get("UpdatedLicenseVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UpdatedLicenseVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UpdatedLicenseVersion").toString()));
      }
      if ((jsonObj.get("VoucherCode") != null && !jsonObj.get("VoucherCode").isJsonNull()) && !jsonObj.get("VoucherCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `VoucherCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("VoucherCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DealerDBModelsLicense.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DealerDBModelsLicense' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DealerDBModelsLicense> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DealerDBModelsLicense.class));

       return (TypeAdapter<T>) new TypeAdapter<DealerDBModelsLicense>() {
           @Override
           public void write(JsonWriter out, DealerDBModelsLicense value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DealerDBModelsLicense read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DealerDBModelsLicense given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DealerDBModelsLicense
   * @throws IOException if the JSON string is invalid with respect to DealerDBModelsLicense
   */
  public static DealerDBModelsLicense fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DealerDBModelsLicense.class);
  }

  /**
   * Convert an instance of DealerDBModelsLicense to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

