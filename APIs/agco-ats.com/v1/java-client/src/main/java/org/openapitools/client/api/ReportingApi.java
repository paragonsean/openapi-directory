/*
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.APIModelsApiError;
import org.openapitools.client.model.APIPagedResponseUpdateSystemModelsBundle;
import org.openapitools.client.model.APIPagedResponseUpdateSystemModelsClientStatusUpdateSystemModelsPagedClientStatusMetadata;
import org.openapitools.client.model.APIPagedResponseUpdateSystemModelsPackageStatusSummary;
import org.openapitools.client.model.APIPagedResponseUpdateSystemModelsUpdateGroup;
import org.openapitools.client.model.APIPagedResponseUpdateSystemModelsUpdateGroupClientRelationship;
import java.time.OffsetDateTime;
import org.openapitools.client.model.UpdateSystemModelsClient;
import org.openapitools.client.model.UpdateSystemModelsClientInfo;
import org.openapitools.client.model.UpdateSystemModelsPackage;
import org.openapitools.client.model.UpdateSystemModelsPackageStatusSummary;
import org.openapitools.client.model.UpdateSystemModelsUpdateMetricsData;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ReportingApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ReportingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReportingApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for reportingBundleStatusSummary
     * @param bundleID The BundleID (required)
     * @param limit Optional. The page limit. The default page limit is 10. (optional)
     * @param offset Optional. The page offset. The default page offset is 0. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportingBundleStatusSummaryCall(String bundleID, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/Reporting/BundleStatusSummary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (bundleID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("BundleID", bundleID));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportingBundleStatusSummaryValidateBeforeCall(String bundleID, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bundleID' is set
        if (bundleID == null) {
            throw new ApiException("Missing the required parameter 'bundleID' when calling reportingBundleStatusSummary(Async)");
        }

        return reportingBundleStatusSummaryCall(bundleID, limit, offset, _callback);

    }

    /**
     * Get a summary of all Packages in a Bundle
     * No Documentation Found.
     * @param bundleID The BundleID (required)
     * @param limit Optional. The page limit. The default page limit is 10. (optional)
     * @param offset Optional. The page offset. The default page offset is 0. (optional)
     * @return APIPagedResponseUpdateSystemModelsPackageStatusSummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public APIPagedResponseUpdateSystemModelsPackageStatusSummary reportingBundleStatusSummary(String bundleID, Integer limit, Integer offset) throws ApiException {
        ApiResponse<APIPagedResponseUpdateSystemModelsPackageStatusSummary> localVarResp = reportingBundleStatusSummaryWithHttpInfo(bundleID, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Get a summary of all Packages in a Bundle
     * No Documentation Found.
     * @param bundleID The BundleID (required)
     * @param limit Optional. The page limit. The default page limit is 10. (optional)
     * @param offset Optional. The page offset. The default page offset is 0. (optional)
     * @return ApiResponse&lt;APIPagedResponseUpdateSystemModelsPackageStatusSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<APIPagedResponseUpdateSystemModelsPackageStatusSummary> reportingBundleStatusSummaryWithHttpInfo(String bundleID, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = reportingBundleStatusSummaryValidateBeforeCall(bundleID, limit, offset, null);
        Type localVarReturnType = new TypeToken<APIPagedResponseUpdateSystemModelsPackageStatusSummary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a summary of all Packages in a Bundle (asynchronously)
     * No Documentation Found.
     * @param bundleID The BundleID (required)
     * @param limit Optional. The page limit. The default page limit is 10. (optional)
     * @param offset Optional. The page offset. The default page offset is 0. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportingBundleStatusSummaryAsync(String bundleID, Integer limit, Integer offset, final ApiCallback<APIPagedResponseUpdateSystemModelsPackageStatusSummary> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportingBundleStatusSummaryValidateBeforeCall(bundleID, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<APIPagedResponseUpdateSystemModelsPackageStatusSummary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportingBundlesInUpdateGroup
     * @param ID The UpdateGroupID (required)
     * @param includeInactive Include Inactive Bundles (true|false) (required)
     * @param limit Optional. The page limit. The default page limit is 10. (optional)
     * @param offset Optional. The page offset. The default page offset is 0. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportingBundlesInUpdateGroupCall(String ID, Boolean includeInactive, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/Reporting/BundlesInUpdateGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ID", ID));
        }

        if (includeInactive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("IncludeInactive", includeInactive));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportingBundlesInUpdateGroupValidateBeforeCall(String ID, Boolean includeInactive, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling reportingBundlesInUpdateGroup(Async)");
        }

        // verify the required parameter 'includeInactive' is set
        if (includeInactive == null) {
            throw new ApiException("Missing the required parameter 'includeInactive' when calling reportingBundlesInUpdateGroup(Async)");
        }

        return reportingBundlesInUpdateGroupCall(ID, includeInactive, limit, offset, _callback);

    }

    /**
     * Get a list of bundles for UpdateGroup.
     * No Documentation Found.
     * @param ID The UpdateGroupID (required)
     * @param includeInactive Include Inactive Bundles (true|false) (required)
     * @param limit Optional. The page limit. The default page limit is 10. (optional)
     * @param offset Optional. The page offset. The default page offset is 0. (optional)
     * @return APIPagedResponseUpdateSystemModelsBundle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public APIPagedResponseUpdateSystemModelsBundle reportingBundlesInUpdateGroup(String ID, Boolean includeInactive, Integer limit, Integer offset) throws ApiException {
        ApiResponse<APIPagedResponseUpdateSystemModelsBundle> localVarResp = reportingBundlesInUpdateGroupWithHttpInfo(ID, includeInactive, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Get a list of bundles for UpdateGroup.
     * No Documentation Found.
     * @param ID The UpdateGroupID (required)
     * @param includeInactive Include Inactive Bundles (true|false) (required)
     * @param limit Optional. The page limit. The default page limit is 10. (optional)
     * @param offset Optional. The page offset. The default page offset is 0. (optional)
     * @return ApiResponse&lt;APIPagedResponseUpdateSystemModelsBundle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<APIPagedResponseUpdateSystemModelsBundle> reportingBundlesInUpdateGroupWithHttpInfo(String ID, Boolean includeInactive, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = reportingBundlesInUpdateGroupValidateBeforeCall(ID, includeInactive, limit, offset, null);
        Type localVarReturnType = new TypeToken<APIPagedResponseUpdateSystemModelsBundle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of bundles for UpdateGroup. (asynchronously)
     * No Documentation Found.
     * @param ID The UpdateGroupID (required)
     * @param includeInactive Include Inactive Bundles (true|false) (required)
     * @param limit Optional. The page limit. The default page limit is 10. (optional)
     * @param offset Optional. The page offset. The default page offset is 0. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportingBundlesInUpdateGroupAsync(String ID, Boolean includeInactive, Integer limit, Integer offset, final ApiCallback<APIPagedResponseUpdateSystemModelsBundle> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportingBundlesInUpdateGroupValidateBeforeCall(ID, includeInactive, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<APIPagedResponseUpdateSystemModelsBundle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportingClientInfo
     * @param clientID The Client ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportingClientInfoCall(String clientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/Reporting/ClientInfo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (clientID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ClientID", clientID));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportingClientInfoValidateBeforeCall(String clientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'clientID' is set
        if (clientID == null) {
            throw new ApiException("Missing the required parameter 'clientID' when calling reportingClientInfo(Async)");
        }

        return reportingClientInfoCall(clientID, _callback);

    }

    /**
     * Get Client Information
     * No Documentation Found.
     * @param clientID The Client ID (required)
     * @return UpdateSystemModelsClientInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSystemModelsClientInfo reportingClientInfo(String clientID) throws ApiException {
        ApiResponse<UpdateSystemModelsClientInfo> localVarResp = reportingClientInfoWithHttpInfo(clientID);
        return localVarResp.getData();
    }

    /**
     * Get Client Information
     * No Documentation Found.
     * @param clientID The Client ID (required)
     * @return ApiResponse&lt;UpdateSystemModelsClientInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateSystemModelsClientInfo> reportingClientInfoWithHttpInfo(String clientID) throws ApiException {
        okhttp3.Call localVarCall = reportingClientInfoValidateBeforeCall(clientID, null);
        Type localVarReturnType = new TypeToken<UpdateSystemModelsClientInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Client Information (asynchronously)
     * No Documentation Found.
     * @param clientID The Client ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportingClientInfoAsync(String clientID, final ApiCallback<UpdateSystemModelsClientInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportingClientInfoValidateBeforeCall(clientID, _callback);
        Type localVarReturnType = new TypeToken<UpdateSystemModelsClientInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportingCurrentPackagesInUpdateGroup
     * @param ID The UpdateGroupID (required)
     * @param subscriptionTypeFilter Optional.  The subscription type filter to use.  By default the Default packages (Required and IncludeByDefault) will be returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportingCurrentPackagesInUpdateGroupCall(String ID, String subscriptionTypeFilter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/Reporting/CurrentPackagesInUpdateGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ID", ID));
        }

        if (subscriptionTypeFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SubscriptionTypeFilter", subscriptionTypeFilter));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportingCurrentPackagesInUpdateGroupValidateBeforeCall(String ID, String subscriptionTypeFilter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling reportingCurrentPackagesInUpdateGroup(Async)");
        }

        return reportingCurrentPackagesInUpdateGroupCall(ID, subscriptionTypeFilter, _callback);

    }

    /**
     * Get the current packages for an update group.
     * No Documentation Found.
     * @param ID The UpdateGroupID (required)
     * @param subscriptionTypeFilter Optional.  The subscription type filter to use.  By default the Default packages (Required and IncludeByDefault) will be returned. (optional)
     * @return List&lt;UpdateSystemModelsPackage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public List<UpdateSystemModelsPackage> reportingCurrentPackagesInUpdateGroup(String ID, String subscriptionTypeFilter) throws ApiException {
        ApiResponse<List<UpdateSystemModelsPackage>> localVarResp = reportingCurrentPackagesInUpdateGroupWithHttpInfo(ID, subscriptionTypeFilter);
        return localVarResp.getData();
    }

    /**
     * Get the current packages for an update group.
     * No Documentation Found.
     * @param ID The UpdateGroupID (required)
     * @param subscriptionTypeFilter Optional.  The subscription type filter to use.  By default the Default packages (Required and IncludeByDefault) will be returned. (optional)
     * @return ApiResponse&lt;List&lt;UpdateSystemModelsPackage&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UpdateSystemModelsPackage>> reportingCurrentPackagesInUpdateGroupWithHttpInfo(String ID, String subscriptionTypeFilter) throws ApiException {
        okhttp3.Call localVarCall = reportingCurrentPackagesInUpdateGroupValidateBeforeCall(ID, subscriptionTypeFilter, null);
        Type localVarReturnType = new TypeToken<List<UpdateSystemModelsPackage>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the current packages for an update group. (asynchronously)
     * No Documentation Found.
     * @param ID The UpdateGroupID (required)
     * @param subscriptionTypeFilter Optional.  The subscription type filter to use.  By default the Default packages (Required and IncludeByDefault) will be returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportingCurrentPackagesInUpdateGroupAsync(String ID, String subscriptionTypeFilter, final ApiCallback<List<UpdateSystemModelsPackage>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportingCurrentPackagesInUpdateGroupValidateBeforeCall(ID, subscriptionTypeFilter, _callback);
        Type localVarReturnType = new TypeToken<List<UpdateSystemModelsPackage>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportingGetClient
     * @param ID The Client ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportingGetClientCall(String ID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/Reporting/GetClient";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ID", ID));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportingGetClientValidateBeforeCall(String ID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling reportingGetClient(Async)");
        }

        return reportingGetClientCall(ID, _callback);

    }

    /**
     * Get a Client in the Update System.
     * No Documentation Found.
     * @param ID The Client ID (required)
     * @return UpdateSystemModelsClient
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSystemModelsClient reportingGetClient(String ID) throws ApiException {
        ApiResponse<UpdateSystemModelsClient> localVarResp = reportingGetClientWithHttpInfo(ID);
        return localVarResp.getData();
    }

    /**
     * Get a Client in the Update System.
     * No Documentation Found.
     * @param ID The Client ID (required)
     * @return ApiResponse&lt;UpdateSystemModelsClient&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateSystemModelsClient> reportingGetClientWithHttpInfo(String ID) throws ApiException {
        okhttp3.Call localVarCall = reportingGetClientValidateBeforeCall(ID, null);
        Type localVarReturnType = new TypeToken<UpdateSystemModelsClient>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a Client in the Update System. (asynchronously)
     * No Documentation Found.
     * @param ID The Client ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportingGetClientAsync(String ID, final ApiCallback<UpdateSystemModelsClient> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportingGetClientValidateBeforeCall(ID, _callback);
        Type localVarReturnType = new TypeToken<UpdateSystemModelsClient>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportingGetSubscriptions
     * @param clientID Optional. Filter by Client ID (optional)
     * @param updateGroupID Optional. Filter by Update Group ID (optional)
     * @param limit Optional. The page limit. The default page limit is 10. (optional)
     * @param offset Optional. The page offset. The default page offset is 0. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportingGetSubscriptionsCall(String clientID, String updateGroupID, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/Reporting/GetSubscriptions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (clientID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ClientID", clientID));
        }

        if (updateGroupID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("UpdateGroupID", updateGroupID));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportingGetSubscriptionsValidateBeforeCall(String clientID, String updateGroupID, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return reportingGetSubscriptionsCall(clientID, updateGroupID, limit, offset, _callback);

    }

    /**
     * Get a list of current Client Subscriptions.
     * No Documentation Found.
     * @param clientID Optional. Filter by Client ID (optional)
     * @param updateGroupID Optional. Filter by Update Group ID (optional)
     * @param limit Optional. The page limit. The default page limit is 10. (optional)
     * @param offset Optional. The page offset. The default page offset is 0. (optional)
     * @return APIPagedResponseUpdateSystemModelsUpdateGroupClientRelationship
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public APIPagedResponseUpdateSystemModelsUpdateGroupClientRelationship reportingGetSubscriptions(String clientID, String updateGroupID, Integer limit, Integer offset) throws ApiException {
        ApiResponse<APIPagedResponseUpdateSystemModelsUpdateGroupClientRelationship> localVarResp = reportingGetSubscriptionsWithHttpInfo(clientID, updateGroupID, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Get a list of current Client Subscriptions.
     * No Documentation Found.
     * @param clientID Optional. Filter by Client ID (optional)
     * @param updateGroupID Optional. Filter by Update Group ID (optional)
     * @param limit Optional. The page limit. The default page limit is 10. (optional)
     * @param offset Optional. The page offset. The default page offset is 0. (optional)
     * @return ApiResponse&lt;APIPagedResponseUpdateSystemModelsUpdateGroupClientRelationship&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<APIPagedResponseUpdateSystemModelsUpdateGroupClientRelationship> reportingGetSubscriptionsWithHttpInfo(String clientID, String updateGroupID, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = reportingGetSubscriptionsValidateBeforeCall(clientID, updateGroupID, limit, offset, null);
        Type localVarReturnType = new TypeToken<APIPagedResponseUpdateSystemModelsUpdateGroupClientRelationship>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of current Client Subscriptions. (asynchronously)
     * No Documentation Found.
     * @param clientID Optional. Filter by Client ID (optional)
     * @param updateGroupID Optional. Filter by Update Group ID (optional)
     * @param limit Optional. The page limit. The default page limit is 10. (optional)
     * @param offset Optional. The page offset. The default page offset is 0. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportingGetSubscriptionsAsync(String clientID, String updateGroupID, Integer limit, Integer offset, final ApiCallback<APIPagedResponseUpdateSystemModelsUpdateGroupClientRelationship> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportingGetSubscriptionsValidateBeforeCall(clientID, updateGroupID, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<APIPagedResponseUpdateSystemModelsUpdateGroupClientRelationship>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportingPackageStatusSummary
     * @param packageID The Package ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportingPackageStatusSummaryCall(String packageID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/Reporting/PackageStatusSummary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (packageID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PackageID", packageID));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportingPackageStatusSummaryValidateBeforeCall(String packageID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'packageID' is set
        if (packageID == null) {
            throw new ApiException("Missing the required parameter 'packageID' when calling reportingPackageStatusSummary(Async)");
        }

        return reportingPackageStatusSummaryCall(packageID, _callback);

    }

    /**
     * Get a summary report for a Specific Package
     * No Documentation Found.
     * @param packageID The Package ID (required)
     * @return UpdateSystemModelsPackageStatusSummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSystemModelsPackageStatusSummary reportingPackageStatusSummary(String packageID) throws ApiException {
        ApiResponse<UpdateSystemModelsPackageStatusSummary> localVarResp = reportingPackageStatusSummaryWithHttpInfo(packageID);
        return localVarResp.getData();
    }

    /**
     * Get a summary report for a Specific Package
     * No Documentation Found.
     * @param packageID The Package ID (required)
     * @return ApiResponse&lt;UpdateSystemModelsPackageStatusSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateSystemModelsPackageStatusSummary> reportingPackageStatusSummaryWithHttpInfo(String packageID) throws ApiException {
        okhttp3.Call localVarCall = reportingPackageStatusSummaryValidateBeforeCall(packageID, null);
        Type localVarReturnType = new TypeToken<UpdateSystemModelsPackageStatusSummary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a summary report for a Specific Package (asynchronously)
     * No Documentation Found.
     * @param packageID The Package ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportingPackageStatusSummaryAsync(String packageID, final ApiCallback<UpdateSystemModelsPackageStatusSummary> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportingPackageStatusSummaryValidateBeforeCall(packageID, _callback);
        Type localVarReturnType = new TypeToken<UpdateSystemModelsPackageStatusSummary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportingRegisteredClients
     * @param updateGroupID Optional but required when including any or all of following parameters: ReportValue, ReportResult, ReportResultIsValid. The Update Group ID. If not provided, all clients will be returned. (optional)
     * @param clientID Optional. Filter where ClientID matches a value. Wildcards are supported (*). (optional)
     * @param tag Optional. Filter where Tag matches a value. Wildcards are supported (*). (optional)
     * @param reportResult Optional and UpdateGroupID must be included. Filter where ReportResult matches a value. Wildcards are supported (*). (optional)
     * @param reportResultIsValid Optional and UpdateGroupID must be included. When &#39;true&#39; filters results where ReportResult equals ReportResultExpected.  When &#39;false&#39; filters results where ValueToValidate does not equal ReportResults. (optional)
     * @param reportValue Optional and UpdateGroupID must be included. Filter where ReportValue matches a value. Wildcards are supported (*). (optional)
     * @param lastCheckInBefore Optional. Filter where LastCheckIn occured before the provided date. (optional)
     * @param lastCheckInAfter Optional. Filter where LastCheckIn occured after the provided date. (optional)
     * @param orderBy Optional. Specify the order in which results should be returned. Use this format: [FieldName] [ASC|ASCENDING|DESC|DESCENDING],...                 If sort direction is not provided for a field, it will be sorted ascending. (optional)
     * @param limit Optional. The page limit. The default page limit is 10. (optional)
     * @param offset Optional. The page offset. The default page offset is 0. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportingRegisteredClientsCall(String updateGroupID, String clientID, String tag, String reportResult, Boolean reportResultIsValid, String reportValue, OffsetDateTime lastCheckInBefore, OffsetDateTime lastCheckInAfter, String orderBy, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/Reporting/RegisteredClients";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updateGroupID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("UpdateGroupID", updateGroupID));
        }

        if (clientID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ClientID", clientID));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Tag", tag));
        }

        if (reportResult != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ReportResult", reportResult));
        }

        if (reportResultIsValid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ReportResultIsValid", reportResultIsValid));
        }

        if (reportValue != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ReportValue", reportValue));
        }

        if (lastCheckInBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LastCheckInBefore", lastCheckInBefore));
        }

        if (lastCheckInAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LastCheckInAfter", lastCheckInAfter));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OrderBy", orderBy));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportingRegisteredClientsValidateBeforeCall(String updateGroupID, String clientID, String tag, String reportResult, Boolean reportResultIsValid, String reportValue, OffsetDateTime lastCheckInBefore, OffsetDateTime lastCheckInAfter, String orderBy, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return reportingRegisteredClientsCall(updateGroupID, clientID, tag, reportResult, reportResultIsValid, reportValue, lastCheckInBefore, lastCheckInAfter, orderBy, limit, offset, _callback);

    }

    /**
     * Get a list of subscribed clients
     * No Documentation Found.
     * @param updateGroupID Optional but required when including any or all of following parameters: ReportValue, ReportResult, ReportResultIsValid. The Update Group ID. If not provided, all clients will be returned. (optional)
     * @param clientID Optional. Filter where ClientID matches a value. Wildcards are supported (*). (optional)
     * @param tag Optional. Filter where Tag matches a value. Wildcards are supported (*). (optional)
     * @param reportResult Optional and UpdateGroupID must be included. Filter where ReportResult matches a value. Wildcards are supported (*). (optional)
     * @param reportResultIsValid Optional and UpdateGroupID must be included. When &#39;true&#39; filters results where ReportResult equals ReportResultExpected.  When &#39;false&#39; filters results where ValueToValidate does not equal ReportResults. (optional)
     * @param reportValue Optional and UpdateGroupID must be included. Filter where ReportValue matches a value. Wildcards are supported (*). (optional)
     * @param lastCheckInBefore Optional. Filter where LastCheckIn occured before the provided date. (optional)
     * @param lastCheckInAfter Optional. Filter where LastCheckIn occured after the provided date. (optional)
     * @param orderBy Optional. Specify the order in which results should be returned. Use this format: [FieldName] [ASC|ASCENDING|DESC|DESCENDING],...                 If sort direction is not provided for a field, it will be sorted ascending. (optional)
     * @param limit Optional. The page limit. The default page limit is 10. (optional)
     * @param offset Optional. The page offset. The default page offset is 0. (optional)
     * @return APIPagedResponseUpdateSystemModelsClientStatusUpdateSystemModelsPagedClientStatusMetadata
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public APIPagedResponseUpdateSystemModelsClientStatusUpdateSystemModelsPagedClientStatusMetadata reportingRegisteredClients(String updateGroupID, String clientID, String tag, String reportResult, Boolean reportResultIsValid, String reportValue, OffsetDateTime lastCheckInBefore, OffsetDateTime lastCheckInAfter, String orderBy, Integer limit, Integer offset) throws ApiException {
        ApiResponse<APIPagedResponseUpdateSystemModelsClientStatusUpdateSystemModelsPagedClientStatusMetadata> localVarResp = reportingRegisteredClientsWithHttpInfo(updateGroupID, clientID, tag, reportResult, reportResultIsValid, reportValue, lastCheckInBefore, lastCheckInAfter, orderBy, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Get a list of subscribed clients
     * No Documentation Found.
     * @param updateGroupID Optional but required when including any or all of following parameters: ReportValue, ReportResult, ReportResultIsValid. The Update Group ID. If not provided, all clients will be returned. (optional)
     * @param clientID Optional. Filter where ClientID matches a value. Wildcards are supported (*). (optional)
     * @param tag Optional. Filter where Tag matches a value. Wildcards are supported (*). (optional)
     * @param reportResult Optional and UpdateGroupID must be included. Filter where ReportResult matches a value. Wildcards are supported (*). (optional)
     * @param reportResultIsValid Optional and UpdateGroupID must be included. When &#39;true&#39; filters results where ReportResult equals ReportResultExpected.  When &#39;false&#39; filters results where ValueToValidate does not equal ReportResults. (optional)
     * @param reportValue Optional and UpdateGroupID must be included. Filter where ReportValue matches a value. Wildcards are supported (*). (optional)
     * @param lastCheckInBefore Optional. Filter where LastCheckIn occured before the provided date. (optional)
     * @param lastCheckInAfter Optional. Filter where LastCheckIn occured after the provided date. (optional)
     * @param orderBy Optional. Specify the order in which results should be returned. Use this format: [FieldName] [ASC|ASCENDING|DESC|DESCENDING],...                 If sort direction is not provided for a field, it will be sorted ascending. (optional)
     * @param limit Optional. The page limit. The default page limit is 10. (optional)
     * @param offset Optional. The page offset. The default page offset is 0. (optional)
     * @return ApiResponse&lt;APIPagedResponseUpdateSystemModelsClientStatusUpdateSystemModelsPagedClientStatusMetadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<APIPagedResponseUpdateSystemModelsClientStatusUpdateSystemModelsPagedClientStatusMetadata> reportingRegisteredClientsWithHttpInfo(String updateGroupID, String clientID, String tag, String reportResult, Boolean reportResultIsValid, String reportValue, OffsetDateTime lastCheckInBefore, OffsetDateTime lastCheckInAfter, String orderBy, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = reportingRegisteredClientsValidateBeforeCall(updateGroupID, clientID, tag, reportResult, reportResultIsValid, reportValue, lastCheckInBefore, lastCheckInAfter, orderBy, limit, offset, null);
        Type localVarReturnType = new TypeToken<APIPagedResponseUpdateSystemModelsClientStatusUpdateSystemModelsPagedClientStatusMetadata>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of subscribed clients (asynchronously)
     * No Documentation Found.
     * @param updateGroupID Optional but required when including any or all of following parameters: ReportValue, ReportResult, ReportResultIsValid. The Update Group ID. If not provided, all clients will be returned. (optional)
     * @param clientID Optional. Filter where ClientID matches a value. Wildcards are supported (*). (optional)
     * @param tag Optional. Filter where Tag matches a value. Wildcards are supported (*). (optional)
     * @param reportResult Optional and UpdateGroupID must be included. Filter where ReportResult matches a value. Wildcards are supported (*). (optional)
     * @param reportResultIsValid Optional and UpdateGroupID must be included. When &#39;true&#39; filters results where ReportResult equals ReportResultExpected.  When &#39;false&#39; filters results where ValueToValidate does not equal ReportResults. (optional)
     * @param reportValue Optional and UpdateGroupID must be included. Filter where ReportValue matches a value. Wildcards are supported (*). (optional)
     * @param lastCheckInBefore Optional. Filter where LastCheckIn occured before the provided date. (optional)
     * @param lastCheckInAfter Optional. Filter where LastCheckIn occured after the provided date. (optional)
     * @param orderBy Optional. Specify the order in which results should be returned. Use this format: [FieldName] [ASC|ASCENDING|DESC|DESCENDING],...                 If sort direction is not provided for a field, it will be sorted ascending. (optional)
     * @param limit Optional. The page limit. The default page limit is 10. (optional)
     * @param offset Optional. The page offset. The default page offset is 0. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportingRegisteredClientsAsync(String updateGroupID, String clientID, String tag, String reportResult, Boolean reportResultIsValid, String reportValue, OffsetDateTime lastCheckInBefore, OffsetDateTime lastCheckInAfter, String orderBy, Integer limit, Integer offset, final ApiCallback<APIPagedResponseUpdateSystemModelsClientStatusUpdateSystemModelsPagedClientStatusMetadata> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportingRegisteredClientsValidateBeforeCall(updateGroupID, clientID, tag, reportResult, reportResultIsValid, reportValue, lastCheckInBefore, lastCheckInAfter, orderBy, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<APIPagedResponseUpdateSystemModelsClientStatusUpdateSystemModelsPagedClientStatusMetadata>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportingUpdateGroups
     * @param limit Optional. The page limit. The default page limit is 10. (optional)
     * @param offset Optional. The page offset. The default page offset is 0. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportingUpdateGroupsCall(Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/Reporting/UpdateGroups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportingUpdateGroupsValidateBeforeCall(Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return reportingUpdateGroupsCall(limit, offset, _callback);

    }

    /**
     * Get a list of Update Groups.  Update Groups are used by the client to register for a specific type of update.
     * No Documentation Found.
     * @param limit Optional. The page limit. The default page limit is 10. (optional)
     * @param offset Optional. The page offset. The default page offset is 0. (optional)
     * @return APIPagedResponseUpdateSystemModelsUpdateGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public APIPagedResponseUpdateSystemModelsUpdateGroup reportingUpdateGroups(Integer limit, Integer offset) throws ApiException {
        ApiResponse<APIPagedResponseUpdateSystemModelsUpdateGroup> localVarResp = reportingUpdateGroupsWithHttpInfo(limit, offset);
        return localVarResp.getData();
    }

    /**
     * Get a list of Update Groups.  Update Groups are used by the client to register for a specific type of update.
     * No Documentation Found.
     * @param limit Optional. The page limit. The default page limit is 10. (optional)
     * @param offset Optional. The page offset. The default page offset is 0. (optional)
     * @return ApiResponse&lt;APIPagedResponseUpdateSystemModelsUpdateGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<APIPagedResponseUpdateSystemModelsUpdateGroup> reportingUpdateGroupsWithHttpInfo(Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = reportingUpdateGroupsValidateBeforeCall(limit, offset, null);
        Type localVarReturnType = new TypeToken<APIPagedResponseUpdateSystemModelsUpdateGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of Update Groups.  Update Groups are used by the client to register for a specific type of update. (asynchronously)
     * No Documentation Found.
     * @param limit Optional. The page limit. The default page limit is 10. (optional)
     * @param offset Optional. The page offset. The default page offset is 0. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportingUpdateGroupsAsync(Integer limit, Integer offset, final ApiCallback<APIPagedResponseUpdateSystemModelsUpdateGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportingUpdateGroupsValidateBeforeCall(limit, offset, _callback);
        Type localVarReturnType = new TypeToken<APIPagedResponseUpdateSystemModelsUpdateGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportingUpdateMetrics
     * @param updateGroupID The UpdateType in which clients must be for the report to include them. (required)
     * @param bundleNumber Optional. Tells us which chart to show based upon filter. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportingUpdateMetricsCall(String updateGroupID, Integer bundleNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/Reporting/UpdateMetrics";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updateGroupID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("UpdateGroupID", updateGroupID));
        }

        if (bundleNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bundleNumber", bundleNumber));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportingUpdateMetricsValidateBeforeCall(String updateGroupID, Integer bundleNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateGroupID' is set
        if (updateGroupID == null) {
            throw new ApiException("Missing the required parameter 'updateGroupID' when calling reportingUpdateMetrics(Async)");
        }

        return reportingUpdateMetricsCall(updateGroupID, bundleNumber, _callback);

    }

    /**
     * Get data for pie charts in UpdateMetrics.
     * No Documentation Found.
     * @param updateGroupID The UpdateType in which clients must be for the report to include them. (required)
     * @param bundleNumber Optional. Tells us which chart to show based upon filter. (optional)
     * @return UpdateSystemModelsUpdateMetricsData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSystemModelsUpdateMetricsData reportingUpdateMetrics(String updateGroupID, Integer bundleNumber) throws ApiException {
        ApiResponse<UpdateSystemModelsUpdateMetricsData> localVarResp = reportingUpdateMetricsWithHttpInfo(updateGroupID, bundleNumber);
        return localVarResp.getData();
    }

    /**
     * Get data for pie charts in UpdateMetrics.
     * No Documentation Found.
     * @param updateGroupID The UpdateType in which clients must be for the report to include them. (required)
     * @param bundleNumber Optional. Tells us which chart to show based upon filter. (optional)
     * @return ApiResponse&lt;UpdateSystemModelsUpdateMetricsData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateSystemModelsUpdateMetricsData> reportingUpdateMetricsWithHttpInfo(String updateGroupID, Integer bundleNumber) throws ApiException {
        okhttp3.Call localVarCall = reportingUpdateMetricsValidateBeforeCall(updateGroupID, bundleNumber, null);
        Type localVarReturnType = new TypeToken<UpdateSystemModelsUpdateMetricsData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get data for pie charts in UpdateMetrics. (asynchronously)
     * No Documentation Found.
     * @param updateGroupID The UpdateType in which clients must be for the report to include them. (required)
     * @param bundleNumber Optional. Tells us which chart to show based upon filter. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportingUpdateMetricsAsync(String updateGroupID, Integer bundleNumber, final ApiCallback<UpdateSystemModelsUpdateMetricsData> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportingUpdateMetricsValidateBeforeCall(updateGroupID, bundleNumber, _callback);
        Type localVarReturnType = new TypeToken<UpdateSystemModelsUpdateMetricsData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
