/*
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.APIIPagedResponseAuthorizationCodesSharedModelsCategory;
import org.openapitools.client.model.APIIPagedResponseAuthorizationCodesSharedModelsCategoryUserReport;
import org.openapitools.client.model.APIModelsApiError;
import org.openapitools.client.model.AuthorizationCodesSharedModelsCategory;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AuthorizationCategoriesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AuthorizationCategoriesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AuthorizationCategoriesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for authorizationCategoriesAddUser
     * @param id  (required)
     * @param userID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authorizationCategoriesAddUserCall(String id, Integer userID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/AuthorizationCategories/{id}/Users/{userID}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "userID" + "}", localVarApiClient.escapeString(userID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authorizationCategoriesAddUserValidateBeforeCall(String id, Integer userID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling authorizationCategoriesAddUser(Async)");
        }

        // verify the required parameter 'userID' is set
        if (userID == null) {
            throw new ApiException("Missing the required parameter 'userID' when calling authorizationCategoriesAddUser(Async)");
        }

        return authorizationCategoriesAddUserCall(id, userID, _callback);

    }

    /**
     * Add a category that a user can see.
     * No Documentation Found.
     * @param id  (required)
     * @param userID  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public void authorizationCategoriesAddUser(String id, Integer userID) throws ApiException {
        authorizationCategoriesAddUserWithHttpInfo(id, userID);
    }

    /**
     * Add a category that a user can see.
     * No Documentation Found.
     * @param id  (required)
     * @param userID  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> authorizationCategoriesAddUserWithHttpInfo(String id, Integer userID) throws ApiException {
        okhttp3.Call localVarCall = authorizationCategoriesAddUserValidateBeforeCall(id, userID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add a category that a user can see. (asynchronously)
     * No Documentation Found.
     * @param id  (required)
     * @param userID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authorizationCategoriesAddUserAsync(String id, Integer userID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = authorizationCategoriesAddUserValidateBeforeCall(id, userID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for authorizationCategoriesDelete
     * @param id The ID of the authorization category. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authorizationCategoriesDeleteCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/AuthorizationCategories/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authorizationCategoriesDeleteValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling authorizationCategoriesDelete(Async)");
        }

        return authorizationCategoriesDeleteCall(id, _callback);

    }

    /**
     * Remove an authorization category.
     * No Documentation Found.
     * @param id The ID of the authorization category. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public void authorizationCategoriesDelete(String id) throws ApiException {
        authorizationCategoriesDeleteWithHttpInfo(id);
    }

    /**
     * Remove an authorization category.
     * No Documentation Found.
     * @param id The ID of the authorization category. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> authorizationCategoriesDeleteWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = authorizationCategoriesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove an authorization category. (asynchronously)
     * No Documentation Found.
     * @param id The ID of the authorization category. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authorizationCategoriesDeleteAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = authorizationCategoriesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for authorizationCategoriesGet
     * @param limit Optional. The page limit.  If not specified, the default page limit is 10. (optional)
     * @param offset Optional. The page offset.  If not specified, the default page offset is 0. (optional)
     * @param userID Optional. Filter by categories visible to the provided user with the provided userID. (optional)
     * @param definitionID Optional. Filter by categories containing a definition with the provided ID. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authorizationCategoriesGetCall(Integer limit, Integer offset, Integer userID, String definitionID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/AuthorizationCategories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (userID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userID", userID));
        }

        if (definitionID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("definitionID", definitionID));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authorizationCategoriesGetValidateBeforeCall(Integer limit, Integer offset, Integer userID, String definitionID, final ApiCallback _callback) throws ApiException {
        return authorizationCategoriesGetCall(limit, offset, userID, definitionID, _callback);

    }

    /**
     * Get authorization categories.
     * No Documentation Found.
     * @param limit Optional. The page limit.  If not specified, the default page limit is 10. (optional)
     * @param offset Optional. The page offset.  If not specified, the default page offset is 0. (optional)
     * @param userID Optional. Filter by categories visible to the provided user with the provided userID. (optional)
     * @param definitionID Optional. Filter by categories containing a definition with the provided ID. (optional)
     * @return APIIPagedResponseAuthorizationCodesSharedModelsCategory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public APIIPagedResponseAuthorizationCodesSharedModelsCategory authorizationCategoriesGet(Integer limit, Integer offset, Integer userID, String definitionID) throws ApiException {
        ApiResponse<APIIPagedResponseAuthorizationCodesSharedModelsCategory> localVarResp = authorizationCategoriesGetWithHttpInfo(limit, offset, userID, definitionID);
        return localVarResp.getData();
    }

    /**
     * Get authorization categories.
     * No Documentation Found.
     * @param limit Optional. The page limit.  If not specified, the default page limit is 10. (optional)
     * @param offset Optional. The page offset.  If not specified, the default page offset is 0. (optional)
     * @param userID Optional. Filter by categories visible to the provided user with the provided userID. (optional)
     * @param definitionID Optional. Filter by categories containing a definition with the provided ID. (optional)
     * @return ApiResponse&lt;APIIPagedResponseAuthorizationCodesSharedModelsCategory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<APIIPagedResponseAuthorizationCodesSharedModelsCategory> authorizationCategoriesGetWithHttpInfo(Integer limit, Integer offset, Integer userID, String definitionID) throws ApiException {
        okhttp3.Call localVarCall = authorizationCategoriesGetValidateBeforeCall(limit, offset, userID, definitionID, null);
        Type localVarReturnType = new TypeToken<APIIPagedResponseAuthorizationCodesSharedModelsCategory>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get authorization categories. (asynchronously)
     * No Documentation Found.
     * @param limit Optional. The page limit.  If not specified, the default page limit is 10. (optional)
     * @param offset Optional. The page offset.  If not specified, the default page offset is 0. (optional)
     * @param userID Optional. Filter by categories visible to the provided user with the provided userID. (optional)
     * @param definitionID Optional. Filter by categories containing a definition with the provided ID. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authorizationCategoriesGetAsync(Integer limit, Integer offset, Integer userID, String definitionID, final ApiCallback<APIIPagedResponseAuthorizationCodesSharedModelsCategory> _callback) throws ApiException {

        okhttp3.Call localVarCall = authorizationCategoriesGetValidateBeforeCall(limit, offset, userID, definitionID, _callback);
        Type localVarReturnType = new TypeToken<APIIPagedResponseAuthorizationCodesSharedModelsCategory>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for authorizationCategoriesGetUsers
     * @param limit Optional. Defaults to 10. (optional)
     * @param offset Optional. Defaults to 0. (optional)
     * @param userIDs Optional. Includes only users with IDs on the provided comma-separated list. (optional)
     * @param categoryIDs Optional. Includes only users with categories with IDs on the provided comma-separated list. (optional)
     * @param includeCategories If true, include full Authorization Category detail. Defaults to false. (optional)
     * @param includeUsers If true, include full User detail. Defaults to false. (optional)
     * @param userSearch Optional. Includes only users with a Name, Username, or Email containing the provided value. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authorizationCategoriesGetUsersCall(Integer limit, Integer offset, String userIDs, String categoryIDs, Boolean includeCategories, Boolean includeUsers, String userSearch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/AuthorizationCategories/Users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (userIDs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIDs", userIDs));
        }

        if (categoryIDs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("categoryIDs", categoryIDs));
        }

        if (includeCategories != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeCategories", includeCategories));
        }

        if (includeUsers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeUsers", includeUsers));
        }

        if (userSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userSearch", userSearch));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authorizationCategoriesGetUsersValidateBeforeCall(Integer limit, Integer offset, String userIDs, String categoryIDs, Boolean includeCategories, Boolean includeUsers, String userSearch, final ApiCallback _callback) throws ApiException {
        return authorizationCategoriesGetUsersCall(limit, offset, userIDs, categoryIDs, includeCategories, includeUsers, userSearch, _callback);

    }

    /**
     * Returns a report of access that users have to Authorization Categories.
     * No Documentation Found.
     * @param limit Optional. Defaults to 10. (optional)
     * @param offset Optional. Defaults to 0. (optional)
     * @param userIDs Optional. Includes only users with IDs on the provided comma-separated list. (optional)
     * @param categoryIDs Optional. Includes only users with categories with IDs on the provided comma-separated list. (optional)
     * @param includeCategories If true, include full Authorization Category detail. Defaults to false. (optional)
     * @param includeUsers If true, include full User detail. Defaults to false. (optional)
     * @param userSearch Optional. Includes only users with a Name, Username, or Email containing the provided value. (optional)
     * @return APIIPagedResponseAuthorizationCodesSharedModelsCategoryUserReport
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public APIIPagedResponseAuthorizationCodesSharedModelsCategoryUserReport authorizationCategoriesGetUsers(Integer limit, Integer offset, String userIDs, String categoryIDs, Boolean includeCategories, Boolean includeUsers, String userSearch) throws ApiException {
        ApiResponse<APIIPagedResponseAuthorizationCodesSharedModelsCategoryUserReport> localVarResp = authorizationCategoriesGetUsersWithHttpInfo(limit, offset, userIDs, categoryIDs, includeCategories, includeUsers, userSearch);
        return localVarResp.getData();
    }

    /**
     * Returns a report of access that users have to Authorization Categories.
     * No Documentation Found.
     * @param limit Optional. Defaults to 10. (optional)
     * @param offset Optional. Defaults to 0. (optional)
     * @param userIDs Optional. Includes only users with IDs on the provided comma-separated list. (optional)
     * @param categoryIDs Optional. Includes only users with categories with IDs on the provided comma-separated list. (optional)
     * @param includeCategories If true, include full Authorization Category detail. Defaults to false. (optional)
     * @param includeUsers If true, include full User detail. Defaults to false. (optional)
     * @param userSearch Optional. Includes only users with a Name, Username, or Email containing the provided value. (optional)
     * @return ApiResponse&lt;APIIPagedResponseAuthorizationCodesSharedModelsCategoryUserReport&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<APIIPagedResponseAuthorizationCodesSharedModelsCategoryUserReport> authorizationCategoriesGetUsersWithHttpInfo(Integer limit, Integer offset, String userIDs, String categoryIDs, Boolean includeCategories, Boolean includeUsers, String userSearch) throws ApiException {
        okhttp3.Call localVarCall = authorizationCategoriesGetUsersValidateBeforeCall(limit, offset, userIDs, categoryIDs, includeCategories, includeUsers, userSearch, null);
        Type localVarReturnType = new TypeToken<APIIPagedResponseAuthorizationCodesSharedModelsCategoryUserReport>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a report of access that users have to Authorization Categories. (asynchronously)
     * No Documentation Found.
     * @param limit Optional. Defaults to 10. (optional)
     * @param offset Optional. Defaults to 0. (optional)
     * @param userIDs Optional. Includes only users with IDs on the provided comma-separated list. (optional)
     * @param categoryIDs Optional. Includes only users with categories with IDs on the provided comma-separated list. (optional)
     * @param includeCategories If true, include full Authorization Category detail. Defaults to false. (optional)
     * @param includeUsers If true, include full User detail. Defaults to false. (optional)
     * @param userSearch Optional. Includes only users with a Name, Username, or Email containing the provided value. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authorizationCategoriesGetUsersAsync(Integer limit, Integer offset, String userIDs, String categoryIDs, Boolean includeCategories, Boolean includeUsers, String userSearch, final ApiCallback<APIIPagedResponseAuthorizationCodesSharedModelsCategoryUserReport> _callback) throws ApiException {

        okhttp3.Call localVarCall = authorizationCategoriesGetUsersValidateBeforeCall(limit, offset, userIDs, categoryIDs, includeCategories, includeUsers, userSearch, _callback);
        Type localVarReturnType = new TypeToken<APIIPagedResponseAuthorizationCodesSharedModelsCategoryUserReport>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for authorizationCategoriesPost
     * @param authorizationCodesSharedModelsCategory An authorization category. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authorizationCategoriesPostCall(AuthorizationCodesSharedModelsCategory authorizationCodesSharedModelsCategory, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authorizationCodesSharedModelsCategory;

        // create path and map variables
        String localVarPath = "/api/v2/AuthorizationCategories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authorizationCategoriesPostValidateBeforeCall(AuthorizationCodesSharedModelsCategory authorizationCodesSharedModelsCategory, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorizationCodesSharedModelsCategory' is set
        if (authorizationCodesSharedModelsCategory == null) {
            throw new ApiException("Missing the required parameter 'authorizationCodesSharedModelsCategory' when calling authorizationCategoriesPost(Async)");
        }

        return authorizationCategoriesPostCall(authorizationCodesSharedModelsCategory, _callback);

    }

    /**
     * Add an authorization category.
     * No Documentation Found.
     * @param authorizationCodesSharedModelsCategory An authorization category. (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public String authorizationCategoriesPost(AuthorizationCodesSharedModelsCategory authorizationCodesSharedModelsCategory) throws ApiException {
        ApiResponse<String> localVarResp = authorizationCategoriesPostWithHttpInfo(authorizationCodesSharedModelsCategory);
        return localVarResp.getData();
    }

    /**
     * Add an authorization category.
     * No Documentation Found.
     * @param authorizationCodesSharedModelsCategory An authorization category. (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> authorizationCategoriesPostWithHttpInfo(AuthorizationCodesSharedModelsCategory authorizationCodesSharedModelsCategory) throws ApiException {
        okhttp3.Call localVarCall = authorizationCategoriesPostValidateBeforeCall(authorizationCodesSharedModelsCategory, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add an authorization category. (asynchronously)
     * No Documentation Found.
     * @param authorizationCodesSharedModelsCategory An authorization category. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authorizationCategoriesPostAsync(AuthorizationCodesSharedModelsCategory authorizationCodesSharedModelsCategory, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = authorizationCategoriesPostValidateBeforeCall(authorizationCodesSharedModelsCategory, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for authorizationCategoriesPut
     * @param id  (required)
     * @param authorizationCodesSharedModelsCategory An authorization category. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authorizationCategoriesPutCall(String id, AuthorizationCodesSharedModelsCategory authorizationCodesSharedModelsCategory, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authorizationCodesSharedModelsCategory;

        // create path and map variables
        String localVarPath = "/api/v2/AuthorizationCategories/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authorizationCategoriesPutValidateBeforeCall(String id, AuthorizationCodesSharedModelsCategory authorizationCodesSharedModelsCategory, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling authorizationCategoriesPut(Async)");
        }

        // verify the required parameter 'authorizationCodesSharedModelsCategory' is set
        if (authorizationCodesSharedModelsCategory == null) {
            throw new ApiException("Missing the required parameter 'authorizationCodesSharedModelsCategory' when calling authorizationCategoriesPut(Async)");
        }

        return authorizationCategoriesPutCall(id, authorizationCodesSharedModelsCategory, _callback);

    }

    /**
     * Update an authorization category.
     * No Documentation Found.
     * @param id  (required)
     * @param authorizationCodesSharedModelsCategory An authorization category. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public void authorizationCategoriesPut(String id, AuthorizationCodesSharedModelsCategory authorizationCodesSharedModelsCategory) throws ApiException {
        authorizationCategoriesPutWithHttpInfo(id, authorizationCodesSharedModelsCategory);
    }

    /**
     * Update an authorization category.
     * No Documentation Found.
     * @param id  (required)
     * @param authorizationCodesSharedModelsCategory An authorization category. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> authorizationCategoriesPutWithHttpInfo(String id, AuthorizationCodesSharedModelsCategory authorizationCodesSharedModelsCategory) throws ApiException {
        okhttp3.Call localVarCall = authorizationCategoriesPutValidateBeforeCall(id, authorizationCodesSharedModelsCategory, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update an authorization category. (asynchronously)
     * No Documentation Found.
     * @param id  (required)
     * @param authorizationCodesSharedModelsCategory An authorization category. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authorizationCategoriesPutAsync(String id, AuthorizationCodesSharedModelsCategory authorizationCodesSharedModelsCategory, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = authorizationCategoriesPutValidateBeforeCall(id, authorizationCodesSharedModelsCategory, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for authorizationCategoriesRemoveUser
     * @param id  (required)
     * @param userID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authorizationCategoriesRemoveUserCall(String id, Integer userID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/AuthorizationCategories/{id}/Users/{userID}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "userID" + "}", localVarApiClient.escapeString(userID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authorizationCategoriesRemoveUserValidateBeforeCall(String id, Integer userID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling authorizationCategoriesRemoveUser(Async)");
        }

        // verify the required parameter 'userID' is set
        if (userID == null) {
            throw new ApiException("Missing the required parameter 'userID' when calling authorizationCategoriesRemoveUser(Async)");
        }

        return authorizationCategoriesRemoveUserCall(id, userID, _callback);

    }

    /**
     * Deletes a category a user could see.
     * No Documentation Found.
     * @param id  (required)
     * @param userID  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public void authorizationCategoriesRemoveUser(String id, Integer userID) throws ApiException {
        authorizationCategoriesRemoveUserWithHttpInfo(id, userID);
    }

    /**
     * Deletes a category a user could see.
     * No Documentation Found.
     * @param id  (required)
     * @param userID  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> authorizationCategoriesRemoveUserWithHttpInfo(String id, Integer userID) throws ApiException {
        okhttp3.Call localVarCall = authorizationCategoriesRemoveUserValidateBeforeCall(id, userID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes a category a user could see. (asynchronously)
     * No Documentation Found.
     * @param id  (required)
     * @param userID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authorizationCategoriesRemoveUserAsync(String id, Integer userID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = authorizationCategoriesRemoveUserValidateBeforeCall(id, userID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
