/*
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BuildSystemSharedDTOActivityRunStatus;
import org.openapitools.client.model.BuildSystemSharedDTOActivityStep;
import org.openapitools.client.model.BuildSystemSharedDTOParameterValue;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A DTO for an IActivityRun
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:35.511967-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BuildSystemSharedDTOActivityRun {
  public static final String SERIALIZED_NAME_ACTIVITY_RUN_I_D = "ActivityRunID";
  @SerializedName(SERIALIZED_NAME_ACTIVITY_RUN_I_D)
  private Integer activityRunID;

  public static final String SERIALIZED_NAME_END_DATE = "EndDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private OffsetDateTime endDate;

  public static final String SERIALIZED_NAME_JOB_ACTIVITY_I_D = "JobActivityID";
  @SerializedName(SERIALIZED_NAME_JOB_ACTIVITY_I_D)
  private Integer jobActivityID;

  public static final String SERIALIZED_NAME_JOB_RUN_I_D = "JobRunID";
  @SerializedName(SERIALIZED_NAME_JOB_RUN_I_D)
  private Integer jobRunID;

  public static final String SERIALIZED_NAME_PARAMETERS = "Parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private List<BuildSystemSharedDTOParameterValue> parameters = new ArrayList<>();

  public static final String SERIALIZED_NAME_START_DATE = "StartDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private BuildSystemSharedDTOActivityRunStatus status;

  public static final String SERIALIZED_NAME_STEPS = "Steps";
  @SerializedName(SERIALIZED_NAME_STEPS)
  private List<BuildSystemSharedDTOActivityStep> steps = new ArrayList<>();

  public BuildSystemSharedDTOActivityRun() {
  }

  public BuildSystemSharedDTOActivityRun(
     List<BuildSystemSharedDTOParameterValue> parameters, 
     List<BuildSystemSharedDTOActivityStep> steps
  ) {
    this();
    this.parameters = parameters;
    this.steps = steps;
  }

  public BuildSystemSharedDTOActivityRun activityRunID(Integer activityRunID) {
    this.activityRunID = activityRunID;
    return this;
  }

  /**
   * The identifier for the ActivityRun
   * @return activityRunID
   */
  @javax.annotation.Nullable
  public Integer getActivityRunID() {
    return activityRunID;
  }

  public void setActivityRunID(Integer activityRunID) {
    this.activityRunID = activityRunID;
  }


  public BuildSystemSharedDTOActivityRun endDate(OffsetDateTime endDate) {
    this.endDate = endDate;
    return this;
  }

  /**
   * Read Only. The UTC date and time when the activity completed
   * @return endDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndDate() {
    return endDate;
  }

  public void setEndDate(OffsetDateTime endDate) {
    this.endDate = endDate;
  }


  public BuildSystemSharedDTOActivityRun jobActivityID(Integer jobActivityID) {
    this.jobActivityID = jobActivityID;
    return this;
  }

  /**
   * Read Only. The ID of the Job Activity that defines this activity run
   * @return jobActivityID
   */
  @javax.annotation.Nullable
  public Integer getJobActivityID() {
    return jobActivityID;
  }

  public void setJobActivityID(Integer jobActivityID) {
    this.jobActivityID = jobActivityID;
  }


  public BuildSystemSharedDTOActivityRun jobRunID(Integer jobRunID) {
    this.jobRunID = jobRunID;
    return this;
  }

  /**
   * Read Only. The ID of the JobRun under which this ActivityRun is executing
   * @return jobRunID
   */
  @javax.annotation.Nullable
  public Integer getJobRunID() {
    return jobRunID;
  }

  public void setJobRunID(Integer jobRunID) {
    this.jobRunID = jobRunID;
  }


  /**
   * The parameters used for this run of the activity.  Parameters cannot be added or removed, but output parameter values may be updated.
   * @return parameters
   */
  @javax.annotation.Nullable
  public List<BuildSystemSharedDTOParameterValue> getParameters() {
    return parameters;
  }



  public BuildSystemSharedDTOActivityRun startDate(OffsetDateTime startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * Read Only. The UTC date and time when the activity started
   * @return startDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartDate() {
    return startDate;
  }

  public void setStartDate(OffsetDateTime startDate) {
    this.startDate = startDate;
  }


  public BuildSystemSharedDTOActivityRun status(BuildSystemSharedDTOActivityRunStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public BuildSystemSharedDTOActivityRunStatus getStatus() {
    return status;
  }

  public void setStatus(BuildSystemSharedDTOActivityRunStatus status) {
    this.status = status;
  }


  /**
   * Read Only. The steps to be executed for the activity.  These steps come from the relationship through JobActivity down to ActivityStep
   * @return steps
   */
  @javax.annotation.Nullable
  public List<BuildSystemSharedDTOActivityStep> getSteps() {
    return steps;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BuildSystemSharedDTOActivityRun buildSystemSharedDTOActivityRun = (BuildSystemSharedDTOActivityRun) o;
    return Objects.equals(this.activityRunID, buildSystemSharedDTOActivityRun.activityRunID) &&
        Objects.equals(this.endDate, buildSystemSharedDTOActivityRun.endDate) &&
        Objects.equals(this.jobActivityID, buildSystemSharedDTOActivityRun.jobActivityID) &&
        Objects.equals(this.jobRunID, buildSystemSharedDTOActivityRun.jobRunID) &&
        Objects.equals(this.parameters, buildSystemSharedDTOActivityRun.parameters) &&
        Objects.equals(this.startDate, buildSystemSharedDTOActivityRun.startDate) &&
        Objects.equals(this.status, buildSystemSharedDTOActivityRun.status) &&
        Objects.equals(this.steps, buildSystemSharedDTOActivityRun.steps);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activityRunID, endDate, jobActivityID, jobRunID, parameters, startDate, status, steps);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BuildSystemSharedDTOActivityRun {\n");
    sb.append("    activityRunID: ").append(toIndentedString(activityRunID)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    jobActivityID: ").append(toIndentedString(jobActivityID)).append("\n");
    sb.append("    jobRunID: ").append(toIndentedString(jobRunID)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    steps: ").append(toIndentedString(steps)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ActivityRunID");
    openapiFields.add("EndDate");
    openapiFields.add("JobActivityID");
    openapiFields.add("JobRunID");
    openapiFields.add("Parameters");
    openapiFields.add("StartDate");
    openapiFields.add("Status");
    openapiFields.add("Steps");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Status");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BuildSystemSharedDTOActivityRun
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BuildSystemSharedDTOActivityRun.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BuildSystemSharedDTOActivityRun is not found in the empty JSON string", BuildSystemSharedDTOActivityRun.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BuildSystemSharedDTOActivityRun.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BuildSystemSharedDTOActivityRun` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BuildSystemSharedDTOActivityRun.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("Parameters") != null && !jsonObj.get("Parameters").isJsonNull()) {
        JsonArray jsonArrayparameters = jsonObj.getAsJsonArray("Parameters");
        if (jsonArrayparameters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Parameters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Parameters` to be an array in the JSON string but got `%s`", jsonObj.get("Parameters").toString()));
          }

          // validate the optional field `Parameters` (array)
          for (int i = 0; i < jsonArrayparameters.size(); i++) {
            BuildSystemSharedDTOParameterValue.validateJsonElement(jsonArrayparameters.get(i));
          };
        }
      }
      // validate the required field `Status`
      BuildSystemSharedDTOActivityRunStatus.validateJsonElement(jsonObj.get("Status"));
      if (jsonObj.get("Steps") != null && !jsonObj.get("Steps").isJsonNull()) {
        JsonArray jsonArraysteps = jsonObj.getAsJsonArray("Steps");
        if (jsonArraysteps != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Steps").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Steps` to be an array in the JSON string but got `%s`", jsonObj.get("Steps").toString()));
          }

          // validate the optional field `Steps` (array)
          for (int i = 0; i < jsonArraysteps.size(); i++) {
            BuildSystemSharedDTOActivityStep.validateJsonElement(jsonArraysteps.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BuildSystemSharedDTOActivityRun.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BuildSystemSharedDTOActivityRun' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BuildSystemSharedDTOActivityRun> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BuildSystemSharedDTOActivityRun.class));

       return (TypeAdapter<T>) new TypeAdapter<BuildSystemSharedDTOActivityRun>() {
           @Override
           public void write(JsonWriter out, BuildSystemSharedDTOActivityRun value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BuildSystemSharedDTOActivityRun read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BuildSystemSharedDTOActivityRun given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BuildSystemSharedDTOActivityRun
   * @throws IOException if the JSON string is invalid with respect to BuildSystemSharedDTOActivityRun
   */
  public static BuildSystemSharedDTOActivityRun fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BuildSystemSharedDTOActivityRun.class);
  }

  /**
   * Convert an instance of BuildSystemSharedDTOActivityRun to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

