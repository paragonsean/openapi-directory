/*
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.APIModelsApiError;
import org.openapitools.client.model.APIPagedResponseUpdateSystemModelsUpdateGroupClientRelationship;
import org.openapitools.client.model.UpdateSystemModelsUpdateGroupClientRelationship;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UpdateGroupClientRelationshipsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UpdateGroupClientRelationshipsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UpdateGroupClientRelationshipsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for updateGroupClientRelationshipsGetSubscription
     * @param relationshipID The RelationshipID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGroupClientRelationshipsGetSubscriptionCall(String relationshipID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/UpdateGroupClientRelationships/{RelationshipID}"
            .replace("{" + "RelationshipID" + "}", localVarApiClient.escapeString(relationshipID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateGroupClientRelationshipsGetSubscriptionValidateBeforeCall(String relationshipID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'relationshipID' is set
        if (relationshipID == null) {
            throw new ApiException("Missing the required parameter 'relationshipID' when calling updateGroupClientRelationshipsGetSubscription(Async)");
        }

        return updateGroupClientRelationshipsGetSubscriptionCall(relationshipID, _callback);

    }

    /**
     * Get a subscription by RelationshipID
     * No Documentation Found.
     * @param relationshipID The RelationshipID. (required)
     * @return UpdateSystemModelsUpdateGroupClientRelationship
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSystemModelsUpdateGroupClientRelationship updateGroupClientRelationshipsGetSubscription(String relationshipID) throws ApiException {
        ApiResponse<UpdateSystemModelsUpdateGroupClientRelationship> localVarResp = updateGroupClientRelationshipsGetSubscriptionWithHttpInfo(relationshipID);
        return localVarResp.getData();
    }

    /**
     * Get a subscription by RelationshipID
     * No Documentation Found.
     * @param relationshipID The RelationshipID. (required)
     * @return ApiResponse&lt;UpdateSystemModelsUpdateGroupClientRelationship&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateSystemModelsUpdateGroupClientRelationship> updateGroupClientRelationshipsGetSubscriptionWithHttpInfo(String relationshipID) throws ApiException {
        okhttp3.Call localVarCall = updateGroupClientRelationshipsGetSubscriptionValidateBeforeCall(relationshipID, null);
        Type localVarReturnType = new TypeToken<UpdateSystemModelsUpdateGroupClientRelationship>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a subscription by RelationshipID (asynchronously)
     * No Documentation Found.
     * @param relationshipID The RelationshipID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGroupClientRelationshipsGetSubscriptionAsync(String relationshipID, final ApiCallback<UpdateSystemModelsUpdateGroupClientRelationship> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateGroupClientRelationshipsGetSubscriptionValidateBeforeCall(relationshipID, _callback);
        Type localVarReturnType = new TypeToken<UpdateSystemModelsUpdateGroupClientRelationship>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateGroupClientRelationshipsGetSubscriptions
     * @param clientID Optional. Filter by Client ID (optional)
     * @param updateGroupID Optional. Filter by Update Group ID (optional)
     * @param limit Optional. The page limit. The default page limit is 10. (optional)
     * @param offset Optional. The page offset. The default page offset is 0. (optional)
     * @param active Optional. Filter by Active (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGroupClientRelationshipsGetSubscriptionsCall(String clientID, String updateGroupID, Integer limit, Integer offset, Boolean active, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/UpdateGroupClientRelationships";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (clientID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ClientID", clientID));
        }

        if (updateGroupID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("UpdateGroupID", updateGroupID));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (active != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Active", active));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateGroupClientRelationshipsGetSubscriptionsValidateBeforeCall(String clientID, String updateGroupID, Integer limit, Integer offset, Boolean active, final ApiCallback _callback) throws ApiException {
        return updateGroupClientRelationshipsGetSubscriptionsCall(clientID, updateGroupID, limit, offset, active, _callback);

    }

    /**
     * Get a list of current Client Subscriptions.
     * No Documentation Found.
     * @param clientID Optional. Filter by Client ID (optional)
     * @param updateGroupID Optional. Filter by Update Group ID (optional)
     * @param limit Optional. The page limit. The default page limit is 10. (optional)
     * @param offset Optional. The page offset. The default page offset is 0. (optional)
     * @param active Optional. Filter by Active (optional)
     * @return APIPagedResponseUpdateSystemModelsUpdateGroupClientRelationship
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public APIPagedResponseUpdateSystemModelsUpdateGroupClientRelationship updateGroupClientRelationshipsGetSubscriptions(String clientID, String updateGroupID, Integer limit, Integer offset, Boolean active) throws ApiException {
        ApiResponse<APIPagedResponseUpdateSystemModelsUpdateGroupClientRelationship> localVarResp = updateGroupClientRelationshipsGetSubscriptionsWithHttpInfo(clientID, updateGroupID, limit, offset, active);
        return localVarResp.getData();
    }

    /**
     * Get a list of current Client Subscriptions.
     * No Documentation Found.
     * @param clientID Optional. Filter by Client ID (optional)
     * @param updateGroupID Optional. Filter by Update Group ID (optional)
     * @param limit Optional. The page limit. The default page limit is 10. (optional)
     * @param offset Optional. The page offset. The default page offset is 0. (optional)
     * @param active Optional. Filter by Active (optional)
     * @return ApiResponse&lt;APIPagedResponseUpdateSystemModelsUpdateGroupClientRelationship&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<APIPagedResponseUpdateSystemModelsUpdateGroupClientRelationship> updateGroupClientRelationshipsGetSubscriptionsWithHttpInfo(String clientID, String updateGroupID, Integer limit, Integer offset, Boolean active) throws ApiException {
        okhttp3.Call localVarCall = updateGroupClientRelationshipsGetSubscriptionsValidateBeforeCall(clientID, updateGroupID, limit, offset, active, null);
        Type localVarReturnType = new TypeToken<APIPagedResponseUpdateSystemModelsUpdateGroupClientRelationship>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of current Client Subscriptions. (asynchronously)
     * No Documentation Found.
     * @param clientID Optional. Filter by Client ID (optional)
     * @param updateGroupID Optional. Filter by Update Group ID (optional)
     * @param limit Optional. The page limit. The default page limit is 10. (optional)
     * @param offset Optional. The page offset. The default page offset is 0. (optional)
     * @param active Optional. Filter by Active (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGroupClientRelationshipsGetSubscriptionsAsync(String clientID, String updateGroupID, Integer limit, Integer offset, Boolean active, final ApiCallback<APIPagedResponseUpdateSystemModelsUpdateGroupClientRelationship> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateGroupClientRelationshipsGetSubscriptionsValidateBeforeCall(clientID, updateGroupID, limit, offset, active, _callback);
        Type localVarReturnType = new TypeToken<APIPagedResponseUpdateSystemModelsUpdateGroupClientRelationship>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateGroupClientRelationshipsPostSubscription
     * @param updateSystemModelsUpdateGroupClientRelationship The UpdateGroupClientRelationship to add. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGroupClientRelationshipsPostSubscriptionCall(UpdateSystemModelsUpdateGroupClientRelationship updateSystemModelsUpdateGroupClientRelationship, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateSystemModelsUpdateGroupClientRelationship;

        // create path and map variables
        String localVarPath = "/api/v2/UpdateGroupClientRelationships";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateGroupClientRelationshipsPostSubscriptionValidateBeforeCall(UpdateSystemModelsUpdateGroupClientRelationship updateSystemModelsUpdateGroupClientRelationship, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateSystemModelsUpdateGroupClientRelationship' is set
        if (updateSystemModelsUpdateGroupClientRelationship == null) {
            throw new ApiException("Missing the required parameter 'updateSystemModelsUpdateGroupClientRelationship' when calling updateGroupClientRelationshipsPostSubscription(Async)");
        }

        return updateGroupClientRelationshipsPostSubscriptionCall(updateSystemModelsUpdateGroupClientRelationship, _callback);

    }

    /**
     * Add a subscription
     * No Documentation Found.
     * @param updateSystemModelsUpdateGroupClientRelationship The UpdateGroupClientRelationship to add. (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public String updateGroupClientRelationshipsPostSubscription(UpdateSystemModelsUpdateGroupClientRelationship updateSystemModelsUpdateGroupClientRelationship) throws ApiException {
        ApiResponse<String> localVarResp = updateGroupClientRelationshipsPostSubscriptionWithHttpInfo(updateSystemModelsUpdateGroupClientRelationship);
        return localVarResp.getData();
    }

    /**
     * Add a subscription
     * No Documentation Found.
     * @param updateSystemModelsUpdateGroupClientRelationship The UpdateGroupClientRelationship to add. (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> updateGroupClientRelationshipsPostSubscriptionWithHttpInfo(UpdateSystemModelsUpdateGroupClientRelationship updateSystemModelsUpdateGroupClientRelationship) throws ApiException {
        okhttp3.Call localVarCall = updateGroupClientRelationshipsPostSubscriptionValidateBeforeCall(updateSystemModelsUpdateGroupClientRelationship, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a subscription (asynchronously)
     * No Documentation Found.
     * @param updateSystemModelsUpdateGroupClientRelationship The UpdateGroupClientRelationship to add. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGroupClientRelationshipsPostSubscriptionAsync(UpdateSystemModelsUpdateGroupClientRelationship updateSystemModelsUpdateGroupClientRelationship, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateGroupClientRelationshipsPostSubscriptionValidateBeforeCall(updateSystemModelsUpdateGroupClientRelationship, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateGroupClientRelationshipsPutSubscription
     * @param relationshipID The relationship id of the UpdateGroupClientRelationship (required)
     * @param updateSystemModelsUpdateGroupClientRelationship The updated UpdateGroupClientRelationship (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGroupClientRelationshipsPutSubscriptionCall(String relationshipID, UpdateSystemModelsUpdateGroupClientRelationship updateSystemModelsUpdateGroupClientRelationship, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateSystemModelsUpdateGroupClientRelationship;

        // create path and map variables
        String localVarPath = "/api/v2/UpdateGroupClientRelationships/{RelationshipID}"
            .replace("{" + "RelationshipID" + "}", localVarApiClient.escapeString(relationshipID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateGroupClientRelationshipsPutSubscriptionValidateBeforeCall(String relationshipID, UpdateSystemModelsUpdateGroupClientRelationship updateSystemModelsUpdateGroupClientRelationship, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'relationshipID' is set
        if (relationshipID == null) {
            throw new ApiException("Missing the required parameter 'relationshipID' when calling updateGroupClientRelationshipsPutSubscription(Async)");
        }

        // verify the required parameter 'updateSystemModelsUpdateGroupClientRelationship' is set
        if (updateSystemModelsUpdateGroupClientRelationship == null) {
            throw new ApiException("Missing the required parameter 'updateSystemModelsUpdateGroupClientRelationship' when calling updateGroupClientRelationshipsPutSubscription(Async)");
        }

        return updateGroupClientRelationshipsPutSubscriptionCall(relationshipID, updateSystemModelsUpdateGroupClientRelationship, _callback);

    }

    /**
     * Updates a Subscription
     * No Documentation Found.
     * @param relationshipID The relationship id of the UpdateGroupClientRelationship (required)
     * @param updateSystemModelsUpdateGroupClientRelationship The updated UpdateGroupClientRelationship (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public void updateGroupClientRelationshipsPutSubscription(String relationshipID, UpdateSystemModelsUpdateGroupClientRelationship updateSystemModelsUpdateGroupClientRelationship) throws ApiException {
        updateGroupClientRelationshipsPutSubscriptionWithHttpInfo(relationshipID, updateSystemModelsUpdateGroupClientRelationship);
    }

    /**
     * Updates a Subscription
     * No Documentation Found.
     * @param relationshipID The relationship id of the UpdateGroupClientRelationship (required)
     * @param updateSystemModelsUpdateGroupClientRelationship The updated UpdateGroupClientRelationship (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateGroupClientRelationshipsPutSubscriptionWithHttpInfo(String relationshipID, UpdateSystemModelsUpdateGroupClientRelationship updateSystemModelsUpdateGroupClientRelationship) throws ApiException {
        okhttp3.Call localVarCall = updateGroupClientRelationshipsPutSubscriptionValidateBeforeCall(relationshipID, updateSystemModelsUpdateGroupClientRelationship, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Updates a Subscription (asynchronously)
     * No Documentation Found.
     * @param relationshipID The relationship id of the UpdateGroupClientRelationship (required)
     * @param updateSystemModelsUpdateGroupClientRelationship The updated UpdateGroupClientRelationship (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGroupClientRelationshipsPutSubscriptionAsync(String relationshipID, UpdateSystemModelsUpdateGroupClientRelationship updateSystemModelsUpdateGroupClientRelationship, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateGroupClientRelationshipsPutSubscriptionValidateBeforeCall(relationshipID, updateSystemModelsUpdateGroupClientRelationship, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateGroupClientRelationshipsPutSubscriptionByClientIDUpdateGroupID
     * @param clientID The Client ID.  This can be a client ID that has not been registered yet. (required)
     * @param updateGroupID The Update Group ID (required)
     * @param active Subscribe the client to the Update Group. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGroupClientRelationshipsPutSubscriptionByClientIDUpdateGroupIDCall(String clientID, String updateGroupID, Boolean active, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/UpdateGroupClientRelationships";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (clientID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ClientID", clientID));
        }

        if (updateGroupID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("UpdateGroupID", updateGroupID));
        }

        if (active != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Active", active));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateGroupClientRelationshipsPutSubscriptionByClientIDUpdateGroupIDValidateBeforeCall(String clientID, String updateGroupID, Boolean active, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'clientID' is set
        if (clientID == null) {
            throw new ApiException("Missing the required parameter 'clientID' when calling updateGroupClientRelationshipsPutSubscriptionByClientIDUpdateGroupID(Async)");
        }

        // verify the required parameter 'updateGroupID' is set
        if (updateGroupID == null) {
            throw new ApiException("Missing the required parameter 'updateGroupID' when calling updateGroupClientRelationshipsPutSubscriptionByClientIDUpdateGroupID(Async)");
        }

        // verify the required parameter 'active' is set
        if (active == null) {
            throw new ApiException("Missing the required parameter 'active' when calling updateGroupClientRelationshipsPutSubscriptionByClientIDUpdateGroupID(Async)");
        }

        return updateGroupClientRelationshipsPutSubscriptionByClientIDUpdateGroupIDCall(clientID, updateGroupID, active, _callback);

    }

    /**
     * DEPRECATED. Set client subscription status for an update group.
     * No Documentation Found.
     * @param clientID The Client ID.  This can be a client ID that has not been registered yet. (required)
     * @param updateGroupID The Update Group ID (required)
     * @param active Subscribe the client to the Update Group. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public void updateGroupClientRelationshipsPutSubscriptionByClientIDUpdateGroupID(String clientID, String updateGroupID, Boolean active) throws ApiException {
        updateGroupClientRelationshipsPutSubscriptionByClientIDUpdateGroupIDWithHttpInfo(clientID, updateGroupID, active);
    }

    /**
     * DEPRECATED. Set client subscription status for an update group.
     * No Documentation Found.
     * @param clientID The Client ID.  This can be a client ID that has not been registered yet. (required)
     * @param updateGroupID The Update Group ID (required)
     * @param active Subscribe the client to the Update Group. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateGroupClientRelationshipsPutSubscriptionByClientIDUpdateGroupIDWithHttpInfo(String clientID, String updateGroupID, Boolean active) throws ApiException {
        okhttp3.Call localVarCall = updateGroupClientRelationshipsPutSubscriptionByClientIDUpdateGroupIDValidateBeforeCall(clientID, updateGroupID, active, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * DEPRECATED. Set client subscription status for an update group. (asynchronously)
     * No Documentation Found.
     * @param clientID The Client ID.  This can be a client ID that has not been registered yet. (required)
     * @param updateGroupID The Update Group ID (required)
     * @param active Subscribe the client to the Update Group. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGroupClientRelationshipsPutSubscriptionByClientIDUpdateGroupIDAsync(String clientID, String updateGroupID, Boolean active, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateGroupClientRelationshipsPutSubscriptionByClientIDUpdateGroupIDValidateBeforeCall(clientID, updateGroupID, active, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
