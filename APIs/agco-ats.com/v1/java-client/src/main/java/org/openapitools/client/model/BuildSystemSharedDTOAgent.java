/*
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BuildSystemSharedDTOAgentStatus;
import org.openapitools.client.model.BuildSystemSharedDTOStepConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A DTO for an IAgent
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:35.511967-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BuildSystemSharedDTOAgent {
  public static final String SERIALIZED_NAME_AGENT_I_D = "AgentID";
  @SerializedName(SERIALIZED_NAME_AGENT_I_D)
  private Integer agentID;

  public static final String SERIALIZED_NAME_KEEP_ALIVE_INTERVAL = "KeepAliveInterval";
  @SerializedName(SERIALIZED_NAME_KEEP_ALIVE_INTERVAL)
  private Integer keepAliveInterval;

  public static final String SERIALIZED_NAME_MACHINE_NAME = "MachineName";
  @SerializedName(SERIALIZED_NAME_MACHINE_NAME)
  private String machineName;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private BuildSystemSharedDTOAgentStatus status;

  public static final String SERIALIZED_NAME_STEP_CONFIGURATIONS = "StepConfigurations";
  @SerializedName(SERIALIZED_NAME_STEP_CONFIGURATIONS)
  private List<BuildSystemSharedDTOStepConfiguration> stepConfigurations = new ArrayList<>();

  public static final String SERIALIZED_NAME_USER_I_D = "UserID";
  @SerializedName(SERIALIZED_NAME_USER_I_D)
  private Integer userID;

  public BuildSystemSharedDTOAgent() {
  }

  public BuildSystemSharedDTOAgent(
     List<BuildSystemSharedDTOStepConfiguration> stepConfigurations
  ) {
    this();
    this.stepConfigurations = stepConfigurations;
  }

  public BuildSystemSharedDTOAgent agentID(Integer agentID) {
    this.agentID = agentID;
    return this;
  }

  /**
   * The id of the Agent
   * @return agentID
   */
  @javax.annotation.Nullable
  public Integer getAgentID() {
    return agentID;
  }

  public void setAgentID(Integer agentID) {
    this.agentID = agentID;
  }


  public BuildSystemSharedDTOAgent keepAliveInterval(Integer keepAliveInterval) {
    this.keepAliveInterval = keepAliveInterval;
    return this;
  }

  /**
   * The &#39;Heartbeat Interval&#39; used by the Build Agent.
   * @return keepAliveInterval
   */
  @javax.annotation.Nonnull
  public Integer getKeepAliveInterval() {
    return keepAliveInterval;
  }

  public void setKeepAliveInterval(Integer keepAliveInterval) {
    this.keepAliveInterval = keepAliveInterval;
  }


  public BuildSystemSharedDTOAgent machineName(String machineName) {
    this.machineName = machineName;
    return this;
  }

  /**
   * The machine name of the computer the agent is running on
   * @return machineName
   */
  @javax.annotation.Nonnull
  public String getMachineName() {
    return machineName;
  }

  public void setMachineName(String machineName) {
    this.machineName = machineName;
  }


  public BuildSystemSharedDTOAgent status(BuildSystemSharedDTOAgentStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public BuildSystemSharedDTOAgentStatus getStatus() {
    return status;
  }

  public void setStatus(BuildSystemSharedDTOAgentStatus status) {
    this.status = status;
  }


  /**
   * The agent&#39;s step configurations
   * @return stepConfigurations
   */
  @javax.annotation.Nullable
  public List<BuildSystemSharedDTOStepConfiguration> getStepConfigurations() {
    return stepConfigurations;
  }



  public BuildSystemSharedDTOAgent userID(Integer userID) {
    this.userID = userID;
    return this;
  }

  /**
   * The UserID of the Agent
   * @return userID
   */
  @javax.annotation.Nonnull
  public Integer getUserID() {
    return userID;
  }

  public void setUserID(Integer userID) {
    this.userID = userID;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BuildSystemSharedDTOAgent buildSystemSharedDTOAgent = (BuildSystemSharedDTOAgent) o;
    return Objects.equals(this.agentID, buildSystemSharedDTOAgent.agentID) &&
        Objects.equals(this.keepAliveInterval, buildSystemSharedDTOAgent.keepAliveInterval) &&
        Objects.equals(this.machineName, buildSystemSharedDTOAgent.machineName) &&
        Objects.equals(this.status, buildSystemSharedDTOAgent.status) &&
        Objects.equals(this.stepConfigurations, buildSystemSharedDTOAgent.stepConfigurations) &&
        Objects.equals(this.userID, buildSystemSharedDTOAgent.userID);
  }

  @Override
  public int hashCode() {
    return Objects.hash(agentID, keepAliveInterval, machineName, status, stepConfigurations, userID);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BuildSystemSharedDTOAgent {\n");
    sb.append("    agentID: ").append(toIndentedString(agentID)).append("\n");
    sb.append("    keepAliveInterval: ").append(toIndentedString(keepAliveInterval)).append("\n");
    sb.append("    machineName: ").append(toIndentedString(machineName)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    stepConfigurations: ").append(toIndentedString(stepConfigurations)).append("\n");
    sb.append("    userID: ").append(toIndentedString(userID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AgentID");
    openapiFields.add("KeepAliveInterval");
    openapiFields.add("MachineName");
    openapiFields.add("Status");
    openapiFields.add("StepConfigurations");
    openapiFields.add("UserID");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("KeepAliveInterval");
    openapiRequiredFields.add("MachineName");
    openapiRequiredFields.add("Status");
    openapiRequiredFields.add("UserID");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BuildSystemSharedDTOAgent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BuildSystemSharedDTOAgent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BuildSystemSharedDTOAgent is not found in the empty JSON string", BuildSystemSharedDTOAgent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BuildSystemSharedDTOAgent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BuildSystemSharedDTOAgent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BuildSystemSharedDTOAgent.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("MachineName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MachineName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MachineName").toString()));
      }
      // validate the required field `Status`
      BuildSystemSharedDTOAgentStatus.validateJsonElement(jsonObj.get("Status"));
      if (jsonObj.get("StepConfigurations") != null && !jsonObj.get("StepConfigurations").isJsonNull()) {
        JsonArray jsonArraystepConfigurations = jsonObj.getAsJsonArray("StepConfigurations");
        if (jsonArraystepConfigurations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("StepConfigurations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `StepConfigurations` to be an array in the JSON string but got `%s`", jsonObj.get("StepConfigurations").toString()));
          }

          // validate the optional field `StepConfigurations` (array)
          for (int i = 0; i < jsonArraystepConfigurations.size(); i++) {
            BuildSystemSharedDTOStepConfiguration.validateJsonElement(jsonArraystepConfigurations.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BuildSystemSharedDTOAgent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BuildSystemSharedDTOAgent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BuildSystemSharedDTOAgent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BuildSystemSharedDTOAgent.class));

       return (TypeAdapter<T>) new TypeAdapter<BuildSystemSharedDTOAgent>() {
           @Override
           public void write(JsonWriter out, BuildSystemSharedDTOAgent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BuildSystemSharedDTOAgent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BuildSystemSharedDTOAgent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BuildSystemSharedDTOAgent
   * @throws IOException if the JSON string is invalid with respect to BuildSystemSharedDTOAgent
   */
  public static BuildSystemSharedDTOAgent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BuildSystemSharedDTOAgent.class);
  }

  /**
   * Convert an instance of BuildSystemSharedDTOAgent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

