/*
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.APIIPagedResponseGlobalResourcesSharedModelsLanguage;
import org.openapitools.client.model.APIModelsApiError;
import org.openapitools.client.model.GlobalResourcesSharedModelsLanguage;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LanguagesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LanguagesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LanguagesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for languagesCreateLanguage
     * @param globalResourcesSharedModelsLanguage  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call languagesCreateLanguageCall(GlobalResourcesSharedModelsLanguage globalResourcesSharedModelsLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = globalResourcesSharedModelsLanguage;

        // create path and map variables
        String localVarPath = "/api/v2/Languages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call languagesCreateLanguageValidateBeforeCall(GlobalResourcesSharedModelsLanguage globalResourcesSharedModelsLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'globalResourcesSharedModelsLanguage' is set
        if (globalResourcesSharedModelsLanguage == null) {
            throw new ApiException("Missing the required parameter 'globalResourcesSharedModelsLanguage' when calling languagesCreateLanguage(Async)");
        }

        return languagesCreateLanguageCall(globalResourcesSharedModelsLanguage, _callback);

    }

    /**
     * Add a Language to support for translations. Accepts a Language object. Returns the Id of the created object.
     * No Documentation Found.
     * @param globalResourcesSharedModelsLanguage  (required)
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public Integer languagesCreateLanguage(GlobalResourcesSharedModelsLanguage globalResourcesSharedModelsLanguage) throws ApiException {
        ApiResponse<Integer> localVarResp = languagesCreateLanguageWithHttpInfo(globalResourcesSharedModelsLanguage);
        return localVarResp.getData();
    }

    /**
     * Add a Language to support for translations. Accepts a Language object. Returns the Id of the created object.
     * No Documentation Found.
     * @param globalResourcesSharedModelsLanguage  (required)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Integer> languagesCreateLanguageWithHttpInfo(GlobalResourcesSharedModelsLanguage globalResourcesSharedModelsLanguage) throws ApiException {
        okhttp3.Call localVarCall = languagesCreateLanguageValidateBeforeCall(globalResourcesSharedModelsLanguage, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a Language to support for translations. Accepts a Language object. Returns the Id of the created object. (asynchronously)
     * No Documentation Found.
     * @param globalResourcesSharedModelsLanguage  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call languagesCreateLanguageAsync(GlobalResourcesSharedModelsLanguage globalResourcesSharedModelsLanguage, final ApiCallback<Integer> _callback) throws ApiException {

        okhttp3.Call localVarCall = languagesCreateLanguageValidateBeforeCall(globalResourcesSharedModelsLanguage, _callback);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for languagesDeleteLanguage
     * @param localeID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call languagesDeleteLanguageCall(Integer localeID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/Languages/{LocaleID}"
            .replace("{" + "LocaleID" + "}", localVarApiClient.escapeString(localeID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call languagesDeleteLanguageValidateBeforeCall(Integer localeID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'localeID' is set
        if (localeID == null) {
            throw new ApiException("Missing the required parameter 'localeID' when calling languagesDeleteLanguage(Async)");
        }

        return languagesDeleteLanguageCall(localeID, _callback);

    }

    /**
     * Remove a Language from those supported for translations. Marks language as deleted.
     * No Documentation Found.
     * @param localeID  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public void languagesDeleteLanguage(Integer localeID) throws ApiException {
        languagesDeleteLanguageWithHttpInfo(localeID);
    }

    /**
     * Remove a Language from those supported for translations. Marks language as deleted.
     * No Documentation Found.
     * @param localeID  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> languagesDeleteLanguageWithHttpInfo(Integer localeID) throws ApiException {
        okhttp3.Call localVarCall = languagesDeleteLanguageValidateBeforeCall(localeID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a Language from those supported for translations. Marks language as deleted. (asynchronously)
     * No Documentation Found.
     * @param localeID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call languagesDeleteLanguageAsync(Integer localeID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = languagesDeleteLanguageValidateBeforeCall(localeID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for languagesGetLanguage
     * @param localeID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call languagesGetLanguageCall(Integer localeID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/Languages/{LocaleID}"
            .replace("{" + "LocaleID" + "}", localVarApiClient.escapeString(localeID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call languagesGetLanguageValidateBeforeCall(Integer localeID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'localeID' is set
        if (localeID == null) {
            throw new ApiException("Missing the required parameter 'localeID' when calling languagesGetLanguage(Async)");
        }

        return languagesGetLanguageCall(localeID, _callback);

    }

    /**
     * Get a language by its id. Returns a Language object
     * No Documentation Found.
     * @param localeID  (required)
     * @return GlobalResourcesSharedModelsLanguage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public GlobalResourcesSharedModelsLanguage languagesGetLanguage(Integer localeID) throws ApiException {
        ApiResponse<GlobalResourcesSharedModelsLanguage> localVarResp = languagesGetLanguageWithHttpInfo(localeID);
        return localVarResp.getData();
    }

    /**
     * Get a language by its id. Returns a Language object
     * No Documentation Found.
     * @param localeID  (required)
     * @return ApiResponse&lt;GlobalResourcesSharedModelsLanguage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GlobalResourcesSharedModelsLanguage> languagesGetLanguageWithHttpInfo(Integer localeID) throws ApiException {
        okhttp3.Call localVarCall = languagesGetLanguageValidateBeforeCall(localeID, null);
        Type localVarReturnType = new TypeToken<GlobalResourcesSharedModelsLanguage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a language by its id. Returns a Language object (asynchronously)
     * No Documentation Found.
     * @param localeID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call languagesGetLanguageAsync(Integer localeID, final ApiCallback<GlobalResourcesSharedModelsLanguage> _callback) throws ApiException {

        okhttp3.Call localVarCall = languagesGetLanguageValidateBeforeCall(localeID, _callback);
        Type localVarReturnType = new TypeToken<GlobalResourcesSharedModelsLanguage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for languagesGetLanguages
     * @param limit limit the number of Language objects returned. Optional (defaults to 10). (optional)
     * @param offset the number of Language objects to skip. Optional (defaults to 0). (optional)
     * @param includeDeleted whether to include languages marked as deleted. Defaults to false (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call languagesGetLanguagesCall(Integer limit, Integer offset, Boolean includeDeleted, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/Languages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (includeDeleted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeDeleted", includeDeleted));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call languagesGetLanguagesValidateBeforeCall(Integer limit, Integer offset, Boolean includeDeleted, final ApiCallback _callback) throws ApiException {
        return languagesGetLanguagesCall(limit, offset, includeDeleted, _callback);

    }

    /**
     * Get a list of the languages for which translations are supported. Returns a PagedResponse of Language objects.
     * No Documentation Found.
     * @param limit limit the number of Language objects returned. Optional (defaults to 10). (optional)
     * @param offset the number of Language objects to skip. Optional (defaults to 0). (optional)
     * @param includeDeleted whether to include languages marked as deleted. Defaults to false (optional)
     * @return APIIPagedResponseGlobalResourcesSharedModelsLanguage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public APIIPagedResponseGlobalResourcesSharedModelsLanguage languagesGetLanguages(Integer limit, Integer offset, Boolean includeDeleted) throws ApiException {
        ApiResponse<APIIPagedResponseGlobalResourcesSharedModelsLanguage> localVarResp = languagesGetLanguagesWithHttpInfo(limit, offset, includeDeleted);
        return localVarResp.getData();
    }

    /**
     * Get a list of the languages for which translations are supported. Returns a PagedResponse of Language objects.
     * No Documentation Found.
     * @param limit limit the number of Language objects returned. Optional (defaults to 10). (optional)
     * @param offset the number of Language objects to skip. Optional (defaults to 0). (optional)
     * @param includeDeleted whether to include languages marked as deleted. Defaults to false (optional)
     * @return ApiResponse&lt;APIIPagedResponseGlobalResourcesSharedModelsLanguage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<APIIPagedResponseGlobalResourcesSharedModelsLanguage> languagesGetLanguagesWithHttpInfo(Integer limit, Integer offset, Boolean includeDeleted) throws ApiException {
        okhttp3.Call localVarCall = languagesGetLanguagesValidateBeforeCall(limit, offset, includeDeleted, null);
        Type localVarReturnType = new TypeToken<APIIPagedResponseGlobalResourcesSharedModelsLanguage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of the languages for which translations are supported. Returns a PagedResponse of Language objects. (asynchronously)
     * No Documentation Found.
     * @param limit limit the number of Language objects returned. Optional (defaults to 10). (optional)
     * @param offset the number of Language objects to skip. Optional (defaults to 0). (optional)
     * @param includeDeleted whether to include languages marked as deleted. Defaults to false (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call languagesGetLanguagesAsync(Integer limit, Integer offset, Boolean includeDeleted, final ApiCallback<APIIPagedResponseGlobalResourcesSharedModelsLanguage> _callback) throws ApiException {

        okhttp3.Call localVarCall = languagesGetLanguagesValidateBeforeCall(limit, offset, includeDeleted, _callback);
        Type localVarReturnType = new TypeToken<APIIPagedResponseGlobalResourcesSharedModelsLanguage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for languagesUpdateLanguage
     * @param localeID  (required)
     * @param globalResourcesSharedModelsLanguage  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call languagesUpdateLanguageCall(Integer localeID, GlobalResourcesSharedModelsLanguage globalResourcesSharedModelsLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = globalResourcesSharedModelsLanguage;

        // create path and map variables
        String localVarPath = "/api/v2/Languages/{LocaleID}"
            .replace("{" + "LocaleID" + "}", localVarApiClient.escapeString(localeID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call languagesUpdateLanguageValidateBeforeCall(Integer localeID, GlobalResourcesSharedModelsLanguage globalResourcesSharedModelsLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'localeID' is set
        if (localeID == null) {
            throw new ApiException("Missing the required parameter 'localeID' when calling languagesUpdateLanguage(Async)");
        }

        // verify the required parameter 'globalResourcesSharedModelsLanguage' is set
        if (globalResourcesSharedModelsLanguage == null) {
            throw new ApiException("Missing the required parameter 'globalResourcesSharedModelsLanguage' when calling languagesUpdateLanguage(Async)");
        }

        return languagesUpdateLanguageCall(localeID, globalResourcesSharedModelsLanguage, _callback);

    }

    /**
     * Update a language’s description. Accepts a Language object.
     * No Documentation Found.
     * @param localeID  (required)
     * @param globalResourcesSharedModelsLanguage  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public void languagesUpdateLanguage(Integer localeID, GlobalResourcesSharedModelsLanguage globalResourcesSharedModelsLanguage) throws ApiException {
        languagesUpdateLanguageWithHttpInfo(localeID, globalResourcesSharedModelsLanguage);
    }

    /**
     * Update a language’s description. Accepts a Language object.
     * No Documentation Found.
     * @param localeID  (required)
     * @param globalResourcesSharedModelsLanguage  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> languagesUpdateLanguageWithHttpInfo(Integer localeID, GlobalResourcesSharedModelsLanguage globalResourcesSharedModelsLanguage) throws ApiException {
        okhttp3.Call localVarCall = languagesUpdateLanguageValidateBeforeCall(localeID, globalResourcesSharedModelsLanguage, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update a language’s description. Accepts a Language object. (asynchronously)
     * No Documentation Found.
     * @param localeID  (required)
     * @param globalResourcesSharedModelsLanguage  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call languagesUpdateLanguageAsync(Integer localeID, GlobalResourcesSharedModelsLanguage globalResourcesSharedModelsLanguage, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = languagesUpdateLanguageValidateBeforeCall(localeID, globalResourcesSharedModelsLanguage, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
