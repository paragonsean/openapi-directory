/*
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BuildSystemSharedDTOActivityRun;
import org.openapitools.client.model.BuildSystemSharedDTOParameterValue;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A DTO for an IJobRun
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:35.511967-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BuildSystemSharedDTOJobRun {
  public static final String SERIALIZED_NAME_ACTIVITY_RUNS = "ActivityRuns";
  @SerializedName(SERIALIZED_NAME_ACTIVITY_RUNS)
  private List<BuildSystemSharedDTOActivityRun> activityRuns = new ArrayList<>();

  public static final String SERIALIZED_NAME_END_DATE = "EndDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private OffsetDateTime endDate;

  public static final String SERIALIZED_NAME_JOB_I_D = "JobID";
  @SerializedName(SERIALIZED_NAME_JOB_I_D)
  private Integer jobID;

  public static final String SERIALIZED_NAME_JOB_RUN_I_D = "JobRunID";
  @SerializedName(SERIALIZED_NAME_JOB_RUN_I_D)
  private Integer jobRunID;

  public static final String SERIALIZED_NAME_PARAMETERS = "Parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private List<BuildSystemSharedDTOParameterValue> parameters = new ArrayList<>();

  public static final String SERIALIZED_NAME_START_DATE = "StartDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  /**
   * The status of this JobRun
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    READY("Ready"),
    
    IN_PROGRESS("InProgress"),
    
    SUCCEEDED("Succeeded"),
    
    CANCELLED("Cancelled"),
    
    FAILED("Failed");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public BuildSystemSharedDTOJobRun() {
  }

  public BuildSystemSharedDTOJobRun(
     List<BuildSystemSharedDTOActivityRun> activityRuns, 
     List<BuildSystemSharedDTOParameterValue> parameters
  ) {
    this();
    this.activityRuns = activityRuns;
    this.parameters = parameters;
  }

  /**
   * The activity runs belonging to this JobRun
   * @return activityRuns
   */
  @javax.annotation.Nullable
  public List<BuildSystemSharedDTOActivityRun> getActivityRuns() {
    return activityRuns;
  }



  public BuildSystemSharedDTOJobRun endDate(OffsetDateTime endDate) {
    this.endDate = endDate;
    return this;
  }

  /**
   * The UTC date and time when the job completed
   * @return endDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndDate() {
    return endDate;
  }

  public void setEndDate(OffsetDateTime endDate) {
    this.endDate = endDate;
  }


  public BuildSystemSharedDTOJobRun jobID(Integer jobID) {
    this.jobID = jobID;
    return this;
  }

  /**
   * The ID of the job that defines the run
   * @return jobID
   */
  @javax.annotation.Nullable
  public Integer getJobID() {
    return jobID;
  }

  public void setJobID(Integer jobID) {
    this.jobID = jobID;
  }


  public BuildSystemSharedDTOJobRun jobRunID(Integer jobRunID) {
    this.jobRunID = jobRunID;
    return this;
  }

  /**
   * The ID of this JobRun
   * @return jobRunID
   */
  @javax.annotation.Nullable
  public Integer getJobRunID() {
    return jobRunID;
  }

  public void setJobRunID(Integer jobRunID) {
    this.jobRunID = jobRunID;
  }


  /**
   * The parameters used for this run of the job
   * @return parameters
   */
  @javax.annotation.Nullable
  public List<BuildSystemSharedDTOParameterValue> getParameters() {
    return parameters;
  }



  public BuildSystemSharedDTOJobRun startDate(OffsetDateTime startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * The UTC date and time when the job started
   * @return startDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartDate() {
    return startDate;
  }

  public void setStartDate(OffsetDateTime startDate) {
    this.startDate = startDate;
  }


  public BuildSystemSharedDTOJobRun status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * The status of this JobRun
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BuildSystemSharedDTOJobRun buildSystemSharedDTOJobRun = (BuildSystemSharedDTOJobRun) o;
    return Objects.equals(this.activityRuns, buildSystemSharedDTOJobRun.activityRuns) &&
        Objects.equals(this.endDate, buildSystemSharedDTOJobRun.endDate) &&
        Objects.equals(this.jobID, buildSystemSharedDTOJobRun.jobID) &&
        Objects.equals(this.jobRunID, buildSystemSharedDTOJobRun.jobRunID) &&
        Objects.equals(this.parameters, buildSystemSharedDTOJobRun.parameters) &&
        Objects.equals(this.startDate, buildSystemSharedDTOJobRun.startDate) &&
        Objects.equals(this.status, buildSystemSharedDTOJobRun.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activityRuns, endDate, jobID, jobRunID, parameters, startDate, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BuildSystemSharedDTOJobRun {\n");
    sb.append("    activityRuns: ").append(toIndentedString(activityRuns)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    jobID: ").append(toIndentedString(jobID)).append("\n");
    sb.append("    jobRunID: ").append(toIndentedString(jobRunID)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ActivityRuns");
    openapiFields.add("EndDate");
    openapiFields.add("JobID");
    openapiFields.add("JobRunID");
    openapiFields.add("Parameters");
    openapiFields.add("StartDate");
    openapiFields.add("Status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BuildSystemSharedDTOJobRun
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BuildSystemSharedDTOJobRun.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BuildSystemSharedDTOJobRun is not found in the empty JSON string", BuildSystemSharedDTOJobRun.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BuildSystemSharedDTOJobRun.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BuildSystemSharedDTOJobRun` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("ActivityRuns") != null && !jsonObj.get("ActivityRuns").isJsonNull()) {
        JsonArray jsonArrayactivityRuns = jsonObj.getAsJsonArray("ActivityRuns");
        if (jsonArrayactivityRuns != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ActivityRuns").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ActivityRuns` to be an array in the JSON string but got `%s`", jsonObj.get("ActivityRuns").toString()));
          }

          // validate the optional field `ActivityRuns` (array)
          for (int i = 0; i < jsonArrayactivityRuns.size(); i++) {
            BuildSystemSharedDTOActivityRun.validateJsonElement(jsonArrayactivityRuns.get(i));
          };
        }
      }
      if (jsonObj.get("Parameters") != null && !jsonObj.get("Parameters").isJsonNull()) {
        JsonArray jsonArrayparameters = jsonObj.getAsJsonArray("Parameters");
        if (jsonArrayparameters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Parameters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Parameters` to be an array in the JSON string but got `%s`", jsonObj.get("Parameters").toString()));
          }

          // validate the optional field `Parameters` (array)
          for (int i = 0; i < jsonArrayparameters.size(); i++) {
            BuildSystemSharedDTOParameterValue.validateJsonElement(jsonArrayparameters.get(i));
          };
        }
      }
      if ((jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) && !jsonObj.get("Status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Status").toString()));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("Status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BuildSystemSharedDTOJobRun.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BuildSystemSharedDTOJobRun' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BuildSystemSharedDTOJobRun> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BuildSystemSharedDTOJobRun.class));

       return (TypeAdapter<T>) new TypeAdapter<BuildSystemSharedDTOJobRun>() {
           @Override
           public void write(JsonWriter out, BuildSystemSharedDTOJobRun value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BuildSystemSharedDTOJobRun read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BuildSystemSharedDTOJobRun given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BuildSystemSharedDTOJobRun
   * @throws IOException if the JSON string is invalid with respect to BuildSystemSharedDTOJobRun
   */
  public static BuildSystemSharedDTOJobRun fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BuildSystemSharedDTOJobRun.class);
  }

  /**
   * Convert an instance of BuildSystemSharedDTOJobRun to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

