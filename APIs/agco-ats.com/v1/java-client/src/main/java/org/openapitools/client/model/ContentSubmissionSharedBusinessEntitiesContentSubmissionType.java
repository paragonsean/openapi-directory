/*
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A type of content available for submission
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:35.511967-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ContentSubmissionSharedBusinessEntitiesContentSubmissionType {
  public static final String SERIALIZED_NAME_ATTRIBUTE_TEMPLATE = "AttributeTemplate";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_TEMPLATE)
  private String attributeTemplate;

  public static final String SERIALIZED_NAME_BUILD_DEFINITION_I_D = "BuildDefinitionID";
  @SerializedName(SERIALIZED_NAME_BUILD_DEFINITION_I_D)
  private Integer buildDefinitionID;

  public static final String SERIALIZED_NAME_CATEGORY_TEMPLATE = "CategoryTemplate";
  @SerializedName(SERIALIZED_NAME_CATEGORY_TEMPLATE)
  private String categoryTemplate;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ENABLED = "Enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_I_D = "ID";
  @SerializedName(SERIALIZED_NAME_I_D)
  private Integer ID;

  public static final String SERIALIZED_NAME_INVENTORY_PACKAGE_I_D = "InventoryPackageID";
  @SerializedName(SERIALIZED_NAME_INVENTORY_PACKAGE_I_D)
  private String inventoryPackageID;

  public static final String SERIALIZED_NAME_JOB_I_D = "JobID";
  @SerializedName(SERIALIZED_NAME_JOB_I_D)
  private Integer jobID;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RELEASE_NOTES_DESCRIPTION = "ReleaseNotesDescription";
  @SerializedName(SERIALIZED_NAME_RELEASE_NOTES_DESCRIPTION)
  private String releaseNotesDescription;

  public ContentSubmissionSharedBusinessEntitiesContentSubmissionType() {
  }

  public ContentSubmissionSharedBusinessEntitiesContentSubmissionType attributeTemplate(String attributeTemplate) {
    this.attributeTemplate = attributeTemplate;
    return this;
  }

  /**
   * A template for the Attribute from which to read the version of the package installed. The following placeholders are valid: {ContentDefinitionType}, {ContentDefinitionID}, {ContentDefinitionName}
   * @return attributeTemplate
   */
  @javax.annotation.Nullable
  public String getAttributeTemplate() {
    return attributeTemplate;
  }

  public void setAttributeTemplate(String attributeTemplate) {
    this.attributeTemplate = attributeTemplate;
  }


  public ContentSubmissionSharedBusinessEntitiesContentSubmissionType buildDefinitionID(Integer buildDefinitionID) {
    this.buildDefinitionID = buildDefinitionID;
    return this;
  }

  /**
   * The ID of the Azure DevOps Build Definition for which to create a Build. Either &#39;BuildDefinitionID&#39; or &#39;JobID&#39; is required.
   * @return buildDefinitionID
   */
  @javax.annotation.Nullable
  public Integer getBuildDefinitionID() {
    return buildDefinitionID;
  }

  public void setBuildDefinitionID(Integer buildDefinitionID) {
    this.buildDefinitionID = buildDefinitionID;
  }


  public ContentSubmissionSharedBusinessEntitiesContentSubmissionType categoryTemplate(String categoryTemplate) {
    this.categoryTemplate = categoryTemplate;
    return this;
  }

  /**
   * A template for the category from which to read the version of the package installed. The following placeholders are valid: {ContentDefinitionType}, {ContentDefinitionID}, {ContentDefinitionName}
   * @return categoryTemplate
   */
  @javax.annotation.Nullable
  public String getCategoryTemplate() {
    return categoryTemplate;
  }

  public void setCategoryTemplate(String categoryTemplate) {
    this.categoryTemplate = categoryTemplate;
  }


  public ContentSubmissionSharedBusinessEntitiesContentSubmissionType description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A description for the Content Submission Type
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ContentSubmissionSharedBusinessEntitiesContentSubmissionType enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Indicates whether this submission type is available to be used
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public ContentSubmissionSharedBusinessEntitiesContentSubmissionType ID(Integer ID) {
    this.ID = ID;
    return this;
  }

  /**
   * The ID of the Content Submission Type
   * @return ID
   */
  @javax.annotation.Nullable
  public Integer getID() {
    return ID;
  }

  public void setID(Integer ID) {
    this.ID = ID;
  }


  public ContentSubmissionSharedBusinessEntitiesContentSubmissionType inventoryPackageID(String inventoryPackageID) {
    this.inventoryPackageID = inventoryPackageID;
    return this;
  }

  /**
   * The ID of the Inventory Package from which to read the version of the package installed.
   * @return inventoryPackageID
   */
  @javax.annotation.Nullable
  public String getInventoryPackageID() {
    return inventoryPackageID;
  }

  public void setInventoryPackageID(String inventoryPackageID) {
    this.inventoryPackageID = inventoryPackageID;
  }


  public ContentSubmissionSharedBusinessEntitiesContentSubmissionType jobID(Integer jobID) {
    this.jobID = jobID;
    return this;
  }

  /**
   * The ID of the JobDefinition for which to initiate a Job. A value of &#39;0&#39; will cause a submission to fail. Either &#39;BuildDefinitionID&#39; or &#39;JobID&#39; is required.
   * @return jobID
   */
  @javax.annotation.Nullable
  public Integer getJobID() {
    return jobID;
  }

  public void setJobID(Integer jobID) {
    this.jobID = jobID;
  }


  public ContentSubmissionSharedBusinessEntitiesContentSubmissionType name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The Name of the Content Submission Type
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ContentSubmissionSharedBusinessEntitiesContentSubmissionType releaseNotesDescription(String releaseNotesDescription) {
    this.releaseNotesDescription = releaseNotesDescription;
    return this;
  }

  /**
   * A description of how release notes for this Content Submission Type are used
   * @return releaseNotesDescription
   */
  @javax.annotation.Nullable
  public String getReleaseNotesDescription() {
    return releaseNotesDescription;
  }

  public void setReleaseNotesDescription(String releaseNotesDescription) {
    this.releaseNotesDescription = releaseNotesDescription;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContentSubmissionSharedBusinessEntitiesContentSubmissionType contentSubmissionSharedBusinessEntitiesContentSubmissionType = (ContentSubmissionSharedBusinessEntitiesContentSubmissionType) o;
    return Objects.equals(this.attributeTemplate, contentSubmissionSharedBusinessEntitiesContentSubmissionType.attributeTemplate) &&
        Objects.equals(this.buildDefinitionID, contentSubmissionSharedBusinessEntitiesContentSubmissionType.buildDefinitionID) &&
        Objects.equals(this.categoryTemplate, contentSubmissionSharedBusinessEntitiesContentSubmissionType.categoryTemplate) &&
        Objects.equals(this.description, contentSubmissionSharedBusinessEntitiesContentSubmissionType.description) &&
        Objects.equals(this.enabled, contentSubmissionSharedBusinessEntitiesContentSubmissionType.enabled) &&
        Objects.equals(this.ID, contentSubmissionSharedBusinessEntitiesContentSubmissionType.ID) &&
        Objects.equals(this.inventoryPackageID, contentSubmissionSharedBusinessEntitiesContentSubmissionType.inventoryPackageID) &&
        Objects.equals(this.jobID, contentSubmissionSharedBusinessEntitiesContentSubmissionType.jobID) &&
        Objects.equals(this.name, contentSubmissionSharedBusinessEntitiesContentSubmissionType.name) &&
        Objects.equals(this.releaseNotesDescription, contentSubmissionSharedBusinessEntitiesContentSubmissionType.releaseNotesDescription);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attributeTemplate, buildDefinitionID, categoryTemplate, description, enabled, ID, inventoryPackageID, jobID, name, releaseNotesDescription);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContentSubmissionSharedBusinessEntitiesContentSubmissionType {\n");
    sb.append("    attributeTemplate: ").append(toIndentedString(attributeTemplate)).append("\n");
    sb.append("    buildDefinitionID: ").append(toIndentedString(buildDefinitionID)).append("\n");
    sb.append("    categoryTemplate: ").append(toIndentedString(categoryTemplate)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    ID: ").append(toIndentedString(ID)).append("\n");
    sb.append("    inventoryPackageID: ").append(toIndentedString(inventoryPackageID)).append("\n");
    sb.append("    jobID: ").append(toIndentedString(jobID)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    releaseNotesDescription: ").append(toIndentedString(releaseNotesDescription)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AttributeTemplate");
    openapiFields.add("BuildDefinitionID");
    openapiFields.add("CategoryTemplate");
    openapiFields.add("Description");
    openapiFields.add("Enabled");
    openapiFields.add("ID");
    openapiFields.add("InventoryPackageID");
    openapiFields.add("JobID");
    openapiFields.add("Name");
    openapiFields.add("ReleaseNotesDescription");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Description");
    openapiRequiredFields.add("Name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContentSubmissionSharedBusinessEntitiesContentSubmissionType
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContentSubmissionSharedBusinessEntitiesContentSubmissionType.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContentSubmissionSharedBusinessEntitiesContentSubmissionType is not found in the empty JSON string", ContentSubmissionSharedBusinessEntitiesContentSubmissionType.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContentSubmissionSharedBusinessEntitiesContentSubmissionType.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContentSubmissionSharedBusinessEntitiesContentSubmissionType` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ContentSubmissionSharedBusinessEntitiesContentSubmissionType.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("AttributeTemplate") != null && !jsonObj.get("AttributeTemplate").isJsonNull()) && !jsonObj.get("AttributeTemplate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AttributeTemplate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AttributeTemplate").toString()));
      }
      if ((jsonObj.get("CategoryTemplate") != null && !jsonObj.get("CategoryTemplate").isJsonNull()) && !jsonObj.get("CategoryTemplate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CategoryTemplate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CategoryTemplate").toString()));
      }
      if (!jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      if ((jsonObj.get("InventoryPackageID") != null && !jsonObj.get("InventoryPackageID").isJsonNull()) && !jsonObj.get("InventoryPackageID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `InventoryPackageID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("InventoryPackageID").toString()));
      }
      if (!jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("ReleaseNotesDescription") != null && !jsonObj.get("ReleaseNotesDescription").isJsonNull()) && !jsonObj.get("ReleaseNotesDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ReleaseNotesDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ReleaseNotesDescription").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContentSubmissionSharedBusinessEntitiesContentSubmissionType.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContentSubmissionSharedBusinessEntitiesContentSubmissionType' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContentSubmissionSharedBusinessEntitiesContentSubmissionType> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContentSubmissionSharedBusinessEntitiesContentSubmissionType.class));

       return (TypeAdapter<T>) new TypeAdapter<ContentSubmissionSharedBusinessEntitiesContentSubmissionType>() {
           @Override
           public void write(JsonWriter out, ContentSubmissionSharedBusinessEntitiesContentSubmissionType value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContentSubmissionSharedBusinessEntitiesContentSubmissionType read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContentSubmissionSharedBusinessEntitiesContentSubmissionType given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContentSubmissionSharedBusinessEntitiesContentSubmissionType
   * @throws IOException if the JSON string is invalid with respect to ContentSubmissionSharedBusinessEntitiesContentSubmissionType
   */
  public static ContentSubmissionSharedBusinessEntitiesContentSubmissionType fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContentSubmissionSharedBusinessEntitiesContentSubmissionType.class);
  }

  /**
   * Convert an instance of ContentSubmissionSharedBusinessEntitiesContentSubmissionType to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

