/*
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.APIIPagedResponseAuthorizationCodesSharedModelsAuthorizationCodeDefinition;
import org.openapitools.client.model.APIModelsApiError;
import org.openapitools.client.model.AuthorizationCodesSharedModelsAuthorizationCodeDefinition;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AuthorizationCodeDefinitionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AuthorizationCodeDefinitionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AuthorizationCodeDefinitionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiV2AuthorizationCodeDefinitionsIdGet
     * @param id The ID of the authorization code definition. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2AuthorizationCodeDefinitionsIdGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/AuthorizationCodeDefinitions/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2AuthorizationCodeDefinitionsIdGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV2AuthorizationCodeDefinitionsIdGet(Async)");
        }

        return apiV2AuthorizationCodeDefinitionsIdGetCall(id, _callback);

    }

    /**
     * Get an authorization code definition by its ID
     * No Documentation Found.
     * @param id The ID of the authorization code definition. (required)
     * @return AuthorizationCodesSharedModelsAuthorizationCodeDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public AuthorizationCodesSharedModelsAuthorizationCodeDefinition apiV2AuthorizationCodeDefinitionsIdGet(String id) throws ApiException {
        ApiResponse<AuthorizationCodesSharedModelsAuthorizationCodeDefinition> localVarResp = apiV2AuthorizationCodeDefinitionsIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get an authorization code definition by its ID
     * No Documentation Found.
     * @param id The ID of the authorization code definition. (required)
     * @return ApiResponse&lt;AuthorizationCodesSharedModelsAuthorizationCodeDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthorizationCodesSharedModelsAuthorizationCodeDefinition> apiV2AuthorizationCodeDefinitionsIdGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = apiV2AuthorizationCodeDefinitionsIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<AuthorizationCodesSharedModelsAuthorizationCodeDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an authorization code definition by its ID (asynchronously)
     * No Documentation Found.
     * @param id The ID of the authorization code definition. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2AuthorizationCodeDefinitionsIdGetAsync(String id, final ApiCallback<AuthorizationCodesSharedModelsAuthorizationCodeDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2AuthorizationCodeDefinitionsIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<AuthorizationCodesSharedModelsAuthorizationCodeDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for authorizationCodeDefinitionsAddCategoryToDefinition
     * @param ID  (required)
     * @param categoryID A category ID, as a GUID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authorizationCodeDefinitionsAddCategoryToDefinitionCall(String ID, String categoryID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/AuthorizationCodeDefinitions/{ID}/Categories/{categoryID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()))
            .replace("{" + "categoryID" + "}", localVarApiClient.escapeString(categoryID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authorizationCodeDefinitionsAddCategoryToDefinitionValidateBeforeCall(String ID, String categoryID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling authorizationCodeDefinitionsAddCategoryToDefinition(Async)");
        }

        // verify the required parameter 'categoryID' is set
        if (categoryID == null) {
            throw new ApiException("Missing the required parameter 'categoryID' when calling authorizationCodeDefinitionsAddCategoryToDefinition(Async)");
        }

        return authorizationCodeDefinitionsAddCategoryToDefinitionCall(ID, categoryID, _callback);

    }

    /**
     * Add a category to an authorizationCodeDefintion.
     * No Documentation Found.
     * @param ID  (required)
     * @param categoryID A category ID, as a GUID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public void authorizationCodeDefinitionsAddCategoryToDefinition(String ID, String categoryID) throws ApiException {
        authorizationCodeDefinitionsAddCategoryToDefinitionWithHttpInfo(ID, categoryID);
    }

    /**
     * Add a category to an authorizationCodeDefintion.
     * No Documentation Found.
     * @param ID  (required)
     * @param categoryID A category ID, as a GUID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> authorizationCodeDefinitionsAddCategoryToDefinitionWithHttpInfo(String ID, String categoryID) throws ApiException {
        okhttp3.Call localVarCall = authorizationCodeDefinitionsAddCategoryToDefinitionValidateBeforeCall(ID, categoryID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add a category to an authorizationCodeDefintion. (asynchronously)
     * No Documentation Found.
     * @param ID  (required)
     * @param categoryID A category ID, as a GUID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authorizationCodeDefinitionsAddCategoryToDefinitionAsync(String ID, String categoryID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = authorizationCodeDefinitionsAddCategoryToDefinitionValidateBeforeCall(ID, categoryID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for authorizationCodeDefinitionsDeleteAuthorizationCodeDefinition
     * @param id The ID of the authorization code definition. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authorizationCodeDefinitionsDeleteAuthorizationCodeDefinitionCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/AuthorizationCodeDefinitions/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authorizationCodeDefinitionsDeleteAuthorizationCodeDefinitionValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling authorizationCodeDefinitionsDeleteAuthorizationCodeDefinition(Async)");
        }

        return authorizationCodeDefinitionsDeleteAuthorizationCodeDefinitionCall(id, _callback);

    }

    /**
     * Disable an authorization code definition
     * No Documentation Found.
     * @param id The ID of the authorization code definition. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public void authorizationCodeDefinitionsDeleteAuthorizationCodeDefinition(String id) throws ApiException {
        authorizationCodeDefinitionsDeleteAuthorizationCodeDefinitionWithHttpInfo(id);
    }

    /**
     * Disable an authorization code definition
     * No Documentation Found.
     * @param id The ID of the authorization code definition. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> authorizationCodeDefinitionsDeleteAuthorizationCodeDefinitionWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = authorizationCodeDefinitionsDeleteAuthorizationCodeDefinitionValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Disable an authorization code definition (asynchronously)
     * No Documentation Found.
     * @param id The ID of the authorization code definition. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authorizationCodeDefinitionsDeleteAuthorizationCodeDefinitionAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = authorizationCodeDefinitionsDeleteAuthorizationCodeDefinitionValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for authorizationCodeDefinitionsGetAuthorizationCodeDefinition
     * @param limit Optional. The page limit.  If not specified, the default page limit is 10. (optional)
     * @param offset Optional. The page offset.  If not specified, the default page offset is 0. (optional)
     * @param name Optional. If specified, filters definitions by name. Starting and ending wildcards (*) supported. (optional)
     * @param createdByUserID Optional. If specified, filters definitions to those created by the given User ID. (optional)
     * @param deletedByUserID Optional. If specified, filters definitions to those deleted by the given User ID. (optional)
     * @param includeDeleted Optional. Whether to include deleted definitions. &#39;False&#39; by default. (optional)
     * @param categoryID Optional. If specified, filters definitions with the designated categoryID. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authorizationCodeDefinitionsGetAuthorizationCodeDefinitionCall(Integer limit, Integer offset, String name, Integer createdByUserID, Integer deletedByUserID, Boolean includeDeleted, String categoryID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/AuthorizationCodeDefinitions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (createdByUserID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdByUserID", createdByUserID));
        }

        if (deletedByUserID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deletedByUserID", deletedByUserID));
        }

        if (includeDeleted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeDeleted", includeDeleted));
        }

        if (categoryID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("categoryID", categoryID));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authorizationCodeDefinitionsGetAuthorizationCodeDefinitionValidateBeforeCall(Integer limit, Integer offset, String name, Integer createdByUserID, Integer deletedByUserID, Boolean includeDeleted, String categoryID, final ApiCallback _callback) throws ApiException {
        return authorizationCodeDefinitionsGetAuthorizationCodeDefinitionCall(limit, offset, name, createdByUserID, deletedByUserID, includeDeleted, categoryID, _callback);

    }

    /**
     * Get authorization code definitions.
     * Additional searches: validationFields[Name]&#x3D;true and dataFields[Name]&#x3D;true. These can be used to search for authorization code definitions that have the specified data or validation fields.
     * @param limit Optional. The page limit.  If not specified, the default page limit is 10. (optional)
     * @param offset Optional. The page offset.  If not specified, the default page offset is 0. (optional)
     * @param name Optional. If specified, filters definitions by name. Starting and ending wildcards (*) supported. (optional)
     * @param createdByUserID Optional. If specified, filters definitions to those created by the given User ID. (optional)
     * @param deletedByUserID Optional. If specified, filters definitions to those deleted by the given User ID. (optional)
     * @param includeDeleted Optional. Whether to include deleted definitions. &#39;False&#39; by default. (optional)
     * @param categoryID Optional. If specified, filters definitions with the designated categoryID. (optional)
     * @return APIIPagedResponseAuthorizationCodesSharedModelsAuthorizationCodeDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public APIIPagedResponseAuthorizationCodesSharedModelsAuthorizationCodeDefinition authorizationCodeDefinitionsGetAuthorizationCodeDefinition(Integer limit, Integer offset, String name, Integer createdByUserID, Integer deletedByUserID, Boolean includeDeleted, String categoryID) throws ApiException {
        ApiResponse<APIIPagedResponseAuthorizationCodesSharedModelsAuthorizationCodeDefinition> localVarResp = authorizationCodeDefinitionsGetAuthorizationCodeDefinitionWithHttpInfo(limit, offset, name, createdByUserID, deletedByUserID, includeDeleted, categoryID);
        return localVarResp.getData();
    }

    /**
     * Get authorization code definitions.
     * Additional searches: validationFields[Name]&#x3D;true and dataFields[Name]&#x3D;true. These can be used to search for authorization code definitions that have the specified data or validation fields.
     * @param limit Optional. The page limit.  If not specified, the default page limit is 10. (optional)
     * @param offset Optional. The page offset.  If not specified, the default page offset is 0. (optional)
     * @param name Optional. If specified, filters definitions by name. Starting and ending wildcards (*) supported. (optional)
     * @param createdByUserID Optional. If specified, filters definitions to those created by the given User ID. (optional)
     * @param deletedByUserID Optional. If specified, filters definitions to those deleted by the given User ID. (optional)
     * @param includeDeleted Optional. Whether to include deleted definitions. &#39;False&#39; by default. (optional)
     * @param categoryID Optional. If specified, filters definitions with the designated categoryID. (optional)
     * @return ApiResponse&lt;APIIPagedResponseAuthorizationCodesSharedModelsAuthorizationCodeDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<APIIPagedResponseAuthorizationCodesSharedModelsAuthorizationCodeDefinition> authorizationCodeDefinitionsGetAuthorizationCodeDefinitionWithHttpInfo(Integer limit, Integer offset, String name, Integer createdByUserID, Integer deletedByUserID, Boolean includeDeleted, String categoryID) throws ApiException {
        okhttp3.Call localVarCall = authorizationCodeDefinitionsGetAuthorizationCodeDefinitionValidateBeforeCall(limit, offset, name, createdByUserID, deletedByUserID, includeDeleted, categoryID, null);
        Type localVarReturnType = new TypeToken<APIIPagedResponseAuthorizationCodesSharedModelsAuthorizationCodeDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get authorization code definitions. (asynchronously)
     * Additional searches: validationFields[Name]&#x3D;true and dataFields[Name]&#x3D;true. These can be used to search for authorization code definitions that have the specified data or validation fields.
     * @param limit Optional. The page limit.  If not specified, the default page limit is 10. (optional)
     * @param offset Optional. The page offset.  If not specified, the default page offset is 0. (optional)
     * @param name Optional. If specified, filters definitions by name. Starting and ending wildcards (*) supported. (optional)
     * @param createdByUserID Optional. If specified, filters definitions to those created by the given User ID. (optional)
     * @param deletedByUserID Optional. If specified, filters definitions to those deleted by the given User ID. (optional)
     * @param includeDeleted Optional. Whether to include deleted definitions. &#39;False&#39; by default. (optional)
     * @param categoryID Optional. If specified, filters definitions with the designated categoryID. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authorizationCodeDefinitionsGetAuthorizationCodeDefinitionAsync(Integer limit, Integer offset, String name, Integer createdByUserID, Integer deletedByUserID, Boolean includeDeleted, String categoryID, final ApiCallback<APIIPagedResponseAuthorizationCodesSharedModelsAuthorizationCodeDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = authorizationCodeDefinitionsGetAuthorizationCodeDefinitionValidateBeforeCall(limit, offset, name, createdByUserID, deletedByUserID, includeDeleted, categoryID, _callback);
        Type localVarReturnType = new TypeToken<APIIPagedResponseAuthorizationCodesSharedModelsAuthorizationCodeDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for authorizationCodeDefinitionsPostAuthorizationCodeDefinition
     * @param authorizationCodesSharedModelsAuthorizationCodeDefinition An authorization code definition. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authorizationCodeDefinitionsPostAuthorizationCodeDefinitionCall(AuthorizationCodesSharedModelsAuthorizationCodeDefinition authorizationCodesSharedModelsAuthorizationCodeDefinition, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authorizationCodesSharedModelsAuthorizationCodeDefinition;

        // create path and map variables
        String localVarPath = "/api/v2/AuthorizationCodeDefinitions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authorizationCodeDefinitionsPostAuthorizationCodeDefinitionValidateBeforeCall(AuthorizationCodesSharedModelsAuthorizationCodeDefinition authorizationCodesSharedModelsAuthorizationCodeDefinition, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorizationCodesSharedModelsAuthorizationCodeDefinition' is set
        if (authorizationCodesSharedModelsAuthorizationCodeDefinition == null) {
            throw new ApiException("Missing the required parameter 'authorizationCodesSharedModelsAuthorizationCodeDefinition' when calling authorizationCodeDefinitionsPostAuthorizationCodeDefinition(Async)");
        }

        return authorizationCodeDefinitionsPostAuthorizationCodeDefinitionCall(authorizationCodesSharedModelsAuthorizationCodeDefinition, _callback);

    }

    /**
     * Add an authorization code definition.
     * No Documentation Found.
     * @param authorizationCodesSharedModelsAuthorizationCodeDefinition An authorization code definition. (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public String authorizationCodeDefinitionsPostAuthorizationCodeDefinition(AuthorizationCodesSharedModelsAuthorizationCodeDefinition authorizationCodesSharedModelsAuthorizationCodeDefinition) throws ApiException {
        ApiResponse<String> localVarResp = authorizationCodeDefinitionsPostAuthorizationCodeDefinitionWithHttpInfo(authorizationCodesSharedModelsAuthorizationCodeDefinition);
        return localVarResp.getData();
    }

    /**
     * Add an authorization code definition.
     * No Documentation Found.
     * @param authorizationCodesSharedModelsAuthorizationCodeDefinition An authorization code definition. (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> authorizationCodeDefinitionsPostAuthorizationCodeDefinitionWithHttpInfo(AuthorizationCodesSharedModelsAuthorizationCodeDefinition authorizationCodesSharedModelsAuthorizationCodeDefinition) throws ApiException {
        okhttp3.Call localVarCall = authorizationCodeDefinitionsPostAuthorizationCodeDefinitionValidateBeforeCall(authorizationCodesSharedModelsAuthorizationCodeDefinition, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add an authorization code definition. (asynchronously)
     * No Documentation Found.
     * @param authorizationCodesSharedModelsAuthorizationCodeDefinition An authorization code definition. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authorizationCodeDefinitionsPostAuthorizationCodeDefinitionAsync(AuthorizationCodesSharedModelsAuthorizationCodeDefinition authorizationCodesSharedModelsAuthorizationCodeDefinition, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = authorizationCodeDefinitionsPostAuthorizationCodeDefinitionValidateBeforeCall(authorizationCodesSharedModelsAuthorizationCodeDefinition, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for authorizationCodeDefinitionsPutAuthorizationCodeDefinition
     * @param id The ID of the authorization code definition. (required)
     * @param authorizationCodesSharedModelsAuthorizationCodeDefinition An authorization code definition. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authorizationCodeDefinitionsPutAuthorizationCodeDefinitionCall(String id, AuthorizationCodesSharedModelsAuthorizationCodeDefinition authorizationCodesSharedModelsAuthorizationCodeDefinition, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authorizationCodesSharedModelsAuthorizationCodeDefinition;

        // create path and map variables
        String localVarPath = "/api/v2/AuthorizationCodeDefinitions/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authorizationCodeDefinitionsPutAuthorizationCodeDefinitionValidateBeforeCall(String id, AuthorizationCodesSharedModelsAuthorizationCodeDefinition authorizationCodesSharedModelsAuthorizationCodeDefinition, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling authorizationCodeDefinitionsPutAuthorizationCodeDefinition(Async)");
        }

        // verify the required parameter 'authorizationCodesSharedModelsAuthorizationCodeDefinition' is set
        if (authorizationCodesSharedModelsAuthorizationCodeDefinition == null) {
            throw new ApiException("Missing the required parameter 'authorizationCodesSharedModelsAuthorizationCodeDefinition' when calling authorizationCodeDefinitionsPutAuthorizationCodeDefinition(Async)");
        }

        return authorizationCodeDefinitionsPutAuthorizationCodeDefinitionCall(id, authorizationCodesSharedModelsAuthorizationCodeDefinition, _callback);

    }

    /**
     * Update an authorization code definition
     * No Documentation Found.
     * @param id The ID of the authorization code definition. (required)
     * @param authorizationCodesSharedModelsAuthorizationCodeDefinition An authorization code definition. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public void authorizationCodeDefinitionsPutAuthorizationCodeDefinition(String id, AuthorizationCodesSharedModelsAuthorizationCodeDefinition authorizationCodesSharedModelsAuthorizationCodeDefinition) throws ApiException {
        authorizationCodeDefinitionsPutAuthorizationCodeDefinitionWithHttpInfo(id, authorizationCodesSharedModelsAuthorizationCodeDefinition);
    }

    /**
     * Update an authorization code definition
     * No Documentation Found.
     * @param id The ID of the authorization code definition. (required)
     * @param authorizationCodesSharedModelsAuthorizationCodeDefinition An authorization code definition. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> authorizationCodeDefinitionsPutAuthorizationCodeDefinitionWithHttpInfo(String id, AuthorizationCodesSharedModelsAuthorizationCodeDefinition authorizationCodesSharedModelsAuthorizationCodeDefinition) throws ApiException {
        okhttp3.Call localVarCall = authorizationCodeDefinitionsPutAuthorizationCodeDefinitionValidateBeforeCall(id, authorizationCodesSharedModelsAuthorizationCodeDefinition, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update an authorization code definition (asynchronously)
     * No Documentation Found.
     * @param id The ID of the authorization code definition. (required)
     * @param authorizationCodesSharedModelsAuthorizationCodeDefinition An authorization code definition. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authorizationCodeDefinitionsPutAuthorizationCodeDefinitionAsync(String id, AuthorizationCodesSharedModelsAuthorizationCodeDefinition authorizationCodesSharedModelsAuthorizationCodeDefinition, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = authorizationCodeDefinitionsPutAuthorizationCodeDefinitionValidateBeforeCall(id, authorizationCodesSharedModelsAuthorizationCodeDefinition, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for authorizationCodeDefinitionsRemoveCategoryFromDefinition
     * @param ID  (required)
     * @param categoryID A category ID, as a GUID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authorizationCodeDefinitionsRemoveCategoryFromDefinitionCall(String ID, String categoryID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/AuthorizationCodeDefinitions/{ID}/Categories/{categoryID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()))
            .replace("{" + "categoryID" + "}", localVarApiClient.escapeString(categoryID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authorizationCodeDefinitionsRemoveCategoryFromDefinitionValidateBeforeCall(String ID, String categoryID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling authorizationCodeDefinitionsRemoveCategoryFromDefinition(Async)");
        }

        // verify the required parameter 'categoryID' is set
        if (categoryID == null) {
            throw new ApiException("Missing the required parameter 'categoryID' when calling authorizationCodeDefinitionsRemoveCategoryFromDefinition(Async)");
        }

        return authorizationCodeDefinitionsRemoveCategoryFromDefinitionCall(ID, categoryID, _callback);

    }

    /**
     * Deletes the category from the authorization code definition.
     * No Documentation Found.
     * @param ID  (required)
     * @param categoryID A category ID, as a GUID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public void authorizationCodeDefinitionsRemoveCategoryFromDefinition(String ID, String categoryID) throws ApiException {
        authorizationCodeDefinitionsRemoveCategoryFromDefinitionWithHttpInfo(ID, categoryID);
    }

    /**
     * Deletes the category from the authorization code definition.
     * No Documentation Found.
     * @param ID  (required)
     * @param categoryID A category ID, as a GUID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> authorizationCodeDefinitionsRemoveCategoryFromDefinitionWithHttpInfo(String ID, String categoryID) throws ApiException {
        okhttp3.Call localVarCall = authorizationCodeDefinitionsRemoveCategoryFromDefinitionValidateBeforeCall(ID, categoryID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes the category from the authorization code definition. (asynchronously)
     * No Documentation Found.
     * @param ID  (required)
     * @param categoryID A category ID, as a GUID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authorizationCodeDefinitionsRemoveCategoryFromDefinitionAsync(String ID, String categoryID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = authorizationCodeDefinitionsRemoveCategoryFromDefinitionValidateBeforeCall(ID, categoryID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
