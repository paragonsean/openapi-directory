/*
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.APIModelsApiError;
import org.openapitools.client.model.APIPagedResponseUpdateSystemModelsPackageTypeIDtoBundle;
import org.openapitools.client.model.UpdateSystemModelsPackageTypeIDtoBundle;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PackageTypetoBundlesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PackageTypetoBundlesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PackageTypetoBundlesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for packageTypetoBundlesDelete
     * @param bundleID The BundleID (required)
     * @param packageTypeID The PackageTypeID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call packageTypetoBundlesDeleteCall(String bundleID, String packageTypeID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/PackageTypetoBundles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (bundleID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("BundleID", bundleID));
        }

        if (packageTypeID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PackageTypeID", packageTypeID));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call packageTypetoBundlesDeleteValidateBeforeCall(String bundleID, String packageTypeID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bundleID' is set
        if (bundleID == null) {
            throw new ApiException("Missing the required parameter 'bundleID' when calling packageTypetoBundlesDelete(Async)");
        }

        // verify the required parameter 'packageTypeID' is set
        if (packageTypeID == null) {
            throw new ApiException("Missing the required parameter 'packageTypeID' when calling packageTypetoBundlesDelete(Async)");
        }

        return packageTypetoBundlesDeleteCall(bundleID, packageTypeID, _callback);

    }

    /**
     * Delete a Package Type to Bundle Relationship.
     * No Documentation Found.
     * @param bundleID The BundleID (required)
     * @param packageTypeID The PackageTypeID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public void packageTypetoBundlesDelete(String bundleID, String packageTypeID) throws ApiException {
        packageTypetoBundlesDeleteWithHttpInfo(bundleID, packageTypeID);
    }

    /**
     * Delete a Package Type to Bundle Relationship.
     * No Documentation Found.
     * @param bundleID The BundleID (required)
     * @param packageTypeID The PackageTypeID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> packageTypetoBundlesDeleteWithHttpInfo(String bundleID, String packageTypeID) throws ApiException {
        okhttp3.Call localVarCall = packageTypetoBundlesDeleteValidateBeforeCall(bundleID, packageTypeID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a Package Type to Bundle Relationship. (asynchronously)
     * No Documentation Found.
     * @param bundleID The BundleID (required)
     * @param packageTypeID The PackageTypeID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call packageTypetoBundlesDeleteAsync(String bundleID, String packageTypeID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = packageTypetoBundlesDeleteValidateBeforeCall(bundleID, packageTypeID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for packageTypetoBundlesGet
     * @param bundleID Optional. Filter by BundleID. (optional)
     * @param limit Optional. The page limit. The default page limit is 10. (optional)
     * @param offset Optional. The page offset. The default page offset is 0. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call packageTypetoBundlesGetCall(String bundleID, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/PackageTypetoBundles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (bundleID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("BundleID", bundleID));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call packageTypetoBundlesGetValidateBeforeCall(String bundleID, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return packageTypetoBundlesGetCall(bundleID, limit, offset, _callback);

    }

    /**
     * Get all of the Package Type to Bundle Relationships.
     * No Documentation Found.
     * @param bundleID Optional. Filter by BundleID. (optional)
     * @param limit Optional. The page limit. The default page limit is 10. (optional)
     * @param offset Optional. The page offset. The default page offset is 0. (optional)
     * @return APIPagedResponseUpdateSystemModelsPackageTypeIDtoBundle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public APIPagedResponseUpdateSystemModelsPackageTypeIDtoBundle packageTypetoBundlesGet(String bundleID, Integer limit, Integer offset) throws ApiException {
        ApiResponse<APIPagedResponseUpdateSystemModelsPackageTypeIDtoBundle> localVarResp = packageTypetoBundlesGetWithHttpInfo(bundleID, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Get all of the Package Type to Bundle Relationships.
     * No Documentation Found.
     * @param bundleID Optional. Filter by BundleID. (optional)
     * @param limit Optional. The page limit. The default page limit is 10. (optional)
     * @param offset Optional. The page offset. The default page offset is 0. (optional)
     * @return ApiResponse&lt;APIPagedResponseUpdateSystemModelsPackageTypeIDtoBundle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<APIPagedResponseUpdateSystemModelsPackageTypeIDtoBundle> packageTypetoBundlesGetWithHttpInfo(String bundleID, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = packageTypetoBundlesGetValidateBeforeCall(bundleID, limit, offset, null);
        Type localVarReturnType = new TypeToken<APIPagedResponseUpdateSystemModelsPackageTypeIDtoBundle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all of the Package Type to Bundle Relationships. (asynchronously)
     * No Documentation Found.
     * @param bundleID Optional. Filter by BundleID. (optional)
     * @param limit Optional. The page limit. The default page limit is 10. (optional)
     * @param offset Optional. The page offset. The default page offset is 0. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call packageTypetoBundlesGetAsync(String bundleID, Integer limit, Integer offset, final ApiCallback<APIPagedResponseUpdateSystemModelsPackageTypeIDtoBundle> _callback) throws ApiException {

        okhttp3.Call localVarCall = packageTypetoBundlesGetValidateBeforeCall(bundleID, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<APIPagedResponseUpdateSystemModelsPackageTypeIDtoBundle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for packageTypetoBundlesPost
     * @param updateSystemModelsPackageTypeIDtoBundle The PackageTypeToBundle to add. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call packageTypetoBundlesPostCall(UpdateSystemModelsPackageTypeIDtoBundle updateSystemModelsPackageTypeIDtoBundle, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateSystemModelsPackageTypeIDtoBundle;

        // create path and map variables
        String localVarPath = "/api/v2/PackageTypetoBundles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call packageTypetoBundlesPostValidateBeforeCall(UpdateSystemModelsPackageTypeIDtoBundle updateSystemModelsPackageTypeIDtoBundle, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateSystemModelsPackageTypeIDtoBundle' is set
        if (updateSystemModelsPackageTypeIDtoBundle == null) {
            throw new ApiException("Missing the required parameter 'updateSystemModelsPackageTypeIDtoBundle' when calling packageTypetoBundlesPost(Async)");
        }

        return packageTypetoBundlesPostCall(updateSystemModelsPackageTypeIDtoBundle, _callback);

    }

    /**
     * Add a new Package Type ID to Bundle Relationship.
     * No Documentation Found.
     * @param updateSystemModelsPackageTypeIDtoBundle The PackageTypeToBundle to add. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public void packageTypetoBundlesPost(UpdateSystemModelsPackageTypeIDtoBundle updateSystemModelsPackageTypeIDtoBundle) throws ApiException {
        packageTypetoBundlesPostWithHttpInfo(updateSystemModelsPackageTypeIDtoBundle);
    }

    /**
     * Add a new Package Type ID to Bundle Relationship.
     * No Documentation Found.
     * @param updateSystemModelsPackageTypeIDtoBundle The PackageTypeToBundle to add. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> packageTypetoBundlesPostWithHttpInfo(UpdateSystemModelsPackageTypeIDtoBundle updateSystemModelsPackageTypeIDtoBundle) throws ApiException {
        okhttp3.Call localVarCall = packageTypetoBundlesPostValidateBeforeCall(updateSystemModelsPackageTypeIDtoBundle, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add a new Package Type ID to Bundle Relationship. (asynchronously)
     * No Documentation Found.
     * @param updateSystemModelsPackageTypeIDtoBundle The PackageTypeToBundle to add. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call packageTypetoBundlesPostAsync(UpdateSystemModelsPackageTypeIDtoBundle updateSystemModelsPackageTypeIDtoBundle, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = packageTypetoBundlesPostValidateBeforeCall(updateSystemModelsPackageTypeIDtoBundle, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for packageTypetoBundlesPut
     * @param updateSystemModelsPackageTypeIDtoBundle The PackageTypeToBundle to update. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call packageTypetoBundlesPutCall(UpdateSystemModelsPackageTypeIDtoBundle updateSystemModelsPackageTypeIDtoBundle, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateSystemModelsPackageTypeIDtoBundle;

        // create path and map variables
        String localVarPath = "/api/v2/PackageTypetoBundles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call packageTypetoBundlesPutValidateBeforeCall(UpdateSystemModelsPackageTypeIDtoBundle updateSystemModelsPackageTypeIDtoBundle, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateSystemModelsPackageTypeIDtoBundle' is set
        if (updateSystemModelsPackageTypeIDtoBundle == null) {
            throw new ApiException("Missing the required parameter 'updateSystemModelsPackageTypeIDtoBundle' when calling packageTypetoBundlesPut(Async)");
        }

        return packageTypetoBundlesPutCall(updateSystemModelsPackageTypeIDtoBundle, _callback);

    }

    /**
     * Update a Package Type ID to Bundle Relationship.
     * No Documentation Found.
     * @param updateSystemModelsPackageTypeIDtoBundle The PackageTypeToBundle to update. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public void packageTypetoBundlesPut(UpdateSystemModelsPackageTypeIDtoBundle updateSystemModelsPackageTypeIDtoBundle) throws ApiException {
        packageTypetoBundlesPutWithHttpInfo(updateSystemModelsPackageTypeIDtoBundle);
    }

    /**
     * Update a Package Type ID to Bundle Relationship.
     * No Documentation Found.
     * @param updateSystemModelsPackageTypeIDtoBundle The PackageTypeToBundle to update. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> packageTypetoBundlesPutWithHttpInfo(UpdateSystemModelsPackageTypeIDtoBundle updateSystemModelsPackageTypeIDtoBundle) throws ApiException {
        okhttp3.Call localVarCall = packageTypetoBundlesPutValidateBeforeCall(updateSystemModelsPackageTypeIDtoBundle, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update a Package Type ID to Bundle Relationship. (asynchronously)
     * No Documentation Found.
     * @param updateSystemModelsPackageTypeIDtoBundle The PackageTypeToBundle to update. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call packageTypetoBundlesPutAsync(UpdateSystemModelsPackageTypeIDtoBundle updateSystemModelsPackageTypeIDtoBundle, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = packageTypetoBundlesPutValidateBeforeCall(updateSystemModelsPackageTypeIDtoBundle, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
