/*
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Status of a voucher in the AGCO Power system
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:35.511967-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AGCOPowerServicesModelsUserStatus {
  public static final String SERIALIZED_NAME_DEALER_CODE = "DealerCode";
  @SerializedName(SERIALIZED_NAME_DEALER_CODE)
  private String dealerCode;

  /**
   * The state of the voucher
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    ACTIVE("Active"),
    
    INACTIVE("Inactive"),
    
    NONE("None");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "State";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_VOUCHER_CODE = "VoucherCode";
  @SerializedName(SERIALIZED_NAME_VOUCHER_CODE)
  private String voucherCode;

  public AGCOPowerServicesModelsUserStatus() {
  }

  public AGCOPowerServicesModelsUserStatus dealerCode(String dealerCode) {
    this.dealerCode = dealerCode;
    return this;
  }

  /**
   * The dealer code of the voucher
   * @return dealerCode
   */
  @javax.annotation.Nonnull
  public String getDealerCode() {
    return dealerCode;
  }

  public void setDealerCode(String dealerCode) {
    this.dealerCode = dealerCode;
  }


  public AGCOPowerServicesModelsUserStatus state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * The state of the voucher
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  public AGCOPowerServicesModelsUserStatus voucherCode(String voucherCode) {
    this.voucherCode = voucherCode;
    return this;
  }

  /**
   * The voucher code
   * @return voucherCode
   */
  @javax.annotation.Nonnull
  public String getVoucherCode() {
    return voucherCode;
  }

  public void setVoucherCode(String voucherCode) {
    this.voucherCode = voucherCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AGCOPowerServicesModelsUserStatus agCOPowerServicesModelsUserStatus = (AGCOPowerServicesModelsUserStatus) o;
    return Objects.equals(this.dealerCode, agCOPowerServicesModelsUserStatus.dealerCode) &&
        Objects.equals(this.state, agCOPowerServicesModelsUserStatus.state) &&
        Objects.equals(this.voucherCode, agCOPowerServicesModelsUserStatus.voucherCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dealerCode, state, voucherCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AGCOPowerServicesModelsUserStatus {\n");
    sb.append("    dealerCode: ").append(toIndentedString(dealerCode)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    voucherCode: ").append(toIndentedString(voucherCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DealerCode");
    openapiFields.add("State");
    openapiFields.add("VoucherCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("DealerCode");
    openapiRequiredFields.add("VoucherCode");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AGCOPowerServicesModelsUserStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AGCOPowerServicesModelsUserStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AGCOPowerServicesModelsUserStatus is not found in the empty JSON string", AGCOPowerServicesModelsUserStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AGCOPowerServicesModelsUserStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AGCOPowerServicesModelsUserStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AGCOPowerServicesModelsUserStatus.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("DealerCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DealerCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DealerCode").toString()));
      }
      if ((jsonObj.get("State") != null && !jsonObj.get("State").isJsonNull()) && !jsonObj.get("State").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `State` to be a primitive type in the JSON string but got `%s`", jsonObj.get("State").toString()));
      }
      // validate the optional field `State`
      if (jsonObj.get("State") != null && !jsonObj.get("State").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("State"));
      }
      if (!jsonObj.get("VoucherCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `VoucherCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("VoucherCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AGCOPowerServicesModelsUserStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AGCOPowerServicesModelsUserStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AGCOPowerServicesModelsUserStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AGCOPowerServicesModelsUserStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<AGCOPowerServicesModelsUserStatus>() {
           @Override
           public void write(JsonWriter out, AGCOPowerServicesModelsUserStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AGCOPowerServicesModelsUserStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AGCOPowerServicesModelsUserStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AGCOPowerServicesModelsUserStatus
   * @throws IOException if the JSON string is invalid with respect to AGCOPowerServicesModelsUserStatus
   */
  public static AGCOPowerServicesModelsUserStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AGCOPowerServicesModelsUserStatus.class);
  }

  /**
   * Convert an instance of AGCOPowerServicesModelsUserStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

