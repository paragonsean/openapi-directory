/*
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.APIModelsApiError;
import org.openapitools.client.model.DealerDBModelsEDTLiteRegistration;
import org.openapitools.client.model.DealerDBModelsLicenseActivation;
import org.openapitools.client.model.DealerDBModelsLicenseActivationConfirm;
import org.openapitools.client.model.DealerDBModelsLicenseActivationCreate;
import org.openapitools.client.model.DealerDBModelsLicenseActivationUpdate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LicenseActivationsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LicenseActivationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LicenseActivationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for licenseActivationsPost
     * @param dealerDBModelsLicenseActivationCreate The data required for creating the license. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call licenseActivationsPostCall(DealerDBModelsLicenseActivationCreate dealerDBModelsLicenseActivationCreate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dealerDBModelsLicenseActivationCreate;

        // create path and map variables
        String localVarPath = "/api/v2/LicenseActivations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call licenseActivationsPostValidateBeforeCall(DealerDBModelsLicenseActivationCreate dealerDBModelsLicenseActivationCreate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dealerDBModelsLicenseActivationCreate' is set
        if (dealerDBModelsLicenseActivationCreate == null) {
            throw new ApiException("Missing the required parameter 'dealerDBModelsLicenseActivationCreate' when calling licenseActivationsPost(Async)");
        }

        return licenseActivationsPostCall(dealerDBModelsLicenseActivationCreate, _callback);

    }

    /**
     * Create a license activation.
     * No Documentation Found.
     * @param dealerDBModelsLicenseActivationCreate The data required for creating the license. (required)
     * @return DealerDBModelsLicenseActivation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public DealerDBModelsLicenseActivation licenseActivationsPost(DealerDBModelsLicenseActivationCreate dealerDBModelsLicenseActivationCreate) throws ApiException {
        ApiResponse<DealerDBModelsLicenseActivation> localVarResp = licenseActivationsPostWithHttpInfo(dealerDBModelsLicenseActivationCreate);
        return localVarResp.getData();
    }

    /**
     * Create a license activation.
     * No Documentation Found.
     * @param dealerDBModelsLicenseActivationCreate The data required for creating the license. (required)
     * @return ApiResponse&lt;DealerDBModelsLicenseActivation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DealerDBModelsLicenseActivation> licenseActivationsPostWithHttpInfo(DealerDBModelsLicenseActivationCreate dealerDBModelsLicenseActivationCreate) throws ApiException {
        okhttp3.Call localVarCall = licenseActivationsPostValidateBeforeCall(dealerDBModelsLicenseActivationCreate, null);
        Type localVarReturnType = new TypeToken<DealerDBModelsLicenseActivation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a license activation. (asynchronously)
     * No Documentation Found.
     * @param dealerDBModelsLicenseActivationCreate The data required for creating the license. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call licenseActivationsPostAsync(DealerDBModelsLicenseActivationCreate dealerDBModelsLicenseActivationCreate, final ApiCallback<DealerDBModelsLicenseActivation> _callback) throws ApiException {

        okhttp3.Call localVarCall = licenseActivationsPostValidateBeforeCall(dealerDBModelsLicenseActivationCreate, _callback);
        Type localVarReturnType = new TypeToken<DealerDBModelsLicenseActivation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for licenseActivationsPostRegisterEDTLite
     * @param dealerDBModelsEDTLiteRegistration The information required for registration. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call licenseActivationsPostRegisterEDTLiteCall(DealerDBModelsEDTLiteRegistration dealerDBModelsEDTLiteRegistration, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dealerDBModelsEDTLiteRegistration;

        // create path and map variables
        String localVarPath = "/api/v2/LicenseActivations/RegisterEDTLite";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call licenseActivationsPostRegisterEDTLiteValidateBeforeCall(DealerDBModelsEDTLiteRegistration dealerDBModelsEDTLiteRegistration, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dealerDBModelsEDTLiteRegistration' is set
        if (dealerDBModelsEDTLiteRegistration == null) {
            throw new ApiException("Missing the required parameter 'dealerDBModelsEDTLiteRegistration' when calling licenseActivationsPostRegisterEDTLite(Async)");
        }

        return licenseActivationsPostRegisterEDTLiteCall(dealerDBModelsEDTLiteRegistration, _callback);

    }

    /**
     * Register an EDT Lite with the Server
     * No Documentation Found.
     * @param dealerDBModelsEDTLiteRegistration The information required for registration. (required)
     * @return Boolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public Boolean licenseActivationsPostRegisterEDTLite(DealerDBModelsEDTLiteRegistration dealerDBModelsEDTLiteRegistration) throws ApiException {
        ApiResponse<Boolean> localVarResp = licenseActivationsPostRegisterEDTLiteWithHttpInfo(dealerDBModelsEDTLiteRegistration);
        return localVarResp.getData();
    }

    /**
     * Register an EDT Lite with the Server
     * No Documentation Found.
     * @param dealerDBModelsEDTLiteRegistration The information required for registration. (required)
     * @return ApiResponse&lt;Boolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Boolean> licenseActivationsPostRegisterEDTLiteWithHttpInfo(DealerDBModelsEDTLiteRegistration dealerDBModelsEDTLiteRegistration) throws ApiException {
        okhttp3.Call localVarCall = licenseActivationsPostRegisterEDTLiteValidateBeforeCall(dealerDBModelsEDTLiteRegistration, null);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Register an EDT Lite with the Server (asynchronously)
     * No Documentation Found.
     * @param dealerDBModelsEDTLiteRegistration The information required for registration. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call licenseActivationsPostRegisterEDTLiteAsync(DealerDBModelsEDTLiteRegistration dealerDBModelsEDTLiteRegistration, final ApiCallback<Boolean> _callback) throws ApiException {

        okhttp3.Call localVarCall = licenseActivationsPostRegisterEDTLiteValidateBeforeCall(dealerDBModelsEDTLiteRegistration, _callback);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for licenseActivationsPut
     * @param ID The ID of the license. (required)
     * @param dealerDBModelsLicenseActivationUpdate The data required for updating the license. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call licenseActivationsPutCall(String ID, DealerDBModelsLicenseActivationUpdate dealerDBModelsLicenseActivationUpdate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dealerDBModelsLicenseActivationUpdate;

        // create path and map variables
        String localVarPath = "/api/v2/LicenseActivations/{ID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call licenseActivationsPutValidateBeforeCall(String ID, DealerDBModelsLicenseActivationUpdate dealerDBModelsLicenseActivationUpdate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling licenseActivationsPut(Async)");
        }

        // verify the required parameter 'dealerDBModelsLicenseActivationUpdate' is set
        if (dealerDBModelsLicenseActivationUpdate == null) {
            throw new ApiException("Missing the required parameter 'dealerDBModelsLicenseActivationUpdate' when calling licenseActivationsPut(Async)");
        }

        return licenseActivationsPutCall(ID, dealerDBModelsLicenseActivationUpdate, _callback);

    }

    /**
     * Update a license activiation.
     * No Documentation Found.
     * @param ID The ID of the license. (required)
     * @param dealerDBModelsLicenseActivationUpdate The data required for updating the license. (required)
     * @return DealerDBModelsLicenseActivation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public DealerDBModelsLicenseActivation licenseActivationsPut(String ID, DealerDBModelsLicenseActivationUpdate dealerDBModelsLicenseActivationUpdate) throws ApiException {
        ApiResponse<DealerDBModelsLicenseActivation> localVarResp = licenseActivationsPutWithHttpInfo(ID, dealerDBModelsLicenseActivationUpdate);
        return localVarResp.getData();
    }

    /**
     * Update a license activiation.
     * No Documentation Found.
     * @param ID The ID of the license. (required)
     * @param dealerDBModelsLicenseActivationUpdate The data required for updating the license. (required)
     * @return ApiResponse&lt;DealerDBModelsLicenseActivation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DealerDBModelsLicenseActivation> licenseActivationsPutWithHttpInfo(String ID, DealerDBModelsLicenseActivationUpdate dealerDBModelsLicenseActivationUpdate) throws ApiException {
        okhttp3.Call localVarCall = licenseActivationsPutValidateBeforeCall(ID, dealerDBModelsLicenseActivationUpdate, null);
        Type localVarReturnType = new TypeToken<DealerDBModelsLicenseActivation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a license activiation. (asynchronously)
     * No Documentation Found.
     * @param ID The ID of the license. (required)
     * @param dealerDBModelsLicenseActivationUpdate The data required for updating the license. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call licenseActivationsPutAsync(String ID, DealerDBModelsLicenseActivationUpdate dealerDBModelsLicenseActivationUpdate, final ApiCallback<DealerDBModelsLicenseActivation> _callback) throws ApiException {

        okhttp3.Call localVarCall = licenseActivationsPutValidateBeforeCall(ID, dealerDBModelsLicenseActivationUpdate, _callback);
        Type localVarReturnType = new TypeToken<DealerDBModelsLicenseActivation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for licenseActivationsPutConfirm
     * @param ID The ID of the license (required)
     * @param dealerDBModelsLicenseActivationConfirm The license data. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call licenseActivationsPutConfirmCall(String ID, DealerDBModelsLicenseActivationConfirm dealerDBModelsLicenseActivationConfirm, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dealerDBModelsLicenseActivationConfirm;

        // create path and map variables
        String localVarPath = "/api/v2/LicenseActivations/{ID}/Confirm"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call licenseActivationsPutConfirmValidateBeforeCall(String ID, DealerDBModelsLicenseActivationConfirm dealerDBModelsLicenseActivationConfirm, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling licenseActivationsPutConfirm(Async)");
        }

        // verify the required parameter 'dealerDBModelsLicenseActivationConfirm' is set
        if (dealerDBModelsLicenseActivationConfirm == null) {
            throw new ApiException("Missing the required parameter 'dealerDBModelsLicenseActivationConfirm' when calling licenseActivationsPutConfirm(Async)");
        }

        return licenseActivationsPutConfirmCall(ID, dealerDBModelsLicenseActivationConfirm, _callback);

    }

    /**
     * Confirm that the client has applied the updated license.
     * No Documentation Found.
     * @param ID The ID of the license (required)
     * @param dealerDBModelsLicenseActivationConfirm The license data. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public void licenseActivationsPutConfirm(String ID, DealerDBModelsLicenseActivationConfirm dealerDBModelsLicenseActivationConfirm) throws ApiException {
        licenseActivationsPutConfirmWithHttpInfo(ID, dealerDBModelsLicenseActivationConfirm);
    }

    /**
     * Confirm that the client has applied the updated license.
     * No Documentation Found.
     * @param ID The ID of the license (required)
     * @param dealerDBModelsLicenseActivationConfirm The license data. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> licenseActivationsPutConfirmWithHttpInfo(String ID, DealerDBModelsLicenseActivationConfirm dealerDBModelsLicenseActivationConfirm) throws ApiException {
        okhttp3.Call localVarCall = licenseActivationsPutConfirmValidateBeforeCall(ID, dealerDBModelsLicenseActivationConfirm, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Confirm that the client has applied the updated license. (asynchronously)
     * No Documentation Found.
     * @param ID The ID of the license (required)
     * @param dealerDBModelsLicenseActivationConfirm The license data. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call licenseActivationsPutConfirmAsync(String ID, DealerDBModelsLicenseActivationConfirm dealerDBModelsLicenseActivationConfirm, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = licenseActivationsPutConfirmValidateBeforeCall(ID, dealerDBModelsLicenseActivationConfirm, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
