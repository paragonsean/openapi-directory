/*
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BuildSystemSharedDTOParameterMapping;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A DTO for an IJobActivity
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:35.511967-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BuildSystemSharedDTOJobActivity {
  public static final String SERIALIZED_NAME_ACTIVITY_I_D = "ActivityID";
  @SerializedName(SERIALIZED_NAME_ACTIVITY_I_D)
  private Integer activityID;

  public static final String SERIALIZED_NAME_JOB_ACTIVITY_I_D = "JobActivityID";
  @SerializedName(SERIALIZED_NAME_JOB_ACTIVITY_I_D)
  private Integer jobActivityID;

  public static final String SERIALIZED_NAME_JOB_I_D = "JobID";
  @SerializedName(SERIALIZED_NAME_JOB_I_D)
  private Integer jobID;

  public static final String SERIALIZED_NAME_PARAMETER_MAPPINGS = "ParameterMappings";
  @SerializedName(SERIALIZED_NAME_PARAMETER_MAPPINGS)
  private List<BuildSystemSharedDTOParameterMapping> parameterMappings = new ArrayList<>();

  public static final String SERIALIZED_NAME_RUN_ORDER = "RunOrder";
  @SerializedName(SERIALIZED_NAME_RUN_ORDER)
  private Integer runOrder;

  public BuildSystemSharedDTOJobActivity() {
  }

  public BuildSystemSharedDTOJobActivity(
     List<BuildSystemSharedDTOParameterMapping> parameterMappings
  ) {
    this();
    this.parameterMappings = parameterMappings;
  }

  public BuildSystemSharedDTOJobActivity activityID(Integer activityID) {
    this.activityID = activityID;
    return this;
  }

  /**
   * The ID of the activity to be run as part of the job
   * @return activityID
   */
  @javax.annotation.Nullable
  public Integer getActivityID() {
    return activityID;
  }

  public void setActivityID(Integer activityID) {
    this.activityID = activityID;
  }


  public BuildSystemSharedDTOJobActivity jobActivityID(Integer jobActivityID) {
    this.jobActivityID = jobActivityID;
    return this;
  }

  /**
   * The ID of this job activity
   * @return jobActivityID
   */
  @javax.annotation.Nullable
  public Integer getJobActivityID() {
    return jobActivityID;
  }

  public void setJobActivityID(Integer jobActivityID) {
    this.jobActivityID = jobActivityID;
  }


  public BuildSystemSharedDTOJobActivity jobID(Integer jobID) {
    this.jobID = jobID;
    return this;
  }

  /**
   * The ID of the job this job activity belongs to
   * @return jobID
   */
  @javax.annotation.Nullable
  public Integer getJobID() {
    return jobID;
  }

  public void setJobID(Integer jobID) {
    this.jobID = jobID;
  }


  /**
   * The mapping of values from a source to be used for the activity parameters
   * @return parameterMappings
   */
  @javax.annotation.Nullable
  public List<BuildSystemSharedDTOParameterMapping> getParameterMappings() {
    return parameterMappings;
  }



  public BuildSystemSharedDTOJobActivity runOrder(Integer runOrder) {
    this.runOrder = runOrder;
    return this;
  }

  /**
   * The order of this job activity relative to others in the job
   * @return runOrder
   */
  @javax.annotation.Nullable
  public Integer getRunOrder() {
    return runOrder;
  }

  public void setRunOrder(Integer runOrder) {
    this.runOrder = runOrder;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BuildSystemSharedDTOJobActivity buildSystemSharedDTOJobActivity = (BuildSystemSharedDTOJobActivity) o;
    return Objects.equals(this.activityID, buildSystemSharedDTOJobActivity.activityID) &&
        Objects.equals(this.jobActivityID, buildSystemSharedDTOJobActivity.jobActivityID) &&
        Objects.equals(this.jobID, buildSystemSharedDTOJobActivity.jobID) &&
        Objects.equals(this.parameterMappings, buildSystemSharedDTOJobActivity.parameterMappings) &&
        Objects.equals(this.runOrder, buildSystemSharedDTOJobActivity.runOrder);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activityID, jobActivityID, jobID, parameterMappings, runOrder);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BuildSystemSharedDTOJobActivity {\n");
    sb.append("    activityID: ").append(toIndentedString(activityID)).append("\n");
    sb.append("    jobActivityID: ").append(toIndentedString(jobActivityID)).append("\n");
    sb.append("    jobID: ").append(toIndentedString(jobID)).append("\n");
    sb.append("    parameterMappings: ").append(toIndentedString(parameterMappings)).append("\n");
    sb.append("    runOrder: ").append(toIndentedString(runOrder)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ActivityID");
    openapiFields.add("JobActivityID");
    openapiFields.add("JobID");
    openapiFields.add("ParameterMappings");
    openapiFields.add("RunOrder");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BuildSystemSharedDTOJobActivity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BuildSystemSharedDTOJobActivity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BuildSystemSharedDTOJobActivity is not found in the empty JSON string", BuildSystemSharedDTOJobActivity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BuildSystemSharedDTOJobActivity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BuildSystemSharedDTOJobActivity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("ParameterMappings") != null && !jsonObj.get("ParameterMappings").isJsonNull()) {
        JsonArray jsonArrayparameterMappings = jsonObj.getAsJsonArray("ParameterMappings");
        if (jsonArrayparameterMappings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ParameterMappings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ParameterMappings` to be an array in the JSON string but got `%s`", jsonObj.get("ParameterMappings").toString()));
          }

          // validate the optional field `ParameterMappings` (array)
          for (int i = 0; i < jsonArrayparameterMappings.size(); i++) {
            BuildSystemSharedDTOParameterMapping.validateJsonElement(jsonArrayparameterMappings.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BuildSystemSharedDTOJobActivity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BuildSystemSharedDTOJobActivity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BuildSystemSharedDTOJobActivity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BuildSystemSharedDTOJobActivity.class));

       return (TypeAdapter<T>) new TypeAdapter<BuildSystemSharedDTOJobActivity>() {
           @Override
           public void write(JsonWriter out, BuildSystemSharedDTOJobActivity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BuildSystemSharedDTOJobActivity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BuildSystemSharedDTOJobActivity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BuildSystemSharedDTOJobActivity
   * @throws IOException if the JSON string is invalid with respect to BuildSystemSharedDTOJobActivity
   */
  public static BuildSystemSharedDTOJobActivity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BuildSystemSharedDTOJobActivity.class);
  }

  /**
   * Convert an instance of BuildSystemSharedDTOJobActivity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

