/*
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.APIModelsApiError;
import org.openapitools.client.model.APIPagedResponseContentSubmissionSharedBusinessEntitiesUserContentDefinition;
import org.openapitools.client.model.ContentSubmissionSharedBusinessEntitiesUserContentDefinition;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UserContentDefinitionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UserContentDefinitionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UserContentDefinitionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for userContentDefinitionsDeleteUserContentDefinition
     * @param userContentDefinitionID The ID of the UserContentDefinition to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userContentDefinitionsDeleteUserContentDefinitionCall(Integer userContentDefinitionID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/UserContentDefinitions/{userContentDefinitionID}"
            .replace("{" + "userContentDefinitionID" + "}", localVarApiClient.escapeString(userContentDefinitionID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userContentDefinitionsDeleteUserContentDefinitionValidateBeforeCall(Integer userContentDefinitionID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userContentDefinitionID' is set
        if (userContentDefinitionID == null) {
            throw new ApiException("Missing the required parameter 'userContentDefinitionID' when calling userContentDefinitionsDeleteUserContentDefinition(Async)");
        }

        return userContentDefinitionsDeleteUserContentDefinitionCall(userContentDefinitionID, _callback);

    }

    /**
     * Delete a UserContentDefinition
     * Deletes an UserContentDefinition. When successful, the response is empty.  If unsuccessful, an appropriate              ApiError is returned.
     * @param userContentDefinitionID The ID of the UserContentDefinition to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public void userContentDefinitionsDeleteUserContentDefinition(Integer userContentDefinitionID) throws ApiException {
        userContentDefinitionsDeleteUserContentDefinitionWithHttpInfo(userContentDefinitionID);
    }

    /**
     * Delete a UserContentDefinition
     * Deletes an UserContentDefinition. When successful, the response is empty.  If unsuccessful, an appropriate              ApiError is returned.
     * @param userContentDefinitionID The ID of the UserContentDefinition to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> userContentDefinitionsDeleteUserContentDefinitionWithHttpInfo(Integer userContentDefinitionID) throws ApiException {
        okhttp3.Call localVarCall = userContentDefinitionsDeleteUserContentDefinitionValidateBeforeCall(userContentDefinitionID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a UserContentDefinition (asynchronously)
     * Deletes an UserContentDefinition. When successful, the response is empty.  If unsuccessful, an appropriate              ApiError is returned.
     * @param userContentDefinitionID The ID of the UserContentDefinition to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userContentDefinitionsDeleteUserContentDefinitionAsync(Integer userContentDefinitionID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = userContentDefinitionsDeleteUserContentDefinitionValidateBeforeCall(userContentDefinitionID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for userContentDefinitionsGetUserContentDefinition
     * @param userContentDefinitionID The ID of the UserContentDefinition to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userContentDefinitionsGetUserContentDefinitionCall(Integer userContentDefinitionID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/UserContentDefinitions/{userContentDefinitionID}"
            .replace("{" + "userContentDefinitionID" + "}", localVarApiClient.escapeString(userContentDefinitionID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userContentDefinitionsGetUserContentDefinitionValidateBeforeCall(Integer userContentDefinitionID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userContentDefinitionID' is set
        if (userContentDefinitionID == null) {
            throw new ApiException("Missing the required parameter 'userContentDefinitionID' when calling userContentDefinitionsGetUserContentDefinition(Async)");
        }

        return userContentDefinitionsGetUserContentDefinitionCall(userContentDefinitionID, _callback);

    }

    /**
     * Get a UserContentDefinition by ID
     * Gets a UserContentDefinition by ID. When successful, the response is the requested UserContentDefinition.              If unsuccessful, an appropriate ApiError is returned.
     * @param userContentDefinitionID The ID of the UserContentDefinition to get. (required)
     * @return ContentSubmissionSharedBusinessEntitiesUserContentDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ContentSubmissionSharedBusinessEntitiesUserContentDefinition userContentDefinitionsGetUserContentDefinition(Integer userContentDefinitionID) throws ApiException {
        ApiResponse<ContentSubmissionSharedBusinessEntitiesUserContentDefinition> localVarResp = userContentDefinitionsGetUserContentDefinitionWithHttpInfo(userContentDefinitionID);
        return localVarResp.getData();
    }

    /**
     * Get a UserContentDefinition by ID
     * Gets a UserContentDefinition by ID. When successful, the response is the requested UserContentDefinition.              If unsuccessful, an appropriate ApiError is returned.
     * @param userContentDefinitionID The ID of the UserContentDefinition to get. (required)
     * @return ApiResponse&lt;ContentSubmissionSharedBusinessEntitiesUserContentDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContentSubmissionSharedBusinessEntitiesUserContentDefinition> userContentDefinitionsGetUserContentDefinitionWithHttpInfo(Integer userContentDefinitionID) throws ApiException {
        okhttp3.Call localVarCall = userContentDefinitionsGetUserContentDefinitionValidateBeforeCall(userContentDefinitionID, null);
        Type localVarReturnType = new TypeToken<ContentSubmissionSharedBusinessEntitiesUserContentDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a UserContentDefinition by ID (asynchronously)
     * Gets a UserContentDefinition by ID. When successful, the response is the requested UserContentDefinition.              If unsuccessful, an appropriate ApiError is returned.
     * @param userContentDefinitionID The ID of the UserContentDefinition to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userContentDefinitionsGetUserContentDefinitionAsync(Integer userContentDefinitionID, final ApiCallback<ContentSubmissionSharedBusinessEntitiesUserContentDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = userContentDefinitionsGetUserContentDefinitionValidateBeforeCall(userContentDefinitionID, _callback);
        Type localVarReturnType = new TypeToken<ContentSubmissionSharedBusinessEntitiesUserContentDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userContentDefinitionsGetUserContentDefinitions
     * @param limit Optional. The page limit.  If not specified, the default page limit is 10. (optional)
     * @param offset Optional. The page offset.  If not specified, the default page offset is 0. (optional)
     * @param userID Optional. Filter by UserID. (optional)
     * @param contentDefinitionID Optional. Filter by ContentDefinitionID (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userContentDefinitionsGetUserContentDefinitionsCall(Integer limit, Integer offset, Integer userID, Integer contentDefinitionID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/UserContentDefinitions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (userID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userID", userID));
        }

        if (contentDefinitionID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contentDefinitionID", contentDefinitionID));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userContentDefinitionsGetUserContentDefinitionsValidateBeforeCall(Integer limit, Integer offset, Integer userID, Integer contentDefinitionID, final ApiCallback _callback) throws ApiException {
        return userContentDefinitionsGetUserContentDefinitionsCall(limit, offset, userID, contentDefinitionID, _callback);

    }

    /**
     * Get UserContentDefinitions
     * Gets a collection of UserContentDefinitions. When successful, the response is a PagedResponse of UserContentDefinitions.              If unsuccessful, an appropriate ApiError is returned.
     * @param limit Optional. The page limit.  If not specified, the default page limit is 10. (optional)
     * @param offset Optional. The page offset.  If not specified, the default page offset is 0. (optional)
     * @param userID Optional. Filter by UserID. (optional)
     * @param contentDefinitionID Optional. Filter by ContentDefinitionID (optional)
     * @return APIPagedResponseContentSubmissionSharedBusinessEntitiesUserContentDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public APIPagedResponseContentSubmissionSharedBusinessEntitiesUserContentDefinition userContentDefinitionsGetUserContentDefinitions(Integer limit, Integer offset, Integer userID, Integer contentDefinitionID) throws ApiException {
        ApiResponse<APIPagedResponseContentSubmissionSharedBusinessEntitiesUserContentDefinition> localVarResp = userContentDefinitionsGetUserContentDefinitionsWithHttpInfo(limit, offset, userID, contentDefinitionID);
        return localVarResp.getData();
    }

    /**
     * Get UserContentDefinitions
     * Gets a collection of UserContentDefinitions. When successful, the response is a PagedResponse of UserContentDefinitions.              If unsuccessful, an appropriate ApiError is returned.
     * @param limit Optional. The page limit.  If not specified, the default page limit is 10. (optional)
     * @param offset Optional. The page offset.  If not specified, the default page offset is 0. (optional)
     * @param userID Optional. Filter by UserID. (optional)
     * @param contentDefinitionID Optional. Filter by ContentDefinitionID (optional)
     * @return ApiResponse&lt;APIPagedResponseContentSubmissionSharedBusinessEntitiesUserContentDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<APIPagedResponseContentSubmissionSharedBusinessEntitiesUserContentDefinition> userContentDefinitionsGetUserContentDefinitionsWithHttpInfo(Integer limit, Integer offset, Integer userID, Integer contentDefinitionID) throws ApiException {
        okhttp3.Call localVarCall = userContentDefinitionsGetUserContentDefinitionsValidateBeforeCall(limit, offset, userID, contentDefinitionID, null);
        Type localVarReturnType = new TypeToken<APIPagedResponseContentSubmissionSharedBusinessEntitiesUserContentDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get UserContentDefinitions (asynchronously)
     * Gets a collection of UserContentDefinitions. When successful, the response is a PagedResponse of UserContentDefinitions.              If unsuccessful, an appropriate ApiError is returned.
     * @param limit Optional. The page limit.  If not specified, the default page limit is 10. (optional)
     * @param offset Optional. The page offset.  If not specified, the default page offset is 0. (optional)
     * @param userID Optional. Filter by UserID. (optional)
     * @param contentDefinitionID Optional. Filter by ContentDefinitionID (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userContentDefinitionsGetUserContentDefinitionsAsync(Integer limit, Integer offset, Integer userID, Integer contentDefinitionID, final ApiCallback<APIPagedResponseContentSubmissionSharedBusinessEntitiesUserContentDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = userContentDefinitionsGetUserContentDefinitionsValidateBeforeCall(limit, offset, userID, contentDefinitionID, _callback);
        Type localVarReturnType = new TypeToken<APIPagedResponseContentSubmissionSharedBusinessEntitiesUserContentDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userContentDefinitionsPostUserContentDefinition
     * @param contentSubmissionSharedBusinessEntitiesUserContentDefinition The UserContentDefinition to create. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userContentDefinitionsPostUserContentDefinitionCall(ContentSubmissionSharedBusinessEntitiesUserContentDefinition contentSubmissionSharedBusinessEntitiesUserContentDefinition, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contentSubmissionSharedBusinessEntitiesUserContentDefinition;

        // create path and map variables
        String localVarPath = "/api/v2/UserContentDefinitions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userContentDefinitionsPostUserContentDefinitionValidateBeforeCall(ContentSubmissionSharedBusinessEntitiesUserContentDefinition contentSubmissionSharedBusinessEntitiesUserContentDefinition, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentSubmissionSharedBusinessEntitiesUserContentDefinition' is set
        if (contentSubmissionSharedBusinessEntitiesUserContentDefinition == null) {
            throw new ApiException("Missing the required parameter 'contentSubmissionSharedBusinessEntitiesUserContentDefinition' when calling userContentDefinitionsPostUserContentDefinition(Async)");
        }

        return userContentDefinitionsPostUserContentDefinitionCall(contentSubmissionSharedBusinessEntitiesUserContentDefinition, _callback);

    }

    /**
     * Create a UserContentDefinition
     * Creates a UserContentDefinition.  The body of the POST is the UserContentDefinition to create.              The UserContentDefinitionID will be assigned on creation of the Job.  When successful, the response              is the UserContentDefinitionID.  If unsuccessful, an appropriate ApiError is returned.
     * @param contentSubmissionSharedBusinessEntitiesUserContentDefinition The UserContentDefinition to create. (required)
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public Integer userContentDefinitionsPostUserContentDefinition(ContentSubmissionSharedBusinessEntitiesUserContentDefinition contentSubmissionSharedBusinessEntitiesUserContentDefinition) throws ApiException {
        ApiResponse<Integer> localVarResp = userContentDefinitionsPostUserContentDefinitionWithHttpInfo(contentSubmissionSharedBusinessEntitiesUserContentDefinition);
        return localVarResp.getData();
    }

    /**
     * Create a UserContentDefinition
     * Creates a UserContentDefinition.  The body of the POST is the UserContentDefinition to create.              The UserContentDefinitionID will be assigned on creation of the Job.  When successful, the response              is the UserContentDefinitionID.  If unsuccessful, an appropriate ApiError is returned.
     * @param contentSubmissionSharedBusinessEntitiesUserContentDefinition The UserContentDefinition to create. (required)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Integer> userContentDefinitionsPostUserContentDefinitionWithHttpInfo(ContentSubmissionSharedBusinessEntitiesUserContentDefinition contentSubmissionSharedBusinessEntitiesUserContentDefinition) throws ApiException {
        okhttp3.Call localVarCall = userContentDefinitionsPostUserContentDefinitionValidateBeforeCall(contentSubmissionSharedBusinessEntitiesUserContentDefinition, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a UserContentDefinition (asynchronously)
     * Creates a UserContentDefinition.  The body of the POST is the UserContentDefinition to create.              The UserContentDefinitionID will be assigned on creation of the Job.  When successful, the response              is the UserContentDefinitionID.  If unsuccessful, an appropriate ApiError is returned.
     * @param contentSubmissionSharedBusinessEntitiesUserContentDefinition The UserContentDefinition to create. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userContentDefinitionsPostUserContentDefinitionAsync(ContentSubmissionSharedBusinessEntitiesUserContentDefinition contentSubmissionSharedBusinessEntitiesUserContentDefinition, final ApiCallback<Integer> _callback) throws ApiException {

        okhttp3.Call localVarCall = userContentDefinitionsPostUserContentDefinitionValidateBeforeCall(contentSubmissionSharedBusinessEntitiesUserContentDefinition, _callback);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
