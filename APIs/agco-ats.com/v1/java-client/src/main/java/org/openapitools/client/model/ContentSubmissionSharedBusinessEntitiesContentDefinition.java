/*
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ContentSubmissionSharedBusinessEntitiesContentDefinitionAttribute;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The definition of the content for submission
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:35.511967-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ContentSubmissionSharedBusinessEntitiesContentDefinition {
  public static final String SERIALIZED_NAME_ATTRIBUTES = "Attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private List<ContentSubmissionSharedBusinessEntitiesContentDefinitionAttribute> attributes = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONTENT_DEFINITION_I_D = "ContentDefinitionID";
  @SerializedName(SERIALIZED_NAME_CONTENT_DEFINITION_I_D)
  private Integer contentDefinitionID;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PACKAGE_TYPE_I_D = "PackageTypeID";
  @SerializedName(SERIALIZED_NAME_PACKAGE_TYPE_I_D)
  private String packageTypeID;

  public static final String SERIALIZED_NAME_TYPE_I_D = "TypeID";
  @SerializedName(SERIALIZED_NAME_TYPE_I_D)
  private Integer typeID;

  public ContentSubmissionSharedBusinessEntitiesContentDefinition() {
  }

  public ContentSubmissionSharedBusinessEntitiesContentDefinition attributes(List<ContentSubmissionSharedBusinessEntitiesContentDefinitionAttribute> attributes) {
    this.attributes = attributes;
    return this;
  }

  public ContentSubmissionSharedBusinessEntitiesContentDefinition addAttributesItem(ContentSubmissionSharedBusinessEntitiesContentDefinitionAttribute attributesItem) {
    if (this.attributes == null) {
      this.attributes = new ArrayList<>();
    }
    this.attributes.add(attributesItem);
    return this;
  }

  /**
   * Attributes of this ContentDefinition
   * @return attributes
   */
  @javax.annotation.Nullable
  public List<ContentSubmissionSharedBusinessEntitiesContentDefinitionAttribute> getAttributes() {
    return attributes;
  }

  public void setAttributes(List<ContentSubmissionSharedBusinessEntitiesContentDefinitionAttribute> attributes) {
    this.attributes = attributes;
  }


  public ContentSubmissionSharedBusinessEntitiesContentDefinition contentDefinitionID(Integer contentDefinitionID) {
    this.contentDefinitionID = contentDefinitionID;
    return this;
  }

  /**
   * The ID of this content definition.
   * @return contentDefinitionID
   */
  @javax.annotation.Nullable
  public Integer getContentDefinitionID() {
    return contentDefinitionID;
  }

  public void setContentDefinitionID(Integer contentDefinitionID) {
    this.contentDefinitionID = contentDefinitionID;
  }


  public ContentSubmissionSharedBusinessEntitiesContentDefinition description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description used on the package type in the AGCO Update System
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ContentSubmissionSharedBusinessEntitiesContentDefinition name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of this content. Name must be valid for Attribute on PackageType.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ContentSubmissionSharedBusinessEntitiesContentDefinition packageTypeID(String packageTypeID) {
    this.packageTypeID = packageTypeID;
    return this;
  }

  /**
   * Read Only. The ID of the package type used for this content.
   * @return packageTypeID
   */
  @javax.annotation.Nullable
  public String getPackageTypeID() {
    return packageTypeID;
  }

  public void setPackageTypeID(String packageTypeID) {
    this.packageTypeID = packageTypeID;
  }


  public ContentSubmissionSharedBusinessEntitiesContentDefinition typeID(Integer typeID) {
    this.typeID = typeID;
    return this;
  }

  /**
   * The type of content.
   * @return typeID
   */
  @javax.annotation.Nullable
  public Integer getTypeID() {
    return typeID;
  }

  public void setTypeID(Integer typeID) {
    this.typeID = typeID;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContentSubmissionSharedBusinessEntitiesContentDefinition contentSubmissionSharedBusinessEntitiesContentDefinition = (ContentSubmissionSharedBusinessEntitiesContentDefinition) o;
    return Objects.equals(this.attributes, contentSubmissionSharedBusinessEntitiesContentDefinition.attributes) &&
        Objects.equals(this.contentDefinitionID, contentSubmissionSharedBusinessEntitiesContentDefinition.contentDefinitionID) &&
        Objects.equals(this.description, contentSubmissionSharedBusinessEntitiesContentDefinition.description) &&
        Objects.equals(this.name, contentSubmissionSharedBusinessEntitiesContentDefinition.name) &&
        Objects.equals(this.packageTypeID, contentSubmissionSharedBusinessEntitiesContentDefinition.packageTypeID) &&
        Objects.equals(this.typeID, contentSubmissionSharedBusinessEntitiesContentDefinition.typeID);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attributes, contentDefinitionID, description, name, packageTypeID, typeID);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContentSubmissionSharedBusinessEntitiesContentDefinition {\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    contentDefinitionID: ").append(toIndentedString(contentDefinitionID)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    packageTypeID: ").append(toIndentedString(packageTypeID)).append("\n");
    sb.append("    typeID: ").append(toIndentedString(typeID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Attributes");
    openapiFields.add("ContentDefinitionID");
    openapiFields.add("Description");
    openapiFields.add("Name");
    openapiFields.add("PackageTypeID");
    openapiFields.add("TypeID");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Description");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContentSubmissionSharedBusinessEntitiesContentDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContentSubmissionSharedBusinessEntitiesContentDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContentSubmissionSharedBusinessEntitiesContentDefinition is not found in the empty JSON string", ContentSubmissionSharedBusinessEntitiesContentDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContentSubmissionSharedBusinessEntitiesContentDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContentSubmissionSharedBusinessEntitiesContentDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ContentSubmissionSharedBusinessEntitiesContentDefinition.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("Attributes") != null && !jsonObj.get("Attributes").isJsonNull()) {
        JsonArray jsonArrayattributes = jsonObj.getAsJsonArray("Attributes");
        if (jsonArrayattributes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Attributes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Attributes` to be an array in the JSON string but got `%s`", jsonObj.get("Attributes").toString()));
          }

          // validate the optional field `Attributes` (array)
          for (int i = 0; i < jsonArrayattributes.size(); i++) {
            ContentSubmissionSharedBusinessEntitiesContentDefinitionAttribute.validateJsonElement(jsonArrayattributes.get(i));
          };
        }
      }
      if (!jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("PackageTypeID") != null && !jsonObj.get("PackageTypeID").isJsonNull()) && !jsonObj.get("PackageTypeID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PackageTypeID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PackageTypeID").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContentSubmissionSharedBusinessEntitiesContentDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContentSubmissionSharedBusinessEntitiesContentDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContentSubmissionSharedBusinessEntitiesContentDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContentSubmissionSharedBusinessEntitiesContentDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<ContentSubmissionSharedBusinessEntitiesContentDefinition>() {
           @Override
           public void write(JsonWriter out, ContentSubmissionSharedBusinessEntitiesContentDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContentSubmissionSharedBusinessEntitiesContentDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContentSubmissionSharedBusinessEntitiesContentDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContentSubmissionSharedBusinessEntitiesContentDefinition
   * @throws IOException if the JSON string is invalid with respect to ContentSubmissionSharedBusinessEntitiesContentDefinition
   */
  public static ContentSubmissionSharedBusinessEntitiesContentDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContentSubmissionSharedBusinessEntitiesContentDefinition.class);
  }

  /**
   * Convert an instance of ContentSubmissionSharedBusinessEntitiesContentDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

