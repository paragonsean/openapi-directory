/*
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ContentSubmissionSharedBusinessEntitiesContentDefinition;
import org.openapitools.client.model.ContentSubmissionSharedBusinessEntitiesContentSubmissionAttribute;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A content submission
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:35.511967-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ContentSubmissionSharedBusinessEntitiesContentSubmission {
  public static final String SERIALIZED_NAME_ATTRIBUTES = "Attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private List<ContentSubmissionSharedBusinessEntitiesContentSubmissionAttribute> attributes = new ArrayList<>();

  public static final String SERIALIZED_NAME_BUILD_I_D = "BuildID";
  @SerializedName(SERIALIZED_NAME_BUILD_I_D)
  private Integer buildID;

  public static final String SERIALIZED_NAME_CONTENT_DEFINITION_I_D = "ContentDefinitionID";
  @SerializedName(SERIALIZED_NAME_CONTENT_DEFINITION_I_D)
  private Integer contentDefinitionID;

  public static final String SERIALIZED_NAME_CONTENT_SUBMISSION_I_D = "ContentSubmissionID";
  @SerializedName(SERIALIZED_NAME_CONTENT_SUBMISSION_I_D)
  private Integer contentSubmissionID;

  public static final String SERIALIZED_NAME_DEFINITION = "Definition";
  @SerializedName(SERIALIZED_NAME_DEFINITION)
  private ContentSubmissionSharedBusinessEntitiesContentDefinition definition;

  public static final String SERIALIZED_NAME_JOB_RUN_I_D = "JobRunID";
  @SerializedName(SERIALIZED_NAME_JOB_RUN_I_D)
  private Integer jobRunID;

  public static final String SERIALIZED_NAME_PACKAGE_I_D = "PackageID";
  @SerializedName(SERIALIZED_NAME_PACKAGE_I_D)
  private String packageID;

  public static final String SERIALIZED_NAME_RELEASE_NOTES = "ReleaseNotes";
  @SerializedName(SERIALIZED_NAME_RELEASE_NOTES)
  private String releaseNotes;

  public static final String SERIALIZED_NAME_REPOSITORY = "Repository";
  @SerializedName(SERIALIZED_NAME_REPOSITORY)
  private String repository;

  public static final String SERIALIZED_NAME_REVISION = "Revision";
  @SerializedName(SERIALIZED_NAME_REVISION)
  private Integer revision;

  public static final String SERIALIZED_NAME_SUBMISSION_DATE = "SubmissionDate";
  @SerializedName(SERIALIZED_NAME_SUBMISSION_DATE)
  private OffsetDateTime submissionDate;

  public static final String SERIALIZED_NAME_USER_I_D = "UserID";
  @SerializedName(SERIALIZED_NAME_USER_I_D)
  private Integer userID;

  public static final String SERIALIZED_NAME_VERSION = "Version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Integer version;

  public ContentSubmissionSharedBusinessEntitiesContentSubmission() {
  }

  public ContentSubmissionSharedBusinessEntitiesContentSubmission attributes(List<ContentSubmissionSharedBusinessEntitiesContentSubmissionAttribute> attributes) {
    this.attributes = attributes;
    return this;
  }

  public ContentSubmissionSharedBusinessEntitiesContentSubmission addAttributesItem(ContentSubmissionSharedBusinessEntitiesContentSubmissionAttribute attributesItem) {
    if (this.attributes == null) {
      this.attributes = new ArrayList<>();
    }
    this.attributes.add(attributesItem);
    return this;
  }

  /**
   * Attributes of this ContentSubmission
   * @return attributes
   */
  @javax.annotation.Nullable
  public List<ContentSubmissionSharedBusinessEntitiesContentSubmissionAttribute> getAttributes() {
    return attributes;
  }

  public void setAttributes(List<ContentSubmissionSharedBusinessEntitiesContentSubmissionAttribute> attributes) {
    this.attributes = attributes;
  }


  public ContentSubmissionSharedBusinessEntitiesContentSubmission buildID(Integer buildID) {
    this.buildID = buildID;
    return this;
  }

  /**
   * ReadOnly. The ID of the Azure DevOps Build which will build the content package.
   * @return buildID
   */
  @javax.annotation.Nullable
  public Integer getBuildID() {
    return buildID;
  }

  public void setBuildID(Integer buildID) {
    this.buildID = buildID;
  }


  public ContentSubmissionSharedBusinessEntitiesContentSubmission contentDefinitionID(Integer contentDefinitionID) {
    this.contentDefinitionID = contentDefinitionID;
    return this;
  }

  /**
   * The ID of the Content Definition.
   * @return contentDefinitionID
   */
  @javax.annotation.Nullable
  public Integer getContentDefinitionID() {
    return contentDefinitionID;
  }

  public void setContentDefinitionID(Integer contentDefinitionID) {
    this.contentDefinitionID = contentDefinitionID;
  }


  public ContentSubmissionSharedBusinessEntitiesContentSubmission contentSubmissionID(Integer contentSubmissionID) {
    this.contentSubmissionID = contentSubmissionID;
    return this;
  }

  /**
   * The ID of this Content Submission.
   * @return contentSubmissionID
   */
  @javax.annotation.Nullable
  public Integer getContentSubmissionID() {
    return contentSubmissionID;
  }

  public void setContentSubmissionID(Integer contentSubmissionID) {
    this.contentSubmissionID = contentSubmissionID;
  }


  public ContentSubmissionSharedBusinessEntitiesContentSubmission definition(ContentSubmissionSharedBusinessEntitiesContentDefinition definition) {
    this.definition = definition;
    return this;
  }

  /**
   * Get definition
   * @return definition
   */
  @javax.annotation.Nullable
  public ContentSubmissionSharedBusinessEntitiesContentDefinition getDefinition() {
    return definition;
  }

  public void setDefinition(ContentSubmissionSharedBusinessEntitiesContentDefinition definition) {
    this.definition = definition;
  }


  public ContentSubmissionSharedBusinessEntitiesContentSubmission jobRunID(Integer jobRunID) {
    this.jobRunID = jobRunID;
    return this;
  }

  /**
   * ReadOnly. The ID of the JobRun which will build the content package.
   * @return jobRunID
   */
  @javax.annotation.Nullable
  public Integer getJobRunID() {
    return jobRunID;
  }

  public void setJobRunID(Integer jobRunID) {
    this.jobRunID = jobRunID;
  }


  public ContentSubmissionSharedBusinessEntitiesContentSubmission packageID(String packageID) {
    this.packageID = packageID;
    return this;
  }

  /**
   * The ID of package generated by this content submission.
   * @return packageID
   */
  @javax.annotation.Nullable
  public String getPackageID() {
    return packageID;
  }

  public void setPackageID(String packageID) {
    this.packageID = packageID;
  }


  public ContentSubmissionSharedBusinessEntitiesContentSubmission releaseNotes(String releaseNotes) {
    this.releaseNotes = releaseNotes;
    return this;
  }

  /**
   * Release Notes for this ContentSubmission
   * @return releaseNotes
   */
  @javax.annotation.Nullable
  public String getReleaseNotes() {
    return releaseNotes;
  }

  public void setReleaseNotes(String releaseNotes) {
    this.releaseNotes = releaseNotes;
  }


  public ContentSubmissionSharedBusinessEntitiesContentSubmission repository(String repository) {
    this.repository = repository;
    return this;
  }

  /**
   * The SVN repository used as the source of this content submission
   * @return repository
   */
  @javax.annotation.Nullable
  public String getRepository() {
    return repository;
  }

  public void setRepository(String repository) {
    this.repository = repository;
  }


  public ContentSubmissionSharedBusinessEntitiesContentSubmission revision(Integer revision) {
    this.revision = revision;
    return this;
  }

  /**
   * The SVN revision used as the source of this content submission.
   * @return revision
   */
  @javax.annotation.Nullable
  public Integer getRevision() {
    return revision;
  }

  public void setRevision(Integer revision) {
    this.revision = revision;
  }


  public ContentSubmissionSharedBusinessEntitiesContentSubmission submissionDate(OffsetDateTime submissionDate) {
    this.submissionDate = submissionDate;
    return this;
  }

  /**
   * Read Only. The UTC date and time the content submission was made.
   * @return submissionDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSubmissionDate() {
    return submissionDate;
  }

  public void setSubmissionDate(OffsetDateTime submissionDate) {
    this.submissionDate = submissionDate;
  }


  public ContentSubmissionSharedBusinessEntitiesContentSubmission userID(Integer userID) {
    this.userID = userID;
    return this;
  }

  /**
   * Read Only. The ID of the user who submitted the content
   * @return userID
   */
  @javax.annotation.Nullable
  public Integer getUserID() {
    return userID;
  }

  public void setUserID(Integer userID) {
    this.userID = userID;
  }


  public ContentSubmissionSharedBusinessEntitiesContentSubmission version(Integer version) {
    this.version = version;
    return this;
  }

  /**
   * Optional.  The version number assigned to this Content Submission and the resulting Package.              If not provided, version shall be 1 if it is the first content submission for the               ContentDefinitionID otherwise it shall be the highest content submission version for the              specified ContentDefinitionID incremented by 1.
   * @return version
   */
  @javax.annotation.Nullable
  public Integer getVersion() {
    return version;
  }

  public void setVersion(Integer version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContentSubmissionSharedBusinessEntitiesContentSubmission contentSubmissionSharedBusinessEntitiesContentSubmission = (ContentSubmissionSharedBusinessEntitiesContentSubmission) o;
    return Objects.equals(this.attributes, contentSubmissionSharedBusinessEntitiesContentSubmission.attributes) &&
        Objects.equals(this.buildID, contentSubmissionSharedBusinessEntitiesContentSubmission.buildID) &&
        Objects.equals(this.contentDefinitionID, contentSubmissionSharedBusinessEntitiesContentSubmission.contentDefinitionID) &&
        Objects.equals(this.contentSubmissionID, contentSubmissionSharedBusinessEntitiesContentSubmission.contentSubmissionID) &&
        Objects.equals(this.definition, contentSubmissionSharedBusinessEntitiesContentSubmission.definition) &&
        Objects.equals(this.jobRunID, contentSubmissionSharedBusinessEntitiesContentSubmission.jobRunID) &&
        Objects.equals(this.packageID, contentSubmissionSharedBusinessEntitiesContentSubmission.packageID) &&
        Objects.equals(this.releaseNotes, contentSubmissionSharedBusinessEntitiesContentSubmission.releaseNotes) &&
        Objects.equals(this.repository, contentSubmissionSharedBusinessEntitiesContentSubmission.repository) &&
        Objects.equals(this.revision, contentSubmissionSharedBusinessEntitiesContentSubmission.revision) &&
        Objects.equals(this.submissionDate, contentSubmissionSharedBusinessEntitiesContentSubmission.submissionDate) &&
        Objects.equals(this.userID, contentSubmissionSharedBusinessEntitiesContentSubmission.userID) &&
        Objects.equals(this.version, contentSubmissionSharedBusinessEntitiesContentSubmission.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attributes, buildID, contentDefinitionID, contentSubmissionID, definition, jobRunID, packageID, releaseNotes, repository, revision, submissionDate, userID, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContentSubmissionSharedBusinessEntitiesContentSubmission {\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    buildID: ").append(toIndentedString(buildID)).append("\n");
    sb.append("    contentDefinitionID: ").append(toIndentedString(contentDefinitionID)).append("\n");
    sb.append("    contentSubmissionID: ").append(toIndentedString(contentSubmissionID)).append("\n");
    sb.append("    definition: ").append(toIndentedString(definition)).append("\n");
    sb.append("    jobRunID: ").append(toIndentedString(jobRunID)).append("\n");
    sb.append("    packageID: ").append(toIndentedString(packageID)).append("\n");
    sb.append("    releaseNotes: ").append(toIndentedString(releaseNotes)).append("\n");
    sb.append("    repository: ").append(toIndentedString(repository)).append("\n");
    sb.append("    revision: ").append(toIndentedString(revision)).append("\n");
    sb.append("    submissionDate: ").append(toIndentedString(submissionDate)).append("\n");
    sb.append("    userID: ").append(toIndentedString(userID)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Attributes");
    openapiFields.add("BuildID");
    openapiFields.add("ContentDefinitionID");
    openapiFields.add("ContentSubmissionID");
    openapiFields.add("Definition");
    openapiFields.add("JobRunID");
    openapiFields.add("PackageID");
    openapiFields.add("ReleaseNotes");
    openapiFields.add("Repository");
    openapiFields.add("Revision");
    openapiFields.add("SubmissionDate");
    openapiFields.add("UserID");
    openapiFields.add("Version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContentSubmissionSharedBusinessEntitiesContentSubmission
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContentSubmissionSharedBusinessEntitiesContentSubmission.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContentSubmissionSharedBusinessEntitiesContentSubmission is not found in the empty JSON string", ContentSubmissionSharedBusinessEntitiesContentSubmission.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContentSubmissionSharedBusinessEntitiesContentSubmission.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContentSubmissionSharedBusinessEntitiesContentSubmission` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("Attributes") != null && !jsonObj.get("Attributes").isJsonNull()) {
        JsonArray jsonArrayattributes = jsonObj.getAsJsonArray("Attributes");
        if (jsonArrayattributes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Attributes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Attributes` to be an array in the JSON string but got `%s`", jsonObj.get("Attributes").toString()));
          }

          // validate the optional field `Attributes` (array)
          for (int i = 0; i < jsonArrayattributes.size(); i++) {
            ContentSubmissionSharedBusinessEntitiesContentSubmissionAttribute.validateJsonElement(jsonArrayattributes.get(i));
          };
        }
      }
      // validate the optional field `Definition`
      if (jsonObj.get("Definition") != null && !jsonObj.get("Definition").isJsonNull()) {
        ContentSubmissionSharedBusinessEntitiesContentDefinition.validateJsonElement(jsonObj.get("Definition"));
      }
      if ((jsonObj.get("PackageID") != null && !jsonObj.get("PackageID").isJsonNull()) && !jsonObj.get("PackageID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PackageID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PackageID").toString()));
      }
      if ((jsonObj.get("ReleaseNotes") != null && !jsonObj.get("ReleaseNotes").isJsonNull()) && !jsonObj.get("ReleaseNotes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ReleaseNotes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ReleaseNotes").toString()));
      }
      if ((jsonObj.get("Repository") != null && !jsonObj.get("Repository").isJsonNull()) && !jsonObj.get("Repository").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Repository` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Repository").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContentSubmissionSharedBusinessEntitiesContentSubmission.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContentSubmissionSharedBusinessEntitiesContentSubmission' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContentSubmissionSharedBusinessEntitiesContentSubmission> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContentSubmissionSharedBusinessEntitiesContentSubmission.class));

       return (TypeAdapter<T>) new TypeAdapter<ContentSubmissionSharedBusinessEntitiesContentSubmission>() {
           @Override
           public void write(JsonWriter out, ContentSubmissionSharedBusinessEntitiesContentSubmission value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContentSubmissionSharedBusinessEntitiesContentSubmission read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContentSubmissionSharedBusinessEntitiesContentSubmission given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContentSubmissionSharedBusinessEntitiesContentSubmission
   * @throws IOException if the JSON string is invalid with respect to ContentSubmissionSharedBusinessEntitiesContentSubmission
   */
  public static ContentSubmissionSharedBusinessEntitiesContentSubmission fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContentSubmissionSharedBusinessEntitiesContentSubmission.class);
  }

  /**
   * Convert an instance of ContentSubmissionSharedBusinessEntitiesContentSubmission to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

