/*
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.APIModelsApiError;
import org.openapitools.client.model.UpdateSystemModelsCheckinResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UpdateSystemApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UpdateSystemApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UpdateSystemApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for updateSystemGetCachedFiles
     * @param clientID The ClientID of the Client (required)
     * @param expired Only Expired Files (true|false) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSystemGetCachedFilesCall(String clientID, Boolean expired, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/Clients/{ClientID}/CachedFiles"
            .replace("{" + "ClientID" + "}", localVarApiClient.escapeString(clientID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expired != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Expired", expired));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSystemGetCachedFilesValidateBeforeCall(String clientID, Boolean expired, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'clientID' is set
        if (clientID == null) {
            throw new ApiException("Missing the required parameter 'clientID' when calling updateSystemGetCachedFiles(Async)");
        }

        // verify the required parameter 'expired' is set
        if (expired == null) {
            throw new ApiException("Missing the required parameter 'expired' when calling updateSystemGetCachedFiles(Async)");
        }

        return updateSystemGetCachedFilesCall(clientID, expired, _callback);

    }

    /**
     * Get a list of Cached Files installed on the client Machine.
     * No Documentation Found.
     * @param clientID The ClientID of the Client (required)
     * @param expired Only Expired Files (true|false) (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public List<String> updateSystemGetCachedFiles(String clientID, Boolean expired) throws ApiException {
        ApiResponse<List<String>> localVarResp = updateSystemGetCachedFilesWithHttpInfo(clientID, expired);
        return localVarResp.getData();
    }

    /**
     * Get a list of Cached Files installed on the client Machine.
     * No Documentation Found.
     * @param clientID The ClientID of the Client (required)
     * @param expired Only Expired Files (true|false) (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> updateSystemGetCachedFilesWithHttpInfo(String clientID, Boolean expired) throws ApiException {
        okhttp3.Call localVarCall = updateSystemGetCachedFilesValidateBeforeCall(clientID, expired, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of Cached Files installed on the client Machine. (asynchronously)
     * No Documentation Found.
     * @param clientID The ClientID of the Client (required)
     * @param expired Only Expired Files (true|false) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSystemGetCachedFilesAsync(String clientID, Boolean expired, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSystemGetCachedFilesValidateBeforeCall(clientID, expired, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateSystemGetCheckin
     * @param clientID The Client ID to check-in.  If this is a new client ID it will be added to Clients. (required)
     * @param preview Get Pkgs w\\o updating Datetimes(true|false) (required)
     * @param runAllInventories Force return inventories. Defaults to false. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSystemGetCheckinCall(String clientID, Boolean preview, Boolean runAllInventories, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/UpdateSystem";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (clientID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ClientID", clientID));
        }

        if (preview != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Preview", preview));
        }

        if (runAllInventories != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("RunAllInventories", runAllInventories));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSystemGetCheckinValidateBeforeCall(String clientID, Boolean preview, Boolean runAllInventories, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'clientID' is set
        if (clientID == null) {
            throw new ApiException("Missing the required parameter 'clientID' when calling updateSystemGetCheckin(Async)");
        }

        // verify the required parameter 'preview' is set
        if (preview == null) {
            throw new ApiException("Missing the required parameter 'preview' when calling updateSystemGetCheckin(Async)");
        }

        return updateSystemGetCheckinCall(clientID, preview, runAllInventories, _callback);

    }

    /**
     * Checks the Client ID into the Update System.
     * No Documentation Found.
     * @param clientID The Client ID to check-in.  If this is a new client ID it will be added to Clients. (required)
     * @param preview Get Pkgs w\\o updating Datetimes(true|false) (required)
     * @param runAllInventories Force return inventories. Defaults to false. (optional)
     * @return UpdateSystemModelsCheckinResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSystemModelsCheckinResult updateSystemGetCheckin(String clientID, Boolean preview, Boolean runAllInventories) throws ApiException {
        ApiResponse<UpdateSystemModelsCheckinResult> localVarResp = updateSystemGetCheckinWithHttpInfo(clientID, preview, runAllInventories);
        return localVarResp.getData();
    }

    /**
     * Checks the Client ID into the Update System.
     * No Documentation Found.
     * @param clientID The Client ID to check-in.  If this is a new client ID it will be added to Clients. (required)
     * @param preview Get Pkgs w\\o updating Datetimes(true|false) (required)
     * @param runAllInventories Force return inventories. Defaults to false. (optional)
     * @return ApiResponse&lt;UpdateSystemModelsCheckinResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateSystemModelsCheckinResult> updateSystemGetCheckinWithHttpInfo(String clientID, Boolean preview, Boolean runAllInventories) throws ApiException {
        okhttp3.Call localVarCall = updateSystemGetCheckinValidateBeforeCall(clientID, preview, runAllInventories, null);
        Type localVarReturnType = new TypeToken<UpdateSystemModelsCheckinResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Checks the Client ID into the Update System. (asynchronously)
     * No Documentation Found.
     * @param clientID The Client ID to check-in.  If this is a new client ID it will be added to Clients. (required)
     * @param preview Get Pkgs w\\o updating Datetimes(true|false) (required)
     * @param runAllInventories Force return inventories. Defaults to false. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSystemGetCheckinAsync(String clientID, Boolean preview, Boolean runAllInventories, final ApiCallback<UpdateSystemModelsCheckinResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSystemGetCheckinValidateBeforeCall(clientID, preview, runAllInventories, _callback);
        Type localVarReturnType = new TypeToken<UpdateSystemModelsCheckinResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
