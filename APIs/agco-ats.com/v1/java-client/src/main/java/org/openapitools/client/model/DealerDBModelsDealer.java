/*
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DealerDBModelsDealer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:35.511967-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DealerDBModelsDealer {
  public static final String SERIALIZED_NAME_BILLING_ADDRESS = "BillingAddress";
  @SerializedName(SERIALIZED_NAME_BILLING_ADDRESS)
  private String billingAddress;

  public static final String SERIALIZED_NAME_BILLING_ADDRESS2 = "BillingAddress2";
  @SerializedName(SERIALIZED_NAME_BILLING_ADDRESS2)
  private String billingAddress2;

  public static final String SERIALIZED_NAME_BILLING_ADDRESS3 = "BillingAddress3";
  @SerializedName(SERIALIZED_NAME_BILLING_ADDRESS3)
  private String billingAddress3;

  public static final String SERIALIZED_NAME_BILLING_ADDRESS4 = "BillingAddress4";
  @SerializedName(SERIALIZED_NAME_BILLING_ADDRESS4)
  private String billingAddress4;

  public static final String SERIALIZED_NAME_BILLING_CITY = "BillingCity";
  @SerializedName(SERIALIZED_NAME_BILLING_CITY)
  private String billingCity;

  public static final String SERIALIZED_NAME_BILLING_COUNTRY = "BillingCountry";
  @SerializedName(SERIALIZED_NAME_BILLING_COUNTRY)
  private String billingCountry;

  public static final String SERIALIZED_NAME_BILLING_COUNTRY_CODE = "BillingCountryCode";
  @SerializedName(SERIALIZED_NAME_BILLING_COUNTRY_CODE)
  private String billingCountryCode;

  public static final String SERIALIZED_NAME_BILLING_STATE = "BillingState";
  @SerializedName(SERIALIZED_NAME_BILLING_STATE)
  private String billingState;

  public static final String SERIALIZED_NAME_BILLING_ZIP = "BillingZip";
  @SerializedName(SERIALIZED_NAME_BILLING_ZIP)
  private String billingZip;

  public static final String SERIALIZED_NAME_BRANDS = "Brands";
  @SerializedName(SERIALIZED_NAME_BRANDS)
  private List<String> brands = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEALER_CODE = "DealerCode";
  @SerializedName(SERIALIZED_NAME_DEALER_CODE)
  private String dealerCode;

  public static final String SERIALIZED_NAME_DEALER_NAME = "DealerName";
  @SerializedName(SERIALIZED_NAME_DEALER_NAME)
  private String dealerName;

  public static final String SERIALIZED_NAME_DEALER_STATUS = "DealerStatus";
  @SerializedName(SERIALIZED_NAME_DEALER_STATUS)
  private String dealerStatus;

  public static final String SERIALIZED_NAME_DEALER_STATUS_UPDATE_DATE = "DealerStatusUpdateDate";
  @SerializedName(SERIALIZED_NAME_DEALER_STATUS_UPDATE_DATE)
  private String dealerStatusUpdateDate;

  public static final String SERIALIZED_NAME_FILLER = "Filler";
  @SerializedName(SERIALIZED_NAME_FILLER)
  private String filler;

  public static final String SERIALIZED_NAME_IS_VALID = "IsValid";
  @SerializedName(SERIALIZED_NAME_IS_VALID)
  private Boolean isValid;

  public static final String SERIALIZED_NAME_LANGUAGE_PREFERENCE = "LanguagePreference";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_PREFERENCE)
  private String languagePreference;

  public static final String SERIALIZED_NAME_REGION1 = "Region1";
  @SerializedName(SERIALIZED_NAME_REGION1)
  private String region1;

  public static final String SERIALIZED_NAME_REGION2 = "Region2";
  @SerializedName(SERIALIZED_NAME_REGION2)
  private String region2;

  public static final String SERIALIZED_NAME_REGION_MAPPING = "RegionMapping";
  @SerializedName(SERIALIZED_NAME_REGION_MAPPING)
  private String regionMapping;

  public static final String SERIALIZED_NAME_ROLE_BRAND = "RoleBrand";
  @SerializedName(SERIALIZED_NAME_ROLE_BRAND)
  private String roleBrand;

  public static final String SERIALIZED_NAME_SHIPPING_ADDRESS2 = "ShippingAddress2";
  @SerializedName(SERIALIZED_NAME_SHIPPING_ADDRESS2)
  private String shippingAddress2;

  public static final String SERIALIZED_NAME_SHIPPING_ADDRESS3 = "ShippingAddress3";
  @SerializedName(SERIALIZED_NAME_SHIPPING_ADDRESS3)
  private String shippingAddress3;

  public static final String SERIALIZED_NAME_SHIPPING_ADDRESS4 = "ShippingAddress4";
  @SerializedName(SERIALIZED_NAME_SHIPPING_ADDRESS4)
  private String shippingAddress4;

  public static final String SERIALIZED_NAME_SHIPPING_CITY = "ShippingCity";
  @SerializedName(SERIALIZED_NAME_SHIPPING_CITY)
  private String shippingCity;

  public static final String SERIALIZED_NAME_SHIPPING_COUNTRY = "ShippingCountry";
  @SerializedName(SERIALIZED_NAME_SHIPPING_COUNTRY)
  private String shippingCountry;

  public static final String SERIALIZED_NAME_SHIPPING_STATE = "ShippingState";
  @SerializedName(SERIALIZED_NAME_SHIPPING_STATE)
  private String shippingState;

  public static final String SERIALIZED_NAME_SHIPPING_STREET = "ShippingStreet";
  @SerializedName(SERIALIZED_NAME_SHIPPING_STREET)
  private String shippingStreet;

  public static final String SERIALIZED_NAME_SHIPPING_ZIP = "ShippingZip";
  @SerializedName(SERIALIZED_NAME_SHIPPING_ZIP)
  private String shippingZip;

  public static final String SERIALIZED_NAME_TELEPHONE = "Telephone";
  @SerializedName(SERIALIZED_NAME_TELEPHONE)
  private String telephone;

  public static final String SERIALIZED_NAME_VA_T_CODE = "VATCode";
  @SerializedName(SERIALIZED_NAME_VA_T_CODE)
  private String vaTCode;

  public DealerDBModelsDealer() {
  }

  public DealerDBModelsDealer(
     List<String> brands, 
     Boolean isValid
  ) {
    this();
    this.brands = brands;
    this.isValid = isValid;
  }

  public DealerDBModelsDealer billingAddress(String billingAddress) {
    this.billingAddress = billingAddress;
    return this;
  }

  /**
   * Get billingAddress
   * @return billingAddress
   */
  @javax.annotation.Nullable
  public String getBillingAddress() {
    return billingAddress;
  }

  public void setBillingAddress(String billingAddress) {
    this.billingAddress = billingAddress;
  }


  public DealerDBModelsDealer billingAddress2(String billingAddress2) {
    this.billingAddress2 = billingAddress2;
    return this;
  }

  /**
   * Get billingAddress2
   * @return billingAddress2
   */
  @javax.annotation.Nullable
  public String getBillingAddress2() {
    return billingAddress2;
  }

  public void setBillingAddress2(String billingAddress2) {
    this.billingAddress2 = billingAddress2;
  }


  public DealerDBModelsDealer billingAddress3(String billingAddress3) {
    this.billingAddress3 = billingAddress3;
    return this;
  }

  /**
   * Get billingAddress3
   * @return billingAddress3
   */
  @javax.annotation.Nullable
  public String getBillingAddress3() {
    return billingAddress3;
  }

  public void setBillingAddress3(String billingAddress3) {
    this.billingAddress3 = billingAddress3;
  }


  public DealerDBModelsDealer billingAddress4(String billingAddress4) {
    this.billingAddress4 = billingAddress4;
    return this;
  }

  /**
   * Get billingAddress4
   * @return billingAddress4
   */
  @javax.annotation.Nullable
  public String getBillingAddress4() {
    return billingAddress4;
  }

  public void setBillingAddress4(String billingAddress4) {
    this.billingAddress4 = billingAddress4;
  }


  public DealerDBModelsDealer billingCity(String billingCity) {
    this.billingCity = billingCity;
    return this;
  }

  /**
   * Get billingCity
   * @return billingCity
   */
  @javax.annotation.Nullable
  public String getBillingCity() {
    return billingCity;
  }

  public void setBillingCity(String billingCity) {
    this.billingCity = billingCity;
  }


  public DealerDBModelsDealer billingCountry(String billingCountry) {
    this.billingCountry = billingCountry;
    return this;
  }

  /**
   * Get billingCountry
   * @return billingCountry
   */
  @javax.annotation.Nullable
  public String getBillingCountry() {
    return billingCountry;
  }

  public void setBillingCountry(String billingCountry) {
    this.billingCountry = billingCountry;
  }


  public DealerDBModelsDealer billingCountryCode(String billingCountryCode) {
    this.billingCountryCode = billingCountryCode;
    return this;
  }

  /**
   * Get billingCountryCode
   * @return billingCountryCode
   */
  @javax.annotation.Nullable
  public String getBillingCountryCode() {
    return billingCountryCode;
  }

  public void setBillingCountryCode(String billingCountryCode) {
    this.billingCountryCode = billingCountryCode;
  }


  public DealerDBModelsDealer billingState(String billingState) {
    this.billingState = billingState;
    return this;
  }

  /**
   * Get billingState
   * @return billingState
   */
  @javax.annotation.Nullable
  public String getBillingState() {
    return billingState;
  }

  public void setBillingState(String billingState) {
    this.billingState = billingState;
  }


  public DealerDBModelsDealer billingZip(String billingZip) {
    this.billingZip = billingZip;
    return this;
  }

  /**
   * Get billingZip
   * @return billingZip
   */
  @javax.annotation.Nullable
  public String getBillingZip() {
    return billingZip;
  }

  public void setBillingZip(String billingZip) {
    this.billingZip = billingZip;
  }


  /**
   * Get brands
   * @return brands
   */
  @javax.annotation.Nullable
  public List<String> getBrands() {
    return brands;
  }



  public DealerDBModelsDealer dealerCode(String dealerCode) {
    this.dealerCode = dealerCode;
    return this;
  }

  /**
   * Get dealerCode
   * @return dealerCode
   */
  @javax.annotation.Nullable
  public String getDealerCode() {
    return dealerCode;
  }

  public void setDealerCode(String dealerCode) {
    this.dealerCode = dealerCode;
  }


  public DealerDBModelsDealer dealerName(String dealerName) {
    this.dealerName = dealerName;
    return this;
  }

  /**
   * Get dealerName
   * @return dealerName
   */
  @javax.annotation.Nullable
  public String getDealerName() {
    return dealerName;
  }

  public void setDealerName(String dealerName) {
    this.dealerName = dealerName;
  }


  public DealerDBModelsDealer dealerStatus(String dealerStatus) {
    this.dealerStatus = dealerStatus;
    return this;
  }

  /**
   * Get dealerStatus
   * @return dealerStatus
   */
  @javax.annotation.Nullable
  public String getDealerStatus() {
    return dealerStatus;
  }

  public void setDealerStatus(String dealerStatus) {
    this.dealerStatus = dealerStatus;
  }


  public DealerDBModelsDealer dealerStatusUpdateDate(String dealerStatusUpdateDate) {
    this.dealerStatusUpdateDate = dealerStatusUpdateDate;
    return this;
  }

  /**
   * Get dealerStatusUpdateDate
   * @return dealerStatusUpdateDate
   */
  @javax.annotation.Nullable
  public String getDealerStatusUpdateDate() {
    return dealerStatusUpdateDate;
  }

  public void setDealerStatusUpdateDate(String dealerStatusUpdateDate) {
    this.dealerStatusUpdateDate = dealerStatusUpdateDate;
  }


  public DealerDBModelsDealer filler(String filler) {
    this.filler = filler;
    return this;
  }

  /**
   * Get filler
   * @return filler
   */
  @javax.annotation.Nullable
  public String getFiller() {
    return filler;
  }

  public void setFiller(String filler) {
    this.filler = filler;
  }


  /**
   * Get isValid
   * @return isValid
   */
  @javax.annotation.Nullable
  public Boolean getIsValid() {
    return isValid;
  }



  public DealerDBModelsDealer languagePreference(String languagePreference) {
    this.languagePreference = languagePreference;
    return this;
  }

  /**
   * Get languagePreference
   * @return languagePreference
   */
  @javax.annotation.Nullable
  public String getLanguagePreference() {
    return languagePreference;
  }

  public void setLanguagePreference(String languagePreference) {
    this.languagePreference = languagePreference;
  }


  public DealerDBModelsDealer region1(String region1) {
    this.region1 = region1;
    return this;
  }

  /**
   * Get region1
   * @return region1
   */
  @javax.annotation.Nullable
  public String getRegion1() {
    return region1;
  }

  public void setRegion1(String region1) {
    this.region1 = region1;
  }


  public DealerDBModelsDealer region2(String region2) {
    this.region2 = region2;
    return this;
  }

  /**
   * Get region2
   * @return region2
   */
  @javax.annotation.Nullable
  public String getRegion2() {
    return region2;
  }

  public void setRegion2(String region2) {
    this.region2 = region2;
  }


  public DealerDBModelsDealer regionMapping(String regionMapping) {
    this.regionMapping = regionMapping;
    return this;
  }

  /**
   * Get regionMapping
   * @return regionMapping
   */
  @javax.annotation.Nullable
  public String getRegionMapping() {
    return regionMapping;
  }

  public void setRegionMapping(String regionMapping) {
    this.regionMapping = regionMapping;
  }


  public DealerDBModelsDealer roleBrand(String roleBrand) {
    this.roleBrand = roleBrand;
    return this;
  }

  /**
   * Get roleBrand
   * @return roleBrand
   */
  @javax.annotation.Nullable
  public String getRoleBrand() {
    return roleBrand;
  }

  public void setRoleBrand(String roleBrand) {
    this.roleBrand = roleBrand;
  }


  public DealerDBModelsDealer shippingAddress2(String shippingAddress2) {
    this.shippingAddress2 = shippingAddress2;
    return this;
  }

  /**
   * Get shippingAddress2
   * @return shippingAddress2
   */
  @javax.annotation.Nullable
  public String getShippingAddress2() {
    return shippingAddress2;
  }

  public void setShippingAddress2(String shippingAddress2) {
    this.shippingAddress2 = shippingAddress2;
  }


  public DealerDBModelsDealer shippingAddress3(String shippingAddress3) {
    this.shippingAddress3 = shippingAddress3;
    return this;
  }

  /**
   * Get shippingAddress3
   * @return shippingAddress3
   */
  @javax.annotation.Nullable
  public String getShippingAddress3() {
    return shippingAddress3;
  }

  public void setShippingAddress3(String shippingAddress3) {
    this.shippingAddress3 = shippingAddress3;
  }


  public DealerDBModelsDealer shippingAddress4(String shippingAddress4) {
    this.shippingAddress4 = shippingAddress4;
    return this;
  }

  /**
   * Get shippingAddress4
   * @return shippingAddress4
   */
  @javax.annotation.Nullable
  public String getShippingAddress4() {
    return shippingAddress4;
  }

  public void setShippingAddress4(String shippingAddress4) {
    this.shippingAddress4 = shippingAddress4;
  }


  public DealerDBModelsDealer shippingCity(String shippingCity) {
    this.shippingCity = shippingCity;
    return this;
  }

  /**
   * Get shippingCity
   * @return shippingCity
   */
  @javax.annotation.Nullable
  public String getShippingCity() {
    return shippingCity;
  }

  public void setShippingCity(String shippingCity) {
    this.shippingCity = shippingCity;
  }


  public DealerDBModelsDealer shippingCountry(String shippingCountry) {
    this.shippingCountry = shippingCountry;
    return this;
  }

  /**
   * Get shippingCountry
   * @return shippingCountry
   */
  @javax.annotation.Nullable
  public String getShippingCountry() {
    return shippingCountry;
  }

  public void setShippingCountry(String shippingCountry) {
    this.shippingCountry = shippingCountry;
  }


  public DealerDBModelsDealer shippingState(String shippingState) {
    this.shippingState = shippingState;
    return this;
  }

  /**
   * Get shippingState
   * @return shippingState
   */
  @javax.annotation.Nullable
  public String getShippingState() {
    return shippingState;
  }

  public void setShippingState(String shippingState) {
    this.shippingState = shippingState;
  }


  public DealerDBModelsDealer shippingStreet(String shippingStreet) {
    this.shippingStreet = shippingStreet;
    return this;
  }

  /**
   * Get shippingStreet
   * @return shippingStreet
   */
  @javax.annotation.Nullable
  public String getShippingStreet() {
    return shippingStreet;
  }

  public void setShippingStreet(String shippingStreet) {
    this.shippingStreet = shippingStreet;
  }


  public DealerDBModelsDealer shippingZip(String shippingZip) {
    this.shippingZip = shippingZip;
    return this;
  }

  /**
   * Get shippingZip
   * @return shippingZip
   */
  @javax.annotation.Nullable
  public String getShippingZip() {
    return shippingZip;
  }

  public void setShippingZip(String shippingZip) {
    this.shippingZip = shippingZip;
  }


  public DealerDBModelsDealer telephone(String telephone) {
    this.telephone = telephone;
    return this;
  }

  /**
   * Get telephone
   * @return telephone
   */
  @javax.annotation.Nullable
  public String getTelephone() {
    return telephone;
  }

  public void setTelephone(String telephone) {
    this.telephone = telephone;
  }


  public DealerDBModelsDealer vaTCode(String vaTCode) {
    this.vaTCode = vaTCode;
    return this;
  }

  /**
   * Get vaTCode
   * @return vaTCode
   */
  @javax.annotation.Nullable
  public String getVaTCode() {
    return vaTCode;
  }

  public void setVaTCode(String vaTCode) {
    this.vaTCode = vaTCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DealerDBModelsDealer dealerDBModelsDealer = (DealerDBModelsDealer) o;
    return Objects.equals(this.billingAddress, dealerDBModelsDealer.billingAddress) &&
        Objects.equals(this.billingAddress2, dealerDBModelsDealer.billingAddress2) &&
        Objects.equals(this.billingAddress3, dealerDBModelsDealer.billingAddress3) &&
        Objects.equals(this.billingAddress4, dealerDBModelsDealer.billingAddress4) &&
        Objects.equals(this.billingCity, dealerDBModelsDealer.billingCity) &&
        Objects.equals(this.billingCountry, dealerDBModelsDealer.billingCountry) &&
        Objects.equals(this.billingCountryCode, dealerDBModelsDealer.billingCountryCode) &&
        Objects.equals(this.billingState, dealerDBModelsDealer.billingState) &&
        Objects.equals(this.billingZip, dealerDBModelsDealer.billingZip) &&
        Objects.equals(this.brands, dealerDBModelsDealer.brands) &&
        Objects.equals(this.dealerCode, dealerDBModelsDealer.dealerCode) &&
        Objects.equals(this.dealerName, dealerDBModelsDealer.dealerName) &&
        Objects.equals(this.dealerStatus, dealerDBModelsDealer.dealerStatus) &&
        Objects.equals(this.dealerStatusUpdateDate, dealerDBModelsDealer.dealerStatusUpdateDate) &&
        Objects.equals(this.filler, dealerDBModelsDealer.filler) &&
        Objects.equals(this.isValid, dealerDBModelsDealer.isValid) &&
        Objects.equals(this.languagePreference, dealerDBModelsDealer.languagePreference) &&
        Objects.equals(this.region1, dealerDBModelsDealer.region1) &&
        Objects.equals(this.region2, dealerDBModelsDealer.region2) &&
        Objects.equals(this.regionMapping, dealerDBModelsDealer.regionMapping) &&
        Objects.equals(this.roleBrand, dealerDBModelsDealer.roleBrand) &&
        Objects.equals(this.shippingAddress2, dealerDBModelsDealer.shippingAddress2) &&
        Objects.equals(this.shippingAddress3, dealerDBModelsDealer.shippingAddress3) &&
        Objects.equals(this.shippingAddress4, dealerDBModelsDealer.shippingAddress4) &&
        Objects.equals(this.shippingCity, dealerDBModelsDealer.shippingCity) &&
        Objects.equals(this.shippingCountry, dealerDBModelsDealer.shippingCountry) &&
        Objects.equals(this.shippingState, dealerDBModelsDealer.shippingState) &&
        Objects.equals(this.shippingStreet, dealerDBModelsDealer.shippingStreet) &&
        Objects.equals(this.shippingZip, dealerDBModelsDealer.shippingZip) &&
        Objects.equals(this.telephone, dealerDBModelsDealer.telephone) &&
        Objects.equals(this.vaTCode, dealerDBModelsDealer.vaTCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(billingAddress, billingAddress2, billingAddress3, billingAddress4, billingCity, billingCountry, billingCountryCode, billingState, billingZip, brands, dealerCode, dealerName, dealerStatus, dealerStatusUpdateDate, filler, isValid, languagePreference, region1, region2, regionMapping, roleBrand, shippingAddress2, shippingAddress3, shippingAddress4, shippingCity, shippingCountry, shippingState, shippingStreet, shippingZip, telephone, vaTCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DealerDBModelsDealer {\n");
    sb.append("    billingAddress: ").append(toIndentedString(billingAddress)).append("\n");
    sb.append("    billingAddress2: ").append(toIndentedString(billingAddress2)).append("\n");
    sb.append("    billingAddress3: ").append(toIndentedString(billingAddress3)).append("\n");
    sb.append("    billingAddress4: ").append(toIndentedString(billingAddress4)).append("\n");
    sb.append("    billingCity: ").append(toIndentedString(billingCity)).append("\n");
    sb.append("    billingCountry: ").append(toIndentedString(billingCountry)).append("\n");
    sb.append("    billingCountryCode: ").append(toIndentedString(billingCountryCode)).append("\n");
    sb.append("    billingState: ").append(toIndentedString(billingState)).append("\n");
    sb.append("    billingZip: ").append(toIndentedString(billingZip)).append("\n");
    sb.append("    brands: ").append(toIndentedString(brands)).append("\n");
    sb.append("    dealerCode: ").append(toIndentedString(dealerCode)).append("\n");
    sb.append("    dealerName: ").append(toIndentedString(dealerName)).append("\n");
    sb.append("    dealerStatus: ").append(toIndentedString(dealerStatus)).append("\n");
    sb.append("    dealerStatusUpdateDate: ").append(toIndentedString(dealerStatusUpdateDate)).append("\n");
    sb.append("    filler: ").append(toIndentedString(filler)).append("\n");
    sb.append("    isValid: ").append(toIndentedString(isValid)).append("\n");
    sb.append("    languagePreference: ").append(toIndentedString(languagePreference)).append("\n");
    sb.append("    region1: ").append(toIndentedString(region1)).append("\n");
    sb.append("    region2: ").append(toIndentedString(region2)).append("\n");
    sb.append("    regionMapping: ").append(toIndentedString(regionMapping)).append("\n");
    sb.append("    roleBrand: ").append(toIndentedString(roleBrand)).append("\n");
    sb.append("    shippingAddress2: ").append(toIndentedString(shippingAddress2)).append("\n");
    sb.append("    shippingAddress3: ").append(toIndentedString(shippingAddress3)).append("\n");
    sb.append("    shippingAddress4: ").append(toIndentedString(shippingAddress4)).append("\n");
    sb.append("    shippingCity: ").append(toIndentedString(shippingCity)).append("\n");
    sb.append("    shippingCountry: ").append(toIndentedString(shippingCountry)).append("\n");
    sb.append("    shippingState: ").append(toIndentedString(shippingState)).append("\n");
    sb.append("    shippingStreet: ").append(toIndentedString(shippingStreet)).append("\n");
    sb.append("    shippingZip: ").append(toIndentedString(shippingZip)).append("\n");
    sb.append("    telephone: ").append(toIndentedString(telephone)).append("\n");
    sb.append("    vaTCode: ").append(toIndentedString(vaTCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("BillingAddress");
    openapiFields.add("BillingAddress2");
    openapiFields.add("BillingAddress3");
    openapiFields.add("BillingAddress4");
    openapiFields.add("BillingCity");
    openapiFields.add("BillingCountry");
    openapiFields.add("BillingCountryCode");
    openapiFields.add("BillingState");
    openapiFields.add("BillingZip");
    openapiFields.add("Brands");
    openapiFields.add("DealerCode");
    openapiFields.add("DealerName");
    openapiFields.add("DealerStatus");
    openapiFields.add("DealerStatusUpdateDate");
    openapiFields.add("Filler");
    openapiFields.add("IsValid");
    openapiFields.add("LanguagePreference");
    openapiFields.add("Region1");
    openapiFields.add("Region2");
    openapiFields.add("RegionMapping");
    openapiFields.add("RoleBrand");
    openapiFields.add("ShippingAddress2");
    openapiFields.add("ShippingAddress3");
    openapiFields.add("ShippingAddress4");
    openapiFields.add("ShippingCity");
    openapiFields.add("ShippingCountry");
    openapiFields.add("ShippingState");
    openapiFields.add("ShippingStreet");
    openapiFields.add("ShippingZip");
    openapiFields.add("Telephone");
    openapiFields.add("VATCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DealerDBModelsDealer
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DealerDBModelsDealer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DealerDBModelsDealer is not found in the empty JSON string", DealerDBModelsDealer.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DealerDBModelsDealer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DealerDBModelsDealer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("BillingAddress") != null && !jsonObj.get("BillingAddress").isJsonNull()) && !jsonObj.get("BillingAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BillingAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BillingAddress").toString()));
      }
      if ((jsonObj.get("BillingAddress2") != null && !jsonObj.get("BillingAddress2").isJsonNull()) && !jsonObj.get("BillingAddress2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BillingAddress2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BillingAddress2").toString()));
      }
      if ((jsonObj.get("BillingAddress3") != null && !jsonObj.get("BillingAddress3").isJsonNull()) && !jsonObj.get("BillingAddress3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BillingAddress3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BillingAddress3").toString()));
      }
      if ((jsonObj.get("BillingAddress4") != null && !jsonObj.get("BillingAddress4").isJsonNull()) && !jsonObj.get("BillingAddress4").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BillingAddress4` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BillingAddress4").toString()));
      }
      if ((jsonObj.get("BillingCity") != null && !jsonObj.get("BillingCity").isJsonNull()) && !jsonObj.get("BillingCity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BillingCity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BillingCity").toString()));
      }
      if ((jsonObj.get("BillingCountry") != null && !jsonObj.get("BillingCountry").isJsonNull()) && !jsonObj.get("BillingCountry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BillingCountry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BillingCountry").toString()));
      }
      if ((jsonObj.get("BillingCountryCode") != null && !jsonObj.get("BillingCountryCode").isJsonNull()) && !jsonObj.get("BillingCountryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BillingCountryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BillingCountryCode").toString()));
      }
      if ((jsonObj.get("BillingState") != null && !jsonObj.get("BillingState").isJsonNull()) && !jsonObj.get("BillingState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BillingState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BillingState").toString()));
      }
      if ((jsonObj.get("BillingZip") != null && !jsonObj.get("BillingZip").isJsonNull()) && !jsonObj.get("BillingZip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BillingZip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BillingZip").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Brands") != null && !jsonObj.get("Brands").isJsonNull() && !jsonObj.get("Brands").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Brands` to be an array in the JSON string but got `%s`", jsonObj.get("Brands").toString()));
      }
      if ((jsonObj.get("DealerCode") != null && !jsonObj.get("DealerCode").isJsonNull()) && !jsonObj.get("DealerCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DealerCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DealerCode").toString()));
      }
      if ((jsonObj.get("DealerName") != null && !jsonObj.get("DealerName").isJsonNull()) && !jsonObj.get("DealerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DealerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DealerName").toString()));
      }
      if ((jsonObj.get("DealerStatus") != null && !jsonObj.get("DealerStatus").isJsonNull()) && !jsonObj.get("DealerStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DealerStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DealerStatus").toString()));
      }
      if ((jsonObj.get("DealerStatusUpdateDate") != null && !jsonObj.get("DealerStatusUpdateDate").isJsonNull()) && !jsonObj.get("DealerStatusUpdateDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DealerStatusUpdateDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DealerStatusUpdateDate").toString()));
      }
      if ((jsonObj.get("Filler") != null && !jsonObj.get("Filler").isJsonNull()) && !jsonObj.get("Filler").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Filler` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Filler").toString()));
      }
      if ((jsonObj.get("LanguagePreference") != null && !jsonObj.get("LanguagePreference").isJsonNull()) && !jsonObj.get("LanguagePreference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LanguagePreference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LanguagePreference").toString()));
      }
      if ((jsonObj.get("Region1") != null && !jsonObj.get("Region1").isJsonNull()) && !jsonObj.get("Region1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Region1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Region1").toString()));
      }
      if ((jsonObj.get("Region2") != null && !jsonObj.get("Region2").isJsonNull()) && !jsonObj.get("Region2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Region2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Region2").toString()));
      }
      if ((jsonObj.get("RegionMapping") != null && !jsonObj.get("RegionMapping").isJsonNull()) && !jsonObj.get("RegionMapping").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RegionMapping` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RegionMapping").toString()));
      }
      if ((jsonObj.get("RoleBrand") != null && !jsonObj.get("RoleBrand").isJsonNull()) && !jsonObj.get("RoleBrand").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RoleBrand` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RoleBrand").toString()));
      }
      if ((jsonObj.get("ShippingAddress2") != null && !jsonObj.get("ShippingAddress2").isJsonNull()) && !jsonObj.get("ShippingAddress2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ShippingAddress2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ShippingAddress2").toString()));
      }
      if ((jsonObj.get("ShippingAddress3") != null && !jsonObj.get("ShippingAddress3").isJsonNull()) && !jsonObj.get("ShippingAddress3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ShippingAddress3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ShippingAddress3").toString()));
      }
      if ((jsonObj.get("ShippingAddress4") != null && !jsonObj.get("ShippingAddress4").isJsonNull()) && !jsonObj.get("ShippingAddress4").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ShippingAddress4` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ShippingAddress4").toString()));
      }
      if ((jsonObj.get("ShippingCity") != null && !jsonObj.get("ShippingCity").isJsonNull()) && !jsonObj.get("ShippingCity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ShippingCity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ShippingCity").toString()));
      }
      if ((jsonObj.get("ShippingCountry") != null && !jsonObj.get("ShippingCountry").isJsonNull()) && !jsonObj.get("ShippingCountry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ShippingCountry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ShippingCountry").toString()));
      }
      if ((jsonObj.get("ShippingState") != null && !jsonObj.get("ShippingState").isJsonNull()) && !jsonObj.get("ShippingState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ShippingState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ShippingState").toString()));
      }
      if ((jsonObj.get("ShippingStreet") != null && !jsonObj.get("ShippingStreet").isJsonNull()) && !jsonObj.get("ShippingStreet").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ShippingStreet` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ShippingStreet").toString()));
      }
      if ((jsonObj.get("ShippingZip") != null && !jsonObj.get("ShippingZip").isJsonNull()) && !jsonObj.get("ShippingZip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ShippingZip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ShippingZip").toString()));
      }
      if ((jsonObj.get("Telephone") != null && !jsonObj.get("Telephone").isJsonNull()) && !jsonObj.get("Telephone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Telephone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Telephone").toString()));
      }
      if ((jsonObj.get("VATCode") != null && !jsonObj.get("VATCode").isJsonNull()) && !jsonObj.get("VATCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `VATCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("VATCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DealerDBModelsDealer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DealerDBModelsDealer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DealerDBModelsDealer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DealerDBModelsDealer.class));

       return (TypeAdapter<T>) new TypeAdapter<DealerDBModelsDealer>() {
           @Override
           public void write(JsonWriter out, DealerDBModelsDealer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DealerDBModelsDealer read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DealerDBModelsDealer given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DealerDBModelsDealer
   * @throws IOException if the JSON string is invalid with respect to DealerDBModelsDealer
   */
  public static DealerDBModelsDealer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DealerDBModelsDealer.class);
  }

  /**
   * Convert an instance of DealerDBModelsDealer to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

