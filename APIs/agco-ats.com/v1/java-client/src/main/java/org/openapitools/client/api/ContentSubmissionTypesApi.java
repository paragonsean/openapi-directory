/*
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.APIModelsApiError;
import org.openapitools.client.model.ContentSubmissionSharedBusinessEntitiesContentSubmissionType;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ContentSubmissionTypesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ContentSubmissionTypesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ContentSubmissionTypesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for contentSubmissionTypesDeleteContentSubmissionType
     * @param id The ID of the Content Submission Type (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentSubmissionTypesDeleteContentSubmissionTypeCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/ContentSubmissionTypes/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contentSubmissionTypesDeleteContentSubmissionTypeValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling contentSubmissionTypesDeleteContentSubmissionType(Async)");
        }

        return contentSubmissionTypesDeleteContentSubmissionTypeCall(id, _callback);

    }

    /**
     * Remove a Content Submission Type
     * No Documentation Found.
     * @param id The ID of the Content Submission Type (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public void contentSubmissionTypesDeleteContentSubmissionType(Integer id) throws ApiException {
        contentSubmissionTypesDeleteContentSubmissionTypeWithHttpInfo(id);
    }

    /**
     * Remove a Content Submission Type
     * No Documentation Found.
     * @param id The ID of the Content Submission Type (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> contentSubmissionTypesDeleteContentSubmissionTypeWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = contentSubmissionTypesDeleteContentSubmissionTypeValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a Content Submission Type (asynchronously)
     * No Documentation Found.
     * @param id The ID of the Content Submission Type (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentSubmissionTypesDeleteContentSubmissionTypeAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = contentSubmissionTypesDeleteContentSubmissionTypeValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for contentSubmissionTypesGetContentSubmissionType
     * @param id The ID of the Content Submission Type (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentSubmissionTypesGetContentSubmissionTypeCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/ContentSubmissionTypes/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contentSubmissionTypesGetContentSubmissionTypeValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling contentSubmissionTypesGetContentSubmissionType(Async)");
        }

        return contentSubmissionTypesGetContentSubmissionTypeCall(id, _callback);

    }

    /**
     * Retrieves a Content Submission Type by its ID.
     * No Documentation Found.
     * @param id The ID of the Content Submission Type (required)
     * @return ContentSubmissionSharedBusinessEntitiesContentSubmissionType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ContentSubmissionSharedBusinessEntitiesContentSubmissionType contentSubmissionTypesGetContentSubmissionType(Integer id) throws ApiException {
        ApiResponse<ContentSubmissionSharedBusinessEntitiesContentSubmissionType> localVarResp = contentSubmissionTypesGetContentSubmissionTypeWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Retrieves a Content Submission Type by its ID.
     * No Documentation Found.
     * @param id The ID of the Content Submission Type (required)
     * @return ApiResponse&lt;ContentSubmissionSharedBusinessEntitiesContentSubmissionType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContentSubmissionSharedBusinessEntitiesContentSubmissionType> contentSubmissionTypesGetContentSubmissionTypeWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = contentSubmissionTypesGetContentSubmissionTypeValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ContentSubmissionSharedBusinessEntitiesContentSubmissionType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a Content Submission Type by its ID. (asynchronously)
     * No Documentation Found.
     * @param id The ID of the Content Submission Type (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentSubmissionTypesGetContentSubmissionTypeAsync(Integer id, final ApiCallback<ContentSubmissionSharedBusinessEntitiesContentSubmissionType> _callback) throws ApiException {

        okhttp3.Call localVarCall = contentSubmissionTypesGetContentSubmissionTypeValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ContentSubmissionSharedBusinessEntitiesContentSubmissionType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contentSubmissionTypesGetContentSubmissionTypes
     * @param enabled  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentSubmissionTypesGetContentSubmissionTypesCall(Boolean enabled, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/ContentSubmissionTypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (enabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enabled", enabled));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contentSubmissionTypesGetContentSubmissionTypesValidateBeforeCall(Boolean enabled, final ApiCallback _callback) throws ApiException {
        return contentSubmissionTypesGetContentSubmissionTypesCall(enabled, _callback);

    }

    /**
     * Returns available Content Submission Types.
     * No Documentation Found.
     * @param enabled  (optional)
     * @return List&lt;ContentSubmissionSharedBusinessEntitiesContentSubmissionType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public List<ContentSubmissionSharedBusinessEntitiesContentSubmissionType> contentSubmissionTypesGetContentSubmissionTypes(Boolean enabled) throws ApiException {
        ApiResponse<List<ContentSubmissionSharedBusinessEntitiesContentSubmissionType>> localVarResp = contentSubmissionTypesGetContentSubmissionTypesWithHttpInfo(enabled);
        return localVarResp.getData();
    }

    /**
     * Returns available Content Submission Types.
     * No Documentation Found.
     * @param enabled  (optional)
     * @return ApiResponse&lt;List&lt;ContentSubmissionSharedBusinessEntitiesContentSubmissionType&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ContentSubmissionSharedBusinessEntitiesContentSubmissionType>> contentSubmissionTypesGetContentSubmissionTypesWithHttpInfo(Boolean enabled) throws ApiException {
        okhttp3.Call localVarCall = contentSubmissionTypesGetContentSubmissionTypesValidateBeforeCall(enabled, null);
        Type localVarReturnType = new TypeToken<List<ContentSubmissionSharedBusinessEntitiesContentSubmissionType>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns available Content Submission Types. (asynchronously)
     * No Documentation Found.
     * @param enabled  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentSubmissionTypesGetContentSubmissionTypesAsync(Boolean enabled, final ApiCallback<List<ContentSubmissionSharedBusinessEntitiesContentSubmissionType>> _callback) throws ApiException {

        okhttp3.Call localVarCall = contentSubmissionTypesGetContentSubmissionTypesValidateBeforeCall(enabled, _callback);
        Type localVarReturnType = new TypeToken<List<ContentSubmissionSharedBusinessEntitiesContentSubmissionType>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contentSubmissionTypesPostContentSubmissionType
     * @param contentSubmissionSharedBusinessEntitiesContentSubmissionType The Content Submission Type (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentSubmissionTypesPostContentSubmissionTypeCall(ContentSubmissionSharedBusinessEntitiesContentSubmissionType contentSubmissionSharedBusinessEntitiesContentSubmissionType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contentSubmissionSharedBusinessEntitiesContentSubmissionType;

        // create path and map variables
        String localVarPath = "/api/v2/ContentSubmissionTypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contentSubmissionTypesPostContentSubmissionTypeValidateBeforeCall(ContentSubmissionSharedBusinessEntitiesContentSubmissionType contentSubmissionSharedBusinessEntitiesContentSubmissionType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentSubmissionSharedBusinessEntitiesContentSubmissionType' is set
        if (contentSubmissionSharedBusinessEntitiesContentSubmissionType == null) {
            throw new ApiException("Missing the required parameter 'contentSubmissionSharedBusinessEntitiesContentSubmissionType' when calling contentSubmissionTypesPostContentSubmissionType(Async)");
        }

        return contentSubmissionTypesPostContentSubmissionTypeCall(contentSubmissionSharedBusinessEntitiesContentSubmissionType, _callback);

    }

    /**
     * Add a Content Submission Type
     * No Documentation Found.
     * @param contentSubmissionSharedBusinessEntitiesContentSubmissionType The Content Submission Type (required)
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public Integer contentSubmissionTypesPostContentSubmissionType(ContentSubmissionSharedBusinessEntitiesContentSubmissionType contentSubmissionSharedBusinessEntitiesContentSubmissionType) throws ApiException {
        ApiResponse<Integer> localVarResp = contentSubmissionTypesPostContentSubmissionTypeWithHttpInfo(contentSubmissionSharedBusinessEntitiesContentSubmissionType);
        return localVarResp.getData();
    }

    /**
     * Add a Content Submission Type
     * No Documentation Found.
     * @param contentSubmissionSharedBusinessEntitiesContentSubmissionType The Content Submission Type (required)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Integer> contentSubmissionTypesPostContentSubmissionTypeWithHttpInfo(ContentSubmissionSharedBusinessEntitiesContentSubmissionType contentSubmissionSharedBusinessEntitiesContentSubmissionType) throws ApiException {
        okhttp3.Call localVarCall = contentSubmissionTypesPostContentSubmissionTypeValidateBeforeCall(contentSubmissionSharedBusinessEntitiesContentSubmissionType, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a Content Submission Type (asynchronously)
     * No Documentation Found.
     * @param contentSubmissionSharedBusinessEntitiesContentSubmissionType The Content Submission Type (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentSubmissionTypesPostContentSubmissionTypeAsync(ContentSubmissionSharedBusinessEntitiesContentSubmissionType contentSubmissionSharedBusinessEntitiesContentSubmissionType, final ApiCallback<Integer> _callback) throws ApiException {

        okhttp3.Call localVarCall = contentSubmissionTypesPostContentSubmissionTypeValidateBeforeCall(contentSubmissionSharedBusinessEntitiesContentSubmissionType, _callback);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contentSubmissionTypesPutContentSubmissionType
     * @param id The ID of the Content Submission Type (required)
     * @param contentSubmissionSharedBusinessEntitiesContentSubmissionType The Content Submission Type (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentSubmissionTypesPutContentSubmissionTypeCall(Integer id, ContentSubmissionSharedBusinessEntitiesContentSubmissionType contentSubmissionSharedBusinessEntitiesContentSubmissionType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contentSubmissionSharedBusinessEntitiesContentSubmissionType;

        // create path and map variables
        String localVarPath = "/api/v2/ContentSubmissionTypes/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contentSubmissionTypesPutContentSubmissionTypeValidateBeforeCall(Integer id, ContentSubmissionSharedBusinessEntitiesContentSubmissionType contentSubmissionSharedBusinessEntitiesContentSubmissionType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling contentSubmissionTypesPutContentSubmissionType(Async)");
        }

        // verify the required parameter 'contentSubmissionSharedBusinessEntitiesContentSubmissionType' is set
        if (contentSubmissionSharedBusinessEntitiesContentSubmissionType == null) {
            throw new ApiException("Missing the required parameter 'contentSubmissionSharedBusinessEntitiesContentSubmissionType' when calling contentSubmissionTypesPutContentSubmissionType(Async)");
        }

        return contentSubmissionTypesPutContentSubmissionTypeCall(id, contentSubmissionSharedBusinessEntitiesContentSubmissionType, _callback);

    }

    /**
     * Update a Content Submission Type
     * No Documentation Found.
     * @param id The ID of the Content Submission Type (required)
     * @param contentSubmissionSharedBusinessEntitiesContentSubmissionType The Content Submission Type (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public void contentSubmissionTypesPutContentSubmissionType(Integer id, ContentSubmissionSharedBusinessEntitiesContentSubmissionType contentSubmissionSharedBusinessEntitiesContentSubmissionType) throws ApiException {
        contentSubmissionTypesPutContentSubmissionTypeWithHttpInfo(id, contentSubmissionSharedBusinessEntitiesContentSubmissionType);
    }

    /**
     * Update a Content Submission Type
     * No Documentation Found.
     * @param id The ID of the Content Submission Type (required)
     * @param contentSubmissionSharedBusinessEntitiesContentSubmissionType The Content Submission Type (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> contentSubmissionTypesPutContentSubmissionTypeWithHttpInfo(Integer id, ContentSubmissionSharedBusinessEntitiesContentSubmissionType contentSubmissionSharedBusinessEntitiesContentSubmissionType) throws ApiException {
        okhttp3.Call localVarCall = contentSubmissionTypesPutContentSubmissionTypeValidateBeforeCall(id, contentSubmissionSharedBusinessEntitiesContentSubmissionType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update a Content Submission Type (asynchronously)
     * No Documentation Found.
     * @param id The ID of the Content Submission Type (required)
     * @param contentSubmissionSharedBusinessEntitiesContentSubmissionType The Content Submission Type (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentSubmissionTypesPutContentSubmissionTypeAsync(Integer id, ContentSubmissionSharedBusinessEntitiesContentSubmissionType contentSubmissionSharedBusinessEntitiesContentSubmissionType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = contentSubmissionTypesPutContentSubmissionTypeValidateBeforeCall(id, contentSubmissionSharedBusinessEntitiesContentSubmissionType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
