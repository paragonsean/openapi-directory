/*
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.APIModelsApiError;
import org.openapitools.client.model.APIModelsRoleUserChange;
import org.openapitools.client.model.APIModelsUserRoleChange;
import org.openapitools.client.model.APIPagedResponseAPIModelsRole;
import org.openapitools.client.model.APIPagedResponseAPIModelsUser;
import org.openapitools.client.model.APIPagedResponseAPIModelsUserEffectivePermission;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UserPermissionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UserPermissionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UserPermissionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiV2RolesIdUsersPut
     * @param id The Role&#39;s ID (required)
     * @param apIModelsRoleUserChange A list of changes to the Role&#39;s Users (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2RolesIdUsersPutCall(Integer id, List<APIModelsRoleUserChange> apIModelsRoleUserChange, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apIModelsRoleUserChange;

        // create path and map variables
        String localVarPath = "/api/v2/Roles/{id}/Users"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2RolesIdUsersPutValidateBeforeCall(Integer id, List<APIModelsRoleUserChange> apIModelsRoleUserChange, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV2RolesIdUsersPut(Async)");
        }

        // verify the required parameter 'apIModelsRoleUserChange' is set
        if (apIModelsRoleUserChange == null) {
            throw new ApiException("Missing the required parameter 'apIModelsRoleUserChange' when calling apiV2RolesIdUsersPut(Async)");
        }

        return apiV2RolesIdUsersPutCall(id, apIModelsRoleUserChange, _callback);

    }

    /**
     * Update a Role&#39;s users
     * No Documentation Found.
     * @param id The Role&#39;s ID (required)
     * @param apIModelsRoleUserChange A list of changes to the Role&#39;s Users (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public void apiV2RolesIdUsersPut(Integer id, List<APIModelsRoleUserChange> apIModelsRoleUserChange) throws ApiException {
        apiV2RolesIdUsersPutWithHttpInfo(id, apIModelsRoleUserChange);
    }

    /**
     * Update a Role&#39;s users
     * No Documentation Found.
     * @param id The Role&#39;s ID (required)
     * @param apIModelsRoleUserChange A list of changes to the Role&#39;s Users (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiV2RolesIdUsersPutWithHttpInfo(Integer id, List<APIModelsRoleUserChange> apIModelsRoleUserChange) throws ApiException {
        okhttp3.Call localVarCall = apiV2RolesIdUsersPutValidateBeforeCall(id, apIModelsRoleUserChange, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update a Role&#39;s users (asynchronously)
     * No Documentation Found.
     * @param id The Role&#39;s ID (required)
     * @param apIModelsRoleUserChange A list of changes to the Role&#39;s Users (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2RolesIdUsersPutAsync(Integer id, List<APIModelsRoleUserChange> apIModelsRoleUserChange, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2RolesIdUsersPutValidateBeforeCall(id, apIModelsRoleUserChange, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2UsersCurrentPermissionsGet
     * @param permission Filter by permission name. Supports ending wildcard (*). Optional. (optional)
     * @param limit The page limit. The default page limit is 10. (optional)
     * @param offset The page offset. The default page offset is 0. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2UsersCurrentPermissionsGetCall(String permission, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/Users/Current/Permissions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (permission != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Permission", permission));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2UsersCurrentPermissionsGetValidateBeforeCall(String permission, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return apiV2UsersCurrentPermissionsGetCall(permission, limit, offset, _callback);

    }

    /**
     * Get a user&#39;s permissions
     * No Documentation Found.
     * @param permission Filter by permission name. Supports ending wildcard (*). Optional. (optional)
     * @param limit The page limit. The default page limit is 10. (optional)
     * @param offset The page offset. The default page offset is 0. (optional)
     * @return APIPagedResponseAPIModelsUserEffectivePermission
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public APIPagedResponseAPIModelsUserEffectivePermission apiV2UsersCurrentPermissionsGet(String permission, Integer limit, Integer offset) throws ApiException {
        ApiResponse<APIPagedResponseAPIModelsUserEffectivePermission> localVarResp = apiV2UsersCurrentPermissionsGetWithHttpInfo(permission, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Get a user&#39;s permissions
     * No Documentation Found.
     * @param permission Filter by permission name. Supports ending wildcard (*). Optional. (optional)
     * @param limit The page limit. The default page limit is 10. (optional)
     * @param offset The page offset. The default page offset is 0. (optional)
     * @return ApiResponse&lt;APIPagedResponseAPIModelsUserEffectivePermission&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<APIPagedResponseAPIModelsUserEffectivePermission> apiV2UsersCurrentPermissionsGetWithHttpInfo(String permission, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = apiV2UsersCurrentPermissionsGetValidateBeforeCall(permission, limit, offset, null);
        Type localVarReturnType = new TypeToken<APIPagedResponseAPIModelsUserEffectivePermission>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a user&#39;s permissions (asynchronously)
     * No Documentation Found.
     * @param permission Filter by permission name. Supports ending wildcard (*). Optional. (optional)
     * @param limit The page limit. The default page limit is 10. (optional)
     * @param offset The page offset. The default page offset is 0. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2UsersCurrentPermissionsGetAsync(String permission, Integer limit, Integer offset, final ApiCallback<APIPagedResponseAPIModelsUserEffectivePermission> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2UsersCurrentPermissionsGetValidateBeforeCall(permission, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<APIPagedResponseAPIModelsUserEffectivePermission>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userPermissionsGetCurrentUserRoles
     * @param role Filter by role name. Supports ending wildcard (*). Optional. (optional)
     * @param limit The page limit. The default page limit is 10. (optional)
     * @param offset The page offset. The default page offset is 0. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userPermissionsGetCurrentUserRolesCall(String role, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/Users/Current/Roles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (role != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Role", role));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userPermissionsGetCurrentUserRolesValidateBeforeCall(String role, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return userPermissionsGetCurrentUserRolesCall(role, limit, offset, _callback);

    }

    /**
     * Gets the current user&#39;s roles
     * No Documentation Found.
     * @param role Filter by role name. Supports ending wildcard (*). Optional. (optional)
     * @param limit The page limit. The default page limit is 10. (optional)
     * @param offset The page offset. The default page offset is 0. (optional)
     * @return APIPagedResponseAPIModelsRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public APIPagedResponseAPIModelsRole userPermissionsGetCurrentUserRoles(String role, Integer limit, Integer offset) throws ApiException {
        ApiResponse<APIPagedResponseAPIModelsRole> localVarResp = userPermissionsGetCurrentUserRolesWithHttpInfo(role, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Gets the current user&#39;s roles
     * No Documentation Found.
     * @param role Filter by role name. Supports ending wildcard (*). Optional. (optional)
     * @param limit The page limit. The default page limit is 10. (optional)
     * @param offset The page offset. The default page offset is 0. (optional)
     * @return ApiResponse&lt;APIPagedResponseAPIModelsRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<APIPagedResponseAPIModelsRole> userPermissionsGetCurrentUserRolesWithHttpInfo(String role, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = userPermissionsGetCurrentUserRolesValidateBeforeCall(role, limit, offset, null);
        Type localVarReturnType = new TypeToken<APIPagedResponseAPIModelsRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the current user&#39;s roles (asynchronously)
     * No Documentation Found.
     * @param role Filter by role name. Supports ending wildcard (*). Optional. (optional)
     * @param limit The page limit. The default page limit is 10. (optional)
     * @param offset The page offset. The default page offset is 0. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userPermissionsGetCurrentUserRolesAsync(String role, Integer limit, Integer offset, final ApiCallback<APIPagedResponseAPIModelsRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = userPermissionsGetCurrentUserRolesValidateBeforeCall(role, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<APIPagedResponseAPIModelsRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userPermissionsGetPermissions
     * @param id The User&#39;s ID (required)
     * @param permission Filter by permission name. Supports ending wildcard (*). Optional. (optional)
     * @param limit The page limit. The default page limit is 10. (optional)
     * @param offset The page offset. The default page offset is 0. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userPermissionsGetPermissionsCall(Integer id, String permission, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/Users/{id}/Permissions"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (permission != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Permission", permission));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userPermissionsGetPermissionsValidateBeforeCall(Integer id, String permission, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling userPermissionsGetPermissions(Async)");
        }

        return userPermissionsGetPermissionsCall(id, permission, limit, offset, _callback);

    }

    /**
     * Get a user&#39;s permissions
     * No Documentation Found.
     * @param id The User&#39;s ID (required)
     * @param permission Filter by permission name. Supports ending wildcard (*). Optional. (optional)
     * @param limit The page limit. The default page limit is 10. (optional)
     * @param offset The page offset. The default page offset is 0. (optional)
     * @return APIPagedResponseAPIModelsUserEffectivePermission
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public APIPagedResponseAPIModelsUserEffectivePermission userPermissionsGetPermissions(Integer id, String permission, Integer limit, Integer offset) throws ApiException {
        ApiResponse<APIPagedResponseAPIModelsUserEffectivePermission> localVarResp = userPermissionsGetPermissionsWithHttpInfo(id, permission, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Get a user&#39;s permissions
     * No Documentation Found.
     * @param id The User&#39;s ID (required)
     * @param permission Filter by permission name. Supports ending wildcard (*). Optional. (optional)
     * @param limit The page limit. The default page limit is 10. (optional)
     * @param offset The page offset. The default page offset is 0. (optional)
     * @return ApiResponse&lt;APIPagedResponseAPIModelsUserEffectivePermission&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<APIPagedResponseAPIModelsUserEffectivePermission> userPermissionsGetPermissionsWithHttpInfo(Integer id, String permission, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = userPermissionsGetPermissionsValidateBeforeCall(id, permission, limit, offset, null);
        Type localVarReturnType = new TypeToken<APIPagedResponseAPIModelsUserEffectivePermission>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a user&#39;s permissions (asynchronously)
     * No Documentation Found.
     * @param id The User&#39;s ID (required)
     * @param permission Filter by permission name. Supports ending wildcard (*). Optional. (optional)
     * @param limit The page limit. The default page limit is 10. (optional)
     * @param offset The page offset. The default page offset is 0. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userPermissionsGetPermissionsAsync(Integer id, String permission, Integer limit, Integer offset, final ApiCallback<APIPagedResponseAPIModelsUserEffectivePermission> _callback) throws ApiException {

        okhttp3.Call localVarCall = userPermissionsGetPermissionsValidateBeforeCall(id, permission, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<APIPagedResponseAPIModelsUserEffectivePermission>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userPermissionsGetRoles
     * @param id The User&#39;s ID (required)
     * @param role Filter by role name. Supports ending wildcard (*). Optional. (optional)
     * @param limit The page limit. The default page limit is 10. (optional)
     * @param offset The page offset. The default page offset is 0. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userPermissionsGetRolesCall(Integer id, String role, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/Users/{id}/Roles"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (role != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Role", role));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userPermissionsGetRolesValidateBeforeCall(Integer id, String role, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling userPermissionsGetRoles(Async)");
        }

        return userPermissionsGetRolesCall(id, role, limit, offset, _callback);

    }

    /**
     * Get a user&#39;s roles
     * No Documentation Found.
     * @param id The User&#39;s ID (required)
     * @param role Filter by role name. Supports ending wildcard (*). Optional. (optional)
     * @param limit The page limit. The default page limit is 10. (optional)
     * @param offset The page offset. The default page offset is 0. (optional)
     * @return APIPagedResponseAPIModelsRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public APIPagedResponseAPIModelsRole userPermissionsGetRoles(Integer id, String role, Integer limit, Integer offset) throws ApiException {
        ApiResponse<APIPagedResponseAPIModelsRole> localVarResp = userPermissionsGetRolesWithHttpInfo(id, role, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Get a user&#39;s roles
     * No Documentation Found.
     * @param id The User&#39;s ID (required)
     * @param role Filter by role name. Supports ending wildcard (*). Optional. (optional)
     * @param limit The page limit. The default page limit is 10. (optional)
     * @param offset The page offset. The default page offset is 0. (optional)
     * @return ApiResponse&lt;APIPagedResponseAPIModelsRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<APIPagedResponseAPIModelsRole> userPermissionsGetRolesWithHttpInfo(Integer id, String role, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = userPermissionsGetRolesValidateBeforeCall(id, role, limit, offset, null);
        Type localVarReturnType = new TypeToken<APIPagedResponseAPIModelsRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a user&#39;s roles (asynchronously)
     * No Documentation Found.
     * @param id The User&#39;s ID (required)
     * @param role Filter by role name. Supports ending wildcard (*). Optional. (optional)
     * @param limit The page limit. The default page limit is 10. (optional)
     * @param offset The page offset. The default page offset is 0. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userPermissionsGetRolesAsync(Integer id, String role, Integer limit, Integer offset, final ApiCallback<APIPagedResponseAPIModelsRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = userPermissionsGetRolesValidateBeforeCall(id, role, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<APIPagedResponseAPIModelsRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userPermissionsGetUsers
     * @param id The Role&#39;s ID (required)
     * @param limit The page limit. The default page limit is 10. (optional)
     * @param offset The page offset. The default page offset is 0. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userPermissionsGetUsersCall(Integer id, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/Roles/{id}/Users"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userPermissionsGetUsersValidateBeforeCall(Integer id, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling userPermissionsGetUsers(Async)");
        }

        return userPermissionsGetUsersCall(id, limit, offset, _callback);

    }

    /**
     * Get all user&#39;s in a role
     * No Documentation Found.
     * @param id The Role&#39;s ID (required)
     * @param limit The page limit. The default page limit is 10. (optional)
     * @param offset The page offset. The default page offset is 0. (optional)
     * @return APIPagedResponseAPIModelsUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public APIPagedResponseAPIModelsUser userPermissionsGetUsers(Integer id, Integer limit, Integer offset) throws ApiException {
        ApiResponse<APIPagedResponseAPIModelsUser> localVarResp = userPermissionsGetUsersWithHttpInfo(id, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Get all user&#39;s in a role
     * No Documentation Found.
     * @param id The Role&#39;s ID (required)
     * @param limit The page limit. The default page limit is 10. (optional)
     * @param offset The page offset. The default page offset is 0. (optional)
     * @return ApiResponse&lt;APIPagedResponseAPIModelsUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<APIPagedResponseAPIModelsUser> userPermissionsGetUsersWithHttpInfo(Integer id, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = userPermissionsGetUsersValidateBeforeCall(id, limit, offset, null);
        Type localVarReturnType = new TypeToken<APIPagedResponseAPIModelsUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all user&#39;s in a role (asynchronously)
     * No Documentation Found.
     * @param id The Role&#39;s ID (required)
     * @param limit The page limit. The default page limit is 10. (optional)
     * @param offset The page offset. The default page offset is 0. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userPermissionsGetUsersAsync(Integer id, Integer limit, Integer offset, final ApiCallback<APIPagedResponseAPIModelsUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = userPermissionsGetUsersValidateBeforeCall(id, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<APIPagedResponseAPIModelsUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userPermissionsPut
     * @param id The User&#39;s ID (required)
     * @param apIModelsUserRoleChange A list of changes to the User&#39;s Roles (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userPermissionsPutCall(Integer id, List<APIModelsUserRoleChange> apIModelsUserRoleChange, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apIModelsUserRoleChange;

        // create path and map variables
        String localVarPath = "/api/v2/Users/{id}/Roles"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userPermissionsPutValidateBeforeCall(Integer id, List<APIModelsUserRoleChange> apIModelsUserRoleChange, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling userPermissionsPut(Async)");
        }

        // verify the required parameter 'apIModelsUserRoleChange' is set
        if (apIModelsUserRoleChange == null) {
            throw new ApiException("Missing the required parameter 'apIModelsUserRoleChange' when calling userPermissionsPut(Async)");
        }

        return userPermissionsPutCall(id, apIModelsUserRoleChange, _callback);

    }

    /**
     * Update a user&#39;s roles
     * No Documentation Found.
     * @param id The User&#39;s ID (required)
     * @param apIModelsUserRoleChange A list of changes to the User&#39;s Roles (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public void userPermissionsPut(Integer id, List<APIModelsUserRoleChange> apIModelsUserRoleChange) throws ApiException {
        userPermissionsPutWithHttpInfo(id, apIModelsUserRoleChange);
    }

    /**
     * Update a user&#39;s roles
     * No Documentation Found.
     * @param id The User&#39;s ID (required)
     * @param apIModelsUserRoleChange A list of changes to the User&#39;s Roles (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> userPermissionsPutWithHttpInfo(Integer id, List<APIModelsUserRoleChange> apIModelsUserRoleChange) throws ApiException {
        okhttp3.Call localVarCall = userPermissionsPutValidateBeforeCall(id, apIModelsUserRoleChange, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update a user&#39;s roles (asynchronously)
     * No Documentation Found.
     * @param id The User&#39;s ID (required)
     * @param apIModelsUserRoleChange A list of changes to the User&#39;s Roles (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userPermissionsPutAsync(Integer id, List<APIModelsUserRoleChange> apIModelsUserRoleChange, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = userPermissionsPutValidateBeforeCall(id, apIModelsUserRoleChange, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
