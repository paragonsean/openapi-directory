/*
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.APIModelsApiError;
import org.openapitools.client.model.APIPagedResponseBuildSystemSharedDTOAgent;
import org.openapitools.client.model.BuildSystemSharedDTOActivityRun;
import org.openapitools.client.model.BuildSystemSharedDTOAgent;
import org.openapitools.client.model.BuildSystemSharedDTOAgentStatus;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AgentsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AgentsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AgentsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for agentsDeleteAgent
     * @param agentID The id of the Agent to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call agentsDeleteAgentCall(Integer agentID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/agents/{agentID}"
            .replace("{" + "agentID" + "}", localVarApiClient.escapeString(agentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call agentsDeleteAgentValidateBeforeCall(Integer agentID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentID' is set
        if (agentID == null) {
            throw new ApiException("Missing the required parameter 'agentID' when calling agentsDeleteAgent(Async)");
        }

        return agentsDeleteAgentCall(agentID, _callback);

    }

    /**
     * Delete an Agent
     * Deletes an Agent. When successful, the response is empty.  If unsuccessful, an appropriate              ApiError is returned.
     * @param agentID The id of the Agent to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public void agentsDeleteAgent(Integer agentID) throws ApiException {
        agentsDeleteAgentWithHttpInfo(agentID);
    }

    /**
     * Delete an Agent
     * Deletes an Agent. When successful, the response is empty.  If unsuccessful, an appropriate              ApiError is returned.
     * @param agentID The id of the Agent to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> agentsDeleteAgentWithHttpInfo(Integer agentID) throws ApiException {
        okhttp3.Call localVarCall = agentsDeleteAgentValidateBeforeCall(agentID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an Agent (asynchronously)
     * Deletes an Agent. When successful, the response is empty.  If unsuccessful, an appropriate              ApiError is returned.
     * @param agentID The id of the Agent to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call agentsDeleteAgentAsync(Integer agentID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = agentsDeleteAgentValidateBeforeCall(agentID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for agentsGetAgentActivityRun
     * @param agentID The id of the Agent to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call agentsGetAgentActivityRunCall(Integer agentID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/agents/{agentID}/ActivityRun"
            .replace("{" + "agentID" + "}", localVarApiClient.escapeString(agentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call agentsGetAgentActivityRunValidateBeforeCall(Integer agentID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentID' is set
        if (agentID == null) {
            throw new ApiException("Missing the required parameter 'agentID' when calling agentsGetAgentActivityRun(Async)");
        }

        return agentsGetAgentActivityRunCall(agentID, _callback);

    }

    /**
     * Get an Agent&#39;s ActivityRun
     * Gets the activity run assigned to an agent.  When successful, the response is the ActivityRun              assigned to the Agent.  If unsuccessful, an appropriate ApiError is returned.
     * @param agentID The id of the Agent to get. (required)
     * @return BuildSystemSharedDTOActivityRun
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public BuildSystemSharedDTOActivityRun agentsGetAgentActivityRun(Integer agentID) throws ApiException {
        ApiResponse<BuildSystemSharedDTOActivityRun> localVarResp = agentsGetAgentActivityRunWithHttpInfo(agentID);
        return localVarResp.getData();
    }

    /**
     * Get an Agent&#39;s ActivityRun
     * Gets the activity run assigned to an agent.  When successful, the response is the ActivityRun              assigned to the Agent.  If unsuccessful, an appropriate ApiError is returned.
     * @param agentID The id of the Agent to get. (required)
     * @return ApiResponse&lt;BuildSystemSharedDTOActivityRun&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BuildSystemSharedDTOActivityRun> agentsGetAgentActivityRunWithHttpInfo(Integer agentID) throws ApiException {
        okhttp3.Call localVarCall = agentsGetAgentActivityRunValidateBeforeCall(agentID, null);
        Type localVarReturnType = new TypeToken<BuildSystemSharedDTOActivityRun>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an Agent&#39;s ActivityRun (asynchronously)
     * Gets the activity run assigned to an agent.  When successful, the response is the ActivityRun              assigned to the Agent.  If unsuccessful, an appropriate ApiError is returned.
     * @param agentID The id of the Agent to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call agentsGetAgentActivityRunAsync(Integer agentID, final ApiCallback<BuildSystemSharedDTOActivityRun> _callback) throws ApiException {

        okhttp3.Call localVarCall = agentsGetAgentActivityRunValidateBeforeCall(agentID, _callback);
        Type localVarReturnType = new TypeToken<BuildSystemSharedDTOActivityRun>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for agentsGetAgentAsync
     * @param agentID The id of the Agent to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call agentsGetAgentAsyncCall(Integer agentID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/agents/{agentID}"
            .replace("{" + "agentID" + "}", localVarApiClient.escapeString(agentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call agentsGetAgentAsyncValidateBeforeCall(Integer agentID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentID' is set
        if (agentID == null) {
            throw new ApiException("Missing the required parameter 'agentID' when calling agentsGetAgentAsync(Async)");
        }

        return agentsGetAgentAsyncCall(agentID, _callback);

    }

    /**
     * Get Agent
     * Gets an Agent by ID. When successful, the response is the requested Agent.  If unsuccessful,              an appropriate ApiError is returned.
     * @param agentID The id of the Agent to get. (required)
     * @return BuildSystemSharedDTOAgent
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public BuildSystemSharedDTOAgent agentsGetAgentAsync(Integer agentID) throws ApiException {
        ApiResponse<BuildSystemSharedDTOAgent> localVarResp = agentsGetAgentAsyncWithHttpInfo(agentID);
        return localVarResp.getData();
    }

    /**
     * Get Agent
     * Gets an Agent by ID. When successful, the response is the requested Agent.  If unsuccessful,              an appropriate ApiError is returned.
     * @param agentID The id of the Agent to get. (required)
     * @return ApiResponse&lt;BuildSystemSharedDTOAgent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BuildSystemSharedDTOAgent> agentsGetAgentAsyncWithHttpInfo(Integer agentID) throws ApiException {
        okhttp3.Call localVarCall = agentsGetAgentAsyncValidateBeforeCall(agentID, null);
        Type localVarReturnType = new TypeToken<BuildSystemSharedDTOAgent>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Agent (asynchronously)
     * Gets an Agent by ID. When successful, the response is the requested Agent.  If unsuccessful,              an appropriate ApiError is returned.
     * @param agentID The id of the Agent to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call agentsGetAgentAsyncAsync(Integer agentID, final ApiCallback<BuildSystemSharedDTOAgent> _callback) throws ApiException {

        okhttp3.Call localVarCall = agentsGetAgentAsyncValidateBeforeCall(agentID, _callback);
        Type localVarReturnType = new TypeToken<BuildSystemSharedDTOAgent>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for agentsGetAgents
     * @param limit Optional. The page limit.  If not specified, the default page limit is 10. (optional)
     * @param offset Optional. The page offset.  If not specified, the default page offset is 0. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call agentsGetAgentsCall(Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/agents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call agentsGetAgentsValidateBeforeCall(Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return agentsGetAgentsCall(limit, offset, _callback);

    }

    /**
     * Get Agents
     * Gets a collection of Agents. When successful, the response is a PagedResponse of Agents.                If unsuccessful, an appropriate ApiError is returned.
     * @param limit Optional. The page limit.  If not specified, the default page limit is 10. (optional)
     * @param offset Optional. The page offset.  If not specified, the default page offset is 0. (optional)
     * @return APIPagedResponseBuildSystemSharedDTOAgent
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public APIPagedResponseBuildSystemSharedDTOAgent agentsGetAgents(Integer limit, Integer offset) throws ApiException {
        ApiResponse<APIPagedResponseBuildSystemSharedDTOAgent> localVarResp = agentsGetAgentsWithHttpInfo(limit, offset);
        return localVarResp.getData();
    }

    /**
     * Get Agents
     * Gets a collection of Agents. When successful, the response is a PagedResponse of Agents.                If unsuccessful, an appropriate ApiError is returned.
     * @param limit Optional. The page limit.  If not specified, the default page limit is 10. (optional)
     * @param offset Optional. The page offset.  If not specified, the default page offset is 0. (optional)
     * @return ApiResponse&lt;APIPagedResponseBuildSystemSharedDTOAgent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<APIPagedResponseBuildSystemSharedDTOAgent> agentsGetAgentsWithHttpInfo(Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = agentsGetAgentsValidateBeforeCall(limit, offset, null);
        Type localVarReturnType = new TypeToken<APIPagedResponseBuildSystemSharedDTOAgent>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Agents (asynchronously)
     * Gets a collection of Agents. When successful, the response is a PagedResponse of Agents.                If unsuccessful, an appropriate ApiError is returned.
     * @param limit Optional. The page limit.  If not specified, the default page limit is 10. (optional)
     * @param offset Optional. The page offset.  If not specified, the default page offset is 0. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call agentsGetAgentsAsync(Integer limit, Integer offset, final ApiCallback<APIPagedResponseBuildSystemSharedDTOAgent> _callback) throws ApiException {

        okhttp3.Call localVarCall = agentsGetAgentsValidateBeforeCall(limit, offset, _callback);
        Type localVarReturnType = new TypeToken<APIPagedResponseBuildSystemSharedDTOAgent>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for agentsGetCurrentAgentActivityRun
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call agentsGetCurrentAgentActivityRunCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/agents/Current/ActivityRun";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call agentsGetCurrentAgentActivityRunValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return agentsGetCurrentAgentActivityRunCall(_callback);

    }

    /**
     * Get the ActivityRun of Agent associated with the current user
     * Gets the activity run assigned to an agent.  When successful, the response is the ActivityRun              assigned to the Agent.  If unsuccessful, an appropriate ApiError is returned.
     * @return BuildSystemSharedDTOActivityRun
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public BuildSystemSharedDTOActivityRun agentsGetCurrentAgentActivityRun() throws ApiException {
        ApiResponse<BuildSystemSharedDTOActivityRun> localVarResp = agentsGetCurrentAgentActivityRunWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get the ActivityRun of Agent associated with the current user
     * Gets the activity run assigned to an agent.  When successful, the response is the ActivityRun              assigned to the Agent.  If unsuccessful, an appropriate ApiError is returned.
     * @return ApiResponse&lt;BuildSystemSharedDTOActivityRun&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BuildSystemSharedDTOActivityRun> agentsGetCurrentAgentActivityRunWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = agentsGetCurrentAgentActivityRunValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<BuildSystemSharedDTOActivityRun>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the ActivityRun of Agent associated with the current user (asynchronously)
     * Gets the activity run assigned to an agent.  When successful, the response is the ActivityRun              assigned to the Agent.  If unsuccessful, an appropriate ApiError is returned.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call agentsGetCurrentAgentActivityRunAsync(final ApiCallback<BuildSystemSharedDTOActivityRun> _callback) throws ApiException {

        okhttp3.Call localVarCall = agentsGetCurrentAgentActivityRunValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<BuildSystemSharedDTOActivityRun>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for agentsGetCurrentAgentAsync
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call agentsGetCurrentAgentAsyncCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/agents/Current";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call agentsGetCurrentAgentAsyncValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return agentsGetCurrentAgentAsyncCall(_callback);

    }

    /**
     * Get Agent associated with the current user
     * Gets the Agent associated with the current user. When successful, the response is the requested Agent.  If unsuccessful,              an appropriate ApiError is returned.
     * @return BuildSystemSharedDTOAgent
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public BuildSystemSharedDTOAgent agentsGetCurrentAgentAsync() throws ApiException {
        ApiResponse<BuildSystemSharedDTOAgent> localVarResp = agentsGetCurrentAgentAsyncWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get Agent associated with the current user
     * Gets the Agent associated with the current user. When successful, the response is the requested Agent.  If unsuccessful,              an appropriate ApiError is returned.
     * @return ApiResponse&lt;BuildSystemSharedDTOAgent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BuildSystemSharedDTOAgent> agentsGetCurrentAgentAsyncWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = agentsGetCurrentAgentAsyncValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<BuildSystemSharedDTOAgent>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Agent associated with the current user (asynchronously)
     * Gets the Agent associated with the current user. When successful, the response is the requested Agent.  If unsuccessful,              an appropriate ApiError is returned.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call agentsGetCurrentAgentAsyncAsync(final ApiCallback<BuildSystemSharedDTOAgent> _callback) throws ApiException {

        okhttp3.Call localVarCall = agentsGetCurrentAgentAsyncValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<BuildSystemSharedDTOAgent>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for agentsPostAgent
     * @param buildSystemSharedDTOAgent The Agent to create.  The AgentID will be assigned on creation of the Agent. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call agentsPostAgentCall(BuildSystemSharedDTOAgent buildSystemSharedDTOAgent, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = buildSystemSharedDTOAgent;

        // create path and map variables
        String localVarPath = "/api/v2/agents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call agentsPostAgentValidateBeforeCall(BuildSystemSharedDTOAgent buildSystemSharedDTOAgent, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'buildSystemSharedDTOAgent' is set
        if (buildSystemSharedDTOAgent == null) {
            throw new ApiException("Missing the required parameter 'buildSystemSharedDTOAgent' when calling agentsPostAgent(Async)");
        }

        return agentsPostAgentCall(buildSystemSharedDTOAgent, _callback);

    }

    /**
     * Create an Agent
     * Creates an Agent.  The body of the POST is the Agent to create.  The AgentID will be assigned              on creation of the Agent.  When successful, the response is the AgentID.  If unsuccessful, an              appropriate ApiError is returned.
     * @param buildSystemSharedDTOAgent The Agent to create.  The AgentID will be assigned on creation of the Agent. (required)
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public Integer agentsPostAgent(BuildSystemSharedDTOAgent buildSystemSharedDTOAgent) throws ApiException {
        ApiResponse<Integer> localVarResp = agentsPostAgentWithHttpInfo(buildSystemSharedDTOAgent);
        return localVarResp.getData();
    }

    /**
     * Create an Agent
     * Creates an Agent.  The body of the POST is the Agent to create.  The AgentID will be assigned              on creation of the Agent.  When successful, the response is the AgentID.  If unsuccessful, an              appropriate ApiError is returned.
     * @param buildSystemSharedDTOAgent The Agent to create.  The AgentID will be assigned on creation of the Agent. (required)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Integer> agentsPostAgentWithHttpInfo(BuildSystemSharedDTOAgent buildSystemSharedDTOAgent) throws ApiException {
        okhttp3.Call localVarCall = agentsPostAgentValidateBeforeCall(buildSystemSharedDTOAgent, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an Agent (asynchronously)
     * Creates an Agent.  The body of the POST is the Agent to create.  The AgentID will be assigned              on creation of the Agent.  When successful, the response is the AgentID.  If unsuccessful, an              appropriate ApiError is returned.
     * @param buildSystemSharedDTOAgent The Agent to create.  The AgentID will be assigned on creation of the Agent. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call agentsPostAgentAsync(BuildSystemSharedDTOAgent buildSystemSharedDTOAgent, final ApiCallback<Integer> _callback) throws ApiException {

        okhttp3.Call localVarCall = agentsPostAgentValidateBeforeCall(buildSystemSharedDTOAgent, _callback);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for agentsPutAgent
     * @param agentID The id of the Agent to update. (required)
     * @param buildSystemSharedDTOAgent The updated Agent (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call agentsPutAgentCall(Integer agentID, BuildSystemSharedDTOAgent buildSystemSharedDTOAgent, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = buildSystemSharedDTOAgent;

        // create path and map variables
        String localVarPath = "/api/v2/agents/{agentID}"
            .replace("{" + "agentID" + "}", localVarApiClient.escapeString(agentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call agentsPutAgentValidateBeforeCall(Integer agentID, BuildSystemSharedDTOAgent buildSystemSharedDTOAgent, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentID' is set
        if (agentID == null) {
            throw new ApiException("Missing the required parameter 'agentID' when calling agentsPutAgent(Async)");
        }

        // verify the required parameter 'buildSystemSharedDTOAgent' is set
        if (buildSystemSharedDTOAgent == null) {
            throw new ApiException("Missing the required parameter 'buildSystemSharedDTOAgent' when calling agentsPutAgent(Async)");
        }

        return agentsPutAgentCall(agentID, buildSystemSharedDTOAgent, _callback);

    }

    /**
     * Update an Agent
     * Updates an Agent.  The body of the PUT is the updated Agent.  When successful, the response is empty.              If unsuccessful, an appropriate ApiError is returned.
     * @param agentID The id of the Agent to update. (required)
     * @param buildSystemSharedDTOAgent The updated Agent (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public void agentsPutAgent(Integer agentID, BuildSystemSharedDTOAgent buildSystemSharedDTOAgent) throws ApiException {
        agentsPutAgentWithHttpInfo(agentID, buildSystemSharedDTOAgent);
    }

    /**
     * Update an Agent
     * Updates an Agent.  The body of the PUT is the updated Agent.  When successful, the response is empty.              If unsuccessful, an appropriate ApiError is returned.
     * @param agentID The id of the Agent to update. (required)
     * @param buildSystemSharedDTOAgent The updated Agent (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> agentsPutAgentWithHttpInfo(Integer agentID, BuildSystemSharedDTOAgent buildSystemSharedDTOAgent) throws ApiException {
        okhttp3.Call localVarCall = agentsPutAgentValidateBeforeCall(agentID, buildSystemSharedDTOAgent, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update an Agent (asynchronously)
     * Updates an Agent.  The body of the PUT is the updated Agent.  When successful, the response is empty.              If unsuccessful, an appropriate ApiError is returned.
     * @param agentID The id of the Agent to update. (required)
     * @param buildSystemSharedDTOAgent The updated Agent (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call agentsPutAgentAsync(Integer agentID, BuildSystemSharedDTOAgent buildSystemSharedDTOAgent, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = agentsPutAgentValidateBeforeCall(agentID, buildSystemSharedDTOAgent, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for agentsPutAgentActivityRun
     * @param agentID The id of the Agent to update. (required)
     * @param buildSystemSharedDTOActivityRun The ActivityRun assigned to the agent.  Only the ActivityRunID is used. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call agentsPutAgentActivityRunCall(Integer agentID, BuildSystemSharedDTOActivityRun buildSystemSharedDTOActivityRun, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = buildSystemSharedDTOActivityRun;

        // create path and map variables
        String localVarPath = "/api/v2/agents/{agentID}/ActivityRun"
            .replace("{" + "agentID" + "}", localVarApiClient.escapeString(agentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call agentsPutAgentActivityRunValidateBeforeCall(Integer agentID, BuildSystemSharedDTOActivityRun buildSystemSharedDTOActivityRun, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentID' is set
        if (agentID == null) {
            throw new ApiException("Missing the required parameter 'agentID' when calling agentsPutAgentActivityRun(Async)");
        }

        // verify the required parameter 'buildSystemSharedDTOActivityRun' is set
        if (buildSystemSharedDTOActivityRun == null) {
            throw new ApiException("Missing the required parameter 'buildSystemSharedDTOActivityRun' when calling agentsPutAgentActivityRun(Async)");
        }

        return agentsPutAgentActivityRunCall(agentID, buildSystemSharedDTOActivityRun, _callback);

    }

    /**
     * Update the ActivityRun assigned to the Agent.
     * No Documentation Found.
     * @param agentID The id of the Agent to update. (required)
     * @param buildSystemSharedDTOActivityRun The ActivityRun assigned to the agent.  Only the ActivityRunID is used. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public void agentsPutAgentActivityRun(Integer agentID, BuildSystemSharedDTOActivityRun buildSystemSharedDTOActivityRun) throws ApiException {
        agentsPutAgentActivityRunWithHttpInfo(agentID, buildSystemSharedDTOActivityRun);
    }

    /**
     * Update the ActivityRun assigned to the Agent.
     * No Documentation Found.
     * @param agentID The id of the Agent to update. (required)
     * @param buildSystemSharedDTOActivityRun The ActivityRun assigned to the agent.  Only the ActivityRunID is used. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> agentsPutAgentActivityRunWithHttpInfo(Integer agentID, BuildSystemSharedDTOActivityRun buildSystemSharedDTOActivityRun) throws ApiException {
        okhttp3.Call localVarCall = agentsPutAgentActivityRunValidateBeforeCall(agentID, buildSystemSharedDTOActivityRun, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update the ActivityRun assigned to the Agent. (asynchronously)
     * No Documentation Found.
     * @param agentID The id of the Agent to update. (required)
     * @param buildSystemSharedDTOActivityRun The ActivityRun assigned to the agent.  Only the ActivityRunID is used. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call agentsPutAgentActivityRunAsync(Integer agentID, BuildSystemSharedDTOActivityRun buildSystemSharedDTOActivityRun, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = agentsPutAgentActivityRunValidateBeforeCall(agentID, buildSystemSharedDTOActivityRun, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for agentsPutAgentStatus
     * @param agentID The id of the Agent to update. (required)
     * @param buildSystemSharedDTOAgentStatus The updated AgentStatus. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call agentsPutAgentStatusCall(Integer agentID, BuildSystemSharedDTOAgentStatus buildSystemSharedDTOAgentStatus, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = buildSystemSharedDTOAgentStatus;

        // create path and map variables
        String localVarPath = "/api/v2/agents/{agentID}/Status"
            .replace("{" + "agentID" + "}", localVarApiClient.escapeString(agentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call agentsPutAgentStatusValidateBeforeCall(Integer agentID, BuildSystemSharedDTOAgentStatus buildSystemSharedDTOAgentStatus, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentID' is set
        if (agentID == null) {
            throw new ApiException("Missing the required parameter 'agentID' when calling agentsPutAgentStatus(Async)");
        }

        // verify the required parameter 'buildSystemSharedDTOAgentStatus' is set
        if (buildSystemSharedDTOAgentStatus == null) {
            throw new ApiException("Missing the required parameter 'buildSystemSharedDTOAgentStatus' when calling agentsPutAgentStatus(Async)");
        }

        return agentsPutAgentStatusCall(agentID, buildSystemSharedDTOAgentStatus, _callback);

    }

    /**
     * Update an Agent
     * Updates the status of an Agent.The body of the PUT is the updated Agent status.  When successful,              the response is empty.If unsuccessful, an appropriate ApiError is returned.
     * @param agentID The id of the Agent to update. (required)
     * @param buildSystemSharedDTOAgentStatus The updated AgentStatus. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public void agentsPutAgentStatus(Integer agentID, BuildSystemSharedDTOAgentStatus buildSystemSharedDTOAgentStatus) throws ApiException {
        agentsPutAgentStatusWithHttpInfo(agentID, buildSystemSharedDTOAgentStatus);
    }

    /**
     * Update an Agent
     * Updates the status of an Agent.The body of the PUT is the updated Agent status.  When successful,              the response is empty.If unsuccessful, an appropriate ApiError is returned.
     * @param agentID The id of the Agent to update. (required)
     * @param buildSystemSharedDTOAgentStatus The updated AgentStatus. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> agentsPutAgentStatusWithHttpInfo(Integer agentID, BuildSystemSharedDTOAgentStatus buildSystemSharedDTOAgentStatus) throws ApiException {
        okhttp3.Call localVarCall = agentsPutAgentStatusValidateBeforeCall(agentID, buildSystemSharedDTOAgentStatus, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update an Agent (asynchronously)
     * Updates the status of an Agent.The body of the PUT is the updated Agent status.  When successful,              the response is empty.If unsuccessful, an appropriate ApiError is returned.
     * @param agentID The id of the Agent to update. (required)
     * @param buildSystemSharedDTOAgentStatus The updated AgentStatus. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call agentsPutAgentStatusAsync(Integer agentID, BuildSystemSharedDTOAgentStatus buildSystemSharedDTOAgentStatus, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = agentsPutAgentStatusValidateBeforeCall(agentID, buildSystemSharedDTOAgentStatus, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
