/*
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.APIModelsApiError;
import org.openapitools.client.model.APIPagedResponseBuildSystemSharedDTOActivityRun;
import org.openapitools.client.model.BuildSystemSharedDTOActivityRun;
import org.openapitools.client.model.BuildSystemSharedDTOActivityRunStatus;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ActivityRunsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ActivityRunsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ActivityRunsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for activityRunsGetActivityRun
     * @param activityRunID The ID of the ActivityRun to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activityRunsGetActivityRunCall(Integer activityRunID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/activityRuns/{activityRunID}"
            .replace("{" + "activityRunID" + "}", localVarApiClient.escapeString(activityRunID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activityRunsGetActivityRunValidateBeforeCall(Integer activityRunID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'activityRunID' is set
        if (activityRunID == null) {
            throw new ApiException("Missing the required parameter 'activityRunID' when calling activityRunsGetActivityRun(Async)");
        }

        return activityRunsGetActivityRunCall(activityRunID, _callback);

    }

    /**
     * Get an ActivityRun by ID
     * Gets an ActivityRun by ID. When successful, the response is the requested ActivityRun.  If unsuccessful,              an appropriate ApiError is returned.
     * @param activityRunID The ID of the ActivityRun to get. (required)
     * @return BuildSystemSharedDTOActivityRun
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public BuildSystemSharedDTOActivityRun activityRunsGetActivityRun(Integer activityRunID) throws ApiException {
        ApiResponse<BuildSystemSharedDTOActivityRun> localVarResp = activityRunsGetActivityRunWithHttpInfo(activityRunID);
        return localVarResp.getData();
    }

    /**
     * Get an ActivityRun by ID
     * Gets an ActivityRun by ID. When successful, the response is the requested ActivityRun.  If unsuccessful,              an appropriate ApiError is returned.
     * @param activityRunID The ID of the ActivityRun to get. (required)
     * @return ApiResponse&lt;BuildSystemSharedDTOActivityRun&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BuildSystemSharedDTOActivityRun> activityRunsGetActivityRunWithHttpInfo(Integer activityRunID) throws ApiException {
        okhttp3.Call localVarCall = activityRunsGetActivityRunValidateBeforeCall(activityRunID, null);
        Type localVarReturnType = new TypeToken<BuildSystemSharedDTOActivityRun>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an ActivityRun by ID (asynchronously)
     * Gets an ActivityRun by ID. When successful, the response is the requested ActivityRun.  If unsuccessful,              an appropriate ApiError is returned.
     * @param activityRunID The ID of the ActivityRun to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activityRunsGetActivityRunAsync(Integer activityRunID, final ApiCallback<BuildSystemSharedDTOActivityRun> _callback) throws ApiException {

        okhttp3.Call localVarCall = activityRunsGetActivityRunValidateBeforeCall(activityRunID, _callback);
        Type localVarReturnType = new TypeToken<BuildSystemSharedDTOActivityRun>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for activityRunsGetActivityRunStatus
     * @param activityRunID The ID of the ActivityRun to get ActivityRunStatus for. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activityRunsGetActivityRunStatusCall(Integer activityRunID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/activityRuns/{activityRunID}/status"
            .replace("{" + "activityRunID" + "}", localVarApiClient.escapeString(activityRunID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activityRunsGetActivityRunStatusValidateBeforeCall(Integer activityRunID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'activityRunID' is set
        if (activityRunID == null) {
            throw new ApiException("Missing the required parameter 'activityRunID' when calling activityRunsGetActivityRunStatus(Async)");
        }

        return activityRunsGetActivityRunStatusCall(activityRunID, _callback);

    }

    /**
     * Get the ActivityRunStatus of an ActivityRun
     * Gets the ActivityRunStatus of an ActivityRun.  When successful, the response is the requested ActivityRunStatus.              If unsuccessful, an appropriate ApiError is returned.
     * @param activityRunID The ID of the ActivityRun to get ActivityRunStatus for. (required)
     * @return BuildSystemSharedDTOActivityRunStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public BuildSystemSharedDTOActivityRunStatus activityRunsGetActivityRunStatus(Integer activityRunID) throws ApiException {
        ApiResponse<BuildSystemSharedDTOActivityRunStatus> localVarResp = activityRunsGetActivityRunStatusWithHttpInfo(activityRunID);
        return localVarResp.getData();
    }

    /**
     * Get the ActivityRunStatus of an ActivityRun
     * Gets the ActivityRunStatus of an ActivityRun.  When successful, the response is the requested ActivityRunStatus.              If unsuccessful, an appropriate ApiError is returned.
     * @param activityRunID The ID of the ActivityRun to get ActivityRunStatus for. (required)
     * @return ApiResponse&lt;BuildSystemSharedDTOActivityRunStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BuildSystemSharedDTOActivityRunStatus> activityRunsGetActivityRunStatusWithHttpInfo(Integer activityRunID) throws ApiException {
        okhttp3.Call localVarCall = activityRunsGetActivityRunStatusValidateBeforeCall(activityRunID, null);
        Type localVarReturnType = new TypeToken<BuildSystemSharedDTOActivityRunStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the ActivityRunStatus of an ActivityRun (asynchronously)
     * Gets the ActivityRunStatus of an ActivityRun.  When successful, the response is the requested ActivityRunStatus.              If unsuccessful, an appropriate ApiError is returned.
     * @param activityRunID The ID of the ActivityRun to get ActivityRunStatus for. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activityRunsGetActivityRunStatusAsync(Integer activityRunID, final ApiCallback<BuildSystemSharedDTOActivityRunStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = activityRunsGetActivityRunStatusValidateBeforeCall(activityRunID, _callback);
        Type localVarReturnType = new TypeToken<BuildSystemSharedDTOActivityRunStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for activityRunsGetActivityRuns
     * @param limit Optional. The page limit.  If not specified, the default page limit is 10. (optional)
     * @param offset Optional. The page offset.  If not specified, the default page offset is 0. (optional)
     * @param status Optional. Filter activity runs by status.  Value should be a comma separated list of status to include.              If not specified, the default status filter is “InProgress”. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activityRunsGetActivityRunsCall(Integer limit, Integer offset, String status, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/activityRuns";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activityRunsGetActivityRunsValidateBeforeCall(Integer limit, Integer offset, String status, final ApiCallback _callback) throws ApiException {
        return activityRunsGetActivityRunsCall(limit, offset, status, _callback);

    }

    /**
     * Get ActivityRuns
     * Gets a collection of ActivityRuns. When successful, the response is a PagedResponse of ActivityRuns.                If unsuccessful, an appropriate ApiError is returned.
     * @param limit Optional. The page limit.  If not specified, the default page limit is 10. (optional)
     * @param offset Optional. The page offset.  If not specified, the default page offset is 0. (optional)
     * @param status Optional. Filter activity runs by status.  Value should be a comma separated list of status to include.              If not specified, the default status filter is “InProgress”. (optional)
     * @return APIPagedResponseBuildSystemSharedDTOActivityRun
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public APIPagedResponseBuildSystemSharedDTOActivityRun activityRunsGetActivityRuns(Integer limit, Integer offset, String status) throws ApiException {
        ApiResponse<APIPagedResponseBuildSystemSharedDTOActivityRun> localVarResp = activityRunsGetActivityRunsWithHttpInfo(limit, offset, status);
        return localVarResp.getData();
    }

    /**
     * Get ActivityRuns
     * Gets a collection of ActivityRuns. When successful, the response is a PagedResponse of ActivityRuns.                If unsuccessful, an appropriate ApiError is returned.
     * @param limit Optional. The page limit.  If not specified, the default page limit is 10. (optional)
     * @param offset Optional. The page offset.  If not specified, the default page offset is 0. (optional)
     * @param status Optional. Filter activity runs by status.  Value should be a comma separated list of status to include.              If not specified, the default status filter is “InProgress”. (optional)
     * @return ApiResponse&lt;APIPagedResponseBuildSystemSharedDTOActivityRun&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<APIPagedResponseBuildSystemSharedDTOActivityRun> activityRunsGetActivityRunsWithHttpInfo(Integer limit, Integer offset, String status) throws ApiException {
        okhttp3.Call localVarCall = activityRunsGetActivityRunsValidateBeforeCall(limit, offset, status, null);
        Type localVarReturnType = new TypeToken<APIPagedResponseBuildSystemSharedDTOActivityRun>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get ActivityRuns (asynchronously)
     * Gets a collection of ActivityRuns. When successful, the response is a PagedResponse of ActivityRuns.                If unsuccessful, an appropriate ApiError is returned.
     * @param limit Optional. The page limit.  If not specified, the default page limit is 10. (optional)
     * @param offset Optional. The page offset.  If not specified, the default page offset is 0. (optional)
     * @param status Optional. Filter activity runs by status.  Value should be a comma separated list of status to include.              If not specified, the default status filter is “InProgress”. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activityRunsGetActivityRunsAsync(Integer limit, Integer offset, String status, final ApiCallback<APIPagedResponseBuildSystemSharedDTOActivityRun> _callback) throws ApiException {

        okhttp3.Call localVarCall = activityRunsGetActivityRunsValidateBeforeCall(limit, offset, status, _callback);
        Type localVarReturnType = new TypeToken<APIPagedResponseBuildSystemSharedDTOActivityRun>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for activityRunsPutActivityRun
     * @param activityRunID The ID of the ActivityRun to update ActivityRunStatus for. (required)
     * @param buildSystemSharedDTOActivityRun The updated ActivityRun. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activityRunsPutActivityRunCall(Integer activityRunID, BuildSystemSharedDTOActivityRun buildSystemSharedDTOActivityRun, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = buildSystemSharedDTOActivityRun;

        // create path and map variables
        String localVarPath = "/api/v2/activityRuns/{activityRunID}"
            .replace("{" + "activityRunID" + "}", localVarApiClient.escapeString(activityRunID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activityRunsPutActivityRunValidateBeforeCall(Integer activityRunID, BuildSystemSharedDTOActivityRun buildSystemSharedDTOActivityRun, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'activityRunID' is set
        if (activityRunID == null) {
            throw new ApiException("Missing the required parameter 'activityRunID' when calling activityRunsPutActivityRun(Async)");
        }

        // verify the required parameter 'buildSystemSharedDTOActivityRun' is set
        if (buildSystemSharedDTOActivityRun == null) {
            throw new ApiException("Missing the required parameter 'buildSystemSharedDTOActivityRun' when calling activityRunsPutActivityRun(Async)");
        }

        return activityRunsPutActivityRunCall(activityRunID, buildSystemSharedDTOActivityRun, _callback);

    }

    /**
     * Update an ActivityRun
     * Updates the ActivityRunStatus of an ActivityRun.  The body of the PUT is the updated ActivityRunStatus.              When successful, the response is empty.  If unsuccessful, an appropriate ApiError is returned.
     * @param activityRunID The ID of the ActivityRun to update ActivityRunStatus for. (required)
     * @param buildSystemSharedDTOActivityRun The updated ActivityRun. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public void activityRunsPutActivityRun(Integer activityRunID, BuildSystemSharedDTOActivityRun buildSystemSharedDTOActivityRun) throws ApiException {
        activityRunsPutActivityRunWithHttpInfo(activityRunID, buildSystemSharedDTOActivityRun);
    }

    /**
     * Update an ActivityRun
     * Updates the ActivityRunStatus of an ActivityRun.  The body of the PUT is the updated ActivityRunStatus.              When successful, the response is empty.  If unsuccessful, an appropriate ApiError is returned.
     * @param activityRunID The ID of the ActivityRun to update ActivityRunStatus for. (required)
     * @param buildSystemSharedDTOActivityRun The updated ActivityRun. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> activityRunsPutActivityRunWithHttpInfo(Integer activityRunID, BuildSystemSharedDTOActivityRun buildSystemSharedDTOActivityRun) throws ApiException {
        okhttp3.Call localVarCall = activityRunsPutActivityRunValidateBeforeCall(activityRunID, buildSystemSharedDTOActivityRun, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update an ActivityRun (asynchronously)
     * Updates the ActivityRunStatus of an ActivityRun.  The body of the PUT is the updated ActivityRunStatus.              When successful, the response is empty.  If unsuccessful, an appropriate ApiError is returned.
     * @param activityRunID The ID of the ActivityRun to update ActivityRunStatus for. (required)
     * @param buildSystemSharedDTOActivityRun The updated ActivityRun. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activityRunsPutActivityRunAsync(Integer activityRunID, BuildSystemSharedDTOActivityRun buildSystemSharedDTOActivityRun, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = activityRunsPutActivityRunValidateBeforeCall(activityRunID, buildSystemSharedDTOActivityRun, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for activityRunsPutActivityRunStatus
     * @param activityRunID The ID of the ActivityRun to update ActivityRunStatus for. (required)
     * @param buildSystemSharedDTOActivityRunStatus The updated ActivityRunStatus. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activityRunsPutActivityRunStatusCall(Integer activityRunID, BuildSystemSharedDTOActivityRunStatus buildSystemSharedDTOActivityRunStatus, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = buildSystemSharedDTOActivityRunStatus;

        // create path and map variables
        String localVarPath = "/api/v2/activityRuns/{activityRunID}/status"
            .replace("{" + "activityRunID" + "}", localVarApiClient.escapeString(activityRunID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activityRunsPutActivityRunStatusValidateBeforeCall(Integer activityRunID, BuildSystemSharedDTOActivityRunStatus buildSystemSharedDTOActivityRunStatus, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'activityRunID' is set
        if (activityRunID == null) {
            throw new ApiException("Missing the required parameter 'activityRunID' when calling activityRunsPutActivityRunStatus(Async)");
        }

        // verify the required parameter 'buildSystemSharedDTOActivityRunStatus' is set
        if (buildSystemSharedDTOActivityRunStatus == null) {
            throw new ApiException("Missing the required parameter 'buildSystemSharedDTOActivityRunStatus' when calling activityRunsPutActivityRunStatus(Async)");
        }

        return activityRunsPutActivityRunStatusCall(activityRunID, buildSystemSharedDTOActivityRunStatus, _callback);

    }

    /**
     * Update the ActivityRunStatus of an ActivityRun
     * Updates the ActivityRunStatus of an ActivityRun.  The body of the PUT is the updated ActivityRunStatus.              When successful, the response is empty.  If unsuccessful, an appropriate ApiError is returned.
     * @param activityRunID The ID of the ActivityRun to update ActivityRunStatus for. (required)
     * @param buildSystemSharedDTOActivityRunStatus The updated ActivityRunStatus. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public void activityRunsPutActivityRunStatus(Integer activityRunID, BuildSystemSharedDTOActivityRunStatus buildSystemSharedDTOActivityRunStatus) throws ApiException {
        activityRunsPutActivityRunStatusWithHttpInfo(activityRunID, buildSystemSharedDTOActivityRunStatus);
    }

    /**
     * Update the ActivityRunStatus of an ActivityRun
     * Updates the ActivityRunStatus of an ActivityRun.  The body of the PUT is the updated ActivityRunStatus.              When successful, the response is empty.  If unsuccessful, an appropriate ApiError is returned.
     * @param activityRunID The ID of the ActivityRun to update ActivityRunStatus for. (required)
     * @param buildSystemSharedDTOActivityRunStatus The updated ActivityRunStatus. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> activityRunsPutActivityRunStatusWithHttpInfo(Integer activityRunID, BuildSystemSharedDTOActivityRunStatus buildSystemSharedDTOActivityRunStatus) throws ApiException {
        okhttp3.Call localVarCall = activityRunsPutActivityRunStatusValidateBeforeCall(activityRunID, buildSystemSharedDTOActivityRunStatus, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update the ActivityRunStatus of an ActivityRun (asynchronously)
     * Updates the ActivityRunStatus of an ActivityRun.  The body of the PUT is the updated ActivityRunStatus.              When successful, the response is empty.  If unsuccessful, an appropriate ApiError is returned.
     * @param activityRunID The ID of the ActivityRun to update ActivityRunStatus for. (required)
     * @param buildSystemSharedDTOActivityRunStatus The updated ActivityRunStatus. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activityRunsPutActivityRunStatusAsync(Integer activityRunID, BuildSystemSharedDTOActivityRunStatus buildSystemSharedDTOActivityRunStatus, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = activityRunsPutActivityRunStatusValidateBeforeCall(activityRunID, buildSystemSharedDTOActivityRunStatus, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
