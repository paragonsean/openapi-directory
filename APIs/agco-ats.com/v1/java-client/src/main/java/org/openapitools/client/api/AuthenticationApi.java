/*
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.APIModelsAuthenticatedUser;
import org.openapitools.client.model.APIModelsCredentials;
import org.openapitools.client.model.APIModelsPasswordReset;
import org.openapitools.client.model.APIModelsPasswordResetRequest;
import org.openapitools.client.model.APIModelsTokenOptions;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AuthenticationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AuthenticationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AuthenticationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for authenticationDefault
     * @param apIModelsCredentials Create a user account. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authenticationDefaultCall(APIModelsCredentials apIModelsCredentials, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apIModelsCredentials;

        // create path and map variables
        String localVarPath = "/api/v2/Authentication";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authenticationDefaultValidateBeforeCall(APIModelsCredentials apIModelsCredentials, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apIModelsCredentials' is set
        if (apIModelsCredentials == null) {
            throw new ApiException("Missing the required parameter 'apIModelsCredentials' when calling authenticationDefault(Async)");
        }

        return authenticationDefaultCall(apIModelsCredentials, _callback);

    }

    /**
     * Authenticate a user.
     * No Documentation Found.
     * @param apIModelsCredentials Create a user account. (required)
     * @return APIModelsAuthenticatedUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIModelsAuthenticatedUser authenticationDefault(APIModelsCredentials apIModelsCredentials) throws ApiException {
        ApiResponse<APIModelsAuthenticatedUser> localVarResp = authenticationDefaultWithHttpInfo(apIModelsCredentials);
        return localVarResp.getData();
    }

    /**
     * Authenticate a user.
     * No Documentation Found.
     * @param apIModelsCredentials Create a user account. (required)
     * @return ApiResponse&lt;APIModelsAuthenticatedUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<APIModelsAuthenticatedUser> authenticationDefaultWithHttpInfo(APIModelsCredentials apIModelsCredentials) throws ApiException {
        okhttp3.Call localVarCall = authenticationDefaultValidateBeforeCall(apIModelsCredentials, null);
        Type localVarReturnType = new TypeToken<APIModelsAuthenticatedUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Authenticate a user. (asynchronously)
     * No Documentation Found.
     * @param apIModelsCredentials Create a user account. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authenticationDefaultAsync(APIModelsCredentials apIModelsCredentials, final ApiCallback<APIModelsAuthenticatedUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = authenticationDefaultValidateBeforeCall(apIModelsCredentials, _callback);
        Type localVarReturnType = new TypeToken<APIModelsAuthenticatedUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for authenticationIsAlive
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authenticationIsAliveCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/Authentication/IsAlive";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authenticationIsAliveValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return authenticationIsAliveCall(_callback);

    }

    /**
     * Acknowledges the connection to the API
     * No Documentation Found.
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void authenticationIsAlive() throws ApiException {
        authenticationIsAliveWithHttpInfo();
    }

    /**
     * Acknowledges the connection to the API
     * No Documentation Found.
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> authenticationIsAliveWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = authenticationIsAliveValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Acknowledges the connection to the API (asynchronously)
     * No Documentation Found.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authenticationIsAliveAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = authenticationIsAliveValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for authenticationPutManageTokens
     * @param userID  (required)
     * @param apIModelsTokenOptions The options for token management. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authenticationPutManageTokensCall(Integer userID, APIModelsTokenOptions apIModelsTokenOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apIModelsTokenOptions;

        // create path and map variables
        String localVarPath = "/api/v2/AuthenticatedUsers/{UserID}/Tokens"
            .replace("{" + "UserID" + "}", localVarApiClient.escapeString(userID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authenticationPutManageTokensValidateBeforeCall(Integer userID, APIModelsTokenOptions apIModelsTokenOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userID' is set
        if (userID == null) {
            throw new ApiException("Missing the required parameter 'userID' when calling authenticationPutManageTokens(Async)");
        }

        // verify the required parameter 'apIModelsTokenOptions' is set
        if (apIModelsTokenOptions == null) {
            throw new ApiException("Missing the required parameter 'apIModelsTokenOptions' when calling authenticationPutManageTokens(Async)");
        }

        return authenticationPutManageTokensCall(userID, apIModelsTokenOptions, _callback);

    }

    /**
     * Manage API tokens.
     * No Documentation Found.
     * @param userID  (required)
     * @param apIModelsTokenOptions The options for token management. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void authenticationPutManageTokens(Integer userID, APIModelsTokenOptions apIModelsTokenOptions) throws ApiException {
        authenticationPutManageTokensWithHttpInfo(userID, apIModelsTokenOptions);
    }

    /**
     * Manage API tokens.
     * No Documentation Found.
     * @param userID  (required)
     * @param apIModelsTokenOptions The options for token management. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> authenticationPutManageTokensWithHttpInfo(Integer userID, APIModelsTokenOptions apIModelsTokenOptions) throws ApiException {
        okhttp3.Call localVarCall = authenticationPutManageTokensValidateBeforeCall(userID, apIModelsTokenOptions, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Manage API tokens. (asynchronously)
     * No Documentation Found.
     * @param userID  (required)
     * @param apIModelsTokenOptions The options for token management. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authenticationPutManageTokensAsync(Integer userID, APIModelsTokenOptions apIModelsTokenOptions, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = authenticationPutManageTokensValidateBeforeCall(userID, apIModelsTokenOptions, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for authenticationRequestPasswordReset
     * @param apIModelsPasswordResetRequest The password reset request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authenticationRequestPasswordResetCall(APIModelsPasswordResetRequest apIModelsPasswordResetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apIModelsPasswordResetRequest;

        // create path and map variables
        String localVarPath = "/api/v2/Authentication/RequestPasswordReset";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authenticationRequestPasswordResetValidateBeforeCall(APIModelsPasswordResetRequest apIModelsPasswordResetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apIModelsPasswordResetRequest' is set
        if (apIModelsPasswordResetRequest == null) {
            throw new ApiException("Missing the required parameter 'apIModelsPasswordResetRequest' when calling authenticationRequestPasswordReset(Async)");
        }

        return authenticationRequestPasswordResetCall(apIModelsPasswordResetRequest, _callback);

    }

    /**
     * Request a password reset.
     * No Documentation Found.
     * @param apIModelsPasswordResetRequest The password reset request. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void authenticationRequestPasswordReset(APIModelsPasswordResetRequest apIModelsPasswordResetRequest) throws ApiException {
        authenticationRequestPasswordResetWithHttpInfo(apIModelsPasswordResetRequest);
    }

    /**
     * Request a password reset.
     * No Documentation Found.
     * @param apIModelsPasswordResetRequest The password reset request. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> authenticationRequestPasswordResetWithHttpInfo(APIModelsPasswordResetRequest apIModelsPasswordResetRequest) throws ApiException {
        okhttp3.Call localVarCall = authenticationRequestPasswordResetValidateBeforeCall(apIModelsPasswordResetRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Request a password reset. (asynchronously)
     * No Documentation Found.
     * @param apIModelsPasswordResetRequest The password reset request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authenticationRequestPasswordResetAsync(APIModelsPasswordResetRequest apIModelsPasswordResetRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = authenticationRequestPasswordResetValidateBeforeCall(apIModelsPasswordResetRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for authenticationResetPasword
     * @param apIModelsPasswordReset The password reset detail. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authenticationResetPaswordCall(APIModelsPasswordReset apIModelsPasswordReset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apIModelsPasswordReset;

        // create path and map variables
        String localVarPath = "/api/v2/Authentication/ResetPasword";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authenticationResetPaswordValidateBeforeCall(APIModelsPasswordReset apIModelsPasswordReset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apIModelsPasswordReset' is set
        if (apIModelsPasswordReset == null) {
            throw new ApiException("Missing the required parameter 'apIModelsPasswordReset' when calling authenticationResetPasword(Async)");
        }

        return authenticationResetPaswordCall(apIModelsPasswordReset, _callback);

    }

    /**
     * Reset a password
     * No Documentation Found.
     * @param apIModelsPasswordReset The password reset detail. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void authenticationResetPasword(APIModelsPasswordReset apIModelsPasswordReset) throws ApiException {
        authenticationResetPaswordWithHttpInfo(apIModelsPasswordReset);
    }

    /**
     * Reset a password
     * No Documentation Found.
     * @param apIModelsPasswordReset The password reset detail. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> authenticationResetPaswordWithHttpInfo(APIModelsPasswordReset apIModelsPasswordReset) throws ApiException {
        okhttp3.Call localVarCall = authenticationResetPaswordValidateBeforeCall(apIModelsPasswordReset, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Reset a password (asynchronously)
     * No Documentation Found.
     * @param apIModelsPasswordReset The password reset detail. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authenticationResetPaswordAsync(APIModelsPasswordReset apIModelsPasswordReset, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = authenticationResetPaswordValidateBeforeCall(apIModelsPasswordReset, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
