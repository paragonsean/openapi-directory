/*
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An AGCO Power ECU
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:35.511967-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AGCOPowerServicesModelsECU {
  public static final String SERIALIZED_NAME_ACTIVATION_CODE = "ActivationCode";
  @SerializedName(SERIALIZED_NAME_ACTIVATION_CODE)
  private byte[] activationCode;

  public static final String SERIALIZED_NAME_DAMAGED_DESCRIPTION = "DamagedDescription";
  @SerializedName(SERIALIZED_NAME_DAMAGED_DESCRIPTION)
  private String damagedDescription;

  public static final String SERIALIZED_NAME_ENGINE_SERIAL_NUMBER = "EngineSerialNumber";
  @SerializedName(SERIALIZED_NAME_ENGINE_SERIAL_NUMBER)
  private String engineSerialNumber;

  public static final String SERIALIZED_NAME_REPLACES_E_C_U_SERIAL_NUMBER = "ReplacesECUSerialNumber";
  @SerializedName(SERIALIZED_NAME_REPLACES_E_C_U_SERIAL_NUMBER)
  private String replacesECUSerialNumber;

  public static final String SERIALIZED_NAME_SERIAL_NUMBER = "SerialNumber";
  @SerializedName(SERIALIZED_NAME_SERIAL_NUMBER)
  private String serialNumber;

  /**
   * The state of the ECU
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    ACTIVE("Active"),
    
    INACTIVE("Inactive"),
    
    DAMAGED("Damaged");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "State";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public AGCOPowerServicesModelsECU() {
  }

  public AGCOPowerServicesModelsECU activationCode(byte[] activationCode) {
    this.activationCode = activationCode;
    return this;
  }

  /**
   * The code used to activate the ECU. May not be modified. Returned only on activation.
   * @return activationCode
   */
  @javax.annotation.Nullable
  public byte[] getActivationCode() {
    return activationCode;
  }

  public void setActivationCode(byte[] activationCode) {
    this.activationCode = activationCode;
  }


  public AGCOPowerServicesModelsECU damagedDescription(String damagedDescription) {
    this.damagedDescription = damagedDescription;
    return this;
  }

  /**
   * A description why the ECU cannot be deactivated.
   * @return damagedDescription
   */
  @javax.annotation.Nullable
  public String getDamagedDescription() {
    return damagedDescription;
  }

  public void setDamagedDescription(String damagedDescription) {
    this.damagedDescription = damagedDescription;
  }


  public AGCOPowerServicesModelsECU engineSerialNumber(String engineSerialNumber) {
    this.engineSerialNumber = engineSerialNumber;
    return this;
  }

  /**
   * The serial number of the ECUâ€™s engine
   * @return engineSerialNumber
   */
  @javax.annotation.Nonnull
  public String getEngineSerialNumber() {
    return engineSerialNumber;
  }

  public void setEngineSerialNumber(String engineSerialNumber) {
    this.engineSerialNumber = engineSerialNumber;
  }


  public AGCOPowerServicesModelsECU replacesECUSerialNumber(String replacesECUSerialNumber) {
    this.replacesECUSerialNumber = replacesECUSerialNumber;
    return this;
  }

  /**
   * The serial number of the ECU that this ECU replaces. Required if activating an ECU..
   * @return replacesECUSerialNumber
   */
  @javax.annotation.Nullable
  public String getReplacesECUSerialNumber() {
    return replacesECUSerialNumber;
  }

  public void setReplacesECUSerialNumber(String replacesECUSerialNumber) {
    this.replacesECUSerialNumber = replacesECUSerialNumber;
  }


  public AGCOPowerServicesModelsECU serialNumber(String serialNumber) {
    this.serialNumber = serialNumber;
    return this;
  }

  /**
   * The serial number of the ECU
   * @return serialNumber
   */
  @javax.annotation.Nonnull
  public String getSerialNumber() {
    return serialNumber;
  }

  public void setSerialNumber(String serialNumber) {
    this.serialNumber = serialNumber;
  }


  public AGCOPowerServicesModelsECU state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * The state of the ECU
   * @return state
   */
  @javax.annotation.Nonnull
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AGCOPowerServicesModelsECU agCOPowerServicesModelsECU = (AGCOPowerServicesModelsECU) o;
    return Arrays.equals(this.activationCode, agCOPowerServicesModelsECU.activationCode) &&
        Objects.equals(this.damagedDescription, agCOPowerServicesModelsECU.damagedDescription) &&
        Objects.equals(this.engineSerialNumber, agCOPowerServicesModelsECU.engineSerialNumber) &&
        Objects.equals(this.replacesECUSerialNumber, agCOPowerServicesModelsECU.replacesECUSerialNumber) &&
        Objects.equals(this.serialNumber, agCOPowerServicesModelsECU.serialNumber) &&
        Objects.equals(this.state, agCOPowerServicesModelsECU.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(Arrays.hashCode(activationCode), damagedDescription, engineSerialNumber, replacesECUSerialNumber, serialNumber, state);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AGCOPowerServicesModelsECU {\n");
    sb.append("    activationCode: ").append(toIndentedString(activationCode)).append("\n");
    sb.append("    damagedDescription: ").append(toIndentedString(damagedDescription)).append("\n");
    sb.append("    engineSerialNumber: ").append(toIndentedString(engineSerialNumber)).append("\n");
    sb.append("    replacesECUSerialNumber: ").append(toIndentedString(replacesECUSerialNumber)).append("\n");
    sb.append("    serialNumber: ").append(toIndentedString(serialNumber)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ActivationCode");
    openapiFields.add("DamagedDescription");
    openapiFields.add("EngineSerialNumber");
    openapiFields.add("ReplacesECUSerialNumber");
    openapiFields.add("SerialNumber");
    openapiFields.add("State");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("EngineSerialNumber");
    openapiRequiredFields.add("SerialNumber");
    openapiRequiredFields.add("State");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AGCOPowerServicesModelsECU
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AGCOPowerServicesModelsECU.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AGCOPowerServicesModelsECU is not found in the empty JSON string", AGCOPowerServicesModelsECU.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AGCOPowerServicesModelsECU.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AGCOPowerServicesModelsECU` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AGCOPowerServicesModelsECU.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("DamagedDescription") != null && !jsonObj.get("DamagedDescription").isJsonNull()) && !jsonObj.get("DamagedDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DamagedDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DamagedDescription").toString()));
      }
      if (!jsonObj.get("EngineSerialNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EngineSerialNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EngineSerialNumber").toString()));
      }
      if ((jsonObj.get("ReplacesECUSerialNumber") != null && !jsonObj.get("ReplacesECUSerialNumber").isJsonNull()) && !jsonObj.get("ReplacesECUSerialNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ReplacesECUSerialNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ReplacesECUSerialNumber").toString()));
      }
      if (!jsonObj.get("SerialNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SerialNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SerialNumber").toString()));
      }
      if (!jsonObj.get("State").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `State` to be a primitive type in the JSON string but got `%s`", jsonObj.get("State").toString()));
      }
      // validate the required field `State`
      StateEnum.validateJsonElement(jsonObj.get("State"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AGCOPowerServicesModelsECU.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AGCOPowerServicesModelsECU' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AGCOPowerServicesModelsECU> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AGCOPowerServicesModelsECU.class));

       return (TypeAdapter<T>) new TypeAdapter<AGCOPowerServicesModelsECU>() {
           @Override
           public void write(JsonWriter out, AGCOPowerServicesModelsECU value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AGCOPowerServicesModelsECU read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AGCOPowerServicesModelsECU given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AGCOPowerServicesModelsECU
   * @throws IOException if the JSON string is invalid with respect to AGCOPowerServicesModelsECU
   */
  public static AGCOPowerServicesModelsECU fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AGCOPowerServicesModelsECU.class);
  }

  /**
   * Convert an instance of AGCOPowerServicesModelsECU to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

