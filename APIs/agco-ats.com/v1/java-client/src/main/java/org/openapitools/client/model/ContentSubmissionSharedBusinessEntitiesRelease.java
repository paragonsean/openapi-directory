/*
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Release class
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:35.511967-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ContentSubmissionSharedBusinessEntitiesRelease {
  public static final String SERIALIZED_NAME_BUILD_DATE = "BuildDate";
  @SerializedName(SERIALIZED_NAME_BUILD_DATE)
  private OffsetDateTime buildDate;

  public static final String SERIALIZED_NAME_BUNDLE_I_DS = "BundleIDs";
  @SerializedName(SERIALIZED_NAME_BUNDLE_I_DS)
  private List<String> bundleIDs = new ArrayList<>();

  public static final String SERIALIZED_NAME_RELEASE_DATE = "ReleaseDate";
  @SerializedName(SERIALIZED_NAME_RELEASE_DATE)
  private OffsetDateTime releaseDate;

  public static final String SERIALIZED_NAME_RELEASE_I_D = "ReleaseID";
  @SerializedName(SERIALIZED_NAME_RELEASE_I_D)
  private Integer releaseID;

  public static final String SERIALIZED_NAME_RELEASE_NUMBER = "ReleaseNumber";
  @SerializedName(SERIALIZED_NAME_RELEASE_NUMBER)
  private String releaseNumber;

  public static final String SERIALIZED_NAME_VISIBLE = "Visible";
  @SerializedName(SERIALIZED_NAME_VISIBLE)
  private Boolean visible;

  public ContentSubmissionSharedBusinessEntitiesRelease() {
  }

  public ContentSubmissionSharedBusinessEntitiesRelease buildDate(OffsetDateTime buildDate) {
    this.buildDate = buildDate;
    return this;
  }

  /**
   * Build Date
   * @return buildDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getBuildDate() {
    return buildDate;
  }

  public void setBuildDate(OffsetDateTime buildDate) {
    this.buildDate = buildDate;
  }


  public ContentSubmissionSharedBusinessEntitiesRelease bundleIDs(List<String> bundleIDs) {
    this.bundleIDs = bundleIDs;
    return this;
  }

  public ContentSubmissionSharedBusinessEntitiesRelease addBundleIDsItem(String bundleIDsItem) {
    if (this.bundleIDs == null) {
      this.bundleIDs = new ArrayList<>();
    }
    this.bundleIDs.add(bundleIDsItem);
    return this;
  }

  /**
   * IDs of AUC Bundles associated with this Release.
   * @return bundleIDs
   */
  @javax.annotation.Nullable
  public List<String> getBundleIDs() {
    return bundleIDs;
  }

  public void setBundleIDs(List<String> bundleIDs) {
    this.bundleIDs = bundleIDs;
  }


  public ContentSubmissionSharedBusinessEntitiesRelease releaseDate(OffsetDateTime releaseDate) {
    this.releaseDate = releaseDate;
    return this;
  }

  /**
   * Release Date
   * @return releaseDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getReleaseDate() {
    return releaseDate;
  }

  public void setReleaseDate(OffsetDateTime releaseDate) {
    this.releaseDate = releaseDate;
  }


  public ContentSubmissionSharedBusinessEntitiesRelease releaseID(Integer releaseID) {
    this.releaseID = releaseID;
    return this;
  }

  /**
   * Release ID
   * @return releaseID
   */
  @javax.annotation.Nullable
  public Integer getReleaseID() {
    return releaseID;
  }

  public void setReleaseID(Integer releaseID) {
    this.releaseID = releaseID;
  }


  public ContentSubmissionSharedBusinessEntitiesRelease releaseNumber(String releaseNumber) {
    this.releaseNumber = releaseNumber;
    return this;
  }

  /**
   * Release Number
   * @return releaseNumber
   */
  @javax.annotation.Nullable
  public String getReleaseNumber() {
    return releaseNumber;
  }

  public void setReleaseNumber(String releaseNumber) {
    this.releaseNumber = releaseNumber;
  }


  public ContentSubmissionSharedBusinessEntitiesRelease visible(Boolean visible) {
    this.visible = visible;
    return this;
  }

  /**
   * Visible
   * @return visible
   */
  @javax.annotation.Nullable
  public Boolean getVisible() {
    return visible;
  }

  public void setVisible(Boolean visible) {
    this.visible = visible;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContentSubmissionSharedBusinessEntitiesRelease contentSubmissionSharedBusinessEntitiesRelease = (ContentSubmissionSharedBusinessEntitiesRelease) o;
    return Objects.equals(this.buildDate, contentSubmissionSharedBusinessEntitiesRelease.buildDate) &&
        Objects.equals(this.bundleIDs, contentSubmissionSharedBusinessEntitiesRelease.bundleIDs) &&
        Objects.equals(this.releaseDate, contentSubmissionSharedBusinessEntitiesRelease.releaseDate) &&
        Objects.equals(this.releaseID, contentSubmissionSharedBusinessEntitiesRelease.releaseID) &&
        Objects.equals(this.releaseNumber, contentSubmissionSharedBusinessEntitiesRelease.releaseNumber) &&
        Objects.equals(this.visible, contentSubmissionSharedBusinessEntitiesRelease.visible);
  }

  @Override
  public int hashCode() {
    return Objects.hash(buildDate, bundleIDs, releaseDate, releaseID, releaseNumber, visible);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContentSubmissionSharedBusinessEntitiesRelease {\n");
    sb.append("    buildDate: ").append(toIndentedString(buildDate)).append("\n");
    sb.append("    bundleIDs: ").append(toIndentedString(bundleIDs)).append("\n");
    sb.append("    releaseDate: ").append(toIndentedString(releaseDate)).append("\n");
    sb.append("    releaseID: ").append(toIndentedString(releaseID)).append("\n");
    sb.append("    releaseNumber: ").append(toIndentedString(releaseNumber)).append("\n");
    sb.append("    visible: ").append(toIndentedString(visible)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("BuildDate");
    openapiFields.add("BundleIDs");
    openapiFields.add("ReleaseDate");
    openapiFields.add("ReleaseID");
    openapiFields.add("ReleaseNumber");
    openapiFields.add("Visible");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContentSubmissionSharedBusinessEntitiesRelease
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContentSubmissionSharedBusinessEntitiesRelease.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContentSubmissionSharedBusinessEntitiesRelease is not found in the empty JSON string", ContentSubmissionSharedBusinessEntitiesRelease.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContentSubmissionSharedBusinessEntitiesRelease.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContentSubmissionSharedBusinessEntitiesRelease` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("BundleIDs") != null && !jsonObj.get("BundleIDs").isJsonNull() && !jsonObj.get("BundleIDs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `BundleIDs` to be an array in the JSON string but got `%s`", jsonObj.get("BundleIDs").toString()));
      }
      if ((jsonObj.get("ReleaseNumber") != null && !jsonObj.get("ReleaseNumber").isJsonNull()) && !jsonObj.get("ReleaseNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ReleaseNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ReleaseNumber").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContentSubmissionSharedBusinessEntitiesRelease.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContentSubmissionSharedBusinessEntitiesRelease' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContentSubmissionSharedBusinessEntitiesRelease> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContentSubmissionSharedBusinessEntitiesRelease.class));

       return (TypeAdapter<T>) new TypeAdapter<ContentSubmissionSharedBusinessEntitiesRelease>() {
           @Override
           public void write(JsonWriter out, ContentSubmissionSharedBusinessEntitiesRelease value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContentSubmissionSharedBusinessEntitiesRelease read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContentSubmissionSharedBusinessEntitiesRelease given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContentSubmissionSharedBusinessEntitiesRelease
   * @throws IOException if the JSON string is invalid with respect to ContentSubmissionSharedBusinessEntitiesRelease
   */
  public static ContentSubmissionSharedBusinessEntitiesRelease fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContentSubmissionSharedBusinessEntitiesRelease.class);
  }

  /**
   * Convert an instance of ContentSubmissionSharedBusinessEntitiesRelease to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

