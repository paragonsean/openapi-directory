/*
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AGCOPowerServicesModelsECU;
import org.openapitools.client.model.AGCOPowerServicesModelsProductionData;
import org.openapitools.client.model.AGCOPowerServicesModelsUserStatus;
import org.openapitools.client.model.APIModelsApiError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AftermarketServicesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AftermarketServicesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AftermarketServicesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for aftermarketServicesGetCerts
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call aftermarketServicesGetCertsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/AftermarketServices/Certificates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call aftermarketServicesGetCertsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return aftermarketServicesGetCertsCall(_callback);

    }

    /**
     * No Documentation Found.
     * No Documentation Found.
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public Object aftermarketServicesGetCerts() throws ApiException {
        ApiResponse<Object> localVarResp = aftermarketServicesGetCertsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * No Documentation Found.
     * No Documentation Found.
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> aftermarketServicesGetCertsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = aftermarketServicesGetCertsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * No Documentation Found. (asynchronously)
     * No Documentation Found.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call aftermarketServicesGetCertsAsync(final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = aftermarketServicesGetCertsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for aftermarketServicesGetConnectionStatus
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call aftermarketServicesGetConnectionStatusCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/AftermarketServices/Hello";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call aftermarketServicesGetConnectionStatusValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return aftermarketServicesGetConnectionStatusCall(_callback);

    }

    /**
     * Check whether there is connectivity to AGCO Power Web Services
     * No Documentation Found.
     * @return Boolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public Boolean aftermarketServicesGetConnectionStatus() throws ApiException {
        ApiResponse<Boolean> localVarResp = aftermarketServicesGetConnectionStatusWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Check whether there is connectivity to AGCO Power Web Services
     * No Documentation Found.
     * @return ApiResponse&lt;Boolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Boolean> aftermarketServicesGetConnectionStatusWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = aftermarketServicesGetConnectionStatusValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check whether there is connectivity to AGCO Power Web Services (asynchronously)
     * No Documentation Found.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call aftermarketServicesGetConnectionStatusAsync(final ApiCallback<Boolean> _callback) throws ApiException {

        okhttp3.Call localVarCall = aftermarketServicesGetConnectionStatusValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for aftermarketServicesGetEngineIQACodes
     * @param serialNumber The serial number of the engine. (required)
     * @param edTInstanceId The EDT Instance Id of the kit calling this method. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call aftermarketServicesGetEngineIQACodesCall(String serialNumber, String edTInstanceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/AftermarketServices/Engines/{serialNumber}/IQACodes"
            .replace("{" + "serialNumber" + "}", localVarApiClient.escapeString(serialNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (edTInstanceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EDTInstanceId", edTInstanceId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call aftermarketServicesGetEngineIQACodesValidateBeforeCall(String serialNumber, String edTInstanceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serialNumber' is set
        if (serialNumber == null) {
            throw new ApiException("Missing the required parameter 'serialNumber' when calling aftermarketServicesGetEngineIQACodes(Async)");
        }

        // verify the required parameter 'edTInstanceId' is set
        if (edTInstanceId == null) {
            throw new ApiException("Missing the required parameter 'edTInstanceId' when calling aftermarketServicesGetEngineIQACodes(Async)");
        }

        return aftermarketServicesGetEngineIQACodesCall(serialNumber, edTInstanceId, _callback);

    }

    /**
     * Get injector codes given engine.
     * No Documentation Found.
     * @param serialNumber The serial number of the engine. (required)
     * @param edTInstanceId The EDT Instance Id of the kit calling this method. (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public List<String> aftermarketServicesGetEngineIQACodes(String serialNumber, String edTInstanceId) throws ApiException {
        ApiResponse<List<String>> localVarResp = aftermarketServicesGetEngineIQACodesWithHttpInfo(serialNumber, edTInstanceId);
        return localVarResp.getData();
    }

    /**
     * Get injector codes given engine.
     * No Documentation Found.
     * @param serialNumber The serial number of the engine. (required)
     * @param edTInstanceId The EDT Instance Id of the kit calling this method. (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> aftermarketServicesGetEngineIQACodesWithHttpInfo(String serialNumber, String edTInstanceId) throws ApiException {
        okhttp3.Call localVarCall = aftermarketServicesGetEngineIQACodesValidateBeforeCall(serialNumber, edTInstanceId, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get injector codes given engine. (asynchronously)
     * No Documentation Found.
     * @param serialNumber The serial number of the engine. (required)
     * @param edTInstanceId The EDT Instance Id of the kit calling this method. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call aftermarketServicesGetEngineIQACodesAsync(String serialNumber, String edTInstanceId, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = aftermarketServicesGetEngineIQACodesValidateBeforeCall(serialNumber, edTInstanceId, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for aftermarketServicesGetProductionData
     * @param serialNumber The serial number of the engine. (required)
     * @param edTInstanceId The EDT Instance Id of the kit calling this method. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call aftermarketServicesGetProductionDataCall(String serialNumber, String edTInstanceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/AftermarketServices/Engines/{serialNumber}/ProductionData"
            .replace("{" + "serialNumber" + "}", localVarApiClient.escapeString(serialNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (edTInstanceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EDTInstanceId", edTInstanceId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call aftermarketServicesGetProductionDataValidateBeforeCall(String serialNumber, String edTInstanceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serialNumber' is set
        if (serialNumber == null) {
            throw new ApiException("Missing the required parameter 'serialNumber' when calling aftermarketServicesGetProductionData(Async)");
        }

        // verify the required parameter 'edTInstanceId' is set
        if (edTInstanceId == null) {
            throw new ApiException("Missing the required parameter 'edTInstanceId' when calling aftermarketServicesGetProductionData(Async)");
        }

        return aftermarketServicesGetProductionDataCall(serialNumber, edTInstanceId, _callback);

    }

    /**
     * Get production calibration data for given engine.
     * No Documentation Found.
     * @param serialNumber The serial number of the engine. (required)
     * @param edTInstanceId The EDT Instance Id of the kit calling this method. (required)
     * @return List&lt;AGCOPowerServicesModelsProductionData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public List<AGCOPowerServicesModelsProductionData> aftermarketServicesGetProductionData(String serialNumber, String edTInstanceId) throws ApiException {
        ApiResponse<List<AGCOPowerServicesModelsProductionData>> localVarResp = aftermarketServicesGetProductionDataWithHttpInfo(serialNumber, edTInstanceId);
        return localVarResp.getData();
    }

    /**
     * Get production calibration data for given engine.
     * No Documentation Found.
     * @param serialNumber The serial number of the engine. (required)
     * @param edTInstanceId The EDT Instance Id of the kit calling this method. (required)
     * @return ApiResponse&lt;List&lt;AGCOPowerServicesModelsProductionData&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AGCOPowerServicesModelsProductionData>> aftermarketServicesGetProductionDataWithHttpInfo(String serialNumber, String edTInstanceId) throws ApiException {
        okhttp3.Call localVarCall = aftermarketServicesGetProductionDataValidateBeforeCall(serialNumber, edTInstanceId, null);
        Type localVarReturnType = new TypeToken<List<AGCOPowerServicesModelsProductionData>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get production calibration data for given engine. (asynchronously)
     * No Documentation Found.
     * @param serialNumber The serial number of the engine. (required)
     * @param edTInstanceId The EDT Instance Id of the kit calling this method. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call aftermarketServicesGetProductionDataAsync(String serialNumber, String edTInstanceId, final ApiCallback<List<AGCOPowerServicesModelsProductionData>> _callback) throws ApiException {

        okhttp3.Call localVarCall = aftermarketServicesGetProductionDataValidateBeforeCall(serialNumber, edTInstanceId, _callback);
        Type localVarReturnType = new TypeToken<List<AGCOPowerServicesModelsProductionData>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for aftermarketServicesGetUserStatus
     * @param voucherCode  (required)
     * @param dealerCode  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call aftermarketServicesGetUserStatusCall(String voucherCode, String dealerCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/AftermarketServices/UserStatuses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (voucherCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("voucherCode", voucherCode));
        }

        if (dealerCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dealerCode", dealerCode));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call aftermarketServicesGetUserStatusValidateBeforeCall(String voucherCode, String dealerCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'voucherCode' is set
        if (voucherCode == null) {
            throw new ApiException("Missing the required parameter 'voucherCode' when calling aftermarketServicesGetUserStatus(Async)");
        }

        // verify the required parameter 'dealerCode' is set
        if (dealerCode == null) {
            throw new ApiException("Missing the required parameter 'dealerCode' when calling aftermarketServicesGetUserStatus(Async)");
        }

        return aftermarketServicesGetUserStatusCall(voucherCode, dealerCode, _callback);

    }

    /**
     * Retrieve the status of an EDT Kit Registration with AGCO Power Web Services
     * No Documentation Found.
     * @param voucherCode  (required)
     * @param dealerCode  (required)
     * @return AGCOPowerServicesModelsUserStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public AGCOPowerServicesModelsUserStatus aftermarketServicesGetUserStatus(String voucherCode, String dealerCode) throws ApiException {
        ApiResponse<AGCOPowerServicesModelsUserStatus> localVarResp = aftermarketServicesGetUserStatusWithHttpInfo(voucherCode, dealerCode);
        return localVarResp.getData();
    }

    /**
     * Retrieve the status of an EDT Kit Registration with AGCO Power Web Services
     * No Documentation Found.
     * @param voucherCode  (required)
     * @param dealerCode  (required)
     * @return ApiResponse&lt;AGCOPowerServicesModelsUserStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AGCOPowerServicesModelsUserStatus> aftermarketServicesGetUserStatusWithHttpInfo(String voucherCode, String dealerCode) throws ApiException {
        okhttp3.Call localVarCall = aftermarketServicesGetUserStatusValidateBeforeCall(voucherCode, dealerCode, null);
        Type localVarReturnType = new TypeToken<AGCOPowerServicesModelsUserStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve the status of an EDT Kit Registration with AGCO Power Web Services (asynchronously)
     * No Documentation Found.
     * @param voucherCode  (required)
     * @param dealerCode  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call aftermarketServicesGetUserStatusAsync(String voucherCode, String dealerCode, final ApiCallback<AGCOPowerServicesModelsUserStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = aftermarketServicesGetUserStatusValidateBeforeCall(voucherCode, dealerCode, _callback);
        Type localVarReturnType = new TypeToken<AGCOPowerServicesModelsUserStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for aftermarketServicesPutECU
     * @param serialNumber The serial number of the ECU. (required)
     * @param edTInstanceId The EDT Instance Id of the kit calling this method. (required)
     * @param agCOPowerServicesModelsECU The ecu to modify. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call aftermarketServicesPutECUCall(String serialNumber, String edTInstanceId, AGCOPowerServicesModelsECU agCOPowerServicesModelsECU, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = agCOPowerServicesModelsECU;

        // create path and map variables
        String localVarPath = "/api/v2/AftermarketServices/ECUs/{serialNumber}"
            .replace("{" + "serialNumber" + "}", localVarApiClient.escapeString(serialNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (edTInstanceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EDTInstanceId", edTInstanceId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call aftermarketServicesPutECUValidateBeforeCall(String serialNumber, String edTInstanceId, AGCOPowerServicesModelsECU agCOPowerServicesModelsECU, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serialNumber' is set
        if (serialNumber == null) {
            throw new ApiException("Missing the required parameter 'serialNumber' when calling aftermarketServicesPutECU(Async)");
        }

        // verify the required parameter 'edTInstanceId' is set
        if (edTInstanceId == null) {
            throw new ApiException("Missing the required parameter 'edTInstanceId' when calling aftermarketServicesPutECU(Async)");
        }

        // verify the required parameter 'agCOPowerServicesModelsECU' is set
        if (agCOPowerServicesModelsECU == null) {
            throw new ApiException("Missing the required parameter 'agCOPowerServicesModelsECU' when calling aftermarketServicesPutECU(Async)");
        }

        return aftermarketServicesPutECUCall(serialNumber, edTInstanceId, agCOPowerServicesModelsECU, _callback);

    }

    /**
     * Activate or Deactivate an ECU, or Report an ECU as Damaged.
     * No Documentation Found.
     * @param serialNumber The serial number of the ECU. (required)
     * @param edTInstanceId The EDT Instance Id of the kit calling this method. (required)
     * @param agCOPowerServicesModelsECU The ecu to modify. (required)
     * @return AGCOPowerServicesModelsECU
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public AGCOPowerServicesModelsECU aftermarketServicesPutECU(String serialNumber, String edTInstanceId, AGCOPowerServicesModelsECU agCOPowerServicesModelsECU) throws ApiException {
        ApiResponse<AGCOPowerServicesModelsECU> localVarResp = aftermarketServicesPutECUWithHttpInfo(serialNumber, edTInstanceId, agCOPowerServicesModelsECU);
        return localVarResp.getData();
    }

    /**
     * Activate or Deactivate an ECU, or Report an ECU as Damaged.
     * No Documentation Found.
     * @param serialNumber The serial number of the ECU. (required)
     * @param edTInstanceId The EDT Instance Id of the kit calling this method. (required)
     * @param agCOPowerServicesModelsECU The ecu to modify. (required)
     * @return ApiResponse&lt;AGCOPowerServicesModelsECU&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AGCOPowerServicesModelsECU> aftermarketServicesPutECUWithHttpInfo(String serialNumber, String edTInstanceId, AGCOPowerServicesModelsECU agCOPowerServicesModelsECU) throws ApiException {
        okhttp3.Call localVarCall = aftermarketServicesPutECUValidateBeforeCall(serialNumber, edTInstanceId, agCOPowerServicesModelsECU, null);
        Type localVarReturnType = new TypeToken<AGCOPowerServicesModelsECU>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Activate or Deactivate an ECU, or Report an ECU as Damaged. (asynchronously)
     * No Documentation Found.
     * @param serialNumber The serial number of the ECU. (required)
     * @param edTInstanceId The EDT Instance Id of the kit calling this method. (required)
     * @param agCOPowerServicesModelsECU The ecu to modify. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call aftermarketServicesPutECUAsync(String serialNumber, String edTInstanceId, AGCOPowerServicesModelsECU agCOPowerServicesModelsECU, final ApiCallback<AGCOPowerServicesModelsECU> _callback) throws ApiException {

        okhttp3.Call localVarCall = aftermarketServicesPutECUValidateBeforeCall(serialNumber, edTInstanceId, agCOPowerServicesModelsECU, _callback);
        Type localVarReturnType = new TypeToken<AGCOPowerServicesModelsECU>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for aftermarketServicesPutIQACodes
     * @param serialNumber The serial number of the Engine (required)
     * @param edTInstanceId The EDT Instance Id of the kit calling this method. (required)
     * @param requestBody A string array of IQA codes in physical order (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call aftermarketServicesPutIQACodesCall(String serialNumber, String edTInstanceId, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/api/v2/AftermarketServices/Engines/{serialNumber}/IQACodes"
            .replace("{" + "serialNumber" + "}", localVarApiClient.escapeString(serialNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (edTInstanceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EDTInstanceId", edTInstanceId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call aftermarketServicesPutIQACodesValidateBeforeCall(String serialNumber, String edTInstanceId, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serialNumber' is set
        if (serialNumber == null) {
            throw new ApiException("Missing the required parameter 'serialNumber' when calling aftermarketServicesPutIQACodes(Async)");
        }

        // verify the required parameter 'edTInstanceId' is set
        if (edTInstanceId == null) {
            throw new ApiException("Missing the required parameter 'edTInstanceId' when calling aftermarketServicesPutIQACodes(Async)");
        }

        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling aftermarketServicesPutIQACodes(Async)");
        }

        return aftermarketServicesPutIQACodesCall(serialNumber, edTInstanceId, requestBody, _callback);

    }

    /**
     * Report the IQA codes used by an engine
     * No Documentation Found.
     * @param serialNumber The serial number of the Engine (required)
     * @param edTInstanceId The EDT Instance Id of the kit calling this method. (required)
     * @param requestBody A string array of IQA codes in physical order (required)
     * @return Boolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public Boolean aftermarketServicesPutIQACodes(String serialNumber, String edTInstanceId, List<String> requestBody) throws ApiException {
        ApiResponse<Boolean> localVarResp = aftermarketServicesPutIQACodesWithHttpInfo(serialNumber, edTInstanceId, requestBody);
        return localVarResp.getData();
    }

    /**
     * Report the IQA codes used by an engine
     * No Documentation Found.
     * @param serialNumber The serial number of the Engine (required)
     * @param edTInstanceId The EDT Instance Id of the kit calling this method. (required)
     * @param requestBody A string array of IQA codes in physical order (required)
     * @return ApiResponse&lt;Boolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Boolean> aftermarketServicesPutIQACodesWithHttpInfo(String serialNumber, String edTInstanceId, List<String> requestBody) throws ApiException {
        okhttp3.Call localVarCall = aftermarketServicesPutIQACodesValidateBeforeCall(serialNumber, edTInstanceId, requestBody, null);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Report the IQA codes used by an engine (asynchronously)
     * No Documentation Found.
     * @param serialNumber The serial number of the Engine (required)
     * @param edTInstanceId The EDT Instance Id of the kit calling this method. (required)
     * @param requestBody A string array of IQA codes in physical order (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call aftermarketServicesPutIQACodesAsync(String serialNumber, String edTInstanceId, List<String> requestBody, final ApiCallback<Boolean> _callback) throws ApiException {

        okhttp3.Call localVarCall = aftermarketServicesPutIQACodesValidateBeforeCall(serialNumber, edTInstanceId, requestBody, _callback);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for aftermarketServicesUpdateUserStatus
     * @param agCOPowerServicesModelsUserStatus  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call aftermarketServicesUpdateUserStatusCall(AGCOPowerServicesModelsUserStatus agCOPowerServicesModelsUserStatus, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = agCOPowerServicesModelsUserStatus;

        // create path and map variables
        String localVarPath = "/api/v2/AftermarketServices/UserStatuses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call aftermarketServicesUpdateUserStatusValidateBeforeCall(AGCOPowerServicesModelsUserStatus agCOPowerServicesModelsUserStatus, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agCOPowerServicesModelsUserStatus' is set
        if (agCOPowerServicesModelsUserStatus == null) {
            throw new ApiException("Missing the required parameter 'agCOPowerServicesModelsUserStatus' when calling aftermarketServicesUpdateUserStatus(Async)");
        }

        return aftermarketServicesUpdateUserStatusCall(agCOPowerServicesModelsUserStatus, _callback);

    }

    /**
     * Update the status of an EDT Kit Registration with AGCO Power Web Services
     * No Documentation Found.
     * @param agCOPowerServicesModelsUserStatus  (required)
     * @return Boolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public Boolean aftermarketServicesUpdateUserStatus(AGCOPowerServicesModelsUserStatus agCOPowerServicesModelsUserStatus) throws ApiException {
        ApiResponse<Boolean> localVarResp = aftermarketServicesUpdateUserStatusWithHttpInfo(agCOPowerServicesModelsUserStatus);
        return localVarResp.getData();
    }

    /**
     * Update the status of an EDT Kit Registration with AGCO Power Web Services
     * No Documentation Found.
     * @param agCOPowerServicesModelsUserStatus  (required)
     * @return ApiResponse&lt;Boolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Boolean> aftermarketServicesUpdateUserStatusWithHttpInfo(AGCOPowerServicesModelsUserStatus agCOPowerServicesModelsUserStatus) throws ApiException {
        okhttp3.Call localVarCall = aftermarketServicesUpdateUserStatusValidateBeforeCall(agCOPowerServicesModelsUserStatus, null);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the status of an EDT Kit Registration with AGCO Power Web Services (asynchronously)
     * No Documentation Found.
     * @param agCOPowerServicesModelsUserStatus  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call aftermarketServicesUpdateUserStatusAsync(AGCOPowerServicesModelsUserStatus agCOPowerServicesModelsUserStatus, final ApiCallback<Boolean> _callback) throws ApiException {

        okhttp3.Call localVarCall = aftermarketServicesUpdateUserStatusValidateBeforeCall(agCOPowerServicesModelsUserStatus, _callback);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
