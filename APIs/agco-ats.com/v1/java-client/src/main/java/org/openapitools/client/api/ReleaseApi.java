/*
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.APIModelsApiError;
import org.openapitools.client.model.APIPagedResponseContentSubmissionSharedBusinessEntitiesRelease;
import org.openapitools.client.model.ContentSubmissionSharedBusinessEntitiesRelease;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ReleaseApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ReleaseApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReleaseApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for releaseDeleteReleaseBundle
     * @param releaseId The release identifier. (required)
     * @param bundleId The bundle identifier. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call releaseDeleteReleaseBundleCall(Integer releaseId, String bundleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/Releases/{ReleaseId}/Bundle/{BundleId}"
            .replace("{" + "ReleaseId" + "}", localVarApiClient.escapeString(releaseId.toString()))
            .replace("{" + "BundleId" + "}", localVarApiClient.escapeString(bundleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call releaseDeleteReleaseBundleValidateBeforeCall(Integer releaseId, String bundleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'releaseId' is set
        if (releaseId == null) {
            throw new ApiException("Missing the required parameter 'releaseId' when calling releaseDeleteReleaseBundle(Async)");
        }

        // verify the required parameter 'bundleId' is set
        if (bundleId == null) {
            throw new ApiException("Missing the required parameter 'bundleId' when calling releaseDeleteReleaseBundle(Async)");
        }

        return releaseDeleteReleaseBundleCall(releaseId, bundleId, _callback);

    }

    /**
     * Deletes the association between a release and a bundle.
     * No Documentation Found.
     * @param releaseId The release identifier. (required)
     * @param bundleId The bundle identifier. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public void releaseDeleteReleaseBundle(Integer releaseId, String bundleId) throws ApiException {
        releaseDeleteReleaseBundleWithHttpInfo(releaseId, bundleId);
    }

    /**
     * Deletes the association between a release and a bundle.
     * No Documentation Found.
     * @param releaseId The release identifier. (required)
     * @param bundleId The bundle identifier. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> releaseDeleteReleaseBundleWithHttpInfo(Integer releaseId, String bundleId) throws ApiException {
        okhttp3.Call localVarCall = releaseDeleteReleaseBundleValidateBeforeCall(releaseId, bundleId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes the association between a release and a bundle. (asynchronously)
     * No Documentation Found.
     * @param releaseId The release identifier. (required)
     * @param bundleId The bundle identifier. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call releaseDeleteReleaseBundleAsync(Integer releaseId, String bundleId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = releaseDeleteReleaseBundleValidateBeforeCall(releaseId, bundleId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for releaseGetRelease
     * @param releaseId The ID of the Release to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call releaseGetReleaseCall(Integer releaseId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/Releases/{ReleaseId}"
            .replace("{" + "ReleaseId" + "}", localVarApiClient.escapeString(releaseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call releaseGetReleaseValidateBeforeCall(Integer releaseId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'releaseId' is set
        if (releaseId == null) {
            throw new ApiException("Missing the required parameter 'releaseId' when calling releaseGetRelease(Async)");
        }

        return releaseGetReleaseCall(releaseId, _callback);

    }

    /**
     * Get a  Release by ID
     * Gets a Release by ID. When successful, the response is the requested Release.              If unsuccessful, an appropriate ApiError is returned.
     * @param releaseId The ID of the Release to get. (required)
     * @return ContentSubmissionSharedBusinessEntitiesRelease
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ContentSubmissionSharedBusinessEntitiesRelease releaseGetRelease(Integer releaseId) throws ApiException {
        ApiResponse<ContentSubmissionSharedBusinessEntitiesRelease> localVarResp = releaseGetReleaseWithHttpInfo(releaseId);
        return localVarResp.getData();
    }

    /**
     * Get a  Release by ID
     * Gets a Release by ID. When successful, the response is the requested Release.              If unsuccessful, an appropriate ApiError is returned.
     * @param releaseId The ID of the Release to get. (required)
     * @return ApiResponse&lt;ContentSubmissionSharedBusinessEntitiesRelease&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContentSubmissionSharedBusinessEntitiesRelease> releaseGetReleaseWithHttpInfo(Integer releaseId) throws ApiException {
        okhttp3.Call localVarCall = releaseGetReleaseValidateBeforeCall(releaseId, null);
        Type localVarReturnType = new TypeToken<ContentSubmissionSharedBusinessEntitiesRelease>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a  Release by ID (asynchronously)
     * Gets a Release by ID. When successful, the response is the requested Release.              If unsuccessful, an appropriate ApiError is returned.
     * @param releaseId The ID of the Release to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call releaseGetReleaseAsync(Integer releaseId, final ApiCallback<ContentSubmissionSharedBusinessEntitiesRelease> _callback) throws ApiException {

        okhttp3.Call localVarCall = releaseGetReleaseValidateBeforeCall(releaseId, _callback);
        Type localVarReturnType = new TypeToken<ContentSubmissionSharedBusinessEntitiesRelease>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for releaseGetReleases
     * @param limit Optional. The page limit.  If not specified, the default page limit is 10. (optional)
     * @param offset Optional. The page offset.  If not specified, the default page offset is 0. (optional)
     * @param visible Optional. Filter by visible. (optional)
     * @param bundleID Optional. Filter by BundleID. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call releaseGetReleasesCall(Integer limit, Integer offset, Boolean visible, String bundleID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/Releases";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (visible != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("visible", visible));
        }

        if (bundleID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bundleID", bundleID));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call releaseGetReleasesValidateBeforeCall(Integer limit, Integer offset, Boolean visible, String bundleID, final ApiCallback _callback) throws ApiException {
        return releaseGetReleasesCall(limit, offset, visible, bundleID, _callback);

    }

    /**
     * Get Release
     * Gets a collection of Release. When successful, the response is a PagedResponse of Release.              If unsuccessful, an appropriate ApiError is returned.
     * @param limit Optional. The page limit.  If not specified, the default page limit is 10. (optional)
     * @param offset Optional. The page offset.  If not specified, the default page offset is 0. (optional)
     * @param visible Optional. Filter by visible. (optional)
     * @param bundleID Optional. Filter by BundleID. (optional)
     * @return APIPagedResponseContentSubmissionSharedBusinessEntitiesRelease
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public APIPagedResponseContentSubmissionSharedBusinessEntitiesRelease releaseGetReleases(Integer limit, Integer offset, Boolean visible, String bundleID) throws ApiException {
        ApiResponse<APIPagedResponseContentSubmissionSharedBusinessEntitiesRelease> localVarResp = releaseGetReleasesWithHttpInfo(limit, offset, visible, bundleID);
        return localVarResp.getData();
    }

    /**
     * Get Release
     * Gets a collection of Release. When successful, the response is a PagedResponse of Release.              If unsuccessful, an appropriate ApiError is returned.
     * @param limit Optional. The page limit.  If not specified, the default page limit is 10. (optional)
     * @param offset Optional. The page offset.  If not specified, the default page offset is 0. (optional)
     * @param visible Optional. Filter by visible. (optional)
     * @param bundleID Optional. Filter by BundleID. (optional)
     * @return ApiResponse&lt;APIPagedResponseContentSubmissionSharedBusinessEntitiesRelease&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<APIPagedResponseContentSubmissionSharedBusinessEntitiesRelease> releaseGetReleasesWithHttpInfo(Integer limit, Integer offset, Boolean visible, String bundleID) throws ApiException {
        okhttp3.Call localVarCall = releaseGetReleasesValidateBeforeCall(limit, offset, visible, bundleID, null);
        Type localVarReturnType = new TypeToken<APIPagedResponseContentSubmissionSharedBusinessEntitiesRelease>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Release (asynchronously)
     * Gets a collection of Release. When successful, the response is a PagedResponse of Release.              If unsuccessful, an appropriate ApiError is returned.
     * @param limit Optional. The page limit.  If not specified, the default page limit is 10. (optional)
     * @param offset Optional. The page offset.  If not specified, the default page offset is 0. (optional)
     * @param visible Optional. Filter by visible. (optional)
     * @param bundleID Optional. Filter by BundleID. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call releaseGetReleasesAsync(Integer limit, Integer offset, Boolean visible, String bundleID, final ApiCallback<APIPagedResponseContentSubmissionSharedBusinessEntitiesRelease> _callback) throws ApiException {

        okhttp3.Call localVarCall = releaseGetReleasesValidateBeforeCall(limit, offset, visible, bundleID, _callback);
        Type localVarReturnType = new TypeToken<APIPagedResponseContentSubmissionSharedBusinessEntitiesRelease>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for releasePostRelease
     * @param contentSubmissionSharedBusinessEntitiesRelease The Release to create. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call releasePostReleaseCall(ContentSubmissionSharedBusinessEntitiesRelease contentSubmissionSharedBusinessEntitiesRelease, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contentSubmissionSharedBusinessEntitiesRelease;

        // create path and map variables
        String localVarPath = "/api/v2/Releases";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call releasePostReleaseValidateBeforeCall(ContentSubmissionSharedBusinessEntitiesRelease contentSubmissionSharedBusinessEntitiesRelease, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentSubmissionSharedBusinessEntitiesRelease' is set
        if (contentSubmissionSharedBusinessEntitiesRelease == null) {
            throw new ApiException("Missing the required parameter 'contentSubmissionSharedBusinessEntitiesRelease' when calling releasePostRelease(Async)");
        }

        return releasePostReleaseCall(contentSubmissionSharedBusinessEntitiesRelease, _callback);

    }

    /**
     * Create a Release
     * Creates a Release.  The body of the POST is the Release to create.              The ReleaseId will be assigned on creation of the Job.  When successful, the response              is the Release Id.  If unsuccessful, an appropriate ApiError is returned.
     * @param contentSubmissionSharedBusinessEntitiesRelease The Release to create. (required)
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public Integer releasePostRelease(ContentSubmissionSharedBusinessEntitiesRelease contentSubmissionSharedBusinessEntitiesRelease) throws ApiException {
        ApiResponse<Integer> localVarResp = releasePostReleaseWithHttpInfo(contentSubmissionSharedBusinessEntitiesRelease);
        return localVarResp.getData();
    }

    /**
     * Create a Release
     * Creates a Release.  The body of the POST is the Release to create.              The ReleaseId will be assigned on creation of the Job.  When successful, the response              is the Release Id.  If unsuccessful, an appropriate ApiError is returned.
     * @param contentSubmissionSharedBusinessEntitiesRelease The Release to create. (required)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Integer> releasePostReleaseWithHttpInfo(ContentSubmissionSharedBusinessEntitiesRelease contentSubmissionSharedBusinessEntitiesRelease) throws ApiException {
        okhttp3.Call localVarCall = releasePostReleaseValidateBeforeCall(contentSubmissionSharedBusinessEntitiesRelease, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a Release (asynchronously)
     * Creates a Release.  The body of the POST is the Release to create.              The ReleaseId will be assigned on creation of the Job.  When successful, the response              is the Release Id.  If unsuccessful, an appropriate ApiError is returned.
     * @param contentSubmissionSharedBusinessEntitiesRelease The Release to create. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call releasePostReleaseAsync(ContentSubmissionSharedBusinessEntitiesRelease contentSubmissionSharedBusinessEntitiesRelease, final ApiCallback<Integer> _callback) throws ApiException {

        okhttp3.Call localVarCall = releasePostReleaseValidateBeforeCall(contentSubmissionSharedBusinessEntitiesRelease, _callback);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for releasePostReleaseBundle
     * @param releaseId The release identifier. (required)
     * @param bundleId The bundle identifier. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call releasePostReleaseBundleCall(Integer releaseId, String bundleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/Releases/{ReleaseId}/Bundle/{BundleId}"
            .replace("{" + "ReleaseId" + "}", localVarApiClient.escapeString(releaseId.toString()))
            .replace("{" + "BundleId" + "}", localVarApiClient.escapeString(bundleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call releasePostReleaseBundleValidateBeforeCall(Integer releaseId, String bundleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'releaseId' is set
        if (releaseId == null) {
            throw new ApiException("Missing the required parameter 'releaseId' when calling releasePostReleaseBundle(Async)");
        }

        // verify the required parameter 'bundleId' is set
        if (bundleId == null) {
            throw new ApiException("Missing the required parameter 'bundleId' when calling releasePostReleaseBundle(Async)");
        }

        return releasePostReleaseBundleCall(releaseId, bundleId, _callback);

    }

    /**
     * Associates the release with a bundle.
     * No Documentation Found.
     * @param releaseId The release identifier. (required)
     * @param bundleId The bundle identifier. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public void releasePostReleaseBundle(Integer releaseId, String bundleId) throws ApiException {
        releasePostReleaseBundleWithHttpInfo(releaseId, bundleId);
    }

    /**
     * Associates the release with a bundle.
     * No Documentation Found.
     * @param releaseId The release identifier. (required)
     * @param bundleId The bundle identifier. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> releasePostReleaseBundleWithHttpInfo(Integer releaseId, String bundleId) throws ApiException {
        okhttp3.Call localVarCall = releasePostReleaseBundleValidateBeforeCall(releaseId, bundleId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Associates the release with a bundle. (asynchronously)
     * No Documentation Found.
     * @param releaseId The release identifier. (required)
     * @param bundleId The bundle identifier. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call releasePostReleaseBundleAsync(Integer releaseId, String bundleId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = releasePostReleaseBundleValidateBeforeCall(releaseId, bundleId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for releasePutContentDefinition
     * @param releaseId The ID of the Release to update (required)
     * @param contentSubmissionSharedBusinessEntitiesRelease The updated Release (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call releasePutContentDefinitionCall(Integer releaseId, ContentSubmissionSharedBusinessEntitiesRelease contentSubmissionSharedBusinessEntitiesRelease, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contentSubmissionSharedBusinessEntitiesRelease;

        // create path and map variables
        String localVarPath = "/api/v2/Releases/{releaseId}"
            .replace("{" + "releaseId" + "}", localVarApiClient.escapeString(releaseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call releasePutContentDefinitionValidateBeforeCall(Integer releaseId, ContentSubmissionSharedBusinessEntitiesRelease contentSubmissionSharedBusinessEntitiesRelease, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'releaseId' is set
        if (releaseId == null) {
            throw new ApiException("Missing the required parameter 'releaseId' when calling releasePutContentDefinition(Async)");
        }

        // verify the required parameter 'contentSubmissionSharedBusinessEntitiesRelease' is set
        if (contentSubmissionSharedBusinessEntitiesRelease == null) {
            throw new ApiException("Missing the required parameter 'contentSubmissionSharedBusinessEntitiesRelease' when calling releasePutContentDefinition(Async)");
        }

        return releasePutContentDefinitionCall(releaseId, contentSubmissionSharedBusinessEntitiesRelease, _callback);

    }

    /**
     * Update a Release
     * Updates a Release.  The body of the PUT is the updated Release.                When successful, the response is empty.  If unsuccessful, an appropriate ApiError is returned.
     * @param releaseId The ID of the Release to update (required)
     * @param contentSubmissionSharedBusinessEntitiesRelease The updated Release (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public void releasePutContentDefinition(Integer releaseId, ContentSubmissionSharedBusinessEntitiesRelease contentSubmissionSharedBusinessEntitiesRelease) throws ApiException {
        releasePutContentDefinitionWithHttpInfo(releaseId, contentSubmissionSharedBusinessEntitiesRelease);
    }

    /**
     * Update a Release
     * Updates a Release.  The body of the PUT is the updated Release.                When successful, the response is empty.  If unsuccessful, an appropriate ApiError is returned.
     * @param releaseId The ID of the Release to update (required)
     * @param contentSubmissionSharedBusinessEntitiesRelease The updated Release (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> releasePutContentDefinitionWithHttpInfo(Integer releaseId, ContentSubmissionSharedBusinessEntitiesRelease contentSubmissionSharedBusinessEntitiesRelease) throws ApiException {
        okhttp3.Call localVarCall = releasePutContentDefinitionValidateBeforeCall(releaseId, contentSubmissionSharedBusinessEntitiesRelease, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update a Release (asynchronously)
     * Updates a Release.  The body of the PUT is the updated Release.                When successful, the response is empty.  If unsuccessful, an appropriate ApiError is returned.
     * @param releaseId The ID of the Release to update (required)
     * @param contentSubmissionSharedBusinessEntitiesRelease The updated Release (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call releasePutContentDefinitionAsync(Integer releaseId, ContentSubmissionSharedBusinessEntitiesRelease contentSubmissionSharedBusinessEntitiesRelease, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = releasePutContentDefinitionValidateBeforeCall(releaseId, contentSubmissionSharedBusinessEntitiesRelease, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
