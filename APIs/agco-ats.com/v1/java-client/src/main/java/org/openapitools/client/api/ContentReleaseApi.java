/*
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.APIModelsApiError;
import org.openapitools.client.model.APIPagedResponseContentSubmissionSharedBusinessEntitiesContentReleaseVersion;
import org.openapitools.client.model.ContentSubmissionSharedBusinessEntitiesContentReleaseVersion;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ContentReleaseApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ContentReleaseApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ContentReleaseApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiV2ContentReleasesContentReleaseIdGet
     * @param contentReleaseId The ID of the ContentReleaseVersion to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2ContentReleasesContentReleaseIdGetCall(Integer contentReleaseId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/ContentReleases/{ContentReleaseId}"
            .replace("{" + "ContentReleaseId" + "}", localVarApiClient.escapeString(contentReleaseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2ContentReleasesContentReleaseIdGetValidateBeforeCall(Integer contentReleaseId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentReleaseId' is set
        if (contentReleaseId == null) {
            throw new ApiException("Missing the required parameter 'contentReleaseId' when calling apiV2ContentReleasesContentReleaseIdGet(Async)");
        }

        return apiV2ContentReleasesContentReleaseIdGetCall(contentReleaseId, _callback);

    }

    /**
     * Get a Content Release Version by ID
     * Gets a ContentReleaseVersion by ID. When successful, the response is the requested ContentReleaseVersion.              If unsuccessful, an appropriate ApiError is returned.
     * @param contentReleaseId The ID of the ContentReleaseVersion to get. (required)
     * @return ContentSubmissionSharedBusinessEntitiesContentReleaseVersion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ContentSubmissionSharedBusinessEntitiesContentReleaseVersion apiV2ContentReleasesContentReleaseIdGet(Integer contentReleaseId) throws ApiException {
        ApiResponse<ContentSubmissionSharedBusinessEntitiesContentReleaseVersion> localVarResp = apiV2ContentReleasesContentReleaseIdGetWithHttpInfo(contentReleaseId);
        return localVarResp.getData();
    }

    /**
     * Get a Content Release Version by ID
     * Gets a ContentReleaseVersion by ID. When successful, the response is the requested ContentReleaseVersion.              If unsuccessful, an appropriate ApiError is returned.
     * @param contentReleaseId The ID of the ContentReleaseVersion to get. (required)
     * @return ApiResponse&lt;ContentSubmissionSharedBusinessEntitiesContentReleaseVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContentSubmissionSharedBusinessEntitiesContentReleaseVersion> apiV2ContentReleasesContentReleaseIdGetWithHttpInfo(Integer contentReleaseId) throws ApiException {
        okhttp3.Call localVarCall = apiV2ContentReleasesContentReleaseIdGetValidateBeforeCall(contentReleaseId, null);
        Type localVarReturnType = new TypeToken<ContentSubmissionSharedBusinessEntitiesContentReleaseVersion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a Content Release Version by ID (asynchronously)
     * Gets a ContentReleaseVersion by ID. When successful, the response is the requested ContentReleaseVersion.              If unsuccessful, an appropriate ApiError is returned.
     * @param contentReleaseId The ID of the ContentReleaseVersion to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2ContentReleasesContentReleaseIdGetAsync(Integer contentReleaseId, final ApiCallback<ContentSubmissionSharedBusinessEntitiesContentReleaseVersion> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2ContentReleasesContentReleaseIdGetValidateBeforeCall(contentReleaseId, _callback);
        Type localVarReturnType = new TypeToken<ContentSubmissionSharedBusinessEntitiesContentReleaseVersion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contentReleaseDeleteContentReleaseVersionn
     * @param contentReleaseId The ID of the ContentReleaseVersion to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentReleaseDeleteContentReleaseVersionnCall(Integer contentReleaseId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/ContentReleases/{ContentReleaseId}"
            .replace("{" + "ContentReleaseId" + "}", localVarApiClient.escapeString(contentReleaseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contentReleaseDeleteContentReleaseVersionnValidateBeforeCall(Integer contentReleaseId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentReleaseId' is set
        if (contentReleaseId == null) {
            throw new ApiException("Missing the required parameter 'contentReleaseId' when calling contentReleaseDeleteContentReleaseVersionn(Async)");
        }

        return contentReleaseDeleteContentReleaseVersionnCall(contentReleaseId, _callback);

    }

    /**
     * Delete a ContentReleaseVersion
     * Deletes an ContentReleaseVersion. When successful, the response is empty.  If unsuccessful, an appropriate              ApiError is returned.
     * @param contentReleaseId The ID of the ContentReleaseVersion to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public void contentReleaseDeleteContentReleaseVersionn(Integer contentReleaseId) throws ApiException {
        contentReleaseDeleteContentReleaseVersionnWithHttpInfo(contentReleaseId);
    }

    /**
     * Delete a ContentReleaseVersion
     * Deletes an ContentReleaseVersion. When successful, the response is empty.  If unsuccessful, an appropriate              ApiError is returned.
     * @param contentReleaseId The ID of the ContentReleaseVersion to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> contentReleaseDeleteContentReleaseVersionnWithHttpInfo(Integer contentReleaseId) throws ApiException {
        okhttp3.Call localVarCall = contentReleaseDeleteContentReleaseVersionnValidateBeforeCall(contentReleaseId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a ContentReleaseVersion (asynchronously)
     * Deletes an ContentReleaseVersion. When successful, the response is empty.  If unsuccessful, an appropriate              ApiError is returned.
     * @param contentReleaseId The ID of the ContentReleaseVersion to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentReleaseDeleteContentReleaseVersionnAsync(Integer contentReleaseId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = contentReleaseDeleteContentReleaseVersionnValidateBeforeCall(contentReleaseId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for contentReleaseGetContentReleaseVersion
     * @param limit Optional. The page limit.  If not specified, the default page limit is 10. (optional)
     * @param offset Optional. The page offset.  If not specified, the default page offset is 0. (optional)
     * @param deleted Optional. Filter by deleted. (optional)
     * @param releaseID Optional. Filter by releaseID. (optional)
     * @param userId Optional. Filter by UserID. (optional)
     * @param contentDefinitionID Optional. Filter by ContentDefinitionID. (optional)
     * @param version Optional. Filter by Version. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentReleaseGetContentReleaseVersionCall(Integer limit, Integer offset, Boolean deleted, Integer releaseID, Integer userId, Integer contentDefinitionID, Integer version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/ContentReleases";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (deleted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deleted", deleted));
        }

        if (releaseID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("releaseID", releaseID));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (contentDefinitionID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contentDefinitionID", contentDefinitionID));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contentReleaseGetContentReleaseVersionValidateBeforeCall(Integer limit, Integer offset, Boolean deleted, Integer releaseID, Integer userId, Integer contentDefinitionID, Integer version, final ApiCallback _callback) throws ApiException {
        return contentReleaseGetContentReleaseVersionCall(limit, offset, deleted, releaseID, userId, contentDefinitionID, version, _callback);

    }

    /**
     * Get ContentReleaseVersion
     * Gets a collection of ContentReleaseVersion. When successful, the response is a PagedResponse of ContentReleaseVersion.              If unsuccessful, an appropriate ApiError is returned.
     * @param limit Optional. The page limit.  If not specified, the default page limit is 10. (optional)
     * @param offset Optional. The page offset.  If not specified, the default page offset is 0. (optional)
     * @param deleted Optional. Filter by deleted. (optional)
     * @param releaseID Optional. Filter by releaseID. (optional)
     * @param userId Optional. Filter by UserID. (optional)
     * @param contentDefinitionID Optional. Filter by ContentDefinitionID. (optional)
     * @param version Optional. Filter by Version. (optional)
     * @return APIPagedResponseContentSubmissionSharedBusinessEntitiesContentReleaseVersion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public APIPagedResponseContentSubmissionSharedBusinessEntitiesContentReleaseVersion contentReleaseGetContentReleaseVersion(Integer limit, Integer offset, Boolean deleted, Integer releaseID, Integer userId, Integer contentDefinitionID, Integer version) throws ApiException {
        ApiResponse<APIPagedResponseContentSubmissionSharedBusinessEntitiesContentReleaseVersion> localVarResp = contentReleaseGetContentReleaseVersionWithHttpInfo(limit, offset, deleted, releaseID, userId, contentDefinitionID, version);
        return localVarResp.getData();
    }

    /**
     * Get ContentReleaseVersion
     * Gets a collection of ContentReleaseVersion. When successful, the response is a PagedResponse of ContentReleaseVersion.              If unsuccessful, an appropriate ApiError is returned.
     * @param limit Optional. The page limit.  If not specified, the default page limit is 10. (optional)
     * @param offset Optional. The page offset.  If not specified, the default page offset is 0. (optional)
     * @param deleted Optional. Filter by deleted. (optional)
     * @param releaseID Optional. Filter by releaseID. (optional)
     * @param userId Optional. Filter by UserID. (optional)
     * @param contentDefinitionID Optional. Filter by ContentDefinitionID. (optional)
     * @param version Optional. Filter by Version. (optional)
     * @return ApiResponse&lt;APIPagedResponseContentSubmissionSharedBusinessEntitiesContentReleaseVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<APIPagedResponseContentSubmissionSharedBusinessEntitiesContentReleaseVersion> contentReleaseGetContentReleaseVersionWithHttpInfo(Integer limit, Integer offset, Boolean deleted, Integer releaseID, Integer userId, Integer contentDefinitionID, Integer version) throws ApiException {
        okhttp3.Call localVarCall = contentReleaseGetContentReleaseVersionValidateBeforeCall(limit, offset, deleted, releaseID, userId, contentDefinitionID, version, null);
        Type localVarReturnType = new TypeToken<APIPagedResponseContentSubmissionSharedBusinessEntitiesContentReleaseVersion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get ContentReleaseVersion (asynchronously)
     * Gets a collection of ContentReleaseVersion. When successful, the response is a PagedResponse of ContentReleaseVersion.              If unsuccessful, an appropriate ApiError is returned.
     * @param limit Optional. The page limit.  If not specified, the default page limit is 10. (optional)
     * @param offset Optional. The page offset.  If not specified, the default page offset is 0. (optional)
     * @param deleted Optional. Filter by deleted. (optional)
     * @param releaseID Optional. Filter by releaseID. (optional)
     * @param userId Optional. Filter by UserID. (optional)
     * @param contentDefinitionID Optional. Filter by ContentDefinitionID. (optional)
     * @param version Optional. Filter by Version. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentReleaseGetContentReleaseVersionAsync(Integer limit, Integer offset, Boolean deleted, Integer releaseID, Integer userId, Integer contentDefinitionID, Integer version, final ApiCallback<APIPagedResponseContentSubmissionSharedBusinessEntitiesContentReleaseVersion> _callback) throws ApiException {

        okhttp3.Call localVarCall = contentReleaseGetContentReleaseVersionValidateBeforeCall(limit, offset, deleted, releaseID, userId, contentDefinitionID, version, _callback);
        Type localVarReturnType = new TypeToken<APIPagedResponseContentSubmissionSharedBusinessEntitiesContentReleaseVersion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contentReleasePostContentRelease
     * @param contentSubmissionSharedBusinessEntitiesContentReleaseVersion The ContentReleaseVersion to create. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentReleasePostContentReleaseCall(ContentSubmissionSharedBusinessEntitiesContentReleaseVersion contentSubmissionSharedBusinessEntitiesContentReleaseVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contentSubmissionSharedBusinessEntitiesContentReleaseVersion;

        // create path and map variables
        String localVarPath = "/api/v2/ContentReleases";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contentReleasePostContentReleaseValidateBeforeCall(ContentSubmissionSharedBusinessEntitiesContentReleaseVersion contentSubmissionSharedBusinessEntitiesContentReleaseVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentSubmissionSharedBusinessEntitiesContentReleaseVersion' is set
        if (contentSubmissionSharedBusinessEntitiesContentReleaseVersion == null) {
            throw new ApiException("Missing the required parameter 'contentSubmissionSharedBusinessEntitiesContentReleaseVersion' when calling contentReleasePostContentRelease(Async)");
        }

        return contentReleasePostContentReleaseCall(contentSubmissionSharedBusinessEntitiesContentReleaseVersion, _callback);

    }

    /**
     * Create a ContentReleaseVersion
     * Creates a ContentReleaseVersion.  The body of the POST is the ContentReleaseVersion to create.              The ContentReleaseId will be assigned on creation of the Job.  When successful, the response              is the contentReleaseId.  If unsuccessful, an appropriate ApiError is returned.
     * @param contentSubmissionSharedBusinessEntitiesContentReleaseVersion The ContentReleaseVersion to create. (required)
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public Integer contentReleasePostContentRelease(ContentSubmissionSharedBusinessEntitiesContentReleaseVersion contentSubmissionSharedBusinessEntitiesContentReleaseVersion) throws ApiException {
        ApiResponse<Integer> localVarResp = contentReleasePostContentReleaseWithHttpInfo(contentSubmissionSharedBusinessEntitiesContentReleaseVersion);
        return localVarResp.getData();
    }

    /**
     * Create a ContentReleaseVersion
     * Creates a ContentReleaseVersion.  The body of the POST is the ContentReleaseVersion to create.              The ContentReleaseId will be assigned on creation of the Job.  When successful, the response              is the contentReleaseId.  If unsuccessful, an appropriate ApiError is returned.
     * @param contentSubmissionSharedBusinessEntitiesContentReleaseVersion The ContentReleaseVersion to create. (required)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Integer> contentReleasePostContentReleaseWithHttpInfo(ContentSubmissionSharedBusinessEntitiesContentReleaseVersion contentSubmissionSharedBusinessEntitiesContentReleaseVersion) throws ApiException {
        okhttp3.Call localVarCall = contentReleasePostContentReleaseValidateBeforeCall(contentSubmissionSharedBusinessEntitiesContentReleaseVersion, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a ContentReleaseVersion (asynchronously)
     * Creates a ContentReleaseVersion.  The body of the POST is the ContentReleaseVersion to create.              The ContentReleaseId will be assigned on creation of the Job.  When successful, the response              is the contentReleaseId.  If unsuccessful, an appropriate ApiError is returned.
     * @param contentSubmissionSharedBusinessEntitiesContentReleaseVersion The ContentReleaseVersion to create. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentReleasePostContentReleaseAsync(ContentSubmissionSharedBusinessEntitiesContentReleaseVersion contentSubmissionSharedBusinessEntitiesContentReleaseVersion, final ApiCallback<Integer> _callback) throws ApiException {

        okhttp3.Call localVarCall = contentReleasePostContentReleaseValidateBeforeCall(contentSubmissionSharedBusinessEntitiesContentReleaseVersion, _callback);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contentReleasePutContentDefinition
     * @param contentReleaseId The ID of the ContentReleaseVersion to update (required)
     * @param contentSubmissionSharedBusinessEntitiesContentReleaseVersion The updated ContentReleaseVersion (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentReleasePutContentDefinitionCall(Integer contentReleaseId, ContentSubmissionSharedBusinessEntitiesContentReleaseVersion contentSubmissionSharedBusinessEntitiesContentReleaseVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contentSubmissionSharedBusinessEntitiesContentReleaseVersion;

        // create path and map variables
        String localVarPath = "/api/v2/ContentReleases/{ContentReleaseId}"
            .replace("{" + "ContentReleaseId" + "}", localVarApiClient.escapeString(contentReleaseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contentReleasePutContentDefinitionValidateBeforeCall(Integer contentReleaseId, ContentSubmissionSharedBusinessEntitiesContentReleaseVersion contentSubmissionSharedBusinessEntitiesContentReleaseVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentReleaseId' is set
        if (contentReleaseId == null) {
            throw new ApiException("Missing the required parameter 'contentReleaseId' when calling contentReleasePutContentDefinition(Async)");
        }

        // verify the required parameter 'contentSubmissionSharedBusinessEntitiesContentReleaseVersion' is set
        if (contentSubmissionSharedBusinessEntitiesContentReleaseVersion == null) {
            throw new ApiException("Missing the required parameter 'contentSubmissionSharedBusinessEntitiesContentReleaseVersion' when calling contentReleasePutContentDefinition(Async)");
        }

        return contentReleasePutContentDefinitionCall(contentReleaseId, contentSubmissionSharedBusinessEntitiesContentReleaseVersion, _callback);

    }

    /**
     * Update a ContentReleaseVersion
     * Updates a ContentReleaseVersion.  The body of the PUT is the updated ContentReleaseVersion.                When successful, the response is empty.  If unsuccessful, an appropriate ApiError is returned.
     * @param contentReleaseId The ID of the ContentReleaseVersion to update (required)
     * @param contentSubmissionSharedBusinessEntitiesContentReleaseVersion The updated ContentReleaseVersion (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public void contentReleasePutContentDefinition(Integer contentReleaseId, ContentSubmissionSharedBusinessEntitiesContentReleaseVersion contentSubmissionSharedBusinessEntitiesContentReleaseVersion) throws ApiException {
        contentReleasePutContentDefinitionWithHttpInfo(contentReleaseId, contentSubmissionSharedBusinessEntitiesContentReleaseVersion);
    }

    /**
     * Update a ContentReleaseVersion
     * Updates a ContentReleaseVersion.  The body of the PUT is the updated ContentReleaseVersion.                When successful, the response is empty.  If unsuccessful, an appropriate ApiError is returned.
     * @param contentReleaseId The ID of the ContentReleaseVersion to update (required)
     * @param contentSubmissionSharedBusinessEntitiesContentReleaseVersion The updated ContentReleaseVersion (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> contentReleasePutContentDefinitionWithHttpInfo(Integer contentReleaseId, ContentSubmissionSharedBusinessEntitiesContentReleaseVersion contentSubmissionSharedBusinessEntitiesContentReleaseVersion) throws ApiException {
        okhttp3.Call localVarCall = contentReleasePutContentDefinitionValidateBeforeCall(contentReleaseId, contentSubmissionSharedBusinessEntitiesContentReleaseVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update a ContentReleaseVersion (asynchronously)
     * Updates a ContentReleaseVersion.  The body of the PUT is the updated ContentReleaseVersion.                When successful, the response is empty.  If unsuccessful, an appropriate ApiError is returned.
     * @param contentReleaseId The ID of the ContentReleaseVersion to update (required)
     * @param contentSubmissionSharedBusinessEntitiesContentReleaseVersion The updated ContentReleaseVersion (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentReleasePutContentDefinitionAsync(Integer contentReleaseId, ContentSubmissionSharedBusinessEntitiesContentReleaseVersion contentSubmissionSharedBusinessEntitiesContentReleaseVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = contentReleasePutContentDefinitionValidateBeforeCall(contentReleaseId, contentSubmissionSharedBusinessEntitiesContentReleaseVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
