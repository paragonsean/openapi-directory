/*
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.APIModelsApiError;
import org.openapitools.client.model.APIPagedResponseBuildSystemSharedDTOActivity;
import org.openapitools.client.model.BuildSystemSharedDTOActivity;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ActivitiesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ActivitiesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ActivitiesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for activitiesDeleteActivity
     * @param activityID The id of the activity to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activitiesDeleteActivityCall(Integer activityID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/activities/{activityID}"
            .replace("{" + "activityID" + "}", localVarApiClient.escapeString(activityID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activitiesDeleteActivityValidateBeforeCall(Integer activityID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'activityID' is set
        if (activityID == null) {
            throw new ApiException("Missing the required parameter 'activityID' when calling activitiesDeleteActivity(Async)");
        }

        return activitiesDeleteActivityCall(activityID, _callback);

    }

    /**
     * Mark the delete flag for the Activity
     * Deletes an Activity. When successful, the response is empty.  If unsuccessful, an appropriate              ApiError is returned.
     * @param activityID The id of the activity to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public void activitiesDeleteActivity(Integer activityID) throws ApiException {
        activitiesDeleteActivityWithHttpInfo(activityID);
    }

    /**
     * Mark the delete flag for the Activity
     * Deletes an Activity. When successful, the response is empty.  If unsuccessful, an appropriate              ApiError is returned.
     * @param activityID The id of the activity to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> activitiesDeleteActivityWithHttpInfo(Integer activityID) throws ApiException {
        okhttp3.Call localVarCall = activitiesDeleteActivityValidateBeforeCall(activityID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Mark the delete flag for the Activity (asynchronously)
     * Deletes an Activity. When successful, the response is empty.  If unsuccessful, an appropriate              ApiError is returned.
     * @param activityID The id of the activity to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activitiesDeleteActivityAsync(Integer activityID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = activitiesDeleteActivityValidateBeforeCall(activityID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for activitiesGetActivities
     * @param limit Optional. The page limit.  If not specified, the default page limit is 10. (optional)
     * @param offset Optional. The page offset.  If not specified, the default page offset is 0. (optional)
     * @param isIncludeDeleted Does it include deleted activity, or not (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activitiesGetActivitiesCall(Integer limit, Integer offset, Boolean isIncludeDeleted, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/activities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (isIncludeDeleted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isIncludeDeleted", isIncludeDeleted));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activitiesGetActivitiesValidateBeforeCall(Integer limit, Integer offset, Boolean isIncludeDeleted, final ApiCallback _callback) throws ApiException {
        return activitiesGetActivitiesCall(limit, offset, isIncludeDeleted, _callback);

    }

    /**
     * Get Activities
     * Gets a collection of Activities. When successful, the response is a PagedResponse of Activities.                If unsuccessful, an appropriate ApiError is returned.
     * @param limit Optional. The page limit.  If not specified, the default page limit is 10. (optional)
     * @param offset Optional. The page offset.  If not specified, the default page offset is 0. (optional)
     * @param isIncludeDeleted Does it include deleted activity, or not (optional)
     * @return APIPagedResponseBuildSystemSharedDTOActivity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public APIPagedResponseBuildSystemSharedDTOActivity activitiesGetActivities(Integer limit, Integer offset, Boolean isIncludeDeleted) throws ApiException {
        ApiResponse<APIPagedResponseBuildSystemSharedDTOActivity> localVarResp = activitiesGetActivitiesWithHttpInfo(limit, offset, isIncludeDeleted);
        return localVarResp.getData();
    }

    /**
     * Get Activities
     * Gets a collection of Activities. When successful, the response is a PagedResponse of Activities.                If unsuccessful, an appropriate ApiError is returned.
     * @param limit Optional. The page limit.  If not specified, the default page limit is 10. (optional)
     * @param offset Optional. The page offset.  If not specified, the default page offset is 0. (optional)
     * @param isIncludeDeleted Does it include deleted activity, or not (optional)
     * @return ApiResponse&lt;APIPagedResponseBuildSystemSharedDTOActivity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<APIPagedResponseBuildSystemSharedDTOActivity> activitiesGetActivitiesWithHttpInfo(Integer limit, Integer offset, Boolean isIncludeDeleted) throws ApiException {
        okhttp3.Call localVarCall = activitiesGetActivitiesValidateBeforeCall(limit, offset, isIncludeDeleted, null);
        Type localVarReturnType = new TypeToken<APIPagedResponseBuildSystemSharedDTOActivity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Activities (asynchronously)
     * Gets a collection of Activities. When successful, the response is a PagedResponse of Activities.                If unsuccessful, an appropriate ApiError is returned.
     * @param limit Optional. The page limit.  If not specified, the default page limit is 10. (optional)
     * @param offset Optional. The page offset.  If not specified, the default page offset is 0. (optional)
     * @param isIncludeDeleted Does it include deleted activity, or not (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activitiesGetActivitiesAsync(Integer limit, Integer offset, Boolean isIncludeDeleted, final ApiCallback<APIPagedResponseBuildSystemSharedDTOActivity> _callback) throws ApiException {

        okhttp3.Call localVarCall = activitiesGetActivitiesValidateBeforeCall(limit, offset, isIncludeDeleted, _callback);
        Type localVarReturnType = new TypeToken<APIPagedResponseBuildSystemSharedDTOActivity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for activitiesGetActivity
     * @param activityID The ID of the Activity to get. (required)
     * @param isIncludeDeleted Does it include deleted activity, or not (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activitiesGetActivityCall(Integer activityID, Boolean isIncludeDeleted, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/activities/{activityID}"
            .replace("{" + "activityID" + "}", localVarApiClient.escapeString(activityID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (isIncludeDeleted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isIncludeDeleted", isIncludeDeleted));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activitiesGetActivityValidateBeforeCall(Integer activityID, Boolean isIncludeDeleted, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'activityID' is set
        if (activityID == null) {
            throw new ApiException("Missing the required parameter 'activityID' when calling activitiesGetActivity(Async)");
        }

        return activitiesGetActivityCall(activityID, isIncludeDeleted, _callback);

    }

    /**
     * Get an Activity by ID
     * Gets an Activity by ID. When successful, the response is the requested Activity.  If unsuccessful,              an appropriate ApiError is returned.
     * @param activityID The ID of the Activity to get. (required)
     * @param isIncludeDeleted Does it include deleted activity, or not (optional)
     * @return BuildSystemSharedDTOActivity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public BuildSystemSharedDTOActivity activitiesGetActivity(Integer activityID, Boolean isIncludeDeleted) throws ApiException {
        ApiResponse<BuildSystemSharedDTOActivity> localVarResp = activitiesGetActivityWithHttpInfo(activityID, isIncludeDeleted);
        return localVarResp.getData();
    }

    /**
     * Get an Activity by ID
     * Gets an Activity by ID. When successful, the response is the requested Activity.  If unsuccessful,              an appropriate ApiError is returned.
     * @param activityID The ID of the Activity to get. (required)
     * @param isIncludeDeleted Does it include deleted activity, or not (optional)
     * @return ApiResponse&lt;BuildSystemSharedDTOActivity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BuildSystemSharedDTOActivity> activitiesGetActivityWithHttpInfo(Integer activityID, Boolean isIncludeDeleted) throws ApiException {
        okhttp3.Call localVarCall = activitiesGetActivityValidateBeforeCall(activityID, isIncludeDeleted, null);
        Type localVarReturnType = new TypeToken<BuildSystemSharedDTOActivity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an Activity by ID (asynchronously)
     * Gets an Activity by ID. When successful, the response is the requested Activity.  If unsuccessful,              an appropriate ApiError is returned.
     * @param activityID The ID of the Activity to get. (required)
     * @param isIncludeDeleted Does it include deleted activity, or not (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activitiesGetActivityAsync(Integer activityID, Boolean isIncludeDeleted, final ApiCallback<BuildSystemSharedDTOActivity> _callback) throws ApiException {

        okhttp3.Call localVarCall = activitiesGetActivityValidateBeforeCall(activityID, isIncludeDeleted, _callback);
        Type localVarReturnType = new TypeToken<BuildSystemSharedDTOActivity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for activitiesPostActivity
     * @param buildSystemSharedDTOActivity The activity to create.  The ActivityID will be assigned on creation of the Activity. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activitiesPostActivityCall(BuildSystemSharedDTOActivity buildSystemSharedDTOActivity, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = buildSystemSharedDTOActivity;

        // create path and map variables
        String localVarPath = "/api/v2/activities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activitiesPostActivityValidateBeforeCall(BuildSystemSharedDTOActivity buildSystemSharedDTOActivity, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'buildSystemSharedDTOActivity' is set
        if (buildSystemSharedDTOActivity == null) {
            throw new ApiException("Missing the required parameter 'buildSystemSharedDTOActivity' when calling activitiesPostActivity(Async)");
        }

        return activitiesPostActivityCall(buildSystemSharedDTOActivity, _callback);

    }

    /**
     * Create an Activity
     * Creates an Activity.  The body of the POST is the Activity to create.  The ActivityID will be assigned              on creation of the Activity.  When successful, the response is the ActivityID.  If unsuccessful, an               appropriate ApiError is returned.
     * @param buildSystemSharedDTOActivity The activity to create.  The ActivityID will be assigned on creation of the Activity. (required)
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public Integer activitiesPostActivity(BuildSystemSharedDTOActivity buildSystemSharedDTOActivity) throws ApiException {
        ApiResponse<Integer> localVarResp = activitiesPostActivityWithHttpInfo(buildSystemSharedDTOActivity);
        return localVarResp.getData();
    }

    /**
     * Create an Activity
     * Creates an Activity.  The body of the POST is the Activity to create.  The ActivityID will be assigned              on creation of the Activity.  When successful, the response is the ActivityID.  If unsuccessful, an               appropriate ApiError is returned.
     * @param buildSystemSharedDTOActivity The activity to create.  The ActivityID will be assigned on creation of the Activity. (required)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Integer> activitiesPostActivityWithHttpInfo(BuildSystemSharedDTOActivity buildSystemSharedDTOActivity) throws ApiException {
        okhttp3.Call localVarCall = activitiesPostActivityValidateBeforeCall(buildSystemSharedDTOActivity, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an Activity (asynchronously)
     * Creates an Activity.  The body of the POST is the Activity to create.  The ActivityID will be assigned              on creation of the Activity.  When successful, the response is the ActivityID.  If unsuccessful, an               appropriate ApiError is returned.
     * @param buildSystemSharedDTOActivity The activity to create.  The ActivityID will be assigned on creation of the Activity. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activitiesPostActivityAsync(BuildSystemSharedDTOActivity buildSystemSharedDTOActivity, final ApiCallback<Integer> _callback) throws ApiException {

        okhttp3.Call localVarCall = activitiesPostActivityValidateBeforeCall(buildSystemSharedDTOActivity, _callback);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for activitiesPutActivity
     * @param activityID The id of the activity to update (required)
     * @param buildSystemSharedDTOActivity The updated activity (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activitiesPutActivityCall(Integer activityID, BuildSystemSharedDTOActivity buildSystemSharedDTOActivity, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = buildSystemSharedDTOActivity;

        // create path and map variables
        String localVarPath = "/api/v2/activities/{activityID}"
            .replace("{" + "activityID" + "}", localVarApiClient.escapeString(activityID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activitiesPutActivityValidateBeforeCall(Integer activityID, BuildSystemSharedDTOActivity buildSystemSharedDTOActivity, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'activityID' is set
        if (activityID == null) {
            throw new ApiException("Missing the required parameter 'activityID' when calling activitiesPutActivity(Async)");
        }

        // verify the required parameter 'buildSystemSharedDTOActivity' is set
        if (buildSystemSharedDTOActivity == null) {
            throw new ApiException("Missing the required parameter 'buildSystemSharedDTOActivity' when calling activitiesPutActivity(Async)");
        }

        return activitiesPutActivityCall(activityID, buildSystemSharedDTOActivity, _callback);

    }

    /**
     * Update an Activity
     * Updates an Activity.  The body of the PUT is the updated Activity.  When successful, the response is empty.              If unsuccessful, an appropriate ApiError is returned.
     * @param activityID The id of the activity to update (required)
     * @param buildSystemSharedDTOActivity The updated activity (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public void activitiesPutActivity(Integer activityID, BuildSystemSharedDTOActivity buildSystemSharedDTOActivity) throws ApiException {
        activitiesPutActivityWithHttpInfo(activityID, buildSystemSharedDTOActivity);
    }

    /**
     * Update an Activity
     * Updates an Activity.  The body of the PUT is the updated Activity.  When successful, the response is empty.              If unsuccessful, an appropriate ApiError is returned.
     * @param activityID The id of the activity to update (required)
     * @param buildSystemSharedDTOActivity The updated activity (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> activitiesPutActivityWithHttpInfo(Integer activityID, BuildSystemSharedDTOActivity buildSystemSharedDTOActivity) throws ApiException {
        okhttp3.Call localVarCall = activitiesPutActivityValidateBeforeCall(activityID, buildSystemSharedDTOActivity, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update an Activity (asynchronously)
     * Updates an Activity.  The body of the PUT is the updated Activity.  When successful, the response is empty.              If unsuccessful, an appropriate ApiError is returned.
     * @param activityID The id of the activity to update (required)
     * @param buildSystemSharedDTOActivity The updated activity (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> API Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activitiesPutActivityAsync(Integer activityID, BuildSystemSharedDTOActivity buildSystemSharedDTOActivity, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = activitiesPutActivityValidateBeforeCall(activityID, buildSystemSharedDTOActivity, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
