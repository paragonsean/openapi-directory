/*
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A voucher for EDT activation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:35.511967-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DealerDBModelsVoucher {
  public static final String SERIALIZED_NAME_CREATED_DATE = "CreatedDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private OffsetDateTime createdDate;

  public static final String SERIALIZED_NAME_DEALER_CODE = "DealerCode";
  @SerializedName(SERIALIZED_NAME_DEALER_CODE)
  private String dealerCode;

  public static final String SERIALIZED_NAME_DELETED = "Deleted";
  @SerializedName(SERIALIZED_NAME_DELETED)
  private Boolean deleted;

  public static final String SERIALIZED_NAME_EMAIL = "Email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_EXPIRATION_DATE = "ExpirationDate";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_DATE)
  private OffsetDateTime expirationDate;

  public static final String SERIALIZED_NAME_LICENSE_TO = "LicenseTo";
  @SerializedName(SERIALIZED_NAME_LICENSE_TO)
  private String licenseTo;

  public static final String SERIALIZED_NAME_MODIFIED_BY = "ModifiedBy";
  @SerializedName(SERIALIZED_NAME_MODIFIED_BY)
  private String modifiedBy;

  public static final String SERIALIZED_NAME_ORDER_NUMBER = "OrderNumber";
  @SerializedName(SERIALIZED_NAME_ORDER_NUMBER)
  private String orderNumber;

  public static final String SERIALIZED_NAME_PUNCHED = "Punched";
  @SerializedName(SERIALIZED_NAME_PUNCHED)
  private Boolean punched;

  public static final String SERIALIZED_NAME_PUNCHED_DATE = "PunchedDate";
  @SerializedName(SERIALIZED_NAME_PUNCHED_DATE)
  private OffsetDateTime punchedDate;

  public static final String SERIALIZED_NAME_PURPOSE = "Purpose";
  @SerializedName(SERIALIZED_NAME_PURPOSE)
  private String purpose;

  /**
   * The type of voucher. Commercial is the default if not specified.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    COMMERCIAL("Commercial"),
    
    INTERNAL("Internal"),
    
    TEMPORARY("Temporary"),
    
    RIGHT_TO_REPAIR("RightToRepair");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_VOUCHER_CODE = "VoucherCode";
  @SerializedName(SERIALIZED_NAME_VOUCHER_CODE)
  private String voucherCode;

  public DealerDBModelsVoucher() {
  }

  public DealerDBModelsVoucher createdDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
    return this;
  }

  /**
   * Read-Only. The date the voucher was created.
   * @return createdDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedDate() {
    return createdDate;
  }

  public void setCreatedDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
  }


  public DealerDBModelsVoucher dealerCode(String dealerCode) {
    this.dealerCode = dealerCode;
    return this;
  }

  /**
   * The dealer code the voucher is assigned to.  Required for commercial and right to repair vouchers.
   * @return dealerCode
   */
  @javax.annotation.Nullable
  public String getDealerCode() {
    return dealerCode;
  }

  public void setDealerCode(String dealerCode) {
    this.dealerCode = dealerCode;
  }


  public DealerDBModelsVoucher deleted(Boolean deleted) {
    this.deleted = deleted;
    return this;
  }

  /**
   * Read-Only. True if voucher has been deleted.
   * @return deleted
   */
  @javax.annotation.Nullable
  public Boolean getDeleted() {
    return deleted;
  }

  public void setDeleted(Boolean deleted) {
    this.deleted = deleted;
  }


  public DealerDBModelsVoucher email(String email) {
    this.email = email;
    return this;
  }

  /**
   * Required for internal vouchers.
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public DealerDBModelsVoucher expirationDate(OffsetDateTime expirationDate) {
    this.expirationDate = expirationDate;
    return this;
  }

  /**
   * The expiration date of the voucher. Required for Temporary and Right to Repair Vouchers.
   * @return expirationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExpirationDate() {
    return expirationDate;
  }

  public void setExpirationDate(OffsetDateTime expirationDate) {
    this.expirationDate = expirationDate;
  }


  public DealerDBModelsVoucher licenseTo(String licenseTo) {
    this.licenseTo = licenseTo;
    return this;
  }

  /**
   * Required for Internal Vouchers
   * @return licenseTo
   */
  @javax.annotation.Nullable
  public String getLicenseTo() {
    return licenseTo;
  }

  public void setLicenseTo(String licenseTo) {
    this.licenseTo = licenseTo;
  }


  public DealerDBModelsVoucher modifiedBy(String modifiedBy) {
    this.modifiedBy = modifiedBy;
    return this;
  }

  /**
   * Read-Only. The user that made the last modification to the voucher.
   * @return modifiedBy
   */
  @javax.annotation.Nullable
  public String getModifiedBy() {
    return modifiedBy;
  }

  public void setModifiedBy(String modifiedBy) {
    this.modifiedBy = modifiedBy;
  }


  public DealerDBModelsVoucher orderNumber(String orderNumber) {
    this.orderNumber = orderNumber;
    return this;
  }

  /**
   * The order number of a license. Required for Commercial and Right To Repair Vouchers. Not supported for other Vouchers.
   * @return orderNumber
   */
  @javax.annotation.Nullable
  public String getOrderNumber() {
    return orderNumber;
  }

  public void setOrderNumber(String orderNumber) {
    this.orderNumber = orderNumber;
  }


  public DealerDBModelsVoucher punched(Boolean punched) {
    this.punched = punched;
    return this;
  }

  /**
   * True if voucher has aleady been used.  False if the voucher has not been used.
   * @return punched
   */
  @javax.annotation.Nullable
  public Boolean getPunched() {
    return punched;
  }

  public void setPunched(Boolean punched) {
    this.punched = punched;
  }


  public DealerDBModelsVoucher punchedDate(OffsetDateTime punchedDate) {
    this.punchedDate = punchedDate;
    return this;
  }

  /**
   * Read-Only. The date the voucher was punched.
   * @return punchedDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getPunchedDate() {
    return punchedDate;
  }

  public void setPunchedDate(OffsetDateTime punchedDate) {
    this.punchedDate = punchedDate;
  }


  public DealerDBModelsVoucher purpose(String purpose) {
    this.purpose = purpose;
    return this;
  }

  /**
   * Required for Internal Vouchers. Not supported for other Vouchers.
   * @return purpose
   */
  @javax.annotation.Nullable
  public String getPurpose() {
    return purpose;
  }

  public void setPurpose(String purpose) {
    this.purpose = purpose;
  }


  public DealerDBModelsVoucher type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The type of voucher. Commercial is the default if not specified.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public DealerDBModelsVoucher voucherCode(String voucherCode) {
    this.voucherCode = voucherCode;
    return this;
  }

  /**
   * The voucher code.
   * @return voucherCode
   */
  @javax.annotation.Nullable
  public String getVoucherCode() {
    return voucherCode;
  }

  public void setVoucherCode(String voucherCode) {
    this.voucherCode = voucherCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DealerDBModelsVoucher dealerDBModelsVoucher = (DealerDBModelsVoucher) o;
    return Objects.equals(this.createdDate, dealerDBModelsVoucher.createdDate) &&
        Objects.equals(this.dealerCode, dealerDBModelsVoucher.dealerCode) &&
        Objects.equals(this.deleted, dealerDBModelsVoucher.deleted) &&
        Objects.equals(this.email, dealerDBModelsVoucher.email) &&
        Objects.equals(this.expirationDate, dealerDBModelsVoucher.expirationDate) &&
        Objects.equals(this.licenseTo, dealerDBModelsVoucher.licenseTo) &&
        Objects.equals(this.modifiedBy, dealerDBModelsVoucher.modifiedBy) &&
        Objects.equals(this.orderNumber, dealerDBModelsVoucher.orderNumber) &&
        Objects.equals(this.punched, dealerDBModelsVoucher.punched) &&
        Objects.equals(this.punchedDate, dealerDBModelsVoucher.punchedDate) &&
        Objects.equals(this.purpose, dealerDBModelsVoucher.purpose) &&
        Objects.equals(this.type, dealerDBModelsVoucher.type) &&
        Objects.equals(this.voucherCode, dealerDBModelsVoucher.voucherCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdDate, dealerCode, deleted, email, expirationDate, licenseTo, modifiedBy, orderNumber, punched, punchedDate, purpose, type, voucherCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DealerDBModelsVoucher {\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    dealerCode: ").append(toIndentedString(dealerCode)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    expirationDate: ").append(toIndentedString(expirationDate)).append("\n");
    sb.append("    licenseTo: ").append(toIndentedString(licenseTo)).append("\n");
    sb.append("    modifiedBy: ").append(toIndentedString(modifiedBy)).append("\n");
    sb.append("    orderNumber: ").append(toIndentedString(orderNumber)).append("\n");
    sb.append("    punched: ").append(toIndentedString(punched)).append("\n");
    sb.append("    punchedDate: ").append(toIndentedString(punchedDate)).append("\n");
    sb.append("    purpose: ").append(toIndentedString(purpose)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    voucherCode: ").append(toIndentedString(voucherCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CreatedDate");
    openapiFields.add("DealerCode");
    openapiFields.add("Deleted");
    openapiFields.add("Email");
    openapiFields.add("ExpirationDate");
    openapiFields.add("LicenseTo");
    openapiFields.add("ModifiedBy");
    openapiFields.add("OrderNumber");
    openapiFields.add("Punched");
    openapiFields.add("PunchedDate");
    openapiFields.add("Purpose");
    openapiFields.add("Type");
    openapiFields.add("VoucherCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DealerDBModelsVoucher
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DealerDBModelsVoucher.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DealerDBModelsVoucher is not found in the empty JSON string", DealerDBModelsVoucher.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DealerDBModelsVoucher.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DealerDBModelsVoucher` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("DealerCode") != null && !jsonObj.get("DealerCode").isJsonNull()) && !jsonObj.get("DealerCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DealerCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DealerCode").toString()));
      }
      if ((jsonObj.get("Email") != null && !jsonObj.get("Email").isJsonNull()) && !jsonObj.get("Email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Email").toString()));
      }
      if ((jsonObj.get("LicenseTo") != null && !jsonObj.get("LicenseTo").isJsonNull()) && !jsonObj.get("LicenseTo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LicenseTo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LicenseTo").toString()));
      }
      if ((jsonObj.get("ModifiedBy") != null && !jsonObj.get("ModifiedBy").isJsonNull()) && !jsonObj.get("ModifiedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ModifiedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ModifiedBy").toString()));
      }
      if ((jsonObj.get("OrderNumber") != null && !jsonObj.get("OrderNumber").isJsonNull()) && !jsonObj.get("OrderNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OrderNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OrderNumber").toString()));
      }
      if ((jsonObj.get("Purpose") != null && !jsonObj.get("Purpose").isJsonNull()) && !jsonObj.get("Purpose").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Purpose` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Purpose").toString()));
      }
      if ((jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) && !jsonObj.get("Type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Type").toString()));
      }
      // validate the optional field `Type`
      if (jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("Type"));
      }
      if ((jsonObj.get("VoucherCode") != null && !jsonObj.get("VoucherCode").isJsonNull()) && !jsonObj.get("VoucherCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `VoucherCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("VoucherCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DealerDBModelsVoucher.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DealerDBModelsVoucher' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DealerDBModelsVoucher> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DealerDBModelsVoucher.class));

       return (TypeAdapter<T>) new TypeAdapter<DealerDBModelsVoucher>() {
           @Override
           public void write(JsonWriter out, DealerDBModelsVoucher value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DealerDBModelsVoucher read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DealerDBModelsVoucher given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DealerDBModelsVoucher
   * @throws IOException if the JSON string is invalid with respect to DealerDBModelsVoucher
   */
  public static DealerDBModelsVoucher fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DealerDBModelsVoucher.class);
  }

  /**
   * Convert an instance of DealerDBModelsVoucher to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

