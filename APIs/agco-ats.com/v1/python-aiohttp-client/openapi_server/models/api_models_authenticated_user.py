# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class APIModelsAuthenticatedUser(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email: str=None, macid: str=None, mac_token: str=None, name: str=None, token: str=None, user_id: int=None, username: str=None):
        """APIModelsAuthenticatedUser - a model defined in OpenAPI

        :param email: The email of this APIModelsAuthenticatedUser.
        :param macid: The macid of this APIModelsAuthenticatedUser.
        :param mac_token: The mac_token of this APIModelsAuthenticatedUser.
        :param name: The name of this APIModelsAuthenticatedUser.
        :param token: The token of this APIModelsAuthenticatedUser.
        :param user_id: The user_id of this APIModelsAuthenticatedUser.
        :param username: The username of this APIModelsAuthenticatedUser.
        """
        self.openapi_types = {
            'email': str,
            'macid': str,
            'mac_token': str,
            'name': str,
            'token': str,
            'user_id': int,
            'username': str
        }

        self.attribute_map = {
            'email': 'Email',
            'macid': 'MACId',
            'mac_token': 'MACToken',
            'name': 'Name',
            'token': 'Token',
            'user_id': 'UserID',
            'username': 'Username'
        }

        self._email = email
        self._macid = macid
        self._mac_token = mac_token
        self._name = name
        self._token = token
        self._user_id = user_id
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'APIModelsAuthenticatedUser':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The API.Models.AuthenticatedUser of this APIModelsAuthenticatedUser.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this APIModelsAuthenticatedUser.

        The user's email address

        :return: The email of this APIModelsAuthenticatedUser.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this APIModelsAuthenticatedUser.

        The user's email address

        :param email: The email of this APIModelsAuthenticatedUser.
        :type email: str
        """

        self._email = email

    @property
    def macid(self):
        """Gets the macid of this APIModelsAuthenticatedUser.

        The MAC identifier to use for API access

        :return: The macid of this APIModelsAuthenticatedUser.
        :rtype: str
        """
        return self._macid

    @macid.setter
    def macid(self, macid):
        """Sets the macid of this APIModelsAuthenticatedUser.

        The MAC identifier to use for API access

        :param macid: The macid of this APIModelsAuthenticatedUser.
        :type macid: str
        """

        self._macid = macid

    @property
    def mac_token(self):
        """Gets the mac_token of this APIModelsAuthenticatedUser.

        The MAC token to use for API access

        :return: The mac_token of this APIModelsAuthenticatedUser.
        :rtype: str
        """
        return self._mac_token

    @mac_token.setter
    def mac_token(self, mac_token):
        """Sets the mac_token of this APIModelsAuthenticatedUser.

        The MAC token to use for API access

        :param mac_token: The mac_token of this APIModelsAuthenticatedUser.
        :type mac_token: str
        """

        self._mac_token = mac_token

    @property
    def name(self):
        """Gets the name of this APIModelsAuthenticatedUser.

        The user's name

        :return: The name of this APIModelsAuthenticatedUser.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this APIModelsAuthenticatedUser.

        The user's name

        :param name: The name of this APIModelsAuthenticatedUser.
        :type name: str
        """

        self._name = name

    @property
    def token(self):
        """Gets the token of this APIModelsAuthenticatedUser.

        The token to use for API access

        :return: The token of this APIModelsAuthenticatedUser.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this APIModelsAuthenticatedUser.

        The token to use for API access

        :param token: The token of this APIModelsAuthenticatedUser.
        :type token: str
        """

        self._token = token

    @property
    def user_id(self):
        """Gets the user_id of this APIModelsAuthenticatedUser.

        The user ID

        :return: The user_id of this APIModelsAuthenticatedUser.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this APIModelsAuthenticatedUser.

        The user ID

        :param user_id: The user_id of this APIModelsAuthenticatedUser.
        :type user_id: int
        """

        self._user_id = user_id

    @property
    def username(self):
        """Gets the username of this APIModelsAuthenticatedUser.

        The username used for authentication

        :return: The username of this APIModelsAuthenticatedUser.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this APIModelsAuthenticatedUser.

        The username used for authentication

        :param username: The username of this APIModelsAuthenticatedUser.
        :type username: str
        """

        self._username = username
