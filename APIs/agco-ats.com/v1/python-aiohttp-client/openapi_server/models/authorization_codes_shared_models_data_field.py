# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AuthorizationCodesSharedModelsDataField(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, digits_precision: int=None, max_exponent: int=None, max_value: float=None, min_exponent: int=None, min_value: float=None, name: str=None, scale_factor: float=None, signed: bool=None, type: str=None):
        """AuthorizationCodesSharedModelsDataField - a model defined in OpenAPI

        :param digits_precision: The digits_precision of this AuthorizationCodesSharedModelsDataField.
        :param max_exponent: The max_exponent of this AuthorizationCodesSharedModelsDataField.
        :param max_value: The max_value of this AuthorizationCodesSharedModelsDataField.
        :param min_exponent: The min_exponent of this AuthorizationCodesSharedModelsDataField.
        :param min_value: The min_value of this AuthorizationCodesSharedModelsDataField.
        :param name: The name of this AuthorizationCodesSharedModelsDataField.
        :param scale_factor: The scale_factor of this AuthorizationCodesSharedModelsDataField.
        :param signed: The signed of this AuthorizationCodesSharedModelsDataField.
        :param type: The type of this AuthorizationCodesSharedModelsDataField.
        """
        self.openapi_types = {
            'digits_precision': int,
            'max_exponent': int,
            'max_value': float,
            'min_exponent': int,
            'min_value': float,
            'name': str,
            'scale_factor': float,
            'signed': bool,
            'type': str
        }

        self.attribute_map = {
            'digits_precision': 'DigitsPrecision',
            'max_exponent': 'MaxExponent',
            'max_value': 'MaxValue',
            'min_exponent': 'MinExponent',
            'min_value': 'MinValue',
            'name': 'Name',
            'scale_factor': 'ScaleFactor',
            'signed': 'Signed',
            'type': 'Type'
        }

        self._digits_precision = digits_precision
        self._max_exponent = max_exponent
        self._max_value = max_value
        self._min_exponent = min_exponent
        self._min_value = min_value
        self._name = name
        self._scale_factor = scale_factor
        self._signed = signed
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuthorizationCodesSharedModelsDataField':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AuthorizationCodes.Shared.Models.DataField of this AuthorizationCodesSharedModelsDataField.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def digits_precision(self):
        """Gets the digits_precision of this AuthorizationCodesSharedModelsDataField.

        The number of decimal digits to be used by this data field. Required only by the 'Float' data type. Must be in range 1 - 15.

        :return: The digits_precision of this AuthorizationCodesSharedModelsDataField.
        :rtype: int
        """
        return self._digits_precision

    @digits_precision.setter
    def digits_precision(self, digits_precision):
        """Sets the digits_precision of this AuthorizationCodesSharedModelsDataField.

        The number of decimal digits to be used by this data field. Required only by the 'Float' data type. Must be in range 1 - 15.

        :param digits_precision: The digits_precision of this AuthorizationCodesSharedModelsDataField.
        :type digits_precision: int
        """

        self._digits_precision = digits_precision

    @property
    def max_exponent(self):
        """Gets the max_exponent of this AuthorizationCodesSharedModelsDataField.

        The maximum exponent to be used by this data field. Required only by the 'Float' data type. May not be greater than 307.

        :return: The max_exponent of this AuthorizationCodesSharedModelsDataField.
        :rtype: int
        """
        return self._max_exponent

    @max_exponent.setter
    def max_exponent(self, max_exponent):
        """Sets the max_exponent of this AuthorizationCodesSharedModelsDataField.

        The maximum exponent to be used by this data field. Required only by the 'Float' data type. May not be greater than 307.

        :param max_exponent: The max_exponent of this AuthorizationCodesSharedModelsDataField.
        :type max_exponent: int
        """

        self._max_exponent = max_exponent

    @property
    def max_value(self):
        """Gets the max_value of this AuthorizationCodesSharedModelsDataField.

        The maximum value that can be represented by this data field. Required only by the 'Decimal' data type.

        :return: The max_value of this AuthorizationCodesSharedModelsDataField.
        :rtype: float
        """
        return self._max_value

    @max_value.setter
    def max_value(self, max_value):
        """Sets the max_value of this AuthorizationCodesSharedModelsDataField.

        The maximum value that can be represented by this data field. Required only by the 'Decimal' data type.

        :param max_value: The max_value of this AuthorizationCodesSharedModelsDataField.
        :type max_value: float
        """

        self._max_value = max_value

    @property
    def min_exponent(self):
        """Gets the min_exponent of this AuthorizationCodesSharedModelsDataField.

        The minimum exponent to be used by this data field. Required only by the 'Float' data type. May not be less than -292.

        :return: The min_exponent of this AuthorizationCodesSharedModelsDataField.
        :rtype: int
        """
        return self._min_exponent

    @min_exponent.setter
    def min_exponent(self, min_exponent):
        """Sets the min_exponent of this AuthorizationCodesSharedModelsDataField.

        The minimum exponent to be used by this data field. Required only by the 'Float' data type. May not be less than -292.

        :param min_exponent: The min_exponent of this AuthorizationCodesSharedModelsDataField.
        :type min_exponent: int
        """

        self._min_exponent = min_exponent

    @property
    def min_value(self):
        """Gets the min_value of this AuthorizationCodesSharedModelsDataField.

        The minimum value that can be represented by this data field. Required only by the 'Decimal' data type.

        :return: The min_value of this AuthorizationCodesSharedModelsDataField.
        :rtype: float
        """
        return self._min_value

    @min_value.setter
    def min_value(self, min_value):
        """Sets the min_value of this AuthorizationCodesSharedModelsDataField.

        The minimum value that can be represented by this data field. Required only by the 'Decimal' data type.

        :param min_value: The min_value of this AuthorizationCodesSharedModelsDataField.
        :type min_value: float
        """

        self._min_value = min_value

    @property
    def name(self):
        """Gets the name of this AuthorizationCodesSharedModelsDataField.

        The name of the field.

        :return: The name of this AuthorizationCodesSharedModelsDataField.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AuthorizationCodesSharedModelsDataField.

        The name of the field.

        :param name: The name of this AuthorizationCodesSharedModelsDataField.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def scale_factor(self):
        """Gets the scale_factor of this AuthorizationCodesSharedModelsDataField.

        The resolution of values that can be represented by this data field. The base value is multiplied by this to compute the final value. Required only by the 'Decimal' data type.

        :return: The scale_factor of this AuthorizationCodesSharedModelsDataField.
        :rtype: float
        """
        return self._scale_factor

    @scale_factor.setter
    def scale_factor(self, scale_factor):
        """Sets the scale_factor of this AuthorizationCodesSharedModelsDataField.

        The resolution of values that can be represented by this data field. The base value is multiplied by this to compute the final value. Required only by the 'Decimal' data type.

        :param scale_factor: The scale_factor of this AuthorizationCodesSharedModelsDataField.
        :type scale_factor: float
        """

        self._scale_factor = scale_factor

    @property
    def signed(self):
        """Gets the signed of this AuthorizationCodesSharedModelsDataField.

        Indicates whether this value is signed. Required only by the 'Float' data type.

        :return: The signed of this AuthorizationCodesSharedModelsDataField.
        :rtype: bool
        """
        return self._signed

    @signed.setter
    def signed(self, signed):
        """Sets the signed of this AuthorizationCodesSharedModelsDataField.

        Indicates whether this value is signed. Required only by the 'Float' data type.

        :param signed: The signed of this AuthorizationCodesSharedModelsDataField.
        :type signed: bool
        """

        self._signed = signed

    @property
    def type(self):
        """Gets the type of this AuthorizationCodesSharedModelsDataField.

        The type of this data field.

        :return: The type of this AuthorizationCodesSharedModelsDataField.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AuthorizationCodesSharedModelsDataField.

        The type of this data field.

        :param type: The type of this AuthorizationCodesSharedModelsDataField.
        :type type: str
        """
        allowed_values = ["Boolean", "Decimal", "Float", "VariableLengthByteArray"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
