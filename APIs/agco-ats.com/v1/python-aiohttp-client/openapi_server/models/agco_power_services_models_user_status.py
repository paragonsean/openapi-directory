# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AGCOPowerServicesModelsUserStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dealer_code: str=None, state: str=None, voucher_code: str=None):
        """AGCOPowerServicesModelsUserStatus - a model defined in OpenAPI

        :param dealer_code: The dealer_code of this AGCOPowerServicesModelsUserStatus.
        :param state: The state of this AGCOPowerServicesModelsUserStatus.
        :param voucher_code: The voucher_code of this AGCOPowerServicesModelsUserStatus.
        """
        self.openapi_types = {
            'dealer_code': str,
            'state': str,
            'voucher_code': str
        }

        self.attribute_map = {
            'dealer_code': 'DealerCode',
            'state': 'State',
            'voucher_code': 'VoucherCode'
        }

        self._dealer_code = dealer_code
        self._state = state
        self._voucher_code = voucher_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AGCOPowerServicesModelsUserStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AGCOPowerServices.Models.UserStatus of this AGCOPowerServicesModelsUserStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dealer_code(self):
        """Gets the dealer_code of this AGCOPowerServicesModelsUserStatus.

        The dealer code of the voucher

        :return: The dealer_code of this AGCOPowerServicesModelsUserStatus.
        :rtype: str
        """
        return self._dealer_code

    @dealer_code.setter
    def dealer_code(self, dealer_code):
        """Sets the dealer_code of this AGCOPowerServicesModelsUserStatus.

        The dealer code of the voucher

        :param dealer_code: The dealer_code of this AGCOPowerServicesModelsUserStatus.
        :type dealer_code: str
        """
        if dealer_code is None:
            raise ValueError("Invalid value for `dealer_code`, must not be `None`")

        self._dealer_code = dealer_code

    @property
    def state(self):
        """Gets the state of this AGCOPowerServicesModelsUserStatus.

        The state of the voucher

        :return: The state of this AGCOPowerServicesModelsUserStatus.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this AGCOPowerServicesModelsUserStatus.

        The state of the voucher

        :param state: The state of this AGCOPowerServicesModelsUserStatus.
        :type state: str
        """
        allowed_values = ["Active", "Inactive", "None"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def voucher_code(self):
        """Gets the voucher_code of this AGCOPowerServicesModelsUserStatus.

        The voucher code

        :return: The voucher_code of this AGCOPowerServicesModelsUserStatus.
        :rtype: str
        """
        return self._voucher_code

    @voucher_code.setter
    def voucher_code(self, voucher_code):
        """Sets the voucher_code of this AGCOPowerServicesModelsUserStatus.

        The voucher code

        :param voucher_code: The voucher_code of this AGCOPowerServicesModelsUserStatus.
        :type voucher_code: str
        """
        if voucher_code is None:
            raise ValueError("Invalid value for `voucher_code`, must not be `None`")

        self._voucher_code = voucher_code
