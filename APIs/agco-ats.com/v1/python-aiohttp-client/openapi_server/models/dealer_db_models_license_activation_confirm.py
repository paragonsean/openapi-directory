# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DealerDBModelsLicenseActivationConfirm(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, license_version: str=None):
        """DealerDBModelsLicenseActivationConfirm - a model defined in OpenAPI

        :param license_version: The license_version of this DealerDBModelsLicenseActivationConfirm.
        """
        self.openapi_types = {
            'license_version': str
        }

        self.attribute_map = {
            'license_version': 'LicenseVersion'
        }

        self._license_version = license_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DealerDBModelsLicenseActivationConfirm':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DealerDB.Models.LicenseActivationConfirm of this DealerDBModelsLicenseActivationConfirm.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def license_version(self):
        """Gets the license_version of this DealerDBModelsLicenseActivationConfirm.

        The license version to confirm

        :return: The license_version of this DealerDBModelsLicenseActivationConfirm.
        :rtype: str
        """
        return self._license_version

    @license_version.setter
    def license_version(self, license_version):
        """Sets the license_version of this DealerDBModelsLicenseActivationConfirm.

        The license version to confirm

        :param license_version: The license_version of this DealerDBModelsLicenseActivationConfirm.
        :type license_version: str
        """
        if license_version is None:
            raise ValueError("Invalid value for `license_version`, must not be `None`")

        self._license_version = license_version
