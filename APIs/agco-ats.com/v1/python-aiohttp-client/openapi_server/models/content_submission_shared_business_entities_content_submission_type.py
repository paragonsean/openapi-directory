# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ContentSubmissionSharedBusinessEntitiesContentSubmissionType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attribute_template: str=None, build_definition_id: int=None, category_template: str=None, description: str=None, enabled: bool=None, id: int=None, inventory_package_id: str=None, job_id: int=None, name: str=None, release_notes_description: str=None):
        """ContentSubmissionSharedBusinessEntitiesContentSubmissionType - a model defined in OpenAPI

        :param attribute_template: The attribute_template of this ContentSubmissionSharedBusinessEntitiesContentSubmissionType.
        :param build_definition_id: The build_definition_id of this ContentSubmissionSharedBusinessEntitiesContentSubmissionType.
        :param category_template: The category_template of this ContentSubmissionSharedBusinessEntitiesContentSubmissionType.
        :param description: The description of this ContentSubmissionSharedBusinessEntitiesContentSubmissionType.
        :param enabled: The enabled of this ContentSubmissionSharedBusinessEntitiesContentSubmissionType.
        :param id: The id of this ContentSubmissionSharedBusinessEntitiesContentSubmissionType.
        :param inventory_package_id: The inventory_package_id of this ContentSubmissionSharedBusinessEntitiesContentSubmissionType.
        :param job_id: The job_id of this ContentSubmissionSharedBusinessEntitiesContentSubmissionType.
        :param name: The name of this ContentSubmissionSharedBusinessEntitiesContentSubmissionType.
        :param release_notes_description: The release_notes_description of this ContentSubmissionSharedBusinessEntitiesContentSubmissionType.
        """
        self.openapi_types = {
            'attribute_template': str,
            'build_definition_id': int,
            'category_template': str,
            'description': str,
            'enabled': bool,
            'id': int,
            'inventory_package_id': str,
            'job_id': int,
            'name': str,
            'release_notes_description': str
        }

        self.attribute_map = {
            'attribute_template': 'AttributeTemplate',
            'build_definition_id': 'BuildDefinitionID',
            'category_template': 'CategoryTemplate',
            'description': 'Description',
            'enabled': 'Enabled',
            'id': 'ID',
            'inventory_package_id': 'InventoryPackageID',
            'job_id': 'JobID',
            'name': 'Name',
            'release_notes_description': 'ReleaseNotesDescription'
        }

        self._attribute_template = attribute_template
        self._build_definition_id = build_definition_id
        self._category_template = category_template
        self._description = description
        self._enabled = enabled
        self._id = id
        self._inventory_package_id = inventory_package_id
        self._job_id = job_id
        self._name = name
        self._release_notes_description = release_notes_description

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContentSubmissionSharedBusinessEntitiesContentSubmissionType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContentSubmission.Shared.BusinessEntities.ContentSubmissionType of this ContentSubmissionSharedBusinessEntitiesContentSubmissionType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attribute_template(self):
        """Gets the attribute_template of this ContentSubmissionSharedBusinessEntitiesContentSubmissionType.

        A template for the Attribute from which to read the version of the package installed. The following placeholders are valid: {ContentDefinitionType}, {ContentDefinitionID}, {ContentDefinitionName}

        :return: The attribute_template of this ContentSubmissionSharedBusinessEntitiesContentSubmissionType.
        :rtype: str
        """
        return self._attribute_template

    @attribute_template.setter
    def attribute_template(self, attribute_template):
        """Sets the attribute_template of this ContentSubmissionSharedBusinessEntitiesContentSubmissionType.

        A template for the Attribute from which to read the version of the package installed. The following placeholders are valid: {ContentDefinitionType}, {ContentDefinitionID}, {ContentDefinitionName}

        :param attribute_template: The attribute_template of this ContentSubmissionSharedBusinessEntitiesContentSubmissionType.
        :type attribute_template: str
        """

        self._attribute_template = attribute_template

    @property
    def build_definition_id(self):
        """Gets the build_definition_id of this ContentSubmissionSharedBusinessEntitiesContentSubmissionType.

        The ID of the Azure DevOps Build Definition for which to create a Build. Either 'BuildDefinitionID' or 'JobID' is required.

        :return: The build_definition_id of this ContentSubmissionSharedBusinessEntitiesContentSubmissionType.
        :rtype: int
        """
        return self._build_definition_id

    @build_definition_id.setter
    def build_definition_id(self, build_definition_id):
        """Sets the build_definition_id of this ContentSubmissionSharedBusinessEntitiesContentSubmissionType.

        The ID of the Azure DevOps Build Definition for which to create a Build. Either 'BuildDefinitionID' or 'JobID' is required.

        :param build_definition_id: The build_definition_id of this ContentSubmissionSharedBusinessEntitiesContentSubmissionType.
        :type build_definition_id: int
        """

        self._build_definition_id = build_definition_id

    @property
    def category_template(self):
        """Gets the category_template of this ContentSubmissionSharedBusinessEntitiesContentSubmissionType.

        A template for the category from which to read the version of the package installed. The following placeholders are valid: {ContentDefinitionType}, {ContentDefinitionID}, {ContentDefinitionName}

        :return: The category_template of this ContentSubmissionSharedBusinessEntitiesContentSubmissionType.
        :rtype: str
        """
        return self._category_template

    @category_template.setter
    def category_template(self, category_template):
        """Sets the category_template of this ContentSubmissionSharedBusinessEntitiesContentSubmissionType.

        A template for the category from which to read the version of the package installed. The following placeholders are valid: {ContentDefinitionType}, {ContentDefinitionID}, {ContentDefinitionName}

        :param category_template: The category_template of this ContentSubmissionSharedBusinessEntitiesContentSubmissionType.
        :type category_template: str
        """

        self._category_template = category_template

    @property
    def description(self):
        """Gets the description of this ContentSubmissionSharedBusinessEntitiesContentSubmissionType.

        A description for the Content Submission Type

        :return: The description of this ContentSubmissionSharedBusinessEntitiesContentSubmissionType.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ContentSubmissionSharedBusinessEntitiesContentSubmissionType.

        A description for the Content Submission Type

        :param description: The description of this ContentSubmissionSharedBusinessEntitiesContentSubmissionType.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def enabled(self):
        """Gets the enabled of this ContentSubmissionSharedBusinessEntitiesContentSubmissionType.

        Indicates whether this submission type is available to be used

        :return: The enabled of this ContentSubmissionSharedBusinessEntitiesContentSubmissionType.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this ContentSubmissionSharedBusinessEntitiesContentSubmissionType.

        Indicates whether this submission type is available to be used

        :param enabled: The enabled of this ContentSubmissionSharedBusinessEntitiesContentSubmissionType.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def id(self):
        """Gets the id of this ContentSubmissionSharedBusinessEntitiesContentSubmissionType.

        The ID of the Content Submission Type

        :return: The id of this ContentSubmissionSharedBusinessEntitiesContentSubmissionType.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ContentSubmissionSharedBusinessEntitiesContentSubmissionType.

        The ID of the Content Submission Type

        :param id: The id of this ContentSubmissionSharedBusinessEntitiesContentSubmissionType.
        :type id: int
        """

        self._id = id

    @property
    def inventory_package_id(self):
        """Gets the inventory_package_id of this ContentSubmissionSharedBusinessEntitiesContentSubmissionType.

        The ID of the Inventory Package from which to read the version of the package installed.

        :return: The inventory_package_id of this ContentSubmissionSharedBusinessEntitiesContentSubmissionType.
        :rtype: str
        """
        return self._inventory_package_id

    @inventory_package_id.setter
    def inventory_package_id(self, inventory_package_id):
        """Sets the inventory_package_id of this ContentSubmissionSharedBusinessEntitiesContentSubmissionType.

        The ID of the Inventory Package from which to read the version of the package installed.

        :param inventory_package_id: The inventory_package_id of this ContentSubmissionSharedBusinessEntitiesContentSubmissionType.
        :type inventory_package_id: str
        """

        self._inventory_package_id = inventory_package_id

    @property
    def job_id(self):
        """Gets the job_id of this ContentSubmissionSharedBusinessEntitiesContentSubmissionType.

        The ID of the JobDefinition for which to initiate a Job. A value of '0' will cause a submission to fail. Either 'BuildDefinitionID' or 'JobID' is required.

        :return: The job_id of this ContentSubmissionSharedBusinessEntitiesContentSubmissionType.
        :rtype: int
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this ContentSubmissionSharedBusinessEntitiesContentSubmissionType.

        The ID of the JobDefinition for which to initiate a Job. A value of '0' will cause a submission to fail. Either 'BuildDefinitionID' or 'JobID' is required.

        :param job_id: The job_id of this ContentSubmissionSharedBusinessEntitiesContentSubmissionType.
        :type job_id: int
        """

        self._job_id = job_id

    @property
    def name(self):
        """Gets the name of this ContentSubmissionSharedBusinessEntitiesContentSubmissionType.

        The Name of the Content Submission Type

        :return: The name of this ContentSubmissionSharedBusinessEntitiesContentSubmissionType.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ContentSubmissionSharedBusinessEntitiesContentSubmissionType.

        The Name of the Content Submission Type

        :param name: The name of this ContentSubmissionSharedBusinessEntitiesContentSubmissionType.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def release_notes_description(self):
        """Gets the release_notes_description of this ContentSubmissionSharedBusinessEntitiesContentSubmissionType.

        A description of how release notes for this Content Submission Type are used

        :return: The release_notes_description of this ContentSubmissionSharedBusinessEntitiesContentSubmissionType.
        :rtype: str
        """
        return self._release_notes_description

    @release_notes_description.setter
    def release_notes_description(self, release_notes_description):
        """Sets the release_notes_description of this ContentSubmissionSharedBusinessEntitiesContentSubmissionType.

        A description of how release notes for this Content Submission Type are used

        :param release_notes_description: The release_notes_description of this ContentSubmissionSharedBusinessEntitiesContentSubmissionType.
        :type release_notes_description: str
        """

        self._release_notes_description = release_notes_description
