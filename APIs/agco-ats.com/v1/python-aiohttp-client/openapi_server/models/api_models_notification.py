# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class APIModelsNotification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cc_addresses: List[str]=None, is_body_html: bool=None, message_body: str=None, subject: str=None, to_addresses: List[str]=None):
        """APIModelsNotification - a model defined in OpenAPI

        :param cc_addresses: The cc_addresses of this APIModelsNotification.
        :param is_body_html: The is_body_html of this APIModelsNotification.
        :param message_body: The message_body of this APIModelsNotification.
        :param subject: The subject of this APIModelsNotification.
        :param to_addresses: The to_addresses of this APIModelsNotification.
        """
        self.openapi_types = {
            'cc_addresses': List[str],
            'is_body_html': bool,
            'message_body': str,
            'subject': str,
            'to_addresses': List[str]
        }

        self.attribute_map = {
            'cc_addresses': 'CC_Addresses',
            'is_body_html': 'IsBodyHtml',
            'message_body': 'MessageBody',
            'subject': 'Subject',
            'to_addresses': 'To_Addresses'
        }

        self._cc_addresses = cc_addresses
        self._is_body_html = is_body_html
        self._message_body = message_body
        self._subject = subject
        self._to_addresses = to_addresses

    @classmethod
    def from_dict(cls, dikt: dict) -> 'APIModelsNotification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The API.Models.Notification of this APIModelsNotification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cc_addresses(self):
        """Gets the cc_addresses of this APIModelsNotification.


        :return: The cc_addresses of this APIModelsNotification.
        :rtype: List[str]
        """
        return self._cc_addresses

    @cc_addresses.setter
    def cc_addresses(self, cc_addresses):
        """Sets the cc_addresses of this APIModelsNotification.


        :param cc_addresses: The cc_addresses of this APIModelsNotification.
        :type cc_addresses: List[str]
        """

        self._cc_addresses = cc_addresses

    @property
    def is_body_html(self):
        """Gets the is_body_html of this APIModelsNotification.


        :return: The is_body_html of this APIModelsNotification.
        :rtype: bool
        """
        return self._is_body_html

    @is_body_html.setter
    def is_body_html(self, is_body_html):
        """Sets the is_body_html of this APIModelsNotification.


        :param is_body_html: The is_body_html of this APIModelsNotification.
        :type is_body_html: bool
        """
        if is_body_html is None:
            raise ValueError("Invalid value for `is_body_html`, must not be `None`")

        self._is_body_html = is_body_html

    @property
    def message_body(self):
        """Gets the message_body of this APIModelsNotification.


        :return: The message_body of this APIModelsNotification.
        :rtype: str
        """
        return self._message_body

    @message_body.setter
    def message_body(self, message_body):
        """Sets the message_body of this APIModelsNotification.


        :param message_body: The message_body of this APIModelsNotification.
        :type message_body: str
        """
        if message_body is None:
            raise ValueError("Invalid value for `message_body`, must not be `None`")

        self._message_body = message_body

    @property
    def subject(self):
        """Gets the subject of this APIModelsNotification.


        :return: The subject of this APIModelsNotification.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this APIModelsNotification.


        :param subject: The subject of this APIModelsNotification.
        :type subject: str
        """
        if subject is None:
            raise ValueError("Invalid value for `subject`, must not be `None`")

        self._subject = subject

    @property
    def to_addresses(self):
        """Gets the to_addresses of this APIModelsNotification.


        :return: The to_addresses of this APIModelsNotification.
        :rtype: List[str]
        """
        return self._to_addresses

    @to_addresses.setter
    def to_addresses(self, to_addresses):
        """Sets the to_addresses of this APIModelsNotification.


        :param to_addresses: The to_addresses of this APIModelsNotification.
        :type to_addresses: List[str]
        """
        if to_addresses is None:
            raise ValueError("Invalid value for `to_addresses`, must not be `None`")

        self._to_addresses = to_addresses
