# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GlobalResourcesSharedModelsTranslationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, approval_user_id: int=None, cc_email_addresses: List[str]=None, charge_to_account: str=None, deadline: datetime=None, id: int=None, locale_ids: List[int]=None, notes: str=None, questions_user_id: int=None, state: str=None, submitted_by: int=None, translator_email: str=None, translator_name: str=None):
        """GlobalResourcesSharedModelsTranslationRequest - a model defined in OpenAPI

        :param approval_user_id: The approval_user_id of this GlobalResourcesSharedModelsTranslationRequest.
        :param cc_email_addresses: The cc_email_addresses of this GlobalResourcesSharedModelsTranslationRequest.
        :param charge_to_account: The charge_to_account of this GlobalResourcesSharedModelsTranslationRequest.
        :param deadline: The deadline of this GlobalResourcesSharedModelsTranslationRequest.
        :param id: The id of this GlobalResourcesSharedModelsTranslationRequest.
        :param locale_ids: The locale_ids of this GlobalResourcesSharedModelsTranslationRequest.
        :param notes: The notes of this GlobalResourcesSharedModelsTranslationRequest.
        :param questions_user_id: The questions_user_id of this GlobalResourcesSharedModelsTranslationRequest.
        :param state: The state of this GlobalResourcesSharedModelsTranslationRequest.
        :param submitted_by: The submitted_by of this GlobalResourcesSharedModelsTranslationRequest.
        :param translator_email: The translator_email of this GlobalResourcesSharedModelsTranslationRequest.
        :param translator_name: The translator_name of this GlobalResourcesSharedModelsTranslationRequest.
        """
        self.openapi_types = {
            'approval_user_id': int,
            'cc_email_addresses': List[str],
            'charge_to_account': str,
            'deadline': datetime,
            'id': int,
            'locale_ids': List[int],
            'notes': str,
            'questions_user_id': int,
            'state': str,
            'submitted_by': int,
            'translator_email': str,
            'translator_name': str
        }

        self.attribute_map = {
            'approval_user_id': 'ApprovalUserId',
            'cc_email_addresses': 'CCEmailAddresses',
            'charge_to_account': 'ChargeToAccount',
            'deadline': 'Deadline',
            'id': 'Id',
            'locale_ids': 'LocaleIds',
            'notes': 'Notes',
            'questions_user_id': 'QuestionsUserId',
            'state': 'State',
            'submitted_by': 'SubmittedBy',
            'translator_email': 'TranslatorEmail',
            'translator_name': 'TranslatorName'
        }

        self._approval_user_id = approval_user_id
        self._cc_email_addresses = cc_email_addresses
        self._charge_to_account = charge_to_account
        self._deadline = deadline
        self._id = id
        self._locale_ids = locale_ids
        self._notes = notes
        self._questions_user_id = questions_user_id
        self._state = state
        self._submitted_by = submitted_by
        self._translator_email = translator_email
        self._translator_name = translator_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GlobalResourcesSharedModelsTranslationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GlobalResources.Shared.Models.TranslationRequest of this GlobalResourcesSharedModelsTranslationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def approval_user_id(self):
        """Gets the approval_user_id of this GlobalResourcesSharedModelsTranslationRequest.

        The ID of the user from which approval for the request is required

        :return: The approval_user_id of this GlobalResourcesSharedModelsTranslationRequest.
        :rtype: int
        """
        return self._approval_user_id

    @approval_user_id.setter
    def approval_user_id(self, approval_user_id):
        """Sets the approval_user_id of this GlobalResourcesSharedModelsTranslationRequest.

        The ID of the user from which approval for the request is required

        :param approval_user_id: The approval_user_id of this GlobalResourcesSharedModelsTranslationRequest.
        :type approval_user_id: int
        """

        self._approval_user_id = approval_user_id

    @property
    def cc_email_addresses(self):
        """Gets the cc_email_addresses of this GlobalResourcesSharedModelsTranslationRequest.

        Additional email addresses to CC on emails pertaining to the request

        :return: The cc_email_addresses of this GlobalResourcesSharedModelsTranslationRequest.
        :rtype: List[str]
        """
        return self._cc_email_addresses

    @cc_email_addresses.setter
    def cc_email_addresses(self, cc_email_addresses):
        """Sets the cc_email_addresses of this GlobalResourcesSharedModelsTranslationRequest.

        Additional email addresses to CC on emails pertaining to the request

        :param cc_email_addresses: The cc_email_addresses of this GlobalResourcesSharedModelsTranslationRequest.
        :type cc_email_addresses: List[str]
        """
        if cc_email_addresses is None:
            raise ValueError("Invalid value for `cc_email_addresses`, must not be `None`")

        self._cc_email_addresses = cc_email_addresses

    @property
    def charge_to_account(self):
        """Gets the charge_to_account of this GlobalResourcesSharedModelsTranslationRequest.

        The account to charge for the request

        :return: The charge_to_account of this GlobalResourcesSharedModelsTranslationRequest.
        :rtype: str
        """
        return self._charge_to_account

    @charge_to_account.setter
    def charge_to_account(self, charge_to_account):
        """Sets the charge_to_account of this GlobalResourcesSharedModelsTranslationRequest.

        The account to charge for the request

        :param charge_to_account: The charge_to_account of this GlobalResourcesSharedModelsTranslationRequest.
        :type charge_to_account: str
        """
        if charge_to_account is None:
            raise ValueError("Invalid value for `charge_to_account`, must not be `None`")

        self._charge_to_account = charge_to_account

    @property
    def deadline(self):
        """Gets the deadline of this GlobalResourcesSharedModelsTranslationRequest.

        The date by which the translations in the request are needed. Defaults to 30 days from the current date

        :return: The deadline of this GlobalResourcesSharedModelsTranslationRequest.
        :rtype: datetime
        """
        return self._deadline

    @deadline.setter
    def deadline(self, deadline):
        """Sets the deadline of this GlobalResourcesSharedModelsTranslationRequest.

        The date by which the translations in the request are needed. Defaults to 30 days from the current date

        :param deadline: The deadline of this GlobalResourcesSharedModelsTranslationRequest.
        :type deadline: datetime
        """
        if deadline is None:
            raise ValueError("Invalid value for `deadline`, must not be `None`")

        self._deadline = deadline

    @property
    def id(self):
        """Gets the id of this GlobalResourcesSharedModelsTranslationRequest.

        The ID of the request

        :return: The id of this GlobalResourcesSharedModelsTranslationRequest.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GlobalResourcesSharedModelsTranslationRequest.

        The ID of the request

        :param id: The id of this GlobalResourcesSharedModelsTranslationRequest.
        :type id: int
        """

        self._id = id

    @property
    def locale_ids(self):
        """Gets the locale_ids of this GlobalResourcesSharedModelsTranslationRequest.

        Locale IDs to which these strings are requested to be translated

        :return: The locale_ids of this GlobalResourcesSharedModelsTranslationRequest.
        :rtype: List[int]
        """
        return self._locale_ids

    @locale_ids.setter
    def locale_ids(self, locale_ids):
        """Sets the locale_ids of this GlobalResourcesSharedModelsTranslationRequest.

        Locale IDs to which these strings are requested to be translated

        :param locale_ids: The locale_ids of this GlobalResourcesSharedModelsTranslationRequest.
        :type locale_ids: List[int]
        """
        if locale_ids is None:
            raise ValueError("Invalid value for `locale_ids`, must not be `None`")

        self._locale_ids = locale_ids

    @property
    def notes(self):
        """Gets the notes of this GlobalResourcesSharedModelsTranslationRequest.

        Additional notes or comments about the request

        :return: The notes of this GlobalResourcesSharedModelsTranslationRequest.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this GlobalResourcesSharedModelsTranslationRequest.

        Additional notes or comments about the request

        :param notes: The notes of this GlobalResourcesSharedModelsTranslationRequest.
        :type notes: str
        """
        if notes is None:
            raise ValueError("Invalid value for `notes`, must not be `None`")

        self._notes = notes

    @property
    def questions_user_id(self):
        """Gets the questions_user_id of this GlobalResourcesSharedModelsTranslationRequest.

        The ID of the user to which to address questions regarding the request

        :return: The questions_user_id of this GlobalResourcesSharedModelsTranslationRequest.
        :rtype: int
        """
        return self._questions_user_id

    @questions_user_id.setter
    def questions_user_id(self, questions_user_id):
        """Sets the questions_user_id of this GlobalResourcesSharedModelsTranslationRequest.

        The ID of the user to which to address questions regarding the request

        :param questions_user_id: The questions_user_id of this GlobalResourcesSharedModelsTranslationRequest.
        :type questions_user_id: int
        """

        self._questions_user_id = questions_user_id

    @property
    def state(self):
        """Gets the state of this GlobalResourcesSharedModelsTranslationRequest.

        The state of the request

        :return: The state of this GlobalResourcesSharedModelsTranslationRequest.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this GlobalResourcesSharedModelsTranslationRequest.

        The state of the request

        :param state: The state of this GlobalResourcesSharedModelsTranslationRequest.
        :type state: str
        """
        allowed_values = ["NotSubmitted", "Submitted", "Cancelled", "Completed"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def submitted_by(self):
        """Gets the submitted_by of this GlobalResourcesSharedModelsTranslationRequest.

        The ID of the User that submitted the request

        :return: The submitted_by of this GlobalResourcesSharedModelsTranslationRequest.
        :rtype: int
        """
        return self._submitted_by

    @submitted_by.setter
    def submitted_by(self, submitted_by):
        """Sets the submitted_by of this GlobalResourcesSharedModelsTranslationRequest.

        The ID of the User that submitted the request

        :param submitted_by: The submitted_by of this GlobalResourcesSharedModelsTranslationRequest.
        :type submitted_by: int
        """

        self._submitted_by = submitted_by

    @property
    def translator_email(self):
        """Gets the translator_email of this GlobalResourcesSharedModelsTranslationRequest.

        The email address for the translator

        :return: The translator_email of this GlobalResourcesSharedModelsTranslationRequest.
        :rtype: str
        """
        return self._translator_email

    @translator_email.setter
    def translator_email(self, translator_email):
        """Sets the translator_email of this GlobalResourcesSharedModelsTranslationRequest.

        The email address for the translator

        :param translator_email: The translator_email of this GlobalResourcesSharedModelsTranslationRequest.
        :type translator_email: str
        """

        self._translator_email = translator_email

    @property
    def translator_name(self):
        """Gets the translator_name of this GlobalResourcesSharedModelsTranslationRequest.

        The name of the translator

        :return: The translator_name of this GlobalResourcesSharedModelsTranslationRequest.
        :rtype: str
        """
        return self._translator_name

    @translator_name.setter
    def translator_name(self, translator_name):
        """Sets the translator_name of this GlobalResourcesSharedModelsTranslationRequest.

        The name of the translator

        :param translator_name: The translator_name of this GlobalResourcesSharedModelsTranslationRequest.
        :type translator_name: str
        """

        self._translator_name = translator_name
