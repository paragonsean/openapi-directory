# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AGCOPowerServicesModelsProductionData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_type: str=None, data_values: str=None):
        """AGCOPowerServicesModelsProductionData - a model defined in OpenAPI

        :param data_type: The data_type of this AGCOPowerServicesModelsProductionData.
        :param data_values: The data_values of this AGCOPowerServicesModelsProductionData.
        """
        self.openapi_types = {
            'data_type': str,
            'data_values': str
        }

        self.attribute_map = {
            'data_type': 'DataType',
            'data_values': 'DataValues'
        }

        self._data_type = data_type
        self._data_values = data_values

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AGCOPowerServicesModelsProductionData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AGCOPowerServices.Models.ProductionData of this AGCOPowerServicesModelsProductionData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_type(self):
        """Gets the data_type of this AGCOPowerServicesModelsProductionData.

        Type of data. Valid types are (but not limited to)              'PowerCalibration'

        :return: The data_type of this AGCOPowerServicesModelsProductionData.
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this AGCOPowerServicesModelsProductionData.

        Type of data. Valid types are (but not limited to)              'PowerCalibration'

        :param data_type: The data_type of this AGCOPowerServicesModelsProductionData.
        :type data_type: str
        """
        if data_type is None:
            raise ValueError("Invalid value for `data_type`, must not be `None`")

        self._data_type = data_type

    @property
    def data_values(self):
        """Gets the data_values of this AGCOPowerServicesModelsProductionData.

        Raw values of the calibration data

        :return: The data_values of this AGCOPowerServicesModelsProductionData.
        :rtype: str
        """
        return self._data_values

    @data_values.setter
    def data_values(self, data_values):
        """Sets the data_values of this AGCOPowerServicesModelsProductionData.

        Raw values of the calibration data

        :param data_values: The data_values of this AGCOPowerServicesModelsProductionData.
        :type data_values: str
        """
        if data_values is None:
            raise ValueError("Invalid value for `data_values`, must not be `None`")

        self._data_values = data_values
