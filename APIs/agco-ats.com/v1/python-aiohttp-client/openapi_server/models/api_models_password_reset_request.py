# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class APIModelsPasswordResetRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, parameter_name: str=None, url: str=None, username: str=None):
        """APIModelsPasswordResetRequest - a model defined in OpenAPI

        :param parameter_name: The parameter_name of this APIModelsPasswordResetRequest.
        :param url: The url of this APIModelsPasswordResetRequest.
        :param username: The username of this APIModelsPasswordResetRequest.
        """
        self.openapi_types = {
            'parameter_name': str,
            'url': str,
            'username': str
        }

        self.attribute_map = {
            'parameter_name': 'ParameterName',
            'url': 'Url',
            'username': 'Username'
        }

        self._parameter_name = parameter_name
        self._url = url
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'APIModelsPasswordResetRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The API.Models.PasswordResetRequest of this APIModelsPasswordResetRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def parameter_name(self):
        """Gets the parameter_name of this APIModelsPasswordResetRequest.

        The query string parameter name to use for supplying the password reset token

        :return: The parameter_name of this APIModelsPasswordResetRequest.
        :rtype: str
        """
        return self._parameter_name

    @parameter_name.setter
    def parameter_name(self, parameter_name):
        """Sets the parameter_name of this APIModelsPasswordResetRequest.

        The query string parameter name to use for supplying the password reset token

        :param parameter_name: The parameter_name of this APIModelsPasswordResetRequest.
        :type parameter_name: str
        """
        if parameter_name is None:
            raise ValueError("Invalid value for `parameter_name`, must not be `None`")

        self._parameter_name = parameter_name

    @property
    def url(self):
        """Gets the url of this APIModelsPasswordResetRequest.

        The URL to direct the user to reset the password.

        :return: The url of this APIModelsPasswordResetRequest.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this APIModelsPasswordResetRequest.

        The URL to direct the user to reset the password.

        :param url: The url of this APIModelsPasswordResetRequest.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url

    @property
    def username(self):
        """Gets the username of this APIModelsPasswordResetRequest.

        The username to reset the password for

        :return: The username of this APIModelsPasswordResetRequest.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this APIModelsPasswordResetRequest.

        The username to reset the password for

        :param username: The username of this APIModelsPasswordResetRequest.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")

        self._username = username
