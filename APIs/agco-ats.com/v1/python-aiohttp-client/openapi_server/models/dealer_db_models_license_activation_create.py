# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DealerDBModelsLicenseActivationCreate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dealer_code: str=None, license_activation_type: str=None, postal_code: str=None, system_info: str=None, voucher_code: str=None):
        """DealerDBModelsLicenseActivationCreate - a model defined in OpenAPI

        :param dealer_code: The dealer_code of this DealerDBModelsLicenseActivationCreate.
        :param license_activation_type: The license_activation_type of this DealerDBModelsLicenseActivationCreate.
        :param postal_code: The postal_code of this DealerDBModelsLicenseActivationCreate.
        :param system_info: The system_info of this DealerDBModelsLicenseActivationCreate.
        :param voucher_code: The voucher_code of this DealerDBModelsLicenseActivationCreate.
        """
        self.openapi_types = {
            'dealer_code': str,
            'license_activation_type': str,
            'postal_code': str,
            'system_info': str,
            'voucher_code': str
        }

        self.attribute_map = {
            'dealer_code': 'DealerCode',
            'license_activation_type': 'LicenseActivationType',
            'postal_code': 'PostalCode',
            'system_info': 'SystemInfo',
            'voucher_code': 'VoucherCode'
        }

        self._dealer_code = dealer_code
        self._license_activation_type = license_activation_type
        self._postal_code = postal_code
        self._system_info = system_info
        self._voucher_code = voucher_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DealerDBModelsLicenseActivationCreate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DealerDB.Models.LicenseActivationCreate of this DealerDBModelsLicenseActivationCreate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dealer_code(self):
        """Gets the dealer_code of this DealerDBModelsLicenseActivationCreate.

        The Dealer Code of the dealer activating the license

        :return: The dealer_code of this DealerDBModelsLicenseActivationCreate.
        :rtype: str
        """
        return self._dealer_code

    @dealer_code.setter
    def dealer_code(self, dealer_code):
        """Sets the dealer_code of this DealerDBModelsLicenseActivationCreate.

        The Dealer Code of the dealer activating the license

        :param dealer_code: The dealer_code of this DealerDBModelsLicenseActivationCreate.
        :type dealer_code: str
        """
        if dealer_code is None:
            raise ValueError("Invalid value for `dealer_code`, must not be `None`")

        self._dealer_code = dealer_code

    @property
    def license_activation_type(self):
        """Gets the license_activation_type of this DealerDBModelsLicenseActivationCreate.

        The type of license to create (e.g. EDT, EDT Lite)

        :return: The license_activation_type of this DealerDBModelsLicenseActivationCreate.
        :rtype: str
        """
        return self._license_activation_type

    @license_activation_type.setter
    def license_activation_type(self, license_activation_type):
        """Sets the license_activation_type of this DealerDBModelsLicenseActivationCreate.

        The type of license to create (e.g. EDT, EDT Lite)

        :param license_activation_type: The license_activation_type of this DealerDBModelsLicenseActivationCreate.
        :type license_activation_type: str
        """
        allowed_values = ["EDT", "EDTLite"]  # noqa: E501
        if license_activation_type not in allowed_values:
            raise ValueError(
                "Invalid value for `license_activation_type` ({0}), must be one of {1}"
                .format(license_activation_type, allowed_values)
            )

        self._license_activation_type = license_activation_type

    @property
    def postal_code(self):
        """Gets the postal_code of this DealerDBModelsLicenseActivationCreate.

        The dealer's postal code (zip code)

        :return: The postal_code of this DealerDBModelsLicenseActivationCreate.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this DealerDBModelsLicenseActivationCreate.

        The dealer's postal code (zip code)

        :param postal_code: The postal_code of this DealerDBModelsLicenseActivationCreate.
        :type postal_code: str
        """
        if postal_code is None:
            raise ValueError("Invalid value for `postal_code`, must not be `None`")

        self._postal_code = postal_code

    @property
    def system_info(self):
        """Gets the system_info of this DealerDBModelsLicenseActivationCreate.

        Information about  the system being activated

        :return: The system_info of this DealerDBModelsLicenseActivationCreate.
        :rtype: str
        """
        return self._system_info

    @system_info.setter
    def system_info(self, system_info):
        """Sets the system_info of this DealerDBModelsLicenseActivationCreate.

        Information about  the system being activated

        :param system_info: The system_info of this DealerDBModelsLicenseActivationCreate.
        :type system_info: str
        """
        if system_info is None:
            raise ValueError("Invalid value for `system_info`, must not be `None`")

        self._system_info = system_info

    @property
    def voucher_code(self):
        """Gets the voucher_code of this DealerDBModelsLicenseActivationCreate.

        The Voucher Code to use for activation

        :return: The voucher_code of this DealerDBModelsLicenseActivationCreate.
        :rtype: str
        """
        return self._voucher_code

    @voucher_code.setter
    def voucher_code(self, voucher_code):
        """Sets the voucher_code of this DealerDBModelsLicenseActivationCreate.

        The Voucher Code to use for activation

        :param voucher_code: The voucher_code of this DealerDBModelsLicenseActivationCreate.
        :type voucher_code: str
        """
        if voucher_code is None:
            raise ValueError("Invalid value for `voucher_code`, must not be `None`")

        self._voucher_code = voucher_code
