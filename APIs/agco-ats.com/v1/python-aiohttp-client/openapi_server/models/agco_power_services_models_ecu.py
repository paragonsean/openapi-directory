# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class AGCOPowerServicesModelsECU(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activation_code: str=None, damaged_description: str=None, engine_serial_number: str=None, replaces_ecu_serial_number: str=None, serial_number: str=None, state: str=None):
        """AGCOPowerServicesModelsECU - a model defined in OpenAPI

        :param activation_code: The activation_code of this AGCOPowerServicesModelsECU.
        :param damaged_description: The damaged_description of this AGCOPowerServicesModelsECU.
        :param engine_serial_number: The engine_serial_number of this AGCOPowerServicesModelsECU.
        :param replaces_ecu_serial_number: The replaces_ecu_serial_number of this AGCOPowerServicesModelsECU.
        :param serial_number: The serial_number of this AGCOPowerServicesModelsECU.
        :param state: The state of this AGCOPowerServicesModelsECU.
        """
        self.openapi_types = {
            'activation_code': str,
            'damaged_description': str,
            'engine_serial_number': str,
            'replaces_ecu_serial_number': str,
            'serial_number': str,
            'state': str
        }

        self.attribute_map = {
            'activation_code': 'ActivationCode',
            'damaged_description': 'DamagedDescription',
            'engine_serial_number': 'EngineSerialNumber',
            'replaces_ecu_serial_number': 'ReplacesECUSerialNumber',
            'serial_number': 'SerialNumber',
            'state': 'State'
        }

        self._activation_code = activation_code
        self._damaged_description = damaged_description
        self._engine_serial_number = engine_serial_number
        self._replaces_ecu_serial_number = replaces_ecu_serial_number
        self._serial_number = serial_number
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AGCOPowerServicesModelsECU':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AGCOPowerServices.Models.ECU of this AGCOPowerServicesModelsECU.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activation_code(self):
        """Gets the activation_code of this AGCOPowerServicesModelsECU.

        The code used to activate the ECU. May not be modified. Returned only on activation.

        :return: The activation_code of this AGCOPowerServicesModelsECU.
        :rtype: str
        """
        return self._activation_code

    @activation_code.setter
    def activation_code(self, activation_code):
        """Sets the activation_code of this AGCOPowerServicesModelsECU.

        The code used to activate the ECU. May not be modified. Returned only on activation.

        :param activation_code: The activation_code of this AGCOPowerServicesModelsECU.
        :type activation_code: str
        """

        self._activation_code = activation_code

    @property
    def damaged_description(self):
        """Gets the damaged_description of this AGCOPowerServicesModelsECU.

        A description why the ECU cannot be deactivated.

        :return: The damaged_description of this AGCOPowerServicesModelsECU.
        :rtype: str
        """
        return self._damaged_description

    @damaged_description.setter
    def damaged_description(self, damaged_description):
        """Sets the damaged_description of this AGCOPowerServicesModelsECU.

        A description why the ECU cannot be deactivated.

        :param damaged_description: The damaged_description of this AGCOPowerServicesModelsECU.
        :type damaged_description: str
        """
        if damaged_description is not None and not re.search(r'^[a-zA-Z0-9]{0,4096}$', damaged_description):
            raise ValueError("Invalid value for `damaged_description`, must be a follow pattern or equal to `/^[a-zA-Z0-9]{0,4096}$/`")

        self._damaged_description = damaged_description

    @property
    def engine_serial_number(self):
        """Gets the engine_serial_number of this AGCOPowerServicesModelsECU.

        The serial number of the ECU’s engine

        :return: The engine_serial_number of this AGCOPowerServicesModelsECU.
        :rtype: str
        """
        return self._engine_serial_number

    @engine_serial_number.setter
    def engine_serial_number(self, engine_serial_number):
        """Sets the engine_serial_number of this AGCOPowerServicesModelsECU.

        The serial number of the ECU’s engine

        :param engine_serial_number: The engine_serial_number of this AGCOPowerServicesModelsECU.
        :type engine_serial_number: str
        """
        if engine_serial_number is None:
            raise ValueError("Invalid value for `engine_serial_number`, must not be `None`")
        if engine_serial_number is not None and not re.search(r'(^[A-Z][0-9]+$)|(^[ABCDEFGHJKLMNPRSTVWX1-9][5CMBL][ED][0-5][0-9][0-7][0-9][0-9][0-9]$)', engine_serial_number):
            raise ValueError("Invalid value for `engine_serial_number`, must be a follow pattern or equal to `/(^[A-Z][0-9]+$)|(^[ABCDEFGHJKLMNPRSTVWX1-9][5CMBL][ED][0-5][0-9][0-7][0-9][0-9][0-9]$)/`")

        self._engine_serial_number = engine_serial_number

    @property
    def replaces_ecu_serial_number(self):
        """Gets the replaces_ecu_serial_number of this AGCOPowerServicesModelsECU.

        The serial number of the ECU that this ECU replaces. Required if activating an ECU..

        :return: The replaces_ecu_serial_number of this AGCOPowerServicesModelsECU.
        :rtype: str
        """
        return self._replaces_ecu_serial_number

    @replaces_ecu_serial_number.setter
    def replaces_ecu_serial_number(self, replaces_ecu_serial_number):
        """Sets the replaces_ecu_serial_number of this AGCOPowerServicesModelsECU.

        The serial number of the ECU that this ECU replaces. Required if activating an ECU..

        :param replaces_ecu_serial_number: The replaces_ecu_serial_number of this AGCOPowerServicesModelsECU.
        :type replaces_ecu_serial_number: str
        """
        if replaces_ecu_serial_number is not None and not re.search(r'^0?\d{23}$', replaces_ecu_serial_number):
            raise ValueError("Invalid value for `replaces_ecu_serial_number`, must be a follow pattern or equal to `/^0?\d{23}$/`")

        self._replaces_ecu_serial_number = replaces_ecu_serial_number

    @property
    def serial_number(self):
        """Gets the serial_number of this AGCOPowerServicesModelsECU.

        The serial number of the ECU

        :return: The serial_number of this AGCOPowerServicesModelsECU.
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this AGCOPowerServicesModelsECU.

        The serial number of the ECU

        :param serial_number: The serial_number of this AGCOPowerServicesModelsECU.
        :type serial_number: str
        """
        if serial_number is None:
            raise ValueError("Invalid value for `serial_number`, must not be `None`")
        if serial_number is not None and not re.search(r'^0?\d{23}$', serial_number):
            raise ValueError("Invalid value for `serial_number`, must be a follow pattern or equal to `/^0?\d{23}$/`")

        self._serial_number = serial_number

    @property
    def state(self):
        """Gets the state of this AGCOPowerServicesModelsECU.

        The state of the ECU

        :return: The state of this AGCOPowerServicesModelsECU.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this AGCOPowerServicesModelsECU.

        The state of the ECU

        :param state: The state of this AGCOPowerServicesModelsECU.
        :type state: str
        """
        allowed_values = ["Active", "Inactive", "Damaged"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
