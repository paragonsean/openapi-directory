# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateSystemModelsPackage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, autorun: bool=None, crc: str=None, description: str=None, localized_name: str=None, notes: str=None, package_id: str=None, package_type_id: str=None, previous_version: int=None, release_date: datetime=None, released: bool=None, remove_on_success: bool=None, size: int=None, switches: str=None, url: str=None, version: int=None):
        """UpdateSystemModelsPackage - a model defined in OpenAPI

        :param autorun: The autorun of this UpdateSystemModelsPackage.
        :param crc: The crc of this UpdateSystemModelsPackage.
        :param description: The description of this UpdateSystemModelsPackage.
        :param localized_name: The localized_name of this UpdateSystemModelsPackage.
        :param notes: The notes of this UpdateSystemModelsPackage.
        :param package_id: The package_id of this UpdateSystemModelsPackage.
        :param package_type_id: The package_type_id of this UpdateSystemModelsPackage.
        :param previous_version: The previous_version of this UpdateSystemModelsPackage.
        :param release_date: The release_date of this UpdateSystemModelsPackage.
        :param released: The released of this UpdateSystemModelsPackage.
        :param remove_on_success: The remove_on_success of this UpdateSystemModelsPackage.
        :param size: The size of this UpdateSystemModelsPackage.
        :param switches: The switches of this UpdateSystemModelsPackage.
        :param url: The url of this UpdateSystemModelsPackage.
        :param version: The version of this UpdateSystemModelsPackage.
        """
        self.openapi_types = {
            'autorun': bool,
            'crc': str,
            'description': str,
            'localized_name': str,
            'notes': str,
            'package_id': str,
            'package_type_id': str,
            'previous_version': int,
            'release_date': datetime,
            'released': bool,
            'remove_on_success': bool,
            'size': int,
            'switches': str,
            'url': str,
            'version': int
        }

        self.attribute_map = {
            'autorun': 'Autorun',
            'crc': 'CRC',
            'description': 'Description',
            'localized_name': 'LocalizedName',
            'notes': 'Notes',
            'package_id': 'PackageID',
            'package_type_id': 'PackageTypeID',
            'previous_version': 'PreviousVersion',
            'release_date': 'ReleaseDate',
            'released': 'Released',
            'remove_on_success': 'RemoveOnSuccess',
            'size': 'Size',
            'switches': 'Switches',
            'url': 'Url',
            'version': 'Version'
        }

        self._autorun = autorun
        self._crc = crc
        self._description = description
        self._localized_name = localized_name
        self._notes = notes
        self._package_id = package_id
        self._package_type_id = package_type_id
        self._previous_version = previous_version
        self._release_date = release_date
        self._released = released
        self._remove_on_success = remove_on_success
        self._size = size
        self._switches = switches
        self._url = url
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateSystemModelsPackage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateSystem.Models.Package of this UpdateSystemModelsPackage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def autorun(self):
        """Gets the autorun of this UpdateSystemModelsPackage.

        Value is true if package should run automatically. Default value is false.

        :return: The autorun of this UpdateSystemModelsPackage.
        :rtype: bool
        """
        return self._autorun

    @autorun.setter
    def autorun(self, autorun):
        """Sets the autorun of this UpdateSystemModelsPackage.

        Value is true if package should run automatically. Default value is false.

        :param autorun: The autorun of this UpdateSystemModelsPackage.
        :type autorun: bool
        """

        self._autorun = autorun

    @property
    def crc(self):
        """Gets the crc of this UpdateSystemModelsPackage.

        The CRC used to validate the download.

        :return: The crc of this UpdateSystemModelsPackage.
        :rtype: str
        """
        return self._crc

    @crc.setter
    def crc(self, crc):
        """Sets the crc of this UpdateSystemModelsPackage.

        The CRC used to validate the download.

        :param crc: The crc of this UpdateSystemModelsPackage.
        :type crc: str
        """
        if crc is None:
            raise ValueError("Invalid value for `crc`, must not be `None`")

        self._crc = crc

    @property
    def description(self):
        """Gets the description of this UpdateSystemModelsPackage.

        The package description

        :return: The description of this UpdateSystemModelsPackage.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateSystemModelsPackage.

        The package description

        :param description: The description of this UpdateSystemModelsPackage.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def localized_name(self):
        """Gets the localized_name of this UpdateSystemModelsPackage.

        Optional. The StringID used to localize the name of the Package

        :return: The localized_name of this UpdateSystemModelsPackage.
        :rtype: str
        """
        return self._localized_name

    @localized_name.setter
    def localized_name(self, localized_name):
        """Sets the localized_name of this UpdateSystemModelsPackage.

        Optional. The StringID used to localize the name of the Package

        :param localized_name: The localized_name of this UpdateSystemModelsPackage.
        :type localized_name: str
        """

        self._localized_name = localized_name

    @property
    def notes(self):
        """Gets the notes of this UpdateSystemModelsPackage.

        Notes about the package

        :return: The notes of this UpdateSystemModelsPackage.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this UpdateSystemModelsPackage.

        Notes about the package

        :param notes: The notes of this UpdateSystemModelsPackage.
        :type notes: str
        """

        self._notes = notes

    @property
    def package_id(self):
        """Gets the package_id of this UpdateSystemModelsPackage.

        Read Only. The package ID

        :return: The package_id of this UpdateSystemModelsPackage.
        :rtype: str
        """
        return self._package_id

    @package_id.setter
    def package_id(self, package_id):
        """Sets the package_id of this UpdateSystemModelsPackage.

        Read Only. The package ID

        :param package_id: The package_id of this UpdateSystemModelsPackage.
        :type package_id: str
        """

        self._package_id = package_id

    @property
    def package_type_id(self):
        """Gets the package_type_id of this UpdateSystemModelsPackage.

        The id of the package type this package belongs to.

        :return: The package_type_id of this UpdateSystemModelsPackage.
        :rtype: str
        """
        return self._package_type_id

    @package_type_id.setter
    def package_type_id(self, package_type_id):
        """Sets the package_type_id of this UpdateSystemModelsPackage.

        The id of the package type this package belongs to.

        :param package_type_id: The package_type_id of this UpdateSystemModelsPackage.
        :type package_type_id: str
        """
        if package_type_id is None:
            raise ValueError("Invalid value for `package_type_id`, must not be `None`")

        self._package_type_id = package_type_id

    @property
    def previous_version(self):
        """Gets the previous_version of this UpdateSystemModelsPackage.

        For delta packages, the previous version required.  For non-delta packages, the Previous version is 0.  Default value is 0.

        :return: The previous_version of this UpdateSystemModelsPackage.
        :rtype: int
        """
        return self._previous_version

    @previous_version.setter
    def previous_version(self, previous_version):
        """Sets the previous_version of this UpdateSystemModelsPackage.

        For delta packages, the previous version required.  For non-delta packages, the Previous version is 0.  Default value is 0.

        :param previous_version: The previous_version of this UpdateSystemModelsPackage.
        :type previous_version: int
        """
        if previous_version is not None and previous_version > 2147483647:
            raise ValueError("Invalid value for `previous_version`, must be a value less than or equal to `2147483647`")
        if previous_version is not None and previous_version < 0:
            raise ValueError("Invalid value for `previous_version`, must be a value greater than or equal to `0`")

        self._previous_version = previous_version

    @property
    def release_date(self):
        """Gets the release_date of this UpdateSystemModelsPackage.

        The date the package was released

        :return: The release_date of this UpdateSystemModelsPackage.
        :rtype: datetime
        """
        return self._release_date

    @release_date.setter
    def release_date(self, release_date):
        """Sets the release_date of this UpdateSystemModelsPackage.

        The date the package was released

        :param release_date: The release_date of this UpdateSystemModelsPackage.
        :type release_date: datetime
        """
        if release_date is None:
            raise ValueError("Invalid value for `release_date`, must not be `None`")

        self._release_date = release_date

    @property
    def released(self):
        """Gets the released of this UpdateSystemModelsPackage.

        True if the package is released.  Default value is False.

        :return: The released of this UpdateSystemModelsPackage.
        :rtype: bool
        """
        return self._released

    @released.setter
    def released(self, released):
        """Sets the released of this UpdateSystemModelsPackage.

        True if the package is released.  Default value is False.

        :param released: The released of this UpdateSystemModelsPackage.
        :type released: bool
        """

        self._released = released

    @property
    def remove_on_success(self):
        """Gets the remove_on_success of this UpdateSystemModelsPackage.

        True to remove the package after successful execution.  Default value is False.

        :return: The remove_on_success of this UpdateSystemModelsPackage.
        :rtype: bool
        """
        return self._remove_on_success

    @remove_on_success.setter
    def remove_on_success(self, remove_on_success):
        """Sets the remove_on_success of this UpdateSystemModelsPackage.

        True to remove the package after successful execution.  Default value is False.

        :param remove_on_success: The remove_on_success of this UpdateSystemModelsPackage.
        :type remove_on_success: bool
        """

        self._remove_on_success = remove_on_success

    @property
    def size(self):
        """Gets the size of this UpdateSystemModelsPackage.

        The size of the file at the specified URL.  If a size is not supplied at creation time, the size will be determined by the response from the URL.              If the size provided does not match the size in the response from the URL an error will be returned.

        :return: The size of this UpdateSystemModelsPackage.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this UpdateSystemModelsPackage.

        The size of the file at the specified URL.  If a size is not supplied at creation time, the size will be determined by the response from the URL.              If the size provided does not match the size in the response from the URL an error will be returned.

        :param size: The size of this UpdateSystemModelsPackage.
        :type size: int
        """

        self._size = size

    @property
    def switches(self):
        """Gets the switches of this UpdateSystemModelsPackage.

        The command line arguments for the package.  Default value is an empty string.

        :return: The switches of this UpdateSystemModelsPackage.
        :rtype: str
        """
        return self._switches

    @switches.setter
    def switches(self, switches):
        """Sets the switches of this UpdateSystemModelsPackage.

        The command line arguments for the package.  Default value is an empty string.

        :param switches: The switches of this UpdateSystemModelsPackage.
        :type switches: str
        """

        self._switches = switches

    @property
    def url(self):
        """Gets the url of this UpdateSystemModelsPackage.

        The Url to download the package from.

        :return: The url of this UpdateSystemModelsPackage.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this UpdateSystemModelsPackage.

        The Url to download the package from.

        :param url: The url of this UpdateSystemModelsPackage.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url

    @property
    def version(self):
        """Gets the version of this UpdateSystemModelsPackage.

        The version.

        :return: The version of this UpdateSystemModelsPackage.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this UpdateSystemModelsPackage.

        The version.

        :param version: The version of this UpdateSystemModelsPackage.
        :type version: int
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")
        if version is not None and version > 2147483647:
            raise ValueError("Invalid value for `version`, must be a value less than or equal to `2147483647`")
        if version is not None and version < 1:
            raise ValueError("Invalid value for `version`, must be a value greater than or equal to `1`")

        self._version = version
