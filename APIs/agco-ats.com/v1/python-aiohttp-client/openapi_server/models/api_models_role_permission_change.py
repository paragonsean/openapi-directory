# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class APIModelsRolePermissionChange(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: str=None, permission: str=None):
        """APIModelsRolePermissionChange - a model defined in OpenAPI

        :param action: The action of this APIModelsRolePermissionChange.
        :param permission: The permission of this APIModelsRolePermissionChange.
        """
        self.openapi_types = {
            'action': str,
            'permission': str
        }

        self.attribute_map = {
            'action': 'Action',
            'permission': 'Permission'
        }

        self._action = action
        self._permission = permission

    @classmethod
    def from_dict(cls, dikt: dict) -> 'APIModelsRolePermissionChange':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The API.Models.RolePermissionChange of this APIModelsRolePermissionChange.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this APIModelsRolePermissionChange.

        The action to take.

        :return: The action of this APIModelsRolePermissionChange.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this APIModelsRolePermissionChange.

        The action to take.

        :param action: The action of this APIModelsRolePermissionChange.
        :type action: str
        """
        allowed_values = ["Grant", "Revoke"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def permission(self):
        """Gets the permission of this APIModelsRolePermissionChange.

        The name of the permission to grant or revoke.

        :return: The permission of this APIModelsRolePermissionChange.
        :rtype: str
        """
        return self._permission

    @permission.setter
    def permission(self, permission):
        """Sets the permission of this APIModelsRolePermissionChange.

        The name of the permission to grant or revoke.

        :param permission: The permission of this APIModelsRolePermissionChange.
        :type permission: str
        """
        if permission is None:
            raise ValueError("Invalid value for `permission`, must not be `None`")

        self._permission = permission
