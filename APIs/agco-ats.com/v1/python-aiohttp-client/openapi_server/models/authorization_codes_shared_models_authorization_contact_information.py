# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AuthorizationCodesSharedModelsAuthorizationContactInformation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authorization_code_id: int=None, code: str=None, contact: str=None, created_by: str=None, created_date: datetime=None, dealer_code: str=None, dealership: str=None, definition_name: str=None, email: str=None, id: int=None, notes: str=None, phone: str=None):
        """AuthorizationCodesSharedModelsAuthorizationContactInformation - a model defined in OpenAPI

        :param authorization_code_id: The authorization_code_id of this AuthorizationCodesSharedModelsAuthorizationContactInformation.
        :param code: The code of this AuthorizationCodesSharedModelsAuthorizationContactInformation.
        :param contact: The contact of this AuthorizationCodesSharedModelsAuthorizationContactInformation.
        :param created_by: The created_by of this AuthorizationCodesSharedModelsAuthorizationContactInformation.
        :param created_date: The created_date of this AuthorizationCodesSharedModelsAuthorizationContactInformation.
        :param dealer_code: The dealer_code of this AuthorizationCodesSharedModelsAuthorizationContactInformation.
        :param dealership: The dealership of this AuthorizationCodesSharedModelsAuthorizationContactInformation.
        :param definition_name: The definition_name of this AuthorizationCodesSharedModelsAuthorizationContactInformation.
        :param email: The email of this AuthorizationCodesSharedModelsAuthorizationContactInformation.
        :param id: The id of this AuthorizationCodesSharedModelsAuthorizationContactInformation.
        :param notes: The notes of this AuthorizationCodesSharedModelsAuthorizationContactInformation.
        :param phone: The phone of this AuthorizationCodesSharedModelsAuthorizationContactInformation.
        """
        self.openapi_types = {
            'authorization_code_id': int,
            'code': str,
            'contact': str,
            'created_by': str,
            'created_date': datetime,
            'dealer_code': str,
            'dealership': str,
            'definition_name': str,
            'email': str,
            'id': int,
            'notes': str,
            'phone': str
        }

        self.attribute_map = {
            'authorization_code_id': 'AuthorizationCodeID',
            'code': 'Code',
            'contact': 'Contact',
            'created_by': 'CreatedBy',
            'created_date': 'CreatedDate',
            'dealer_code': 'DealerCode',
            'dealership': 'Dealership',
            'definition_name': 'DefinitionName',
            'email': 'Email',
            'id': 'ID',
            'notes': 'Notes',
            'phone': 'Phone'
        }

        self._authorization_code_id = authorization_code_id
        self._code = code
        self._contact = contact
        self._created_by = created_by
        self._created_date = created_date
        self._dealer_code = dealer_code
        self._dealership = dealership
        self._definition_name = definition_name
        self._email = email
        self._id = id
        self._notes = notes
        self._phone = phone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuthorizationCodesSharedModelsAuthorizationContactInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AuthorizationCodes.Shared.Models.AuthorizationContactInformation of this AuthorizationCodesSharedModelsAuthorizationContactInformation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authorization_code_id(self):
        """Gets the authorization_code_id of this AuthorizationCodesSharedModelsAuthorizationContactInformation.

        AuthorizationCode ID that the contact information ties into.

        :return: The authorization_code_id of this AuthorizationCodesSharedModelsAuthorizationContactInformation.
        :rtype: int
        """
        return self._authorization_code_id

    @authorization_code_id.setter
    def authorization_code_id(self, authorization_code_id):
        """Sets the authorization_code_id of this AuthorizationCodesSharedModelsAuthorizationContactInformation.

        AuthorizationCode ID that the contact information ties into.

        :param authorization_code_id: The authorization_code_id of this AuthorizationCodesSharedModelsAuthorizationContactInformation.
        :type authorization_code_id: int
        """
        if authorization_code_id is None:
            raise ValueError("Invalid value for `authorization_code_id`, must not be `None`")

        self._authorization_code_id = authorization_code_id

    @property
    def code(self):
        """Gets the code of this AuthorizationCodesSharedModelsAuthorizationContactInformation.

        The authorization code. Read Only.

        :return: The code of this AuthorizationCodesSharedModelsAuthorizationContactInformation.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this AuthorizationCodesSharedModelsAuthorizationContactInformation.

        The authorization code. Read Only.

        :param code: The code of this AuthorizationCodesSharedModelsAuthorizationContactInformation.
        :type code: str
        """

        self._code = code

    @property
    def contact(self):
        """Gets the contact of this AuthorizationCodesSharedModelsAuthorizationContactInformation.

        Name of contact requesting an authorization code. Minimum length of 3 characters.

        :return: The contact of this AuthorizationCodesSharedModelsAuthorizationContactInformation.
        :rtype: str
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this AuthorizationCodesSharedModelsAuthorizationContactInformation.

        Name of contact requesting an authorization code. Minimum length of 3 characters.

        :param contact: The contact of this AuthorizationCodesSharedModelsAuthorizationContactInformation.
        :type contact: str
        """
        if contact is None:
            raise ValueError("Invalid value for `contact`, must not be `None`")

        self._contact = contact

    @property
    def created_by(self):
        """Gets the created_by of this AuthorizationCodesSharedModelsAuthorizationContactInformation.

        The name of the user that created this code. Read Only.

        :return: The created_by of this AuthorizationCodesSharedModelsAuthorizationContactInformation.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this AuthorizationCodesSharedModelsAuthorizationContactInformation.

        The name of the user that created this code. Read Only.

        :param created_by: The created_by of this AuthorizationCodesSharedModelsAuthorizationContactInformation.
        :type created_by: str
        """

        self._created_by = created_by

    @property
    def created_date(self):
        """Gets the created_date of this AuthorizationCodesSharedModelsAuthorizationContactInformation.

        The date the authorization code was created.

        :return: The created_date of this AuthorizationCodesSharedModelsAuthorizationContactInformation.
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this AuthorizationCodesSharedModelsAuthorizationContactInformation.

        The date the authorization code was created.

        :param created_date: The created_date of this AuthorizationCodesSharedModelsAuthorizationContactInformation.
        :type created_date: datetime
        """

        self._created_date = created_date

    @property
    def dealer_code(self):
        """Gets the dealer_code of this AuthorizationCodesSharedModelsAuthorizationContactInformation.

        Dealer code that relates to the dealership. Minimum length of 3 characters.

        :return: The dealer_code of this AuthorizationCodesSharedModelsAuthorizationContactInformation.
        :rtype: str
        """
        return self._dealer_code

    @dealer_code.setter
    def dealer_code(self, dealer_code):
        """Sets the dealer_code of this AuthorizationCodesSharedModelsAuthorizationContactInformation.

        Dealer code that relates to the dealership. Minimum length of 3 characters.

        :param dealer_code: The dealer_code of this AuthorizationCodesSharedModelsAuthorizationContactInformation.
        :type dealer_code: str
        """
        if dealer_code is None:
            raise ValueError("Invalid value for `dealer_code`, must not be `None`")

        self._dealer_code = dealer_code

    @property
    def dealership(self):
        """Gets the dealership of this AuthorizationCodesSharedModelsAuthorizationContactInformation.

        Name of dealership. Minimum length of 3 characters.

        :return: The dealership of this AuthorizationCodesSharedModelsAuthorizationContactInformation.
        :rtype: str
        """
        return self._dealership

    @dealership.setter
    def dealership(self, dealership):
        """Sets the dealership of this AuthorizationCodesSharedModelsAuthorizationContactInformation.

        Name of dealership. Minimum length of 3 characters.

        :param dealership: The dealership of this AuthorizationCodesSharedModelsAuthorizationContactInformation.
        :type dealership: str
        """
        if dealership is None:
            raise ValueError("Invalid value for `dealership`, must not be `None`")

        self._dealership = dealership

    @property
    def definition_name(self):
        """Gets the definition_name of this AuthorizationCodesSharedModelsAuthorizationContactInformation.

        The name of the definition used for generating this authorization code. Read Only.

        :return: The definition_name of this AuthorizationCodesSharedModelsAuthorizationContactInformation.
        :rtype: str
        """
        return self._definition_name

    @definition_name.setter
    def definition_name(self, definition_name):
        """Sets the definition_name of this AuthorizationCodesSharedModelsAuthorizationContactInformation.

        The name of the definition used for generating this authorization code. Read Only.

        :param definition_name: The definition_name of this AuthorizationCodesSharedModelsAuthorizationContactInformation.
        :type definition_name: str
        """

        self._definition_name = definition_name

    @property
    def email(self):
        """Gets the email of this AuthorizationCodesSharedModelsAuthorizationContactInformation.

        Email of contact.

        :return: The email of this AuthorizationCodesSharedModelsAuthorizationContactInformation.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this AuthorizationCodesSharedModelsAuthorizationContactInformation.

        Email of contact.

        :param email: The email of this AuthorizationCodesSharedModelsAuthorizationContactInformation.
        :type email: str
        """

        self._email = email

    @property
    def id(self):
        """Gets the id of this AuthorizationCodesSharedModelsAuthorizationContactInformation.

        ID of authorizationContactInformation

        :return: The id of this AuthorizationCodesSharedModelsAuthorizationContactInformation.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AuthorizationCodesSharedModelsAuthorizationContactInformation.

        ID of authorizationContactInformation

        :param id: The id of this AuthorizationCodesSharedModelsAuthorizationContactInformation.
        :type id: int
        """

        self._id = id

    @property
    def notes(self):
        """Gets the notes of this AuthorizationCodesSharedModelsAuthorizationContactInformation.

        Optional notes used for internal use.

        :return: The notes of this AuthorizationCodesSharedModelsAuthorizationContactInformation.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this AuthorizationCodesSharedModelsAuthorizationContactInformation.

        Optional notes used for internal use.

        :param notes: The notes of this AuthorizationCodesSharedModelsAuthorizationContactInformation.
        :type notes: str
        """

        self._notes = notes

    @property
    def phone(self):
        """Gets the phone of this AuthorizationCodesSharedModelsAuthorizationContactInformation.

        Phone number of contact.

        :return: The phone of this AuthorizationCodesSharedModelsAuthorizationContactInformation.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this AuthorizationCodesSharedModelsAuthorizationContactInformation.

        Phone number of contact.

        :param phone: The phone of this AuthorizationCodesSharedModelsAuthorizationContactInformation.
        :type phone: str
        """
        if phone is None:
            raise ValueError("Invalid value for `phone`, must not be `None`")

        self._phone = phone
