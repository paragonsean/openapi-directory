# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateSystemModelsPackageTypeIDtoBundle(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bundle_id: str=None, package_type_id: str=None, package_version: int=None, priority: int=None, subscription_type: str=None):
        """UpdateSystemModelsPackageTypeIDtoBundle - a model defined in OpenAPI

        :param bundle_id: The bundle_id of this UpdateSystemModelsPackageTypeIDtoBundle.
        :param package_type_id: The package_type_id of this UpdateSystemModelsPackageTypeIDtoBundle.
        :param package_version: The package_version of this UpdateSystemModelsPackageTypeIDtoBundle.
        :param priority: The priority of this UpdateSystemModelsPackageTypeIDtoBundle.
        :param subscription_type: The subscription_type of this UpdateSystemModelsPackageTypeIDtoBundle.
        """
        self.openapi_types = {
            'bundle_id': str,
            'package_type_id': str,
            'package_version': int,
            'priority': int,
            'subscription_type': str
        }

        self.attribute_map = {
            'bundle_id': 'BundleID',
            'package_type_id': 'PackageTypeID',
            'package_version': 'PackageVersion',
            'priority': 'Priority',
            'subscription_type': 'SubscriptionType'
        }

        self._bundle_id = bundle_id
        self._package_type_id = package_type_id
        self._package_version = package_version
        self._priority = priority
        self._subscription_type = subscription_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateSystemModelsPackageTypeIDtoBundle':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateSystem.Models.PackageTypeIDtoBundle of this UpdateSystemModelsPackageTypeIDtoBundle.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bundle_id(self):
        """Gets the bundle_id of this UpdateSystemModelsPackageTypeIDtoBundle.

        The bundle to include the package in.

        :return: The bundle_id of this UpdateSystemModelsPackageTypeIDtoBundle.
        :rtype: str
        """
        return self._bundle_id

    @bundle_id.setter
    def bundle_id(self, bundle_id):
        """Sets the bundle_id of this UpdateSystemModelsPackageTypeIDtoBundle.

        The bundle to include the package in.

        :param bundle_id: The bundle_id of this UpdateSystemModelsPackageTypeIDtoBundle.
        :type bundle_id: str
        """
        if bundle_id is None:
            raise ValueError("Invalid value for `bundle_id`, must not be `None`")

        self._bundle_id = bundle_id

    @property
    def package_type_id(self):
        """Gets the package_type_id of this UpdateSystemModelsPackageTypeIDtoBundle.

        The package type id of the package to include

        :return: The package_type_id of this UpdateSystemModelsPackageTypeIDtoBundle.
        :rtype: str
        """
        return self._package_type_id

    @package_type_id.setter
    def package_type_id(self, package_type_id):
        """Sets the package_type_id of this UpdateSystemModelsPackageTypeIDtoBundle.

        The package type id of the package to include

        :param package_type_id: The package_type_id of this UpdateSystemModelsPackageTypeIDtoBundle.
        :type package_type_id: str
        """
        if package_type_id is None:
            raise ValueError("Invalid value for `package_type_id`, must not be `None`")

        self._package_type_id = package_type_id

    @property
    def package_version(self):
        """Gets the package_version of this UpdateSystemModelsPackageTypeIDtoBundle.

        The package version of the package to include

        :return: The package_version of this UpdateSystemModelsPackageTypeIDtoBundle.
        :rtype: int
        """
        return self._package_version

    @package_version.setter
    def package_version(self, package_version):
        """Sets the package_version of this UpdateSystemModelsPackageTypeIDtoBundle.

        The package version of the package to include

        :param package_version: The package_version of this UpdateSystemModelsPackageTypeIDtoBundle.
        :type package_version: int
        """
        if package_version is None:
            raise ValueError("Invalid value for `package_version`, must not be `None`")

        self._package_version = package_version

    @property
    def priority(self):
        """Gets the priority of this UpdateSystemModelsPackageTypeIDtoBundle.

        The execution priority of the package relative to other packages in the bundle. Range 1 - 100, lower value indication higher priority.

        :return: The priority of this UpdateSystemModelsPackageTypeIDtoBundle.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this UpdateSystemModelsPackageTypeIDtoBundle.

        The execution priority of the package relative to other packages in the bundle. Range 1 - 100, lower value indication higher priority.

        :param priority: The priority of this UpdateSystemModelsPackageTypeIDtoBundle.
        :type priority: int
        """
        if priority is None:
            raise ValueError("Invalid value for `priority`, must not be `None`")
        if priority is not None and priority > 100:
            raise ValueError("Invalid value for `priority`, must be a value less than or equal to `100`")
        if priority is not None and priority < 1:
            raise ValueError("Invalid value for `priority`, must be a value greater than or equal to `1`")

        self._priority = priority

    @property
    def subscription_type(self):
        """Gets the subscription_type of this UpdateSystemModelsPackageTypeIDtoBundle.

        Optional. The type of subscription supported.  The default subscription type is Required.

        :return: The subscription_type of this UpdateSystemModelsPackageTypeIDtoBundle.
        :rtype: str
        """
        return self._subscription_type

    @subscription_type.setter
    def subscription_type(self, subscription_type):
        """Sets the subscription_type of this UpdateSystemModelsPackageTypeIDtoBundle.

        Optional. The type of subscription supported.  The default subscription type is Required.

        :param subscription_type: The subscription_type of this UpdateSystemModelsPackageTypeIDtoBundle.
        :type subscription_type: str
        """
        allowed_values = ["Required", "IncludeByDefault", "ExcludeByDefault"]  # noqa: E501
        if subscription_type not in allowed_values:
            raise ValueError(
                "Invalid value for `subscription_type` ({0}), must be one of {1}"
                .format(subscription_type, allowed_values)
            )

        self._subscription_type = subscription_type
