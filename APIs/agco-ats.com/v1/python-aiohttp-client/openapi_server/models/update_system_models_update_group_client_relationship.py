# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateSystemModelsUpdateGroupClientRelationship(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: bool=None, client_id: str=None, last_checkin: datetime=None, relationship_id: str=None, update_group_id: str=None):
        """UpdateSystemModelsUpdateGroupClientRelationship - a model defined in OpenAPI

        :param active: The active of this UpdateSystemModelsUpdateGroupClientRelationship.
        :param client_id: The client_id of this UpdateSystemModelsUpdateGroupClientRelationship.
        :param last_checkin: The last_checkin of this UpdateSystemModelsUpdateGroupClientRelationship.
        :param relationship_id: The relationship_id of this UpdateSystemModelsUpdateGroupClientRelationship.
        :param update_group_id: The update_group_id of this UpdateSystemModelsUpdateGroupClientRelationship.
        """
        self.openapi_types = {
            'active': bool,
            'client_id': str,
            'last_checkin': datetime,
            'relationship_id': str,
            'update_group_id': str
        }

        self.attribute_map = {
            'active': 'Active',
            'client_id': 'ClientID',
            'last_checkin': 'LastCheckin',
            'relationship_id': 'RelationshipID',
            'update_group_id': 'UpdateGroupID'
        }

        self._active = active
        self._client_id = client_id
        self._last_checkin = last_checkin
        self._relationship_id = relationship_id
        self._update_group_id = update_group_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateSystemModelsUpdateGroupClientRelationship':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateSystem.Models.UpdateGroupClientRelationship of this UpdateSystemModelsUpdateGroupClientRelationship.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this UpdateSystemModelsUpdateGroupClientRelationship.

        The subscription status.  The status is active by default.

        :return: The active of this UpdateSystemModelsUpdateGroupClientRelationship.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this UpdateSystemModelsUpdateGroupClientRelationship.

        The subscription status.  The status is active by default.

        :param active: The active of this UpdateSystemModelsUpdateGroupClientRelationship.
        :type active: bool
        """

        self._active = active

    @property
    def client_id(self):
        """Gets the client_id of this UpdateSystemModelsUpdateGroupClientRelationship.

        Read Only after creation. The client id of the subscriber.

        :return: The client_id of this UpdateSystemModelsUpdateGroupClientRelationship.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this UpdateSystemModelsUpdateGroupClientRelationship.

        Read Only after creation. The client id of the subscriber.

        :param client_id: The client_id of this UpdateSystemModelsUpdateGroupClientRelationship.
        :type client_id: str
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")

        self._client_id = client_id

    @property
    def last_checkin(self):
        """Gets the last_checkin of this UpdateSystemModelsUpdateGroupClientRelationship.

        ReadOnly. The timestamp of the last checkin.

        :return: The last_checkin of this UpdateSystemModelsUpdateGroupClientRelationship.
        :rtype: datetime
        """
        return self._last_checkin

    @last_checkin.setter
    def last_checkin(self, last_checkin):
        """Sets the last_checkin of this UpdateSystemModelsUpdateGroupClientRelationship.

        ReadOnly. The timestamp of the last checkin.

        :param last_checkin: The last_checkin of this UpdateSystemModelsUpdateGroupClientRelationship.
        :type last_checkin: datetime
        """

        self._last_checkin = last_checkin

    @property
    def relationship_id(self):
        """Gets the relationship_id of this UpdateSystemModelsUpdateGroupClientRelationship.

        Read Only after creation. The relationship id.  A relationship id will be assigned if not provided on creation.

        :return: The relationship_id of this UpdateSystemModelsUpdateGroupClientRelationship.
        :rtype: str
        """
        return self._relationship_id

    @relationship_id.setter
    def relationship_id(self, relationship_id):
        """Sets the relationship_id of this UpdateSystemModelsUpdateGroupClientRelationship.

        Read Only after creation. The relationship id.  A relationship id will be assigned if not provided on creation.

        :param relationship_id: The relationship_id of this UpdateSystemModelsUpdateGroupClientRelationship.
        :type relationship_id: str
        """

        self._relationship_id = relationship_id

    @property
    def update_group_id(self):
        """Gets the update_group_id of this UpdateSystemModelsUpdateGroupClientRelationship.

        Read Only after creation. The update group to subscribe to.

        :return: The update_group_id of this UpdateSystemModelsUpdateGroupClientRelationship.
        :rtype: str
        """
        return self._update_group_id

    @update_group_id.setter
    def update_group_id(self, update_group_id):
        """Sets the update_group_id of this UpdateSystemModelsUpdateGroupClientRelationship.

        Read Only after creation. The update group to subscribe to.

        :param update_group_id: The update_group_id of this UpdateSystemModelsUpdateGroupClientRelationship.
        :type update_group_id: str
        """
        if update_group_id is None:
            raise ValueError("Invalid value for `update_group_id`, must not be `None`")

        self._update_group_id = update_group_id
