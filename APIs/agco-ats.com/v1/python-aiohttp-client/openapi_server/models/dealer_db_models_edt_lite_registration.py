# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DealerDBModelsEDTLiteRegistration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dealer_code: str=None, expiration_date: datetime=None, instance_id: str=None, voucher_code: str=None):
        """DealerDBModelsEDTLiteRegistration - a model defined in OpenAPI

        :param dealer_code: The dealer_code of this DealerDBModelsEDTLiteRegistration.
        :param expiration_date: The expiration_date of this DealerDBModelsEDTLiteRegistration.
        :param instance_id: The instance_id of this DealerDBModelsEDTLiteRegistration.
        :param voucher_code: The voucher_code of this DealerDBModelsEDTLiteRegistration.
        """
        self.openapi_types = {
            'dealer_code': str,
            'expiration_date': datetime,
            'instance_id': str,
            'voucher_code': str
        }

        self.attribute_map = {
            'dealer_code': 'DealerCode',
            'expiration_date': 'ExpirationDate',
            'instance_id': 'InstanceID',
            'voucher_code': 'VoucherCode'
        }

        self._dealer_code = dealer_code
        self._expiration_date = expiration_date
        self._instance_id = instance_id
        self._voucher_code = voucher_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DealerDBModelsEDTLiteRegistration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DealerDB.Models.EDTLiteRegistration of this DealerDBModelsEDTLiteRegistration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dealer_code(self):
        """Gets the dealer_code of this DealerDBModelsEDTLiteRegistration.

        The dealer code with which the EDT Lite was created.

        :return: The dealer_code of this DealerDBModelsEDTLiteRegistration.
        :rtype: str
        """
        return self._dealer_code

    @dealer_code.setter
    def dealer_code(self, dealer_code):
        """Sets the dealer_code of this DealerDBModelsEDTLiteRegistration.

        The dealer code with which the EDT Lite was created.

        :param dealer_code: The dealer_code of this DealerDBModelsEDTLiteRegistration.
        :type dealer_code: str
        """

        self._dealer_code = dealer_code

    @property
    def expiration_date(self):
        """Gets the expiration_date of this DealerDBModelsEDTLiteRegistration.

        The date at which the content of the EDT Lite expires.

        :return: The expiration_date of this DealerDBModelsEDTLiteRegistration.
        :rtype: datetime
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this DealerDBModelsEDTLiteRegistration.

        The date at which the content of the EDT Lite expires.

        :param expiration_date: The expiration_date of this DealerDBModelsEDTLiteRegistration.
        :type expiration_date: datetime
        """
        if expiration_date is None:
            raise ValueError("Invalid value for `expiration_date`, must not be `None`")

        self._expiration_date = expiration_date

    @property
    def instance_id(self):
        """Gets the instance_id of this DealerDBModelsEDTLiteRegistration.

        The identifier for the EDT Lite.

        :return: The instance_id of this DealerDBModelsEDTLiteRegistration.
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this DealerDBModelsEDTLiteRegistration.

        The identifier for the EDT Lite.

        :param instance_id: The instance_id of this DealerDBModelsEDTLiteRegistration.
        :type instance_id: str
        """
        if instance_id is None:
            raise ValueError("Invalid value for `instance_id`, must not be `None`")

        self._instance_id = instance_id

    @property
    def voucher_code(self):
        """Gets the voucher_code of this DealerDBModelsEDTLiteRegistration.

        The voucher code with which the EDT Lite was created.

        :return: The voucher_code of this DealerDBModelsEDTLiteRegistration.
        :rtype: str
        """
        return self._voucher_code

    @voucher_code.setter
    def voucher_code(self, voucher_code):
        """Sets the voucher_code of this DealerDBModelsEDTLiteRegistration.

        The voucher code with which the EDT Lite was created.

        :param voucher_code: The voucher_code of this DealerDBModelsEDTLiteRegistration.
        :type voucher_code: str
        """
        if voucher_code is None:
            raise ValueError("Invalid value for `voucher_code`, must not be `None`")

        self._voucher_code = voucher_code
