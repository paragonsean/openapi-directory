# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.build_system_shared_dto_agent_status import BuildSystemSharedDTOAgentStatus
from openapi_server.models.build_system_shared_dto_step_configuration import BuildSystemSharedDTOStepConfiguration
from openapi_server import util


class BuildSystemSharedDTOAgent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, agent_id: int=None, keep_alive_interval: int=None, machine_name: str=None, status: BuildSystemSharedDTOAgentStatus=None, step_configurations: List[BuildSystemSharedDTOStepConfiguration]=None, user_id: int=None):
        """BuildSystemSharedDTOAgent - a model defined in OpenAPI

        :param agent_id: The agent_id of this BuildSystemSharedDTOAgent.
        :param keep_alive_interval: The keep_alive_interval of this BuildSystemSharedDTOAgent.
        :param machine_name: The machine_name of this BuildSystemSharedDTOAgent.
        :param status: The status of this BuildSystemSharedDTOAgent.
        :param step_configurations: The step_configurations of this BuildSystemSharedDTOAgent.
        :param user_id: The user_id of this BuildSystemSharedDTOAgent.
        """
        self.openapi_types = {
            'agent_id': int,
            'keep_alive_interval': int,
            'machine_name': str,
            'status': BuildSystemSharedDTOAgentStatus,
            'step_configurations': List[BuildSystemSharedDTOStepConfiguration],
            'user_id': int
        }

        self.attribute_map = {
            'agent_id': 'AgentID',
            'keep_alive_interval': 'KeepAliveInterval',
            'machine_name': 'MachineName',
            'status': 'Status',
            'step_configurations': 'StepConfigurations',
            'user_id': 'UserID'
        }

        self._agent_id = agent_id
        self._keep_alive_interval = keep_alive_interval
        self._machine_name = machine_name
        self._status = status
        self._step_configurations = step_configurations
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BuildSystemSharedDTOAgent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BuildSystem.Shared.DTO.Agent of this BuildSystemSharedDTOAgent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def agent_id(self):
        """Gets the agent_id of this BuildSystemSharedDTOAgent.

        The id of the Agent

        :return: The agent_id of this BuildSystemSharedDTOAgent.
        :rtype: int
        """
        return self._agent_id

    @agent_id.setter
    def agent_id(self, agent_id):
        """Sets the agent_id of this BuildSystemSharedDTOAgent.

        The id of the Agent

        :param agent_id: The agent_id of this BuildSystemSharedDTOAgent.
        :type agent_id: int
        """

        self._agent_id = agent_id

    @property
    def keep_alive_interval(self):
        """Gets the keep_alive_interval of this BuildSystemSharedDTOAgent.

        The 'Heartbeat Interval' used by the Build Agent.

        :return: The keep_alive_interval of this BuildSystemSharedDTOAgent.
        :rtype: int
        """
        return self._keep_alive_interval

    @keep_alive_interval.setter
    def keep_alive_interval(self, keep_alive_interval):
        """Sets the keep_alive_interval of this BuildSystemSharedDTOAgent.

        The 'Heartbeat Interval' used by the Build Agent.

        :param keep_alive_interval: The keep_alive_interval of this BuildSystemSharedDTOAgent.
        :type keep_alive_interval: int
        """
        if keep_alive_interval is None:
            raise ValueError("Invalid value for `keep_alive_interval`, must not be `None`")

        self._keep_alive_interval = keep_alive_interval

    @property
    def machine_name(self):
        """Gets the machine_name of this BuildSystemSharedDTOAgent.

        The machine name of the computer the agent is running on

        :return: The machine_name of this BuildSystemSharedDTOAgent.
        :rtype: str
        """
        return self._machine_name

    @machine_name.setter
    def machine_name(self, machine_name):
        """Sets the machine_name of this BuildSystemSharedDTOAgent.

        The machine name of the computer the agent is running on

        :param machine_name: The machine_name of this BuildSystemSharedDTOAgent.
        :type machine_name: str
        """
        if machine_name is None:
            raise ValueError("Invalid value for `machine_name`, must not be `None`")

        self._machine_name = machine_name

    @property
    def status(self):
        """Gets the status of this BuildSystemSharedDTOAgent.


        :return: The status of this BuildSystemSharedDTOAgent.
        :rtype: BuildSystemSharedDTOAgentStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BuildSystemSharedDTOAgent.


        :param status: The status of this BuildSystemSharedDTOAgent.
        :type status: BuildSystemSharedDTOAgentStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def step_configurations(self):
        """Gets the step_configurations of this BuildSystemSharedDTOAgent.

        The agent's step configurations

        :return: The step_configurations of this BuildSystemSharedDTOAgent.
        :rtype: List[BuildSystemSharedDTOStepConfiguration]
        """
        return self._step_configurations

    @step_configurations.setter
    def step_configurations(self, step_configurations):
        """Sets the step_configurations of this BuildSystemSharedDTOAgent.

        The agent's step configurations

        :param step_configurations: The step_configurations of this BuildSystemSharedDTOAgent.
        :type step_configurations: List[BuildSystemSharedDTOStepConfiguration]
        """

        self._step_configurations = step_configurations

    @property
    def user_id(self):
        """Gets the user_id of this BuildSystemSharedDTOAgent.

        The UserID of the Agent

        :return: The user_id of this BuildSystemSharedDTOAgent.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this BuildSystemSharedDTOAgent.

        The UserID of the Agent

        :param user_id: The user_id of this BuildSystemSharedDTOAgent.
        :type user_id: int
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")

        self._user_id = user_id
