# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class APIModelsUser(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, change_password: str=None, email: str=None, name: str=None, password: str=None, user_id: int=None, username: str=None):
        """APIModelsUser - a model defined in OpenAPI

        :param change_password: The change_password of this APIModelsUser.
        :param email: The email of this APIModelsUser.
        :param name: The name of this APIModelsUser.
        :param password: The password of this APIModelsUser.
        :param user_id: The user_id of this APIModelsUser.
        :param username: The username of this APIModelsUser.
        """
        self.openapi_types = {
            'change_password': str,
            'email': str,
            'name': str,
            'password': str,
            'user_id': int,
            'username': str
        }

        self.attribute_map = {
            'change_password': 'ChangePassword',
            'email': 'Email',
            'name': 'Name',
            'password': 'Password',
            'user_id': 'UserID',
            'username': 'Username'
        }

        self._change_password = change_password
        self._email = email
        self._name = name
        self._password = password
        self._user_id = user_id
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'APIModelsUser':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The API.Models.User of this APIModelsUser.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def change_password(self):
        """Gets the change_password of this APIModelsUser.

        Never Returned.  When changing a user's password, this field must contain the new password.

        :return: The change_password of this APIModelsUser.
        :rtype: str
        """
        return self._change_password

    @change_password.setter
    def change_password(self, change_password):
        """Sets the change_password of this APIModelsUser.

        Never Returned.  When changing a user's password, this field must contain the new password.

        :param change_password: The change_password of this APIModelsUser.
        :type change_password: str
        """

        self._change_password = change_password

    @property
    def email(self):
        """Gets the email of this APIModelsUser.

        The user's email address

        :return: The email of this APIModelsUser.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this APIModelsUser.

        The user's email address

        :param email: The email of this APIModelsUser.
        :type email: str
        """

        self._email = email

    @property
    def name(self):
        """Gets the name of this APIModelsUser.

        The user's name

        :return: The name of this APIModelsUser.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this APIModelsUser.

        The user's name

        :param name: The name of this APIModelsUser.
        :type name: str
        """

        self._name = name

    @property
    def password(self):
        """Gets the password of this APIModelsUser.

        Never Returned.  Required when creating a new user or updating a user.  When changing a user's password this field must contain the current password.

        :return: The password of this APIModelsUser.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this APIModelsUser.

        Never Returned.  Required when creating a new user or updating a user.  When changing a user's password this field must contain the current password.

        :param password: The password of this APIModelsUser.
        :type password: str
        """

        self._password = password

    @property
    def user_id(self):
        """Gets the user_id of this APIModelsUser.

        The user ID

        :return: The user_id of this APIModelsUser.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this APIModelsUser.

        The user ID

        :param user_id: The user_id of this APIModelsUser.
        :type user_id: int
        """

        self._user_id = user_id

    @property
    def username(self):
        """Gets the username of this APIModelsUser.

        The username used for authentication

        :return: The username of this APIModelsUser.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this APIModelsUser.

        The username used for authentication

        :param username: The username of this APIModelsUser.
        :type username: str
        """

        self._username = username
