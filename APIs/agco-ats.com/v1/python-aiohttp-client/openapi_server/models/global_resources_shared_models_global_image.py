# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.global_resources_shared_models_global_image_category import GlobalResourcesSharedModelsGlobalImageCategory
from openapi_server import util


class GlobalResourcesSharedModelsGlobalImage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, crc: str=None, categories: List[GlobalResourcesSharedModelsGlobalImageCategory]=None, _date: datetime=None, description: str=None, height: int=None, id: str=None, name: str=None, publisher: str=None, size: int=None, state: str=None, thumbnail_crc: str=None, thumbnail_size: int=None, width: int=None):
        """GlobalResourcesSharedModelsGlobalImage - a model defined in OpenAPI

        :param crc: The crc of this GlobalResourcesSharedModelsGlobalImage.
        :param categories: The categories of this GlobalResourcesSharedModelsGlobalImage.
        :param _date: The _date of this GlobalResourcesSharedModelsGlobalImage.
        :param description: The description of this GlobalResourcesSharedModelsGlobalImage.
        :param height: The height of this GlobalResourcesSharedModelsGlobalImage.
        :param id: The id of this GlobalResourcesSharedModelsGlobalImage.
        :param name: The name of this GlobalResourcesSharedModelsGlobalImage.
        :param publisher: The publisher of this GlobalResourcesSharedModelsGlobalImage.
        :param size: The size of this GlobalResourcesSharedModelsGlobalImage.
        :param state: The state of this GlobalResourcesSharedModelsGlobalImage.
        :param thumbnail_crc: The thumbnail_crc of this GlobalResourcesSharedModelsGlobalImage.
        :param thumbnail_size: The thumbnail_size of this GlobalResourcesSharedModelsGlobalImage.
        :param width: The width of this GlobalResourcesSharedModelsGlobalImage.
        """
        self.openapi_types = {
            'crc': str,
            'categories': List[GlobalResourcesSharedModelsGlobalImageCategory],
            '_date': datetime,
            'description': str,
            'height': int,
            'id': str,
            'name': str,
            'publisher': str,
            'size': int,
            'state': str,
            'thumbnail_crc': str,
            'thumbnail_size': int,
            'width': int
        }

        self.attribute_map = {
            'crc': 'CRC',
            'categories': 'Categories',
            '_date': 'Date',
            'description': 'Description',
            'height': 'Height',
            'id': 'Id',
            'name': 'Name',
            'publisher': 'Publisher',
            'size': 'Size',
            'state': 'State',
            'thumbnail_crc': 'ThumbnailCRC',
            'thumbnail_size': 'ThumbnailSize',
            'width': 'Width'
        }

        self._crc = crc
        self._categories = categories
        self.__date = _date
        self._description = description
        self._height = height
        self._id = id
        self._name = name
        self._publisher = publisher
        self._size = size
        self._state = state
        self._thumbnail_crc = thumbnail_crc
        self._thumbnail_size = thumbnail_size
        self._width = width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GlobalResourcesSharedModelsGlobalImage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GlobalResources.Shared.Models.GlobalImage of this GlobalResourcesSharedModelsGlobalImage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def crc(self):
        """Gets the crc of this GlobalResourcesSharedModelsGlobalImage.

        The Hash of the file (SHA256, HEX-encoded).

        :return: The crc of this GlobalResourcesSharedModelsGlobalImage.
        :rtype: str
        """
        return self._crc

    @crc.setter
    def crc(self, crc):
        """Sets the crc of this GlobalResourcesSharedModelsGlobalImage.

        The Hash of the file (SHA256, HEX-encoded).

        :param crc: The crc of this GlobalResourcesSharedModelsGlobalImage.
        :type crc: str
        """
        if crc is None:
            raise ValueError("Invalid value for `crc`, must not be `None`")

        self._crc = crc

    @property
    def categories(self):
        """Gets the categories of this GlobalResourcesSharedModelsGlobalImage.

        The category of the file.

        :return: The categories of this GlobalResourcesSharedModelsGlobalImage.
        :rtype: List[GlobalResourcesSharedModelsGlobalImageCategory]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this GlobalResourcesSharedModelsGlobalImage.

        The category of the file.

        :param categories: The categories of this GlobalResourcesSharedModelsGlobalImage.
        :type categories: List[GlobalResourcesSharedModelsGlobalImageCategory]
        """

        self._categories = categories

    @property
    def _date(self):
        """Gets the _date of this GlobalResourcesSharedModelsGlobalImage.

        The date of the file.

        :return: The _date of this GlobalResourcesSharedModelsGlobalImage.
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this GlobalResourcesSharedModelsGlobalImage.

        The date of the file.

        :param _date: The _date of this GlobalResourcesSharedModelsGlobalImage.
        :type _date: datetime
        """

        self.__date = _date

    @property
    def description(self):
        """Gets the description of this GlobalResourcesSharedModelsGlobalImage.

        The description of the file.

        :return: The description of this GlobalResourcesSharedModelsGlobalImage.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GlobalResourcesSharedModelsGlobalImage.

        The description of the file.

        :param description: The description of this GlobalResourcesSharedModelsGlobalImage.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def height(self):
        """Gets the height of this GlobalResourcesSharedModelsGlobalImage.

        The height of the file.

        :return: The height of this GlobalResourcesSharedModelsGlobalImage.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this GlobalResourcesSharedModelsGlobalImage.

        The height of the file.

        :param height: The height of this GlobalResourcesSharedModelsGlobalImage.
        :type height: int
        """
        if height is None:
            raise ValueError("Invalid value for `height`, must not be `None`")

        self._height = height

    @property
    def id(self):
        """Gets the id of this GlobalResourcesSharedModelsGlobalImage.

        The Id of the GlobalImage Metadata.

        :return: The id of this GlobalResourcesSharedModelsGlobalImage.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GlobalResourcesSharedModelsGlobalImage.

        The Id of the GlobalImage Metadata.

        :param id: The id of this GlobalResourcesSharedModelsGlobalImage.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this GlobalResourcesSharedModelsGlobalImage.

        The name of the file when downloaded.

        :return: The name of this GlobalResourcesSharedModelsGlobalImage.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GlobalResourcesSharedModelsGlobalImage.

        The name of the file when downloaded.

        :param name: The name of this GlobalResourcesSharedModelsGlobalImage.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def publisher(self):
        """Gets the publisher of this GlobalResourcesSharedModelsGlobalImage.

        The Publisher of the file.

        :return: The publisher of this GlobalResourcesSharedModelsGlobalImage.
        :rtype: str
        """
        return self._publisher

    @publisher.setter
    def publisher(self, publisher):
        """Sets the publisher of this GlobalResourcesSharedModelsGlobalImage.

        The Publisher of the file.

        :param publisher: The publisher of this GlobalResourcesSharedModelsGlobalImage.
        :type publisher: str
        """

        self._publisher = publisher

    @property
    def size(self):
        """Gets the size of this GlobalResourcesSharedModelsGlobalImage.

        The size of the file in bytes. Null until assigned by server when marked as 'Available'. Read Only

        :return: The size of this GlobalResourcesSharedModelsGlobalImage.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this GlobalResourcesSharedModelsGlobalImage.

        The size of the file in bytes. Null until assigned by server when marked as 'Available'. Read Only

        :param size: The size of this GlobalResourcesSharedModelsGlobalImage.
        :type size: int
        """

        self._size = size

    @property
    def state(self):
        """Gets the state of this GlobalResourcesSharedModelsGlobalImage.

        Indicates the state of this file. Must be 'Created' when created. Read Only.

        :return: The state of this GlobalResourcesSharedModelsGlobalImage.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this GlobalResourcesSharedModelsGlobalImage.

        Indicates the state of this file. Must be 'Created' when created. Read Only.

        :param state: The state of this GlobalResourcesSharedModelsGlobalImage.
        :type state: str
        """
        allowed_values = ["Created", "Available", "Removed"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def thumbnail_crc(self):
        """Gets the thumbnail_crc of this GlobalResourcesSharedModelsGlobalImage.

        The Hash of the thumbnail file (SHA256, HEX-encoded).

        :return: The thumbnail_crc of this GlobalResourcesSharedModelsGlobalImage.
        :rtype: str
        """
        return self._thumbnail_crc

    @thumbnail_crc.setter
    def thumbnail_crc(self, thumbnail_crc):
        """Sets the thumbnail_crc of this GlobalResourcesSharedModelsGlobalImage.

        The Hash of the thumbnail file (SHA256, HEX-encoded).

        :param thumbnail_crc: The thumbnail_crc of this GlobalResourcesSharedModelsGlobalImage.
        :type thumbnail_crc: str
        """
        if thumbnail_crc is None:
            raise ValueError("Invalid value for `thumbnail_crc`, must not be `None`")

        self._thumbnail_crc = thumbnail_crc

    @property
    def thumbnail_size(self):
        """Gets the thumbnail_size of this GlobalResourcesSharedModelsGlobalImage.

        The size of the thumbnail file in bytes. Null until assigned by server when marked as 'Available'. Read Only

        :return: The thumbnail_size of this GlobalResourcesSharedModelsGlobalImage.
        :rtype: int
        """
        return self._thumbnail_size

    @thumbnail_size.setter
    def thumbnail_size(self, thumbnail_size):
        """Sets the thumbnail_size of this GlobalResourcesSharedModelsGlobalImage.

        The size of the thumbnail file in bytes. Null until assigned by server when marked as 'Available'. Read Only

        :param thumbnail_size: The thumbnail_size of this GlobalResourcesSharedModelsGlobalImage.
        :type thumbnail_size: int
        """

        self._thumbnail_size = thumbnail_size

    @property
    def width(self):
        """Gets the width of this GlobalResourcesSharedModelsGlobalImage.

        The width of the file.

        :return: The width of this GlobalResourcesSharedModelsGlobalImage.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this GlobalResourcesSharedModelsGlobalImage.

        The width of the file.

        :param width: The width of this GlobalResourcesSharedModelsGlobalImage.
        :type width: int
        """
        if width is None:
            raise ValueError("Invalid value for `width`, must not be `None`")

        self._width = width
