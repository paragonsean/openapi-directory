/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAuthorizationCodesApi_H
#define OAI_OAIAuthorizationCodesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAPI_IPagedResponse_AuthorizationCodes_Shared_Models_AuthorizationCode_.h"
#include "OAIAPI_Models_ApiError.h"
#include "OAIAuthorizationCodes_Shared_Models_AuthorizationCode.h"
#include "OAIAuthorizationCodes_Shared_Models_AuthorizationContactInformation.h"
#include "OAIAuthorizationCodes_Shared_Models_CodeValidationModel.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAuthorizationCodesApi : public QObject {
    Q_OBJECT

public:
    OAIAuthorizationCodesApi(const int timeOut = 0);
    ~OAIAuthorizationCodesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void authorizationCodesDeleteAuthorizationCode(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void authorizationCodesGetAuthorizationCode(const qint32 &id);

    /**
    * @param[in]  code QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  definition_id QString [optional]
    * @param[in]  created_by_user_id qint32 [optional]
    * @param[in]  deleted_by_user_id qint32 [optional]
    * @param[in]  include_deleted bool [optional]
    */
    virtual void authorizationCodesGetAuthorizationCodes(const ::OpenAPI::OptionalParam<QString> &code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &definition_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &created_by_user_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &deleted_by_user_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &include_deleted = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void authorizationCodesGetContactInformation(const qint32 &id);

    /**
    * @param[in]  oai_authorization_codes_shared_models_authorization_code OAIAuthorizationCodes_Shared_Models_AuthorizationCode [required]
    */
    virtual void authorizationCodesPostAuthorizationCode(const OAIAuthorizationCodes_Shared_Models_AuthorizationCode &oai_authorization_codes_shared_models_authorization_code);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_authorization_codes_shared_models_authorization_code OAIAuthorizationCodes_Shared_Models_AuthorizationCode [required]
    */
    virtual void authorizationCodesPutAuthorizationCode(const qint32 &id, const OAIAuthorizationCodes_Shared_Models_AuthorizationCode &oai_authorization_codes_shared_models_authorization_code);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void authorizationCodesValidateAuthorizationCode(const qint32 &id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void authorizationCodesDeleteAuthorizationCodeCallback(OAIHttpRequestWorker *worker);
    void authorizationCodesGetAuthorizationCodeCallback(OAIHttpRequestWorker *worker);
    void authorizationCodesGetAuthorizationCodesCallback(OAIHttpRequestWorker *worker);
    void authorizationCodesGetContactInformationCallback(OAIHttpRequestWorker *worker);
    void authorizationCodesPostAuthorizationCodeCallback(OAIHttpRequestWorker *worker);
    void authorizationCodesPutAuthorizationCodeCallback(OAIHttpRequestWorker *worker);
    void authorizationCodesValidateAuthorizationCodeCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void authorizationCodesDeleteAuthorizationCodeSignal();
    void authorizationCodesGetAuthorizationCodeSignal(OAIAuthorizationCodes_Shared_Models_AuthorizationCode summary);
    void authorizationCodesGetAuthorizationCodesSignal(OAIAPI_IPagedResponse_AuthorizationCodes_Shared_Models_AuthorizationCode_ summary);
    void authorizationCodesGetContactInformationSignal(OAIAuthorizationCodes_Shared_Models_AuthorizationContactInformation summary);
    void authorizationCodesPostAuthorizationCodeSignal(qint32 summary);
    void authorizationCodesPutAuthorizationCodeSignal();
    void authorizationCodesValidateAuthorizationCodeSignal(OAIAuthorizationCodes_Shared_Models_CodeValidationModel summary);


    void authorizationCodesDeleteAuthorizationCodeSignalFull(OAIHttpRequestWorker *worker);
    void authorizationCodesGetAuthorizationCodeSignalFull(OAIHttpRequestWorker *worker, OAIAuthorizationCodes_Shared_Models_AuthorizationCode summary);
    void authorizationCodesGetAuthorizationCodesSignalFull(OAIHttpRequestWorker *worker, OAIAPI_IPagedResponse_AuthorizationCodes_Shared_Models_AuthorizationCode_ summary);
    void authorizationCodesGetContactInformationSignalFull(OAIHttpRequestWorker *worker, OAIAuthorizationCodes_Shared_Models_AuthorizationContactInformation summary);
    void authorizationCodesPostAuthorizationCodeSignalFull(OAIHttpRequestWorker *worker, qint32 summary);
    void authorizationCodesPutAuthorizationCodeSignalFull(OAIHttpRequestWorker *worker);
    void authorizationCodesValidateAuthorizationCodeSignalFull(OAIHttpRequestWorker *worker, OAIAuthorizationCodes_Shared_Models_CodeValidationModel summary);

    Q_DECL_DEPRECATED_X("Use authorizationCodesDeleteAuthorizationCodeSignalError() instead")
    void authorizationCodesDeleteAuthorizationCodeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void authorizationCodesDeleteAuthorizationCodeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizationCodesGetAuthorizationCodeSignalError() instead")
    void authorizationCodesGetAuthorizationCodeSignalE(OAIAuthorizationCodes_Shared_Models_AuthorizationCode summary, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizationCodesGetAuthorizationCodeSignalError(OAIAuthorizationCodes_Shared_Models_AuthorizationCode summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizationCodesGetAuthorizationCodesSignalError() instead")
    void authorizationCodesGetAuthorizationCodesSignalE(OAIAPI_IPagedResponse_AuthorizationCodes_Shared_Models_AuthorizationCode_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizationCodesGetAuthorizationCodesSignalError(OAIAPI_IPagedResponse_AuthorizationCodes_Shared_Models_AuthorizationCode_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizationCodesGetContactInformationSignalError() instead")
    void authorizationCodesGetContactInformationSignalE(OAIAuthorizationCodes_Shared_Models_AuthorizationContactInformation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizationCodesGetContactInformationSignalError(OAIAuthorizationCodes_Shared_Models_AuthorizationContactInformation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizationCodesPostAuthorizationCodeSignalError() instead")
    void authorizationCodesPostAuthorizationCodeSignalE(qint32 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizationCodesPostAuthorizationCodeSignalError(qint32 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizationCodesPutAuthorizationCodeSignalError() instead")
    void authorizationCodesPutAuthorizationCodeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void authorizationCodesPutAuthorizationCodeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizationCodesValidateAuthorizationCodeSignalError() instead")
    void authorizationCodesValidateAuthorizationCodeSignalE(OAIAuthorizationCodes_Shared_Models_CodeValidationModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizationCodesValidateAuthorizationCodeSignalError(OAIAuthorizationCodes_Shared_Models_CodeValidationModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use authorizationCodesDeleteAuthorizationCodeSignalErrorFull() instead")
    void authorizationCodesDeleteAuthorizationCodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizationCodesDeleteAuthorizationCodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizationCodesGetAuthorizationCodeSignalErrorFull() instead")
    void authorizationCodesGetAuthorizationCodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizationCodesGetAuthorizationCodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizationCodesGetAuthorizationCodesSignalErrorFull() instead")
    void authorizationCodesGetAuthorizationCodesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizationCodesGetAuthorizationCodesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizationCodesGetContactInformationSignalErrorFull() instead")
    void authorizationCodesGetContactInformationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizationCodesGetContactInformationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizationCodesPostAuthorizationCodeSignalErrorFull() instead")
    void authorizationCodesPostAuthorizationCodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizationCodesPostAuthorizationCodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizationCodesPutAuthorizationCodeSignalErrorFull() instead")
    void authorizationCodesPutAuthorizationCodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizationCodesPutAuthorizationCodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizationCodesValidateAuthorizationCodeSignalErrorFull() instead")
    void authorizationCodesValidateAuthorizationCodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizationCodesValidateAuthorizationCodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
