/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPackageTypetoBundlesApi_H
#define OAI_OAIPackageTypetoBundlesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAPI_Models_ApiError.h"
#include "OAIAPI_PagedResponse_UpdateSystem_Models_PackageTypeIDtoBundle_.h"
#include "OAIUpdateSystem_Models_PackageTypeIDtoBundle.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPackageTypetoBundlesApi : public QObject {
    Q_OBJECT

public:
    OAIPackageTypetoBundlesApi(const int timeOut = 0);
    ~OAIPackageTypetoBundlesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  bundle_id QString [required]
    * @param[in]  package_type_id QString [required]
    */
    virtual void packageTypetoBundlesDelete(const QString &bundle_id, const QString &package_type_id);

    /**
    * @param[in]  bundle_id QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void packageTypetoBundlesGet(const ::OpenAPI::OptionalParam<QString> &bundle_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  oai_update_system_models_package_type_i_dto_bundle OAIUpdateSystem_Models_PackageTypeIDtoBundle [required]
    */
    virtual void packageTypetoBundlesPost(const OAIUpdateSystem_Models_PackageTypeIDtoBundle &oai_update_system_models_package_type_i_dto_bundle);

    /**
    * @param[in]  oai_update_system_models_package_type_i_dto_bundle OAIUpdateSystem_Models_PackageTypeIDtoBundle [required]
    */
    virtual void packageTypetoBundlesPut(const OAIUpdateSystem_Models_PackageTypeIDtoBundle &oai_update_system_models_package_type_i_dto_bundle);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void packageTypetoBundlesDeleteCallback(OAIHttpRequestWorker *worker);
    void packageTypetoBundlesGetCallback(OAIHttpRequestWorker *worker);
    void packageTypetoBundlesPostCallback(OAIHttpRequestWorker *worker);
    void packageTypetoBundlesPutCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void packageTypetoBundlesDeleteSignal();
    void packageTypetoBundlesGetSignal(OAIAPI_PagedResponse_UpdateSystem_Models_PackageTypeIDtoBundle_ summary);
    void packageTypetoBundlesPostSignal();
    void packageTypetoBundlesPutSignal();


    void packageTypetoBundlesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void packageTypetoBundlesGetSignalFull(OAIHttpRequestWorker *worker, OAIAPI_PagedResponse_UpdateSystem_Models_PackageTypeIDtoBundle_ summary);
    void packageTypetoBundlesPostSignalFull(OAIHttpRequestWorker *worker);
    void packageTypetoBundlesPutSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use packageTypetoBundlesDeleteSignalError() instead")
    void packageTypetoBundlesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void packageTypetoBundlesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use packageTypetoBundlesGetSignalError() instead")
    void packageTypetoBundlesGetSignalE(OAIAPI_PagedResponse_UpdateSystem_Models_PackageTypeIDtoBundle_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void packageTypetoBundlesGetSignalError(OAIAPI_PagedResponse_UpdateSystem_Models_PackageTypeIDtoBundle_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use packageTypetoBundlesPostSignalError() instead")
    void packageTypetoBundlesPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void packageTypetoBundlesPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use packageTypetoBundlesPutSignalError() instead")
    void packageTypetoBundlesPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void packageTypetoBundlesPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use packageTypetoBundlesDeleteSignalErrorFull() instead")
    void packageTypetoBundlesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void packageTypetoBundlesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use packageTypetoBundlesGetSignalErrorFull() instead")
    void packageTypetoBundlesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void packageTypetoBundlesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use packageTypetoBundlesPostSignalErrorFull() instead")
    void packageTypetoBundlesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void packageTypetoBundlesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use packageTypetoBundlesPutSignalErrorFull() instead")
    void packageTypetoBundlesPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void packageTypetoBundlesPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
