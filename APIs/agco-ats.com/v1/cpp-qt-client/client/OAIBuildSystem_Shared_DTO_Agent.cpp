/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBuildSystem_Shared_DTO_Agent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBuildSystem_Shared_DTO_Agent::OAIBuildSystem_Shared_DTO_Agent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBuildSystem_Shared_DTO_Agent::OAIBuildSystem_Shared_DTO_Agent() {
    this->initializeModel();
}

OAIBuildSystem_Shared_DTO_Agent::~OAIBuildSystem_Shared_DTO_Agent() {}

void OAIBuildSystem_Shared_DTO_Agent::initializeModel() {

    m_agent_id_isSet = false;
    m_agent_id_isValid = false;

    m_keep_alive_interval_isSet = false;
    m_keep_alive_interval_isValid = false;

    m_machine_name_isSet = false;
    m_machine_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_step_configurations_isSet = false;
    m_step_configurations_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIBuildSystem_Shared_DTO_Agent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBuildSystem_Shared_DTO_Agent::fromJsonObject(QJsonObject json) {

    m_agent_id_isValid = ::OpenAPI::fromJsonValue(m_agent_id, json[QString("AgentID")]);
    m_agent_id_isSet = !json[QString("AgentID")].isNull() && m_agent_id_isValid;

    m_keep_alive_interval_isValid = ::OpenAPI::fromJsonValue(m_keep_alive_interval, json[QString("KeepAliveInterval")]);
    m_keep_alive_interval_isSet = !json[QString("KeepAliveInterval")].isNull() && m_keep_alive_interval_isValid;

    m_machine_name_isValid = ::OpenAPI::fromJsonValue(m_machine_name, json[QString("MachineName")]);
    m_machine_name_isSet = !json[QString("MachineName")].isNull() && m_machine_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_step_configurations_isValid = ::OpenAPI::fromJsonValue(m_step_configurations, json[QString("StepConfigurations")]);
    m_step_configurations_isSet = !json[QString("StepConfigurations")].isNull() && m_step_configurations_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("UserID")]);
    m_user_id_isSet = !json[QString("UserID")].isNull() && m_user_id_isValid;
}

QString OAIBuildSystem_Shared_DTO_Agent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBuildSystem_Shared_DTO_Agent::asJsonObject() const {
    QJsonObject obj;
    if (m_agent_id_isSet) {
        obj.insert(QString("AgentID"), ::OpenAPI::toJsonValue(m_agent_id));
    }
    if (m_keep_alive_interval_isSet) {
        obj.insert(QString("KeepAliveInterval"), ::OpenAPI::toJsonValue(m_keep_alive_interval));
    }
    if (m_machine_name_isSet) {
        obj.insert(QString("MachineName"), ::OpenAPI::toJsonValue(m_machine_name));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_step_configurations.size() > 0) {
        obj.insert(QString("StepConfigurations"), ::OpenAPI::toJsonValue(m_step_configurations));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("UserID"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

qint32 OAIBuildSystem_Shared_DTO_Agent::getAgentId() const {
    return m_agent_id;
}
void OAIBuildSystem_Shared_DTO_Agent::setAgentId(const qint32 &agent_id) {
    m_agent_id = agent_id;
    m_agent_id_isSet = true;
}

bool OAIBuildSystem_Shared_DTO_Agent::is_agent_id_Set() const{
    return m_agent_id_isSet;
}

bool OAIBuildSystem_Shared_DTO_Agent::is_agent_id_Valid() const{
    return m_agent_id_isValid;
}

qint32 OAIBuildSystem_Shared_DTO_Agent::getKeepAliveInterval() const {
    return m_keep_alive_interval;
}
void OAIBuildSystem_Shared_DTO_Agent::setKeepAliveInterval(const qint32 &keep_alive_interval) {
    m_keep_alive_interval = keep_alive_interval;
    m_keep_alive_interval_isSet = true;
}

bool OAIBuildSystem_Shared_DTO_Agent::is_keep_alive_interval_Set() const{
    return m_keep_alive_interval_isSet;
}

bool OAIBuildSystem_Shared_DTO_Agent::is_keep_alive_interval_Valid() const{
    return m_keep_alive_interval_isValid;
}

QString OAIBuildSystem_Shared_DTO_Agent::getMachineName() const {
    return m_machine_name;
}
void OAIBuildSystem_Shared_DTO_Agent::setMachineName(const QString &machine_name) {
    m_machine_name = machine_name;
    m_machine_name_isSet = true;
}

bool OAIBuildSystem_Shared_DTO_Agent::is_machine_name_Set() const{
    return m_machine_name_isSet;
}

bool OAIBuildSystem_Shared_DTO_Agent::is_machine_name_Valid() const{
    return m_machine_name_isValid;
}

OAIBuildSystem_Shared_DTO_AgentStatus OAIBuildSystem_Shared_DTO_Agent::getStatus() const {
    return m_status;
}
void OAIBuildSystem_Shared_DTO_Agent::setStatus(const OAIBuildSystem_Shared_DTO_AgentStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIBuildSystem_Shared_DTO_Agent::is_status_Set() const{
    return m_status_isSet;
}

bool OAIBuildSystem_Shared_DTO_Agent::is_status_Valid() const{
    return m_status_isValid;
}

QList<OAIBuildSystem_Shared_DTO_StepConfiguration> OAIBuildSystem_Shared_DTO_Agent::getStepConfigurations() const {
    return m_step_configurations;
}
void OAIBuildSystem_Shared_DTO_Agent::setStepConfigurations(const QList<OAIBuildSystem_Shared_DTO_StepConfiguration> &step_configurations) {
    m_step_configurations = step_configurations;
    m_step_configurations_isSet = true;
}

bool OAIBuildSystem_Shared_DTO_Agent::is_step_configurations_Set() const{
    return m_step_configurations_isSet;
}

bool OAIBuildSystem_Shared_DTO_Agent::is_step_configurations_Valid() const{
    return m_step_configurations_isValid;
}

qint32 OAIBuildSystem_Shared_DTO_Agent::getUserId() const {
    return m_user_id;
}
void OAIBuildSystem_Shared_DTO_Agent::setUserId(const qint32 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIBuildSystem_Shared_DTO_Agent::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIBuildSystem_Shared_DTO_Agent::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIBuildSystem_Shared_DTO_Agent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_agent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keep_alive_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_machine_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_step_configurations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBuildSystem_Shared_DTO_Agent::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_keep_alive_interval_isValid && m_machine_name_isValid && m_status_isValid && m_user_id_isValid && true;
}

} // namespace OpenAPI
