/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDealerDB_Models_Dealer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDealerDB_Models_Dealer::OAIDealerDB_Models_Dealer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDealerDB_Models_Dealer::OAIDealerDB_Models_Dealer() {
    this->initializeModel();
}

OAIDealerDB_Models_Dealer::~OAIDealerDB_Models_Dealer() {}

void OAIDealerDB_Models_Dealer::initializeModel() {

    m_billing_address_isSet = false;
    m_billing_address_isValid = false;

    m_billing_address2_isSet = false;
    m_billing_address2_isValid = false;

    m_billing_address3_isSet = false;
    m_billing_address3_isValid = false;

    m_billing_address4_isSet = false;
    m_billing_address4_isValid = false;

    m_billing_city_isSet = false;
    m_billing_city_isValid = false;

    m_billing_country_isSet = false;
    m_billing_country_isValid = false;

    m_billing_country_code_isSet = false;
    m_billing_country_code_isValid = false;

    m_billing_state_isSet = false;
    m_billing_state_isValid = false;

    m_billing_zip_isSet = false;
    m_billing_zip_isValid = false;

    m_brands_isSet = false;
    m_brands_isValid = false;

    m_dealer_code_isSet = false;
    m_dealer_code_isValid = false;

    m_dealer_name_isSet = false;
    m_dealer_name_isValid = false;

    m_dealer_status_isSet = false;
    m_dealer_status_isValid = false;

    m_dealer_status_update_date_isSet = false;
    m_dealer_status_update_date_isValid = false;

    m_filler_isSet = false;
    m_filler_isValid = false;

    m_is_valid_isSet = false;
    m_is_valid_isValid = false;

    m_language_preference_isSet = false;
    m_language_preference_isValid = false;

    m_region1_isSet = false;
    m_region1_isValid = false;

    m_region2_isSet = false;
    m_region2_isValid = false;

    m_region_mapping_isSet = false;
    m_region_mapping_isValid = false;

    m_role_brand_isSet = false;
    m_role_brand_isValid = false;

    m_shipping_address2_isSet = false;
    m_shipping_address2_isValid = false;

    m_shipping_address3_isSet = false;
    m_shipping_address3_isValid = false;

    m_shipping_address4_isSet = false;
    m_shipping_address4_isValid = false;

    m_shipping_city_isSet = false;
    m_shipping_city_isValid = false;

    m_shipping_country_isSet = false;
    m_shipping_country_isValid = false;

    m_shipping_state_isSet = false;
    m_shipping_state_isValid = false;

    m_shipping_street_isSet = false;
    m_shipping_street_isValid = false;

    m_shipping_zip_isSet = false;
    m_shipping_zip_isValid = false;

    m_telephone_isSet = false;
    m_telephone_isValid = false;

    m_vat_code_isSet = false;
    m_vat_code_isValid = false;
}

void OAIDealerDB_Models_Dealer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDealerDB_Models_Dealer::fromJsonObject(QJsonObject json) {

    m_billing_address_isValid = ::OpenAPI::fromJsonValue(m_billing_address, json[QString("BillingAddress")]);
    m_billing_address_isSet = !json[QString("BillingAddress")].isNull() && m_billing_address_isValid;

    m_billing_address2_isValid = ::OpenAPI::fromJsonValue(m_billing_address2, json[QString("BillingAddress2")]);
    m_billing_address2_isSet = !json[QString("BillingAddress2")].isNull() && m_billing_address2_isValid;

    m_billing_address3_isValid = ::OpenAPI::fromJsonValue(m_billing_address3, json[QString("BillingAddress3")]);
    m_billing_address3_isSet = !json[QString("BillingAddress3")].isNull() && m_billing_address3_isValid;

    m_billing_address4_isValid = ::OpenAPI::fromJsonValue(m_billing_address4, json[QString("BillingAddress4")]);
    m_billing_address4_isSet = !json[QString("BillingAddress4")].isNull() && m_billing_address4_isValid;

    m_billing_city_isValid = ::OpenAPI::fromJsonValue(m_billing_city, json[QString("BillingCity")]);
    m_billing_city_isSet = !json[QString("BillingCity")].isNull() && m_billing_city_isValid;

    m_billing_country_isValid = ::OpenAPI::fromJsonValue(m_billing_country, json[QString("BillingCountry")]);
    m_billing_country_isSet = !json[QString("BillingCountry")].isNull() && m_billing_country_isValid;

    m_billing_country_code_isValid = ::OpenAPI::fromJsonValue(m_billing_country_code, json[QString("BillingCountryCode")]);
    m_billing_country_code_isSet = !json[QString("BillingCountryCode")].isNull() && m_billing_country_code_isValid;

    m_billing_state_isValid = ::OpenAPI::fromJsonValue(m_billing_state, json[QString("BillingState")]);
    m_billing_state_isSet = !json[QString("BillingState")].isNull() && m_billing_state_isValid;

    m_billing_zip_isValid = ::OpenAPI::fromJsonValue(m_billing_zip, json[QString("BillingZip")]);
    m_billing_zip_isSet = !json[QString("BillingZip")].isNull() && m_billing_zip_isValid;

    m_brands_isValid = ::OpenAPI::fromJsonValue(m_brands, json[QString("Brands")]);
    m_brands_isSet = !json[QString("Brands")].isNull() && m_brands_isValid;

    m_dealer_code_isValid = ::OpenAPI::fromJsonValue(m_dealer_code, json[QString("DealerCode")]);
    m_dealer_code_isSet = !json[QString("DealerCode")].isNull() && m_dealer_code_isValid;

    m_dealer_name_isValid = ::OpenAPI::fromJsonValue(m_dealer_name, json[QString("DealerName")]);
    m_dealer_name_isSet = !json[QString("DealerName")].isNull() && m_dealer_name_isValid;

    m_dealer_status_isValid = ::OpenAPI::fromJsonValue(m_dealer_status, json[QString("DealerStatus")]);
    m_dealer_status_isSet = !json[QString("DealerStatus")].isNull() && m_dealer_status_isValid;

    m_dealer_status_update_date_isValid = ::OpenAPI::fromJsonValue(m_dealer_status_update_date, json[QString("DealerStatusUpdateDate")]);
    m_dealer_status_update_date_isSet = !json[QString("DealerStatusUpdateDate")].isNull() && m_dealer_status_update_date_isValid;

    m_filler_isValid = ::OpenAPI::fromJsonValue(m_filler, json[QString("Filler")]);
    m_filler_isSet = !json[QString("Filler")].isNull() && m_filler_isValid;

    m_is_valid_isValid = ::OpenAPI::fromJsonValue(m_is_valid, json[QString("IsValid")]);
    m_is_valid_isSet = !json[QString("IsValid")].isNull() && m_is_valid_isValid;

    m_language_preference_isValid = ::OpenAPI::fromJsonValue(m_language_preference, json[QString("LanguagePreference")]);
    m_language_preference_isSet = !json[QString("LanguagePreference")].isNull() && m_language_preference_isValid;

    m_region1_isValid = ::OpenAPI::fromJsonValue(m_region1, json[QString("Region1")]);
    m_region1_isSet = !json[QString("Region1")].isNull() && m_region1_isValid;

    m_region2_isValid = ::OpenAPI::fromJsonValue(m_region2, json[QString("Region2")]);
    m_region2_isSet = !json[QString("Region2")].isNull() && m_region2_isValid;

    m_region_mapping_isValid = ::OpenAPI::fromJsonValue(m_region_mapping, json[QString("RegionMapping")]);
    m_region_mapping_isSet = !json[QString("RegionMapping")].isNull() && m_region_mapping_isValid;

    m_role_brand_isValid = ::OpenAPI::fromJsonValue(m_role_brand, json[QString("RoleBrand")]);
    m_role_brand_isSet = !json[QString("RoleBrand")].isNull() && m_role_brand_isValid;

    m_shipping_address2_isValid = ::OpenAPI::fromJsonValue(m_shipping_address2, json[QString("ShippingAddress2")]);
    m_shipping_address2_isSet = !json[QString("ShippingAddress2")].isNull() && m_shipping_address2_isValid;

    m_shipping_address3_isValid = ::OpenAPI::fromJsonValue(m_shipping_address3, json[QString("ShippingAddress3")]);
    m_shipping_address3_isSet = !json[QString("ShippingAddress3")].isNull() && m_shipping_address3_isValid;

    m_shipping_address4_isValid = ::OpenAPI::fromJsonValue(m_shipping_address4, json[QString("ShippingAddress4")]);
    m_shipping_address4_isSet = !json[QString("ShippingAddress4")].isNull() && m_shipping_address4_isValid;

    m_shipping_city_isValid = ::OpenAPI::fromJsonValue(m_shipping_city, json[QString("ShippingCity")]);
    m_shipping_city_isSet = !json[QString("ShippingCity")].isNull() && m_shipping_city_isValid;

    m_shipping_country_isValid = ::OpenAPI::fromJsonValue(m_shipping_country, json[QString("ShippingCountry")]);
    m_shipping_country_isSet = !json[QString("ShippingCountry")].isNull() && m_shipping_country_isValid;

    m_shipping_state_isValid = ::OpenAPI::fromJsonValue(m_shipping_state, json[QString("ShippingState")]);
    m_shipping_state_isSet = !json[QString("ShippingState")].isNull() && m_shipping_state_isValid;

    m_shipping_street_isValid = ::OpenAPI::fromJsonValue(m_shipping_street, json[QString("ShippingStreet")]);
    m_shipping_street_isSet = !json[QString("ShippingStreet")].isNull() && m_shipping_street_isValid;

    m_shipping_zip_isValid = ::OpenAPI::fromJsonValue(m_shipping_zip, json[QString("ShippingZip")]);
    m_shipping_zip_isSet = !json[QString("ShippingZip")].isNull() && m_shipping_zip_isValid;

    m_telephone_isValid = ::OpenAPI::fromJsonValue(m_telephone, json[QString("Telephone")]);
    m_telephone_isSet = !json[QString("Telephone")].isNull() && m_telephone_isValid;

    m_vat_code_isValid = ::OpenAPI::fromJsonValue(m_vat_code, json[QString("VATCode")]);
    m_vat_code_isSet = !json[QString("VATCode")].isNull() && m_vat_code_isValid;
}

QString OAIDealerDB_Models_Dealer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDealerDB_Models_Dealer::asJsonObject() const {
    QJsonObject obj;
    if (m_billing_address_isSet) {
        obj.insert(QString("BillingAddress"), ::OpenAPI::toJsonValue(m_billing_address));
    }
    if (m_billing_address2_isSet) {
        obj.insert(QString("BillingAddress2"), ::OpenAPI::toJsonValue(m_billing_address2));
    }
    if (m_billing_address3_isSet) {
        obj.insert(QString("BillingAddress3"), ::OpenAPI::toJsonValue(m_billing_address3));
    }
    if (m_billing_address4_isSet) {
        obj.insert(QString("BillingAddress4"), ::OpenAPI::toJsonValue(m_billing_address4));
    }
    if (m_billing_city_isSet) {
        obj.insert(QString("BillingCity"), ::OpenAPI::toJsonValue(m_billing_city));
    }
    if (m_billing_country_isSet) {
        obj.insert(QString("BillingCountry"), ::OpenAPI::toJsonValue(m_billing_country));
    }
    if (m_billing_country_code_isSet) {
        obj.insert(QString("BillingCountryCode"), ::OpenAPI::toJsonValue(m_billing_country_code));
    }
    if (m_billing_state_isSet) {
        obj.insert(QString("BillingState"), ::OpenAPI::toJsonValue(m_billing_state));
    }
    if (m_billing_zip_isSet) {
        obj.insert(QString("BillingZip"), ::OpenAPI::toJsonValue(m_billing_zip));
    }
    if (m_brands.size() > 0) {
        obj.insert(QString("Brands"), ::OpenAPI::toJsonValue(m_brands));
    }
    if (m_dealer_code_isSet) {
        obj.insert(QString("DealerCode"), ::OpenAPI::toJsonValue(m_dealer_code));
    }
    if (m_dealer_name_isSet) {
        obj.insert(QString("DealerName"), ::OpenAPI::toJsonValue(m_dealer_name));
    }
    if (m_dealer_status_isSet) {
        obj.insert(QString("DealerStatus"), ::OpenAPI::toJsonValue(m_dealer_status));
    }
    if (m_dealer_status_update_date_isSet) {
        obj.insert(QString("DealerStatusUpdateDate"), ::OpenAPI::toJsonValue(m_dealer_status_update_date));
    }
    if (m_filler_isSet) {
        obj.insert(QString("Filler"), ::OpenAPI::toJsonValue(m_filler));
    }
    if (m_is_valid_isSet) {
        obj.insert(QString("IsValid"), ::OpenAPI::toJsonValue(m_is_valid));
    }
    if (m_language_preference_isSet) {
        obj.insert(QString("LanguagePreference"), ::OpenAPI::toJsonValue(m_language_preference));
    }
    if (m_region1_isSet) {
        obj.insert(QString("Region1"), ::OpenAPI::toJsonValue(m_region1));
    }
    if (m_region2_isSet) {
        obj.insert(QString("Region2"), ::OpenAPI::toJsonValue(m_region2));
    }
    if (m_region_mapping_isSet) {
        obj.insert(QString("RegionMapping"), ::OpenAPI::toJsonValue(m_region_mapping));
    }
    if (m_role_brand_isSet) {
        obj.insert(QString("RoleBrand"), ::OpenAPI::toJsonValue(m_role_brand));
    }
    if (m_shipping_address2_isSet) {
        obj.insert(QString("ShippingAddress2"), ::OpenAPI::toJsonValue(m_shipping_address2));
    }
    if (m_shipping_address3_isSet) {
        obj.insert(QString("ShippingAddress3"), ::OpenAPI::toJsonValue(m_shipping_address3));
    }
    if (m_shipping_address4_isSet) {
        obj.insert(QString("ShippingAddress4"), ::OpenAPI::toJsonValue(m_shipping_address4));
    }
    if (m_shipping_city_isSet) {
        obj.insert(QString("ShippingCity"), ::OpenAPI::toJsonValue(m_shipping_city));
    }
    if (m_shipping_country_isSet) {
        obj.insert(QString("ShippingCountry"), ::OpenAPI::toJsonValue(m_shipping_country));
    }
    if (m_shipping_state_isSet) {
        obj.insert(QString("ShippingState"), ::OpenAPI::toJsonValue(m_shipping_state));
    }
    if (m_shipping_street_isSet) {
        obj.insert(QString("ShippingStreet"), ::OpenAPI::toJsonValue(m_shipping_street));
    }
    if (m_shipping_zip_isSet) {
        obj.insert(QString("ShippingZip"), ::OpenAPI::toJsonValue(m_shipping_zip));
    }
    if (m_telephone_isSet) {
        obj.insert(QString("Telephone"), ::OpenAPI::toJsonValue(m_telephone));
    }
    if (m_vat_code_isSet) {
        obj.insert(QString("VATCode"), ::OpenAPI::toJsonValue(m_vat_code));
    }
    return obj;
}

QString OAIDealerDB_Models_Dealer::getBillingAddress() const {
    return m_billing_address;
}
void OAIDealerDB_Models_Dealer::setBillingAddress(const QString &billing_address) {
    m_billing_address = billing_address;
    m_billing_address_isSet = true;
}

bool OAIDealerDB_Models_Dealer::is_billing_address_Set() const{
    return m_billing_address_isSet;
}

bool OAIDealerDB_Models_Dealer::is_billing_address_Valid() const{
    return m_billing_address_isValid;
}

QString OAIDealerDB_Models_Dealer::getBillingAddress2() const {
    return m_billing_address2;
}
void OAIDealerDB_Models_Dealer::setBillingAddress2(const QString &billing_address2) {
    m_billing_address2 = billing_address2;
    m_billing_address2_isSet = true;
}

bool OAIDealerDB_Models_Dealer::is_billing_address2_Set() const{
    return m_billing_address2_isSet;
}

bool OAIDealerDB_Models_Dealer::is_billing_address2_Valid() const{
    return m_billing_address2_isValid;
}

QString OAIDealerDB_Models_Dealer::getBillingAddress3() const {
    return m_billing_address3;
}
void OAIDealerDB_Models_Dealer::setBillingAddress3(const QString &billing_address3) {
    m_billing_address3 = billing_address3;
    m_billing_address3_isSet = true;
}

bool OAIDealerDB_Models_Dealer::is_billing_address3_Set() const{
    return m_billing_address3_isSet;
}

bool OAIDealerDB_Models_Dealer::is_billing_address3_Valid() const{
    return m_billing_address3_isValid;
}

QString OAIDealerDB_Models_Dealer::getBillingAddress4() const {
    return m_billing_address4;
}
void OAIDealerDB_Models_Dealer::setBillingAddress4(const QString &billing_address4) {
    m_billing_address4 = billing_address4;
    m_billing_address4_isSet = true;
}

bool OAIDealerDB_Models_Dealer::is_billing_address4_Set() const{
    return m_billing_address4_isSet;
}

bool OAIDealerDB_Models_Dealer::is_billing_address4_Valid() const{
    return m_billing_address4_isValid;
}

QString OAIDealerDB_Models_Dealer::getBillingCity() const {
    return m_billing_city;
}
void OAIDealerDB_Models_Dealer::setBillingCity(const QString &billing_city) {
    m_billing_city = billing_city;
    m_billing_city_isSet = true;
}

bool OAIDealerDB_Models_Dealer::is_billing_city_Set() const{
    return m_billing_city_isSet;
}

bool OAIDealerDB_Models_Dealer::is_billing_city_Valid() const{
    return m_billing_city_isValid;
}

QString OAIDealerDB_Models_Dealer::getBillingCountry() const {
    return m_billing_country;
}
void OAIDealerDB_Models_Dealer::setBillingCountry(const QString &billing_country) {
    m_billing_country = billing_country;
    m_billing_country_isSet = true;
}

bool OAIDealerDB_Models_Dealer::is_billing_country_Set() const{
    return m_billing_country_isSet;
}

bool OAIDealerDB_Models_Dealer::is_billing_country_Valid() const{
    return m_billing_country_isValid;
}

QString OAIDealerDB_Models_Dealer::getBillingCountryCode() const {
    return m_billing_country_code;
}
void OAIDealerDB_Models_Dealer::setBillingCountryCode(const QString &billing_country_code) {
    m_billing_country_code = billing_country_code;
    m_billing_country_code_isSet = true;
}

bool OAIDealerDB_Models_Dealer::is_billing_country_code_Set() const{
    return m_billing_country_code_isSet;
}

bool OAIDealerDB_Models_Dealer::is_billing_country_code_Valid() const{
    return m_billing_country_code_isValid;
}

QString OAIDealerDB_Models_Dealer::getBillingState() const {
    return m_billing_state;
}
void OAIDealerDB_Models_Dealer::setBillingState(const QString &billing_state) {
    m_billing_state = billing_state;
    m_billing_state_isSet = true;
}

bool OAIDealerDB_Models_Dealer::is_billing_state_Set() const{
    return m_billing_state_isSet;
}

bool OAIDealerDB_Models_Dealer::is_billing_state_Valid() const{
    return m_billing_state_isValid;
}

QString OAIDealerDB_Models_Dealer::getBillingZip() const {
    return m_billing_zip;
}
void OAIDealerDB_Models_Dealer::setBillingZip(const QString &billing_zip) {
    m_billing_zip = billing_zip;
    m_billing_zip_isSet = true;
}

bool OAIDealerDB_Models_Dealer::is_billing_zip_Set() const{
    return m_billing_zip_isSet;
}

bool OAIDealerDB_Models_Dealer::is_billing_zip_Valid() const{
    return m_billing_zip_isValid;
}

QList<QString> OAIDealerDB_Models_Dealer::getBrands() const {
    return m_brands;
}
void OAIDealerDB_Models_Dealer::setBrands(const QList<QString> &brands) {
    m_brands = brands;
    m_brands_isSet = true;
}

bool OAIDealerDB_Models_Dealer::is_brands_Set() const{
    return m_brands_isSet;
}

bool OAIDealerDB_Models_Dealer::is_brands_Valid() const{
    return m_brands_isValid;
}

QString OAIDealerDB_Models_Dealer::getDealerCode() const {
    return m_dealer_code;
}
void OAIDealerDB_Models_Dealer::setDealerCode(const QString &dealer_code) {
    m_dealer_code = dealer_code;
    m_dealer_code_isSet = true;
}

bool OAIDealerDB_Models_Dealer::is_dealer_code_Set() const{
    return m_dealer_code_isSet;
}

bool OAIDealerDB_Models_Dealer::is_dealer_code_Valid() const{
    return m_dealer_code_isValid;
}

QString OAIDealerDB_Models_Dealer::getDealerName() const {
    return m_dealer_name;
}
void OAIDealerDB_Models_Dealer::setDealerName(const QString &dealer_name) {
    m_dealer_name = dealer_name;
    m_dealer_name_isSet = true;
}

bool OAIDealerDB_Models_Dealer::is_dealer_name_Set() const{
    return m_dealer_name_isSet;
}

bool OAIDealerDB_Models_Dealer::is_dealer_name_Valid() const{
    return m_dealer_name_isValid;
}

QString OAIDealerDB_Models_Dealer::getDealerStatus() const {
    return m_dealer_status;
}
void OAIDealerDB_Models_Dealer::setDealerStatus(const QString &dealer_status) {
    m_dealer_status = dealer_status;
    m_dealer_status_isSet = true;
}

bool OAIDealerDB_Models_Dealer::is_dealer_status_Set() const{
    return m_dealer_status_isSet;
}

bool OAIDealerDB_Models_Dealer::is_dealer_status_Valid() const{
    return m_dealer_status_isValid;
}

QString OAIDealerDB_Models_Dealer::getDealerStatusUpdateDate() const {
    return m_dealer_status_update_date;
}
void OAIDealerDB_Models_Dealer::setDealerStatusUpdateDate(const QString &dealer_status_update_date) {
    m_dealer_status_update_date = dealer_status_update_date;
    m_dealer_status_update_date_isSet = true;
}

bool OAIDealerDB_Models_Dealer::is_dealer_status_update_date_Set() const{
    return m_dealer_status_update_date_isSet;
}

bool OAIDealerDB_Models_Dealer::is_dealer_status_update_date_Valid() const{
    return m_dealer_status_update_date_isValid;
}

QString OAIDealerDB_Models_Dealer::getFiller() const {
    return m_filler;
}
void OAIDealerDB_Models_Dealer::setFiller(const QString &filler) {
    m_filler = filler;
    m_filler_isSet = true;
}

bool OAIDealerDB_Models_Dealer::is_filler_Set() const{
    return m_filler_isSet;
}

bool OAIDealerDB_Models_Dealer::is_filler_Valid() const{
    return m_filler_isValid;
}

bool OAIDealerDB_Models_Dealer::isIsValid() const {
    return m_is_valid;
}
void OAIDealerDB_Models_Dealer::setIsValid(const bool &is_valid) {
    m_is_valid = is_valid;
    m_is_valid_isSet = true;
}

bool OAIDealerDB_Models_Dealer::is_is_valid_Set() const{
    return m_is_valid_isSet;
}

bool OAIDealerDB_Models_Dealer::is_is_valid_Valid() const{
    return m_is_valid_isValid;
}

QString OAIDealerDB_Models_Dealer::getLanguagePreference() const {
    return m_language_preference;
}
void OAIDealerDB_Models_Dealer::setLanguagePreference(const QString &language_preference) {
    m_language_preference = language_preference;
    m_language_preference_isSet = true;
}

bool OAIDealerDB_Models_Dealer::is_language_preference_Set() const{
    return m_language_preference_isSet;
}

bool OAIDealerDB_Models_Dealer::is_language_preference_Valid() const{
    return m_language_preference_isValid;
}

QString OAIDealerDB_Models_Dealer::getRegion1() const {
    return m_region1;
}
void OAIDealerDB_Models_Dealer::setRegion1(const QString &region1) {
    m_region1 = region1;
    m_region1_isSet = true;
}

bool OAIDealerDB_Models_Dealer::is_region1_Set() const{
    return m_region1_isSet;
}

bool OAIDealerDB_Models_Dealer::is_region1_Valid() const{
    return m_region1_isValid;
}

QString OAIDealerDB_Models_Dealer::getRegion2() const {
    return m_region2;
}
void OAIDealerDB_Models_Dealer::setRegion2(const QString &region2) {
    m_region2 = region2;
    m_region2_isSet = true;
}

bool OAIDealerDB_Models_Dealer::is_region2_Set() const{
    return m_region2_isSet;
}

bool OAIDealerDB_Models_Dealer::is_region2_Valid() const{
    return m_region2_isValid;
}

QString OAIDealerDB_Models_Dealer::getRegionMapping() const {
    return m_region_mapping;
}
void OAIDealerDB_Models_Dealer::setRegionMapping(const QString &region_mapping) {
    m_region_mapping = region_mapping;
    m_region_mapping_isSet = true;
}

bool OAIDealerDB_Models_Dealer::is_region_mapping_Set() const{
    return m_region_mapping_isSet;
}

bool OAIDealerDB_Models_Dealer::is_region_mapping_Valid() const{
    return m_region_mapping_isValid;
}

QString OAIDealerDB_Models_Dealer::getRoleBrand() const {
    return m_role_brand;
}
void OAIDealerDB_Models_Dealer::setRoleBrand(const QString &role_brand) {
    m_role_brand = role_brand;
    m_role_brand_isSet = true;
}

bool OAIDealerDB_Models_Dealer::is_role_brand_Set() const{
    return m_role_brand_isSet;
}

bool OAIDealerDB_Models_Dealer::is_role_brand_Valid() const{
    return m_role_brand_isValid;
}

QString OAIDealerDB_Models_Dealer::getShippingAddress2() const {
    return m_shipping_address2;
}
void OAIDealerDB_Models_Dealer::setShippingAddress2(const QString &shipping_address2) {
    m_shipping_address2 = shipping_address2;
    m_shipping_address2_isSet = true;
}

bool OAIDealerDB_Models_Dealer::is_shipping_address2_Set() const{
    return m_shipping_address2_isSet;
}

bool OAIDealerDB_Models_Dealer::is_shipping_address2_Valid() const{
    return m_shipping_address2_isValid;
}

QString OAIDealerDB_Models_Dealer::getShippingAddress3() const {
    return m_shipping_address3;
}
void OAIDealerDB_Models_Dealer::setShippingAddress3(const QString &shipping_address3) {
    m_shipping_address3 = shipping_address3;
    m_shipping_address3_isSet = true;
}

bool OAIDealerDB_Models_Dealer::is_shipping_address3_Set() const{
    return m_shipping_address3_isSet;
}

bool OAIDealerDB_Models_Dealer::is_shipping_address3_Valid() const{
    return m_shipping_address3_isValid;
}

QString OAIDealerDB_Models_Dealer::getShippingAddress4() const {
    return m_shipping_address4;
}
void OAIDealerDB_Models_Dealer::setShippingAddress4(const QString &shipping_address4) {
    m_shipping_address4 = shipping_address4;
    m_shipping_address4_isSet = true;
}

bool OAIDealerDB_Models_Dealer::is_shipping_address4_Set() const{
    return m_shipping_address4_isSet;
}

bool OAIDealerDB_Models_Dealer::is_shipping_address4_Valid() const{
    return m_shipping_address4_isValid;
}

QString OAIDealerDB_Models_Dealer::getShippingCity() const {
    return m_shipping_city;
}
void OAIDealerDB_Models_Dealer::setShippingCity(const QString &shipping_city) {
    m_shipping_city = shipping_city;
    m_shipping_city_isSet = true;
}

bool OAIDealerDB_Models_Dealer::is_shipping_city_Set() const{
    return m_shipping_city_isSet;
}

bool OAIDealerDB_Models_Dealer::is_shipping_city_Valid() const{
    return m_shipping_city_isValid;
}

QString OAIDealerDB_Models_Dealer::getShippingCountry() const {
    return m_shipping_country;
}
void OAIDealerDB_Models_Dealer::setShippingCountry(const QString &shipping_country) {
    m_shipping_country = shipping_country;
    m_shipping_country_isSet = true;
}

bool OAIDealerDB_Models_Dealer::is_shipping_country_Set() const{
    return m_shipping_country_isSet;
}

bool OAIDealerDB_Models_Dealer::is_shipping_country_Valid() const{
    return m_shipping_country_isValid;
}

QString OAIDealerDB_Models_Dealer::getShippingState() const {
    return m_shipping_state;
}
void OAIDealerDB_Models_Dealer::setShippingState(const QString &shipping_state) {
    m_shipping_state = shipping_state;
    m_shipping_state_isSet = true;
}

bool OAIDealerDB_Models_Dealer::is_shipping_state_Set() const{
    return m_shipping_state_isSet;
}

bool OAIDealerDB_Models_Dealer::is_shipping_state_Valid() const{
    return m_shipping_state_isValid;
}

QString OAIDealerDB_Models_Dealer::getShippingStreet() const {
    return m_shipping_street;
}
void OAIDealerDB_Models_Dealer::setShippingStreet(const QString &shipping_street) {
    m_shipping_street = shipping_street;
    m_shipping_street_isSet = true;
}

bool OAIDealerDB_Models_Dealer::is_shipping_street_Set() const{
    return m_shipping_street_isSet;
}

bool OAIDealerDB_Models_Dealer::is_shipping_street_Valid() const{
    return m_shipping_street_isValid;
}

QString OAIDealerDB_Models_Dealer::getShippingZip() const {
    return m_shipping_zip;
}
void OAIDealerDB_Models_Dealer::setShippingZip(const QString &shipping_zip) {
    m_shipping_zip = shipping_zip;
    m_shipping_zip_isSet = true;
}

bool OAIDealerDB_Models_Dealer::is_shipping_zip_Set() const{
    return m_shipping_zip_isSet;
}

bool OAIDealerDB_Models_Dealer::is_shipping_zip_Valid() const{
    return m_shipping_zip_isValid;
}

QString OAIDealerDB_Models_Dealer::getTelephone() const {
    return m_telephone;
}
void OAIDealerDB_Models_Dealer::setTelephone(const QString &telephone) {
    m_telephone = telephone;
    m_telephone_isSet = true;
}

bool OAIDealerDB_Models_Dealer::is_telephone_Set() const{
    return m_telephone_isSet;
}

bool OAIDealerDB_Models_Dealer::is_telephone_Valid() const{
    return m_telephone_isValid;
}

QString OAIDealerDB_Models_Dealer::getVatCode() const {
    return m_vat_code;
}
void OAIDealerDB_Models_Dealer::setVatCode(const QString &vat_code) {
    m_vat_code = vat_code;
    m_vat_code_isSet = true;
}

bool OAIDealerDB_Models_Dealer::is_vat_code_Set() const{
    return m_vat_code_isSet;
}

bool OAIDealerDB_Models_Dealer::is_vat_code_Valid() const{
    return m_vat_code_isValid;
}

bool OAIDealerDB_Models_Dealer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_billing_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_address2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_address3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_address4_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_zip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_brands.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dealer_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dealer_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dealer_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dealer_status_update_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filler_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_valid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_preference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_mapping_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_brand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_address2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_address3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_address4_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_street_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_zip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_telephone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDealerDB_Models_Dealer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
