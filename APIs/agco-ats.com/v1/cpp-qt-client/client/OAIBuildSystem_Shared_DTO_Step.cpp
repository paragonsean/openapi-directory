/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBuildSystem_Shared_DTO_Step.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBuildSystem_Shared_DTO_Step::OAIBuildSystem_Shared_DTO_Step(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBuildSystem_Shared_DTO_Step::OAIBuildSystem_Shared_DTO_Step() {
    this->initializeModel();
}

OAIBuildSystem_Shared_DTO_Step::~OAIBuildSystem_Shared_DTO_Step() {}

void OAIBuildSystem_Shared_DTO_Step::initializeModel() {

    m_config_required_isSet = false;
    m_config_required_isValid = false;

    m_deleted_isSet = false;
    m_deleted_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_implementation_id_isSet = false;
    m_implementation_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_step_id_isSet = false;
    m_step_id_isValid = false;
}

void OAIBuildSystem_Shared_DTO_Step::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBuildSystem_Shared_DTO_Step::fromJsonObject(QJsonObject json) {

    m_config_required_isValid = ::OpenAPI::fromJsonValue(m_config_required, json[QString("ConfigRequired")]);
    m_config_required_isSet = !json[QString("ConfigRequired")].isNull() && m_config_required_isValid;

    m_deleted_isValid = ::OpenAPI::fromJsonValue(m_deleted, json[QString("Deleted")]);
    m_deleted_isSet = !json[QString("Deleted")].isNull() && m_deleted_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_implementation_id_isValid = ::OpenAPI::fromJsonValue(m_implementation_id, json[QString("ImplementationID")]);
    m_implementation_id_isSet = !json[QString("ImplementationID")].isNull() && m_implementation_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("Parameters")]);
    m_parameters_isSet = !json[QString("Parameters")].isNull() && m_parameters_isValid;

    m_step_id_isValid = ::OpenAPI::fromJsonValue(m_step_id, json[QString("StepID")]);
    m_step_id_isSet = !json[QString("StepID")].isNull() && m_step_id_isValid;
}

QString OAIBuildSystem_Shared_DTO_Step::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBuildSystem_Shared_DTO_Step::asJsonObject() const {
    QJsonObject obj;
    if (m_config_required_isSet) {
        obj.insert(QString("ConfigRequired"), ::OpenAPI::toJsonValue(m_config_required));
    }
    if (m_deleted_isSet) {
        obj.insert(QString("Deleted"), ::OpenAPI::toJsonValue(m_deleted));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_implementation_id_isSet) {
        obj.insert(QString("ImplementationID"), ::OpenAPI::toJsonValue(m_implementation_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_parameters.size() > 0) {
        obj.insert(QString("Parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_step_id_isSet) {
        obj.insert(QString("StepID"), ::OpenAPI::toJsonValue(m_step_id));
    }
    return obj;
}

bool OAIBuildSystem_Shared_DTO_Step::isConfigRequired() const {
    return m_config_required;
}
void OAIBuildSystem_Shared_DTO_Step::setConfigRequired(const bool &config_required) {
    m_config_required = config_required;
    m_config_required_isSet = true;
}

bool OAIBuildSystem_Shared_DTO_Step::is_config_required_Set() const{
    return m_config_required_isSet;
}

bool OAIBuildSystem_Shared_DTO_Step::is_config_required_Valid() const{
    return m_config_required_isValid;
}

bool OAIBuildSystem_Shared_DTO_Step::isDeleted() const {
    return m_deleted;
}
void OAIBuildSystem_Shared_DTO_Step::setDeleted(const bool &deleted) {
    m_deleted = deleted;
    m_deleted_isSet = true;
}

bool OAIBuildSystem_Shared_DTO_Step::is_deleted_Set() const{
    return m_deleted_isSet;
}

bool OAIBuildSystem_Shared_DTO_Step::is_deleted_Valid() const{
    return m_deleted_isValid;
}

QString OAIBuildSystem_Shared_DTO_Step::getDescription() const {
    return m_description;
}
void OAIBuildSystem_Shared_DTO_Step::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIBuildSystem_Shared_DTO_Step::is_description_Set() const{
    return m_description_isSet;
}

bool OAIBuildSystem_Shared_DTO_Step::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIBuildSystem_Shared_DTO_Step::getImplementationId() const {
    return m_implementation_id;
}
void OAIBuildSystem_Shared_DTO_Step::setImplementationId(const QString &implementation_id) {
    m_implementation_id = implementation_id;
    m_implementation_id_isSet = true;
}

bool OAIBuildSystem_Shared_DTO_Step::is_implementation_id_Set() const{
    return m_implementation_id_isSet;
}

bool OAIBuildSystem_Shared_DTO_Step::is_implementation_id_Valid() const{
    return m_implementation_id_isValid;
}

QString OAIBuildSystem_Shared_DTO_Step::getName() const {
    return m_name;
}
void OAIBuildSystem_Shared_DTO_Step::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIBuildSystem_Shared_DTO_Step::is_name_Set() const{
    return m_name_isSet;
}

bool OAIBuildSystem_Shared_DTO_Step::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIBuildSystem_Shared_DTO_Parameter> OAIBuildSystem_Shared_DTO_Step::getParameters() const {
    return m_parameters;
}
void OAIBuildSystem_Shared_DTO_Step::setParameters(const QList<OAIBuildSystem_Shared_DTO_Parameter> &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIBuildSystem_Shared_DTO_Step::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIBuildSystem_Shared_DTO_Step::is_parameters_Valid() const{
    return m_parameters_isValid;
}

qint32 OAIBuildSystem_Shared_DTO_Step::getStepId() const {
    return m_step_id;
}
void OAIBuildSystem_Shared_DTO_Step::setStepId(const qint32 &step_id) {
    m_step_id = step_id;
    m_step_id_isSet = true;
}

bool OAIBuildSystem_Shared_DTO_Step::is_step_id_Set() const{
    return m_step_id_isSet;
}

bool OAIBuildSystem_Shared_DTO_Step::is_step_id_Valid() const{
    return m_step_id_isValid;
}

bool OAIBuildSystem_Shared_DTO_Step::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_config_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_implementation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_step_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBuildSystem_Shared_DTO_Step::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_config_required_isValid && m_implementation_id_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
