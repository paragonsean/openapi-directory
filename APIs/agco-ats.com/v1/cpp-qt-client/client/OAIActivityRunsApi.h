/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIActivityRunsApi_H
#define OAI_OAIActivityRunsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAPI_Models_ApiError.h"
#include "OAIAPI_PagedResponse_BuildSystem_Shared_DTO_ActivityRun_.h"
#include "OAIBuildSystem_Shared_DTO_ActivityRun.h"
#include "OAIBuildSystem_Shared_DTO_ActivityRunStatus.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIActivityRunsApi : public QObject {
    Q_OBJECT

public:
    OAIActivityRunsApi(const int timeOut = 0);
    ~OAIActivityRunsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  activity_run_id qint32 [required]
    */
    virtual void activityRunsGetActivityRun(const qint32 &activity_run_id);

    /**
    * @param[in]  activity_run_id qint32 [required]
    */
    virtual void activityRunsGetActivityRunStatus(const qint32 &activity_run_id);

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  status QString [optional]
    */
    virtual void activityRunsGetActivityRuns(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  activity_run_id qint32 [required]
    * @param[in]  oai_build_system_shared_dto_activity_run OAIBuildSystem_Shared_DTO_ActivityRun [required]
    */
    virtual void activityRunsPutActivityRun(const qint32 &activity_run_id, const OAIBuildSystem_Shared_DTO_ActivityRun &oai_build_system_shared_dto_activity_run);

    /**
    * @param[in]  activity_run_id qint32 [required]
    * @param[in]  oai_build_system_shared_dto_activity_run_status OAIBuildSystem_Shared_DTO_ActivityRunStatus [required]
    */
    virtual void activityRunsPutActivityRunStatus(const qint32 &activity_run_id, const OAIBuildSystem_Shared_DTO_ActivityRunStatus &oai_build_system_shared_dto_activity_run_status);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void activityRunsGetActivityRunCallback(OAIHttpRequestWorker *worker);
    void activityRunsGetActivityRunStatusCallback(OAIHttpRequestWorker *worker);
    void activityRunsGetActivityRunsCallback(OAIHttpRequestWorker *worker);
    void activityRunsPutActivityRunCallback(OAIHttpRequestWorker *worker);
    void activityRunsPutActivityRunStatusCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void activityRunsGetActivityRunSignal(OAIBuildSystem_Shared_DTO_ActivityRun summary);
    void activityRunsGetActivityRunStatusSignal(OAIBuildSystem_Shared_DTO_ActivityRunStatus summary);
    void activityRunsGetActivityRunsSignal(OAIAPI_PagedResponse_BuildSystem_Shared_DTO_ActivityRun_ summary);
    void activityRunsPutActivityRunSignal();
    void activityRunsPutActivityRunStatusSignal();


    void activityRunsGetActivityRunSignalFull(OAIHttpRequestWorker *worker, OAIBuildSystem_Shared_DTO_ActivityRun summary);
    void activityRunsGetActivityRunStatusSignalFull(OAIHttpRequestWorker *worker, OAIBuildSystem_Shared_DTO_ActivityRunStatus summary);
    void activityRunsGetActivityRunsSignalFull(OAIHttpRequestWorker *worker, OAIAPI_PagedResponse_BuildSystem_Shared_DTO_ActivityRun_ summary);
    void activityRunsPutActivityRunSignalFull(OAIHttpRequestWorker *worker);
    void activityRunsPutActivityRunStatusSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use activityRunsGetActivityRunSignalError() instead")
    void activityRunsGetActivityRunSignalE(OAIBuildSystem_Shared_DTO_ActivityRun summary, QNetworkReply::NetworkError error_type, QString error_str);
    void activityRunsGetActivityRunSignalError(OAIBuildSystem_Shared_DTO_ActivityRun summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activityRunsGetActivityRunStatusSignalError() instead")
    void activityRunsGetActivityRunStatusSignalE(OAIBuildSystem_Shared_DTO_ActivityRunStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void activityRunsGetActivityRunStatusSignalError(OAIBuildSystem_Shared_DTO_ActivityRunStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activityRunsGetActivityRunsSignalError() instead")
    void activityRunsGetActivityRunsSignalE(OAIAPI_PagedResponse_BuildSystem_Shared_DTO_ActivityRun_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void activityRunsGetActivityRunsSignalError(OAIAPI_PagedResponse_BuildSystem_Shared_DTO_ActivityRun_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activityRunsPutActivityRunSignalError() instead")
    void activityRunsPutActivityRunSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void activityRunsPutActivityRunSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activityRunsPutActivityRunStatusSignalError() instead")
    void activityRunsPutActivityRunStatusSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void activityRunsPutActivityRunStatusSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use activityRunsGetActivityRunSignalErrorFull() instead")
    void activityRunsGetActivityRunSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void activityRunsGetActivityRunSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activityRunsGetActivityRunStatusSignalErrorFull() instead")
    void activityRunsGetActivityRunStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void activityRunsGetActivityRunStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activityRunsGetActivityRunsSignalErrorFull() instead")
    void activityRunsGetActivityRunsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void activityRunsGetActivityRunsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activityRunsPutActivityRunSignalErrorFull() instead")
    void activityRunsPutActivityRunSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void activityRunsPutActivityRunSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activityRunsPutActivityRunStatusSignalErrorFull() instead")
    void activityRunsPutActivityRunStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void activityRunsPutActivityRunStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
