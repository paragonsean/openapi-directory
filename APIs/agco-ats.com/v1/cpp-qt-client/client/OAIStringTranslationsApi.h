/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIStringTranslationsApi_H
#define OAI_OAIStringTranslationsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAPI_IPagedResponse_GlobalResources_Shared_Models_StringTranslation_.h"
#include "OAIAPI_Models_ApiError.h"
#include "OAIGlobalResources_Shared_Models_StringTranslation.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIStringTranslationsApi : public QObject {
    Q_OBJECT

public:
    OAIStringTranslationsApi(const int timeOut = 0);
    ~OAIStringTranslationsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  string_id QString [required]
    * @param[in]  language_id qint32 [required]
    */
    virtual void stringTranslationsGetTranslation(const QString &string_id, const qint32 &language_id);

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  modified_after_timestamp QString [optional]
    */
    virtual void stringTranslationsGetTranslations(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &modified_after_timestamp = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  string_id QString [required]
    * @param[in]  language_id qint32 [required]
    * @param[in]  oai_global_resources_shared_models_string_translation OAIGlobalResources_Shared_Models_StringTranslation [required]
    */
    virtual void stringTranslationsUpdateTranslation(const QString &string_id, const qint32 &language_id, const OAIGlobalResources_Shared_Models_StringTranslation &oai_global_resources_shared_models_string_translation);

    /**
    * @param[in]  oai_global_resources_shared_models_string_translation QList<OAIGlobalResources_Shared_Models_StringTranslation> [required]
    */
    virtual void stringTranslationsUpdateTranslations(const QList<OAIGlobalResources_Shared_Models_StringTranslation> &oai_global_resources_shared_models_string_translation);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void stringTranslationsGetTranslationCallback(OAIHttpRequestWorker *worker);
    void stringTranslationsGetTranslationsCallback(OAIHttpRequestWorker *worker);
    void stringTranslationsUpdateTranslationCallback(OAIHttpRequestWorker *worker);
    void stringTranslationsUpdateTranslationsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void stringTranslationsGetTranslationSignal(OAIGlobalResources_Shared_Models_StringTranslation summary);
    void stringTranslationsGetTranslationsSignal(OAIAPI_IPagedResponse_GlobalResources_Shared_Models_StringTranslation_ summary);
    void stringTranslationsUpdateTranslationSignal();
    void stringTranslationsUpdateTranslationsSignal();


    void stringTranslationsGetTranslationSignalFull(OAIHttpRequestWorker *worker, OAIGlobalResources_Shared_Models_StringTranslation summary);
    void stringTranslationsGetTranslationsSignalFull(OAIHttpRequestWorker *worker, OAIAPI_IPagedResponse_GlobalResources_Shared_Models_StringTranslation_ summary);
    void stringTranslationsUpdateTranslationSignalFull(OAIHttpRequestWorker *worker);
    void stringTranslationsUpdateTranslationsSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use stringTranslationsGetTranslationSignalError() instead")
    void stringTranslationsGetTranslationSignalE(OAIGlobalResources_Shared_Models_StringTranslation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void stringTranslationsGetTranslationSignalError(OAIGlobalResources_Shared_Models_StringTranslation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stringTranslationsGetTranslationsSignalError() instead")
    void stringTranslationsGetTranslationsSignalE(OAIAPI_IPagedResponse_GlobalResources_Shared_Models_StringTranslation_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void stringTranslationsGetTranslationsSignalError(OAIAPI_IPagedResponse_GlobalResources_Shared_Models_StringTranslation_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stringTranslationsUpdateTranslationSignalError() instead")
    void stringTranslationsUpdateTranslationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void stringTranslationsUpdateTranslationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stringTranslationsUpdateTranslationsSignalError() instead")
    void stringTranslationsUpdateTranslationsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void stringTranslationsUpdateTranslationsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use stringTranslationsGetTranslationSignalErrorFull() instead")
    void stringTranslationsGetTranslationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stringTranslationsGetTranslationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stringTranslationsGetTranslationsSignalErrorFull() instead")
    void stringTranslationsGetTranslationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stringTranslationsGetTranslationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stringTranslationsUpdateTranslationSignalErrorFull() instead")
    void stringTranslationsUpdateTranslationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stringTranslationsUpdateTranslationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stringTranslationsUpdateTranslationsSignalErrorFull() instead")
    void stringTranslationsUpdateTranslationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stringTranslationsUpdateTranslationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
