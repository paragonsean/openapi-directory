/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAuthorizationCodeDefinitionsApi_H
#define OAI_OAIAuthorizationCodeDefinitionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAPI_IPagedResponse_AuthorizationCodes_Shared_Models_AuthorizationCodeDefinition_.h"
#include "OAIAPI_Models_ApiError.h"
#include "OAIAuthorizationCodes_Shared_Models_AuthorizationCodeDefinition.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAuthorizationCodeDefinitionsApi : public QObject {
    Q_OBJECT

public:
    OAIAuthorizationCodeDefinitionsApi(const int timeOut = 0);
    ~OAIAuthorizationCodeDefinitionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiV2AuthorizationCodeDefinitionsIdGet(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  category_id QString [required]
    */
    virtual void authorizationCodeDefinitionsAddCategoryToDefinition(const QString &id, const QString &category_id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void authorizationCodeDefinitionsDeleteAuthorizationCodeDefinition(const QString &id);

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  name QString [optional]
    * @param[in]  created_by_user_id qint32 [optional]
    * @param[in]  deleted_by_user_id qint32 [optional]
    * @param[in]  include_deleted bool [optional]
    * @param[in]  category_id QString [optional]
    */
    virtual void authorizationCodeDefinitionsGetAuthorizationCodeDefinition(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &created_by_user_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &deleted_by_user_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &include_deleted = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &category_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_authorization_codes_shared_models_authorization_code_definition OAIAuthorizationCodes_Shared_Models_AuthorizationCodeDefinition [required]
    */
    virtual void authorizationCodeDefinitionsPostAuthorizationCodeDefinition(const OAIAuthorizationCodes_Shared_Models_AuthorizationCodeDefinition &oai_authorization_codes_shared_models_authorization_code_definition);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_authorization_codes_shared_models_authorization_code_definition OAIAuthorizationCodes_Shared_Models_AuthorizationCodeDefinition [required]
    */
    virtual void authorizationCodeDefinitionsPutAuthorizationCodeDefinition(const QString &id, const OAIAuthorizationCodes_Shared_Models_AuthorizationCodeDefinition &oai_authorization_codes_shared_models_authorization_code_definition);

    /**
    * @param[in]  id QString [required]
    * @param[in]  category_id QString [required]
    */
    virtual void authorizationCodeDefinitionsRemoveCategoryFromDefinition(const QString &id, const QString &category_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiV2AuthorizationCodeDefinitionsIdGetCallback(OAIHttpRequestWorker *worker);
    void authorizationCodeDefinitionsAddCategoryToDefinitionCallback(OAIHttpRequestWorker *worker);
    void authorizationCodeDefinitionsDeleteAuthorizationCodeDefinitionCallback(OAIHttpRequestWorker *worker);
    void authorizationCodeDefinitionsGetAuthorizationCodeDefinitionCallback(OAIHttpRequestWorker *worker);
    void authorizationCodeDefinitionsPostAuthorizationCodeDefinitionCallback(OAIHttpRequestWorker *worker);
    void authorizationCodeDefinitionsPutAuthorizationCodeDefinitionCallback(OAIHttpRequestWorker *worker);
    void authorizationCodeDefinitionsRemoveCategoryFromDefinitionCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiV2AuthorizationCodeDefinitionsIdGetSignal(OAIAuthorizationCodes_Shared_Models_AuthorizationCodeDefinition summary);
    void authorizationCodeDefinitionsAddCategoryToDefinitionSignal();
    void authorizationCodeDefinitionsDeleteAuthorizationCodeDefinitionSignal();
    void authorizationCodeDefinitionsGetAuthorizationCodeDefinitionSignal(OAIAPI_IPagedResponse_AuthorizationCodes_Shared_Models_AuthorizationCodeDefinition_ summary);
    void authorizationCodeDefinitionsPostAuthorizationCodeDefinitionSignal(QString summary);
    void authorizationCodeDefinitionsPutAuthorizationCodeDefinitionSignal();
    void authorizationCodeDefinitionsRemoveCategoryFromDefinitionSignal();


    void apiV2AuthorizationCodeDefinitionsIdGetSignalFull(OAIHttpRequestWorker *worker, OAIAuthorizationCodes_Shared_Models_AuthorizationCodeDefinition summary);
    void authorizationCodeDefinitionsAddCategoryToDefinitionSignalFull(OAIHttpRequestWorker *worker);
    void authorizationCodeDefinitionsDeleteAuthorizationCodeDefinitionSignalFull(OAIHttpRequestWorker *worker);
    void authorizationCodeDefinitionsGetAuthorizationCodeDefinitionSignalFull(OAIHttpRequestWorker *worker, OAIAPI_IPagedResponse_AuthorizationCodes_Shared_Models_AuthorizationCodeDefinition_ summary);
    void authorizationCodeDefinitionsPostAuthorizationCodeDefinitionSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void authorizationCodeDefinitionsPutAuthorizationCodeDefinitionSignalFull(OAIHttpRequestWorker *worker);
    void authorizationCodeDefinitionsRemoveCategoryFromDefinitionSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use apiV2AuthorizationCodeDefinitionsIdGetSignalError() instead")
    void apiV2AuthorizationCodeDefinitionsIdGetSignalE(OAIAuthorizationCodes_Shared_Models_AuthorizationCodeDefinition summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV2AuthorizationCodeDefinitionsIdGetSignalError(OAIAuthorizationCodes_Shared_Models_AuthorizationCodeDefinition summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizationCodeDefinitionsAddCategoryToDefinitionSignalError() instead")
    void authorizationCodeDefinitionsAddCategoryToDefinitionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void authorizationCodeDefinitionsAddCategoryToDefinitionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizationCodeDefinitionsDeleteAuthorizationCodeDefinitionSignalError() instead")
    void authorizationCodeDefinitionsDeleteAuthorizationCodeDefinitionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void authorizationCodeDefinitionsDeleteAuthorizationCodeDefinitionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizationCodeDefinitionsGetAuthorizationCodeDefinitionSignalError() instead")
    void authorizationCodeDefinitionsGetAuthorizationCodeDefinitionSignalE(OAIAPI_IPagedResponse_AuthorizationCodes_Shared_Models_AuthorizationCodeDefinition_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizationCodeDefinitionsGetAuthorizationCodeDefinitionSignalError(OAIAPI_IPagedResponse_AuthorizationCodes_Shared_Models_AuthorizationCodeDefinition_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizationCodeDefinitionsPostAuthorizationCodeDefinitionSignalError() instead")
    void authorizationCodeDefinitionsPostAuthorizationCodeDefinitionSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizationCodeDefinitionsPostAuthorizationCodeDefinitionSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizationCodeDefinitionsPutAuthorizationCodeDefinitionSignalError() instead")
    void authorizationCodeDefinitionsPutAuthorizationCodeDefinitionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void authorizationCodeDefinitionsPutAuthorizationCodeDefinitionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizationCodeDefinitionsRemoveCategoryFromDefinitionSignalError() instead")
    void authorizationCodeDefinitionsRemoveCategoryFromDefinitionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void authorizationCodeDefinitionsRemoveCategoryFromDefinitionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiV2AuthorizationCodeDefinitionsIdGetSignalErrorFull() instead")
    void apiV2AuthorizationCodeDefinitionsIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV2AuthorizationCodeDefinitionsIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizationCodeDefinitionsAddCategoryToDefinitionSignalErrorFull() instead")
    void authorizationCodeDefinitionsAddCategoryToDefinitionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizationCodeDefinitionsAddCategoryToDefinitionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizationCodeDefinitionsDeleteAuthorizationCodeDefinitionSignalErrorFull() instead")
    void authorizationCodeDefinitionsDeleteAuthorizationCodeDefinitionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizationCodeDefinitionsDeleteAuthorizationCodeDefinitionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizationCodeDefinitionsGetAuthorizationCodeDefinitionSignalErrorFull() instead")
    void authorizationCodeDefinitionsGetAuthorizationCodeDefinitionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizationCodeDefinitionsGetAuthorizationCodeDefinitionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizationCodeDefinitionsPostAuthorizationCodeDefinitionSignalErrorFull() instead")
    void authorizationCodeDefinitionsPostAuthorizationCodeDefinitionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizationCodeDefinitionsPostAuthorizationCodeDefinitionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizationCodeDefinitionsPutAuthorizationCodeDefinitionSignalErrorFull() instead")
    void authorizationCodeDefinitionsPutAuthorizationCodeDefinitionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizationCodeDefinitionsPutAuthorizationCodeDefinitionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizationCodeDefinitionsRemoveCategoryFromDefinitionSignalErrorFull() instead")
    void authorizationCodeDefinitionsRemoveCategoryFromDefinitionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizationCodeDefinitionsRemoveCategoryFromDefinitionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
