/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITranslationKeysApi_H
#define OAI_OAITranslationKeysApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAPI_IPagedResponse_OASSupport_Shared_Models_TranslationKey_.h"
#include "OAIAPI_Models_ApiError.h"
#include "OAIOASSupport_Shared_Models_TranslationKey.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITranslationKeysApi : public QObject {
    Q_OBJECT

public:
    OAITranslationKeysApi(const int timeOut = 0);
    ~OAITranslationKeysApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oaioas_support_shared_models_translation_key OAIOASSupport_Shared_Models_TranslationKey [required]
    */
    virtual void translationKeysCreateTranslationKey(const OAIOASSupport_Shared_Models_TranslationKey &oaioas_support_shared_models_translation_key);

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  key_names QString [optional]
    */
    virtual void translationKeysGet(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &key_names = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void translationKeysGetTranslationKey(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oaioas_support_shared_models_translation_key OAIOASSupport_Shared_Models_TranslationKey [required]
    */
    virtual void translationKeysUpdateTranslationKey(const qint32 &id, const OAIOASSupport_Shared_Models_TranslationKey &oaioas_support_shared_models_translation_key);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void translationKeysCreateTranslationKeyCallback(OAIHttpRequestWorker *worker);
    void translationKeysGetCallback(OAIHttpRequestWorker *worker);
    void translationKeysGetTranslationKeyCallback(OAIHttpRequestWorker *worker);
    void translationKeysUpdateTranslationKeyCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void translationKeysCreateTranslationKeySignal(qint32 summary);
    void translationKeysGetSignal(OAIAPI_IPagedResponse_OASSupport_Shared_Models_TranslationKey_ summary);
    void translationKeysGetTranslationKeySignal(OAIOASSupport_Shared_Models_TranslationKey summary);
    void translationKeysUpdateTranslationKeySignal();


    void translationKeysCreateTranslationKeySignalFull(OAIHttpRequestWorker *worker, qint32 summary);
    void translationKeysGetSignalFull(OAIHttpRequestWorker *worker, OAIAPI_IPagedResponse_OASSupport_Shared_Models_TranslationKey_ summary);
    void translationKeysGetTranslationKeySignalFull(OAIHttpRequestWorker *worker, OAIOASSupport_Shared_Models_TranslationKey summary);
    void translationKeysUpdateTranslationKeySignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use translationKeysCreateTranslationKeySignalError() instead")
    void translationKeysCreateTranslationKeySignalE(qint32 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void translationKeysCreateTranslationKeySignalError(qint32 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use translationKeysGetSignalError() instead")
    void translationKeysGetSignalE(OAIAPI_IPagedResponse_OASSupport_Shared_Models_TranslationKey_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void translationKeysGetSignalError(OAIAPI_IPagedResponse_OASSupport_Shared_Models_TranslationKey_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use translationKeysGetTranslationKeySignalError() instead")
    void translationKeysGetTranslationKeySignalE(OAIOASSupport_Shared_Models_TranslationKey summary, QNetworkReply::NetworkError error_type, QString error_str);
    void translationKeysGetTranslationKeySignalError(OAIOASSupport_Shared_Models_TranslationKey summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use translationKeysUpdateTranslationKeySignalError() instead")
    void translationKeysUpdateTranslationKeySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void translationKeysUpdateTranslationKeySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use translationKeysCreateTranslationKeySignalErrorFull() instead")
    void translationKeysCreateTranslationKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void translationKeysCreateTranslationKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use translationKeysGetSignalErrorFull() instead")
    void translationKeysGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void translationKeysGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use translationKeysGetTranslationKeySignalErrorFull() instead")
    void translationKeysGetTranslationKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void translationKeysGetTranslationKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use translationKeysUpdateTranslationKeySignalErrorFull() instead")
    void translationKeysUpdateTranslationKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void translationKeysUpdateTranslationKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
