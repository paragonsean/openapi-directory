/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUpdateGroupSubscriptionsApi_H
#define OAI_OAIUpdateGroupSubscriptionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAPI_Models_ApiError.h"
#include "OAIAPI_PagedResponse_UpdateSystem_Models_UpdateGroupSubscription_.h"
#include "OAIUpdateSystem_Models_UpdateGroupSubscription.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUpdateGroupSubscriptionsApi : public QObject {
    Q_OBJECT

public:
    OAIUpdateGroupSubscriptionsApi(const int timeOut = 0);
    ~OAIUpdateGroupSubscriptionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  update_group_subscription_id qint32 [required]
    */
    virtual void updateGroupSubscriptionsDeleteUpdateGroupSubscription(const qint32 &update_group_subscription_id);

    /**
    * @param[in]  update_group_subscription_id qint32 [required]
    */
    virtual void updateGroupSubscriptionsGetUpdateGroupSubscription(const qint32 &update_group_subscription_id);

    /**
    * @param[in]  update_group_id QString [optional]
    * @param[in]  package_type_id QString [optional]
    * @param[in]  client_id QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void updateGroupSubscriptionsGetUpdateGroupSubscriptions(const ::OpenAPI::OptionalParam<QString> &update_group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &package_type_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &client_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  oai_update_system_models_update_group_subscription OAIUpdateSystem_Models_UpdateGroupSubscription [required]
    */
    virtual void updateGroupSubscriptionsPostUpdateGroupSubscription(const OAIUpdateSystem_Models_UpdateGroupSubscription &oai_update_system_models_update_group_subscription);

    /**
    * @param[in]  oai_update_system_models_update_group_subscription QList<OAIUpdateSystem_Models_UpdateGroupSubscription> [required]
    */
    virtual void updateGroupSubscriptionsPostUpdateGroupSubscriptions(const QList<OAIUpdateSystem_Models_UpdateGroupSubscription> &oai_update_system_models_update_group_subscription);

    /**
    * @param[in]  update_group_subscription_id qint32 [required]
    * @param[in]  oai_update_system_models_update_group_subscription OAIUpdateSystem_Models_UpdateGroupSubscription [required]
    */
    virtual void updateGroupSubscriptionsPutUpdateGroupSubscription(const qint32 &update_group_subscription_id, const OAIUpdateSystem_Models_UpdateGroupSubscription &oai_update_system_models_update_group_subscription);

    /**
    * @param[in]  oai_update_system_models_update_group_subscription QList<OAIUpdateSystem_Models_UpdateGroupSubscription> [required]
    */
    virtual void updateGroupSubscriptionsPutUpdateGroupSubscriptions(const QList<OAIUpdateSystem_Models_UpdateGroupSubscription> &oai_update_system_models_update_group_subscription);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void updateGroupSubscriptionsDeleteUpdateGroupSubscriptionCallback(OAIHttpRequestWorker *worker);
    void updateGroupSubscriptionsGetUpdateGroupSubscriptionCallback(OAIHttpRequestWorker *worker);
    void updateGroupSubscriptionsGetUpdateGroupSubscriptionsCallback(OAIHttpRequestWorker *worker);
    void updateGroupSubscriptionsPostUpdateGroupSubscriptionCallback(OAIHttpRequestWorker *worker);
    void updateGroupSubscriptionsPostUpdateGroupSubscriptionsCallback(OAIHttpRequestWorker *worker);
    void updateGroupSubscriptionsPutUpdateGroupSubscriptionCallback(OAIHttpRequestWorker *worker);
    void updateGroupSubscriptionsPutUpdateGroupSubscriptionsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void updateGroupSubscriptionsDeleteUpdateGroupSubscriptionSignal();
    void updateGroupSubscriptionsGetUpdateGroupSubscriptionSignal(OAIUpdateSystem_Models_UpdateGroupSubscription summary);
    void updateGroupSubscriptionsGetUpdateGroupSubscriptionsSignal(OAIAPI_PagedResponse_UpdateSystem_Models_UpdateGroupSubscription_ summary);
    void updateGroupSubscriptionsPostUpdateGroupSubscriptionSignal(qint32 summary);
    void updateGroupSubscriptionsPostUpdateGroupSubscriptionsSignal();
    void updateGroupSubscriptionsPutUpdateGroupSubscriptionSignal();
    void updateGroupSubscriptionsPutUpdateGroupSubscriptionsSignal();


    void updateGroupSubscriptionsDeleteUpdateGroupSubscriptionSignalFull(OAIHttpRequestWorker *worker);
    void updateGroupSubscriptionsGetUpdateGroupSubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIUpdateSystem_Models_UpdateGroupSubscription summary);
    void updateGroupSubscriptionsGetUpdateGroupSubscriptionsSignalFull(OAIHttpRequestWorker *worker, OAIAPI_PagedResponse_UpdateSystem_Models_UpdateGroupSubscription_ summary);
    void updateGroupSubscriptionsPostUpdateGroupSubscriptionSignalFull(OAIHttpRequestWorker *worker, qint32 summary);
    void updateGroupSubscriptionsPostUpdateGroupSubscriptionsSignalFull(OAIHttpRequestWorker *worker);
    void updateGroupSubscriptionsPutUpdateGroupSubscriptionSignalFull(OAIHttpRequestWorker *worker);
    void updateGroupSubscriptionsPutUpdateGroupSubscriptionsSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use updateGroupSubscriptionsDeleteUpdateGroupSubscriptionSignalError() instead")
    void updateGroupSubscriptionsDeleteUpdateGroupSubscriptionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateGroupSubscriptionsDeleteUpdateGroupSubscriptionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGroupSubscriptionsGetUpdateGroupSubscriptionSignalError() instead")
    void updateGroupSubscriptionsGetUpdateGroupSubscriptionSignalE(OAIUpdateSystem_Models_UpdateGroupSubscription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateGroupSubscriptionsGetUpdateGroupSubscriptionSignalError(OAIUpdateSystem_Models_UpdateGroupSubscription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGroupSubscriptionsGetUpdateGroupSubscriptionsSignalError() instead")
    void updateGroupSubscriptionsGetUpdateGroupSubscriptionsSignalE(OAIAPI_PagedResponse_UpdateSystem_Models_UpdateGroupSubscription_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateGroupSubscriptionsGetUpdateGroupSubscriptionsSignalError(OAIAPI_PagedResponse_UpdateSystem_Models_UpdateGroupSubscription_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGroupSubscriptionsPostUpdateGroupSubscriptionSignalError() instead")
    void updateGroupSubscriptionsPostUpdateGroupSubscriptionSignalE(qint32 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateGroupSubscriptionsPostUpdateGroupSubscriptionSignalError(qint32 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGroupSubscriptionsPostUpdateGroupSubscriptionsSignalError() instead")
    void updateGroupSubscriptionsPostUpdateGroupSubscriptionsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateGroupSubscriptionsPostUpdateGroupSubscriptionsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGroupSubscriptionsPutUpdateGroupSubscriptionSignalError() instead")
    void updateGroupSubscriptionsPutUpdateGroupSubscriptionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateGroupSubscriptionsPutUpdateGroupSubscriptionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGroupSubscriptionsPutUpdateGroupSubscriptionsSignalError() instead")
    void updateGroupSubscriptionsPutUpdateGroupSubscriptionsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateGroupSubscriptionsPutUpdateGroupSubscriptionsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use updateGroupSubscriptionsDeleteUpdateGroupSubscriptionSignalErrorFull() instead")
    void updateGroupSubscriptionsDeleteUpdateGroupSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateGroupSubscriptionsDeleteUpdateGroupSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGroupSubscriptionsGetUpdateGroupSubscriptionSignalErrorFull() instead")
    void updateGroupSubscriptionsGetUpdateGroupSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateGroupSubscriptionsGetUpdateGroupSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGroupSubscriptionsGetUpdateGroupSubscriptionsSignalErrorFull() instead")
    void updateGroupSubscriptionsGetUpdateGroupSubscriptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateGroupSubscriptionsGetUpdateGroupSubscriptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGroupSubscriptionsPostUpdateGroupSubscriptionSignalErrorFull() instead")
    void updateGroupSubscriptionsPostUpdateGroupSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateGroupSubscriptionsPostUpdateGroupSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGroupSubscriptionsPostUpdateGroupSubscriptionsSignalErrorFull() instead")
    void updateGroupSubscriptionsPostUpdateGroupSubscriptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateGroupSubscriptionsPostUpdateGroupSubscriptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGroupSubscriptionsPutUpdateGroupSubscriptionSignalErrorFull() instead")
    void updateGroupSubscriptionsPutUpdateGroupSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateGroupSubscriptionsPutUpdateGroupSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGroupSubscriptionsPutUpdateGroupSubscriptionsSignalErrorFull() instead")
    void updateGroupSubscriptionsPutUpdateGroupSubscriptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateGroupSubscriptionsPutUpdateGroupSubscriptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
