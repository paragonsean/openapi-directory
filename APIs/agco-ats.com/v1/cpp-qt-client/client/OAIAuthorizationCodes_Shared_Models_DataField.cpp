/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuthorizationCodes_Shared_Models_DataField.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuthorizationCodes_Shared_Models_DataField::OAIAuthorizationCodes_Shared_Models_DataField(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuthorizationCodes_Shared_Models_DataField::OAIAuthorizationCodes_Shared_Models_DataField() {
    this->initializeModel();
}

OAIAuthorizationCodes_Shared_Models_DataField::~OAIAuthorizationCodes_Shared_Models_DataField() {}

void OAIAuthorizationCodes_Shared_Models_DataField::initializeModel() {

    m_digits_precision_isSet = false;
    m_digits_precision_isValid = false;

    m_max_exponent_isSet = false;
    m_max_exponent_isValid = false;

    m_max_value_isSet = false;
    m_max_value_isValid = false;

    m_min_exponent_isSet = false;
    m_min_exponent_isValid = false;

    m_min_value_isSet = false;
    m_min_value_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_scale_factor_isSet = false;
    m_scale_factor_isValid = false;

    m_r_signed_isSet = false;
    m_r_signed_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIAuthorizationCodes_Shared_Models_DataField::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuthorizationCodes_Shared_Models_DataField::fromJsonObject(QJsonObject json) {

    m_digits_precision_isValid = ::OpenAPI::fromJsonValue(m_digits_precision, json[QString("DigitsPrecision")]);
    m_digits_precision_isSet = !json[QString("DigitsPrecision")].isNull() && m_digits_precision_isValid;

    m_max_exponent_isValid = ::OpenAPI::fromJsonValue(m_max_exponent, json[QString("MaxExponent")]);
    m_max_exponent_isSet = !json[QString("MaxExponent")].isNull() && m_max_exponent_isValid;

    m_max_value_isValid = ::OpenAPI::fromJsonValue(m_max_value, json[QString("MaxValue")]);
    m_max_value_isSet = !json[QString("MaxValue")].isNull() && m_max_value_isValid;

    m_min_exponent_isValid = ::OpenAPI::fromJsonValue(m_min_exponent, json[QString("MinExponent")]);
    m_min_exponent_isSet = !json[QString("MinExponent")].isNull() && m_min_exponent_isValid;

    m_min_value_isValid = ::OpenAPI::fromJsonValue(m_min_value, json[QString("MinValue")]);
    m_min_value_isSet = !json[QString("MinValue")].isNull() && m_min_value_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_scale_factor_isValid = ::OpenAPI::fromJsonValue(m_scale_factor, json[QString("ScaleFactor")]);
    m_scale_factor_isSet = !json[QString("ScaleFactor")].isNull() && m_scale_factor_isValid;

    m_r_signed_isValid = ::OpenAPI::fromJsonValue(m_r_signed, json[QString("Signed")]);
    m_r_signed_isSet = !json[QString("Signed")].isNull() && m_r_signed_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;
}

QString OAIAuthorizationCodes_Shared_Models_DataField::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuthorizationCodes_Shared_Models_DataField::asJsonObject() const {
    QJsonObject obj;
    if (m_digits_precision_isSet) {
        obj.insert(QString("DigitsPrecision"), ::OpenAPI::toJsonValue(m_digits_precision));
    }
    if (m_max_exponent_isSet) {
        obj.insert(QString("MaxExponent"), ::OpenAPI::toJsonValue(m_max_exponent));
    }
    if (m_max_value_isSet) {
        obj.insert(QString("MaxValue"), ::OpenAPI::toJsonValue(m_max_value));
    }
    if (m_min_exponent_isSet) {
        obj.insert(QString("MinExponent"), ::OpenAPI::toJsonValue(m_min_exponent));
    }
    if (m_min_value_isSet) {
        obj.insert(QString("MinValue"), ::OpenAPI::toJsonValue(m_min_value));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_scale_factor_isSet) {
        obj.insert(QString("ScaleFactor"), ::OpenAPI::toJsonValue(m_scale_factor));
    }
    if (m_r_signed_isSet) {
        obj.insert(QString("Signed"), ::OpenAPI::toJsonValue(m_r_signed));
    }
    if (m_type_isSet) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

qint32 OAIAuthorizationCodes_Shared_Models_DataField::getDigitsPrecision() const {
    return m_digits_precision;
}
void OAIAuthorizationCodes_Shared_Models_DataField::setDigitsPrecision(const qint32 &digits_precision) {
    m_digits_precision = digits_precision;
    m_digits_precision_isSet = true;
}

bool OAIAuthorizationCodes_Shared_Models_DataField::is_digits_precision_Set() const{
    return m_digits_precision_isSet;
}

bool OAIAuthorizationCodes_Shared_Models_DataField::is_digits_precision_Valid() const{
    return m_digits_precision_isValid;
}

qint32 OAIAuthorizationCodes_Shared_Models_DataField::getMaxExponent() const {
    return m_max_exponent;
}
void OAIAuthorizationCodes_Shared_Models_DataField::setMaxExponent(const qint32 &max_exponent) {
    m_max_exponent = max_exponent;
    m_max_exponent_isSet = true;
}

bool OAIAuthorizationCodes_Shared_Models_DataField::is_max_exponent_Set() const{
    return m_max_exponent_isSet;
}

bool OAIAuthorizationCodes_Shared_Models_DataField::is_max_exponent_Valid() const{
    return m_max_exponent_isValid;
}

double OAIAuthorizationCodes_Shared_Models_DataField::getMaxValue() const {
    return m_max_value;
}
void OAIAuthorizationCodes_Shared_Models_DataField::setMaxValue(const double &max_value) {
    m_max_value = max_value;
    m_max_value_isSet = true;
}

bool OAIAuthorizationCodes_Shared_Models_DataField::is_max_value_Set() const{
    return m_max_value_isSet;
}

bool OAIAuthorizationCodes_Shared_Models_DataField::is_max_value_Valid() const{
    return m_max_value_isValid;
}

qint32 OAIAuthorizationCodes_Shared_Models_DataField::getMinExponent() const {
    return m_min_exponent;
}
void OAIAuthorizationCodes_Shared_Models_DataField::setMinExponent(const qint32 &min_exponent) {
    m_min_exponent = min_exponent;
    m_min_exponent_isSet = true;
}

bool OAIAuthorizationCodes_Shared_Models_DataField::is_min_exponent_Set() const{
    return m_min_exponent_isSet;
}

bool OAIAuthorizationCodes_Shared_Models_DataField::is_min_exponent_Valid() const{
    return m_min_exponent_isValid;
}

double OAIAuthorizationCodes_Shared_Models_DataField::getMinValue() const {
    return m_min_value;
}
void OAIAuthorizationCodes_Shared_Models_DataField::setMinValue(const double &min_value) {
    m_min_value = min_value;
    m_min_value_isSet = true;
}

bool OAIAuthorizationCodes_Shared_Models_DataField::is_min_value_Set() const{
    return m_min_value_isSet;
}

bool OAIAuthorizationCodes_Shared_Models_DataField::is_min_value_Valid() const{
    return m_min_value_isValid;
}

QString OAIAuthorizationCodes_Shared_Models_DataField::getName() const {
    return m_name;
}
void OAIAuthorizationCodes_Shared_Models_DataField::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAuthorizationCodes_Shared_Models_DataField::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAuthorizationCodes_Shared_Models_DataField::is_name_Valid() const{
    return m_name_isValid;
}

double OAIAuthorizationCodes_Shared_Models_DataField::getScaleFactor() const {
    return m_scale_factor;
}
void OAIAuthorizationCodes_Shared_Models_DataField::setScaleFactor(const double &scale_factor) {
    m_scale_factor = scale_factor;
    m_scale_factor_isSet = true;
}

bool OAIAuthorizationCodes_Shared_Models_DataField::is_scale_factor_Set() const{
    return m_scale_factor_isSet;
}

bool OAIAuthorizationCodes_Shared_Models_DataField::is_scale_factor_Valid() const{
    return m_scale_factor_isValid;
}

bool OAIAuthorizationCodes_Shared_Models_DataField::isRSigned() const {
    return m_r_signed;
}
void OAIAuthorizationCodes_Shared_Models_DataField::setRSigned(const bool &r_signed) {
    m_r_signed = r_signed;
    m_r_signed_isSet = true;
}

bool OAIAuthorizationCodes_Shared_Models_DataField::is_r_signed_Set() const{
    return m_r_signed_isSet;
}

bool OAIAuthorizationCodes_Shared_Models_DataField::is_r_signed_Valid() const{
    return m_r_signed_isValid;
}

QString OAIAuthorizationCodes_Shared_Models_DataField::getType() const {
    return m_type;
}
void OAIAuthorizationCodes_Shared_Models_DataField::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAuthorizationCodes_Shared_Models_DataField::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAuthorizationCodes_Shared_Models_DataField::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIAuthorizationCodes_Shared_Models_DataField::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_digits_precision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_exponent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_exponent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scale_factor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_signed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuthorizationCodes_Shared_Models_DataField::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
