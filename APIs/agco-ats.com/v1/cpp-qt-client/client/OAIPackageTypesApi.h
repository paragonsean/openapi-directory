/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPackageTypesApi_H
#define OAI_OAIPackageTypesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAPI_Models_ApiError.h"
#include "OAIAPI_PagedResponse_UpdateSystem_Models_PackageType_.h"
#include "OAIUpdateSystem_Models_PackageType.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPackageTypesApi : public QObject {
    Q_OBJECT

public:
    OAIPackageTypesApi(const int timeOut = 0);
    ~OAIPackageTypesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiV2PackageTypesIDGet(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  user_id qint32 [required]
    */
    virtual void packageTypesAddPackageTypeUser(const QString &id, const qint32 &user_id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void packageTypesDelete(const QString &id);

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  user_id qint32 [optional]
    */
    virtual void packageTypesGet(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &user_id = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  oai_update_system_models_package_type OAIUpdateSystem_Models_PackageType [required]
    */
    virtual void packageTypesPost(const OAIUpdateSystem_Models_PackageType &oai_update_system_models_package_type);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_update_system_models_package_type OAIUpdateSystem_Models_PackageType [required]
    */
    virtual void packageTypesPut(const QString &id, const OAIUpdateSystem_Models_PackageType &oai_update_system_models_package_type);

    /**
    * @param[in]  id QString [required]
    * @param[in]  user_id qint32 [required]
    */
    virtual void packageTypesRemovePackageTypeUser(const QString &id, const qint32 &user_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiV2PackageTypesIDGetCallback(OAIHttpRequestWorker *worker);
    void packageTypesAddPackageTypeUserCallback(OAIHttpRequestWorker *worker);
    void packageTypesDeleteCallback(OAIHttpRequestWorker *worker);
    void packageTypesGetCallback(OAIHttpRequestWorker *worker);
    void packageTypesPostCallback(OAIHttpRequestWorker *worker);
    void packageTypesPutCallback(OAIHttpRequestWorker *worker);
    void packageTypesRemovePackageTypeUserCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiV2PackageTypesIDGetSignal(OAIUpdateSystem_Models_PackageType summary);
    void packageTypesAddPackageTypeUserSignal();
    void packageTypesDeleteSignal();
    void packageTypesGetSignal(OAIAPI_PagedResponse_UpdateSystem_Models_PackageType_ summary);
    void packageTypesPostSignal(QString summary);
    void packageTypesPutSignal();
    void packageTypesRemovePackageTypeUserSignal();


    void apiV2PackageTypesIDGetSignalFull(OAIHttpRequestWorker *worker, OAIUpdateSystem_Models_PackageType summary);
    void packageTypesAddPackageTypeUserSignalFull(OAIHttpRequestWorker *worker);
    void packageTypesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void packageTypesGetSignalFull(OAIHttpRequestWorker *worker, OAIAPI_PagedResponse_UpdateSystem_Models_PackageType_ summary);
    void packageTypesPostSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void packageTypesPutSignalFull(OAIHttpRequestWorker *worker);
    void packageTypesRemovePackageTypeUserSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use apiV2PackageTypesIDGetSignalError() instead")
    void apiV2PackageTypesIDGetSignalE(OAIUpdateSystem_Models_PackageType summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV2PackageTypesIDGetSignalError(OAIUpdateSystem_Models_PackageType summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use packageTypesAddPackageTypeUserSignalError() instead")
    void packageTypesAddPackageTypeUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void packageTypesAddPackageTypeUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use packageTypesDeleteSignalError() instead")
    void packageTypesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void packageTypesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use packageTypesGetSignalError() instead")
    void packageTypesGetSignalE(OAIAPI_PagedResponse_UpdateSystem_Models_PackageType_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void packageTypesGetSignalError(OAIAPI_PagedResponse_UpdateSystem_Models_PackageType_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use packageTypesPostSignalError() instead")
    void packageTypesPostSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void packageTypesPostSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use packageTypesPutSignalError() instead")
    void packageTypesPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void packageTypesPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use packageTypesRemovePackageTypeUserSignalError() instead")
    void packageTypesRemovePackageTypeUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void packageTypesRemovePackageTypeUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiV2PackageTypesIDGetSignalErrorFull() instead")
    void apiV2PackageTypesIDGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV2PackageTypesIDGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use packageTypesAddPackageTypeUserSignalErrorFull() instead")
    void packageTypesAddPackageTypeUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void packageTypesAddPackageTypeUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use packageTypesDeleteSignalErrorFull() instead")
    void packageTypesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void packageTypesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use packageTypesGetSignalErrorFull() instead")
    void packageTypesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void packageTypesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use packageTypesPostSignalErrorFull() instead")
    void packageTypesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void packageTypesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use packageTypesPutSignalErrorFull() instead")
    void packageTypesPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void packageTypesPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use packageTypesRemovePackageTypeUserSignalErrorFull() instead")
    void packageTypesRemovePackageTypeUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void packageTypesRemovePackageTypeUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
