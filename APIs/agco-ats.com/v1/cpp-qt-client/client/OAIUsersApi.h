/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUsersApi_H
#define OAI_OAIUsersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAPI_Models_User.h"
#include "OAIAPI_PagedResponse_API_Models_User_.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUsersApi : public QObject {
    Q_OBJECT

public:
    OAIUsersApi(const int timeOut = 0);
    ~OAIUsersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void apiV2UsersIdGet(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void usersDelete(const qint32 &id);

    /**
    * @param[in]  username QString [optional]
    * @param[in]  email QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  has_role QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void usersGet(const ::OpenAPI::OptionalParam<QString> &username = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &email = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &has_role = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());


    virtual void usersGetCurrentUser();

    /**
    * @param[in]  oaiapi_models_user OAIAPI_Models_User [required]
    */
    virtual void usersPost(const OAIAPI_Models_User &oaiapi_models_user);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oaiapi_models_user OAIAPI_Models_User [required]
    */
    virtual void usersPut(const qint32 &id, const OAIAPI_Models_User &oaiapi_models_user);

    /**
    * @param[in]  oaiapi_models_user OAIAPI_Models_User [required]
    */
    virtual void usersPutCurrentUser(const OAIAPI_Models_User &oaiapi_models_user);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiV2UsersIdGetCallback(OAIHttpRequestWorker *worker);
    void usersDeleteCallback(OAIHttpRequestWorker *worker);
    void usersGetCallback(OAIHttpRequestWorker *worker);
    void usersGetCurrentUserCallback(OAIHttpRequestWorker *worker);
    void usersPostCallback(OAIHttpRequestWorker *worker);
    void usersPutCallback(OAIHttpRequestWorker *worker);
    void usersPutCurrentUserCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiV2UsersIdGetSignal(OAIAPI_Models_User summary);
    void usersDeleteSignal();
    void usersGetSignal(OAIAPI_PagedResponse_API_Models_User_ summary);
    void usersGetCurrentUserSignal(OAIAPI_Models_User summary);
    void usersPostSignal(OAIAPI_Models_User summary);
    void usersPutSignal();
    void usersPutCurrentUserSignal();


    void apiV2UsersIdGetSignalFull(OAIHttpRequestWorker *worker, OAIAPI_Models_User summary);
    void usersDeleteSignalFull(OAIHttpRequestWorker *worker);
    void usersGetSignalFull(OAIHttpRequestWorker *worker, OAIAPI_PagedResponse_API_Models_User_ summary);
    void usersGetCurrentUserSignalFull(OAIHttpRequestWorker *worker, OAIAPI_Models_User summary);
    void usersPostSignalFull(OAIHttpRequestWorker *worker, OAIAPI_Models_User summary);
    void usersPutSignalFull(OAIHttpRequestWorker *worker);
    void usersPutCurrentUserSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use apiV2UsersIdGetSignalError() instead")
    void apiV2UsersIdGetSignalE(OAIAPI_Models_User summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV2UsersIdGetSignalError(OAIAPI_Models_User summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersDeleteSignalError() instead")
    void usersDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void usersDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersGetSignalError() instead")
    void usersGetSignalE(OAIAPI_PagedResponse_API_Models_User_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersGetSignalError(OAIAPI_PagedResponse_API_Models_User_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersGetCurrentUserSignalError() instead")
    void usersGetCurrentUserSignalE(OAIAPI_Models_User summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersGetCurrentUserSignalError(OAIAPI_Models_User summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersPostSignalError() instead")
    void usersPostSignalE(OAIAPI_Models_User summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersPostSignalError(OAIAPI_Models_User summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersPutSignalError() instead")
    void usersPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void usersPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersPutCurrentUserSignalError() instead")
    void usersPutCurrentUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void usersPutCurrentUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiV2UsersIdGetSignalErrorFull() instead")
    void apiV2UsersIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV2UsersIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersDeleteSignalErrorFull() instead")
    void usersDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersGetSignalErrorFull() instead")
    void usersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersGetCurrentUserSignalErrorFull() instead")
    void usersGetCurrentUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersGetCurrentUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersPostSignalErrorFull() instead")
    void usersPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersPutSignalErrorFull() instead")
    void usersPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersPutCurrentUserSignalErrorFull() instead")
    void usersPutCurrentUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersPutCurrentUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
