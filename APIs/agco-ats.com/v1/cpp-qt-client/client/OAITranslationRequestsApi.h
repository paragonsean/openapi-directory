/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITranslationRequestsApi_H
#define OAI_OAITranslationRequestsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAPI_IPagedResponse_GlobalResources_Shared_Models_TranslationRequest_.h"
#include "OAIAPI_Models_ApiError.h"
#include "OAIGlobalResources_Shared_Models_TranslationRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITranslationRequestsApi : public QObject {
    Q_OBJECT

public:
    OAITranslationRequestsApi(const int timeOut = 0);
    ~OAITranslationRequestsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_global_resources_shared_models_translation_request OAIGlobalResources_Shared_Models_TranslationRequest [required]
    */
    virtual void translationRequestsCreateTranslationRequest(const OAIGlobalResources_Shared_Models_TranslationRequest &oai_global_resources_shared_models_translation_request);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void translationRequestsGetTranslationRequest(const qint32 &id);

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void translationRequestsGetTranslationRequests(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_global_resources_shared_models_translation_request OAIGlobalResources_Shared_Models_TranslationRequest [required]
    * @param[in]  do_resend_request bool [optional]
    */
    virtual void translationRequestsUpdateTranslationRequest(const qint32 &id, const OAIGlobalResources_Shared_Models_TranslationRequest &oai_global_resources_shared_models_translation_request, const ::OpenAPI::OptionalParam<bool> &do_resend_request = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  request_body QList<QString> [required]
    */
    virtual void translationRequestsUpdateTranslationRequestStrings(const qint32 &id, const QList<QString> &request_body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void translationRequestsCreateTranslationRequestCallback(OAIHttpRequestWorker *worker);
    void translationRequestsGetTranslationRequestCallback(OAIHttpRequestWorker *worker);
    void translationRequestsGetTranslationRequestsCallback(OAIHttpRequestWorker *worker);
    void translationRequestsUpdateTranslationRequestCallback(OAIHttpRequestWorker *worker);
    void translationRequestsUpdateTranslationRequestStringsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void translationRequestsCreateTranslationRequestSignal(qint32 summary);
    void translationRequestsGetTranslationRequestSignal(OAIGlobalResources_Shared_Models_TranslationRequest summary);
    void translationRequestsGetTranslationRequestsSignal(OAIAPI_IPagedResponse_GlobalResources_Shared_Models_TranslationRequest_ summary);
    void translationRequestsUpdateTranslationRequestSignal();
    void translationRequestsUpdateTranslationRequestStringsSignal();


    void translationRequestsCreateTranslationRequestSignalFull(OAIHttpRequestWorker *worker, qint32 summary);
    void translationRequestsGetTranslationRequestSignalFull(OAIHttpRequestWorker *worker, OAIGlobalResources_Shared_Models_TranslationRequest summary);
    void translationRequestsGetTranslationRequestsSignalFull(OAIHttpRequestWorker *worker, OAIAPI_IPagedResponse_GlobalResources_Shared_Models_TranslationRequest_ summary);
    void translationRequestsUpdateTranslationRequestSignalFull(OAIHttpRequestWorker *worker);
    void translationRequestsUpdateTranslationRequestStringsSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use translationRequestsCreateTranslationRequestSignalError() instead")
    void translationRequestsCreateTranslationRequestSignalE(qint32 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void translationRequestsCreateTranslationRequestSignalError(qint32 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use translationRequestsGetTranslationRequestSignalError() instead")
    void translationRequestsGetTranslationRequestSignalE(OAIGlobalResources_Shared_Models_TranslationRequest summary, QNetworkReply::NetworkError error_type, QString error_str);
    void translationRequestsGetTranslationRequestSignalError(OAIGlobalResources_Shared_Models_TranslationRequest summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use translationRequestsGetTranslationRequestsSignalError() instead")
    void translationRequestsGetTranslationRequestsSignalE(OAIAPI_IPagedResponse_GlobalResources_Shared_Models_TranslationRequest_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void translationRequestsGetTranslationRequestsSignalError(OAIAPI_IPagedResponse_GlobalResources_Shared_Models_TranslationRequest_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use translationRequestsUpdateTranslationRequestSignalError() instead")
    void translationRequestsUpdateTranslationRequestSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void translationRequestsUpdateTranslationRequestSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use translationRequestsUpdateTranslationRequestStringsSignalError() instead")
    void translationRequestsUpdateTranslationRequestStringsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void translationRequestsUpdateTranslationRequestStringsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use translationRequestsCreateTranslationRequestSignalErrorFull() instead")
    void translationRequestsCreateTranslationRequestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void translationRequestsCreateTranslationRequestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use translationRequestsGetTranslationRequestSignalErrorFull() instead")
    void translationRequestsGetTranslationRequestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void translationRequestsGetTranslationRequestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use translationRequestsGetTranslationRequestsSignalErrorFull() instead")
    void translationRequestsGetTranslationRequestsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void translationRequestsGetTranslationRequestsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use translationRequestsUpdateTranslationRequestSignalErrorFull() instead")
    void translationRequestsUpdateTranslationRequestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void translationRequestsUpdateTranslationRequestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use translationRequestsUpdateTranslationRequestStringsSignalErrorFull() instead")
    void translationRequestsUpdateTranslationRequestStringsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void translationRequestsUpdateTranslationRequestStringsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
