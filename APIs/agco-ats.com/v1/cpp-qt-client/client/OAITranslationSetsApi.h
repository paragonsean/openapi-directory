/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITranslationSetsApi_H
#define OAI_OAITranslationSetsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAPI_IPagedResponse_GlobalResources_Shared_Models_TranslationSetAttribute_.h"
#include "OAIAPI_IPagedResponse_GlobalResources_Shared_Models_TranslationSetSourceString_.h"
#include "OAIAPI_IPagedResponse_GlobalResources_Shared_Models_TranslationSetString_.h"
#include "OAIAPI_IPagedResponse_GlobalResources_Shared_Models_TranslationSet_.h"
#include "OAIAPI_Models_ApiError.h"
#include "OAIGlobalResources_Shared_Models_TranslationSet.h"
#include "OAIGlobalResources_Shared_Models_TranslationSetAttribute.h"
#include "OAIGlobalResources_Shared_Models_TranslationSetStatistics.h"
#include "OAIGlobalResources_Shared_Models_TranslationSetString.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITranslationSetsApi : public QObject {
    Q_OBJECT

public:
    OAITranslationSetsApi(const int timeOut = 0);
    ~OAITranslationSetsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void translationSetsDeleteTranslationSetAttribute(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void translationSetsGetSourceStrings(const qint32 &id, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void translationSetsGetStatistics(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  include_attributes QString [optional]
    */
    virtual void translationSetsGetTranslationSet(const qint32 &id, const ::OpenAPI::OptionalParam<QString> &include_attributes = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  name QString [optional]
    */
    virtual void translationSetsGetTranslationSetAttributes(const qint32 &id, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void translationSetsGetTranslationSetStrings(const qint32 &id, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  translation_request_id qint32 [optional]
    * @param[in]  state QString [optional]
    * @param[in]  string_id QString [optional]
    * @param[in]  language_id qint32 [optional]
    * @param[in]  include_attributes QString [optional]
    */
    virtual void translationSetsGetTranslationSets(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &translation_request_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &string_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &language_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &include_attributes = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_global_resources_shared_models_translation_set_attribute OAIGlobalResources_Shared_Models_TranslationSetAttribute [required]
    */
    virtual void translationSetsPostTranslationSetAttribute(const qint32 &id, const OAIGlobalResources_Shared_Models_TranslationSetAttribute &oai_global_resources_shared_models_translation_set_attribute);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_global_resources_shared_models_translation_set_attribute QList<OAIGlobalResources_Shared_Models_TranslationSetAttribute> [required]
    */
    virtual void translationSetsPostTranslationSetAttributes(const qint32 &id, const QList<OAIGlobalResources_Shared_Models_TranslationSetAttribute> &oai_global_resources_shared_models_translation_set_attribute);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_global_resources_shared_models_translation_set OAIGlobalResources_Shared_Models_TranslationSet [required]
    */
    virtual void translationSetsUpdateTranslationSet(const qint32 &id, const OAIGlobalResources_Shared_Models_TranslationSet &oai_global_resources_shared_models_translation_set);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_global_resources_shared_models_translation_set_attribute OAIGlobalResources_Shared_Models_TranslationSetAttribute [required]
    */
    virtual void translationSetsUpdateTranslationSetAttribute(const qint32 &id, const OAIGlobalResources_Shared_Models_TranslationSetAttribute &oai_global_resources_shared_models_translation_set_attribute);

    /**
    * @param[in]  oai_global_resources_shared_models_translation_set_attribute QList<OAIGlobalResources_Shared_Models_TranslationSetAttribute> [required]
    */
    virtual void translationSetsUpdateTranslationSetAttributes(const QList<OAIGlobalResources_Shared_Models_TranslationSetAttribute> &oai_global_resources_shared_models_translation_set_attribute);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_global_resources_shared_models_translation_set_string QList<OAIGlobalResources_Shared_Models_TranslationSetString> [required]
    */
    virtual void translationSetsUpdateTranslationSetStrings(const qint32 &id, const QList<OAIGlobalResources_Shared_Models_TranslationSetString> &oai_global_resources_shared_models_translation_set_string);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void translationSetsDeleteTranslationSetAttributeCallback(OAIHttpRequestWorker *worker);
    void translationSetsGetSourceStringsCallback(OAIHttpRequestWorker *worker);
    void translationSetsGetStatisticsCallback(OAIHttpRequestWorker *worker);
    void translationSetsGetTranslationSetCallback(OAIHttpRequestWorker *worker);
    void translationSetsGetTranslationSetAttributesCallback(OAIHttpRequestWorker *worker);
    void translationSetsGetTranslationSetStringsCallback(OAIHttpRequestWorker *worker);
    void translationSetsGetTranslationSetsCallback(OAIHttpRequestWorker *worker);
    void translationSetsPostTranslationSetAttributeCallback(OAIHttpRequestWorker *worker);
    void translationSetsPostTranslationSetAttributesCallback(OAIHttpRequestWorker *worker);
    void translationSetsUpdateTranslationSetCallback(OAIHttpRequestWorker *worker);
    void translationSetsUpdateTranslationSetAttributeCallback(OAIHttpRequestWorker *worker);
    void translationSetsUpdateTranslationSetAttributesCallback(OAIHttpRequestWorker *worker);
    void translationSetsUpdateTranslationSetStringsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void translationSetsDeleteTranslationSetAttributeSignal();
    void translationSetsGetSourceStringsSignal(OAIAPI_IPagedResponse_GlobalResources_Shared_Models_TranslationSetSourceString_ summary);
    void translationSetsGetStatisticsSignal(OAIGlobalResources_Shared_Models_TranslationSetStatistics summary);
    void translationSetsGetTranslationSetSignal(OAIGlobalResources_Shared_Models_TranslationSet summary);
    void translationSetsGetTranslationSetAttributesSignal(OAIAPI_IPagedResponse_GlobalResources_Shared_Models_TranslationSetAttribute_ summary);
    void translationSetsGetTranslationSetStringsSignal(OAIAPI_IPagedResponse_GlobalResources_Shared_Models_TranslationSetString_ summary);
    void translationSetsGetTranslationSetsSignal(OAIAPI_IPagedResponse_GlobalResources_Shared_Models_TranslationSet_ summary);
    void translationSetsPostTranslationSetAttributeSignal(qint32 summary);
    void translationSetsPostTranslationSetAttributesSignal();
    void translationSetsUpdateTranslationSetSignal();
    void translationSetsUpdateTranslationSetAttributeSignal();
    void translationSetsUpdateTranslationSetAttributesSignal();
    void translationSetsUpdateTranslationSetStringsSignal();


    void translationSetsDeleteTranslationSetAttributeSignalFull(OAIHttpRequestWorker *worker);
    void translationSetsGetSourceStringsSignalFull(OAIHttpRequestWorker *worker, OAIAPI_IPagedResponse_GlobalResources_Shared_Models_TranslationSetSourceString_ summary);
    void translationSetsGetStatisticsSignalFull(OAIHttpRequestWorker *worker, OAIGlobalResources_Shared_Models_TranslationSetStatistics summary);
    void translationSetsGetTranslationSetSignalFull(OAIHttpRequestWorker *worker, OAIGlobalResources_Shared_Models_TranslationSet summary);
    void translationSetsGetTranslationSetAttributesSignalFull(OAIHttpRequestWorker *worker, OAIAPI_IPagedResponse_GlobalResources_Shared_Models_TranslationSetAttribute_ summary);
    void translationSetsGetTranslationSetStringsSignalFull(OAIHttpRequestWorker *worker, OAIAPI_IPagedResponse_GlobalResources_Shared_Models_TranslationSetString_ summary);
    void translationSetsGetTranslationSetsSignalFull(OAIHttpRequestWorker *worker, OAIAPI_IPagedResponse_GlobalResources_Shared_Models_TranslationSet_ summary);
    void translationSetsPostTranslationSetAttributeSignalFull(OAIHttpRequestWorker *worker, qint32 summary);
    void translationSetsPostTranslationSetAttributesSignalFull(OAIHttpRequestWorker *worker);
    void translationSetsUpdateTranslationSetSignalFull(OAIHttpRequestWorker *worker);
    void translationSetsUpdateTranslationSetAttributeSignalFull(OAIHttpRequestWorker *worker);
    void translationSetsUpdateTranslationSetAttributesSignalFull(OAIHttpRequestWorker *worker);
    void translationSetsUpdateTranslationSetStringsSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use translationSetsDeleteTranslationSetAttributeSignalError() instead")
    void translationSetsDeleteTranslationSetAttributeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void translationSetsDeleteTranslationSetAttributeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use translationSetsGetSourceStringsSignalError() instead")
    void translationSetsGetSourceStringsSignalE(OAIAPI_IPagedResponse_GlobalResources_Shared_Models_TranslationSetSourceString_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void translationSetsGetSourceStringsSignalError(OAIAPI_IPagedResponse_GlobalResources_Shared_Models_TranslationSetSourceString_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use translationSetsGetStatisticsSignalError() instead")
    void translationSetsGetStatisticsSignalE(OAIGlobalResources_Shared_Models_TranslationSetStatistics summary, QNetworkReply::NetworkError error_type, QString error_str);
    void translationSetsGetStatisticsSignalError(OAIGlobalResources_Shared_Models_TranslationSetStatistics summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use translationSetsGetTranslationSetSignalError() instead")
    void translationSetsGetTranslationSetSignalE(OAIGlobalResources_Shared_Models_TranslationSet summary, QNetworkReply::NetworkError error_type, QString error_str);
    void translationSetsGetTranslationSetSignalError(OAIGlobalResources_Shared_Models_TranslationSet summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use translationSetsGetTranslationSetAttributesSignalError() instead")
    void translationSetsGetTranslationSetAttributesSignalE(OAIAPI_IPagedResponse_GlobalResources_Shared_Models_TranslationSetAttribute_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void translationSetsGetTranslationSetAttributesSignalError(OAIAPI_IPagedResponse_GlobalResources_Shared_Models_TranslationSetAttribute_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use translationSetsGetTranslationSetStringsSignalError() instead")
    void translationSetsGetTranslationSetStringsSignalE(OAIAPI_IPagedResponse_GlobalResources_Shared_Models_TranslationSetString_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void translationSetsGetTranslationSetStringsSignalError(OAIAPI_IPagedResponse_GlobalResources_Shared_Models_TranslationSetString_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use translationSetsGetTranslationSetsSignalError() instead")
    void translationSetsGetTranslationSetsSignalE(OAIAPI_IPagedResponse_GlobalResources_Shared_Models_TranslationSet_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void translationSetsGetTranslationSetsSignalError(OAIAPI_IPagedResponse_GlobalResources_Shared_Models_TranslationSet_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use translationSetsPostTranslationSetAttributeSignalError() instead")
    void translationSetsPostTranslationSetAttributeSignalE(qint32 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void translationSetsPostTranslationSetAttributeSignalError(qint32 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use translationSetsPostTranslationSetAttributesSignalError() instead")
    void translationSetsPostTranslationSetAttributesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void translationSetsPostTranslationSetAttributesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use translationSetsUpdateTranslationSetSignalError() instead")
    void translationSetsUpdateTranslationSetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void translationSetsUpdateTranslationSetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use translationSetsUpdateTranslationSetAttributeSignalError() instead")
    void translationSetsUpdateTranslationSetAttributeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void translationSetsUpdateTranslationSetAttributeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use translationSetsUpdateTranslationSetAttributesSignalError() instead")
    void translationSetsUpdateTranslationSetAttributesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void translationSetsUpdateTranslationSetAttributesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use translationSetsUpdateTranslationSetStringsSignalError() instead")
    void translationSetsUpdateTranslationSetStringsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void translationSetsUpdateTranslationSetStringsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use translationSetsDeleteTranslationSetAttributeSignalErrorFull() instead")
    void translationSetsDeleteTranslationSetAttributeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void translationSetsDeleteTranslationSetAttributeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use translationSetsGetSourceStringsSignalErrorFull() instead")
    void translationSetsGetSourceStringsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void translationSetsGetSourceStringsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use translationSetsGetStatisticsSignalErrorFull() instead")
    void translationSetsGetStatisticsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void translationSetsGetStatisticsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use translationSetsGetTranslationSetSignalErrorFull() instead")
    void translationSetsGetTranslationSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void translationSetsGetTranslationSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use translationSetsGetTranslationSetAttributesSignalErrorFull() instead")
    void translationSetsGetTranslationSetAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void translationSetsGetTranslationSetAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use translationSetsGetTranslationSetStringsSignalErrorFull() instead")
    void translationSetsGetTranslationSetStringsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void translationSetsGetTranslationSetStringsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use translationSetsGetTranslationSetsSignalErrorFull() instead")
    void translationSetsGetTranslationSetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void translationSetsGetTranslationSetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use translationSetsPostTranslationSetAttributeSignalErrorFull() instead")
    void translationSetsPostTranslationSetAttributeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void translationSetsPostTranslationSetAttributeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use translationSetsPostTranslationSetAttributesSignalErrorFull() instead")
    void translationSetsPostTranslationSetAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void translationSetsPostTranslationSetAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use translationSetsUpdateTranslationSetSignalErrorFull() instead")
    void translationSetsUpdateTranslationSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void translationSetsUpdateTranslationSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use translationSetsUpdateTranslationSetAttributeSignalErrorFull() instead")
    void translationSetsUpdateTranslationSetAttributeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void translationSetsUpdateTranslationSetAttributeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use translationSetsUpdateTranslationSetAttributesSignalErrorFull() instead")
    void translationSetsUpdateTranslationSetAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void translationSetsUpdateTranslationSetAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use translationSetsUpdateTranslationSetStringsSignalErrorFull() instead")
    void translationSetsUpdateTranslationSetStringsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void translationSetsUpdateTranslationSetStringsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
