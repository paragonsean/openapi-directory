/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIClientsApi_H
#define OAI_OAIClientsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAPI_Models_ApiError.h"
#include "OAIAPI_PagedResponse_UpdateSystem_Models_AvailableUpdateGroupSubscription_.h"
#include "OAIAPI_PagedResponse_UpdateSystem_Models_Client_.h"
#include "OAIAPI_PagedResponse_UpdateSystem_Models_UpdateGroupSubscription_.h"
#include "OAIUpdateSystem_Models_Client.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIClientsApi : public QObject {
    Q_OBJECT

public:
    OAIClientsApi(const int timeOut = 0);
    ~OAIClientsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiV2ClientsIDGet(const QString &id);

    /**
    * @param[in]  tag QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void clientsGet(const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  update_group_id QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void clientsGetAvailableSubscriptions(const QString &id, const ::OpenAPI::OptionalParam<QString> &update_group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  update_group_id QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void clientsGetSubscriptions(const QString &id, const ::OpenAPI::OptionalParam<QString> &update_group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_update_system_models_client OAIUpdateSystem_Models_Client [required]
    */
    virtual void clientsPut(const QString &id, const OAIUpdateSystem_Models_Client &oai_update_system_models_client);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiV2ClientsIDGetCallback(OAIHttpRequestWorker *worker);
    void clientsGetCallback(OAIHttpRequestWorker *worker);
    void clientsGetAvailableSubscriptionsCallback(OAIHttpRequestWorker *worker);
    void clientsGetSubscriptionsCallback(OAIHttpRequestWorker *worker);
    void clientsPutCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiV2ClientsIDGetSignal(OAIUpdateSystem_Models_Client summary);
    void clientsGetSignal(OAIAPI_PagedResponse_UpdateSystem_Models_Client_ summary);
    void clientsGetAvailableSubscriptionsSignal(OAIAPI_PagedResponse_UpdateSystem_Models_AvailableUpdateGroupSubscription_ summary);
    void clientsGetSubscriptionsSignal(OAIAPI_PagedResponse_UpdateSystem_Models_UpdateGroupSubscription_ summary);
    void clientsPutSignal();


    void apiV2ClientsIDGetSignalFull(OAIHttpRequestWorker *worker, OAIUpdateSystem_Models_Client summary);
    void clientsGetSignalFull(OAIHttpRequestWorker *worker, OAIAPI_PagedResponse_UpdateSystem_Models_Client_ summary);
    void clientsGetAvailableSubscriptionsSignalFull(OAIHttpRequestWorker *worker, OAIAPI_PagedResponse_UpdateSystem_Models_AvailableUpdateGroupSubscription_ summary);
    void clientsGetSubscriptionsSignalFull(OAIHttpRequestWorker *worker, OAIAPI_PagedResponse_UpdateSystem_Models_UpdateGroupSubscription_ summary);
    void clientsPutSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use apiV2ClientsIDGetSignalError() instead")
    void apiV2ClientsIDGetSignalE(OAIUpdateSystem_Models_Client summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV2ClientsIDGetSignalError(OAIUpdateSystem_Models_Client summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clientsGetSignalError() instead")
    void clientsGetSignalE(OAIAPI_PagedResponse_UpdateSystem_Models_Client_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void clientsGetSignalError(OAIAPI_PagedResponse_UpdateSystem_Models_Client_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clientsGetAvailableSubscriptionsSignalError() instead")
    void clientsGetAvailableSubscriptionsSignalE(OAIAPI_PagedResponse_UpdateSystem_Models_AvailableUpdateGroupSubscription_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void clientsGetAvailableSubscriptionsSignalError(OAIAPI_PagedResponse_UpdateSystem_Models_AvailableUpdateGroupSubscription_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clientsGetSubscriptionsSignalError() instead")
    void clientsGetSubscriptionsSignalE(OAIAPI_PagedResponse_UpdateSystem_Models_UpdateGroupSubscription_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void clientsGetSubscriptionsSignalError(OAIAPI_PagedResponse_UpdateSystem_Models_UpdateGroupSubscription_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clientsPutSignalError() instead")
    void clientsPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void clientsPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiV2ClientsIDGetSignalErrorFull() instead")
    void apiV2ClientsIDGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV2ClientsIDGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clientsGetSignalErrorFull() instead")
    void clientsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clientsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clientsGetAvailableSubscriptionsSignalErrorFull() instead")
    void clientsGetAvailableSubscriptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clientsGetAvailableSubscriptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clientsGetSubscriptionsSignalErrorFull() instead")
    void clientsGetSubscriptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clientsGetSubscriptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clientsPutSignalErrorFull() instead")
    void clientsPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clientsPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
