/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIGlobalImagesApi_H
#define OAI_OAIGlobalImagesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAPI_IPagedResponse_GlobalResources_Shared_Models_GlobalImage_.h"
#include "OAIAPI_Models_ApiError.h"
#include "OAIGlobalResources_Shared_Models_GlobalImage.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIGlobalImagesApi : public QObject {
    Q_OBJECT

public:
    OAIGlobalImagesApi(const int timeOut = 0);
    ~OAIGlobalImagesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    */
    virtual void globalImagesDeleteFile(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void globalImagesGetGlobalImage(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  is_full_image bool [optional]
    */
    virtual void globalImagesGetGlobalImageContents(const QString &id, const ::OpenAPI::OptionalParam<bool> &is_full_image = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  search QString [optional]
    * @param[in]  category_id QString [optional]
    * @param[in]  publisher QString [optional]
    * @param[in]  include_deleted bool [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void globalImagesGetGlobalImages(const ::OpenAPI::OptionalParam<QString> &search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &category_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &publisher = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_deleted = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  oai_global_resources_shared_models_global_image OAIGlobalResources_Shared_Models_GlobalImage [required]
    * @param[in]  override_publisher_or_date bool [optional]
    */
    virtual void globalImagesPostGlobalImage(const OAIGlobalResources_Shared_Models_GlobalImage &oai_global_resources_shared_models_global_image, const ::OpenAPI::OptionalParam<bool> &override_publisher_or_date = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_global_resources_shared_models_global_image OAIGlobalResources_Shared_Models_GlobalImage [required]
    * @param[in]  override_publisher_or_date bool [optional]
    */
    virtual void globalImagesPutGlobalImage(const QString &id, const OAIGlobalResources_Shared_Models_GlobalImage &oai_global_resources_shared_models_global_image, const ::OpenAPI::OptionalParam<bool> &override_publisher_or_date = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  is_full_image bool [optional]
    */
    virtual void globalImagesPutGlobalImageContents(const QString &id, const ::OpenAPI::OptionalParam<bool> &is_full_image = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void globalImagesDeleteFileCallback(OAIHttpRequestWorker *worker);
    void globalImagesGetGlobalImageCallback(OAIHttpRequestWorker *worker);
    void globalImagesGetGlobalImageContentsCallback(OAIHttpRequestWorker *worker);
    void globalImagesGetGlobalImagesCallback(OAIHttpRequestWorker *worker);
    void globalImagesPostGlobalImageCallback(OAIHttpRequestWorker *worker);
    void globalImagesPutGlobalImageCallback(OAIHttpRequestWorker *worker);
    void globalImagesPutGlobalImageContentsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void globalImagesDeleteFileSignal();
    void globalImagesGetGlobalImageSignal(OAIGlobalResources_Shared_Models_GlobalImage summary);
    void globalImagesGetGlobalImageContentsSignal(OAIObject summary);
    void globalImagesGetGlobalImagesSignal(OAIAPI_IPagedResponse_GlobalResources_Shared_Models_GlobalImage_ summary);
    void globalImagesPostGlobalImageSignal(QString summary);
    void globalImagesPutGlobalImageSignal();
    void globalImagesPutGlobalImageContentsSignal(OAIObject summary);


    void globalImagesDeleteFileSignalFull(OAIHttpRequestWorker *worker);
    void globalImagesGetGlobalImageSignalFull(OAIHttpRequestWorker *worker, OAIGlobalResources_Shared_Models_GlobalImage summary);
    void globalImagesGetGlobalImageContentsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void globalImagesGetGlobalImagesSignalFull(OAIHttpRequestWorker *worker, OAIAPI_IPagedResponse_GlobalResources_Shared_Models_GlobalImage_ summary);
    void globalImagesPostGlobalImageSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void globalImagesPutGlobalImageSignalFull(OAIHttpRequestWorker *worker);
    void globalImagesPutGlobalImageContentsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    Q_DECL_DEPRECATED_X("Use globalImagesDeleteFileSignalError() instead")
    void globalImagesDeleteFileSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void globalImagesDeleteFileSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use globalImagesGetGlobalImageSignalError() instead")
    void globalImagesGetGlobalImageSignalE(OAIGlobalResources_Shared_Models_GlobalImage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void globalImagesGetGlobalImageSignalError(OAIGlobalResources_Shared_Models_GlobalImage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use globalImagesGetGlobalImageContentsSignalError() instead")
    void globalImagesGetGlobalImageContentsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void globalImagesGetGlobalImageContentsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use globalImagesGetGlobalImagesSignalError() instead")
    void globalImagesGetGlobalImagesSignalE(OAIAPI_IPagedResponse_GlobalResources_Shared_Models_GlobalImage_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void globalImagesGetGlobalImagesSignalError(OAIAPI_IPagedResponse_GlobalResources_Shared_Models_GlobalImage_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use globalImagesPostGlobalImageSignalError() instead")
    void globalImagesPostGlobalImageSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void globalImagesPostGlobalImageSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use globalImagesPutGlobalImageSignalError() instead")
    void globalImagesPutGlobalImageSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void globalImagesPutGlobalImageSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use globalImagesPutGlobalImageContentsSignalError() instead")
    void globalImagesPutGlobalImageContentsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void globalImagesPutGlobalImageContentsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use globalImagesDeleteFileSignalErrorFull() instead")
    void globalImagesDeleteFileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void globalImagesDeleteFileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use globalImagesGetGlobalImageSignalErrorFull() instead")
    void globalImagesGetGlobalImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void globalImagesGetGlobalImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use globalImagesGetGlobalImageContentsSignalErrorFull() instead")
    void globalImagesGetGlobalImageContentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void globalImagesGetGlobalImageContentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use globalImagesGetGlobalImagesSignalErrorFull() instead")
    void globalImagesGetGlobalImagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void globalImagesGetGlobalImagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use globalImagesPostGlobalImageSignalErrorFull() instead")
    void globalImagesPostGlobalImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void globalImagesPostGlobalImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use globalImagesPutGlobalImageSignalErrorFull() instead")
    void globalImagesPutGlobalImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void globalImagesPutGlobalImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use globalImagesPutGlobalImageContentsSignalErrorFull() instead")
    void globalImagesPutGlobalImageContentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void globalImagesPutGlobalImageContentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
