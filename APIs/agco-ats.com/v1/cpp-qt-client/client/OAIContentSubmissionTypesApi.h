/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIContentSubmissionTypesApi_H
#define OAI_OAIContentSubmissionTypesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAPI_Models_ApiError.h"
#include "OAIContentSubmission_Shared_BusinessEntities_ContentSubmissionType.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIContentSubmissionTypesApi : public QObject {
    Q_OBJECT

public:
    OAIContentSubmissionTypesApi(const int timeOut = 0);
    ~OAIContentSubmissionTypesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void contentSubmissionTypesDeleteContentSubmissionType(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void contentSubmissionTypesGetContentSubmissionType(const qint32 &id);

    /**
    * @param[in]  enabled bool [optional]
    */
    virtual void contentSubmissionTypesGetContentSubmissionTypes(const ::OpenAPI::OptionalParam<bool> &enabled = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  oai_content_submission_shared_business_entities_content_submission_type OAIContentSubmission_Shared_BusinessEntities_ContentSubmissionType [required]
    */
    virtual void contentSubmissionTypesPostContentSubmissionType(const OAIContentSubmission_Shared_BusinessEntities_ContentSubmissionType &oai_content_submission_shared_business_entities_content_submission_type);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_content_submission_shared_business_entities_content_submission_type OAIContentSubmission_Shared_BusinessEntities_ContentSubmissionType [required]
    */
    virtual void contentSubmissionTypesPutContentSubmissionType(const qint32 &id, const OAIContentSubmission_Shared_BusinessEntities_ContentSubmissionType &oai_content_submission_shared_business_entities_content_submission_type);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void contentSubmissionTypesDeleteContentSubmissionTypeCallback(OAIHttpRequestWorker *worker);
    void contentSubmissionTypesGetContentSubmissionTypeCallback(OAIHttpRequestWorker *worker);
    void contentSubmissionTypesGetContentSubmissionTypesCallback(OAIHttpRequestWorker *worker);
    void contentSubmissionTypesPostContentSubmissionTypeCallback(OAIHttpRequestWorker *worker);
    void contentSubmissionTypesPutContentSubmissionTypeCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void contentSubmissionTypesDeleteContentSubmissionTypeSignal();
    void contentSubmissionTypesGetContentSubmissionTypeSignal(OAIContentSubmission_Shared_BusinessEntities_ContentSubmissionType summary);
    void contentSubmissionTypesGetContentSubmissionTypesSignal(QList<OAIContentSubmission_Shared_BusinessEntities_ContentSubmissionType> summary);
    void contentSubmissionTypesPostContentSubmissionTypeSignal(qint32 summary);
    void contentSubmissionTypesPutContentSubmissionTypeSignal();


    void contentSubmissionTypesDeleteContentSubmissionTypeSignalFull(OAIHttpRequestWorker *worker);
    void contentSubmissionTypesGetContentSubmissionTypeSignalFull(OAIHttpRequestWorker *worker, OAIContentSubmission_Shared_BusinessEntities_ContentSubmissionType summary);
    void contentSubmissionTypesGetContentSubmissionTypesSignalFull(OAIHttpRequestWorker *worker, QList<OAIContentSubmission_Shared_BusinessEntities_ContentSubmissionType> summary);
    void contentSubmissionTypesPostContentSubmissionTypeSignalFull(OAIHttpRequestWorker *worker, qint32 summary);
    void contentSubmissionTypesPutContentSubmissionTypeSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use contentSubmissionTypesDeleteContentSubmissionTypeSignalError() instead")
    void contentSubmissionTypesDeleteContentSubmissionTypeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void contentSubmissionTypesDeleteContentSubmissionTypeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contentSubmissionTypesGetContentSubmissionTypeSignalError() instead")
    void contentSubmissionTypesGetContentSubmissionTypeSignalE(OAIContentSubmission_Shared_BusinessEntities_ContentSubmissionType summary, QNetworkReply::NetworkError error_type, QString error_str);
    void contentSubmissionTypesGetContentSubmissionTypeSignalError(OAIContentSubmission_Shared_BusinessEntities_ContentSubmissionType summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contentSubmissionTypesGetContentSubmissionTypesSignalError() instead")
    void contentSubmissionTypesGetContentSubmissionTypesSignalE(QList<OAIContentSubmission_Shared_BusinessEntities_ContentSubmissionType> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void contentSubmissionTypesGetContentSubmissionTypesSignalError(QList<OAIContentSubmission_Shared_BusinessEntities_ContentSubmissionType> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contentSubmissionTypesPostContentSubmissionTypeSignalError() instead")
    void contentSubmissionTypesPostContentSubmissionTypeSignalE(qint32 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void contentSubmissionTypesPostContentSubmissionTypeSignalError(qint32 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contentSubmissionTypesPutContentSubmissionTypeSignalError() instead")
    void contentSubmissionTypesPutContentSubmissionTypeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void contentSubmissionTypesPutContentSubmissionTypeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use contentSubmissionTypesDeleteContentSubmissionTypeSignalErrorFull() instead")
    void contentSubmissionTypesDeleteContentSubmissionTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contentSubmissionTypesDeleteContentSubmissionTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contentSubmissionTypesGetContentSubmissionTypeSignalErrorFull() instead")
    void contentSubmissionTypesGetContentSubmissionTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contentSubmissionTypesGetContentSubmissionTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contentSubmissionTypesGetContentSubmissionTypesSignalErrorFull() instead")
    void contentSubmissionTypesGetContentSubmissionTypesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contentSubmissionTypesGetContentSubmissionTypesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contentSubmissionTypesPostContentSubmissionTypeSignalErrorFull() instead")
    void contentSubmissionTypesPostContentSubmissionTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contentSubmissionTypesPostContentSubmissionTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contentSubmissionTypesPutContentSubmissionTypeSignalErrorFull() instead")
    void contentSubmissionTypesPutContentSubmissionTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contentSubmissionTypesPutContentSubmissionTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
