/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPermissionsApi_H
#define OAI_OAIPermissionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAPI_Models_Permission.h"
#include "OAIAPI_PagedResponse_API_Models_Permission_.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPermissionsApi : public QObject {
    Q_OBJECT

public:
    OAIPermissionsApi(const int timeOut = 0);
    ~OAIPermissionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void permissionsDeletePermission(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void permissionsGetPermission(const qint32 &id);

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  name QString [optional]
    */
    virtual void permissionsGetPermissions(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oaiapi_models_permission OAIAPI_Models_Permission [required]
    */
    virtual void permissionsPostPermission(const OAIAPI_Models_Permission &oaiapi_models_permission);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oaiapi_models_permission OAIAPI_Models_Permission [required]
    */
    virtual void permissionsPutPermission(const qint32 &id, const OAIAPI_Models_Permission &oaiapi_models_permission);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void permissionsDeletePermissionCallback(OAIHttpRequestWorker *worker);
    void permissionsGetPermissionCallback(OAIHttpRequestWorker *worker);
    void permissionsGetPermissionsCallback(OAIHttpRequestWorker *worker);
    void permissionsPostPermissionCallback(OAIHttpRequestWorker *worker);
    void permissionsPutPermissionCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void permissionsDeletePermissionSignal();
    void permissionsGetPermissionSignal(OAIAPI_Models_Permission summary);
    void permissionsGetPermissionsSignal(OAIAPI_PagedResponse_API_Models_Permission_ summary);
    void permissionsPostPermissionSignal(qint32 summary);
    void permissionsPutPermissionSignal();


    void permissionsDeletePermissionSignalFull(OAIHttpRequestWorker *worker);
    void permissionsGetPermissionSignalFull(OAIHttpRequestWorker *worker, OAIAPI_Models_Permission summary);
    void permissionsGetPermissionsSignalFull(OAIHttpRequestWorker *worker, OAIAPI_PagedResponse_API_Models_Permission_ summary);
    void permissionsPostPermissionSignalFull(OAIHttpRequestWorker *worker, qint32 summary);
    void permissionsPutPermissionSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use permissionsDeletePermissionSignalError() instead")
    void permissionsDeletePermissionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void permissionsDeletePermissionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use permissionsGetPermissionSignalError() instead")
    void permissionsGetPermissionSignalE(OAIAPI_Models_Permission summary, QNetworkReply::NetworkError error_type, QString error_str);
    void permissionsGetPermissionSignalError(OAIAPI_Models_Permission summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use permissionsGetPermissionsSignalError() instead")
    void permissionsGetPermissionsSignalE(OAIAPI_PagedResponse_API_Models_Permission_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void permissionsGetPermissionsSignalError(OAIAPI_PagedResponse_API_Models_Permission_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use permissionsPostPermissionSignalError() instead")
    void permissionsPostPermissionSignalE(qint32 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void permissionsPostPermissionSignalError(qint32 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use permissionsPutPermissionSignalError() instead")
    void permissionsPutPermissionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void permissionsPutPermissionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use permissionsDeletePermissionSignalErrorFull() instead")
    void permissionsDeletePermissionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void permissionsDeletePermissionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use permissionsGetPermissionSignalErrorFull() instead")
    void permissionsGetPermissionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void permissionsGetPermissionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use permissionsGetPermissionsSignalErrorFull() instead")
    void permissionsGetPermissionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void permissionsGetPermissionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use permissionsPostPermissionSignalErrorFull() instead")
    void permissionsPostPermissionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void permissionsPostPermissionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use permissionsPutPermissionSignalErrorFull() instead")
    void permissionsPutPermissionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void permissionsPutPermissionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
