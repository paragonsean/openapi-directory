/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUpdateGroupClientRelationshipsApi_H
#define OAI_OAIUpdateGroupClientRelationshipsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAPI_Models_ApiError.h"
#include "OAIAPI_PagedResponse_UpdateSystem_Models_UpdateGroupClientRelationship_.h"
#include "OAIUpdateSystem_Models_UpdateGroupClientRelationship.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUpdateGroupClientRelationshipsApi : public QObject {
    Q_OBJECT

public:
    OAIUpdateGroupClientRelationshipsApi(const int timeOut = 0);
    ~OAIUpdateGroupClientRelationshipsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  relationship_id QString [required]
    */
    virtual void updateGroupClientRelationshipsGetSubscription(const QString &relationship_id);

    /**
    * @param[in]  client_id QString [optional]
    * @param[in]  update_group_id QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  active bool [optional]
    */
    virtual void updateGroupClientRelationshipsGetSubscriptions(const ::OpenAPI::OptionalParam<QString> &client_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &update_group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &active = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  oai_update_system_models_update_group_client_relationship OAIUpdateSystem_Models_UpdateGroupClientRelationship [required]
    */
    virtual void updateGroupClientRelationshipsPostSubscription(const OAIUpdateSystem_Models_UpdateGroupClientRelationship &oai_update_system_models_update_group_client_relationship);

    /**
    * @param[in]  relationship_id QString [required]
    * @param[in]  oai_update_system_models_update_group_client_relationship OAIUpdateSystem_Models_UpdateGroupClientRelationship [required]
    */
    virtual void updateGroupClientRelationshipsPutSubscription(const QString &relationship_id, const OAIUpdateSystem_Models_UpdateGroupClientRelationship &oai_update_system_models_update_group_client_relationship);

    /**
    * @param[in]  client_id QString [required]
    * @param[in]  update_group_id QString [required]
    * @param[in]  active bool [required]
    */
    virtual void updateGroupClientRelationshipsPutSubscriptionByClientIDUpdateGroupID(const QString &client_id, const QString &update_group_id, const bool &active);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void updateGroupClientRelationshipsGetSubscriptionCallback(OAIHttpRequestWorker *worker);
    void updateGroupClientRelationshipsGetSubscriptionsCallback(OAIHttpRequestWorker *worker);
    void updateGroupClientRelationshipsPostSubscriptionCallback(OAIHttpRequestWorker *worker);
    void updateGroupClientRelationshipsPutSubscriptionCallback(OAIHttpRequestWorker *worker);
    void updateGroupClientRelationshipsPutSubscriptionByClientIDUpdateGroupIDCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void updateGroupClientRelationshipsGetSubscriptionSignal(OAIUpdateSystem_Models_UpdateGroupClientRelationship summary);
    void updateGroupClientRelationshipsGetSubscriptionsSignal(OAIAPI_PagedResponse_UpdateSystem_Models_UpdateGroupClientRelationship_ summary);
    void updateGroupClientRelationshipsPostSubscriptionSignal(QString summary);
    void updateGroupClientRelationshipsPutSubscriptionSignal();
    void updateGroupClientRelationshipsPutSubscriptionByClientIDUpdateGroupIDSignal();


    void updateGroupClientRelationshipsGetSubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIUpdateSystem_Models_UpdateGroupClientRelationship summary);
    void updateGroupClientRelationshipsGetSubscriptionsSignalFull(OAIHttpRequestWorker *worker, OAIAPI_PagedResponse_UpdateSystem_Models_UpdateGroupClientRelationship_ summary);
    void updateGroupClientRelationshipsPostSubscriptionSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void updateGroupClientRelationshipsPutSubscriptionSignalFull(OAIHttpRequestWorker *worker);
    void updateGroupClientRelationshipsPutSubscriptionByClientIDUpdateGroupIDSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use updateGroupClientRelationshipsGetSubscriptionSignalError() instead")
    void updateGroupClientRelationshipsGetSubscriptionSignalE(OAIUpdateSystem_Models_UpdateGroupClientRelationship summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateGroupClientRelationshipsGetSubscriptionSignalError(OAIUpdateSystem_Models_UpdateGroupClientRelationship summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGroupClientRelationshipsGetSubscriptionsSignalError() instead")
    void updateGroupClientRelationshipsGetSubscriptionsSignalE(OAIAPI_PagedResponse_UpdateSystem_Models_UpdateGroupClientRelationship_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateGroupClientRelationshipsGetSubscriptionsSignalError(OAIAPI_PagedResponse_UpdateSystem_Models_UpdateGroupClientRelationship_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGroupClientRelationshipsPostSubscriptionSignalError() instead")
    void updateGroupClientRelationshipsPostSubscriptionSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateGroupClientRelationshipsPostSubscriptionSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGroupClientRelationshipsPutSubscriptionSignalError() instead")
    void updateGroupClientRelationshipsPutSubscriptionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateGroupClientRelationshipsPutSubscriptionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGroupClientRelationshipsPutSubscriptionByClientIDUpdateGroupIDSignalError() instead")
    void updateGroupClientRelationshipsPutSubscriptionByClientIDUpdateGroupIDSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateGroupClientRelationshipsPutSubscriptionByClientIDUpdateGroupIDSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use updateGroupClientRelationshipsGetSubscriptionSignalErrorFull() instead")
    void updateGroupClientRelationshipsGetSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateGroupClientRelationshipsGetSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGroupClientRelationshipsGetSubscriptionsSignalErrorFull() instead")
    void updateGroupClientRelationshipsGetSubscriptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateGroupClientRelationshipsGetSubscriptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGroupClientRelationshipsPostSubscriptionSignalErrorFull() instead")
    void updateGroupClientRelationshipsPostSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateGroupClientRelationshipsPostSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGroupClientRelationshipsPutSubscriptionSignalErrorFull() instead")
    void updateGroupClientRelationshipsPutSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateGroupClientRelationshipsPutSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGroupClientRelationshipsPutSubscriptionByClientIDUpdateGroupIDSignalErrorFull() instead")
    void updateGroupClientRelationshipsPutSubscriptionByClientIDUpdateGroupIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateGroupClientRelationshipsPutSubscriptionByClientIDUpdateGroupIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
