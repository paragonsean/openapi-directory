/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGlobalResources_Shared_Models_StringDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGlobalResources_Shared_Models_StringDefinition::OAIGlobalResources_Shared_Models_StringDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGlobalResources_Shared_Models_StringDefinition::OAIGlobalResources_Shared_Models_StringDefinition() {
    this->initializeModel();
}

OAIGlobalResources_Shared_Models_StringDefinition::~OAIGlobalResources_Shared_Models_StringDefinition() {}

void OAIGlobalResources_Shared_Models_StringDefinition::initializeModel() {

    m_description_for_translator_isSet = false;
    m_description_for_translator_isValid = false;

    m_do_not_translate_isSet = false;
    m_do_not_translate_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_parameter_count_isSet = false;
    m_parameter_count_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_translations_isSet = false;
    m_translations_isValid = false;
}

void OAIGlobalResources_Shared_Models_StringDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGlobalResources_Shared_Models_StringDefinition::fromJsonObject(QJsonObject json) {

    m_description_for_translator_isValid = ::OpenAPI::fromJsonValue(m_description_for_translator, json[QString("DescriptionForTranslator")]);
    m_description_for_translator_isSet = !json[QString("DescriptionForTranslator")].isNull() && m_description_for_translator_isValid;

    m_do_not_translate_isValid = ::OpenAPI::fromJsonValue(m_do_not_translate, json[QString("DoNotTranslate")]);
    m_do_not_translate_isSet = !json[QString("DoNotTranslate")].isNull() && m_do_not_translate_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_parameter_count_isValid = ::OpenAPI::fromJsonValue(m_parameter_count, json[QString("ParameterCount")]);
    m_parameter_count_isSet = !json[QString("ParameterCount")].isNull() && m_parameter_count_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("Timestamp")]);
    m_timestamp_isSet = !json[QString("Timestamp")].isNull() && m_timestamp_isValid;

    m_translations_isValid = ::OpenAPI::fromJsonValue(m_translations, json[QString("Translations")]);
    m_translations_isSet = !json[QString("Translations")].isNull() && m_translations_isValid;
}

QString OAIGlobalResources_Shared_Models_StringDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGlobalResources_Shared_Models_StringDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_description_for_translator_isSet) {
        obj.insert(QString("DescriptionForTranslator"), ::OpenAPI::toJsonValue(m_description_for_translator));
    }
    if (m_do_not_translate_isSet) {
        obj.insert(QString("DoNotTranslate"), ::OpenAPI::toJsonValue(m_do_not_translate));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_parameter_count_isSet) {
        obj.insert(QString("ParameterCount"), ::OpenAPI::toJsonValue(m_parameter_count));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("Timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_translations.size() > 0) {
        obj.insert(QString("Translations"), ::OpenAPI::toJsonValue(m_translations));
    }
    return obj;
}

QString OAIGlobalResources_Shared_Models_StringDefinition::getDescriptionForTranslator() const {
    return m_description_for_translator;
}
void OAIGlobalResources_Shared_Models_StringDefinition::setDescriptionForTranslator(const QString &description_for_translator) {
    m_description_for_translator = description_for_translator;
    m_description_for_translator_isSet = true;
}

bool OAIGlobalResources_Shared_Models_StringDefinition::is_description_for_translator_Set() const{
    return m_description_for_translator_isSet;
}

bool OAIGlobalResources_Shared_Models_StringDefinition::is_description_for_translator_Valid() const{
    return m_description_for_translator_isValid;
}

bool OAIGlobalResources_Shared_Models_StringDefinition::isDoNotTranslate() const {
    return m_do_not_translate;
}
void OAIGlobalResources_Shared_Models_StringDefinition::setDoNotTranslate(const bool &do_not_translate) {
    m_do_not_translate = do_not_translate;
    m_do_not_translate_isSet = true;
}

bool OAIGlobalResources_Shared_Models_StringDefinition::is_do_not_translate_Set() const{
    return m_do_not_translate_isSet;
}

bool OAIGlobalResources_Shared_Models_StringDefinition::is_do_not_translate_Valid() const{
    return m_do_not_translate_isValid;
}

QString OAIGlobalResources_Shared_Models_StringDefinition::getId() const {
    return m_id;
}
void OAIGlobalResources_Shared_Models_StringDefinition::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGlobalResources_Shared_Models_StringDefinition::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGlobalResources_Shared_Models_StringDefinition::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIGlobalResources_Shared_Models_StringDefinition::getParameterCount() const {
    return m_parameter_count;
}
void OAIGlobalResources_Shared_Models_StringDefinition::setParameterCount(const qint32 &parameter_count) {
    m_parameter_count = parameter_count;
    m_parameter_count_isSet = true;
}

bool OAIGlobalResources_Shared_Models_StringDefinition::is_parameter_count_Set() const{
    return m_parameter_count_isSet;
}

bool OAIGlobalResources_Shared_Models_StringDefinition::is_parameter_count_Valid() const{
    return m_parameter_count_isValid;
}

QByteArray OAIGlobalResources_Shared_Models_StringDefinition::getTimestamp() const {
    return m_timestamp;
}
void OAIGlobalResources_Shared_Models_StringDefinition::setTimestamp(const QByteArray &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIGlobalResources_Shared_Models_StringDefinition::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIGlobalResources_Shared_Models_StringDefinition::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

QList<OAIGlobalResources_Shared_Models_StringTranslation> OAIGlobalResources_Shared_Models_StringDefinition::getTranslations() const {
    return m_translations;
}
void OAIGlobalResources_Shared_Models_StringDefinition::setTranslations(const QList<OAIGlobalResources_Shared_Models_StringTranslation> &translations) {
    m_translations = translations;
    m_translations_isSet = true;
}

bool OAIGlobalResources_Shared_Models_StringDefinition::is_translations_Set() const{
    return m_translations_isSet;
}

bool OAIGlobalResources_Shared_Models_StringDefinition::is_translations_Valid() const{
    return m_translations_isValid;
}

bool OAIGlobalResources_Shared_Models_StringDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_for_translator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_do_not_translate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameter_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_translations.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGlobalResources_Shared_Models_StringDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_description_for_translator_isValid && true;
}

} // namespace OpenAPI
