/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIBundlesApi_H
#define OAI_OAIBundlesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAPI_Models_ApiError.h"
#include "OAIAPI_PagedResponse_UpdateSystem_Models_Bundle_.h"
#include "OAIUpdateSystem_Models_Bundle.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIBundlesApi : public QObject {
    Q_OBJECT

public:
    OAIBundlesApi(const int timeOut = 0);
    ~OAIBundlesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    */
    virtual void bundlesDeleteBundle(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void bundlesGetBundle(const QString &id);

    /**
    * @param[in]  update_group_id QString [optional]
    * @param[in]  active bool [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  bundle_number qint32 [optional]
    */
    virtual void bundlesGetBundles(const ::OpenAPI::OptionalParam<QString> &update_group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &active = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &bundle_number = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  oai_update_system_models_bundle OAIUpdateSystem_Models_Bundle [required]
    */
    virtual void bundlesPostBundle(const OAIUpdateSystem_Models_Bundle &oai_update_system_models_bundle);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_update_system_models_bundle OAIUpdateSystem_Models_Bundle [required]
    */
    virtual void bundlesPutBundle(const QString &id, const OAIUpdateSystem_Models_Bundle &oai_update_system_models_bundle);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void bundlesDeleteBundleCallback(OAIHttpRequestWorker *worker);
    void bundlesGetBundleCallback(OAIHttpRequestWorker *worker);
    void bundlesGetBundlesCallback(OAIHttpRequestWorker *worker);
    void bundlesPostBundleCallback(OAIHttpRequestWorker *worker);
    void bundlesPutBundleCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void bundlesDeleteBundleSignal();
    void bundlesGetBundleSignal(OAIUpdateSystem_Models_Bundle summary);
    void bundlesGetBundlesSignal(OAIAPI_PagedResponse_UpdateSystem_Models_Bundle_ summary);
    void bundlesPostBundleSignal(QString summary);
    void bundlesPutBundleSignal();


    void bundlesDeleteBundleSignalFull(OAIHttpRequestWorker *worker);
    void bundlesGetBundleSignalFull(OAIHttpRequestWorker *worker, OAIUpdateSystem_Models_Bundle summary);
    void bundlesGetBundlesSignalFull(OAIHttpRequestWorker *worker, OAIAPI_PagedResponse_UpdateSystem_Models_Bundle_ summary);
    void bundlesPostBundleSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void bundlesPutBundleSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use bundlesDeleteBundleSignalError() instead")
    void bundlesDeleteBundleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void bundlesDeleteBundleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bundlesGetBundleSignalError() instead")
    void bundlesGetBundleSignalE(OAIUpdateSystem_Models_Bundle summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bundlesGetBundleSignalError(OAIUpdateSystem_Models_Bundle summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bundlesGetBundlesSignalError() instead")
    void bundlesGetBundlesSignalE(OAIAPI_PagedResponse_UpdateSystem_Models_Bundle_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bundlesGetBundlesSignalError(OAIAPI_PagedResponse_UpdateSystem_Models_Bundle_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bundlesPostBundleSignalError() instead")
    void bundlesPostBundleSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bundlesPostBundleSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bundlesPutBundleSignalError() instead")
    void bundlesPutBundleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void bundlesPutBundleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use bundlesDeleteBundleSignalErrorFull() instead")
    void bundlesDeleteBundleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bundlesDeleteBundleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bundlesGetBundleSignalErrorFull() instead")
    void bundlesGetBundleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bundlesGetBundleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bundlesGetBundlesSignalErrorFull() instead")
    void bundlesGetBundlesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bundlesGetBundlesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bundlesPostBundleSignalErrorFull() instead")
    void bundlesPostBundleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bundlesPostBundleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bundlesPutBundleSignalErrorFull() instead")
    void bundlesPutBundleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bundlesPutBundleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
