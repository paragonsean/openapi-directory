/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContentSubmission_Shared_BusinessEntities_ContentSubmissionType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContentSubmission_Shared_BusinessEntities_ContentSubmissionType::OAIContentSubmission_Shared_BusinessEntities_ContentSubmissionType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContentSubmission_Shared_BusinessEntities_ContentSubmissionType::OAIContentSubmission_Shared_BusinessEntities_ContentSubmissionType() {
    this->initializeModel();
}

OAIContentSubmission_Shared_BusinessEntities_ContentSubmissionType::~OAIContentSubmission_Shared_BusinessEntities_ContentSubmissionType() {}

void OAIContentSubmission_Shared_BusinessEntities_ContentSubmissionType::initializeModel() {

    m_attribute_template_isSet = false;
    m_attribute_template_isValid = false;

    m_build_definition_id_isSet = false;
    m_build_definition_id_isValid = false;

    m_category_template_isSet = false;
    m_category_template_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_inventory_package_id_isSet = false;
    m_inventory_package_id_isValid = false;

    m_job_id_isSet = false;
    m_job_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_release_notes_description_isSet = false;
    m_release_notes_description_isValid = false;
}

void OAIContentSubmission_Shared_BusinessEntities_ContentSubmissionType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContentSubmission_Shared_BusinessEntities_ContentSubmissionType::fromJsonObject(QJsonObject json) {

    m_attribute_template_isValid = ::OpenAPI::fromJsonValue(m_attribute_template, json[QString("AttributeTemplate")]);
    m_attribute_template_isSet = !json[QString("AttributeTemplate")].isNull() && m_attribute_template_isValid;

    m_build_definition_id_isValid = ::OpenAPI::fromJsonValue(m_build_definition_id, json[QString("BuildDefinitionID")]);
    m_build_definition_id_isSet = !json[QString("BuildDefinitionID")].isNull() && m_build_definition_id_isValid;

    m_category_template_isValid = ::OpenAPI::fromJsonValue(m_category_template, json[QString("CategoryTemplate")]);
    m_category_template_isSet = !json[QString("CategoryTemplate")].isNull() && m_category_template_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("Enabled")]);
    m_enabled_isSet = !json[QString("Enabled")].isNull() && m_enabled_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("ID")]);
    m_id_isSet = !json[QString("ID")].isNull() && m_id_isValid;

    m_inventory_package_id_isValid = ::OpenAPI::fromJsonValue(m_inventory_package_id, json[QString("InventoryPackageID")]);
    m_inventory_package_id_isSet = !json[QString("InventoryPackageID")].isNull() && m_inventory_package_id_isValid;

    m_job_id_isValid = ::OpenAPI::fromJsonValue(m_job_id, json[QString("JobID")]);
    m_job_id_isSet = !json[QString("JobID")].isNull() && m_job_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_release_notes_description_isValid = ::OpenAPI::fromJsonValue(m_release_notes_description, json[QString("ReleaseNotesDescription")]);
    m_release_notes_description_isSet = !json[QString("ReleaseNotesDescription")].isNull() && m_release_notes_description_isValid;
}

QString OAIContentSubmission_Shared_BusinessEntities_ContentSubmissionType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContentSubmission_Shared_BusinessEntities_ContentSubmissionType::asJsonObject() const {
    QJsonObject obj;
    if (m_attribute_template_isSet) {
        obj.insert(QString("AttributeTemplate"), ::OpenAPI::toJsonValue(m_attribute_template));
    }
    if (m_build_definition_id_isSet) {
        obj.insert(QString("BuildDefinitionID"), ::OpenAPI::toJsonValue(m_build_definition_id));
    }
    if (m_category_template_isSet) {
        obj.insert(QString("CategoryTemplate"), ::OpenAPI::toJsonValue(m_category_template));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("Enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_id_isSet) {
        obj.insert(QString("ID"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_inventory_package_id_isSet) {
        obj.insert(QString("InventoryPackageID"), ::OpenAPI::toJsonValue(m_inventory_package_id));
    }
    if (m_job_id_isSet) {
        obj.insert(QString("JobID"), ::OpenAPI::toJsonValue(m_job_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_release_notes_description_isSet) {
        obj.insert(QString("ReleaseNotesDescription"), ::OpenAPI::toJsonValue(m_release_notes_description));
    }
    return obj;
}

QString OAIContentSubmission_Shared_BusinessEntities_ContentSubmissionType::getAttributeTemplate() const {
    return m_attribute_template;
}
void OAIContentSubmission_Shared_BusinessEntities_ContentSubmissionType::setAttributeTemplate(const QString &attribute_template) {
    m_attribute_template = attribute_template;
    m_attribute_template_isSet = true;
}

bool OAIContentSubmission_Shared_BusinessEntities_ContentSubmissionType::is_attribute_template_Set() const{
    return m_attribute_template_isSet;
}

bool OAIContentSubmission_Shared_BusinessEntities_ContentSubmissionType::is_attribute_template_Valid() const{
    return m_attribute_template_isValid;
}

qint32 OAIContentSubmission_Shared_BusinessEntities_ContentSubmissionType::getBuildDefinitionId() const {
    return m_build_definition_id;
}
void OAIContentSubmission_Shared_BusinessEntities_ContentSubmissionType::setBuildDefinitionId(const qint32 &build_definition_id) {
    m_build_definition_id = build_definition_id;
    m_build_definition_id_isSet = true;
}

bool OAIContentSubmission_Shared_BusinessEntities_ContentSubmissionType::is_build_definition_id_Set() const{
    return m_build_definition_id_isSet;
}

bool OAIContentSubmission_Shared_BusinessEntities_ContentSubmissionType::is_build_definition_id_Valid() const{
    return m_build_definition_id_isValid;
}

QString OAIContentSubmission_Shared_BusinessEntities_ContentSubmissionType::getCategoryTemplate() const {
    return m_category_template;
}
void OAIContentSubmission_Shared_BusinessEntities_ContentSubmissionType::setCategoryTemplate(const QString &category_template) {
    m_category_template = category_template;
    m_category_template_isSet = true;
}

bool OAIContentSubmission_Shared_BusinessEntities_ContentSubmissionType::is_category_template_Set() const{
    return m_category_template_isSet;
}

bool OAIContentSubmission_Shared_BusinessEntities_ContentSubmissionType::is_category_template_Valid() const{
    return m_category_template_isValid;
}

QString OAIContentSubmission_Shared_BusinessEntities_ContentSubmissionType::getDescription() const {
    return m_description;
}
void OAIContentSubmission_Shared_BusinessEntities_ContentSubmissionType::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIContentSubmission_Shared_BusinessEntities_ContentSubmissionType::is_description_Set() const{
    return m_description_isSet;
}

bool OAIContentSubmission_Shared_BusinessEntities_ContentSubmissionType::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIContentSubmission_Shared_BusinessEntities_ContentSubmissionType::isEnabled() const {
    return m_enabled;
}
void OAIContentSubmission_Shared_BusinessEntities_ContentSubmissionType::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIContentSubmission_Shared_BusinessEntities_ContentSubmissionType::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIContentSubmission_Shared_BusinessEntities_ContentSubmissionType::is_enabled_Valid() const{
    return m_enabled_isValid;
}

qint32 OAIContentSubmission_Shared_BusinessEntities_ContentSubmissionType::getId() const {
    return m_id;
}
void OAIContentSubmission_Shared_BusinessEntities_ContentSubmissionType::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIContentSubmission_Shared_BusinessEntities_ContentSubmissionType::is_id_Set() const{
    return m_id_isSet;
}

bool OAIContentSubmission_Shared_BusinessEntities_ContentSubmissionType::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIContentSubmission_Shared_BusinessEntities_ContentSubmissionType::getInventoryPackageId() const {
    return m_inventory_package_id;
}
void OAIContentSubmission_Shared_BusinessEntities_ContentSubmissionType::setInventoryPackageId(const QString &inventory_package_id) {
    m_inventory_package_id = inventory_package_id;
    m_inventory_package_id_isSet = true;
}

bool OAIContentSubmission_Shared_BusinessEntities_ContentSubmissionType::is_inventory_package_id_Set() const{
    return m_inventory_package_id_isSet;
}

bool OAIContentSubmission_Shared_BusinessEntities_ContentSubmissionType::is_inventory_package_id_Valid() const{
    return m_inventory_package_id_isValid;
}

qint32 OAIContentSubmission_Shared_BusinessEntities_ContentSubmissionType::getJobId() const {
    return m_job_id;
}
void OAIContentSubmission_Shared_BusinessEntities_ContentSubmissionType::setJobId(const qint32 &job_id) {
    m_job_id = job_id;
    m_job_id_isSet = true;
}

bool OAIContentSubmission_Shared_BusinessEntities_ContentSubmissionType::is_job_id_Set() const{
    return m_job_id_isSet;
}

bool OAIContentSubmission_Shared_BusinessEntities_ContentSubmissionType::is_job_id_Valid() const{
    return m_job_id_isValid;
}

QString OAIContentSubmission_Shared_BusinessEntities_ContentSubmissionType::getName() const {
    return m_name;
}
void OAIContentSubmission_Shared_BusinessEntities_ContentSubmissionType::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIContentSubmission_Shared_BusinessEntities_ContentSubmissionType::is_name_Set() const{
    return m_name_isSet;
}

bool OAIContentSubmission_Shared_BusinessEntities_ContentSubmissionType::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIContentSubmission_Shared_BusinessEntities_ContentSubmissionType::getReleaseNotesDescription() const {
    return m_release_notes_description;
}
void OAIContentSubmission_Shared_BusinessEntities_ContentSubmissionType::setReleaseNotesDescription(const QString &release_notes_description) {
    m_release_notes_description = release_notes_description;
    m_release_notes_description_isSet = true;
}

bool OAIContentSubmission_Shared_BusinessEntities_ContentSubmissionType::is_release_notes_description_Set() const{
    return m_release_notes_description_isSet;
}

bool OAIContentSubmission_Shared_BusinessEntities_ContentSubmissionType::is_release_notes_description_Valid() const{
    return m_release_notes_description_isValid;
}

bool OAIContentSubmission_Shared_BusinessEntities_ContentSubmissionType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attribute_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_definition_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_package_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_notes_description_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContentSubmission_Shared_BusinessEntities_ContentSubmissionType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_description_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
