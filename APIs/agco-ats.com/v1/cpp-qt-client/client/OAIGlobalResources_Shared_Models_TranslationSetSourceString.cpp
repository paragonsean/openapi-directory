/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGlobalResources_Shared_Models_TranslationSetSourceString.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGlobalResources_Shared_Models_TranslationSetSourceString::OAIGlobalResources_Shared_Models_TranslationSetSourceString(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGlobalResources_Shared_Models_TranslationSetSourceString::OAIGlobalResources_Shared_Models_TranslationSetSourceString() {
    this->initializeModel();
}

OAIGlobalResources_Shared_Models_TranslationSetSourceString::~OAIGlobalResources_Shared_Models_TranslationSetSourceString() {}

void OAIGlobalResources_Shared_Models_TranslationSetSourceString::initializeModel() {

    m_description_for_translator_isSet = false;
    m_description_for_translator_isValid = false;

    m_language_id_isSet = false;
    m_language_id_isValid = false;

    m_string_id_isSet = false;
    m_string_id_isValid = false;

    m_string_value_isSet = false;
    m_string_value_isValid = false;
}

void OAIGlobalResources_Shared_Models_TranslationSetSourceString::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGlobalResources_Shared_Models_TranslationSetSourceString::fromJsonObject(QJsonObject json) {

    m_description_for_translator_isValid = ::OpenAPI::fromJsonValue(m_description_for_translator, json[QString("DescriptionForTranslator")]);
    m_description_for_translator_isSet = !json[QString("DescriptionForTranslator")].isNull() && m_description_for_translator_isValid;

    m_language_id_isValid = ::OpenAPI::fromJsonValue(m_language_id, json[QString("LanguageID")]);
    m_language_id_isSet = !json[QString("LanguageID")].isNull() && m_language_id_isValid;

    m_string_id_isValid = ::OpenAPI::fromJsonValue(m_string_id, json[QString("StringID")]);
    m_string_id_isSet = !json[QString("StringID")].isNull() && m_string_id_isValid;

    m_string_value_isValid = ::OpenAPI::fromJsonValue(m_string_value, json[QString("StringValue")]);
    m_string_value_isSet = !json[QString("StringValue")].isNull() && m_string_value_isValid;
}

QString OAIGlobalResources_Shared_Models_TranslationSetSourceString::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGlobalResources_Shared_Models_TranslationSetSourceString::asJsonObject() const {
    QJsonObject obj;
    if (m_description_for_translator_isSet) {
        obj.insert(QString("DescriptionForTranslator"), ::OpenAPI::toJsonValue(m_description_for_translator));
    }
    if (m_language_id_isSet) {
        obj.insert(QString("LanguageID"), ::OpenAPI::toJsonValue(m_language_id));
    }
    if (m_string_id_isSet) {
        obj.insert(QString("StringID"), ::OpenAPI::toJsonValue(m_string_id));
    }
    if (m_string_value_isSet) {
        obj.insert(QString("StringValue"), ::OpenAPI::toJsonValue(m_string_value));
    }
    return obj;
}

QString OAIGlobalResources_Shared_Models_TranslationSetSourceString::getDescriptionForTranslator() const {
    return m_description_for_translator;
}
void OAIGlobalResources_Shared_Models_TranslationSetSourceString::setDescriptionForTranslator(const QString &description_for_translator) {
    m_description_for_translator = description_for_translator;
    m_description_for_translator_isSet = true;
}

bool OAIGlobalResources_Shared_Models_TranslationSetSourceString::is_description_for_translator_Set() const{
    return m_description_for_translator_isSet;
}

bool OAIGlobalResources_Shared_Models_TranslationSetSourceString::is_description_for_translator_Valid() const{
    return m_description_for_translator_isValid;
}

qint32 OAIGlobalResources_Shared_Models_TranslationSetSourceString::getLanguageId() const {
    return m_language_id;
}
void OAIGlobalResources_Shared_Models_TranslationSetSourceString::setLanguageId(const qint32 &language_id) {
    m_language_id = language_id;
    m_language_id_isSet = true;
}

bool OAIGlobalResources_Shared_Models_TranslationSetSourceString::is_language_id_Set() const{
    return m_language_id_isSet;
}

bool OAIGlobalResources_Shared_Models_TranslationSetSourceString::is_language_id_Valid() const{
    return m_language_id_isValid;
}

QString OAIGlobalResources_Shared_Models_TranslationSetSourceString::getStringId() const {
    return m_string_id;
}
void OAIGlobalResources_Shared_Models_TranslationSetSourceString::setStringId(const QString &string_id) {
    m_string_id = string_id;
    m_string_id_isSet = true;
}

bool OAIGlobalResources_Shared_Models_TranslationSetSourceString::is_string_id_Set() const{
    return m_string_id_isSet;
}

bool OAIGlobalResources_Shared_Models_TranslationSetSourceString::is_string_id_Valid() const{
    return m_string_id_isValid;
}

QString OAIGlobalResources_Shared_Models_TranslationSetSourceString::getStringValue() const {
    return m_string_value;
}
void OAIGlobalResources_Shared_Models_TranslationSetSourceString::setStringValue(const QString &string_value) {
    m_string_value = string_value;
    m_string_value_isSet = true;
}

bool OAIGlobalResources_Shared_Models_TranslationSetSourceString::is_string_value_Set() const{
    return m_string_value_isSet;
}

bool OAIGlobalResources_Shared_Models_TranslationSetSourceString::is_string_value_Valid() const{
    return m_string_value_isValid;
}

bool OAIGlobalResources_Shared_Models_TranslationSetSourceString::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_for_translator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_string_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_string_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGlobalResources_Shared_Models_TranslationSetSourceString::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
