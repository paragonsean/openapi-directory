/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAPI_Models_UserEffectivePermission.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAPI_Models_UserEffectivePermission::OAIAPI_Models_UserEffectivePermission(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAPI_Models_UserEffectivePermission::OAIAPI_Models_UserEffectivePermission() {
    this->initializeModel();
}

OAIAPI_Models_UserEffectivePermission::~OAIAPI_Models_UserEffectivePermission() {}

void OAIAPI_Models_UserEffectivePermission::initializeModel() {

    m_permission_id_isSet = false;
    m_permission_id_isValid = false;

    m_permission_name_isSet = false;
    m_permission_name_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIAPI_Models_UserEffectivePermission::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAPI_Models_UserEffectivePermission::fromJsonObject(QJsonObject json) {

    m_permission_id_isValid = ::OpenAPI::fromJsonValue(m_permission_id, json[QString("PermissionId")]);
    m_permission_id_isSet = !json[QString("PermissionId")].isNull() && m_permission_id_isValid;

    m_permission_name_isValid = ::OpenAPI::fromJsonValue(m_permission_name, json[QString("PermissionName")]);
    m_permission_name_isSet = !json[QString("PermissionName")].isNull() && m_permission_name_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("UserID")]);
    m_user_id_isSet = !json[QString("UserID")].isNull() && m_user_id_isValid;
}

QString OAIAPI_Models_UserEffectivePermission::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAPI_Models_UserEffectivePermission::asJsonObject() const {
    QJsonObject obj;
    if (m_permission_id_isSet) {
        obj.insert(QString("PermissionId"), ::OpenAPI::toJsonValue(m_permission_id));
    }
    if (m_permission_name_isSet) {
        obj.insert(QString("PermissionName"), ::OpenAPI::toJsonValue(m_permission_name));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("UserID"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

qint32 OAIAPI_Models_UserEffectivePermission::getPermissionId() const {
    return m_permission_id;
}
void OAIAPI_Models_UserEffectivePermission::setPermissionId(const qint32 &permission_id) {
    m_permission_id = permission_id;
    m_permission_id_isSet = true;
}

bool OAIAPI_Models_UserEffectivePermission::is_permission_id_Set() const{
    return m_permission_id_isSet;
}

bool OAIAPI_Models_UserEffectivePermission::is_permission_id_Valid() const{
    return m_permission_id_isValid;
}

QString OAIAPI_Models_UserEffectivePermission::getPermissionName() const {
    return m_permission_name;
}
void OAIAPI_Models_UserEffectivePermission::setPermissionName(const QString &permission_name) {
    m_permission_name = permission_name;
    m_permission_name_isSet = true;
}

bool OAIAPI_Models_UserEffectivePermission::is_permission_name_Set() const{
    return m_permission_name_isSet;
}

bool OAIAPI_Models_UserEffectivePermission::is_permission_name_Valid() const{
    return m_permission_name_isValid;
}

qint32 OAIAPI_Models_UserEffectivePermission::getUserId() const {
    return m_user_id;
}
void OAIAPI_Models_UserEffectivePermission::setUserId(const qint32 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIAPI_Models_UserEffectivePermission::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIAPI_Models_UserEffectivePermission::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIAPI_Models_UserEffectivePermission::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_permission_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permission_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAPI_Models_UserEffectivePermission::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
