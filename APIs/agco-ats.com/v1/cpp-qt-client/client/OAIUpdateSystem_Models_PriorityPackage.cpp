/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateSystem_Models_PriorityPackage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateSystem_Models_PriorityPackage::OAIUpdateSystem_Models_PriorityPackage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateSystem_Models_PriorityPackage::OAIUpdateSystem_Models_PriorityPackage() {
    this->initializeModel();
}

OAIUpdateSystem_Models_PriorityPackage::~OAIUpdateSystem_Models_PriorityPackage() {}

void OAIUpdateSystem_Models_PriorityPackage::initializeModel() {

    m_autorun_isSet = false;
    m_autorun_isValid = false;

    m_crc_isSet = false;
    m_crc_isValid = false;

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_package_id_isSet = false;
    m_package_id_isValid = false;

    m_package_type_id_isSet = false;
    m_package_type_id_isValid = false;

    m_previous_version_isSet = false;
    m_previous_version_isValid = false;

    m_priority_package_id_isSet = false;
    m_priority_package_id_isValid = false;

    m_release_date_isSet = false;
    m_release_date_isValid = false;

    m_released_isSet = false;
    m_released_isValid = false;

    m_remove_on_success_isSet = false;
    m_remove_on_success_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_switches_isSet = false;
    m_switches_isValid = false;

    m_time_stamp_isSet = false;
    m_time_stamp_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIUpdateSystem_Models_PriorityPackage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateSystem_Models_PriorityPackage::fromJsonObject(QJsonObject json) {

    m_autorun_isValid = ::OpenAPI::fromJsonValue(m_autorun, json[QString("Autorun")]);
    m_autorun_isSet = !json[QString("Autorun")].isNull() && m_autorun_isValid;

    m_crc_isValid = ::OpenAPI::fromJsonValue(m_crc, json[QString("CRC")]);
    m_crc_isSet = !json[QString("CRC")].isNull() && m_crc_isValid;

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("ClientID")]);
    m_client_id_isSet = !json[QString("ClientID")].isNull() && m_client_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("Notes")]);
    m_notes_isSet = !json[QString("Notes")].isNull() && m_notes_isValid;

    m_package_id_isValid = ::OpenAPI::fromJsonValue(m_package_id, json[QString("PackageID")]);
    m_package_id_isSet = !json[QString("PackageID")].isNull() && m_package_id_isValid;

    m_package_type_id_isValid = ::OpenAPI::fromJsonValue(m_package_type_id, json[QString("PackageTypeID")]);
    m_package_type_id_isSet = !json[QString("PackageTypeID")].isNull() && m_package_type_id_isValid;

    m_previous_version_isValid = ::OpenAPI::fromJsonValue(m_previous_version, json[QString("PreviousVersion")]);
    m_previous_version_isSet = !json[QString("PreviousVersion")].isNull() && m_previous_version_isValid;

    m_priority_package_id_isValid = ::OpenAPI::fromJsonValue(m_priority_package_id, json[QString("PriorityPackageID")]);
    m_priority_package_id_isSet = !json[QString("PriorityPackageID")].isNull() && m_priority_package_id_isValid;

    m_release_date_isValid = ::OpenAPI::fromJsonValue(m_release_date, json[QString("ReleaseDate")]);
    m_release_date_isSet = !json[QString("ReleaseDate")].isNull() && m_release_date_isValid;

    m_released_isValid = ::OpenAPI::fromJsonValue(m_released, json[QString("Released")]);
    m_released_isSet = !json[QString("Released")].isNull() && m_released_isValid;

    m_remove_on_success_isValid = ::OpenAPI::fromJsonValue(m_remove_on_success, json[QString("RemoveOnSuccess")]);
    m_remove_on_success_isSet = !json[QString("RemoveOnSuccess")].isNull() && m_remove_on_success_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("Size")]);
    m_size_isSet = !json[QString("Size")].isNull() && m_size_isValid;

    m_switches_isValid = ::OpenAPI::fromJsonValue(m_switches, json[QString("Switches")]);
    m_switches_isSet = !json[QString("Switches")].isNull() && m_switches_isValid;

    m_time_stamp_isValid = ::OpenAPI::fromJsonValue(m_time_stamp, json[QString("TimeStamp")]);
    m_time_stamp_isSet = !json[QString("TimeStamp")].isNull() && m_time_stamp_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("Url")]);
    m_url_isSet = !json[QString("Url")].isNull() && m_url_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("Version")]);
    m_version_isSet = !json[QString("Version")].isNull() && m_version_isValid;
}

QString OAIUpdateSystem_Models_PriorityPackage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateSystem_Models_PriorityPackage::asJsonObject() const {
    QJsonObject obj;
    if (m_autorun_isSet) {
        obj.insert(QString("Autorun"), ::OpenAPI::toJsonValue(m_autorun));
    }
    if (m_crc_isSet) {
        obj.insert(QString("CRC"), ::OpenAPI::toJsonValue(m_crc));
    }
    if (m_client_id_isSet) {
        obj.insert(QString("ClientID"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_notes_isSet) {
        obj.insert(QString("Notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_package_id_isSet) {
        obj.insert(QString("PackageID"), ::OpenAPI::toJsonValue(m_package_id));
    }
    if (m_package_type_id_isSet) {
        obj.insert(QString("PackageTypeID"), ::OpenAPI::toJsonValue(m_package_type_id));
    }
    if (m_previous_version_isSet) {
        obj.insert(QString("PreviousVersion"), ::OpenAPI::toJsonValue(m_previous_version));
    }
    if (m_priority_package_id_isSet) {
        obj.insert(QString("PriorityPackageID"), ::OpenAPI::toJsonValue(m_priority_package_id));
    }
    if (m_release_date_isSet) {
        obj.insert(QString("ReleaseDate"), ::OpenAPI::toJsonValue(m_release_date));
    }
    if (m_released_isSet) {
        obj.insert(QString("Released"), ::OpenAPI::toJsonValue(m_released));
    }
    if (m_remove_on_success_isSet) {
        obj.insert(QString("RemoveOnSuccess"), ::OpenAPI::toJsonValue(m_remove_on_success));
    }
    if (m_size_isSet) {
        obj.insert(QString("Size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_switches_isSet) {
        obj.insert(QString("Switches"), ::OpenAPI::toJsonValue(m_switches));
    }
    if (m_time_stamp_isSet) {
        obj.insert(QString("TimeStamp"), ::OpenAPI::toJsonValue(m_time_stamp));
    }
    if (m_url_isSet) {
        obj.insert(QString("Url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_version_isSet) {
        obj.insert(QString("Version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

bool OAIUpdateSystem_Models_PriorityPackage::isAutorun() const {
    return m_autorun;
}
void OAIUpdateSystem_Models_PriorityPackage::setAutorun(const bool &autorun) {
    m_autorun = autorun;
    m_autorun_isSet = true;
}

bool OAIUpdateSystem_Models_PriorityPackage::is_autorun_Set() const{
    return m_autorun_isSet;
}

bool OAIUpdateSystem_Models_PriorityPackage::is_autorun_Valid() const{
    return m_autorun_isValid;
}

QString OAIUpdateSystem_Models_PriorityPackage::getCrc() const {
    return m_crc;
}
void OAIUpdateSystem_Models_PriorityPackage::setCrc(const QString &crc) {
    m_crc = crc;
    m_crc_isSet = true;
}

bool OAIUpdateSystem_Models_PriorityPackage::is_crc_Set() const{
    return m_crc_isSet;
}

bool OAIUpdateSystem_Models_PriorityPackage::is_crc_Valid() const{
    return m_crc_isValid;
}

QString OAIUpdateSystem_Models_PriorityPackage::getClientId() const {
    return m_client_id;
}
void OAIUpdateSystem_Models_PriorityPackage::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIUpdateSystem_Models_PriorityPackage::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIUpdateSystem_Models_PriorityPackage::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAIUpdateSystem_Models_PriorityPackage::getDescription() const {
    return m_description;
}
void OAIUpdateSystem_Models_PriorityPackage::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUpdateSystem_Models_PriorityPackage::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUpdateSystem_Models_PriorityPackage::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIUpdateSystem_Models_PriorityPackage::getNotes() const {
    return m_notes;
}
void OAIUpdateSystem_Models_PriorityPackage::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIUpdateSystem_Models_PriorityPackage::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIUpdateSystem_Models_PriorityPackage::is_notes_Valid() const{
    return m_notes_isValid;
}

QString OAIUpdateSystem_Models_PriorityPackage::getPackageId() const {
    return m_package_id;
}
void OAIUpdateSystem_Models_PriorityPackage::setPackageId(const QString &package_id) {
    m_package_id = package_id;
    m_package_id_isSet = true;
}

bool OAIUpdateSystem_Models_PriorityPackage::is_package_id_Set() const{
    return m_package_id_isSet;
}

bool OAIUpdateSystem_Models_PriorityPackage::is_package_id_Valid() const{
    return m_package_id_isValid;
}

QString OAIUpdateSystem_Models_PriorityPackage::getPackageTypeId() const {
    return m_package_type_id;
}
void OAIUpdateSystem_Models_PriorityPackage::setPackageTypeId(const QString &package_type_id) {
    m_package_type_id = package_type_id;
    m_package_type_id_isSet = true;
}

bool OAIUpdateSystem_Models_PriorityPackage::is_package_type_id_Set() const{
    return m_package_type_id_isSet;
}

bool OAIUpdateSystem_Models_PriorityPackage::is_package_type_id_Valid() const{
    return m_package_type_id_isValid;
}

qint32 OAIUpdateSystem_Models_PriorityPackage::getPreviousVersion() const {
    return m_previous_version;
}
void OAIUpdateSystem_Models_PriorityPackage::setPreviousVersion(const qint32 &previous_version) {
    m_previous_version = previous_version;
    m_previous_version_isSet = true;
}

bool OAIUpdateSystem_Models_PriorityPackage::is_previous_version_Set() const{
    return m_previous_version_isSet;
}

bool OAIUpdateSystem_Models_PriorityPackage::is_previous_version_Valid() const{
    return m_previous_version_isValid;
}

QString OAIUpdateSystem_Models_PriorityPackage::getPriorityPackageId() const {
    return m_priority_package_id;
}
void OAIUpdateSystem_Models_PriorityPackage::setPriorityPackageId(const QString &priority_package_id) {
    m_priority_package_id = priority_package_id;
    m_priority_package_id_isSet = true;
}

bool OAIUpdateSystem_Models_PriorityPackage::is_priority_package_id_Set() const{
    return m_priority_package_id_isSet;
}

bool OAIUpdateSystem_Models_PriorityPackage::is_priority_package_id_Valid() const{
    return m_priority_package_id_isValid;
}

QDateTime OAIUpdateSystem_Models_PriorityPackage::getReleaseDate() const {
    return m_release_date;
}
void OAIUpdateSystem_Models_PriorityPackage::setReleaseDate(const QDateTime &release_date) {
    m_release_date = release_date;
    m_release_date_isSet = true;
}

bool OAIUpdateSystem_Models_PriorityPackage::is_release_date_Set() const{
    return m_release_date_isSet;
}

bool OAIUpdateSystem_Models_PriorityPackage::is_release_date_Valid() const{
    return m_release_date_isValid;
}

bool OAIUpdateSystem_Models_PriorityPackage::isReleased() const {
    return m_released;
}
void OAIUpdateSystem_Models_PriorityPackage::setReleased(const bool &released) {
    m_released = released;
    m_released_isSet = true;
}

bool OAIUpdateSystem_Models_PriorityPackage::is_released_Set() const{
    return m_released_isSet;
}

bool OAIUpdateSystem_Models_PriorityPackage::is_released_Valid() const{
    return m_released_isValid;
}

bool OAIUpdateSystem_Models_PriorityPackage::isRemoveOnSuccess() const {
    return m_remove_on_success;
}
void OAIUpdateSystem_Models_PriorityPackage::setRemoveOnSuccess(const bool &remove_on_success) {
    m_remove_on_success = remove_on_success;
    m_remove_on_success_isSet = true;
}

bool OAIUpdateSystem_Models_PriorityPackage::is_remove_on_success_Set() const{
    return m_remove_on_success_isSet;
}

bool OAIUpdateSystem_Models_PriorityPackage::is_remove_on_success_Valid() const{
    return m_remove_on_success_isValid;
}

qint64 OAIUpdateSystem_Models_PriorityPackage::getSize() const {
    return m_size;
}
void OAIUpdateSystem_Models_PriorityPackage::setSize(const qint64 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIUpdateSystem_Models_PriorityPackage::is_size_Set() const{
    return m_size_isSet;
}

bool OAIUpdateSystem_Models_PriorityPackage::is_size_Valid() const{
    return m_size_isValid;
}

QString OAIUpdateSystem_Models_PriorityPackage::getSwitches() const {
    return m_switches;
}
void OAIUpdateSystem_Models_PriorityPackage::setSwitches(const QString &switches) {
    m_switches = switches;
    m_switches_isSet = true;
}

bool OAIUpdateSystem_Models_PriorityPackage::is_switches_Set() const{
    return m_switches_isSet;
}

bool OAIUpdateSystem_Models_PriorityPackage::is_switches_Valid() const{
    return m_switches_isValid;
}

QDateTime OAIUpdateSystem_Models_PriorityPackage::getTimeStamp() const {
    return m_time_stamp;
}
void OAIUpdateSystem_Models_PriorityPackage::setTimeStamp(const QDateTime &time_stamp) {
    m_time_stamp = time_stamp;
    m_time_stamp_isSet = true;
}

bool OAIUpdateSystem_Models_PriorityPackage::is_time_stamp_Set() const{
    return m_time_stamp_isSet;
}

bool OAIUpdateSystem_Models_PriorityPackage::is_time_stamp_Valid() const{
    return m_time_stamp_isValid;
}

QString OAIUpdateSystem_Models_PriorityPackage::getUrl() const {
    return m_url;
}
void OAIUpdateSystem_Models_PriorityPackage::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIUpdateSystem_Models_PriorityPackage::is_url_Set() const{
    return m_url_isSet;
}

bool OAIUpdateSystem_Models_PriorityPackage::is_url_Valid() const{
    return m_url_isValid;
}

qint32 OAIUpdateSystem_Models_PriorityPackage::getVersion() const {
    return m_version;
}
void OAIUpdateSystem_Models_PriorityPackage::setVersion(const qint32 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIUpdateSystem_Models_PriorityPackage::is_version_Set() const{
    return m_version_isSet;
}

bool OAIUpdateSystem_Models_PriorityPackage::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIUpdateSystem_Models_PriorityPackage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_autorun_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_previous_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_package_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_released_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remove_on_success_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_switches_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_stamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateSystem_Models_PriorityPackage::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_client_id_isValid && m_package_id_isValid && true;
}

} // namespace OpenAPI
