/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateSystem_Models_PackageStatusSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateSystem_Models_PackageStatusSummary::OAIUpdateSystem_Models_PackageStatusSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateSystem_Models_PackageStatusSummary::OAIUpdateSystem_Models_PackageStatusSummary() {
    this->initializeModel();
}

OAIUpdateSystem_Models_PackageStatusSummary::~OAIUpdateSystem_Models_PackageStatusSummary() {}

void OAIUpdateSystem_Models_PackageStatusSummary::initializeModel() {

    m_average_download_time_isSet = false;
    m_average_download_time_isValid = false;

    m_average_install_time_isSet = false;
    m_average_install_time_isValid = false;

    m_downloaded_isSet = false;
    m_downloaded_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_installed_isSet = false;
    m_installed_isValid = false;

    m_package_isSet = false;
    m_package_isValid = false;

    m_package_id_isSet = false;
    m_package_id_isValid = false;

    m_package_status_items_isSet = false;
    m_package_status_items_isValid = false;
}

void OAIUpdateSystem_Models_PackageStatusSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateSystem_Models_PackageStatusSummary::fromJsonObject(QJsonObject json) {

    m_average_download_time_isValid = ::OpenAPI::fromJsonValue(m_average_download_time, json[QString("AverageDownloadTime")]);
    m_average_download_time_isSet = !json[QString("AverageDownloadTime")].isNull() && m_average_download_time_isValid;

    m_average_install_time_isValid = ::OpenAPI::fromJsonValue(m_average_install_time, json[QString("AverageInstallTime")]);
    m_average_install_time_isSet = !json[QString("AverageInstallTime")].isNull() && m_average_install_time_isValid;

    m_downloaded_isValid = ::OpenAPI::fromJsonValue(m_downloaded, json[QString("Downloaded")]);
    m_downloaded_isSet = !json[QString("Downloaded")].isNull() && m_downloaded_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("Error")]);
    m_error_isSet = !json[QString("Error")].isNull() && m_error_isValid;

    m_installed_isValid = ::OpenAPI::fromJsonValue(m_installed, json[QString("Installed")]);
    m_installed_isSet = !json[QString("Installed")].isNull() && m_installed_isValid;

    m_package_isValid = ::OpenAPI::fromJsonValue(m_package, json[QString("Package")]);
    m_package_isSet = !json[QString("Package")].isNull() && m_package_isValid;

    m_package_id_isValid = ::OpenAPI::fromJsonValue(m_package_id, json[QString("PackageID")]);
    m_package_id_isSet = !json[QString("PackageID")].isNull() && m_package_id_isValid;

    m_package_status_items_isValid = ::OpenAPI::fromJsonValue(m_package_status_items, json[QString("PackageStatusItems")]);
    m_package_status_items_isSet = !json[QString("PackageStatusItems")].isNull() && m_package_status_items_isValid;
}

QString OAIUpdateSystem_Models_PackageStatusSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateSystem_Models_PackageStatusSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_average_download_time_isSet) {
        obj.insert(QString("AverageDownloadTime"), ::OpenAPI::toJsonValue(m_average_download_time));
    }
    if (m_average_install_time_isSet) {
        obj.insert(QString("AverageInstallTime"), ::OpenAPI::toJsonValue(m_average_install_time));
    }
    if (m_downloaded_isSet) {
        obj.insert(QString("Downloaded"), ::OpenAPI::toJsonValue(m_downloaded));
    }
    if (m_error_isSet) {
        obj.insert(QString("Error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_installed_isSet) {
        obj.insert(QString("Installed"), ::OpenAPI::toJsonValue(m_installed));
    }
    if (m_package_isSet) {
        obj.insert(QString("Package"), ::OpenAPI::toJsonValue(m_package));
    }
    if (m_package_id_isSet) {
        obj.insert(QString("PackageID"), ::OpenAPI::toJsonValue(m_package_id));
    }
    if (m_package_status_items.size() > 0) {
        obj.insert(QString("PackageStatusItems"), ::OpenAPI::toJsonValue(m_package_status_items));
    }
    return obj;
}

QString OAIUpdateSystem_Models_PackageStatusSummary::getAverageDownloadTime() const {
    return m_average_download_time;
}
void OAIUpdateSystem_Models_PackageStatusSummary::setAverageDownloadTime(const QString &average_download_time) {
    m_average_download_time = average_download_time;
    m_average_download_time_isSet = true;
}

bool OAIUpdateSystem_Models_PackageStatusSummary::is_average_download_time_Set() const{
    return m_average_download_time_isSet;
}

bool OAIUpdateSystem_Models_PackageStatusSummary::is_average_download_time_Valid() const{
    return m_average_download_time_isValid;
}

QString OAIUpdateSystem_Models_PackageStatusSummary::getAverageInstallTime() const {
    return m_average_install_time;
}
void OAIUpdateSystem_Models_PackageStatusSummary::setAverageInstallTime(const QString &average_install_time) {
    m_average_install_time = average_install_time;
    m_average_install_time_isSet = true;
}

bool OAIUpdateSystem_Models_PackageStatusSummary::is_average_install_time_Set() const{
    return m_average_install_time_isSet;
}

bool OAIUpdateSystem_Models_PackageStatusSummary::is_average_install_time_Valid() const{
    return m_average_install_time_isValid;
}

qint64 OAIUpdateSystem_Models_PackageStatusSummary::getDownloaded() const {
    return m_downloaded;
}
void OAIUpdateSystem_Models_PackageStatusSummary::setDownloaded(const qint64 &downloaded) {
    m_downloaded = downloaded;
    m_downloaded_isSet = true;
}

bool OAIUpdateSystem_Models_PackageStatusSummary::is_downloaded_Set() const{
    return m_downloaded_isSet;
}

bool OAIUpdateSystem_Models_PackageStatusSummary::is_downloaded_Valid() const{
    return m_downloaded_isValid;
}

qint32 OAIUpdateSystem_Models_PackageStatusSummary::getError() const {
    return m_error;
}
void OAIUpdateSystem_Models_PackageStatusSummary::setError(const qint32 &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIUpdateSystem_Models_PackageStatusSummary::is_error_Set() const{
    return m_error_isSet;
}

bool OAIUpdateSystem_Models_PackageStatusSummary::is_error_Valid() const{
    return m_error_isValid;
}

qint64 OAIUpdateSystem_Models_PackageStatusSummary::getInstalled() const {
    return m_installed;
}
void OAIUpdateSystem_Models_PackageStatusSummary::setInstalled(const qint64 &installed) {
    m_installed = installed;
    m_installed_isSet = true;
}

bool OAIUpdateSystem_Models_PackageStatusSummary::is_installed_Set() const{
    return m_installed_isSet;
}

bool OAIUpdateSystem_Models_PackageStatusSummary::is_installed_Valid() const{
    return m_installed_isValid;
}

QString OAIUpdateSystem_Models_PackageStatusSummary::getPackage() const {
    return m_package;
}
void OAIUpdateSystem_Models_PackageStatusSummary::setPackage(const QString &package) {
    m_package = package;
    m_package_isSet = true;
}

bool OAIUpdateSystem_Models_PackageStatusSummary::is_package_Set() const{
    return m_package_isSet;
}

bool OAIUpdateSystem_Models_PackageStatusSummary::is_package_Valid() const{
    return m_package_isValid;
}

QString OAIUpdateSystem_Models_PackageStatusSummary::getPackageId() const {
    return m_package_id;
}
void OAIUpdateSystem_Models_PackageStatusSummary::setPackageId(const QString &package_id) {
    m_package_id = package_id;
    m_package_id_isSet = true;
}

bool OAIUpdateSystem_Models_PackageStatusSummary::is_package_id_Set() const{
    return m_package_id_isSet;
}

bool OAIUpdateSystem_Models_PackageStatusSummary::is_package_id_Valid() const{
    return m_package_id_isValid;
}

QList<OAIUpdateSystem_Models_PackageStatus> OAIUpdateSystem_Models_PackageStatusSummary::getPackageStatusItems() const {
    return m_package_status_items;
}
void OAIUpdateSystem_Models_PackageStatusSummary::setPackageStatusItems(const QList<OAIUpdateSystem_Models_PackageStatus> &package_status_items) {
    m_package_status_items = package_status_items;
    m_package_status_items_isSet = true;
}

bool OAIUpdateSystem_Models_PackageStatusSummary::is_package_status_items_Set() const{
    return m_package_status_items_isSet;
}

bool OAIUpdateSystem_Models_PackageStatusSummary::is_package_status_items_Valid() const{
    return m_package_status_items_isValid;
}

bool OAIUpdateSystem_Models_PackageStatusSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_average_download_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_average_install_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_downloaded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_installed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_status_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateSystem_Models_PackageStatusSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
