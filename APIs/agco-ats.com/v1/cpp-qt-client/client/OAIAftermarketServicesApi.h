/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAftermarketServicesApi_H
#define OAI_OAIAftermarketServicesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAGCOPowerServices_Models_ECU.h"
#include "OAIAGCOPowerServices_Models_ProductionData.h"
#include "OAIAGCOPowerServices_Models_UserStatus.h"
#include "OAIAPI_Models_ApiError.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAftermarketServicesApi : public QObject {
    Q_OBJECT

public:
    OAIAftermarketServicesApi(const int timeOut = 0);
    ~OAIAftermarketServicesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void aftermarketServicesGetCerts();


    virtual void aftermarketServicesGetConnectionStatus();

    /**
    * @param[in]  serial_number QString [required]
    * @param[in]  edt_instance_id QString [required]
    */
    virtual void aftermarketServicesGetEngineIQACodes(const QString &serial_number, const QString &edt_instance_id);

    /**
    * @param[in]  serial_number QString [required]
    * @param[in]  edt_instance_id QString [required]
    */
    virtual void aftermarketServicesGetProductionData(const QString &serial_number, const QString &edt_instance_id);

    /**
    * @param[in]  voucher_code QString [required]
    * @param[in]  dealer_code QString [required]
    */
    virtual void aftermarketServicesGetUserStatus(const QString &voucher_code, const QString &dealer_code);

    /**
    * @param[in]  serial_number QString [required]
    * @param[in]  edt_instance_id QString [required]
    * @param[in]  oaiagco_power_services_models_ecu OAIAGCOPowerServices_Models_ECU [required]
    */
    virtual void aftermarketServicesPutECU(const QString &serial_number, const QString &edt_instance_id, const OAIAGCOPowerServices_Models_ECU &oaiagco_power_services_models_ecu);

    /**
    * @param[in]  serial_number QString [required]
    * @param[in]  edt_instance_id QString [required]
    * @param[in]  request_body QList<QString> [required]
    */
    virtual void aftermarketServicesPutIQACodes(const QString &serial_number, const QString &edt_instance_id, const QList<QString> &request_body);

    /**
    * @param[in]  oaiagco_power_services_models_user_status OAIAGCOPowerServices_Models_UserStatus [required]
    */
    virtual void aftermarketServicesUpdateUserStatus(const OAIAGCOPowerServices_Models_UserStatus &oaiagco_power_services_models_user_status);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void aftermarketServicesGetCertsCallback(OAIHttpRequestWorker *worker);
    void aftermarketServicesGetConnectionStatusCallback(OAIHttpRequestWorker *worker);
    void aftermarketServicesGetEngineIQACodesCallback(OAIHttpRequestWorker *worker);
    void aftermarketServicesGetProductionDataCallback(OAIHttpRequestWorker *worker);
    void aftermarketServicesGetUserStatusCallback(OAIHttpRequestWorker *worker);
    void aftermarketServicesPutECUCallback(OAIHttpRequestWorker *worker);
    void aftermarketServicesPutIQACodesCallback(OAIHttpRequestWorker *worker);
    void aftermarketServicesUpdateUserStatusCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void aftermarketServicesGetCertsSignal(OAIObject summary);
    void aftermarketServicesGetConnectionStatusSignal(bool summary);
    void aftermarketServicesGetEngineIQACodesSignal(QList<QString> summary);
    void aftermarketServicesGetProductionDataSignal(QList<OAIAGCOPowerServices_Models_ProductionData> summary);
    void aftermarketServicesGetUserStatusSignal(OAIAGCOPowerServices_Models_UserStatus summary);
    void aftermarketServicesPutECUSignal(OAIAGCOPowerServices_Models_ECU summary);
    void aftermarketServicesPutIQACodesSignal(bool summary);
    void aftermarketServicesUpdateUserStatusSignal(bool summary);


    void aftermarketServicesGetCertsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void aftermarketServicesGetConnectionStatusSignalFull(OAIHttpRequestWorker *worker, bool summary);
    void aftermarketServicesGetEngineIQACodesSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void aftermarketServicesGetProductionDataSignalFull(OAIHttpRequestWorker *worker, QList<OAIAGCOPowerServices_Models_ProductionData> summary);
    void aftermarketServicesGetUserStatusSignalFull(OAIHttpRequestWorker *worker, OAIAGCOPowerServices_Models_UserStatus summary);
    void aftermarketServicesPutECUSignalFull(OAIHttpRequestWorker *worker, OAIAGCOPowerServices_Models_ECU summary);
    void aftermarketServicesPutIQACodesSignalFull(OAIHttpRequestWorker *worker, bool summary);
    void aftermarketServicesUpdateUserStatusSignalFull(OAIHttpRequestWorker *worker, bool summary);

    Q_DECL_DEPRECATED_X("Use aftermarketServicesGetCertsSignalError() instead")
    void aftermarketServicesGetCertsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aftermarketServicesGetCertsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aftermarketServicesGetConnectionStatusSignalError() instead")
    void aftermarketServicesGetConnectionStatusSignalE(bool summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aftermarketServicesGetConnectionStatusSignalError(bool summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aftermarketServicesGetEngineIQACodesSignalError() instead")
    void aftermarketServicesGetEngineIQACodesSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aftermarketServicesGetEngineIQACodesSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aftermarketServicesGetProductionDataSignalError() instead")
    void aftermarketServicesGetProductionDataSignalE(QList<OAIAGCOPowerServices_Models_ProductionData> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aftermarketServicesGetProductionDataSignalError(QList<OAIAGCOPowerServices_Models_ProductionData> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aftermarketServicesGetUserStatusSignalError() instead")
    void aftermarketServicesGetUserStatusSignalE(OAIAGCOPowerServices_Models_UserStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aftermarketServicesGetUserStatusSignalError(OAIAGCOPowerServices_Models_UserStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aftermarketServicesPutECUSignalError() instead")
    void aftermarketServicesPutECUSignalE(OAIAGCOPowerServices_Models_ECU summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aftermarketServicesPutECUSignalError(OAIAGCOPowerServices_Models_ECU summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aftermarketServicesPutIQACodesSignalError() instead")
    void aftermarketServicesPutIQACodesSignalE(bool summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aftermarketServicesPutIQACodesSignalError(bool summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aftermarketServicesUpdateUserStatusSignalError() instead")
    void aftermarketServicesUpdateUserStatusSignalE(bool summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aftermarketServicesUpdateUserStatusSignalError(bool summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use aftermarketServicesGetCertsSignalErrorFull() instead")
    void aftermarketServicesGetCertsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aftermarketServicesGetCertsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aftermarketServicesGetConnectionStatusSignalErrorFull() instead")
    void aftermarketServicesGetConnectionStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aftermarketServicesGetConnectionStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aftermarketServicesGetEngineIQACodesSignalErrorFull() instead")
    void aftermarketServicesGetEngineIQACodesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aftermarketServicesGetEngineIQACodesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aftermarketServicesGetProductionDataSignalErrorFull() instead")
    void aftermarketServicesGetProductionDataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aftermarketServicesGetProductionDataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aftermarketServicesGetUserStatusSignalErrorFull() instead")
    void aftermarketServicesGetUserStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aftermarketServicesGetUserStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aftermarketServicesPutECUSignalErrorFull() instead")
    void aftermarketServicesPutECUSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aftermarketServicesPutECUSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aftermarketServicesPutIQACodesSignalErrorFull() instead")
    void aftermarketServicesPutIQACodesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aftermarketServicesPutIQACodesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aftermarketServicesUpdateUserStatusSignalErrorFull() instead")
    void aftermarketServicesUpdateUserStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aftermarketServicesUpdateUserStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
