/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBuildSystem_Shared_DTO_ActivityRun.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBuildSystem_Shared_DTO_ActivityRun::OAIBuildSystem_Shared_DTO_ActivityRun(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBuildSystem_Shared_DTO_ActivityRun::OAIBuildSystem_Shared_DTO_ActivityRun() {
    this->initializeModel();
}

OAIBuildSystem_Shared_DTO_ActivityRun::~OAIBuildSystem_Shared_DTO_ActivityRun() {}

void OAIBuildSystem_Shared_DTO_ActivityRun::initializeModel() {

    m_activity_run_id_isSet = false;
    m_activity_run_id_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_job_activity_id_isSet = false;
    m_job_activity_id_isValid = false;

    m_job_run_id_isSet = false;
    m_job_run_id_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_steps_isSet = false;
    m_steps_isValid = false;
}

void OAIBuildSystem_Shared_DTO_ActivityRun::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBuildSystem_Shared_DTO_ActivityRun::fromJsonObject(QJsonObject json) {

    m_activity_run_id_isValid = ::OpenAPI::fromJsonValue(m_activity_run_id, json[QString("ActivityRunID")]);
    m_activity_run_id_isSet = !json[QString("ActivityRunID")].isNull() && m_activity_run_id_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("EndDate")]);
    m_end_date_isSet = !json[QString("EndDate")].isNull() && m_end_date_isValid;

    m_job_activity_id_isValid = ::OpenAPI::fromJsonValue(m_job_activity_id, json[QString("JobActivityID")]);
    m_job_activity_id_isSet = !json[QString("JobActivityID")].isNull() && m_job_activity_id_isValid;

    m_job_run_id_isValid = ::OpenAPI::fromJsonValue(m_job_run_id, json[QString("JobRunID")]);
    m_job_run_id_isSet = !json[QString("JobRunID")].isNull() && m_job_run_id_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("Parameters")]);
    m_parameters_isSet = !json[QString("Parameters")].isNull() && m_parameters_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("StartDate")]);
    m_start_date_isSet = !json[QString("StartDate")].isNull() && m_start_date_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_steps_isValid = ::OpenAPI::fromJsonValue(m_steps, json[QString("Steps")]);
    m_steps_isSet = !json[QString("Steps")].isNull() && m_steps_isValid;
}

QString OAIBuildSystem_Shared_DTO_ActivityRun::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBuildSystem_Shared_DTO_ActivityRun::asJsonObject() const {
    QJsonObject obj;
    if (m_activity_run_id_isSet) {
        obj.insert(QString("ActivityRunID"), ::OpenAPI::toJsonValue(m_activity_run_id));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("EndDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_job_activity_id_isSet) {
        obj.insert(QString("JobActivityID"), ::OpenAPI::toJsonValue(m_job_activity_id));
    }
    if (m_job_run_id_isSet) {
        obj.insert(QString("JobRunID"), ::OpenAPI::toJsonValue(m_job_run_id));
    }
    if (m_parameters.size() > 0) {
        obj.insert(QString("Parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("StartDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_steps.size() > 0) {
        obj.insert(QString("Steps"), ::OpenAPI::toJsonValue(m_steps));
    }
    return obj;
}

qint32 OAIBuildSystem_Shared_DTO_ActivityRun::getActivityRunId() const {
    return m_activity_run_id;
}
void OAIBuildSystem_Shared_DTO_ActivityRun::setActivityRunId(const qint32 &activity_run_id) {
    m_activity_run_id = activity_run_id;
    m_activity_run_id_isSet = true;
}

bool OAIBuildSystem_Shared_DTO_ActivityRun::is_activity_run_id_Set() const{
    return m_activity_run_id_isSet;
}

bool OAIBuildSystem_Shared_DTO_ActivityRun::is_activity_run_id_Valid() const{
    return m_activity_run_id_isValid;
}

QDateTime OAIBuildSystem_Shared_DTO_ActivityRun::getEndDate() const {
    return m_end_date;
}
void OAIBuildSystem_Shared_DTO_ActivityRun::setEndDate(const QDateTime &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIBuildSystem_Shared_DTO_ActivityRun::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIBuildSystem_Shared_DTO_ActivityRun::is_end_date_Valid() const{
    return m_end_date_isValid;
}

qint32 OAIBuildSystem_Shared_DTO_ActivityRun::getJobActivityId() const {
    return m_job_activity_id;
}
void OAIBuildSystem_Shared_DTO_ActivityRun::setJobActivityId(const qint32 &job_activity_id) {
    m_job_activity_id = job_activity_id;
    m_job_activity_id_isSet = true;
}

bool OAIBuildSystem_Shared_DTO_ActivityRun::is_job_activity_id_Set() const{
    return m_job_activity_id_isSet;
}

bool OAIBuildSystem_Shared_DTO_ActivityRun::is_job_activity_id_Valid() const{
    return m_job_activity_id_isValid;
}

qint32 OAIBuildSystem_Shared_DTO_ActivityRun::getJobRunId() const {
    return m_job_run_id;
}
void OAIBuildSystem_Shared_DTO_ActivityRun::setJobRunId(const qint32 &job_run_id) {
    m_job_run_id = job_run_id;
    m_job_run_id_isSet = true;
}

bool OAIBuildSystem_Shared_DTO_ActivityRun::is_job_run_id_Set() const{
    return m_job_run_id_isSet;
}

bool OAIBuildSystem_Shared_DTO_ActivityRun::is_job_run_id_Valid() const{
    return m_job_run_id_isValid;
}

QList<OAIBuildSystem_Shared_DTO_ParameterValue> OAIBuildSystem_Shared_DTO_ActivityRun::getParameters() const {
    return m_parameters;
}
void OAIBuildSystem_Shared_DTO_ActivityRun::setParameters(const QList<OAIBuildSystem_Shared_DTO_ParameterValue> &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIBuildSystem_Shared_DTO_ActivityRun::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIBuildSystem_Shared_DTO_ActivityRun::is_parameters_Valid() const{
    return m_parameters_isValid;
}

QDateTime OAIBuildSystem_Shared_DTO_ActivityRun::getStartDate() const {
    return m_start_date;
}
void OAIBuildSystem_Shared_DTO_ActivityRun::setStartDate(const QDateTime &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIBuildSystem_Shared_DTO_ActivityRun::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIBuildSystem_Shared_DTO_ActivityRun::is_start_date_Valid() const{
    return m_start_date_isValid;
}

OAIBuildSystem_Shared_DTO_ActivityRunStatus OAIBuildSystem_Shared_DTO_ActivityRun::getStatus() const {
    return m_status;
}
void OAIBuildSystem_Shared_DTO_ActivityRun::setStatus(const OAIBuildSystem_Shared_DTO_ActivityRunStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIBuildSystem_Shared_DTO_ActivityRun::is_status_Set() const{
    return m_status_isSet;
}

bool OAIBuildSystem_Shared_DTO_ActivityRun::is_status_Valid() const{
    return m_status_isValid;
}

QList<OAIBuildSystem_Shared_DTO_ActivityStep> OAIBuildSystem_Shared_DTO_ActivityRun::getSteps() const {
    return m_steps;
}
void OAIBuildSystem_Shared_DTO_ActivityRun::setSteps(const QList<OAIBuildSystem_Shared_DTO_ActivityStep> &steps) {
    m_steps = steps;
    m_steps_isSet = true;
}

bool OAIBuildSystem_Shared_DTO_ActivityRun::is_steps_Set() const{
    return m_steps_isSet;
}

bool OAIBuildSystem_Shared_DTO_ActivityRun::is_steps_Valid() const{
    return m_steps_isValid;
}

bool OAIBuildSystem_Shared_DTO_ActivityRun::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activity_run_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_activity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_run_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_steps.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBuildSystem_Shared_DTO_ActivityRun::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_status_isValid && true;
}

} // namespace OpenAPI
