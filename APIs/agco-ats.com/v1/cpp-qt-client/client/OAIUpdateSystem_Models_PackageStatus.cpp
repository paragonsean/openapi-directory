/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateSystem_Models_PackageStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateSystem_Models_PackageStatus::OAIUpdateSystem_Models_PackageStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateSystem_Models_PackageStatus::OAIUpdateSystem_Models_PackageStatus() {
    this->initializeModel();
}

OAIUpdateSystem_Models_PackageStatus::~OAIUpdateSystem_Models_PackageStatus() {}

void OAIUpdateSystem_Models_PackageStatus::initializeModel() {

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_client_key_isSet = false;
    m_client_key_isValid = false;

    m_download_time_isSet = false;
    m_download_time_isValid = false;

    m_downloaded_isSet = false;
    m_downloaded_isValid = false;

    m_install_completed_isSet = false;
    m_install_completed_isValid = false;

    m_install_result_isSet = false;
    m_install_result_isValid = false;

    m_install_started_isSet = false;
    m_install_started_isValid = false;

    m_install_time_isSet = false;
    m_install_time_isValid = false;

    m_percentage_isSet = false;
    m_percentage_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;
}

void OAIUpdateSystem_Models_PackageStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateSystem_Models_PackageStatus::fromJsonObject(QJsonObject json) {

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("ClientID")]);
    m_client_id_isSet = !json[QString("ClientID")].isNull() && m_client_id_isValid;

    m_client_key_isValid = ::OpenAPI::fromJsonValue(m_client_key, json[QString("ClientKey")]);
    m_client_key_isSet = !json[QString("ClientKey")].isNull() && m_client_key_isValid;

    m_download_time_isValid = ::OpenAPI::fromJsonValue(m_download_time, json[QString("DownloadTime")]);
    m_download_time_isSet = !json[QString("DownloadTime")].isNull() && m_download_time_isValid;

    m_downloaded_isValid = ::OpenAPI::fromJsonValue(m_downloaded, json[QString("Downloaded")]);
    m_downloaded_isSet = !json[QString("Downloaded")].isNull() && m_downloaded_isValid;

    m_install_completed_isValid = ::OpenAPI::fromJsonValue(m_install_completed, json[QString("InstallCompleted")]);
    m_install_completed_isSet = !json[QString("InstallCompleted")].isNull() && m_install_completed_isValid;

    m_install_result_isValid = ::OpenAPI::fromJsonValue(m_install_result, json[QString("InstallResult")]);
    m_install_result_isSet = !json[QString("InstallResult")].isNull() && m_install_result_isValid;

    m_install_started_isValid = ::OpenAPI::fromJsonValue(m_install_started, json[QString("InstallStarted")]);
    m_install_started_isSet = !json[QString("InstallStarted")].isNull() && m_install_started_isValid;

    m_install_time_isValid = ::OpenAPI::fromJsonValue(m_install_time, json[QString("InstallTime")]);
    m_install_time_isSet = !json[QString("InstallTime")].isNull() && m_install_time_isValid;

    m_percentage_isValid = ::OpenAPI::fromJsonValue(m_percentage, json[QString("Percentage")]);
    m_percentage_isSet = !json[QString("Percentage")].isNull() && m_percentage_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("Size")]);
    m_size_isSet = !json[QString("Size")].isNull() && m_size_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("Timestamp")]);
    m_timestamp_isSet = !json[QString("Timestamp")].isNull() && m_timestamp_isValid;
}

QString OAIUpdateSystem_Models_PackageStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateSystem_Models_PackageStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_client_id_isSet) {
        obj.insert(QString("ClientID"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_client_key_isSet) {
        obj.insert(QString("ClientKey"), ::OpenAPI::toJsonValue(m_client_key));
    }
    if (m_download_time_isSet) {
        obj.insert(QString("DownloadTime"), ::OpenAPI::toJsonValue(m_download_time));
    }
    if (m_downloaded_isSet) {
        obj.insert(QString("Downloaded"), ::OpenAPI::toJsonValue(m_downloaded));
    }
    if (m_install_completed_isSet) {
        obj.insert(QString("InstallCompleted"), ::OpenAPI::toJsonValue(m_install_completed));
    }
    if (m_install_result_isSet) {
        obj.insert(QString("InstallResult"), ::OpenAPI::toJsonValue(m_install_result));
    }
    if (m_install_started_isSet) {
        obj.insert(QString("InstallStarted"), ::OpenAPI::toJsonValue(m_install_started));
    }
    if (m_install_time_isSet) {
        obj.insert(QString("InstallTime"), ::OpenAPI::toJsonValue(m_install_time));
    }
    if (m_percentage_isSet) {
        obj.insert(QString("Percentage"), ::OpenAPI::toJsonValue(m_percentage));
    }
    if (m_size_isSet) {
        obj.insert(QString("Size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("Timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    return obj;
}

QString OAIUpdateSystem_Models_PackageStatus::getClientId() const {
    return m_client_id;
}
void OAIUpdateSystem_Models_PackageStatus::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIUpdateSystem_Models_PackageStatus::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIUpdateSystem_Models_PackageStatus::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAIUpdateSystem_Models_PackageStatus::getClientKey() const {
    return m_client_key;
}
void OAIUpdateSystem_Models_PackageStatus::setClientKey(const QString &client_key) {
    m_client_key = client_key;
    m_client_key_isSet = true;
}

bool OAIUpdateSystem_Models_PackageStatus::is_client_key_Set() const{
    return m_client_key_isSet;
}

bool OAIUpdateSystem_Models_PackageStatus::is_client_key_Valid() const{
    return m_client_key_isValid;
}

QString OAIUpdateSystem_Models_PackageStatus::getDownloadTime() const {
    return m_download_time;
}
void OAIUpdateSystem_Models_PackageStatus::setDownloadTime(const QString &download_time) {
    m_download_time = download_time;
    m_download_time_isSet = true;
}

bool OAIUpdateSystem_Models_PackageStatus::is_download_time_Set() const{
    return m_download_time_isSet;
}

bool OAIUpdateSystem_Models_PackageStatus::is_download_time_Valid() const{
    return m_download_time_isValid;
}

QString OAIUpdateSystem_Models_PackageStatus::getDownloaded() const {
    return m_downloaded;
}
void OAIUpdateSystem_Models_PackageStatus::setDownloaded(const QString &downloaded) {
    m_downloaded = downloaded;
    m_downloaded_isSet = true;
}

bool OAIUpdateSystem_Models_PackageStatus::is_downloaded_Set() const{
    return m_downloaded_isSet;
}

bool OAIUpdateSystem_Models_PackageStatus::is_downloaded_Valid() const{
    return m_downloaded_isValid;
}

QString OAIUpdateSystem_Models_PackageStatus::getInstallCompleted() const {
    return m_install_completed;
}
void OAIUpdateSystem_Models_PackageStatus::setInstallCompleted(const QString &install_completed) {
    m_install_completed = install_completed;
    m_install_completed_isSet = true;
}

bool OAIUpdateSystem_Models_PackageStatus::is_install_completed_Set() const{
    return m_install_completed_isSet;
}

bool OAIUpdateSystem_Models_PackageStatus::is_install_completed_Valid() const{
    return m_install_completed_isValid;
}

QString OAIUpdateSystem_Models_PackageStatus::getInstallResult() const {
    return m_install_result;
}
void OAIUpdateSystem_Models_PackageStatus::setInstallResult(const QString &install_result) {
    m_install_result = install_result;
    m_install_result_isSet = true;
}

bool OAIUpdateSystem_Models_PackageStatus::is_install_result_Set() const{
    return m_install_result_isSet;
}

bool OAIUpdateSystem_Models_PackageStatus::is_install_result_Valid() const{
    return m_install_result_isValid;
}

QString OAIUpdateSystem_Models_PackageStatus::getInstallStarted() const {
    return m_install_started;
}
void OAIUpdateSystem_Models_PackageStatus::setInstallStarted(const QString &install_started) {
    m_install_started = install_started;
    m_install_started_isSet = true;
}

bool OAIUpdateSystem_Models_PackageStatus::is_install_started_Set() const{
    return m_install_started_isSet;
}

bool OAIUpdateSystem_Models_PackageStatus::is_install_started_Valid() const{
    return m_install_started_isValid;
}

QString OAIUpdateSystem_Models_PackageStatus::getInstallTime() const {
    return m_install_time;
}
void OAIUpdateSystem_Models_PackageStatus::setInstallTime(const QString &install_time) {
    m_install_time = install_time;
    m_install_time_isSet = true;
}

bool OAIUpdateSystem_Models_PackageStatus::is_install_time_Set() const{
    return m_install_time_isSet;
}

bool OAIUpdateSystem_Models_PackageStatus::is_install_time_Valid() const{
    return m_install_time_isValid;
}

QString OAIUpdateSystem_Models_PackageStatus::getPercentage() const {
    return m_percentage;
}
void OAIUpdateSystem_Models_PackageStatus::setPercentage(const QString &percentage) {
    m_percentage = percentage;
    m_percentage_isSet = true;
}

bool OAIUpdateSystem_Models_PackageStatus::is_percentage_Set() const{
    return m_percentage_isSet;
}

bool OAIUpdateSystem_Models_PackageStatus::is_percentage_Valid() const{
    return m_percentage_isValid;
}

QString OAIUpdateSystem_Models_PackageStatus::getSize() const {
    return m_size;
}
void OAIUpdateSystem_Models_PackageStatus::setSize(const QString &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIUpdateSystem_Models_PackageStatus::is_size_Set() const{
    return m_size_isSet;
}

bool OAIUpdateSystem_Models_PackageStatus::is_size_Valid() const{
    return m_size_isValid;
}

QDateTime OAIUpdateSystem_Models_PackageStatus::getTimestamp() const {
    return m_timestamp;
}
void OAIUpdateSystem_Models_PackageStatus::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIUpdateSystem_Models_PackageStatus::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIUpdateSystem_Models_PackageStatus::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

bool OAIUpdateSystem_Models_PackageStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_download_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_downloaded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_install_completed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_install_result_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_install_started_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_install_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateSystem_Models_PackageStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
