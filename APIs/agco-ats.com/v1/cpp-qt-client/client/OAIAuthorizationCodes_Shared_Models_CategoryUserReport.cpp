/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuthorizationCodes_Shared_Models_CategoryUserReport.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuthorizationCodes_Shared_Models_CategoryUserReport::OAIAuthorizationCodes_Shared_Models_CategoryUserReport(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuthorizationCodes_Shared_Models_CategoryUserReport::OAIAuthorizationCodes_Shared_Models_CategoryUserReport() {
    this->initializeModel();
}

OAIAuthorizationCodes_Shared_Models_CategoryUserReport::~OAIAuthorizationCodes_Shared_Models_CategoryUserReport() {}

void OAIAuthorizationCodes_Shared_Models_CategoryUserReport::initializeModel() {

    m_categories_isSet = false;
    m_categories_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIAuthorizationCodes_Shared_Models_CategoryUserReport::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuthorizationCodes_Shared_Models_CategoryUserReport::fromJsonObject(QJsonObject json) {

    m_categories_isValid = ::OpenAPI::fromJsonValue(m_categories, json[QString("Categories")]);
    m_categories_isSet = !json[QString("Categories")].isNull() && m_categories_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("User")]);
    m_user_isSet = !json[QString("User")].isNull() && m_user_isValid;
}

QString OAIAuthorizationCodes_Shared_Models_CategoryUserReport::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuthorizationCodes_Shared_Models_CategoryUserReport::asJsonObject() const {
    QJsonObject obj;
    if (m_categories.size() > 0) {
        obj.insert(QString("Categories"), ::OpenAPI::toJsonValue(m_categories));
    }
    if (m_user.isSet()) {
        obj.insert(QString("User"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QList<OAIAuthorizationCodes_Shared_Models_Category> OAIAuthorizationCodes_Shared_Models_CategoryUserReport::getCategories() const {
    return m_categories;
}
void OAIAuthorizationCodes_Shared_Models_CategoryUserReport::setCategories(const QList<OAIAuthorizationCodes_Shared_Models_Category> &categories) {
    m_categories = categories;
    m_categories_isSet = true;
}

bool OAIAuthorizationCodes_Shared_Models_CategoryUserReport::is_categories_Set() const{
    return m_categories_isSet;
}

bool OAIAuthorizationCodes_Shared_Models_CategoryUserReport::is_categories_Valid() const{
    return m_categories_isValid;
}

OAIAuthorizationCodes_Shared_Models_AuthorizationCodeUser OAIAuthorizationCodes_Shared_Models_CategoryUserReport::getUser() const {
    return m_user;
}
void OAIAuthorizationCodes_Shared_Models_CategoryUserReport::setUser(const OAIAuthorizationCodes_Shared_Models_AuthorizationCodeUser &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIAuthorizationCodes_Shared_Models_CategoryUserReport::is_user_Set() const{
    return m_user_isSet;
}

bool OAIAuthorizationCodes_Shared_Models_CategoryUserReport::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIAuthorizationCodes_Shared_Models_CategoryUserReport::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuthorizationCodes_Shared_Models_CategoryUserReport::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
