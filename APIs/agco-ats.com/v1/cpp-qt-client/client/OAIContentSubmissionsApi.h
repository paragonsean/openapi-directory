/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIContentSubmissionsApi_H
#define OAI_OAIContentSubmissionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAPI_Models_ApiError.h"
#include "OAIAPI_PagedResponse_ContentSubmission_Shared_BusinessEntities_ContentSubmissionAttribute_.h"
#include "OAIAPI_PagedResponse_ContentSubmission_Shared_BusinessEntities_ContentSubmission_.h"
#include "OAIBuildSystem_Shared_Interfaces_IJobRun.h"
#include "OAIContentSubmission_Shared_BusinessEntities_ContentSubmission.h"
#include "OAIContentSubmission_Shared_BusinessEntities_ContentSubmissionAttribute.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIContentSubmissionsApi : public QObject {
    Q_OBJECT

public:
    OAIContentSubmissionsApi(const int timeOut = 0);
    ~OAIContentSubmissionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  content_submission_id qint32 [required]
    */
    virtual void contentSubmissionsDeleteContentSubmission(const qint32 &content_submission_id);

    /**
    * @param[in]  content_submission_attribute_id qint32 [required]
    */
    virtual void contentSubmissionsDeleteContentSubmissionAttribute(const qint32 &content_submission_attribute_id);

    /**
    * @param[in]  content_submission_id qint32 [required]
    * @param[in]  include_attributes QString [optional]
    */
    virtual void contentSubmissionsGetContentSubmission(const qint32 &content_submission_id, const ::OpenAPI::OptionalParam<QString> &include_attributes = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  content_submission_id qint32 [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  name QString [optional]
    */
    virtual void contentSubmissionsGetContentSubmissionAttributes(const qint32 &content_submission_id, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  content_submission_id qint32 [required]
    * @param[in]  include_activity_run_details bool [optional]
    */
    virtual void contentSubmissionsGetContentSubmissionStatus(const qint32 &content_submission_id, const ::OpenAPI::OptionalParam<bool> &include_activity_run_details = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  user_id qint32 [optional]
    * @param[in]  content_definition_id qint32 [optional]
    * @param[in]  include_attributes QString [optional]
    * @param[in]  release_id qint32 [optional]
    * @param[in]  type_id qint32 [optional]
    * @param[in]  version qint32 [optional]
    * @param[in]  include_definition bool [optional]
    */
    virtual void contentSubmissionsGetContentSubmissions(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &user_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &content_definition_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &include_attributes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &release_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &type_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &version = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &include_definition = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  oai_content_submission_shared_business_entities_content_submission OAIContentSubmission_Shared_BusinessEntities_ContentSubmission [required]
    */
    virtual void contentSubmissionsPostContentSubmission(const OAIContentSubmission_Shared_BusinessEntities_ContentSubmission &oai_content_submission_shared_business_entities_content_submission);

    /**
    * @param[in]  content_submission_id qint32 [required]
    * @param[in]  oai_content_submission_shared_business_entities_content_submission_attribute OAIContentSubmission_Shared_BusinessEntities_ContentSubmissionAttribute [required]
    */
    virtual void contentSubmissionsPostContentSubmissionAttribute(const qint32 &content_submission_id, const OAIContentSubmission_Shared_BusinessEntities_ContentSubmissionAttribute &oai_content_submission_shared_business_entities_content_submission_attribute);

    /**
    * @param[in]  content_submission_id qint32 [required]
    * @param[in]  oai_content_submission_shared_business_entities_content_submission_attribute QList<OAIContentSubmission_Shared_BusinessEntities_ContentSubmissionAttribute> [required]
    */
    virtual void contentSubmissionsPostContentSubmissionAttributes(const qint32 &content_submission_id, const QList<OAIContentSubmission_Shared_BusinessEntities_ContentSubmissionAttribute> &oai_content_submission_shared_business_entities_content_submission_attribute);

    /**
    * @param[in]  content_submission_id qint32 [required]
    * @param[in]  oai_content_submission_shared_business_entities_content_submission OAIContentSubmission_Shared_BusinessEntities_ContentSubmission [required]
    */
    virtual void contentSubmissionsPutContentSubmission(const qint32 &content_submission_id, const OAIContentSubmission_Shared_BusinessEntities_ContentSubmission &oai_content_submission_shared_business_entities_content_submission);

    /**
    * @param[in]  content_submission_attribute_id qint32 [required]
    * @param[in]  oai_content_submission_shared_business_entities_content_submission_attribute OAIContentSubmission_Shared_BusinessEntities_ContentSubmissionAttribute [required]
    */
    virtual void contentSubmissionsPutContentSubmissionAttributeAsync(const qint32 &content_submission_attribute_id, const OAIContentSubmission_Shared_BusinessEntities_ContentSubmissionAttribute &oai_content_submission_shared_business_entities_content_submission_attribute);

    /**
    * @param[in]  oai_content_submission_shared_business_entities_content_submission_attribute QList<OAIContentSubmission_Shared_BusinessEntities_ContentSubmissionAttribute> [required]
    */
    virtual void contentSubmissionsPutContentSubmissionAttributes(const QList<OAIContentSubmission_Shared_BusinessEntities_ContentSubmissionAttribute> &oai_content_submission_shared_business_entities_content_submission_attribute);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void contentSubmissionsDeleteContentSubmissionCallback(OAIHttpRequestWorker *worker);
    void contentSubmissionsDeleteContentSubmissionAttributeCallback(OAIHttpRequestWorker *worker);
    void contentSubmissionsGetContentSubmissionCallback(OAIHttpRequestWorker *worker);
    void contentSubmissionsGetContentSubmissionAttributesCallback(OAIHttpRequestWorker *worker);
    void contentSubmissionsGetContentSubmissionStatusCallback(OAIHttpRequestWorker *worker);
    void contentSubmissionsGetContentSubmissionsCallback(OAIHttpRequestWorker *worker);
    void contentSubmissionsPostContentSubmissionCallback(OAIHttpRequestWorker *worker);
    void contentSubmissionsPostContentSubmissionAttributeCallback(OAIHttpRequestWorker *worker);
    void contentSubmissionsPostContentSubmissionAttributesCallback(OAIHttpRequestWorker *worker);
    void contentSubmissionsPutContentSubmissionCallback(OAIHttpRequestWorker *worker);
    void contentSubmissionsPutContentSubmissionAttributeAsyncCallback(OAIHttpRequestWorker *worker);
    void contentSubmissionsPutContentSubmissionAttributesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void contentSubmissionsDeleteContentSubmissionSignal();
    void contentSubmissionsDeleteContentSubmissionAttributeSignal();
    void contentSubmissionsGetContentSubmissionSignal(OAIContentSubmission_Shared_BusinessEntities_ContentSubmission summary);
    void contentSubmissionsGetContentSubmissionAttributesSignal(OAIAPI_PagedResponse_ContentSubmission_Shared_BusinessEntities_ContentSubmissionAttribute_ summary);
    void contentSubmissionsGetContentSubmissionStatusSignal(OAIBuildSystem_Shared_Interfaces_IJobRun summary);
    void contentSubmissionsGetContentSubmissionsSignal(OAIAPI_PagedResponse_ContentSubmission_Shared_BusinessEntities_ContentSubmission_ summary);
    void contentSubmissionsPostContentSubmissionSignal(qint32 summary);
    void contentSubmissionsPostContentSubmissionAttributeSignal(qint32 summary);
    void contentSubmissionsPostContentSubmissionAttributesSignal();
    void contentSubmissionsPutContentSubmissionSignal();
    void contentSubmissionsPutContentSubmissionAttributeAsyncSignal();
    void contentSubmissionsPutContentSubmissionAttributesSignal();


    void contentSubmissionsDeleteContentSubmissionSignalFull(OAIHttpRequestWorker *worker);
    void contentSubmissionsDeleteContentSubmissionAttributeSignalFull(OAIHttpRequestWorker *worker);
    void contentSubmissionsGetContentSubmissionSignalFull(OAIHttpRequestWorker *worker, OAIContentSubmission_Shared_BusinessEntities_ContentSubmission summary);
    void contentSubmissionsGetContentSubmissionAttributesSignalFull(OAIHttpRequestWorker *worker, OAIAPI_PagedResponse_ContentSubmission_Shared_BusinessEntities_ContentSubmissionAttribute_ summary);
    void contentSubmissionsGetContentSubmissionStatusSignalFull(OAIHttpRequestWorker *worker, OAIBuildSystem_Shared_Interfaces_IJobRun summary);
    void contentSubmissionsGetContentSubmissionsSignalFull(OAIHttpRequestWorker *worker, OAIAPI_PagedResponse_ContentSubmission_Shared_BusinessEntities_ContentSubmission_ summary);
    void contentSubmissionsPostContentSubmissionSignalFull(OAIHttpRequestWorker *worker, qint32 summary);
    void contentSubmissionsPostContentSubmissionAttributeSignalFull(OAIHttpRequestWorker *worker, qint32 summary);
    void contentSubmissionsPostContentSubmissionAttributesSignalFull(OAIHttpRequestWorker *worker);
    void contentSubmissionsPutContentSubmissionSignalFull(OAIHttpRequestWorker *worker);
    void contentSubmissionsPutContentSubmissionAttributeAsyncSignalFull(OAIHttpRequestWorker *worker);
    void contentSubmissionsPutContentSubmissionAttributesSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use contentSubmissionsDeleteContentSubmissionSignalError() instead")
    void contentSubmissionsDeleteContentSubmissionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void contentSubmissionsDeleteContentSubmissionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contentSubmissionsDeleteContentSubmissionAttributeSignalError() instead")
    void contentSubmissionsDeleteContentSubmissionAttributeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void contentSubmissionsDeleteContentSubmissionAttributeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contentSubmissionsGetContentSubmissionSignalError() instead")
    void contentSubmissionsGetContentSubmissionSignalE(OAIContentSubmission_Shared_BusinessEntities_ContentSubmission summary, QNetworkReply::NetworkError error_type, QString error_str);
    void contentSubmissionsGetContentSubmissionSignalError(OAIContentSubmission_Shared_BusinessEntities_ContentSubmission summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contentSubmissionsGetContentSubmissionAttributesSignalError() instead")
    void contentSubmissionsGetContentSubmissionAttributesSignalE(OAIAPI_PagedResponse_ContentSubmission_Shared_BusinessEntities_ContentSubmissionAttribute_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void contentSubmissionsGetContentSubmissionAttributesSignalError(OAIAPI_PagedResponse_ContentSubmission_Shared_BusinessEntities_ContentSubmissionAttribute_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contentSubmissionsGetContentSubmissionStatusSignalError() instead")
    void contentSubmissionsGetContentSubmissionStatusSignalE(OAIBuildSystem_Shared_Interfaces_IJobRun summary, QNetworkReply::NetworkError error_type, QString error_str);
    void contentSubmissionsGetContentSubmissionStatusSignalError(OAIBuildSystem_Shared_Interfaces_IJobRun summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contentSubmissionsGetContentSubmissionsSignalError() instead")
    void contentSubmissionsGetContentSubmissionsSignalE(OAIAPI_PagedResponse_ContentSubmission_Shared_BusinessEntities_ContentSubmission_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void contentSubmissionsGetContentSubmissionsSignalError(OAIAPI_PagedResponse_ContentSubmission_Shared_BusinessEntities_ContentSubmission_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contentSubmissionsPostContentSubmissionSignalError() instead")
    void contentSubmissionsPostContentSubmissionSignalE(qint32 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void contentSubmissionsPostContentSubmissionSignalError(qint32 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contentSubmissionsPostContentSubmissionAttributeSignalError() instead")
    void contentSubmissionsPostContentSubmissionAttributeSignalE(qint32 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void contentSubmissionsPostContentSubmissionAttributeSignalError(qint32 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contentSubmissionsPostContentSubmissionAttributesSignalError() instead")
    void contentSubmissionsPostContentSubmissionAttributesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void contentSubmissionsPostContentSubmissionAttributesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contentSubmissionsPutContentSubmissionSignalError() instead")
    void contentSubmissionsPutContentSubmissionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void contentSubmissionsPutContentSubmissionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contentSubmissionsPutContentSubmissionAttributeAsyncSignalError() instead")
    void contentSubmissionsPutContentSubmissionAttributeAsyncSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void contentSubmissionsPutContentSubmissionAttributeAsyncSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contentSubmissionsPutContentSubmissionAttributesSignalError() instead")
    void contentSubmissionsPutContentSubmissionAttributesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void contentSubmissionsPutContentSubmissionAttributesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use contentSubmissionsDeleteContentSubmissionSignalErrorFull() instead")
    void contentSubmissionsDeleteContentSubmissionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contentSubmissionsDeleteContentSubmissionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contentSubmissionsDeleteContentSubmissionAttributeSignalErrorFull() instead")
    void contentSubmissionsDeleteContentSubmissionAttributeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contentSubmissionsDeleteContentSubmissionAttributeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contentSubmissionsGetContentSubmissionSignalErrorFull() instead")
    void contentSubmissionsGetContentSubmissionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contentSubmissionsGetContentSubmissionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contentSubmissionsGetContentSubmissionAttributesSignalErrorFull() instead")
    void contentSubmissionsGetContentSubmissionAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contentSubmissionsGetContentSubmissionAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contentSubmissionsGetContentSubmissionStatusSignalErrorFull() instead")
    void contentSubmissionsGetContentSubmissionStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contentSubmissionsGetContentSubmissionStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contentSubmissionsGetContentSubmissionsSignalErrorFull() instead")
    void contentSubmissionsGetContentSubmissionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contentSubmissionsGetContentSubmissionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contentSubmissionsPostContentSubmissionSignalErrorFull() instead")
    void contentSubmissionsPostContentSubmissionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contentSubmissionsPostContentSubmissionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contentSubmissionsPostContentSubmissionAttributeSignalErrorFull() instead")
    void contentSubmissionsPostContentSubmissionAttributeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contentSubmissionsPostContentSubmissionAttributeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contentSubmissionsPostContentSubmissionAttributesSignalErrorFull() instead")
    void contentSubmissionsPostContentSubmissionAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contentSubmissionsPostContentSubmissionAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contentSubmissionsPutContentSubmissionSignalErrorFull() instead")
    void contentSubmissionsPutContentSubmissionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contentSubmissionsPutContentSubmissionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contentSubmissionsPutContentSubmissionAttributeAsyncSignalErrorFull() instead")
    void contentSubmissionsPutContentSubmissionAttributeAsyncSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contentSubmissionsPutContentSubmissionAttributeAsyncSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contentSubmissionsPutContentSubmissionAttributesSignalErrorFull() instead")
    void contentSubmissionsPutContentSubmissionAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contentSubmissionsPutContentSubmissionAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
