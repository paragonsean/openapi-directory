/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateGroupSubscriptionsApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIUpdateGroupSubscriptionsApi::OAIUpdateGroupSubscriptionsApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIUpdateGroupSubscriptionsApi::~OAIUpdateGroupSubscriptionsApi() {
}

void OAIUpdateGroupSubscriptionsApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://secure.agco-ats.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("updateGroupSubscriptionsDeleteUpdateGroupSubscription", defaultConf);
    _serverIndices.insert("updateGroupSubscriptionsDeleteUpdateGroupSubscription", 0);
    _serverConfigs.insert("updateGroupSubscriptionsGetUpdateGroupSubscription", defaultConf);
    _serverIndices.insert("updateGroupSubscriptionsGetUpdateGroupSubscription", 0);
    _serverConfigs.insert("updateGroupSubscriptionsGetUpdateGroupSubscriptions", defaultConf);
    _serverIndices.insert("updateGroupSubscriptionsGetUpdateGroupSubscriptions", 0);
    _serverConfigs.insert("updateGroupSubscriptionsPostUpdateGroupSubscription", defaultConf);
    _serverIndices.insert("updateGroupSubscriptionsPostUpdateGroupSubscription", 0);
    _serverConfigs.insert("updateGroupSubscriptionsPostUpdateGroupSubscriptions", defaultConf);
    _serverIndices.insert("updateGroupSubscriptionsPostUpdateGroupSubscriptions", 0);
    _serverConfigs.insert("updateGroupSubscriptionsPutUpdateGroupSubscription", defaultConf);
    _serverIndices.insert("updateGroupSubscriptionsPutUpdateGroupSubscription", 0);
    _serverConfigs.insert("updateGroupSubscriptionsPutUpdateGroupSubscriptions", defaultConf);
    _serverIndices.insert("updateGroupSubscriptionsPutUpdateGroupSubscriptions", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIUpdateGroupSubscriptionsApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIUpdateGroupSubscriptionsApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIUpdateGroupSubscriptionsApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIUpdateGroupSubscriptionsApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIUpdateGroupSubscriptionsApi::setUsername(const QString &username) {
    _username = username;
}

void OAIUpdateGroupSubscriptionsApi::setPassword(const QString &password) {
    _password = password;
}


void OAIUpdateGroupSubscriptionsApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIUpdateGroupSubscriptionsApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIUpdateGroupSubscriptionsApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIUpdateGroupSubscriptionsApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIUpdateGroupSubscriptionsApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIUpdateGroupSubscriptionsApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIUpdateGroupSubscriptionsApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIUpdateGroupSubscriptionsApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIUpdateGroupSubscriptionsApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIUpdateGroupSubscriptionsApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIUpdateGroupSubscriptionsApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIUpdateGroupSubscriptionsApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIUpdateGroupSubscriptionsApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIUpdateGroupSubscriptionsApi::updateGroupSubscriptionsDeleteUpdateGroupSubscription(const qint32 &update_group_subscription_id) {
    QString fullPath = QString(_serverConfigs["updateGroupSubscriptionsDeleteUpdateGroupSubscription"][_serverIndices.value("updateGroupSubscriptionsDeleteUpdateGroupSubscription")].URL()+"/api/v2/UpdateGroupSubscriptions/{UpdateGroupSubscriptionID}");
    
    
    {
        QString update_group_subscription_idPathParam("{");
        update_group_subscription_idPathParam.append("UpdateGroupSubscriptionID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "UpdateGroupSubscriptionID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"UpdateGroupSubscriptionID"+pathSuffix : pathPrefix;
        fullPath.replace(update_group_subscription_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(update_group_subscription_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUpdateGroupSubscriptionsApi::updateGroupSubscriptionsDeleteUpdateGroupSubscriptionCallback);
    connect(this, &OAIUpdateGroupSubscriptionsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIUpdateGroupSubscriptionsApi::updateGroupSubscriptionsDeleteUpdateGroupSubscriptionCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updateGroupSubscriptionsDeleteUpdateGroupSubscriptionSignal();
        Q_EMIT updateGroupSubscriptionsDeleteUpdateGroupSubscriptionSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updateGroupSubscriptionsDeleteUpdateGroupSubscriptionSignalE(error_type, error_str);
        Q_EMIT updateGroupSubscriptionsDeleteUpdateGroupSubscriptionSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updateGroupSubscriptionsDeleteUpdateGroupSubscriptionSignalError(error_type, error_str);
        Q_EMIT updateGroupSubscriptionsDeleteUpdateGroupSubscriptionSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIUpdateGroupSubscriptionsApi::updateGroupSubscriptionsGetUpdateGroupSubscription(const qint32 &update_group_subscription_id) {
    QString fullPath = QString(_serverConfigs["updateGroupSubscriptionsGetUpdateGroupSubscription"][_serverIndices.value("updateGroupSubscriptionsGetUpdateGroupSubscription")].URL()+"/api/v2/UpdateGroupSubscriptions/{UpdateGroupSubscriptionID}");
    
    
    {
        QString update_group_subscription_idPathParam("{");
        update_group_subscription_idPathParam.append("UpdateGroupSubscriptionID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "UpdateGroupSubscriptionID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"UpdateGroupSubscriptionID"+pathSuffix : pathPrefix;
        fullPath.replace(update_group_subscription_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(update_group_subscription_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUpdateGroupSubscriptionsApi::updateGroupSubscriptionsGetUpdateGroupSubscriptionCallback);
    connect(this, &OAIUpdateGroupSubscriptionsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIUpdateGroupSubscriptionsApi::updateGroupSubscriptionsGetUpdateGroupSubscriptionCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIUpdateSystem_Models_UpdateGroupSubscription output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updateGroupSubscriptionsGetUpdateGroupSubscriptionSignal(output);
        Q_EMIT updateGroupSubscriptionsGetUpdateGroupSubscriptionSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updateGroupSubscriptionsGetUpdateGroupSubscriptionSignalE(output, error_type, error_str);
        Q_EMIT updateGroupSubscriptionsGetUpdateGroupSubscriptionSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updateGroupSubscriptionsGetUpdateGroupSubscriptionSignalError(output, error_type, error_str);
        Q_EMIT updateGroupSubscriptionsGetUpdateGroupSubscriptionSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIUpdateGroupSubscriptionsApi::updateGroupSubscriptionsGetUpdateGroupSubscriptions(const ::OpenAPI::OptionalParam<QString> &update_group_id, const ::OpenAPI::OptionalParam<QString> &package_type_id, const ::OpenAPI::OptionalParam<QString> &client_id, const ::OpenAPI::OptionalParam<qint32> &limit, const ::OpenAPI::OptionalParam<qint32> &offset) {
    QString fullPath = QString(_serverConfigs["updateGroupSubscriptionsGetUpdateGroupSubscriptions"][_serverIndices.value("updateGroupSubscriptionsGetUpdateGroupSubscriptions")].URL()+"/api/v2/UpdateGroupSubscriptions");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (update_group_id.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "UpdateGroupID", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("UpdateGroupID")).append(querySuffix).append(QUrl::toPercentEncoding(update_group_id.stringValue()));
    }
    if (package_type_id.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "PackageTypeID", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("PackageTypeID")).append(querySuffix).append(QUrl::toPercentEncoding(package_type_id.stringValue()));
    }
    if (client_id.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "ClientID", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("ClientID")).append(querySuffix).append(QUrl::toPercentEncoding(client_id.stringValue()));
    }
    if (limit.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "limit", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("limit")).append(querySuffix).append(QUrl::toPercentEncoding(limit.stringValue()));
    }
    if (offset.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "offset", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("offset")).append(querySuffix).append(QUrl::toPercentEncoding(offset.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUpdateGroupSubscriptionsApi::updateGroupSubscriptionsGetUpdateGroupSubscriptionsCallback);
    connect(this, &OAIUpdateGroupSubscriptionsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIUpdateGroupSubscriptionsApi::updateGroupSubscriptionsGetUpdateGroupSubscriptionsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAPI_PagedResponse_UpdateSystem_Models_UpdateGroupSubscription_ output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updateGroupSubscriptionsGetUpdateGroupSubscriptionsSignal(output);
        Q_EMIT updateGroupSubscriptionsGetUpdateGroupSubscriptionsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updateGroupSubscriptionsGetUpdateGroupSubscriptionsSignalE(output, error_type, error_str);
        Q_EMIT updateGroupSubscriptionsGetUpdateGroupSubscriptionsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updateGroupSubscriptionsGetUpdateGroupSubscriptionsSignalError(output, error_type, error_str);
        Q_EMIT updateGroupSubscriptionsGetUpdateGroupSubscriptionsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIUpdateGroupSubscriptionsApi::updateGroupSubscriptionsPostUpdateGroupSubscription(const OAIUpdateSystem_Models_UpdateGroupSubscription &oai_update_system_models_update_group_subscription) {
    QString fullPath = QString(_serverConfigs["updateGroupSubscriptionsPostUpdateGroupSubscription"][_serverIndices.value("updateGroupSubscriptionsPostUpdateGroupSubscription")].URL()+"/api/v2/UpdateGroupSubscriptions");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_update_system_models_update_group_subscription.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUpdateGroupSubscriptionsApi::updateGroupSubscriptionsPostUpdateGroupSubscriptionCallback);
    connect(this, &OAIUpdateGroupSubscriptionsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIUpdateGroupSubscriptionsApi::updateGroupSubscriptionsPostUpdateGroupSubscriptionCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    qint32 output;
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updateGroupSubscriptionsPostUpdateGroupSubscriptionSignal(output);
        Q_EMIT updateGroupSubscriptionsPostUpdateGroupSubscriptionSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updateGroupSubscriptionsPostUpdateGroupSubscriptionSignalE(output, error_type, error_str);
        Q_EMIT updateGroupSubscriptionsPostUpdateGroupSubscriptionSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updateGroupSubscriptionsPostUpdateGroupSubscriptionSignalError(output, error_type, error_str);
        Q_EMIT updateGroupSubscriptionsPostUpdateGroupSubscriptionSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIUpdateGroupSubscriptionsApi::updateGroupSubscriptionsPostUpdateGroupSubscriptions(const QList<OAIUpdateSystem_Models_UpdateGroupSubscription> &oai_update_system_models_update_group_subscription) {
    QString fullPath = QString(_serverConfigs["updateGroupSubscriptionsPostUpdateGroupSubscriptions"][_serverIndices.value("updateGroupSubscriptionsPostUpdateGroupSubscriptions")].URL()+"/api/v2/UpdateGroupSubscriptions/Batch");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {
        QJsonDocument doc(::OpenAPI::toJsonValue(oai_update_system_models_update_group_subscription).toArray());
        QByteArray bytes = doc.toJson();
        input.request_body.append(bytes);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUpdateGroupSubscriptionsApi::updateGroupSubscriptionsPostUpdateGroupSubscriptionsCallback);
    connect(this, &OAIUpdateGroupSubscriptionsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIUpdateGroupSubscriptionsApi::updateGroupSubscriptionsPostUpdateGroupSubscriptionsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updateGroupSubscriptionsPostUpdateGroupSubscriptionsSignal();
        Q_EMIT updateGroupSubscriptionsPostUpdateGroupSubscriptionsSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updateGroupSubscriptionsPostUpdateGroupSubscriptionsSignalE(error_type, error_str);
        Q_EMIT updateGroupSubscriptionsPostUpdateGroupSubscriptionsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updateGroupSubscriptionsPostUpdateGroupSubscriptionsSignalError(error_type, error_str);
        Q_EMIT updateGroupSubscriptionsPostUpdateGroupSubscriptionsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIUpdateGroupSubscriptionsApi::updateGroupSubscriptionsPutUpdateGroupSubscription(const qint32 &update_group_subscription_id, const OAIUpdateSystem_Models_UpdateGroupSubscription &oai_update_system_models_update_group_subscription) {
    QString fullPath = QString(_serverConfigs["updateGroupSubscriptionsPutUpdateGroupSubscription"][_serverIndices.value("updateGroupSubscriptionsPutUpdateGroupSubscription")].URL()+"/api/v2/UpdateGroupSubscriptions/{UpdateGroupSubscriptionID}");
    
    
    {
        QString update_group_subscription_idPathParam("{");
        update_group_subscription_idPathParam.append("UpdateGroupSubscriptionID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "UpdateGroupSubscriptionID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"UpdateGroupSubscriptionID"+pathSuffix : pathPrefix;
        fullPath.replace(update_group_subscription_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(update_group_subscription_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    {

        
        QByteArray output = oai_update_system_models_update_group_subscription.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUpdateGroupSubscriptionsApi::updateGroupSubscriptionsPutUpdateGroupSubscriptionCallback);
    connect(this, &OAIUpdateGroupSubscriptionsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIUpdateGroupSubscriptionsApi::updateGroupSubscriptionsPutUpdateGroupSubscriptionCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updateGroupSubscriptionsPutUpdateGroupSubscriptionSignal();
        Q_EMIT updateGroupSubscriptionsPutUpdateGroupSubscriptionSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updateGroupSubscriptionsPutUpdateGroupSubscriptionSignalE(error_type, error_str);
        Q_EMIT updateGroupSubscriptionsPutUpdateGroupSubscriptionSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updateGroupSubscriptionsPutUpdateGroupSubscriptionSignalError(error_type, error_str);
        Q_EMIT updateGroupSubscriptionsPutUpdateGroupSubscriptionSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIUpdateGroupSubscriptionsApi::updateGroupSubscriptionsPutUpdateGroupSubscriptions(const QList<OAIUpdateSystem_Models_UpdateGroupSubscription> &oai_update_system_models_update_group_subscription) {
    QString fullPath = QString(_serverConfigs["updateGroupSubscriptionsPutUpdateGroupSubscriptions"][_serverIndices.value("updateGroupSubscriptionsPutUpdateGroupSubscriptions")].URL()+"/api/v2/UpdateGroupSubscriptions/Batch");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    {
        QJsonDocument doc(::OpenAPI::toJsonValue(oai_update_system_models_update_group_subscription).toArray());
        QByteArray bytes = doc.toJson();
        input.request_body.append(bytes);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUpdateGroupSubscriptionsApi::updateGroupSubscriptionsPutUpdateGroupSubscriptionsCallback);
    connect(this, &OAIUpdateGroupSubscriptionsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIUpdateGroupSubscriptionsApi::updateGroupSubscriptionsPutUpdateGroupSubscriptionsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updateGroupSubscriptionsPutUpdateGroupSubscriptionsSignal();
        Q_EMIT updateGroupSubscriptionsPutUpdateGroupSubscriptionsSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updateGroupSubscriptionsPutUpdateGroupSubscriptionsSignalE(error_type, error_str);
        Q_EMIT updateGroupSubscriptionsPutUpdateGroupSubscriptionsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updateGroupSubscriptionsPutUpdateGroupSubscriptionsSignalError(error_type, error_str);
        Q_EMIT updateGroupSubscriptionsPutUpdateGroupSubscriptionsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIUpdateGroupSubscriptionsApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
