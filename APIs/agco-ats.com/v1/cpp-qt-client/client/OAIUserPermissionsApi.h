/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUserPermissionsApi_H
#define OAI_OAIUserPermissionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAPI_Models_ApiError.h"
#include "OAIAPI_Models_RoleUserChange.h"
#include "OAIAPI_Models_UserRoleChange.h"
#include "OAIAPI_PagedResponse_API_Models_Role_.h"
#include "OAIAPI_PagedResponse_API_Models_UserEffectivePermission_.h"
#include "OAIAPI_PagedResponse_API_Models_User_.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUserPermissionsApi : public QObject {
    Q_OBJECT

public:
    OAIUserPermissionsApi(const int timeOut = 0);
    ~OAIUserPermissionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oaiapi_models_role_user_change QList<OAIAPI_Models_RoleUserChange> [required]
    */
    virtual void apiV2RolesIdUsersPut(const qint32 &id, const QList<OAIAPI_Models_RoleUserChange> &oaiapi_models_role_user_change);

    /**
    * @param[in]  permission QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void apiV2UsersCurrentPermissionsGet(const ::OpenAPI::OptionalParam<QString> &permission = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  role QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void userPermissionsGetCurrentUserRoles(const ::OpenAPI::OptionalParam<QString> &role = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  permission QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void userPermissionsGetPermissions(const qint32 &id, const ::OpenAPI::OptionalParam<QString> &permission = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  role QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void userPermissionsGetRoles(const qint32 &id, const ::OpenAPI::OptionalParam<QString> &role = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void userPermissionsGetUsers(const qint32 &id, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oaiapi_models_user_role_change QList<OAIAPI_Models_UserRoleChange> [required]
    */
    virtual void userPermissionsPut(const qint32 &id, const QList<OAIAPI_Models_UserRoleChange> &oaiapi_models_user_role_change);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiV2RolesIdUsersPutCallback(OAIHttpRequestWorker *worker);
    void apiV2UsersCurrentPermissionsGetCallback(OAIHttpRequestWorker *worker);
    void userPermissionsGetCurrentUserRolesCallback(OAIHttpRequestWorker *worker);
    void userPermissionsGetPermissionsCallback(OAIHttpRequestWorker *worker);
    void userPermissionsGetRolesCallback(OAIHttpRequestWorker *worker);
    void userPermissionsGetUsersCallback(OAIHttpRequestWorker *worker);
    void userPermissionsPutCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiV2RolesIdUsersPutSignal();
    void apiV2UsersCurrentPermissionsGetSignal(OAIAPI_PagedResponse_API_Models_UserEffectivePermission_ summary);
    void userPermissionsGetCurrentUserRolesSignal(OAIAPI_PagedResponse_API_Models_Role_ summary);
    void userPermissionsGetPermissionsSignal(OAIAPI_PagedResponse_API_Models_UserEffectivePermission_ summary);
    void userPermissionsGetRolesSignal(OAIAPI_PagedResponse_API_Models_Role_ summary);
    void userPermissionsGetUsersSignal(OAIAPI_PagedResponse_API_Models_User_ summary);
    void userPermissionsPutSignal();


    void apiV2RolesIdUsersPutSignalFull(OAIHttpRequestWorker *worker);
    void apiV2UsersCurrentPermissionsGetSignalFull(OAIHttpRequestWorker *worker, OAIAPI_PagedResponse_API_Models_UserEffectivePermission_ summary);
    void userPermissionsGetCurrentUserRolesSignalFull(OAIHttpRequestWorker *worker, OAIAPI_PagedResponse_API_Models_Role_ summary);
    void userPermissionsGetPermissionsSignalFull(OAIHttpRequestWorker *worker, OAIAPI_PagedResponse_API_Models_UserEffectivePermission_ summary);
    void userPermissionsGetRolesSignalFull(OAIHttpRequestWorker *worker, OAIAPI_PagedResponse_API_Models_Role_ summary);
    void userPermissionsGetUsersSignalFull(OAIHttpRequestWorker *worker, OAIAPI_PagedResponse_API_Models_User_ summary);
    void userPermissionsPutSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use apiV2RolesIdUsersPutSignalError() instead")
    void apiV2RolesIdUsersPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiV2RolesIdUsersPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV2UsersCurrentPermissionsGetSignalError() instead")
    void apiV2UsersCurrentPermissionsGetSignalE(OAIAPI_PagedResponse_API_Models_UserEffectivePermission_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV2UsersCurrentPermissionsGetSignalError(OAIAPI_PagedResponse_API_Models_UserEffectivePermission_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userPermissionsGetCurrentUserRolesSignalError() instead")
    void userPermissionsGetCurrentUserRolesSignalE(OAIAPI_PagedResponse_API_Models_Role_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userPermissionsGetCurrentUserRolesSignalError(OAIAPI_PagedResponse_API_Models_Role_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userPermissionsGetPermissionsSignalError() instead")
    void userPermissionsGetPermissionsSignalE(OAIAPI_PagedResponse_API_Models_UserEffectivePermission_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userPermissionsGetPermissionsSignalError(OAIAPI_PagedResponse_API_Models_UserEffectivePermission_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userPermissionsGetRolesSignalError() instead")
    void userPermissionsGetRolesSignalE(OAIAPI_PagedResponse_API_Models_Role_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userPermissionsGetRolesSignalError(OAIAPI_PagedResponse_API_Models_Role_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userPermissionsGetUsersSignalError() instead")
    void userPermissionsGetUsersSignalE(OAIAPI_PagedResponse_API_Models_User_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userPermissionsGetUsersSignalError(OAIAPI_PagedResponse_API_Models_User_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userPermissionsPutSignalError() instead")
    void userPermissionsPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void userPermissionsPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiV2RolesIdUsersPutSignalErrorFull() instead")
    void apiV2RolesIdUsersPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV2RolesIdUsersPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV2UsersCurrentPermissionsGetSignalErrorFull() instead")
    void apiV2UsersCurrentPermissionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV2UsersCurrentPermissionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userPermissionsGetCurrentUserRolesSignalErrorFull() instead")
    void userPermissionsGetCurrentUserRolesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userPermissionsGetCurrentUserRolesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userPermissionsGetPermissionsSignalErrorFull() instead")
    void userPermissionsGetPermissionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userPermissionsGetPermissionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userPermissionsGetRolesSignalErrorFull() instead")
    void userPermissionsGetRolesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userPermissionsGetRolesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userPermissionsGetUsersSignalErrorFull() instead")
    void userPermissionsGetUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userPermissionsGetUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userPermissionsPutSignalErrorFull() instead")
    void userPermissionsPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userPermissionsPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
