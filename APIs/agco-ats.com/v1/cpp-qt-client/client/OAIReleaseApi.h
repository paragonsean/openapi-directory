/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIReleaseApi_H
#define OAI_OAIReleaseApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAPI_Models_ApiError.h"
#include "OAIAPI_PagedResponse_ContentSubmission_Shared_BusinessEntities_Release_.h"
#include "OAIContentSubmission_Shared_BusinessEntities_Release.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIReleaseApi : public QObject {
    Q_OBJECT

public:
    OAIReleaseApi(const int timeOut = 0);
    ~OAIReleaseApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  release_id qint32 [required]
    * @param[in]  bundle_id QString [required]
    */
    virtual void releaseDeleteReleaseBundle(const qint32 &release_id, const QString &bundle_id);

    /**
    * @param[in]  release_id qint32 [required]
    */
    virtual void releaseGetRelease(const qint32 &release_id);

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  visible bool [optional]
    * @param[in]  bundle_id QString [optional]
    */
    virtual void releaseGetReleases(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &visible = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &bundle_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_content_submission_shared_business_entities_release OAIContentSubmission_Shared_BusinessEntities_Release [required]
    */
    virtual void releasePostRelease(const OAIContentSubmission_Shared_BusinessEntities_Release &oai_content_submission_shared_business_entities_release);

    /**
    * @param[in]  release_id qint32 [required]
    * @param[in]  bundle_id QString [required]
    */
    virtual void releasePostReleaseBundle(const qint32 &release_id, const QString &bundle_id);

    /**
    * @param[in]  release_id qint32 [required]
    * @param[in]  oai_content_submission_shared_business_entities_release OAIContentSubmission_Shared_BusinessEntities_Release [required]
    */
    virtual void releasePutContentDefinition(const qint32 &release_id, const OAIContentSubmission_Shared_BusinessEntities_Release &oai_content_submission_shared_business_entities_release);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void releaseDeleteReleaseBundleCallback(OAIHttpRequestWorker *worker);
    void releaseGetReleaseCallback(OAIHttpRequestWorker *worker);
    void releaseGetReleasesCallback(OAIHttpRequestWorker *worker);
    void releasePostReleaseCallback(OAIHttpRequestWorker *worker);
    void releasePostReleaseBundleCallback(OAIHttpRequestWorker *worker);
    void releasePutContentDefinitionCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void releaseDeleteReleaseBundleSignal();
    void releaseGetReleaseSignal(OAIContentSubmission_Shared_BusinessEntities_Release summary);
    void releaseGetReleasesSignal(OAIAPI_PagedResponse_ContentSubmission_Shared_BusinessEntities_Release_ summary);
    void releasePostReleaseSignal(qint32 summary);
    void releasePostReleaseBundleSignal();
    void releasePutContentDefinitionSignal();


    void releaseDeleteReleaseBundleSignalFull(OAIHttpRequestWorker *worker);
    void releaseGetReleaseSignalFull(OAIHttpRequestWorker *worker, OAIContentSubmission_Shared_BusinessEntities_Release summary);
    void releaseGetReleasesSignalFull(OAIHttpRequestWorker *worker, OAIAPI_PagedResponse_ContentSubmission_Shared_BusinessEntities_Release_ summary);
    void releasePostReleaseSignalFull(OAIHttpRequestWorker *worker, qint32 summary);
    void releasePostReleaseBundleSignalFull(OAIHttpRequestWorker *worker);
    void releasePutContentDefinitionSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use releaseDeleteReleaseBundleSignalError() instead")
    void releaseDeleteReleaseBundleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void releaseDeleteReleaseBundleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use releaseGetReleaseSignalError() instead")
    void releaseGetReleaseSignalE(OAIContentSubmission_Shared_BusinessEntities_Release summary, QNetworkReply::NetworkError error_type, QString error_str);
    void releaseGetReleaseSignalError(OAIContentSubmission_Shared_BusinessEntities_Release summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use releaseGetReleasesSignalError() instead")
    void releaseGetReleasesSignalE(OAIAPI_PagedResponse_ContentSubmission_Shared_BusinessEntities_Release_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void releaseGetReleasesSignalError(OAIAPI_PagedResponse_ContentSubmission_Shared_BusinessEntities_Release_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use releasePostReleaseSignalError() instead")
    void releasePostReleaseSignalE(qint32 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void releasePostReleaseSignalError(qint32 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use releasePostReleaseBundleSignalError() instead")
    void releasePostReleaseBundleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void releasePostReleaseBundleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use releasePutContentDefinitionSignalError() instead")
    void releasePutContentDefinitionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void releasePutContentDefinitionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use releaseDeleteReleaseBundleSignalErrorFull() instead")
    void releaseDeleteReleaseBundleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void releaseDeleteReleaseBundleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use releaseGetReleaseSignalErrorFull() instead")
    void releaseGetReleaseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void releaseGetReleaseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use releaseGetReleasesSignalErrorFull() instead")
    void releaseGetReleasesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void releaseGetReleasesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use releasePostReleaseSignalErrorFull() instead")
    void releasePostReleaseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void releasePostReleaseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use releasePostReleaseBundleSignalErrorFull() instead")
    void releasePostReleaseBundleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void releasePostReleaseBundleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use releasePutContentDefinitionSignalErrorFull() instead")
    void releasePutContentDefinitionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void releasePutContentDefinitionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
