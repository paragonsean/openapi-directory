/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIJobsApi_H
#define OAI_OAIJobsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAPI_Models_ApiError.h"
#include "OAIAPI_PagedResponse_BuildSystem_Shared_DTO_Job_.h"
#include "OAIBuildSystem_Shared_DTO_Job.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIJobsApi : public QObject {
    Q_OBJECT

public:
    OAIJobsApi(const int timeOut = 0);
    ~OAIJobsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  job_id qint32 [required]
    */
    virtual void jobsDeleteJob(const qint32 &job_id);

    /**
    * @param[in]  job_id qint32 [required]
    * @param[in]  is_include_deleted bool [optional]
    */
    virtual void jobsGetJob(const qint32 &job_id, const ::OpenAPI::OptionalParam<bool> &is_include_deleted = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  is_include_deleted bool [optional]
    */
    virtual void jobsGetJobs(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &is_include_deleted = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  oai_build_system_shared_dto_job OAIBuildSystem_Shared_DTO_Job [required]
    */
    virtual void jobsPostJob(const OAIBuildSystem_Shared_DTO_Job &oai_build_system_shared_dto_job);

    /**
    * @param[in]  job_id qint32 [required]
    * @param[in]  oai_build_system_shared_dto_job OAIBuildSystem_Shared_DTO_Job [required]
    */
    virtual void jobsPutJob(const qint32 &job_id, const OAIBuildSystem_Shared_DTO_Job &oai_build_system_shared_dto_job);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void jobsDeleteJobCallback(OAIHttpRequestWorker *worker);
    void jobsGetJobCallback(OAIHttpRequestWorker *worker);
    void jobsGetJobsCallback(OAIHttpRequestWorker *worker);
    void jobsPostJobCallback(OAIHttpRequestWorker *worker);
    void jobsPutJobCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void jobsDeleteJobSignal();
    void jobsGetJobSignal(OAIBuildSystem_Shared_DTO_Job summary);
    void jobsGetJobsSignal(OAIAPI_PagedResponse_BuildSystem_Shared_DTO_Job_ summary);
    void jobsPostJobSignal(qint32 summary);
    void jobsPutJobSignal();


    void jobsDeleteJobSignalFull(OAIHttpRequestWorker *worker);
    void jobsGetJobSignalFull(OAIHttpRequestWorker *worker, OAIBuildSystem_Shared_DTO_Job summary);
    void jobsGetJobsSignalFull(OAIHttpRequestWorker *worker, OAIAPI_PagedResponse_BuildSystem_Shared_DTO_Job_ summary);
    void jobsPostJobSignalFull(OAIHttpRequestWorker *worker, qint32 summary);
    void jobsPutJobSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use jobsDeleteJobSignalError() instead")
    void jobsDeleteJobSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void jobsDeleteJobSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsGetJobSignalError() instead")
    void jobsGetJobSignalE(OAIBuildSystem_Shared_DTO_Job summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsGetJobSignalError(OAIBuildSystem_Shared_DTO_Job summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsGetJobsSignalError() instead")
    void jobsGetJobsSignalE(OAIAPI_PagedResponse_BuildSystem_Shared_DTO_Job_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsGetJobsSignalError(OAIAPI_PagedResponse_BuildSystem_Shared_DTO_Job_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsPostJobSignalError() instead")
    void jobsPostJobSignalE(qint32 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsPostJobSignalError(qint32 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsPutJobSignalError() instead")
    void jobsPutJobSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void jobsPutJobSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use jobsDeleteJobSignalErrorFull() instead")
    void jobsDeleteJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsDeleteJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsGetJobSignalErrorFull() instead")
    void jobsGetJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsGetJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsGetJobsSignalErrorFull() instead")
    void jobsGetJobsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsGetJobsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsPostJobSignalErrorFull() instead")
    void jobsPostJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsPostJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsPutJobSignalErrorFull() instead")
    void jobsPutJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsPutJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
