/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContentSubmissionsApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIContentSubmissionsApi::OAIContentSubmissionsApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIContentSubmissionsApi::~OAIContentSubmissionsApi() {
}

void OAIContentSubmissionsApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://secure.agco-ats.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("contentSubmissionsDeleteContentSubmission", defaultConf);
    _serverIndices.insert("contentSubmissionsDeleteContentSubmission", 0);
    _serverConfigs.insert("contentSubmissionsDeleteContentSubmissionAttribute", defaultConf);
    _serverIndices.insert("contentSubmissionsDeleteContentSubmissionAttribute", 0);
    _serverConfigs.insert("contentSubmissionsGetContentSubmission", defaultConf);
    _serverIndices.insert("contentSubmissionsGetContentSubmission", 0);
    _serverConfigs.insert("contentSubmissionsGetContentSubmissionAttributes", defaultConf);
    _serverIndices.insert("contentSubmissionsGetContentSubmissionAttributes", 0);
    _serverConfigs.insert("contentSubmissionsGetContentSubmissionStatus", defaultConf);
    _serverIndices.insert("contentSubmissionsGetContentSubmissionStatus", 0);
    _serverConfigs.insert("contentSubmissionsGetContentSubmissions", defaultConf);
    _serverIndices.insert("contentSubmissionsGetContentSubmissions", 0);
    _serverConfigs.insert("contentSubmissionsPostContentSubmission", defaultConf);
    _serverIndices.insert("contentSubmissionsPostContentSubmission", 0);
    _serverConfigs.insert("contentSubmissionsPostContentSubmissionAttribute", defaultConf);
    _serverIndices.insert("contentSubmissionsPostContentSubmissionAttribute", 0);
    _serverConfigs.insert("contentSubmissionsPostContentSubmissionAttributes", defaultConf);
    _serverIndices.insert("contentSubmissionsPostContentSubmissionAttributes", 0);
    _serverConfigs.insert("contentSubmissionsPutContentSubmission", defaultConf);
    _serverIndices.insert("contentSubmissionsPutContentSubmission", 0);
    _serverConfigs.insert("contentSubmissionsPutContentSubmissionAttributeAsync", defaultConf);
    _serverIndices.insert("contentSubmissionsPutContentSubmissionAttributeAsync", 0);
    _serverConfigs.insert("contentSubmissionsPutContentSubmissionAttributes", defaultConf);
    _serverIndices.insert("contentSubmissionsPutContentSubmissionAttributes", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIContentSubmissionsApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIContentSubmissionsApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIContentSubmissionsApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIContentSubmissionsApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIContentSubmissionsApi::setUsername(const QString &username) {
    _username = username;
}

void OAIContentSubmissionsApi::setPassword(const QString &password) {
    _password = password;
}


void OAIContentSubmissionsApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIContentSubmissionsApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIContentSubmissionsApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIContentSubmissionsApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIContentSubmissionsApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIContentSubmissionsApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIContentSubmissionsApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIContentSubmissionsApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIContentSubmissionsApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIContentSubmissionsApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIContentSubmissionsApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIContentSubmissionsApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIContentSubmissionsApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIContentSubmissionsApi::contentSubmissionsDeleteContentSubmission(const qint32 &content_submission_id) {
    QString fullPath = QString(_serverConfigs["contentSubmissionsDeleteContentSubmission"][_serverIndices.value("contentSubmissionsDeleteContentSubmission")].URL()+"/api/v2/ContentSubmissions/{contentSubmissionID}");
    
    
    {
        QString content_submission_idPathParam("{");
        content_submission_idPathParam.append("contentSubmissionID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "contentSubmissionID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"contentSubmissionID"+pathSuffix : pathPrefix;
        fullPath.replace(content_submission_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(content_submission_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIContentSubmissionsApi::contentSubmissionsDeleteContentSubmissionCallback);
    connect(this, &OAIContentSubmissionsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIContentSubmissionsApi::contentSubmissionsDeleteContentSubmissionCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT contentSubmissionsDeleteContentSubmissionSignal();
        Q_EMIT contentSubmissionsDeleteContentSubmissionSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT contentSubmissionsDeleteContentSubmissionSignalE(error_type, error_str);
        Q_EMIT contentSubmissionsDeleteContentSubmissionSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT contentSubmissionsDeleteContentSubmissionSignalError(error_type, error_str);
        Q_EMIT contentSubmissionsDeleteContentSubmissionSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIContentSubmissionsApi::contentSubmissionsDeleteContentSubmissionAttribute(const qint32 &content_submission_attribute_id) {
    QString fullPath = QString(_serverConfigs["contentSubmissionsDeleteContentSubmissionAttribute"][_serverIndices.value("contentSubmissionsDeleteContentSubmissionAttribute")].URL()+"/api/v2/ContentSubmissionAttributes/{contentSubmissionAttributeID}");
    
    
    {
        QString content_submission_attribute_idPathParam("{");
        content_submission_attribute_idPathParam.append("contentSubmissionAttributeID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "contentSubmissionAttributeID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"contentSubmissionAttributeID"+pathSuffix : pathPrefix;
        fullPath.replace(content_submission_attribute_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(content_submission_attribute_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIContentSubmissionsApi::contentSubmissionsDeleteContentSubmissionAttributeCallback);
    connect(this, &OAIContentSubmissionsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIContentSubmissionsApi::contentSubmissionsDeleteContentSubmissionAttributeCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT contentSubmissionsDeleteContentSubmissionAttributeSignal();
        Q_EMIT contentSubmissionsDeleteContentSubmissionAttributeSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT contentSubmissionsDeleteContentSubmissionAttributeSignalE(error_type, error_str);
        Q_EMIT contentSubmissionsDeleteContentSubmissionAttributeSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT contentSubmissionsDeleteContentSubmissionAttributeSignalError(error_type, error_str);
        Q_EMIT contentSubmissionsDeleteContentSubmissionAttributeSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIContentSubmissionsApi::contentSubmissionsGetContentSubmission(const qint32 &content_submission_id, const ::OpenAPI::OptionalParam<QString> &include_attributes) {
    QString fullPath = QString(_serverConfigs["contentSubmissionsGetContentSubmission"][_serverIndices.value("contentSubmissionsGetContentSubmission")].URL()+"/api/v2/ContentSubmissions/{contentSubmissionID}");
    
    
    {
        QString content_submission_idPathParam("{");
        content_submission_idPathParam.append("contentSubmissionID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "contentSubmissionID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"contentSubmissionID"+pathSuffix : pathPrefix;
        fullPath.replace(content_submission_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(content_submission_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (include_attributes.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "includeAttributes", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("includeAttributes")).append(querySuffix).append(QUrl::toPercentEncoding(include_attributes.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIContentSubmissionsApi::contentSubmissionsGetContentSubmissionCallback);
    connect(this, &OAIContentSubmissionsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIContentSubmissionsApi::contentSubmissionsGetContentSubmissionCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIContentSubmission_Shared_BusinessEntities_ContentSubmission output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT contentSubmissionsGetContentSubmissionSignal(output);
        Q_EMIT contentSubmissionsGetContentSubmissionSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT contentSubmissionsGetContentSubmissionSignalE(output, error_type, error_str);
        Q_EMIT contentSubmissionsGetContentSubmissionSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT contentSubmissionsGetContentSubmissionSignalError(output, error_type, error_str);
        Q_EMIT contentSubmissionsGetContentSubmissionSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIContentSubmissionsApi::contentSubmissionsGetContentSubmissionAttributes(const qint32 &content_submission_id, const ::OpenAPI::OptionalParam<qint32> &limit, const ::OpenAPI::OptionalParam<qint32> &offset, const ::OpenAPI::OptionalParam<QString> &name) {
    QString fullPath = QString(_serverConfigs["contentSubmissionsGetContentSubmissionAttributes"][_serverIndices.value("contentSubmissionsGetContentSubmissionAttributes")].URL()+"/api/v2/ContentSubmissions/{contentSubmissionID}/Attributes");
    
    
    {
        QString content_submission_idPathParam("{");
        content_submission_idPathParam.append("contentSubmissionID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "contentSubmissionID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"contentSubmissionID"+pathSuffix : pathPrefix;
        fullPath.replace(content_submission_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(content_submission_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (limit.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "limit", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("limit")).append(querySuffix).append(QUrl::toPercentEncoding(limit.stringValue()));
    }
    if (offset.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "offset", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("offset")).append(querySuffix).append(QUrl::toPercentEncoding(offset.stringValue()));
    }
    if (name.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "name", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("name")).append(querySuffix).append(QUrl::toPercentEncoding(name.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIContentSubmissionsApi::contentSubmissionsGetContentSubmissionAttributesCallback);
    connect(this, &OAIContentSubmissionsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIContentSubmissionsApi::contentSubmissionsGetContentSubmissionAttributesCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAPI_PagedResponse_ContentSubmission_Shared_BusinessEntities_ContentSubmissionAttribute_ output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT contentSubmissionsGetContentSubmissionAttributesSignal(output);
        Q_EMIT contentSubmissionsGetContentSubmissionAttributesSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT contentSubmissionsGetContentSubmissionAttributesSignalE(output, error_type, error_str);
        Q_EMIT contentSubmissionsGetContentSubmissionAttributesSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT contentSubmissionsGetContentSubmissionAttributesSignalError(output, error_type, error_str);
        Q_EMIT contentSubmissionsGetContentSubmissionAttributesSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIContentSubmissionsApi::contentSubmissionsGetContentSubmissionStatus(const qint32 &content_submission_id, const ::OpenAPI::OptionalParam<bool> &include_activity_run_details) {
    QString fullPath = QString(_serverConfigs["contentSubmissionsGetContentSubmissionStatus"][_serverIndices.value("contentSubmissionsGetContentSubmissionStatus")].URL()+"/api/v2/ContentSubmissions/{contentSubmissionID}/Status");
    
    
    {
        QString content_submission_idPathParam("{");
        content_submission_idPathParam.append("contentSubmissionID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "contentSubmissionID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"contentSubmissionID"+pathSuffix : pathPrefix;
        fullPath.replace(content_submission_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(content_submission_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (include_activity_run_details.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "includeActivityRunDetails", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("includeActivityRunDetails")).append(querySuffix).append(QUrl::toPercentEncoding(include_activity_run_details.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIContentSubmissionsApi::contentSubmissionsGetContentSubmissionStatusCallback);
    connect(this, &OAIContentSubmissionsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIContentSubmissionsApi::contentSubmissionsGetContentSubmissionStatusCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIBuildSystem_Shared_Interfaces_IJobRun output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT contentSubmissionsGetContentSubmissionStatusSignal(output);
        Q_EMIT contentSubmissionsGetContentSubmissionStatusSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT contentSubmissionsGetContentSubmissionStatusSignalE(output, error_type, error_str);
        Q_EMIT contentSubmissionsGetContentSubmissionStatusSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT contentSubmissionsGetContentSubmissionStatusSignalError(output, error_type, error_str);
        Q_EMIT contentSubmissionsGetContentSubmissionStatusSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIContentSubmissionsApi::contentSubmissionsGetContentSubmissions(const ::OpenAPI::OptionalParam<qint32> &limit, const ::OpenAPI::OptionalParam<qint32> &offset, const ::OpenAPI::OptionalParam<qint32> &user_id, const ::OpenAPI::OptionalParam<qint32> &content_definition_id, const ::OpenAPI::OptionalParam<QString> &include_attributes, const ::OpenAPI::OptionalParam<qint32> &release_id, const ::OpenAPI::OptionalParam<qint32> &type_id, const ::OpenAPI::OptionalParam<qint32> &version, const ::OpenAPI::OptionalParam<bool> &include_definition) {
    QString fullPath = QString(_serverConfigs["contentSubmissionsGetContentSubmissions"][_serverIndices.value("contentSubmissionsGetContentSubmissions")].URL()+"/api/v2/ContentSubmissions");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (limit.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "limit", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("limit")).append(querySuffix).append(QUrl::toPercentEncoding(limit.stringValue()));
    }
    if (offset.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "offset", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("offset")).append(querySuffix).append(QUrl::toPercentEncoding(offset.stringValue()));
    }
    if (user_id.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "userID", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("userID")).append(querySuffix).append(QUrl::toPercentEncoding(user_id.stringValue()));
    }
    if (content_definition_id.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "contentDefinitionID", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("contentDefinitionID")).append(querySuffix).append(QUrl::toPercentEncoding(content_definition_id.stringValue()));
    }
    if (include_attributes.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "includeAttributes", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("includeAttributes")).append(querySuffix).append(QUrl::toPercentEncoding(include_attributes.stringValue()));
    }
    if (release_id.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "releaseID", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("releaseID")).append(querySuffix).append(QUrl::toPercentEncoding(release_id.stringValue()));
    }
    if (type_id.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "typeID", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("typeID")).append(querySuffix).append(QUrl::toPercentEncoding(type_id.stringValue()));
    }
    if (version.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "version", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("version")).append(querySuffix).append(QUrl::toPercentEncoding(version.stringValue()));
    }
    if (include_definition.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "includeDefinition", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("includeDefinition")).append(querySuffix).append(QUrl::toPercentEncoding(include_definition.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIContentSubmissionsApi::contentSubmissionsGetContentSubmissionsCallback);
    connect(this, &OAIContentSubmissionsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIContentSubmissionsApi::contentSubmissionsGetContentSubmissionsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAPI_PagedResponse_ContentSubmission_Shared_BusinessEntities_ContentSubmission_ output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT contentSubmissionsGetContentSubmissionsSignal(output);
        Q_EMIT contentSubmissionsGetContentSubmissionsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT contentSubmissionsGetContentSubmissionsSignalE(output, error_type, error_str);
        Q_EMIT contentSubmissionsGetContentSubmissionsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT contentSubmissionsGetContentSubmissionsSignalError(output, error_type, error_str);
        Q_EMIT contentSubmissionsGetContentSubmissionsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIContentSubmissionsApi::contentSubmissionsPostContentSubmission(const OAIContentSubmission_Shared_BusinessEntities_ContentSubmission &oai_content_submission_shared_business_entities_content_submission) {
    QString fullPath = QString(_serverConfigs["contentSubmissionsPostContentSubmission"][_serverIndices.value("contentSubmissionsPostContentSubmission")].URL()+"/api/v2/ContentSubmissions");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_content_submission_shared_business_entities_content_submission.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIContentSubmissionsApi::contentSubmissionsPostContentSubmissionCallback);
    connect(this, &OAIContentSubmissionsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIContentSubmissionsApi::contentSubmissionsPostContentSubmissionCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    qint32 output;
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT contentSubmissionsPostContentSubmissionSignal(output);
        Q_EMIT contentSubmissionsPostContentSubmissionSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT contentSubmissionsPostContentSubmissionSignalE(output, error_type, error_str);
        Q_EMIT contentSubmissionsPostContentSubmissionSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT contentSubmissionsPostContentSubmissionSignalError(output, error_type, error_str);
        Q_EMIT contentSubmissionsPostContentSubmissionSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIContentSubmissionsApi::contentSubmissionsPostContentSubmissionAttribute(const qint32 &content_submission_id, const OAIContentSubmission_Shared_BusinessEntities_ContentSubmissionAttribute &oai_content_submission_shared_business_entities_content_submission_attribute) {
    QString fullPath = QString(_serverConfigs["contentSubmissionsPostContentSubmissionAttribute"][_serverIndices.value("contentSubmissionsPostContentSubmissionAttribute")].URL()+"/api/v2/ContentSubmissions/{contentSubmissionID}/Attributes");
    
    
    {
        QString content_submission_idPathParam("{");
        content_submission_idPathParam.append("contentSubmissionID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "contentSubmissionID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"contentSubmissionID"+pathSuffix : pathPrefix;
        fullPath.replace(content_submission_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(content_submission_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_content_submission_shared_business_entities_content_submission_attribute.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIContentSubmissionsApi::contentSubmissionsPostContentSubmissionAttributeCallback);
    connect(this, &OAIContentSubmissionsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIContentSubmissionsApi::contentSubmissionsPostContentSubmissionAttributeCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    qint32 output;
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT contentSubmissionsPostContentSubmissionAttributeSignal(output);
        Q_EMIT contentSubmissionsPostContentSubmissionAttributeSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT contentSubmissionsPostContentSubmissionAttributeSignalE(output, error_type, error_str);
        Q_EMIT contentSubmissionsPostContentSubmissionAttributeSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT contentSubmissionsPostContentSubmissionAttributeSignalError(output, error_type, error_str);
        Q_EMIT contentSubmissionsPostContentSubmissionAttributeSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIContentSubmissionsApi::contentSubmissionsPostContentSubmissionAttributes(const qint32 &content_submission_id, const QList<OAIContentSubmission_Shared_BusinessEntities_ContentSubmissionAttribute> &oai_content_submission_shared_business_entities_content_submission_attribute) {
    QString fullPath = QString(_serverConfigs["contentSubmissionsPostContentSubmissionAttributes"][_serverIndices.value("contentSubmissionsPostContentSubmissionAttributes")].URL()+"/api/v2/ContentSubmissions/{contentSubmissionID}/Attributes/Batch");
    
    
    {
        QString content_submission_idPathParam("{");
        content_submission_idPathParam.append("contentSubmissionID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "contentSubmissionID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"contentSubmissionID"+pathSuffix : pathPrefix;
        fullPath.replace(content_submission_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(content_submission_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {
        QJsonDocument doc(::OpenAPI::toJsonValue(oai_content_submission_shared_business_entities_content_submission_attribute).toArray());
        QByteArray bytes = doc.toJson();
        input.request_body.append(bytes);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIContentSubmissionsApi::contentSubmissionsPostContentSubmissionAttributesCallback);
    connect(this, &OAIContentSubmissionsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIContentSubmissionsApi::contentSubmissionsPostContentSubmissionAttributesCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT contentSubmissionsPostContentSubmissionAttributesSignal();
        Q_EMIT contentSubmissionsPostContentSubmissionAttributesSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT contentSubmissionsPostContentSubmissionAttributesSignalE(error_type, error_str);
        Q_EMIT contentSubmissionsPostContentSubmissionAttributesSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT contentSubmissionsPostContentSubmissionAttributesSignalError(error_type, error_str);
        Q_EMIT contentSubmissionsPostContentSubmissionAttributesSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIContentSubmissionsApi::contentSubmissionsPutContentSubmission(const qint32 &content_submission_id, const OAIContentSubmission_Shared_BusinessEntities_ContentSubmission &oai_content_submission_shared_business_entities_content_submission) {
    QString fullPath = QString(_serverConfigs["contentSubmissionsPutContentSubmission"][_serverIndices.value("contentSubmissionsPutContentSubmission")].URL()+"/api/v2/ContentSubmissions/{contentSubmissionID}");
    
    
    {
        QString content_submission_idPathParam("{");
        content_submission_idPathParam.append("contentSubmissionID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "contentSubmissionID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"contentSubmissionID"+pathSuffix : pathPrefix;
        fullPath.replace(content_submission_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(content_submission_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    {

        
        QByteArray output = oai_content_submission_shared_business_entities_content_submission.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIContentSubmissionsApi::contentSubmissionsPutContentSubmissionCallback);
    connect(this, &OAIContentSubmissionsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIContentSubmissionsApi::contentSubmissionsPutContentSubmissionCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT contentSubmissionsPutContentSubmissionSignal();
        Q_EMIT contentSubmissionsPutContentSubmissionSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT contentSubmissionsPutContentSubmissionSignalE(error_type, error_str);
        Q_EMIT contentSubmissionsPutContentSubmissionSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT contentSubmissionsPutContentSubmissionSignalError(error_type, error_str);
        Q_EMIT contentSubmissionsPutContentSubmissionSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIContentSubmissionsApi::contentSubmissionsPutContentSubmissionAttributeAsync(const qint32 &content_submission_attribute_id, const OAIContentSubmission_Shared_BusinessEntities_ContentSubmissionAttribute &oai_content_submission_shared_business_entities_content_submission_attribute) {
    QString fullPath = QString(_serverConfigs["contentSubmissionsPutContentSubmissionAttributeAsync"][_serverIndices.value("contentSubmissionsPutContentSubmissionAttributeAsync")].URL()+"/api/v2/ContentSubmissionAttributes/{contentSubmissionAttributeID}");
    
    
    {
        QString content_submission_attribute_idPathParam("{");
        content_submission_attribute_idPathParam.append("contentSubmissionAttributeID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "contentSubmissionAttributeID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"contentSubmissionAttributeID"+pathSuffix : pathPrefix;
        fullPath.replace(content_submission_attribute_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(content_submission_attribute_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    {

        
        QByteArray output = oai_content_submission_shared_business_entities_content_submission_attribute.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIContentSubmissionsApi::contentSubmissionsPutContentSubmissionAttributeAsyncCallback);
    connect(this, &OAIContentSubmissionsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIContentSubmissionsApi::contentSubmissionsPutContentSubmissionAttributeAsyncCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT contentSubmissionsPutContentSubmissionAttributeAsyncSignal();
        Q_EMIT contentSubmissionsPutContentSubmissionAttributeAsyncSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT contentSubmissionsPutContentSubmissionAttributeAsyncSignalE(error_type, error_str);
        Q_EMIT contentSubmissionsPutContentSubmissionAttributeAsyncSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT contentSubmissionsPutContentSubmissionAttributeAsyncSignalError(error_type, error_str);
        Q_EMIT contentSubmissionsPutContentSubmissionAttributeAsyncSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIContentSubmissionsApi::contentSubmissionsPutContentSubmissionAttributes(const QList<OAIContentSubmission_Shared_BusinessEntities_ContentSubmissionAttribute> &oai_content_submission_shared_business_entities_content_submission_attribute) {
    QString fullPath = QString(_serverConfigs["contentSubmissionsPutContentSubmissionAttributes"][_serverIndices.value("contentSubmissionsPutContentSubmissionAttributes")].URL()+"/api/v2/ContentSubmissionAttributes/Batch");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    {
        QJsonDocument doc(::OpenAPI::toJsonValue(oai_content_submission_shared_business_entities_content_submission_attribute).toArray());
        QByteArray bytes = doc.toJson();
        input.request_body.append(bytes);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIContentSubmissionsApi::contentSubmissionsPutContentSubmissionAttributesCallback);
    connect(this, &OAIContentSubmissionsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIContentSubmissionsApi::contentSubmissionsPutContentSubmissionAttributesCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT contentSubmissionsPutContentSubmissionAttributesSignal();
        Q_EMIT contentSubmissionsPutContentSubmissionAttributesSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT contentSubmissionsPutContentSubmissionAttributesSignalE(error_type, error_str);
        Q_EMIT contentSubmissionsPutContentSubmissionAttributesSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT contentSubmissionsPutContentSubmissionAttributesSignalError(error_type, error_str);
        Q_EMIT contentSubmissionsPutContentSubmissionAttributesSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIContentSubmissionsApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
