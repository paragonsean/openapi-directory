/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUpdateGroupsApi_H
#define OAI_OAIUpdateGroupsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAPI_Models_ApiError.h"
#include "OAIAPI_PagedResponse_UpdateSystem_Models_Bundle_.h"
#include "OAIAPI_PagedResponse_UpdateSystem_Models_UpdateGroup_.h"
#include "OAIUpdateSystem_Models_UpdateGroup.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUpdateGroupsApi : public QObject {
    Q_OBJECT

public:
    OAIUpdateGroupsApi(const int timeOut = 0);
    ~OAIUpdateGroupsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiV2UpdateGroupsIDGet(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  user_id qint32 [required]
    */
    virtual void updateGroupsAddUpdateGroupUser(const QString &id, const qint32 &user_id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void updateGroupsDelete(const QString &id);

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  user_id qint32 [optional]
    */
    virtual void updateGroupsGet(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &user_id = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  include_inactive bool [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void updateGroupsGetUpdateGroupBundles(const QString &id, const bool &include_inactive, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  oai_update_system_models_update_group OAIUpdateSystem_Models_UpdateGroup [required]
    */
    virtual void updateGroupsPost(const OAIUpdateSystem_Models_UpdateGroup &oai_update_system_models_update_group);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_update_system_models_update_group OAIUpdateSystem_Models_UpdateGroup [required]
    */
    virtual void updateGroupsPut(const QString &id, const OAIUpdateSystem_Models_UpdateGroup &oai_update_system_models_update_group);

    /**
    * @param[in]  id QString [required]
    * @param[in]  user_id qint32 [required]
    */
    virtual void updateGroupsRemoveUpdateGroupUser(const QString &id, const qint32 &user_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiV2UpdateGroupsIDGetCallback(OAIHttpRequestWorker *worker);
    void updateGroupsAddUpdateGroupUserCallback(OAIHttpRequestWorker *worker);
    void updateGroupsDeleteCallback(OAIHttpRequestWorker *worker);
    void updateGroupsGetCallback(OAIHttpRequestWorker *worker);
    void updateGroupsGetUpdateGroupBundlesCallback(OAIHttpRequestWorker *worker);
    void updateGroupsPostCallback(OAIHttpRequestWorker *worker);
    void updateGroupsPutCallback(OAIHttpRequestWorker *worker);
    void updateGroupsRemoveUpdateGroupUserCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiV2UpdateGroupsIDGetSignal(OAIUpdateSystem_Models_UpdateGroup summary);
    void updateGroupsAddUpdateGroupUserSignal();
    void updateGroupsDeleteSignal();
    void updateGroupsGetSignal(OAIAPI_PagedResponse_UpdateSystem_Models_UpdateGroup_ summary);
    void updateGroupsGetUpdateGroupBundlesSignal(OAIAPI_PagedResponse_UpdateSystem_Models_Bundle_ summary);
    void updateGroupsPostSignal(QString summary);
    void updateGroupsPutSignal();
    void updateGroupsRemoveUpdateGroupUserSignal();


    void apiV2UpdateGroupsIDGetSignalFull(OAIHttpRequestWorker *worker, OAIUpdateSystem_Models_UpdateGroup summary);
    void updateGroupsAddUpdateGroupUserSignalFull(OAIHttpRequestWorker *worker);
    void updateGroupsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void updateGroupsGetSignalFull(OAIHttpRequestWorker *worker, OAIAPI_PagedResponse_UpdateSystem_Models_UpdateGroup_ summary);
    void updateGroupsGetUpdateGroupBundlesSignalFull(OAIHttpRequestWorker *worker, OAIAPI_PagedResponse_UpdateSystem_Models_Bundle_ summary);
    void updateGroupsPostSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void updateGroupsPutSignalFull(OAIHttpRequestWorker *worker);
    void updateGroupsRemoveUpdateGroupUserSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use apiV2UpdateGroupsIDGetSignalError() instead")
    void apiV2UpdateGroupsIDGetSignalE(OAIUpdateSystem_Models_UpdateGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV2UpdateGroupsIDGetSignalError(OAIUpdateSystem_Models_UpdateGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGroupsAddUpdateGroupUserSignalError() instead")
    void updateGroupsAddUpdateGroupUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateGroupsAddUpdateGroupUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGroupsDeleteSignalError() instead")
    void updateGroupsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateGroupsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGroupsGetSignalError() instead")
    void updateGroupsGetSignalE(OAIAPI_PagedResponse_UpdateSystem_Models_UpdateGroup_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateGroupsGetSignalError(OAIAPI_PagedResponse_UpdateSystem_Models_UpdateGroup_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGroupsGetUpdateGroupBundlesSignalError() instead")
    void updateGroupsGetUpdateGroupBundlesSignalE(OAIAPI_PagedResponse_UpdateSystem_Models_Bundle_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateGroupsGetUpdateGroupBundlesSignalError(OAIAPI_PagedResponse_UpdateSystem_Models_Bundle_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGroupsPostSignalError() instead")
    void updateGroupsPostSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateGroupsPostSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGroupsPutSignalError() instead")
    void updateGroupsPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateGroupsPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGroupsRemoveUpdateGroupUserSignalError() instead")
    void updateGroupsRemoveUpdateGroupUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateGroupsRemoveUpdateGroupUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiV2UpdateGroupsIDGetSignalErrorFull() instead")
    void apiV2UpdateGroupsIDGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV2UpdateGroupsIDGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGroupsAddUpdateGroupUserSignalErrorFull() instead")
    void updateGroupsAddUpdateGroupUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateGroupsAddUpdateGroupUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGroupsDeleteSignalErrorFull() instead")
    void updateGroupsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateGroupsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGroupsGetSignalErrorFull() instead")
    void updateGroupsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateGroupsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGroupsGetUpdateGroupBundlesSignalErrorFull() instead")
    void updateGroupsGetUpdateGroupBundlesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateGroupsGetUpdateGroupBundlesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGroupsPostSignalErrorFull() instead")
    void updateGroupsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateGroupsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGroupsPutSignalErrorFull() instead")
    void updateGroupsPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateGroupsPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGroupsRemoveUpdateGroupUserSignalErrorFull() instead")
    void updateGroupsRemoveUpdateGroupUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateGroupsRemoveUpdateGroupUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
