/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIVouchersApi_H
#define OAI_OAIVouchersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAPI_PagedResponse_DealerDB_Models_VoucherHistory_.h"
#include "OAIAPI_PagedResponse_DealerDB_Models_Voucher_.h"
#include "OAIDealerDB_Models_Voucher.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIVouchersApi : public QObject {
    Q_OBJECT

public:
    OAIVouchersApi(const int timeOut = 0);
    ~OAIVouchersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  voucher_code QString [required]
    * @param[in]  deleted QString [optional]
    */
    virtual void apiV2VouchersVoucherCodeGet(const QString &voucher_code, const ::OpenAPI::OptionalParam<QString> &deleted = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  voucher_code QString [required]
    */
    virtual void vouchersDelete(const QString &voucher_code);

    /**
    * @param[in]  type QString [optional]
    * @param[in]  dealer_code QString [optional]
    * @param[in]  license_to QString [optional]
    * @param[in]  purpose QString [optional]
    * @param[in]  order_number QString [optional]
    * @param[in]  email QString [optional]
    * @param[in]  modified_by QString [optional]
    * @param[in]  created_after QDateTime [optional]
    * @param[in]  created_before QDateTime [optional]
    * @param[in]  punched_after QDateTime [optional]
    * @param[in]  punched_before QDateTime [optional]
    * @param[in]  punched bool [optional]
    * @param[in]  expiration_after QDateTime [optional]
    * @param[in]  expiration_before QDateTime [optional]
    * @param[in]  deleted QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void vouchersGet(const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dealer_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &license_to = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &purpose = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &email = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &modified_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &created_after = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &created_before = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &punched_after = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &punched_before = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<bool> &punched = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QDateTime> &expiration_after = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &expiration_before = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &deleted = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  voucher_code QString [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void vouchersGetVoucherHistory(const QString &voucher_code, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  oai_dealer_db_models_voucher OAIDealerDB_Models_Voucher [required]
    */
    virtual void vouchersPost(const OAIDealerDB_Models_Voucher &oai_dealer_db_models_voucher);

    /**
    * @param[in]  voucher_code QString [required]
    * @param[in]  oai_dealer_db_models_voucher OAIDealerDB_Models_Voucher [required]
    */
    virtual void vouchersPut(const QString &voucher_code, const OAIDealerDB_Models_Voucher &oai_dealer_db_models_voucher);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiV2VouchersVoucherCodeGetCallback(OAIHttpRequestWorker *worker);
    void vouchersDeleteCallback(OAIHttpRequestWorker *worker);
    void vouchersGetCallback(OAIHttpRequestWorker *worker);
    void vouchersGetVoucherHistoryCallback(OAIHttpRequestWorker *worker);
    void vouchersPostCallback(OAIHttpRequestWorker *worker);
    void vouchersPutCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiV2VouchersVoucherCodeGetSignal(OAIDealerDB_Models_Voucher summary);
    void vouchersDeleteSignal();
    void vouchersGetSignal(OAIAPI_PagedResponse_DealerDB_Models_Voucher_ summary);
    void vouchersGetVoucherHistorySignal(OAIAPI_PagedResponse_DealerDB_Models_VoucherHistory_ summary);
    void vouchersPostSignal(QString summary);
    void vouchersPutSignal();


    void apiV2VouchersVoucherCodeGetSignalFull(OAIHttpRequestWorker *worker, OAIDealerDB_Models_Voucher summary);
    void vouchersDeleteSignalFull(OAIHttpRequestWorker *worker);
    void vouchersGetSignalFull(OAIHttpRequestWorker *worker, OAIAPI_PagedResponse_DealerDB_Models_Voucher_ summary);
    void vouchersGetVoucherHistorySignalFull(OAIHttpRequestWorker *worker, OAIAPI_PagedResponse_DealerDB_Models_VoucherHistory_ summary);
    void vouchersPostSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void vouchersPutSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use apiV2VouchersVoucherCodeGetSignalError() instead")
    void apiV2VouchersVoucherCodeGetSignalE(OAIDealerDB_Models_Voucher summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV2VouchersVoucherCodeGetSignalError(OAIDealerDB_Models_Voucher summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vouchersDeleteSignalError() instead")
    void vouchersDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void vouchersDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vouchersGetSignalError() instead")
    void vouchersGetSignalE(OAIAPI_PagedResponse_DealerDB_Models_Voucher_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void vouchersGetSignalError(OAIAPI_PagedResponse_DealerDB_Models_Voucher_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vouchersGetVoucherHistorySignalError() instead")
    void vouchersGetVoucherHistorySignalE(OAIAPI_PagedResponse_DealerDB_Models_VoucherHistory_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void vouchersGetVoucherHistorySignalError(OAIAPI_PagedResponse_DealerDB_Models_VoucherHistory_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vouchersPostSignalError() instead")
    void vouchersPostSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void vouchersPostSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vouchersPutSignalError() instead")
    void vouchersPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void vouchersPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiV2VouchersVoucherCodeGetSignalErrorFull() instead")
    void apiV2VouchersVoucherCodeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV2VouchersVoucherCodeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vouchersDeleteSignalErrorFull() instead")
    void vouchersDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vouchersDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vouchersGetSignalErrorFull() instead")
    void vouchersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vouchersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vouchersGetVoucherHistorySignalErrorFull() instead")
    void vouchersGetVoucherHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vouchersGetVoucherHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vouchersPostSignalErrorFull() instead")
    void vouchersPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vouchersPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vouchersPutSignalErrorFull() instead")
    void vouchersPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vouchersPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
