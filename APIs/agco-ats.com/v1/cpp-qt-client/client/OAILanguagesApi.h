/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAILanguagesApi_H
#define OAI_OAILanguagesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAPI_IPagedResponse_GlobalResources_Shared_Models_Language_.h"
#include "OAIAPI_Models_ApiError.h"
#include "OAIGlobalResources_Shared_Models_Language.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAILanguagesApi : public QObject {
    Q_OBJECT

public:
    OAILanguagesApi(const int timeOut = 0);
    ~OAILanguagesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_global_resources_shared_models_language OAIGlobalResources_Shared_Models_Language [required]
    */
    virtual void languagesCreateLanguage(const OAIGlobalResources_Shared_Models_Language &oai_global_resources_shared_models_language);

    /**
    * @param[in]  locale_id qint32 [required]
    */
    virtual void languagesDeleteLanguage(const qint32 &locale_id);

    /**
    * @param[in]  locale_id qint32 [required]
    */
    virtual void languagesGetLanguage(const qint32 &locale_id);

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  include_deleted bool [optional]
    */
    virtual void languagesGetLanguages(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &include_deleted = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  locale_id qint32 [required]
    * @param[in]  oai_global_resources_shared_models_language OAIGlobalResources_Shared_Models_Language [required]
    */
    virtual void languagesUpdateLanguage(const qint32 &locale_id, const OAIGlobalResources_Shared_Models_Language &oai_global_resources_shared_models_language);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void languagesCreateLanguageCallback(OAIHttpRequestWorker *worker);
    void languagesDeleteLanguageCallback(OAIHttpRequestWorker *worker);
    void languagesGetLanguageCallback(OAIHttpRequestWorker *worker);
    void languagesGetLanguagesCallback(OAIHttpRequestWorker *worker);
    void languagesUpdateLanguageCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void languagesCreateLanguageSignal(qint32 summary);
    void languagesDeleteLanguageSignal();
    void languagesGetLanguageSignal(OAIGlobalResources_Shared_Models_Language summary);
    void languagesGetLanguagesSignal(OAIAPI_IPagedResponse_GlobalResources_Shared_Models_Language_ summary);
    void languagesUpdateLanguageSignal();


    void languagesCreateLanguageSignalFull(OAIHttpRequestWorker *worker, qint32 summary);
    void languagesDeleteLanguageSignalFull(OAIHttpRequestWorker *worker);
    void languagesGetLanguageSignalFull(OAIHttpRequestWorker *worker, OAIGlobalResources_Shared_Models_Language summary);
    void languagesGetLanguagesSignalFull(OAIHttpRequestWorker *worker, OAIAPI_IPagedResponse_GlobalResources_Shared_Models_Language_ summary);
    void languagesUpdateLanguageSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use languagesCreateLanguageSignalError() instead")
    void languagesCreateLanguageSignalE(qint32 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void languagesCreateLanguageSignalError(qint32 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use languagesDeleteLanguageSignalError() instead")
    void languagesDeleteLanguageSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void languagesDeleteLanguageSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use languagesGetLanguageSignalError() instead")
    void languagesGetLanguageSignalE(OAIGlobalResources_Shared_Models_Language summary, QNetworkReply::NetworkError error_type, QString error_str);
    void languagesGetLanguageSignalError(OAIGlobalResources_Shared_Models_Language summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use languagesGetLanguagesSignalError() instead")
    void languagesGetLanguagesSignalE(OAIAPI_IPagedResponse_GlobalResources_Shared_Models_Language_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void languagesGetLanguagesSignalError(OAIAPI_IPagedResponse_GlobalResources_Shared_Models_Language_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use languagesUpdateLanguageSignalError() instead")
    void languagesUpdateLanguageSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void languagesUpdateLanguageSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use languagesCreateLanguageSignalErrorFull() instead")
    void languagesCreateLanguageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void languagesCreateLanguageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use languagesDeleteLanguageSignalErrorFull() instead")
    void languagesDeleteLanguageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void languagesDeleteLanguageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use languagesGetLanguageSignalErrorFull() instead")
    void languagesGetLanguageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void languagesGetLanguageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use languagesGetLanguagesSignalErrorFull() instead")
    void languagesGetLanguagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void languagesGetLanguagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use languagesUpdateLanguageSignalErrorFull() instead")
    void languagesUpdateLanguageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void languagesUpdateLanguageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
