/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIContentDefinitionsApi_H
#define OAI_OAIContentDefinitionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAPI_Models_ApiError.h"
#include "OAIAPI_PagedResponse_ContentSubmission_Shared_BusinessEntities_ContentDefinitionAttribute_.h"
#include "OAIAPI_PagedResponse_ContentSubmission_Shared_BusinessEntities_ContentDefinition_.h"
#include "OAIContentSubmission_Shared_BusinessEntities_ContentDefinition.h"
#include "OAIContentSubmission_Shared_BusinessEntities_ContentDefinitionAttribute.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIContentDefinitionsApi : public QObject {
    Q_OBJECT

public:
    OAIContentDefinitionsApi(const int timeOut = 0);
    ~OAIContentDefinitionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  content_definition_id qint32 [required]
    */
    virtual void contentDefinitionsDeleteContentDefinition(const qint32 &content_definition_id);

    /**
    * @param[in]  content_definition_attribute_id qint32 [required]
    */
    virtual void contentDefinitionsDeleteContentDefinitionAttribute(const qint32 &content_definition_attribute_id);

    /**
    * @param[in]  content_definition_id qint32 [required]
    * @param[in]  include_attributes QString [optional]
    */
    virtual void contentDefinitionsGetContentDefinition(const qint32 &content_definition_id, const ::OpenAPI::OptionalParam<QString> &include_attributes = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  content_definition_id qint32 [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  name QString [optional]
    */
    virtual void contentDefinitionsGetContentDefinitionAttributes(const qint32 &content_definition_id, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  user_id qint32 [optional]
    * @param[in]  include_attributes QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  type_id qint32 [optional]
    * @param[in]  package_type_id QString [optional]
    */
    virtual void contentDefinitionsGetContentDefinitions(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &user_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &include_attributes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &type_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &package_type_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_content_submission_shared_business_entities_content_definition OAIContentSubmission_Shared_BusinessEntities_ContentDefinition [required]
    */
    virtual void contentDefinitionsPostContentDefinition(const OAIContentSubmission_Shared_BusinessEntities_ContentDefinition &oai_content_submission_shared_business_entities_content_definition);

    /**
    * @param[in]  content_definition_id qint32 [required]
    * @param[in]  oai_content_submission_shared_business_entities_content_definition_attribute OAIContentSubmission_Shared_BusinessEntities_ContentDefinitionAttribute [required]
    */
    virtual void contentDefinitionsPostContentDefinitionAttribute(const qint32 &content_definition_id, const OAIContentSubmission_Shared_BusinessEntities_ContentDefinitionAttribute &oai_content_submission_shared_business_entities_content_definition_attribute);

    /**
    * @param[in]  content_definition_id qint32 [required]
    * @param[in]  oai_content_submission_shared_business_entities_content_definition_attribute QList<OAIContentSubmission_Shared_BusinessEntities_ContentDefinitionAttribute> [required]
    */
    virtual void contentDefinitionsPostContentDefinitionAttributes(const qint32 &content_definition_id, const QList<OAIContentSubmission_Shared_BusinessEntities_ContentDefinitionAttribute> &oai_content_submission_shared_business_entities_content_definition_attribute);

    /**
    * @param[in]  content_definition_id qint32 [required]
    * @param[in]  oai_content_submission_shared_business_entities_content_definition OAIContentSubmission_Shared_BusinessEntities_ContentDefinition [required]
    */
    virtual void contentDefinitionsPutContentDefinition(const qint32 &content_definition_id, const OAIContentSubmission_Shared_BusinessEntities_ContentDefinition &oai_content_submission_shared_business_entities_content_definition);

    /**
    * @param[in]  content_definition_attribute_id qint32 [required]
    * @param[in]  oai_content_submission_shared_business_entities_content_definition_attribute OAIContentSubmission_Shared_BusinessEntities_ContentDefinitionAttribute [required]
    */
    virtual void contentDefinitionsPutContentDefinitionAttributeAsync(const qint32 &content_definition_attribute_id, const OAIContentSubmission_Shared_BusinessEntities_ContentDefinitionAttribute &oai_content_submission_shared_business_entities_content_definition_attribute);

    /**
    * @param[in]  oai_content_submission_shared_business_entities_content_definition_attribute QList<OAIContentSubmission_Shared_BusinessEntities_ContentDefinitionAttribute> [required]
    */
    virtual void contentDefinitionsPutContentDefinitionAttributes(const QList<OAIContentSubmission_Shared_BusinessEntities_ContentDefinitionAttribute> &oai_content_submission_shared_business_entities_content_definition_attribute);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void contentDefinitionsDeleteContentDefinitionCallback(OAIHttpRequestWorker *worker);
    void contentDefinitionsDeleteContentDefinitionAttributeCallback(OAIHttpRequestWorker *worker);
    void contentDefinitionsGetContentDefinitionCallback(OAIHttpRequestWorker *worker);
    void contentDefinitionsGetContentDefinitionAttributesCallback(OAIHttpRequestWorker *worker);
    void contentDefinitionsGetContentDefinitionsCallback(OAIHttpRequestWorker *worker);
    void contentDefinitionsPostContentDefinitionCallback(OAIHttpRequestWorker *worker);
    void contentDefinitionsPostContentDefinitionAttributeCallback(OAIHttpRequestWorker *worker);
    void contentDefinitionsPostContentDefinitionAttributesCallback(OAIHttpRequestWorker *worker);
    void contentDefinitionsPutContentDefinitionCallback(OAIHttpRequestWorker *worker);
    void contentDefinitionsPutContentDefinitionAttributeAsyncCallback(OAIHttpRequestWorker *worker);
    void contentDefinitionsPutContentDefinitionAttributesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void contentDefinitionsDeleteContentDefinitionSignal();
    void contentDefinitionsDeleteContentDefinitionAttributeSignal();
    void contentDefinitionsGetContentDefinitionSignal(OAIContentSubmission_Shared_BusinessEntities_ContentDefinition summary);
    void contentDefinitionsGetContentDefinitionAttributesSignal(OAIAPI_PagedResponse_ContentSubmission_Shared_BusinessEntities_ContentDefinitionAttribute_ summary);
    void contentDefinitionsGetContentDefinitionsSignal(OAIAPI_PagedResponse_ContentSubmission_Shared_BusinessEntities_ContentDefinition_ summary);
    void contentDefinitionsPostContentDefinitionSignal(qint32 summary);
    void contentDefinitionsPostContentDefinitionAttributeSignal(qint32 summary);
    void contentDefinitionsPostContentDefinitionAttributesSignal();
    void contentDefinitionsPutContentDefinitionSignal();
    void contentDefinitionsPutContentDefinitionAttributeAsyncSignal();
    void contentDefinitionsPutContentDefinitionAttributesSignal();


    void contentDefinitionsDeleteContentDefinitionSignalFull(OAIHttpRequestWorker *worker);
    void contentDefinitionsDeleteContentDefinitionAttributeSignalFull(OAIHttpRequestWorker *worker);
    void contentDefinitionsGetContentDefinitionSignalFull(OAIHttpRequestWorker *worker, OAIContentSubmission_Shared_BusinessEntities_ContentDefinition summary);
    void contentDefinitionsGetContentDefinitionAttributesSignalFull(OAIHttpRequestWorker *worker, OAIAPI_PagedResponse_ContentSubmission_Shared_BusinessEntities_ContentDefinitionAttribute_ summary);
    void contentDefinitionsGetContentDefinitionsSignalFull(OAIHttpRequestWorker *worker, OAIAPI_PagedResponse_ContentSubmission_Shared_BusinessEntities_ContentDefinition_ summary);
    void contentDefinitionsPostContentDefinitionSignalFull(OAIHttpRequestWorker *worker, qint32 summary);
    void contentDefinitionsPostContentDefinitionAttributeSignalFull(OAIHttpRequestWorker *worker, qint32 summary);
    void contentDefinitionsPostContentDefinitionAttributesSignalFull(OAIHttpRequestWorker *worker);
    void contentDefinitionsPutContentDefinitionSignalFull(OAIHttpRequestWorker *worker);
    void contentDefinitionsPutContentDefinitionAttributeAsyncSignalFull(OAIHttpRequestWorker *worker);
    void contentDefinitionsPutContentDefinitionAttributesSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use contentDefinitionsDeleteContentDefinitionSignalError() instead")
    void contentDefinitionsDeleteContentDefinitionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void contentDefinitionsDeleteContentDefinitionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contentDefinitionsDeleteContentDefinitionAttributeSignalError() instead")
    void contentDefinitionsDeleteContentDefinitionAttributeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void contentDefinitionsDeleteContentDefinitionAttributeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contentDefinitionsGetContentDefinitionSignalError() instead")
    void contentDefinitionsGetContentDefinitionSignalE(OAIContentSubmission_Shared_BusinessEntities_ContentDefinition summary, QNetworkReply::NetworkError error_type, QString error_str);
    void contentDefinitionsGetContentDefinitionSignalError(OAIContentSubmission_Shared_BusinessEntities_ContentDefinition summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contentDefinitionsGetContentDefinitionAttributesSignalError() instead")
    void contentDefinitionsGetContentDefinitionAttributesSignalE(OAIAPI_PagedResponse_ContentSubmission_Shared_BusinessEntities_ContentDefinitionAttribute_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void contentDefinitionsGetContentDefinitionAttributesSignalError(OAIAPI_PagedResponse_ContentSubmission_Shared_BusinessEntities_ContentDefinitionAttribute_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contentDefinitionsGetContentDefinitionsSignalError() instead")
    void contentDefinitionsGetContentDefinitionsSignalE(OAIAPI_PagedResponse_ContentSubmission_Shared_BusinessEntities_ContentDefinition_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void contentDefinitionsGetContentDefinitionsSignalError(OAIAPI_PagedResponse_ContentSubmission_Shared_BusinessEntities_ContentDefinition_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contentDefinitionsPostContentDefinitionSignalError() instead")
    void contentDefinitionsPostContentDefinitionSignalE(qint32 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void contentDefinitionsPostContentDefinitionSignalError(qint32 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contentDefinitionsPostContentDefinitionAttributeSignalError() instead")
    void contentDefinitionsPostContentDefinitionAttributeSignalE(qint32 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void contentDefinitionsPostContentDefinitionAttributeSignalError(qint32 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contentDefinitionsPostContentDefinitionAttributesSignalError() instead")
    void contentDefinitionsPostContentDefinitionAttributesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void contentDefinitionsPostContentDefinitionAttributesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contentDefinitionsPutContentDefinitionSignalError() instead")
    void contentDefinitionsPutContentDefinitionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void contentDefinitionsPutContentDefinitionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contentDefinitionsPutContentDefinitionAttributeAsyncSignalError() instead")
    void contentDefinitionsPutContentDefinitionAttributeAsyncSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void contentDefinitionsPutContentDefinitionAttributeAsyncSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contentDefinitionsPutContentDefinitionAttributesSignalError() instead")
    void contentDefinitionsPutContentDefinitionAttributesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void contentDefinitionsPutContentDefinitionAttributesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use contentDefinitionsDeleteContentDefinitionSignalErrorFull() instead")
    void contentDefinitionsDeleteContentDefinitionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contentDefinitionsDeleteContentDefinitionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contentDefinitionsDeleteContentDefinitionAttributeSignalErrorFull() instead")
    void contentDefinitionsDeleteContentDefinitionAttributeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contentDefinitionsDeleteContentDefinitionAttributeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contentDefinitionsGetContentDefinitionSignalErrorFull() instead")
    void contentDefinitionsGetContentDefinitionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contentDefinitionsGetContentDefinitionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contentDefinitionsGetContentDefinitionAttributesSignalErrorFull() instead")
    void contentDefinitionsGetContentDefinitionAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contentDefinitionsGetContentDefinitionAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contentDefinitionsGetContentDefinitionsSignalErrorFull() instead")
    void contentDefinitionsGetContentDefinitionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contentDefinitionsGetContentDefinitionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contentDefinitionsPostContentDefinitionSignalErrorFull() instead")
    void contentDefinitionsPostContentDefinitionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contentDefinitionsPostContentDefinitionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contentDefinitionsPostContentDefinitionAttributeSignalErrorFull() instead")
    void contentDefinitionsPostContentDefinitionAttributeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contentDefinitionsPostContentDefinitionAttributeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contentDefinitionsPostContentDefinitionAttributesSignalErrorFull() instead")
    void contentDefinitionsPostContentDefinitionAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contentDefinitionsPostContentDefinitionAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contentDefinitionsPutContentDefinitionSignalErrorFull() instead")
    void contentDefinitionsPutContentDefinitionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contentDefinitionsPutContentDefinitionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contentDefinitionsPutContentDefinitionAttributeAsyncSignalErrorFull() instead")
    void contentDefinitionsPutContentDefinitionAttributeAsyncSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contentDefinitionsPutContentDefinitionAttributeAsyncSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contentDefinitionsPutContentDefinitionAttributesSignalErrorFull() instead")
    void contentDefinitionsPutContentDefinitionAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contentDefinitionsPutContentDefinitionAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
