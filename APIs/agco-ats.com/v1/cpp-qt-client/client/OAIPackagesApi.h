/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPackagesApi_H
#define OAI_OAIPackagesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAPI_Models_ApiError.h"
#include "OAIAPI_PagedResponse_UpdateSystem_Models_Package_.h"
#include "OAIUpdateSystem_Models_Package.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPackagesApi : public QObject {
    Q_OBJECT

public:
    OAIPackagesApi(const int timeOut = 0);
    ~OAIPackagesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    */
    virtual void packagesDeletePackage(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void packagesGetPackage(const QString &id);

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  package_type_id QString [optional]
    * @param[in]  version qint32 [optional]
    * @param[in]  released bool [optional]
    */
    virtual void packagesGetPackages(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &package_type_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &version = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &released = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  oai_update_system_models_package OAIUpdateSystem_Models_Package [required]
    */
    virtual void packagesPostPackage(const OAIUpdateSystem_Models_Package &oai_update_system_models_package);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_update_system_models_package OAIUpdateSystem_Models_Package [required]
    */
    virtual void packagesPutPackage(const QString &id, const OAIUpdateSystem_Models_Package &oai_update_system_models_package);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void packagesDeletePackageCallback(OAIHttpRequestWorker *worker);
    void packagesGetPackageCallback(OAIHttpRequestWorker *worker);
    void packagesGetPackagesCallback(OAIHttpRequestWorker *worker);
    void packagesPostPackageCallback(OAIHttpRequestWorker *worker);
    void packagesPutPackageCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void packagesDeletePackageSignal();
    void packagesGetPackageSignal(OAIUpdateSystem_Models_Package summary);
    void packagesGetPackagesSignal(OAIAPI_PagedResponse_UpdateSystem_Models_Package_ summary);
    void packagesPostPackageSignal(QString summary);
    void packagesPutPackageSignal();


    void packagesDeletePackageSignalFull(OAIHttpRequestWorker *worker);
    void packagesGetPackageSignalFull(OAIHttpRequestWorker *worker, OAIUpdateSystem_Models_Package summary);
    void packagesGetPackagesSignalFull(OAIHttpRequestWorker *worker, OAIAPI_PagedResponse_UpdateSystem_Models_Package_ summary);
    void packagesPostPackageSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void packagesPutPackageSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use packagesDeletePackageSignalError() instead")
    void packagesDeletePackageSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void packagesDeletePackageSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use packagesGetPackageSignalError() instead")
    void packagesGetPackageSignalE(OAIUpdateSystem_Models_Package summary, QNetworkReply::NetworkError error_type, QString error_str);
    void packagesGetPackageSignalError(OAIUpdateSystem_Models_Package summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use packagesGetPackagesSignalError() instead")
    void packagesGetPackagesSignalE(OAIAPI_PagedResponse_UpdateSystem_Models_Package_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void packagesGetPackagesSignalError(OAIAPI_PagedResponse_UpdateSystem_Models_Package_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use packagesPostPackageSignalError() instead")
    void packagesPostPackageSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void packagesPostPackageSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use packagesPutPackageSignalError() instead")
    void packagesPutPackageSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void packagesPutPackageSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use packagesDeletePackageSignalErrorFull() instead")
    void packagesDeletePackageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void packagesDeletePackageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use packagesGetPackageSignalErrorFull() instead")
    void packagesGetPackageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void packagesGetPackageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use packagesGetPackagesSignalErrorFull() instead")
    void packagesGetPackagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void packagesGetPackagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use packagesPostPackageSignalErrorFull() instead")
    void packagesPostPackageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void packagesPostPackageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use packagesPutPackageSignalErrorFull() instead")
    void packagesPutPackageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void packagesPutPackageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
