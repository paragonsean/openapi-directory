/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIJobRunsApi_H
#define OAI_OAIJobRunsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAPI_Models_ApiError.h"
#include "OAIAPI_PagedResponse_BuildSystem_Shared_DTO_JobRun_.h"
#include "OAIBuildSystem_Shared_DTO_JobRun.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIJobRunsApi : public QObject {
    Q_OBJECT

public:
    OAIJobRunsApi(const int timeOut = 0);
    ~OAIJobRunsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  job_run_id qint32 [required]
    */
    virtual void jobRunsDeleteJobRun(const qint32 &job_run_id);

    /**
    * @param[in]  job_run_id qint32 [required]
    * @param[in]  include_activity_run_details bool [optional]
    */
    virtual void jobRunsGetJobRun(const qint32 &job_run_id, const ::OpenAPI::OptionalParam<bool> &include_activity_run_details = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  include_activity_run_details bool [optional]
    */
    virtual void jobRunsGetJobRuns(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &include_activity_run_details = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  oai_build_system_shared_dto_job_run OAIBuildSystem_Shared_DTO_JobRun [required]
    */
    virtual void jobRunsPostJobRun(const OAIBuildSystem_Shared_DTO_JobRun &oai_build_system_shared_dto_job_run);

    /**
    * @param[in]  job_run_id qint32 [required]
    * @param[in]  oai_build_system_shared_dto_job_run OAIBuildSystem_Shared_DTO_JobRun [required]
    */
    virtual void jobRunsPutJobRun(const qint32 &job_run_id, const OAIBuildSystem_Shared_DTO_JobRun &oai_build_system_shared_dto_job_run);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void jobRunsDeleteJobRunCallback(OAIHttpRequestWorker *worker);
    void jobRunsGetJobRunCallback(OAIHttpRequestWorker *worker);
    void jobRunsGetJobRunsCallback(OAIHttpRequestWorker *worker);
    void jobRunsPostJobRunCallback(OAIHttpRequestWorker *worker);
    void jobRunsPutJobRunCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void jobRunsDeleteJobRunSignal();
    void jobRunsGetJobRunSignal(OAIBuildSystem_Shared_DTO_JobRun summary);
    void jobRunsGetJobRunsSignal(OAIAPI_PagedResponse_BuildSystem_Shared_DTO_JobRun_ summary);
    void jobRunsPostJobRunSignal(qint32 summary);
    void jobRunsPutJobRunSignal();


    void jobRunsDeleteJobRunSignalFull(OAIHttpRequestWorker *worker);
    void jobRunsGetJobRunSignalFull(OAIHttpRequestWorker *worker, OAIBuildSystem_Shared_DTO_JobRun summary);
    void jobRunsGetJobRunsSignalFull(OAIHttpRequestWorker *worker, OAIAPI_PagedResponse_BuildSystem_Shared_DTO_JobRun_ summary);
    void jobRunsPostJobRunSignalFull(OAIHttpRequestWorker *worker, qint32 summary);
    void jobRunsPutJobRunSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use jobRunsDeleteJobRunSignalError() instead")
    void jobRunsDeleteJobRunSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void jobRunsDeleteJobRunSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobRunsGetJobRunSignalError() instead")
    void jobRunsGetJobRunSignalE(OAIBuildSystem_Shared_DTO_JobRun summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobRunsGetJobRunSignalError(OAIBuildSystem_Shared_DTO_JobRun summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobRunsGetJobRunsSignalError() instead")
    void jobRunsGetJobRunsSignalE(OAIAPI_PagedResponse_BuildSystem_Shared_DTO_JobRun_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobRunsGetJobRunsSignalError(OAIAPI_PagedResponse_BuildSystem_Shared_DTO_JobRun_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobRunsPostJobRunSignalError() instead")
    void jobRunsPostJobRunSignalE(qint32 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobRunsPostJobRunSignalError(qint32 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobRunsPutJobRunSignalError() instead")
    void jobRunsPutJobRunSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void jobRunsPutJobRunSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use jobRunsDeleteJobRunSignalErrorFull() instead")
    void jobRunsDeleteJobRunSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobRunsDeleteJobRunSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobRunsGetJobRunSignalErrorFull() instead")
    void jobRunsGetJobRunSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobRunsGetJobRunSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobRunsGetJobRunsSignalErrorFull() instead")
    void jobRunsGetJobRunsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobRunsGetJobRunsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobRunsPostJobRunSignalErrorFull() instead")
    void jobRunsPostJobRunSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobRunsPostJobRunSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobRunsPutJobRunSignalErrorFull() instead")
    void jobRunsPutJobRunSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobRunsPutJobRunSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
