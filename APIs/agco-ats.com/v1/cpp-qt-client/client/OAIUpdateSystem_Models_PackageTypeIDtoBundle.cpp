/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateSystem_Models_PackageTypeIDtoBundle.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateSystem_Models_PackageTypeIDtoBundle::OAIUpdateSystem_Models_PackageTypeIDtoBundle(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateSystem_Models_PackageTypeIDtoBundle::OAIUpdateSystem_Models_PackageTypeIDtoBundle() {
    this->initializeModel();
}

OAIUpdateSystem_Models_PackageTypeIDtoBundle::~OAIUpdateSystem_Models_PackageTypeIDtoBundle() {}

void OAIUpdateSystem_Models_PackageTypeIDtoBundle::initializeModel() {

    m_bundle_id_isSet = false;
    m_bundle_id_isValid = false;

    m_package_type_id_isSet = false;
    m_package_type_id_isValid = false;

    m_package_version_isSet = false;
    m_package_version_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_subscription_type_isSet = false;
    m_subscription_type_isValid = false;
}

void OAIUpdateSystem_Models_PackageTypeIDtoBundle::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateSystem_Models_PackageTypeIDtoBundle::fromJsonObject(QJsonObject json) {

    m_bundle_id_isValid = ::OpenAPI::fromJsonValue(m_bundle_id, json[QString("BundleID")]);
    m_bundle_id_isSet = !json[QString("BundleID")].isNull() && m_bundle_id_isValid;

    m_package_type_id_isValid = ::OpenAPI::fromJsonValue(m_package_type_id, json[QString("PackageTypeID")]);
    m_package_type_id_isSet = !json[QString("PackageTypeID")].isNull() && m_package_type_id_isValid;

    m_package_version_isValid = ::OpenAPI::fromJsonValue(m_package_version, json[QString("PackageVersion")]);
    m_package_version_isSet = !json[QString("PackageVersion")].isNull() && m_package_version_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("Priority")]);
    m_priority_isSet = !json[QString("Priority")].isNull() && m_priority_isValid;

    m_subscription_type_isValid = ::OpenAPI::fromJsonValue(m_subscription_type, json[QString("SubscriptionType")]);
    m_subscription_type_isSet = !json[QString("SubscriptionType")].isNull() && m_subscription_type_isValid;
}

QString OAIUpdateSystem_Models_PackageTypeIDtoBundle::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateSystem_Models_PackageTypeIDtoBundle::asJsonObject() const {
    QJsonObject obj;
    if (m_bundle_id_isSet) {
        obj.insert(QString("BundleID"), ::OpenAPI::toJsonValue(m_bundle_id));
    }
    if (m_package_type_id_isSet) {
        obj.insert(QString("PackageTypeID"), ::OpenAPI::toJsonValue(m_package_type_id));
    }
    if (m_package_version_isSet) {
        obj.insert(QString("PackageVersion"), ::OpenAPI::toJsonValue(m_package_version));
    }
    if (m_priority_isSet) {
        obj.insert(QString("Priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_subscription_type_isSet) {
        obj.insert(QString("SubscriptionType"), ::OpenAPI::toJsonValue(m_subscription_type));
    }
    return obj;
}

QString OAIUpdateSystem_Models_PackageTypeIDtoBundle::getBundleId() const {
    return m_bundle_id;
}
void OAIUpdateSystem_Models_PackageTypeIDtoBundle::setBundleId(const QString &bundle_id) {
    m_bundle_id = bundle_id;
    m_bundle_id_isSet = true;
}

bool OAIUpdateSystem_Models_PackageTypeIDtoBundle::is_bundle_id_Set() const{
    return m_bundle_id_isSet;
}

bool OAIUpdateSystem_Models_PackageTypeIDtoBundle::is_bundle_id_Valid() const{
    return m_bundle_id_isValid;
}

QString OAIUpdateSystem_Models_PackageTypeIDtoBundle::getPackageTypeId() const {
    return m_package_type_id;
}
void OAIUpdateSystem_Models_PackageTypeIDtoBundle::setPackageTypeId(const QString &package_type_id) {
    m_package_type_id = package_type_id;
    m_package_type_id_isSet = true;
}

bool OAIUpdateSystem_Models_PackageTypeIDtoBundle::is_package_type_id_Set() const{
    return m_package_type_id_isSet;
}

bool OAIUpdateSystem_Models_PackageTypeIDtoBundle::is_package_type_id_Valid() const{
    return m_package_type_id_isValid;
}

qint32 OAIUpdateSystem_Models_PackageTypeIDtoBundle::getPackageVersion() const {
    return m_package_version;
}
void OAIUpdateSystem_Models_PackageTypeIDtoBundle::setPackageVersion(const qint32 &package_version) {
    m_package_version = package_version;
    m_package_version_isSet = true;
}

bool OAIUpdateSystem_Models_PackageTypeIDtoBundle::is_package_version_Set() const{
    return m_package_version_isSet;
}

bool OAIUpdateSystem_Models_PackageTypeIDtoBundle::is_package_version_Valid() const{
    return m_package_version_isValid;
}

qint32 OAIUpdateSystem_Models_PackageTypeIDtoBundle::getPriority() const {
    return m_priority;
}
void OAIUpdateSystem_Models_PackageTypeIDtoBundle::setPriority(const qint32 &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAIUpdateSystem_Models_PackageTypeIDtoBundle::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAIUpdateSystem_Models_PackageTypeIDtoBundle::is_priority_Valid() const{
    return m_priority_isValid;
}

QString OAIUpdateSystem_Models_PackageTypeIDtoBundle::getSubscriptionType() const {
    return m_subscription_type;
}
void OAIUpdateSystem_Models_PackageTypeIDtoBundle::setSubscriptionType(const QString &subscription_type) {
    m_subscription_type = subscription_type;
    m_subscription_type_isSet = true;
}

bool OAIUpdateSystem_Models_PackageTypeIDtoBundle::is_subscription_type_Set() const{
    return m_subscription_type_isSet;
}

bool OAIUpdateSystem_Models_PackageTypeIDtoBundle::is_subscription_type_Valid() const{
    return m_subscription_type_isValid;
}

bool OAIUpdateSystem_Models_PackageTypeIDtoBundle::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bundle_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateSystem_Models_PackageTypeIDtoBundle::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_bundle_id_isValid && m_package_type_id_isValid && m_package_version_isValid && m_priority_isValid && true;
}

} // namespace OpenAPI
