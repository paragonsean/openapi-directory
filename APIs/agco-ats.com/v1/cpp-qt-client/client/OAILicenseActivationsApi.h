/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAILicenseActivationsApi_H
#define OAI_OAILicenseActivationsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAPI_Models_ApiError.h"
#include "OAIDealerDB_Models_EDTLiteRegistration.h"
#include "OAIDealerDB_Models_LicenseActivation.h"
#include "OAIDealerDB_Models_LicenseActivationConfirm.h"
#include "OAIDealerDB_Models_LicenseActivationCreate.h"
#include "OAIDealerDB_Models_LicenseActivationUpdate.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAILicenseActivationsApi : public QObject {
    Q_OBJECT

public:
    OAILicenseActivationsApi(const int timeOut = 0);
    ~OAILicenseActivationsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_dealer_db_models_license_activation_create OAIDealerDB_Models_LicenseActivationCreate [required]
    */
    virtual void licenseActivationsPost(const OAIDealerDB_Models_LicenseActivationCreate &oai_dealer_db_models_license_activation_create);

    /**
    * @param[in]  oai_dealer_db_models_edt_lite_registration OAIDealerDB_Models_EDTLiteRegistration [required]
    */
    virtual void licenseActivationsPostRegisterEDTLite(const OAIDealerDB_Models_EDTLiteRegistration &oai_dealer_db_models_edt_lite_registration);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_dealer_db_models_license_activation_update OAIDealerDB_Models_LicenseActivationUpdate [required]
    */
    virtual void licenseActivationsPut(const QString &id, const OAIDealerDB_Models_LicenseActivationUpdate &oai_dealer_db_models_license_activation_update);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_dealer_db_models_license_activation_confirm OAIDealerDB_Models_LicenseActivationConfirm [required]
    */
    virtual void licenseActivationsPutConfirm(const QString &id, const OAIDealerDB_Models_LicenseActivationConfirm &oai_dealer_db_models_license_activation_confirm);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void licenseActivationsPostCallback(OAIHttpRequestWorker *worker);
    void licenseActivationsPostRegisterEDTLiteCallback(OAIHttpRequestWorker *worker);
    void licenseActivationsPutCallback(OAIHttpRequestWorker *worker);
    void licenseActivationsPutConfirmCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void licenseActivationsPostSignal(OAIDealerDB_Models_LicenseActivation summary);
    void licenseActivationsPostRegisterEDTLiteSignal(bool summary);
    void licenseActivationsPutSignal(OAIDealerDB_Models_LicenseActivation summary);
    void licenseActivationsPutConfirmSignal();


    void licenseActivationsPostSignalFull(OAIHttpRequestWorker *worker, OAIDealerDB_Models_LicenseActivation summary);
    void licenseActivationsPostRegisterEDTLiteSignalFull(OAIHttpRequestWorker *worker, bool summary);
    void licenseActivationsPutSignalFull(OAIHttpRequestWorker *worker, OAIDealerDB_Models_LicenseActivation summary);
    void licenseActivationsPutConfirmSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use licenseActivationsPostSignalError() instead")
    void licenseActivationsPostSignalE(OAIDealerDB_Models_LicenseActivation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void licenseActivationsPostSignalError(OAIDealerDB_Models_LicenseActivation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use licenseActivationsPostRegisterEDTLiteSignalError() instead")
    void licenseActivationsPostRegisterEDTLiteSignalE(bool summary, QNetworkReply::NetworkError error_type, QString error_str);
    void licenseActivationsPostRegisterEDTLiteSignalError(bool summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use licenseActivationsPutSignalError() instead")
    void licenseActivationsPutSignalE(OAIDealerDB_Models_LicenseActivation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void licenseActivationsPutSignalError(OAIDealerDB_Models_LicenseActivation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use licenseActivationsPutConfirmSignalError() instead")
    void licenseActivationsPutConfirmSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void licenseActivationsPutConfirmSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use licenseActivationsPostSignalErrorFull() instead")
    void licenseActivationsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void licenseActivationsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use licenseActivationsPostRegisterEDTLiteSignalErrorFull() instead")
    void licenseActivationsPostRegisterEDTLiteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void licenseActivationsPostRegisterEDTLiteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use licenseActivationsPutSignalErrorFull() instead")
    void licenseActivationsPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void licenseActivationsPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use licenseActivationsPutConfirmSignalErrorFull() instead")
    void licenseActivationsPutConfirmSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void licenseActivationsPutConfirmSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
