/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGlobalResources_Shared_Models_TranslationSet.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGlobalResources_Shared_Models_TranslationSet::OAIGlobalResources_Shared_Models_TranslationSet(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGlobalResources_Shared_Models_TranslationSet::OAIGlobalResources_Shared_Models_TranslationSet() {
    this->initializeModel();
}

OAIGlobalResources_Shared_Models_TranslationSet::~OAIGlobalResources_Shared_Models_TranslationSet() {}

void OAIGlobalResources_Shared_Models_TranslationSet::initializeModel() {

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_file_ids_isSet = false;
    m_file_ids_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_in_date_isSet = false;
    m_in_date_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_out_date_isSet = false;
    m_out_date_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_translation_request_id_isSet = false;
    m_translation_request_id_isValid = false;
}

void OAIGlobalResources_Shared_Models_TranslationSet::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGlobalResources_Shared_Models_TranslationSet::fromJsonObject(QJsonObject json) {

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("Attributes")]);
    m_attributes_isSet = !json[QString("Attributes")].isNull() && m_attributes_isValid;

    m_file_ids_isValid = ::OpenAPI::fromJsonValue(m_file_ids, json[QString("FileIDs")]);
    m_file_ids_isSet = !json[QString("FileIDs")].isNull() && m_file_ids_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_in_date_isValid = ::OpenAPI::fromJsonValue(m_in_date, json[QString("InDate")]);
    m_in_date_isSet = !json[QString("InDate")].isNull() && m_in_date_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("Notes")]);
    m_notes_isSet = !json[QString("Notes")].isNull() && m_notes_isValid;

    m_out_date_isValid = ::OpenAPI::fromJsonValue(m_out_date, json[QString("OutDate")]);
    m_out_date_isSet = !json[QString("OutDate")].isNull() && m_out_date_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;

    m_translation_request_id_isValid = ::OpenAPI::fromJsonValue(m_translation_request_id, json[QString("TranslationRequestID")]);
    m_translation_request_id_isSet = !json[QString("TranslationRequestID")].isNull() && m_translation_request_id_isValid;
}

QString OAIGlobalResources_Shared_Models_TranslationSet::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGlobalResources_Shared_Models_TranslationSet::asJsonObject() const {
    QJsonObject obj;
    if (m_attributes.size() > 0) {
        obj.insert(QString("Attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_file_ids.size() > 0) {
        obj.insert(QString("FileIDs"), ::OpenAPI::toJsonValue(m_file_ids));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_in_date_isSet) {
        obj.insert(QString("InDate"), ::OpenAPI::toJsonValue(m_in_date));
    }
    if (m_notes_isSet) {
        obj.insert(QString("Notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_out_date_isSet) {
        obj.insert(QString("OutDate"), ::OpenAPI::toJsonValue(m_out_date));
    }
    if (m_state_isSet) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_translation_request_id_isSet) {
        obj.insert(QString("TranslationRequestID"), ::OpenAPI::toJsonValue(m_translation_request_id));
    }
    return obj;
}

QList<OAIGlobalResources_Shared_Models_TranslationSetAttribute> OAIGlobalResources_Shared_Models_TranslationSet::getAttributes() const {
    return m_attributes;
}
void OAIGlobalResources_Shared_Models_TranslationSet::setAttributes(const QList<OAIGlobalResources_Shared_Models_TranslationSetAttribute> &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIGlobalResources_Shared_Models_TranslationSet::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIGlobalResources_Shared_Models_TranslationSet::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QList<QString> OAIGlobalResources_Shared_Models_TranslationSet::getFileIds() const {
    return m_file_ids;
}
void OAIGlobalResources_Shared_Models_TranslationSet::setFileIds(const QList<QString> &file_ids) {
    m_file_ids = file_ids;
    m_file_ids_isSet = true;
}

bool OAIGlobalResources_Shared_Models_TranslationSet::is_file_ids_Set() const{
    return m_file_ids_isSet;
}

bool OAIGlobalResources_Shared_Models_TranslationSet::is_file_ids_Valid() const{
    return m_file_ids_isValid;
}

qint32 OAIGlobalResources_Shared_Models_TranslationSet::getId() const {
    return m_id;
}
void OAIGlobalResources_Shared_Models_TranslationSet::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGlobalResources_Shared_Models_TranslationSet::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGlobalResources_Shared_Models_TranslationSet::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIGlobalResources_Shared_Models_TranslationSet::getInDate() const {
    return m_in_date;
}
void OAIGlobalResources_Shared_Models_TranslationSet::setInDate(const QDateTime &in_date) {
    m_in_date = in_date;
    m_in_date_isSet = true;
}

bool OAIGlobalResources_Shared_Models_TranslationSet::is_in_date_Set() const{
    return m_in_date_isSet;
}

bool OAIGlobalResources_Shared_Models_TranslationSet::is_in_date_Valid() const{
    return m_in_date_isValid;
}

QString OAIGlobalResources_Shared_Models_TranslationSet::getNotes() const {
    return m_notes;
}
void OAIGlobalResources_Shared_Models_TranslationSet::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIGlobalResources_Shared_Models_TranslationSet::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIGlobalResources_Shared_Models_TranslationSet::is_notes_Valid() const{
    return m_notes_isValid;
}

QDateTime OAIGlobalResources_Shared_Models_TranslationSet::getOutDate() const {
    return m_out_date;
}
void OAIGlobalResources_Shared_Models_TranslationSet::setOutDate(const QDateTime &out_date) {
    m_out_date = out_date;
    m_out_date_isSet = true;
}

bool OAIGlobalResources_Shared_Models_TranslationSet::is_out_date_Set() const{
    return m_out_date_isSet;
}

bool OAIGlobalResources_Shared_Models_TranslationSet::is_out_date_Valid() const{
    return m_out_date_isValid;
}

QString OAIGlobalResources_Shared_Models_TranslationSet::getState() const {
    return m_state;
}
void OAIGlobalResources_Shared_Models_TranslationSet::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIGlobalResources_Shared_Models_TranslationSet::is_state_Set() const{
    return m_state_isSet;
}

bool OAIGlobalResources_Shared_Models_TranslationSet::is_state_Valid() const{
    return m_state_isValid;
}

qint32 OAIGlobalResources_Shared_Models_TranslationSet::getTranslationRequestId() const {
    return m_translation_request_id;
}
void OAIGlobalResources_Shared_Models_TranslationSet::setTranslationRequestId(const qint32 &translation_request_id) {
    m_translation_request_id = translation_request_id;
    m_translation_request_id_isSet = true;
}

bool OAIGlobalResources_Shared_Models_TranslationSet::is_translation_request_id_Set() const{
    return m_translation_request_id_isSet;
}

bool OAIGlobalResources_Shared_Models_TranslationSet::is_translation_request_id_Valid() const{
    return m_translation_request_id_isValid;
}

bool OAIGlobalResources_Shared_Models_TranslationSet::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_out_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_translation_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGlobalResources_Shared_Models_TranslationSet::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_file_ids_isValid && m_state_isValid && true;
}

} // namespace OpenAPI
