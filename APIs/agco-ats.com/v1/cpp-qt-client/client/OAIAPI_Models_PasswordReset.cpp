/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAPI_Models_PasswordReset.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAPI_Models_PasswordReset::OAIAPI_Models_PasswordReset(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAPI_Models_PasswordReset::OAIAPI_Models_PasswordReset() {
    this->initializeModel();
}

OAIAPI_Models_PasswordReset::~OAIAPI_Models_PasswordReset() {}

void OAIAPI_Models_PasswordReset::initializeModel() {

    m_new_password_isSet = false;
    m_new_password_isValid = false;

    m_token_isSet = false;
    m_token_isValid = false;
}

void OAIAPI_Models_PasswordReset::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAPI_Models_PasswordReset::fromJsonObject(QJsonObject json) {

    m_new_password_isValid = ::OpenAPI::fromJsonValue(m_new_password, json[QString("NewPassword")]);
    m_new_password_isSet = !json[QString("NewPassword")].isNull() && m_new_password_isValid;

    m_token_isValid = ::OpenAPI::fromJsonValue(m_token, json[QString("Token")]);
    m_token_isSet = !json[QString("Token")].isNull() && m_token_isValid;
}

QString OAIAPI_Models_PasswordReset::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAPI_Models_PasswordReset::asJsonObject() const {
    QJsonObject obj;
    if (m_new_password_isSet) {
        obj.insert(QString("NewPassword"), ::OpenAPI::toJsonValue(m_new_password));
    }
    if (m_token_isSet) {
        obj.insert(QString("Token"), ::OpenAPI::toJsonValue(m_token));
    }
    return obj;
}

QString OAIAPI_Models_PasswordReset::getNewPassword() const {
    return m_new_password;
}
void OAIAPI_Models_PasswordReset::setNewPassword(const QString &new_password) {
    m_new_password = new_password;
    m_new_password_isSet = true;
}

bool OAIAPI_Models_PasswordReset::is_new_password_Set() const{
    return m_new_password_isSet;
}

bool OAIAPI_Models_PasswordReset::is_new_password_Valid() const{
    return m_new_password_isValid;
}

QString OAIAPI_Models_PasswordReset::getToken() const {
    return m_token;
}
void OAIAPI_Models_PasswordReset::setToken(const QString &token) {
    m_token = token;
    m_token_isSet = true;
}

bool OAIAPI_Models_PasswordReset::is_token_Set() const{
    return m_token_isSet;
}

bool OAIAPI_Models_PasswordReset::is_token_Valid() const{
    return m_token_isValid;
}

bool OAIAPI_Models_PasswordReset::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_new_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAPI_Models_PasswordReset::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_new_password_isValid && m_token_isValid && true;
}

} // namespace OpenAPI
