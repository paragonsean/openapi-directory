/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAuthorizationCategoriesApi_H
#define OAI_OAIAuthorizationCategoriesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAPI_IPagedResponse_AuthorizationCodes_Shared_Models_CategoryUserReport_.h"
#include "OAIAPI_IPagedResponse_AuthorizationCodes_Shared_Models_Category_.h"
#include "OAIAPI_Models_ApiError.h"
#include "OAIAuthorizationCodes_Shared_Models_Category.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAuthorizationCategoriesApi : public QObject {
    Q_OBJECT

public:
    OAIAuthorizationCategoriesApi(const int timeOut = 0);
    ~OAIAuthorizationCategoriesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    * @param[in]  user_id qint32 [required]
    */
    virtual void authorizationCategoriesAddUser(const QString &id, const qint32 &user_id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void authorizationCategoriesDelete(const QString &id);

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  user_id qint32 [optional]
    * @param[in]  definition_id QString [optional]
    */
    virtual void authorizationCategoriesGet(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &user_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &definition_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  user_ids QString [optional]
    * @param[in]  category_ids QString [optional]
    * @param[in]  include_categories bool [optional]
    * @param[in]  include_users bool [optional]
    * @param[in]  user_search QString [optional]
    */
    virtual void authorizationCategoriesGetUsers(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &user_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &category_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_categories = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_users = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &user_search = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_authorization_codes_shared_models_category OAIAuthorizationCodes_Shared_Models_Category [required]
    */
    virtual void authorizationCategoriesPost(const OAIAuthorizationCodes_Shared_Models_Category &oai_authorization_codes_shared_models_category);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_authorization_codes_shared_models_category OAIAuthorizationCodes_Shared_Models_Category [required]
    */
    virtual void authorizationCategoriesPut(const QString &id, const OAIAuthorizationCodes_Shared_Models_Category &oai_authorization_codes_shared_models_category);

    /**
    * @param[in]  id QString [required]
    * @param[in]  user_id qint32 [required]
    */
    virtual void authorizationCategoriesRemoveUser(const QString &id, const qint32 &user_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void authorizationCategoriesAddUserCallback(OAIHttpRequestWorker *worker);
    void authorizationCategoriesDeleteCallback(OAIHttpRequestWorker *worker);
    void authorizationCategoriesGetCallback(OAIHttpRequestWorker *worker);
    void authorizationCategoriesGetUsersCallback(OAIHttpRequestWorker *worker);
    void authorizationCategoriesPostCallback(OAIHttpRequestWorker *worker);
    void authorizationCategoriesPutCallback(OAIHttpRequestWorker *worker);
    void authorizationCategoriesRemoveUserCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void authorizationCategoriesAddUserSignal();
    void authorizationCategoriesDeleteSignal();
    void authorizationCategoriesGetSignal(OAIAPI_IPagedResponse_AuthorizationCodes_Shared_Models_Category_ summary);
    void authorizationCategoriesGetUsersSignal(OAIAPI_IPagedResponse_AuthorizationCodes_Shared_Models_CategoryUserReport_ summary);
    void authorizationCategoriesPostSignal(QString summary);
    void authorizationCategoriesPutSignal();
    void authorizationCategoriesRemoveUserSignal();


    void authorizationCategoriesAddUserSignalFull(OAIHttpRequestWorker *worker);
    void authorizationCategoriesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void authorizationCategoriesGetSignalFull(OAIHttpRequestWorker *worker, OAIAPI_IPagedResponse_AuthorizationCodes_Shared_Models_Category_ summary);
    void authorizationCategoriesGetUsersSignalFull(OAIHttpRequestWorker *worker, OAIAPI_IPagedResponse_AuthorizationCodes_Shared_Models_CategoryUserReport_ summary);
    void authorizationCategoriesPostSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void authorizationCategoriesPutSignalFull(OAIHttpRequestWorker *worker);
    void authorizationCategoriesRemoveUserSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use authorizationCategoriesAddUserSignalError() instead")
    void authorizationCategoriesAddUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void authorizationCategoriesAddUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizationCategoriesDeleteSignalError() instead")
    void authorizationCategoriesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void authorizationCategoriesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizationCategoriesGetSignalError() instead")
    void authorizationCategoriesGetSignalE(OAIAPI_IPagedResponse_AuthorizationCodes_Shared_Models_Category_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizationCategoriesGetSignalError(OAIAPI_IPagedResponse_AuthorizationCodes_Shared_Models_Category_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizationCategoriesGetUsersSignalError() instead")
    void authorizationCategoriesGetUsersSignalE(OAIAPI_IPagedResponse_AuthorizationCodes_Shared_Models_CategoryUserReport_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizationCategoriesGetUsersSignalError(OAIAPI_IPagedResponse_AuthorizationCodes_Shared_Models_CategoryUserReport_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizationCategoriesPostSignalError() instead")
    void authorizationCategoriesPostSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizationCategoriesPostSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizationCategoriesPutSignalError() instead")
    void authorizationCategoriesPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void authorizationCategoriesPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizationCategoriesRemoveUserSignalError() instead")
    void authorizationCategoriesRemoveUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void authorizationCategoriesRemoveUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use authorizationCategoriesAddUserSignalErrorFull() instead")
    void authorizationCategoriesAddUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizationCategoriesAddUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizationCategoriesDeleteSignalErrorFull() instead")
    void authorizationCategoriesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizationCategoriesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizationCategoriesGetSignalErrorFull() instead")
    void authorizationCategoriesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizationCategoriesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizationCategoriesGetUsersSignalErrorFull() instead")
    void authorizationCategoriesGetUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizationCategoriesGetUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizationCategoriesPostSignalErrorFull() instead")
    void authorizationCategoriesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizationCategoriesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizationCategoriesPutSignalErrorFull() instead")
    void authorizationCategoriesPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizationCategoriesPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizationCategoriesRemoveUserSignalErrorFull() instead")
    void authorizationCategoriesRemoveUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizationCategoriesRemoveUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
