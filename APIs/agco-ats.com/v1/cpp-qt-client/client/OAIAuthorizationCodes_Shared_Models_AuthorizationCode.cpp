/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuthorizationCodes_Shared_Models_AuthorizationCode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuthorizationCodes_Shared_Models_AuthorizationCode::OAIAuthorizationCodes_Shared_Models_AuthorizationCode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuthorizationCodes_Shared_Models_AuthorizationCode::OAIAuthorizationCodes_Shared_Models_AuthorizationCode() {
    this->initializeModel();
}

OAIAuthorizationCodes_Shared_Models_AuthorizationCode::~OAIAuthorizationCodes_Shared_Models_AuthorizationCode() {}

void OAIAuthorizationCodes_Shared_Models_AuthorizationCode::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_created_by_user_id_isSet = false;
    m_created_by_user_id_isValid = false;

    m_created_date_isSet = false;
    m_created_date_isValid = false;

    m_data_parameters_isSet = false;
    m_data_parameters_isValid = false;

    m_definition_id_isSet = false;
    m_definition_id_isValid = false;

    m_deleted_by_user_id_isSet = false;
    m_deleted_by_user_id_isValid = false;

    m_deleted_date_isSet = false;
    m_deleted_date_isValid = false;

    m_effective_date_isSet = false;
    m_effective_date_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_deleted_isSet = false;
    m_is_deleted_isValid = false;

    m_validation_parameters_isSet = false;
    m_validation_parameters_isValid = false;
}

void OAIAuthorizationCodes_Shared_Models_AuthorizationCode::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuthorizationCodes_Shared_Models_AuthorizationCode::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("Code")]);
    m_code_isSet = !json[QString("Code")].isNull() && m_code_isValid;

    m_created_by_user_id_isValid = ::OpenAPI::fromJsonValue(m_created_by_user_id, json[QString("CreatedByUserID")]);
    m_created_by_user_id_isSet = !json[QString("CreatedByUserID")].isNull() && m_created_by_user_id_isValid;

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("CreatedDate")]);
    m_created_date_isSet = !json[QString("CreatedDate")].isNull() && m_created_date_isValid;

    m_data_parameters_isValid = ::OpenAPI::fromJsonValue(m_data_parameters, json[QString("DataParameters")]);
    m_data_parameters_isSet = !json[QString("DataParameters")].isNull() && m_data_parameters_isValid;

    m_definition_id_isValid = ::OpenAPI::fromJsonValue(m_definition_id, json[QString("DefinitionID")]);
    m_definition_id_isSet = !json[QString("DefinitionID")].isNull() && m_definition_id_isValid;

    m_deleted_by_user_id_isValid = ::OpenAPI::fromJsonValue(m_deleted_by_user_id, json[QString("DeletedByUserID")]);
    m_deleted_by_user_id_isSet = !json[QString("DeletedByUserID")].isNull() && m_deleted_by_user_id_isValid;

    m_deleted_date_isValid = ::OpenAPI::fromJsonValue(m_deleted_date, json[QString("DeletedDate")]);
    m_deleted_date_isSet = !json[QString("DeletedDate")].isNull() && m_deleted_date_isValid;

    m_effective_date_isValid = ::OpenAPI::fromJsonValue(m_effective_date, json[QString("EffectiveDate")]);
    m_effective_date_isSet = !json[QString("EffectiveDate")].isNull() && m_effective_date_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("ID")]);
    m_id_isSet = !json[QString("ID")].isNull() && m_id_isValid;

    m_is_deleted_isValid = ::OpenAPI::fromJsonValue(m_is_deleted, json[QString("IsDeleted")]);
    m_is_deleted_isSet = !json[QString("IsDeleted")].isNull() && m_is_deleted_isValid;

    m_validation_parameters_isValid = ::OpenAPI::fromJsonValue(m_validation_parameters, json[QString("ValidationParameters")]);
    m_validation_parameters_isSet = !json[QString("ValidationParameters")].isNull() && m_validation_parameters_isValid;
}

QString OAIAuthorizationCodes_Shared_Models_AuthorizationCode::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuthorizationCodes_Shared_Models_AuthorizationCode::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("Code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_created_by_user_id_isSet) {
        obj.insert(QString("CreatedByUserID"), ::OpenAPI::toJsonValue(m_created_by_user_id));
    }
    if (m_created_date_isSet) {
        obj.insert(QString("CreatedDate"), ::OpenAPI::toJsonValue(m_created_date));
    }
    if (m_data_parameters.size() > 0) {
        obj.insert(QString("DataParameters"), ::OpenAPI::toJsonValue(m_data_parameters));
    }
    if (m_definition_id_isSet) {
        obj.insert(QString("DefinitionID"), ::OpenAPI::toJsonValue(m_definition_id));
    }
    if (m_deleted_by_user_id_isSet) {
        obj.insert(QString("DeletedByUserID"), ::OpenAPI::toJsonValue(m_deleted_by_user_id));
    }
    if (m_deleted_date_isSet) {
        obj.insert(QString("DeletedDate"), ::OpenAPI::toJsonValue(m_deleted_date));
    }
    if (m_effective_date_isSet) {
        obj.insert(QString("EffectiveDate"), ::OpenAPI::toJsonValue(m_effective_date));
    }
    if (m_id_isSet) {
        obj.insert(QString("ID"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_deleted_isSet) {
        obj.insert(QString("IsDeleted"), ::OpenAPI::toJsonValue(m_is_deleted));
    }
    if (m_validation_parameters.size() > 0) {
        obj.insert(QString("ValidationParameters"), ::OpenAPI::toJsonValue(m_validation_parameters));
    }
    return obj;
}

QString OAIAuthorizationCodes_Shared_Models_AuthorizationCode::getCode() const {
    return m_code;
}
void OAIAuthorizationCodes_Shared_Models_AuthorizationCode::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIAuthorizationCodes_Shared_Models_AuthorizationCode::is_code_Set() const{
    return m_code_isSet;
}

bool OAIAuthorizationCodes_Shared_Models_AuthorizationCode::is_code_Valid() const{
    return m_code_isValid;
}

qint32 OAIAuthorizationCodes_Shared_Models_AuthorizationCode::getCreatedByUserId() const {
    return m_created_by_user_id;
}
void OAIAuthorizationCodes_Shared_Models_AuthorizationCode::setCreatedByUserId(const qint32 &created_by_user_id) {
    m_created_by_user_id = created_by_user_id;
    m_created_by_user_id_isSet = true;
}

bool OAIAuthorizationCodes_Shared_Models_AuthorizationCode::is_created_by_user_id_Set() const{
    return m_created_by_user_id_isSet;
}

bool OAIAuthorizationCodes_Shared_Models_AuthorizationCode::is_created_by_user_id_Valid() const{
    return m_created_by_user_id_isValid;
}

QDateTime OAIAuthorizationCodes_Shared_Models_AuthorizationCode::getCreatedDate() const {
    return m_created_date;
}
void OAIAuthorizationCodes_Shared_Models_AuthorizationCode::setCreatedDate(const QDateTime &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAIAuthorizationCodes_Shared_Models_AuthorizationCode::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAIAuthorizationCodes_Shared_Models_AuthorizationCode::is_created_date_Valid() const{
    return m_created_date_isValid;
}

QList<OAIAuthorizationCodes_Shared_Models_Parameter> OAIAuthorizationCodes_Shared_Models_AuthorizationCode::getDataParameters() const {
    return m_data_parameters;
}
void OAIAuthorizationCodes_Shared_Models_AuthorizationCode::setDataParameters(const QList<OAIAuthorizationCodes_Shared_Models_Parameter> &data_parameters) {
    m_data_parameters = data_parameters;
    m_data_parameters_isSet = true;
}

bool OAIAuthorizationCodes_Shared_Models_AuthorizationCode::is_data_parameters_Set() const{
    return m_data_parameters_isSet;
}

bool OAIAuthorizationCodes_Shared_Models_AuthorizationCode::is_data_parameters_Valid() const{
    return m_data_parameters_isValid;
}

QString OAIAuthorizationCodes_Shared_Models_AuthorizationCode::getDefinitionId() const {
    return m_definition_id;
}
void OAIAuthorizationCodes_Shared_Models_AuthorizationCode::setDefinitionId(const QString &definition_id) {
    m_definition_id = definition_id;
    m_definition_id_isSet = true;
}

bool OAIAuthorizationCodes_Shared_Models_AuthorizationCode::is_definition_id_Set() const{
    return m_definition_id_isSet;
}

bool OAIAuthorizationCodes_Shared_Models_AuthorizationCode::is_definition_id_Valid() const{
    return m_definition_id_isValid;
}

qint32 OAIAuthorizationCodes_Shared_Models_AuthorizationCode::getDeletedByUserId() const {
    return m_deleted_by_user_id;
}
void OAIAuthorizationCodes_Shared_Models_AuthorizationCode::setDeletedByUserId(const qint32 &deleted_by_user_id) {
    m_deleted_by_user_id = deleted_by_user_id;
    m_deleted_by_user_id_isSet = true;
}

bool OAIAuthorizationCodes_Shared_Models_AuthorizationCode::is_deleted_by_user_id_Set() const{
    return m_deleted_by_user_id_isSet;
}

bool OAIAuthorizationCodes_Shared_Models_AuthorizationCode::is_deleted_by_user_id_Valid() const{
    return m_deleted_by_user_id_isValid;
}

QDateTime OAIAuthorizationCodes_Shared_Models_AuthorizationCode::getDeletedDate() const {
    return m_deleted_date;
}
void OAIAuthorizationCodes_Shared_Models_AuthorizationCode::setDeletedDate(const QDateTime &deleted_date) {
    m_deleted_date = deleted_date;
    m_deleted_date_isSet = true;
}

bool OAIAuthorizationCodes_Shared_Models_AuthorizationCode::is_deleted_date_Set() const{
    return m_deleted_date_isSet;
}

bool OAIAuthorizationCodes_Shared_Models_AuthorizationCode::is_deleted_date_Valid() const{
    return m_deleted_date_isValid;
}

QDateTime OAIAuthorizationCodes_Shared_Models_AuthorizationCode::getEffectiveDate() const {
    return m_effective_date;
}
void OAIAuthorizationCodes_Shared_Models_AuthorizationCode::setEffectiveDate(const QDateTime &effective_date) {
    m_effective_date = effective_date;
    m_effective_date_isSet = true;
}

bool OAIAuthorizationCodes_Shared_Models_AuthorizationCode::is_effective_date_Set() const{
    return m_effective_date_isSet;
}

bool OAIAuthorizationCodes_Shared_Models_AuthorizationCode::is_effective_date_Valid() const{
    return m_effective_date_isValid;
}

qint32 OAIAuthorizationCodes_Shared_Models_AuthorizationCode::getId() const {
    return m_id;
}
void OAIAuthorizationCodes_Shared_Models_AuthorizationCode::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAuthorizationCodes_Shared_Models_AuthorizationCode::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAuthorizationCodes_Shared_Models_AuthorizationCode::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIAuthorizationCodes_Shared_Models_AuthorizationCode::isIsDeleted() const {
    return m_is_deleted;
}
void OAIAuthorizationCodes_Shared_Models_AuthorizationCode::setIsDeleted(const bool &is_deleted) {
    m_is_deleted = is_deleted;
    m_is_deleted_isSet = true;
}

bool OAIAuthorizationCodes_Shared_Models_AuthorizationCode::is_is_deleted_Set() const{
    return m_is_deleted_isSet;
}

bool OAIAuthorizationCodes_Shared_Models_AuthorizationCode::is_is_deleted_Valid() const{
    return m_is_deleted_isValid;
}

QList<OAIAuthorizationCodes_Shared_Models_Parameter> OAIAuthorizationCodes_Shared_Models_AuthorizationCode::getValidationParameters() const {
    return m_validation_parameters;
}
void OAIAuthorizationCodes_Shared_Models_AuthorizationCode::setValidationParameters(const QList<OAIAuthorizationCodes_Shared_Models_Parameter> &validation_parameters) {
    m_validation_parameters = validation_parameters;
    m_validation_parameters_isSet = true;
}

bool OAIAuthorizationCodes_Shared_Models_AuthorizationCode::is_validation_parameters_Set() const{
    return m_validation_parameters_isSet;
}

bool OAIAuthorizationCodes_Shared_Models_AuthorizationCode::is_validation_parameters_Valid() const{
    return m_validation_parameters_isValid;
}

bool OAIAuthorizationCodes_Shared_Models_AuthorizationCode::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_definition_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_by_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_effective_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuthorizationCodes_Shared_Models_AuthorizationCode::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
