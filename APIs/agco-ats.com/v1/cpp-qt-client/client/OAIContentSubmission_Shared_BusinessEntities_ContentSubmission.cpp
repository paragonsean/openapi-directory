/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContentSubmission_Shared_BusinessEntities_ContentSubmission.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContentSubmission_Shared_BusinessEntities_ContentSubmission::OAIContentSubmission_Shared_BusinessEntities_ContentSubmission(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContentSubmission_Shared_BusinessEntities_ContentSubmission::OAIContentSubmission_Shared_BusinessEntities_ContentSubmission() {
    this->initializeModel();
}

OAIContentSubmission_Shared_BusinessEntities_ContentSubmission::~OAIContentSubmission_Shared_BusinessEntities_ContentSubmission() {}

void OAIContentSubmission_Shared_BusinessEntities_ContentSubmission::initializeModel() {

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_build_id_isSet = false;
    m_build_id_isValid = false;

    m_content_definition_id_isSet = false;
    m_content_definition_id_isValid = false;

    m_content_submission_id_isSet = false;
    m_content_submission_id_isValid = false;

    m_definition_isSet = false;
    m_definition_isValid = false;

    m_job_run_id_isSet = false;
    m_job_run_id_isValid = false;

    m_package_id_isSet = false;
    m_package_id_isValid = false;

    m_release_notes_isSet = false;
    m_release_notes_isValid = false;

    m_repository_isSet = false;
    m_repository_isValid = false;

    m_revision_isSet = false;
    m_revision_isValid = false;

    m_submission_date_isSet = false;
    m_submission_date_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIContentSubmission_Shared_BusinessEntities_ContentSubmission::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContentSubmission_Shared_BusinessEntities_ContentSubmission::fromJsonObject(QJsonObject json) {

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("Attributes")]);
    m_attributes_isSet = !json[QString("Attributes")].isNull() && m_attributes_isValid;

    m_build_id_isValid = ::OpenAPI::fromJsonValue(m_build_id, json[QString("BuildID")]);
    m_build_id_isSet = !json[QString("BuildID")].isNull() && m_build_id_isValid;

    m_content_definition_id_isValid = ::OpenAPI::fromJsonValue(m_content_definition_id, json[QString("ContentDefinitionID")]);
    m_content_definition_id_isSet = !json[QString("ContentDefinitionID")].isNull() && m_content_definition_id_isValid;

    m_content_submission_id_isValid = ::OpenAPI::fromJsonValue(m_content_submission_id, json[QString("ContentSubmissionID")]);
    m_content_submission_id_isSet = !json[QString("ContentSubmissionID")].isNull() && m_content_submission_id_isValid;

    m_definition_isValid = ::OpenAPI::fromJsonValue(m_definition, json[QString("Definition")]);
    m_definition_isSet = !json[QString("Definition")].isNull() && m_definition_isValid;

    m_job_run_id_isValid = ::OpenAPI::fromJsonValue(m_job_run_id, json[QString("JobRunID")]);
    m_job_run_id_isSet = !json[QString("JobRunID")].isNull() && m_job_run_id_isValid;

    m_package_id_isValid = ::OpenAPI::fromJsonValue(m_package_id, json[QString("PackageID")]);
    m_package_id_isSet = !json[QString("PackageID")].isNull() && m_package_id_isValid;

    m_release_notes_isValid = ::OpenAPI::fromJsonValue(m_release_notes, json[QString("ReleaseNotes")]);
    m_release_notes_isSet = !json[QString("ReleaseNotes")].isNull() && m_release_notes_isValid;

    m_repository_isValid = ::OpenAPI::fromJsonValue(m_repository, json[QString("Repository")]);
    m_repository_isSet = !json[QString("Repository")].isNull() && m_repository_isValid;

    m_revision_isValid = ::OpenAPI::fromJsonValue(m_revision, json[QString("Revision")]);
    m_revision_isSet = !json[QString("Revision")].isNull() && m_revision_isValid;

    m_submission_date_isValid = ::OpenAPI::fromJsonValue(m_submission_date, json[QString("SubmissionDate")]);
    m_submission_date_isSet = !json[QString("SubmissionDate")].isNull() && m_submission_date_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("UserID")]);
    m_user_id_isSet = !json[QString("UserID")].isNull() && m_user_id_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("Version")]);
    m_version_isSet = !json[QString("Version")].isNull() && m_version_isValid;
}

QString OAIContentSubmission_Shared_BusinessEntities_ContentSubmission::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContentSubmission_Shared_BusinessEntities_ContentSubmission::asJsonObject() const {
    QJsonObject obj;
    if (m_attributes.size() > 0) {
        obj.insert(QString("Attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_build_id_isSet) {
        obj.insert(QString("BuildID"), ::OpenAPI::toJsonValue(m_build_id));
    }
    if (m_content_definition_id_isSet) {
        obj.insert(QString("ContentDefinitionID"), ::OpenAPI::toJsonValue(m_content_definition_id));
    }
    if (m_content_submission_id_isSet) {
        obj.insert(QString("ContentSubmissionID"), ::OpenAPI::toJsonValue(m_content_submission_id));
    }
    if (m_definition.isSet()) {
        obj.insert(QString("Definition"), ::OpenAPI::toJsonValue(m_definition));
    }
    if (m_job_run_id_isSet) {
        obj.insert(QString("JobRunID"), ::OpenAPI::toJsonValue(m_job_run_id));
    }
    if (m_package_id_isSet) {
        obj.insert(QString("PackageID"), ::OpenAPI::toJsonValue(m_package_id));
    }
    if (m_release_notes_isSet) {
        obj.insert(QString("ReleaseNotes"), ::OpenAPI::toJsonValue(m_release_notes));
    }
    if (m_repository_isSet) {
        obj.insert(QString("Repository"), ::OpenAPI::toJsonValue(m_repository));
    }
    if (m_revision_isSet) {
        obj.insert(QString("Revision"), ::OpenAPI::toJsonValue(m_revision));
    }
    if (m_submission_date_isSet) {
        obj.insert(QString("SubmissionDate"), ::OpenAPI::toJsonValue(m_submission_date));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("UserID"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_version_isSet) {
        obj.insert(QString("Version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QList<OAIContentSubmission_Shared_BusinessEntities_ContentSubmissionAttribute> OAIContentSubmission_Shared_BusinessEntities_ContentSubmission::getAttributes() const {
    return m_attributes;
}
void OAIContentSubmission_Shared_BusinessEntities_ContentSubmission::setAttributes(const QList<OAIContentSubmission_Shared_BusinessEntities_ContentSubmissionAttribute> &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIContentSubmission_Shared_BusinessEntities_ContentSubmission::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIContentSubmission_Shared_BusinessEntities_ContentSubmission::is_attributes_Valid() const{
    return m_attributes_isValid;
}

qint32 OAIContentSubmission_Shared_BusinessEntities_ContentSubmission::getBuildId() const {
    return m_build_id;
}
void OAIContentSubmission_Shared_BusinessEntities_ContentSubmission::setBuildId(const qint32 &build_id) {
    m_build_id = build_id;
    m_build_id_isSet = true;
}

bool OAIContentSubmission_Shared_BusinessEntities_ContentSubmission::is_build_id_Set() const{
    return m_build_id_isSet;
}

bool OAIContentSubmission_Shared_BusinessEntities_ContentSubmission::is_build_id_Valid() const{
    return m_build_id_isValid;
}

qint32 OAIContentSubmission_Shared_BusinessEntities_ContentSubmission::getContentDefinitionId() const {
    return m_content_definition_id;
}
void OAIContentSubmission_Shared_BusinessEntities_ContentSubmission::setContentDefinitionId(const qint32 &content_definition_id) {
    m_content_definition_id = content_definition_id;
    m_content_definition_id_isSet = true;
}

bool OAIContentSubmission_Shared_BusinessEntities_ContentSubmission::is_content_definition_id_Set() const{
    return m_content_definition_id_isSet;
}

bool OAIContentSubmission_Shared_BusinessEntities_ContentSubmission::is_content_definition_id_Valid() const{
    return m_content_definition_id_isValid;
}

qint32 OAIContentSubmission_Shared_BusinessEntities_ContentSubmission::getContentSubmissionId() const {
    return m_content_submission_id;
}
void OAIContentSubmission_Shared_BusinessEntities_ContentSubmission::setContentSubmissionId(const qint32 &content_submission_id) {
    m_content_submission_id = content_submission_id;
    m_content_submission_id_isSet = true;
}

bool OAIContentSubmission_Shared_BusinessEntities_ContentSubmission::is_content_submission_id_Set() const{
    return m_content_submission_id_isSet;
}

bool OAIContentSubmission_Shared_BusinessEntities_ContentSubmission::is_content_submission_id_Valid() const{
    return m_content_submission_id_isValid;
}

OAIContentSubmission_Shared_BusinessEntities_ContentDefinition OAIContentSubmission_Shared_BusinessEntities_ContentSubmission::getDefinition() const {
    return m_definition;
}
void OAIContentSubmission_Shared_BusinessEntities_ContentSubmission::setDefinition(const OAIContentSubmission_Shared_BusinessEntities_ContentDefinition &definition) {
    m_definition = definition;
    m_definition_isSet = true;
}

bool OAIContentSubmission_Shared_BusinessEntities_ContentSubmission::is_definition_Set() const{
    return m_definition_isSet;
}

bool OAIContentSubmission_Shared_BusinessEntities_ContentSubmission::is_definition_Valid() const{
    return m_definition_isValid;
}

qint32 OAIContentSubmission_Shared_BusinessEntities_ContentSubmission::getJobRunId() const {
    return m_job_run_id;
}
void OAIContentSubmission_Shared_BusinessEntities_ContentSubmission::setJobRunId(const qint32 &job_run_id) {
    m_job_run_id = job_run_id;
    m_job_run_id_isSet = true;
}

bool OAIContentSubmission_Shared_BusinessEntities_ContentSubmission::is_job_run_id_Set() const{
    return m_job_run_id_isSet;
}

bool OAIContentSubmission_Shared_BusinessEntities_ContentSubmission::is_job_run_id_Valid() const{
    return m_job_run_id_isValid;
}

QString OAIContentSubmission_Shared_BusinessEntities_ContentSubmission::getPackageId() const {
    return m_package_id;
}
void OAIContentSubmission_Shared_BusinessEntities_ContentSubmission::setPackageId(const QString &package_id) {
    m_package_id = package_id;
    m_package_id_isSet = true;
}

bool OAIContentSubmission_Shared_BusinessEntities_ContentSubmission::is_package_id_Set() const{
    return m_package_id_isSet;
}

bool OAIContentSubmission_Shared_BusinessEntities_ContentSubmission::is_package_id_Valid() const{
    return m_package_id_isValid;
}

QString OAIContentSubmission_Shared_BusinessEntities_ContentSubmission::getReleaseNotes() const {
    return m_release_notes;
}
void OAIContentSubmission_Shared_BusinessEntities_ContentSubmission::setReleaseNotes(const QString &release_notes) {
    m_release_notes = release_notes;
    m_release_notes_isSet = true;
}

bool OAIContentSubmission_Shared_BusinessEntities_ContentSubmission::is_release_notes_Set() const{
    return m_release_notes_isSet;
}

bool OAIContentSubmission_Shared_BusinessEntities_ContentSubmission::is_release_notes_Valid() const{
    return m_release_notes_isValid;
}

QString OAIContentSubmission_Shared_BusinessEntities_ContentSubmission::getRepository() const {
    return m_repository;
}
void OAIContentSubmission_Shared_BusinessEntities_ContentSubmission::setRepository(const QString &repository) {
    m_repository = repository;
    m_repository_isSet = true;
}

bool OAIContentSubmission_Shared_BusinessEntities_ContentSubmission::is_repository_Set() const{
    return m_repository_isSet;
}

bool OAIContentSubmission_Shared_BusinessEntities_ContentSubmission::is_repository_Valid() const{
    return m_repository_isValid;
}

qint32 OAIContentSubmission_Shared_BusinessEntities_ContentSubmission::getRevision() const {
    return m_revision;
}
void OAIContentSubmission_Shared_BusinessEntities_ContentSubmission::setRevision(const qint32 &revision) {
    m_revision = revision;
    m_revision_isSet = true;
}

bool OAIContentSubmission_Shared_BusinessEntities_ContentSubmission::is_revision_Set() const{
    return m_revision_isSet;
}

bool OAIContentSubmission_Shared_BusinessEntities_ContentSubmission::is_revision_Valid() const{
    return m_revision_isValid;
}

QDateTime OAIContentSubmission_Shared_BusinessEntities_ContentSubmission::getSubmissionDate() const {
    return m_submission_date;
}
void OAIContentSubmission_Shared_BusinessEntities_ContentSubmission::setSubmissionDate(const QDateTime &submission_date) {
    m_submission_date = submission_date;
    m_submission_date_isSet = true;
}

bool OAIContentSubmission_Shared_BusinessEntities_ContentSubmission::is_submission_date_Set() const{
    return m_submission_date_isSet;
}

bool OAIContentSubmission_Shared_BusinessEntities_ContentSubmission::is_submission_date_Valid() const{
    return m_submission_date_isValid;
}

qint32 OAIContentSubmission_Shared_BusinessEntities_ContentSubmission::getUserId() const {
    return m_user_id;
}
void OAIContentSubmission_Shared_BusinessEntities_ContentSubmission::setUserId(const qint32 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIContentSubmission_Shared_BusinessEntities_ContentSubmission::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIContentSubmission_Shared_BusinessEntities_ContentSubmission::is_user_id_Valid() const{
    return m_user_id_isValid;
}

qint32 OAIContentSubmission_Shared_BusinessEntities_ContentSubmission::getVersion() const {
    return m_version;
}
void OAIContentSubmission_Shared_BusinessEntities_ContentSubmission::setVersion(const qint32 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIContentSubmission_Shared_BusinessEntities_ContentSubmission::is_version_Set() const{
    return m_version_isSet;
}

bool OAIContentSubmission_Shared_BusinessEntities_ContentSubmission::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIContentSubmission_Shared_BusinessEntities_ContentSubmission::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_definition_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_submission_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_definition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_run_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_submission_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContentSubmission_Shared_BusinessEntities_ContentSubmission::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
