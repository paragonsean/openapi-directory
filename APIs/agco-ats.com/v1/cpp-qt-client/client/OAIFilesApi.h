/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIFilesApi_H
#define OAI_OAIFilesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAPI_IPagedResponse_GlobalResources_Shared_Models_FileDownload_.h"
#include "OAIAPI_Models_ApiError.h"
#include "OAIGlobalResources_Shared_Models_FileDownload.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIFilesApi : public QObject {
    Q_OBJECT

public:
    OAIFilesApi(const int timeOut = 0);
    ~OAIFilesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    */
    virtual void filesDeleteFile(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void filesGetFile(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void filesGetFileContents(const QString &id);

    /**
    * @param[in]  include_deleted bool [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void filesGetFiles(const ::OpenAPI::OptionalParam<bool> &include_deleted = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  oai_global_resources_shared_models_file_download OAIGlobalResources_Shared_Models_FileDownload [required]
    */
    virtual void filesPostFile(const OAIGlobalResources_Shared_Models_FileDownload &oai_global_resources_shared_models_file_download);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_global_resources_shared_models_file_download OAIGlobalResources_Shared_Models_FileDownload [required]
    */
    virtual void filesPutFile(const QString &id, const OAIGlobalResources_Shared_Models_FileDownload &oai_global_resources_shared_models_file_download);

    /**
    * @param[in]  id QString [required]
    */
    virtual void filesPutFileContents(const QString &id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void filesDeleteFileCallback(OAIHttpRequestWorker *worker);
    void filesGetFileCallback(OAIHttpRequestWorker *worker);
    void filesGetFileContentsCallback(OAIHttpRequestWorker *worker);
    void filesGetFilesCallback(OAIHttpRequestWorker *worker);
    void filesPostFileCallback(OAIHttpRequestWorker *worker);
    void filesPutFileCallback(OAIHttpRequestWorker *worker);
    void filesPutFileContentsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void filesDeleteFileSignal();
    void filesGetFileSignal(OAIGlobalResources_Shared_Models_FileDownload summary);
    void filesGetFileContentsSignal(OAIObject summary);
    void filesGetFilesSignal(OAIAPI_IPagedResponse_GlobalResources_Shared_Models_FileDownload_ summary);
    void filesPostFileSignal(QString summary);
    void filesPutFileSignal();
    void filesPutFileContentsSignal(OAIObject summary);


    void filesDeleteFileSignalFull(OAIHttpRequestWorker *worker);
    void filesGetFileSignalFull(OAIHttpRequestWorker *worker, OAIGlobalResources_Shared_Models_FileDownload summary);
    void filesGetFileContentsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void filesGetFilesSignalFull(OAIHttpRequestWorker *worker, OAIAPI_IPagedResponse_GlobalResources_Shared_Models_FileDownload_ summary);
    void filesPostFileSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void filesPutFileSignalFull(OAIHttpRequestWorker *worker);
    void filesPutFileContentsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    Q_DECL_DEPRECATED_X("Use filesDeleteFileSignalError() instead")
    void filesDeleteFileSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void filesDeleteFileSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filesGetFileSignalError() instead")
    void filesGetFileSignalE(OAIGlobalResources_Shared_Models_FileDownload summary, QNetworkReply::NetworkError error_type, QString error_str);
    void filesGetFileSignalError(OAIGlobalResources_Shared_Models_FileDownload summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filesGetFileContentsSignalError() instead")
    void filesGetFileContentsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void filesGetFileContentsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filesGetFilesSignalError() instead")
    void filesGetFilesSignalE(OAIAPI_IPagedResponse_GlobalResources_Shared_Models_FileDownload_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void filesGetFilesSignalError(OAIAPI_IPagedResponse_GlobalResources_Shared_Models_FileDownload_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filesPostFileSignalError() instead")
    void filesPostFileSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void filesPostFileSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filesPutFileSignalError() instead")
    void filesPutFileSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void filesPutFileSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filesPutFileContentsSignalError() instead")
    void filesPutFileContentsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void filesPutFileContentsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use filesDeleteFileSignalErrorFull() instead")
    void filesDeleteFileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void filesDeleteFileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filesGetFileSignalErrorFull() instead")
    void filesGetFileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void filesGetFileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filesGetFileContentsSignalErrorFull() instead")
    void filesGetFileContentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void filesGetFileContentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filesGetFilesSignalErrorFull() instead")
    void filesGetFilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void filesGetFilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filesPostFileSignalErrorFull() instead")
    void filesPostFileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void filesPostFileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filesPutFileSignalErrorFull() instead")
    void filesPutFileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void filesPutFileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filesPutFileContentsSignalErrorFull() instead")
    void filesPutFileContentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void filesPutFileContentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
