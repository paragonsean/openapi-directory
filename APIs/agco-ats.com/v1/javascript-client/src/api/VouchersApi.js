/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import APIPagedResponseDealerDBModelsVoucher from '../model/APIPagedResponseDealerDBModelsVoucher';
import APIPagedResponseDealerDBModelsVoucherHistory from '../model/APIPagedResponseDealerDBModelsVoucherHistory';
import DealerDBModelsVoucher from '../model/DealerDBModelsVoucher';

/**
* Vouchers service.
* @module api/VouchersApi
* @version v1
*/
export default class VouchersApi {

    /**
    * Constructs a new VouchersApi. 
    * @alias module:api/VouchersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiV2VouchersVoucherCodeGet operation.
     * @callback module:api/VouchersApi~apiV2VouchersVoucherCodeGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DealerDBModelsVoucher} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a voucher
     * No Documentation Found.
     * @param {String} voucherCode The voucher code of the voucher to get.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [deleted] Optional. Filter vouchers by Deleted state. By default only vouchers that are not deleted are returned.
     * @param {module:api/VouchersApi~apiV2VouchersVoucherCodeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DealerDBModelsVoucher}
     */
    apiV2VouchersVoucherCodeGet(voucherCode, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'voucherCode' is set
      if (voucherCode === undefined || voucherCode === null) {
        throw new Error("Missing the required parameter 'voucherCode' when calling apiV2VouchersVoucherCodeGet");
      }

      let pathParams = {
        'VoucherCode': voucherCode
      };
      let queryParams = {
        'Deleted': opts['deleted']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = DealerDBModelsVoucher;
      return this.apiClient.callApi(
        '/api/v2/Vouchers/{VoucherCode}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vouchersDelete operation.
     * @callback module:api/VouchersApi~vouchersDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a voucher
     * No Documentation Found.
     * @param {String} voucherCode The voucher code of the voucher to delete.
     * @param {module:api/VouchersApi~vouchersDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    vouchersDelete(voucherCode, callback) {
      let postBody = null;
      // verify the required parameter 'voucherCode' is set
      if (voucherCode === undefined || voucherCode === null) {
        throw new Error("Missing the required parameter 'voucherCode' when calling vouchersDelete");
      }

      let pathParams = {
        'VoucherCode': voucherCode
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/Vouchers/{VoucherCode}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vouchersGet operation.
     * @callback module:api/VouchersApi~vouchersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/APIPagedResponseDealerDBModelsVoucher} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of vouchers
     * No Documentation Found.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [type] Optional. Filter vouchers by Type
     * @param {String} [dealerCode] Optional. Filter vouchers by DealerCode
     * @param {String} [licenseTo] Optional. Filter vouchers by LicenseTo. Wildcard supported (*).
     * @param {String} [purpose] Optional. Filter vouchers by Purpose. Wildcard supported (*).
     * @param {String} [orderNumber] Optional. Filter vouchers by OrderNumber
     * @param {String} [email] Optional. Filter vouchers by Email. Wildcard supported (*).
     * @param {String} [modifiedBy] Optional. Filter vouchers by ModifiedBy
     * @param {Date} [createdAfter] Optional. Filter vouchers by CreatedDate
     * @param {Date} [createdBefore] Optional. Filter vouchers by CreatedDate
     * @param {Date} [punchedAfter] Optional. Filter vouchers by PunchedDate
     * @param {Date} [punchedBefore] Optional. Filter vouchers by PunchedDate
     * @param {Boolean} [punched] Optional. Filter vouchers by Punched status
     * @param {Date} [expirationAfter] Optional. Filter vouchers by ExpirationDate
     * @param {Date} [expirationBefore] Optional. Filter vouchers by ExpirationDate
     * @param {module:model/String} [deleted] Optional. Filter vouchers by Deleted state. By default only vouchers that are not deleted are returned.
     * @param {Number} [limit] Optional. The page limit. The default page limit is 10.
     * @param {Number} [offset] Optional. The page offset. The default page offset is 0.
     * @param {module:api/VouchersApi~vouchersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/APIPagedResponseDealerDBModelsVoucher}
     */
    vouchersGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'Type': opts['type'],
        'DealerCode': opts['dealerCode'],
        'LicenseTo': opts['licenseTo'],
        'Purpose': opts['purpose'],
        'OrderNumber': opts['orderNumber'],
        'Email': opts['email'],
        'ModifiedBy': opts['modifiedBy'],
        'CreatedAfter': opts['createdAfter'],
        'CreatedBefore': opts['createdBefore'],
        'PunchedAfter': opts['punchedAfter'],
        'PunchedBefore': opts['punchedBefore'],
        'Punched': opts['punched'],
        'ExpirationAfter': opts['expirationAfter'],
        'ExpirationBefore': opts['expirationBefore'],
        'Deleted': opts['deleted'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = APIPagedResponseDealerDBModelsVoucher;
      return this.apiClient.callApi(
        '/api/v2/Vouchers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vouchersGetVoucherHistory operation.
     * @callback module:api/VouchersApi~vouchersGetVoucherHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/APIPagedResponseDealerDBModelsVoucherHistory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a voucher's history.
     * No Documentation Found.
     * @param {String} voucherCode The voucher code to get history for.
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] Optional. The page limit. The default page limit is 10.
     * @param {Number} [offset] Optional. The page offset. The default page offset is 0.
     * @param {module:api/VouchersApi~vouchersGetVoucherHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/APIPagedResponseDealerDBModelsVoucherHistory}
     */
    vouchersGetVoucherHistory(voucherCode, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'voucherCode' is set
      if (voucherCode === undefined || voucherCode === null) {
        throw new Error("Missing the required parameter 'voucherCode' when calling vouchersGetVoucherHistory");
      }

      let pathParams = {
        'VoucherCode': voucherCode
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = APIPagedResponseDealerDBModelsVoucherHistory;
      return this.apiClient.callApi(
        '/api/v2/Vouchers/{VoucherCode}/VoucherHistory', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vouchersPost operation.
     * @callback module:api/VouchersApi~vouchersPostCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a voucher
     * No Documentation Found.
     * @param {module:model/DealerDBModelsVoucher} dealerDBModelsVoucher The voucher to add.
     * @param {module:api/VouchersApi~vouchersPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    vouchersPost(dealerDBModelsVoucher, callback) {
      let postBody = dealerDBModelsVoucher;
      // verify the required parameter 'dealerDBModelsVoucher' is set
      if (dealerDBModelsVoucher === undefined || dealerDBModelsVoucher === null) {
        throw new Error("Missing the required parameter 'dealerDBModelsVoucher' when calling vouchersPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v2/Vouchers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vouchersPut operation.
     * @callback module:api/VouchersApi~vouchersPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a voucher
     * No Documentation Found.
     * @param {String} voucherCode The voucher code of the voucher to update.
     * @param {module:model/DealerDBModelsVoucher} dealerDBModelsVoucher The updated voucher.
     * @param {module:api/VouchersApi~vouchersPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    vouchersPut(voucherCode, dealerDBModelsVoucher, callback) {
      let postBody = dealerDBModelsVoucher;
      // verify the required parameter 'voucherCode' is set
      if (voucherCode === undefined || voucherCode === null) {
        throw new Error("Missing the required parameter 'voucherCode' when calling vouchersPut");
      }
      // verify the required parameter 'dealerDBModelsVoucher' is set
      if (dealerDBModelsVoucher === undefined || dealerDBModelsVoucher === null) {
        throw new Error("Missing the required parameter 'dealerDBModelsVoucher' when calling vouchersPut");
      }

      let pathParams = {
        'VoucherCode': voucherCode
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/Vouchers/{VoucherCode}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
