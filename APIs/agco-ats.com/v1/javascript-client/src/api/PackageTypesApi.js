/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import APIModelsApiError from '../model/APIModelsApiError';
import APIPagedResponseUpdateSystemModelsPackageType from '../model/APIPagedResponseUpdateSystemModelsPackageType';
import UpdateSystemModelsPackageType from '../model/UpdateSystemModelsPackageType';

/**
* PackageTypes service.
* @module api/PackageTypesApi
* @version v1
*/
export default class PackageTypesApi {

    /**
    * Constructs a new PackageTypesApi. 
    * @alias module:api/PackageTypesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiV2PackageTypesIDGet operation.
     * @callback module:api/PackageTypesApi~apiV2PackageTypesIDGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateSystemModelsPackageType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific Package Type.
     * No Documentation Found.
     * @param {String} ID The Package Type ID
     * @param {module:api/PackageTypesApi~apiV2PackageTypesIDGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateSystemModelsPackageType}
     */
    apiV2PackageTypesIDGet(ID, callback) {
      let postBody = null;
      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling apiV2PackageTypesIDGet");
      }

      let pathParams = {
        'ID': ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = UpdateSystemModelsPackageType;
      return this.apiClient.callApi(
        '/api/v2/PackageTypes/{ID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the packageTypesAddPackageTypeUser operation.
     * @callback module:api/PackageTypesApi~packageTypesAddPackageTypeUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a package type that a user can see.
     * No Documentation Found.
     * @param {String} id The ID of the Package Type
     * @param {Number} userID The userID to link to the package type
     * @param {module:api/PackageTypesApi~packageTypesAddPackageTypeUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    packageTypesAddPackageTypeUser(id, userID, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling packageTypesAddPackageTypeUser");
      }
      // verify the required parameter 'userID' is set
      if (userID === undefined || userID === null) {
        throw new Error("Missing the required parameter 'userID' when calling packageTypesAddPackageTypeUser");
      }

      let pathParams = {
        'id': id,
        'userID': userID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/PackageTypes/{id}/Users/{userID}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the packageTypesDelete operation.
     * @callback module:api/PackageTypesApi~packageTypesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Package Type.
     * No Documentation Found.
     * @param {String} ID The Package Type ID
     * @param {module:api/PackageTypesApi~packageTypesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    packageTypesDelete(ID, callback) {
      let postBody = null;
      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling packageTypesDelete");
      }

      let pathParams = {
        'ID': ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/PackageTypes/{ID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the packageTypesGet operation.
     * @callback module:api/PackageTypesApi~packageTypesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/APIPagedResponseUpdateSystemModelsPackageType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all of the Package Types.
     * No Documentation Found.
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] Optional. The page limit. The default page limit is 10.
     * @param {Number} [offset] Optional. The page offset. The default page offset is 0.
     * @param {Number} [userID] Optional. The user ID to sort packageTypes by the user's access
     * @param {module:api/PackageTypesApi~packageTypesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/APIPagedResponseUpdateSystemModelsPackageType}
     */
    packageTypesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'userID': opts['userID']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = APIPagedResponseUpdateSystemModelsPackageType;
      return this.apiClient.callApi(
        '/api/v2/PackageTypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the packageTypesPost operation.
     * @callback module:api/PackageTypesApi~packageTypesPostCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a Package Type.
     * No Documentation Found.
     * @param {module:model/UpdateSystemModelsPackageType} updateSystemModelsPackageType The Package Type to add
     * @param {module:api/PackageTypesApi~packageTypesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    packageTypesPost(updateSystemModelsPackageType, callback) {
      let postBody = updateSystemModelsPackageType;
      // verify the required parameter 'updateSystemModelsPackageType' is set
      if (updateSystemModelsPackageType === undefined || updateSystemModelsPackageType === null) {
        throw new Error("Missing the required parameter 'updateSystemModelsPackageType' when calling packageTypesPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v2/PackageTypes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the packageTypesPut operation.
     * @callback module:api/PackageTypesApi~packageTypesPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify a Package Type.
     * No Documentation Found.
     * @param {String} ID The ID of the Package Type
     * @param {module:model/UpdateSystemModelsPackageType} updateSystemModelsPackageType The Package Type to update
     * @param {module:api/PackageTypesApi~packageTypesPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    packageTypesPut(ID, updateSystemModelsPackageType, callback) {
      let postBody = updateSystemModelsPackageType;
      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling packageTypesPut");
      }
      // verify the required parameter 'updateSystemModelsPackageType' is set
      if (updateSystemModelsPackageType === undefined || updateSystemModelsPackageType === null) {
        throw new Error("Missing the required parameter 'updateSystemModelsPackageType' when calling packageTypesPut");
      }

      let pathParams = {
        'ID': ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/PackageTypes/{ID}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the packageTypesRemovePackageTypeUser operation.
     * @callback module:api/PackageTypesApi~packageTypesRemovePackageTypeUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a package type a user could see.
     * No Documentation Found.
     * @param {String} id The ID of the Package Type
     * @param {Number} userID The userID to link to the package type
     * @param {module:api/PackageTypesApi~packageTypesRemovePackageTypeUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    packageTypesRemovePackageTypeUser(id, userID, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling packageTypesRemovePackageTypeUser");
      }
      // verify the required parameter 'userID' is set
      if (userID === undefined || userID === null) {
        throw new Error("Missing the required parameter 'userID' when calling packageTypesRemovePackageTypeUser");
      }

      let pathParams = {
        'id': id,
        'userID': userID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/PackageTypes/{id}/Users/{userID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
