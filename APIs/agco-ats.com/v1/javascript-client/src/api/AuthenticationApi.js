/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import APIModelsAuthenticatedUser from '../model/APIModelsAuthenticatedUser';
import APIModelsCredentials from '../model/APIModelsCredentials';
import APIModelsPasswordReset from '../model/APIModelsPasswordReset';
import APIModelsPasswordResetRequest from '../model/APIModelsPasswordResetRequest';
import APIModelsTokenOptions from '../model/APIModelsTokenOptions';

/**
* Authentication service.
* @module api/AuthenticationApi
* @version v1
*/
export default class AuthenticationApi {

    /**
    * Constructs a new AuthenticationApi. 
    * @alias module:api/AuthenticationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the authenticationDefault operation.
     * @callback module:api/AuthenticationApi~authenticationDefaultCallback
     * @param {String} error Error message, if any.
     * @param {module:model/APIModelsAuthenticatedUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Authenticate a user.
     * No Documentation Found.
     * @param {module:model/APIModelsCredentials} aPIModelsCredentials Create a user account.
     * @param {module:api/AuthenticationApi~authenticationDefaultCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/APIModelsAuthenticatedUser}
     */
    authenticationDefault(aPIModelsCredentials, callback) {
      let postBody = aPIModelsCredentials;
      // verify the required parameter 'aPIModelsCredentials' is set
      if (aPIModelsCredentials === undefined || aPIModelsCredentials === null) {
        throw new Error("Missing the required parameter 'aPIModelsCredentials' when calling authenticationDefault");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = APIModelsAuthenticatedUser;
      return this.apiClient.callApi(
        '/api/v2/Authentication', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authenticationIsAlive operation.
     * @callback module:api/AuthenticationApi~authenticationIsAliveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Acknowledges the connection to the API
     * No Documentation Found.
     * @param {module:api/AuthenticationApi~authenticationIsAliveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    authenticationIsAlive(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/Authentication/IsAlive', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authenticationPutManageTokens operation.
     * @callback module:api/AuthenticationApi~authenticationPutManageTokensCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Manage API tokens.
     * No Documentation Found.
     * @param {Number} userID 
     * @param {module:model/APIModelsTokenOptions} aPIModelsTokenOptions The options for token management.
     * @param {module:api/AuthenticationApi~authenticationPutManageTokensCallback} callback The callback function, accepting three arguments: error, data, response
     */
    authenticationPutManageTokens(userID, aPIModelsTokenOptions, callback) {
      let postBody = aPIModelsTokenOptions;
      // verify the required parameter 'userID' is set
      if (userID === undefined || userID === null) {
        throw new Error("Missing the required parameter 'userID' when calling authenticationPutManageTokens");
      }
      // verify the required parameter 'aPIModelsTokenOptions' is set
      if (aPIModelsTokenOptions === undefined || aPIModelsTokenOptions === null) {
        throw new Error("Missing the required parameter 'aPIModelsTokenOptions' when calling authenticationPutManageTokens");
      }

      let pathParams = {
        'UserID': userID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/AuthenticatedUsers/{UserID}/Tokens', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authenticationRequestPasswordReset operation.
     * @callback module:api/AuthenticationApi~authenticationRequestPasswordResetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request a password reset.
     * No Documentation Found.
     * @param {module:model/APIModelsPasswordResetRequest} aPIModelsPasswordResetRequest The password reset request.
     * @param {module:api/AuthenticationApi~authenticationRequestPasswordResetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    authenticationRequestPasswordReset(aPIModelsPasswordResetRequest, callback) {
      let postBody = aPIModelsPasswordResetRequest;
      // verify the required parameter 'aPIModelsPasswordResetRequest' is set
      if (aPIModelsPasswordResetRequest === undefined || aPIModelsPasswordResetRequest === null) {
        throw new Error("Missing the required parameter 'aPIModelsPasswordResetRequest' when calling authenticationRequestPasswordReset");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/Authentication/RequestPasswordReset', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authenticationResetPasword operation.
     * @callback module:api/AuthenticationApi~authenticationResetPaswordCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset a password
     * No Documentation Found.
     * @param {module:model/APIModelsPasswordReset} aPIModelsPasswordReset The password reset detail.
     * @param {module:api/AuthenticationApi~authenticationResetPaswordCallback} callback The callback function, accepting three arguments: error, data, response
     */
    authenticationResetPasword(aPIModelsPasswordReset, callback) {
      let postBody = aPIModelsPasswordReset;
      // verify the required parameter 'aPIModelsPasswordReset' is set
      if (aPIModelsPasswordReset === undefined || aPIModelsPasswordReset === null) {
        throw new Error("Missing the required parameter 'aPIModelsPasswordReset' when calling authenticationResetPasword");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/Authentication/ResetPasword', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
