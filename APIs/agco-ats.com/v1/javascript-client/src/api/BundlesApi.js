/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import APIModelsApiError from '../model/APIModelsApiError';
import APIPagedResponseUpdateSystemModelsBundle from '../model/APIPagedResponseUpdateSystemModelsBundle';
import UpdateSystemModelsBundle from '../model/UpdateSystemModelsBundle';

/**
* Bundles service.
* @module api/BundlesApi
* @version v1
*/
export default class BundlesApi {

    /**
    * Constructs a new BundlesApi. 
    * @alias module:api/BundlesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the bundlesDeleteBundle operation.
     * @callback module:api/BundlesApi~bundlesDeleteBundleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Bundle.
     * No Documentation Found.
     * @param {String} ID The Bundle ID to Delete
     * @param {module:api/BundlesApi~bundlesDeleteBundleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    bundlesDeleteBundle(ID, callback) {
      let postBody = null;
      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling bundlesDeleteBundle");
      }

      let pathParams = {
        'ID': ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/Bundles/{ID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bundlesGetBundle operation.
     * @callback module:api/BundlesApi~bundlesGetBundleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateSystemModelsBundle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific Bundle by ID.
     * No Documentation Found.
     * @param {String} ID The Bundle ID
     * @param {module:api/BundlesApi~bundlesGetBundleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateSystemModelsBundle}
     */
    bundlesGetBundle(ID, callback) {
      let postBody = null;
      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling bundlesGetBundle");
      }

      let pathParams = {
        'ID': ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = UpdateSystemModelsBundle;
      return this.apiClient.callApi(
        '/api/v2/Bundles/{ID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bundlesGetBundles operation.
     * @callback module:api/BundlesApi~bundlesGetBundlesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/APIPagedResponseUpdateSystemModelsBundle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the list of bundles.
     * No Documentation Found.
     * @param {Object} opts Optional parameters
     * @param {String} [updateGroupID] Optional. Filter by UpdateGroup ID.
     * @param {Boolean} [active] Optional. Filter by active status.
     * @param {Number} [limit] Optional. The page limit. The default page limit is 10.
     * @param {Number} [offset] Optional. The page offset. The default page offset is 0.
     * @param {Number} [bundleNumber] Optional. If provided, filters by BundleNumber.
     * @param {module:api/BundlesApi~bundlesGetBundlesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/APIPagedResponseUpdateSystemModelsBundle}
     */
    bundlesGetBundles(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'UpdateGroupID': opts['updateGroupID'],
        'Active': opts['active'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'BundleNumber': opts['bundleNumber']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = APIPagedResponseUpdateSystemModelsBundle;
      return this.apiClient.callApi(
        '/api/v2/Bundles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bundlesPostBundle operation.
     * @callback module:api/BundlesApi~bundlesPostBundleCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a Bundle to the Update System.
     * No Documentation Found.
     * @param {module:model/UpdateSystemModelsBundle} updateSystemModelsBundle The bundle to add
     * @param {module:api/BundlesApi~bundlesPostBundleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    bundlesPostBundle(updateSystemModelsBundle, callback) {
      let postBody = updateSystemModelsBundle;
      // verify the required parameter 'updateSystemModelsBundle' is set
      if (updateSystemModelsBundle === undefined || updateSystemModelsBundle === null) {
        throw new Error("Missing the required parameter 'updateSystemModelsBundle' when calling bundlesPostBundle");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v2/Bundles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bundlesPutBundle operation.
     * @callback module:api/BundlesApi~bundlesPutBundleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify a Bundle in the Update System.
     * No Documentation Found.
     * @param {String} ID The unique ID of the Bundle
     * @param {module:model/UpdateSystemModelsBundle} updateSystemModelsBundle The bundle to modify
     * @param {module:api/BundlesApi~bundlesPutBundleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    bundlesPutBundle(ID, updateSystemModelsBundle, callback) {
      let postBody = updateSystemModelsBundle;
      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling bundlesPutBundle");
      }
      // verify the required parameter 'updateSystemModelsBundle' is set
      if (updateSystemModelsBundle === undefined || updateSystemModelsBundle === null) {
        throw new Error("Missing the required parameter 'updateSystemModelsBundle' when calling bundlesPutBundle");
      }

      let pathParams = {
        'ID': ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/Bundles/{ID}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
