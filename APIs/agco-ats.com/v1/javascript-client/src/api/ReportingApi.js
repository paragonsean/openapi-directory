/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import APIModelsApiError from '../model/APIModelsApiError';
import APIPagedResponseUpdateSystemModelsBundle from '../model/APIPagedResponseUpdateSystemModelsBundle';
import APIPagedResponseUpdateSystemModelsClientStatusUpdateSystemModelsPagedClientStatusMetadata from '../model/APIPagedResponseUpdateSystemModelsClientStatusUpdateSystemModelsPagedClientStatusMetadata';
import APIPagedResponseUpdateSystemModelsPackageStatusSummary from '../model/APIPagedResponseUpdateSystemModelsPackageStatusSummary';
import APIPagedResponseUpdateSystemModelsUpdateGroup from '../model/APIPagedResponseUpdateSystemModelsUpdateGroup';
import APIPagedResponseUpdateSystemModelsUpdateGroupClientRelationship from '../model/APIPagedResponseUpdateSystemModelsUpdateGroupClientRelationship';
import UpdateSystemModelsClient from '../model/UpdateSystemModelsClient';
import UpdateSystemModelsClientInfo from '../model/UpdateSystemModelsClientInfo';
import UpdateSystemModelsPackage from '../model/UpdateSystemModelsPackage';
import UpdateSystemModelsPackageStatusSummary from '../model/UpdateSystemModelsPackageStatusSummary';
import UpdateSystemModelsUpdateMetricsData from '../model/UpdateSystemModelsUpdateMetricsData';

/**
* Reporting service.
* @module api/ReportingApi
* @version v1
*/
export default class ReportingApi {

    /**
    * Constructs a new ReportingApi. 
    * @alias module:api/ReportingApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the reportingBundleStatusSummary operation.
     * @callback module:api/ReportingApi~reportingBundleStatusSummaryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/APIPagedResponseUpdateSystemModelsPackageStatusSummary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a summary of all Packages in a Bundle
     * No Documentation Found.
     * @param {String} bundleID The BundleID
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] Optional. The page limit. The default page limit is 10.
     * @param {Number} [offset] Optional. The page offset. The default page offset is 0.
     * @param {module:api/ReportingApi~reportingBundleStatusSummaryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/APIPagedResponseUpdateSystemModelsPackageStatusSummary}
     */
    reportingBundleStatusSummary(bundleID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'bundleID' is set
      if (bundleID === undefined || bundleID === null) {
        throw new Error("Missing the required parameter 'bundleID' when calling reportingBundleStatusSummary");
      }

      let pathParams = {
      };
      let queryParams = {
        'BundleID': bundleID,
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = APIPagedResponseUpdateSystemModelsPackageStatusSummary;
      return this.apiClient.callApi(
        '/api/v2/Reporting/BundleStatusSummary', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reportingBundlesInUpdateGroup operation.
     * @callback module:api/ReportingApi~reportingBundlesInUpdateGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/APIPagedResponseUpdateSystemModelsBundle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of bundles for UpdateGroup.
     * No Documentation Found.
     * @param {String} ID The UpdateGroupID
     * @param {Boolean} includeInactive Include Inactive Bundles (true|false)
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] Optional. The page limit. The default page limit is 10.
     * @param {Number} [offset] Optional. The page offset. The default page offset is 0.
     * @param {module:api/ReportingApi~reportingBundlesInUpdateGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/APIPagedResponseUpdateSystemModelsBundle}
     */
    reportingBundlesInUpdateGroup(ID, includeInactive, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling reportingBundlesInUpdateGroup");
      }
      // verify the required parameter 'includeInactive' is set
      if (includeInactive === undefined || includeInactive === null) {
        throw new Error("Missing the required parameter 'includeInactive' when calling reportingBundlesInUpdateGroup");
      }

      let pathParams = {
      };
      let queryParams = {
        'ID': ID,
        'IncludeInactive': includeInactive,
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = APIPagedResponseUpdateSystemModelsBundle;
      return this.apiClient.callApi(
        '/api/v2/Reporting/BundlesInUpdateGroup', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reportingClientInfo operation.
     * @callback module:api/ReportingApi~reportingClientInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateSystemModelsClientInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Client Information
     * No Documentation Found.
     * @param {String} clientID The Client ID
     * @param {module:api/ReportingApi~reportingClientInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateSystemModelsClientInfo}
     */
    reportingClientInfo(clientID, callback) {
      let postBody = null;
      // verify the required parameter 'clientID' is set
      if (clientID === undefined || clientID === null) {
        throw new Error("Missing the required parameter 'clientID' when calling reportingClientInfo");
      }

      let pathParams = {
      };
      let queryParams = {
        'ClientID': clientID
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = UpdateSystemModelsClientInfo;
      return this.apiClient.callApi(
        '/api/v2/Reporting/ClientInfo', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reportingCurrentPackagesInUpdateGroup operation.
     * @callback module:api/ReportingApi~reportingCurrentPackagesInUpdateGroupCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UpdateSystemModelsPackage>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the current packages for an update group.
     * No Documentation Found.
     * @param {String} ID The UpdateGroupID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [subscriptionTypeFilter] Optional.  The subscription type filter to use.  By default the Default packages (Required and IncludeByDefault) will be returned.
     * @param {module:api/ReportingApi~reportingCurrentPackagesInUpdateGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UpdateSystemModelsPackage>}
     */
    reportingCurrentPackagesInUpdateGroup(ID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling reportingCurrentPackagesInUpdateGroup");
      }

      let pathParams = {
      };
      let queryParams = {
        'ID': ID,
        'SubscriptionTypeFilter': opts['subscriptionTypeFilter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = [UpdateSystemModelsPackage];
      return this.apiClient.callApi(
        '/api/v2/Reporting/CurrentPackagesInUpdateGroup', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reportingGetClient operation.
     * @callback module:api/ReportingApi~reportingGetClientCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateSystemModelsClient} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Client in the Update System.
     * No Documentation Found.
     * @param {String} ID The Client ID
     * @param {module:api/ReportingApi~reportingGetClientCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateSystemModelsClient}
     */
    reportingGetClient(ID, callback) {
      let postBody = null;
      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling reportingGetClient");
      }

      let pathParams = {
      };
      let queryParams = {
        'ID': ID
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = UpdateSystemModelsClient;
      return this.apiClient.callApi(
        '/api/v2/Reporting/GetClient', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reportingGetSubscriptions operation.
     * @callback module:api/ReportingApi~reportingGetSubscriptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/APIPagedResponseUpdateSystemModelsUpdateGroupClientRelationship} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of current Client Subscriptions.
     * No Documentation Found.
     * @param {Object} opts Optional parameters
     * @param {String} [clientID] Optional. Filter by Client ID
     * @param {String} [updateGroupID] Optional. Filter by Update Group ID
     * @param {Number} [limit] Optional. The page limit. The default page limit is 10.
     * @param {Number} [offset] Optional. The page offset. The default page offset is 0.
     * @param {module:api/ReportingApi~reportingGetSubscriptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/APIPagedResponseUpdateSystemModelsUpdateGroupClientRelationship}
     */
    reportingGetSubscriptions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'ClientID': opts['clientID'],
        'UpdateGroupID': opts['updateGroupID'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = APIPagedResponseUpdateSystemModelsUpdateGroupClientRelationship;
      return this.apiClient.callApi(
        '/api/v2/Reporting/GetSubscriptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reportingPackageStatusSummary operation.
     * @callback module:api/ReportingApi~reportingPackageStatusSummaryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateSystemModelsPackageStatusSummary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a summary report for a Specific Package
     * No Documentation Found.
     * @param {String} packageID The Package ID
     * @param {module:api/ReportingApi~reportingPackageStatusSummaryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateSystemModelsPackageStatusSummary}
     */
    reportingPackageStatusSummary(packageID, callback) {
      let postBody = null;
      // verify the required parameter 'packageID' is set
      if (packageID === undefined || packageID === null) {
        throw new Error("Missing the required parameter 'packageID' when calling reportingPackageStatusSummary");
      }

      let pathParams = {
      };
      let queryParams = {
        'PackageID': packageID
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = UpdateSystemModelsPackageStatusSummary;
      return this.apiClient.callApi(
        '/api/v2/Reporting/PackageStatusSummary', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reportingRegisteredClients operation.
     * @callback module:api/ReportingApi~reportingRegisteredClientsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/APIPagedResponseUpdateSystemModelsClientStatusUpdateSystemModelsPagedClientStatusMetadata} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of subscribed clients
     * No Documentation Found.
     * @param {Object} opts Optional parameters
     * @param {String} [updateGroupID] Optional but required when including any or all of following parameters: ReportValue, ReportResult, ReportResultIsValid. The Update Group ID. If not provided, all clients will be returned.
     * @param {String} [clientID] Optional. Filter where ClientID matches a value. Wildcards are supported (*).
     * @param {String} [tag] Optional. Filter where Tag matches a value. Wildcards are supported (*).
     * @param {String} [reportResult] Optional and UpdateGroupID must be included. Filter where ReportResult matches a value. Wildcards are supported (*).
     * @param {Boolean} [reportResultIsValid] Optional and UpdateGroupID must be included. When 'true' filters results where ReportResult equals ReportResultExpected.  When 'false' filters results where ValueToValidate does not equal ReportResults.
     * @param {String} [reportValue] Optional and UpdateGroupID must be included. Filter where ReportValue matches a value. Wildcards are supported (*).
     * @param {Date} [lastCheckInBefore] Optional. Filter where LastCheckIn occured before the provided date.
     * @param {Date} [lastCheckInAfter] Optional. Filter where LastCheckIn occured after the provided date.
     * @param {String} [orderBy] Optional. Specify the order in which results should be returned. Use this format: [FieldName] [ASC|ASCENDING|DESC|DESCENDING],...                 If sort direction is not provided for a field, it will be sorted ascending.
     * @param {Number} [limit] Optional. The page limit. The default page limit is 10.
     * @param {Number} [offset] Optional. The page offset. The default page offset is 0.
     * @param {module:api/ReportingApi~reportingRegisteredClientsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/APIPagedResponseUpdateSystemModelsClientStatusUpdateSystemModelsPagedClientStatusMetadata}
     */
    reportingRegisteredClients(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'UpdateGroupID': opts['updateGroupID'],
        'ClientID': opts['clientID'],
        'Tag': opts['tag'],
        'ReportResult': opts['reportResult'],
        'ReportResultIsValid': opts['reportResultIsValid'],
        'ReportValue': opts['reportValue'],
        'LastCheckInBefore': opts['lastCheckInBefore'],
        'LastCheckInAfter': opts['lastCheckInAfter'],
        'OrderBy': opts['orderBy'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = APIPagedResponseUpdateSystemModelsClientStatusUpdateSystemModelsPagedClientStatusMetadata;
      return this.apiClient.callApi(
        '/api/v2/Reporting/RegisteredClients', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reportingUpdateGroups operation.
     * @callback module:api/ReportingApi~reportingUpdateGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/APIPagedResponseUpdateSystemModelsUpdateGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of Update Groups.  Update Groups are used by the client to register for a specific type of update.
     * No Documentation Found.
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] Optional. The page limit. The default page limit is 10.
     * @param {Number} [offset] Optional. The page offset. The default page offset is 0.
     * @param {module:api/ReportingApi~reportingUpdateGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/APIPagedResponseUpdateSystemModelsUpdateGroup}
     */
    reportingUpdateGroups(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = APIPagedResponseUpdateSystemModelsUpdateGroup;
      return this.apiClient.callApi(
        '/api/v2/Reporting/UpdateGroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reportingUpdateMetrics operation.
     * @callback module:api/ReportingApi~reportingUpdateMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateSystemModelsUpdateMetricsData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get data for pie charts in UpdateMetrics.
     * No Documentation Found.
     * @param {String} updateGroupID The UpdateType in which clients must be for the report to include them.
     * @param {Object} opts Optional parameters
     * @param {Number} [bundleNumber] Optional. Tells us which chart to show based upon filter.
     * @param {module:api/ReportingApi~reportingUpdateMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateSystemModelsUpdateMetricsData}
     */
    reportingUpdateMetrics(updateGroupID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'updateGroupID' is set
      if (updateGroupID === undefined || updateGroupID === null) {
        throw new Error("Missing the required parameter 'updateGroupID' when calling reportingUpdateMetrics");
      }

      let pathParams = {
      };
      let queryParams = {
        'UpdateGroupID': updateGroupID,
        'bundleNumber': opts['bundleNumber']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = UpdateSystemModelsUpdateMetricsData;
      return this.apiClient.callApi(
        '/api/v2/Reporting/UpdateMetrics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
