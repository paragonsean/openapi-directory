/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import APIModelsApiError from '../model/APIModelsApiError';
import APIPagedResponseContentSubmissionSharedBusinessEntitiesRelease from '../model/APIPagedResponseContentSubmissionSharedBusinessEntitiesRelease';
import ContentSubmissionSharedBusinessEntitiesRelease from '../model/ContentSubmissionSharedBusinessEntitiesRelease';

/**
* Release service.
* @module api/ReleaseApi
* @version v1
*/
export default class ReleaseApi {

    /**
    * Constructs a new ReleaseApi. 
    * @alias module:api/ReleaseApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the releaseDeleteReleaseBundle operation.
     * @callback module:api/ReleaseApi~releaseDeleteReleaseBundleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the association between a release and a bundle.
     * No Documentation Found.
     * @param {Number} releaseId The release identifier.
     * @param {String} bundleId The bundle identifier.
     * @param {module:api/ReleaseApi~releaseDeleteReleaseBundleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    releaseDeleteReleaseBundle(releaseId, bundleId, callback) {
      let postBody = null;
      // verify the required parameter 'releaseId' is set
      if (releaseId === undefined || releaseId === null) {
        throw new Error("Missing the required parameter 'releaseId' when calling releaseDeleteReleaseBundle");
      }
      // verify the required parameter 'bundleId' is set
      if (bundleId === undefined || bundleId === null) {
        throw new Error("Missing the required parameter 'bundleId' when calling releaseDeleteReleaseBundle");
      }

      let pathParams = {
        'ReleaseId': releaseId,
        'BundleId': bundleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/Releases/{ReleaseId}/Bundle/{BundleId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the releaseGetRelease operation.
     * @callback module:api/ReleaseApi~releaseGetReleaseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContentSubmissionSharedBusinessEntitiesRelease} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a  Release by ID
     * Gets a Release by ID. When successful, the response is the requested Release.              If unsuccessful, an appropriate ApiError is returned.
     * @param {Number} releaseId The ID of the Release to get.
     * @param {module:api/ReleaseApi~releaseGetReleaseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContentSubmissionSharedBusinessEntitiesRelease}
     */
    releaseGetRelease(releaseId, callback) {
      let postBody = null;
      // verify the required parameter 'releaseId' is set
      if (releaseId === undefined || releaseId === null) {
        throw new Error("Missing the required parameter 'releaseId' when calling releaseGetRelease");
      }

      let pathParams = {
        'ReleaseId': releaseId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = ContentSubmissionSharedBusinessEntitiesRelease;
      return this.apiClient.callApi(
        '/api/v2/Releases/{ReleaseId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the releaseGetReleases operation.
     * @callback module:api/ReleaseApi~releaseGetReleasesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/APIPagedResponseContentSubmissionSharedBusinessEntitiesRelease} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Release
     * Gets a collection of Release. When successful, the response is a PagedResponse of Release.              If unsuccessful, an appropriate ApiError is returned.
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] Optional. The page limit.  If not specified, the default page limit is 10.
     * @param {Number} [offset] Optional. The page offset.  If not specified, the default page offset is 0.
     * @param {Boolean} [visible] Optional. Filter by visible.
     * @param {String} [bundleID] Optional. Filter by BundleID.
     * @param {module:api/ReleaseApi~releaseGetReleasesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/APIPagedResponseContentSubmissionSharedBusinessEntitiesRelease}
     */
    releaseGetReleases(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'visible': opts['visible'],
        'bundleID': opts['bundleID']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = APIPagedResponseContentSubmissionSharedBusinessEntitiesRelease;
      return this.apiClient.callApi(
        '/api/v2/Releases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the releasePostRelease operation.
     * @callback module:api/ReleaseApi~releasePostReleaseCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Release
     * Creates a Release.  The body of the POST is the Release to create.              The ReleaseId will be assigned on creation of the Job.  When successful, the response              is the Release Id.  If unsuccessful, an appropriate ApiError is returned.
     * @param {module:model/ContentSubmissionSharedBusinessEntitiesRelease} contentSubmissionSharedBusinessEntitiesRelease The Release to create.
     * @param {module:api/ReleaseApi~releasePostReleaseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    releasePostRelease(contentSubmissionSharedBusinessEntitiesRelease, callback) {
      let postBody = contentSubmissionSharedBusinessEntitiesRelease;
      // verify the required parameter 'contentSubmissionSharedBusinessEntitiesRelease' is set
      if (contentSubmissionSharedBusinessEntitiesRelease === undefined || contentSubmissionSharedBusinessEntitiesRelease === null) {
        throw new Error("Missing the required parameter 'contentSubmissionSharedBusinessEntitiesRelease' when calling releasePostRelease");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/api/v2/Releases', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the releasePostReleaseBundle operation.
     * @callback module:api/ReleaseApi~releasePostReleaseBundleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Associates the release with a bundle.
     * No Documentation Found.
     * @param {Number} releaseId The release identifier.
     * @param {String} bundleId The bundle identifier.
     * @param {module:api/ReleaseApi~releasePostReleaseBundleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    releasePostReleaseBundle(releaseId, bundleId, callback) {
      let postBody = null;
      // verify the required parameter 'releaseId' is set
      if (releaseId === undefined || releaseId === null) {
        throw new Error("Missing the required parameter 'releaseId' when calling releasePostReleaseBundle");
      }
      // verify the required parameter 'bundleId' is set
      if (bundleId === undefined || bundleId === null) {
        throw new Error("Missing the required parameter 'bundleId' when calling releasePostReleaseBundle");
      }

      let pathParams = {
        'ReleaseId': releaseId,
        'BundleId': bundleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/Releases/{ReleaseId}/Bundle/{BundleId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the releasePutContentDefinition operation.
     * @callback module:api/ReleaseApi~releasePutContentDefinitionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Release
     * Updates a Release.  The body of the PUT is the updated Release.                When successful, the response is empty.  If unsuccessful, an appropriate ApiError is returned.
     * @param {Number} releaseId The ID of the Release to update
     * @param {module:model/ContentSubmissionSharedBusinessEntitiesRelease} contentSubmissionSharedBusinessEntitiesRelease The updated Release
     * @param {module:api/ReleaseApi~releasePutContentDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    releasePutContentDefinition(releaseId, contentSubmissionSharedBusinessEntitiesRelease, callback) {
      let postBody = contentSubmissionSharedBusinessEntitiesRelease;
      // verify the required parameter 'releaseId' is set
      if (releaseId === undefined || releaseId === null) {
        throw new Error("Missing the required parameter 'releaseId' when calling releasePutContentDefinition");
      }
      // verify the required parameter 'contentSubmissionSharedBusinessEntitiesRelease' is set
      if (contentSubmissionSharedBusinessEntitiesRelease === undefined || contentSubmissionSharedBusinessEntitiesRelease === null) {
        throw new Error("Missing the required parameter 'contentSubmissionSharedBusinessEntitiesRelease' when calling releasePutContentDefinition");
      }

      let pathParams = {
        'releaseId': releaseId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/Releases/{releaseId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
