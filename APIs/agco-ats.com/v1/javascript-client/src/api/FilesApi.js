/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import APIIPagedResponseGlobalResourcesSharedModelsFileDownload from '../model/APIIPagedResponseGlobalResourcesSharedModelsFileDownload';
import APIModelsApiError from '../model/APIModelsApiError';
import GlobalResourcesSharedModelsFileDownload from '../model/GlobalResourcesSharedModelsFileDownload';

/**
* Files service.
* @module api/FilesApi
* @version v1
*/
export default class FilesApi {

    /**
    * Constructs a new FilesApi. 
    * @alias module:api/FilesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the filesDeleteFile operation.
     * @callback module:api/FilesApi~filesDeleteFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mark a file as 'Removed'. Disables download of the file and hides metadata from GET all method
     * No Documentation Found.
     * @param {String} ID The file's id.
     * @param {module:api/FilesApi~filesDeleteFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    filesDeleteFile(ID, callback) {
      let postBody = null;
      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling filesDeleteFile");
      }

      let pathParams = {
        'ID': ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/Files/{ID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the filesGetFile operation.
     * @callback module:api/FilesApi~filesGetFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GlobalResourcesSharedModelsFileDownload} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a file's metadata.
     * No Documentation Found.
     * @param {String} ID 
     * @param {module:api/FilesApi~filesGetFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GlobalResourcesSharedModelsFileDownload}
     */
    filesGetFile(ID, callback) {
      let postBody = null;
      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling filesGetFile");
      }

      let pathParams = {
        'ID': ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = GlobalResourcesSharedModelsFileDownload;
      return this.apiClient.callApi(
        '/api/v2/Files/{ID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the filesGetFileContents operation.
     * @callback module:api/FilesApi~filesGetFileContentsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download the contents of a file. The current State of the File should be 'Available'.
     * No Documentation Found.
     * @param {String} ID The file's metadata.
     * @param {module:api/FilesApi~filesGetFileContentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    filesGetFileContents(ID, callback) {
      let postBody = null;
      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling filesGetFileContents");
      }

      let pathParams = {
        'ID': ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v2/Files/{ID}/FileContents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the filesGetFiles operation.
     * @callback module:api/FilesApi~filesGetFilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/APIIPagedResponseGlobalResourcesSharedModelsFileDownload} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a paged response of file metadata.
     * No Documentation Found.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includeDeleted] Indicates whether to include files marked as removed.
     * @param {Number} [limit] Optional. The page limit. The default page limit is 10.
     * @param {Number} [offset] Optional. The page offset. The default page offset is 0.
     * @param {module:api/FilesApi~filesGetFilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/APIIPagedResponseGlobalResourcesSharedModelsFileDownload}
     */
    filesGetFiles(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'includeDeleted': opts['includeDeleted'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = APIIPagedResponseGlobalResourcesSharedModelsFileDownload;
      return this.apiClient.callApi(
        '/api/v2/Files', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the filesPostFile operation.
     * @callback module:api/FilesApi~filesPostFileCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create the metadata for a file before uploading. The State of the File should be 'Created'.
     * No Documentation Found.
     * @param {module:model/GlobalResourcesSharedModelsFileDownload} globalResourcesSharedModelsFileDownload The file's metadata.
     * @param {module:api/FilesApi~filesPostFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    filesPostFile(globalResourcesSharedModelsFileDownload, callback) {
      let postBody = globalResourcesSharedModelsFileDownload;
      // verify the required parameter 'globalResourcesSharedModelsFileDownload' is set
      if (globalResourcesSharedModelsFileDownload === undefined || globalResourcesSharedModelsFileDownload === null) {
        throw new Error("Missing the required parameter 'globalResourcesSharedModelsFileDownload' when calling filesPostFile");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v2/Files', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the filesPutFile operation.
     * @callback module:api/FilesApi~filesPutFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the metadata for a file. Size may not be modified by the client.
     * Update the metadata for a file. Size may not be modified by the client.                   Set status to 'Available' to publish a file. The file must be uploaded.                  Set status to 'Created' to reset a file's contents and re-upload.                   A file may only be 'Removed' by the DELETE method.
     * @param {String} ID The file's id
     * @param {module:model/GlobalResourcesSharedModelsFileDownload} globalResourcesSharedModelsFileDownload The file's metadata
     * @param {module:api/FilesApi~filesPutFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    filesPutFile(ID, globalResourcesSharedModelsFileDownload, callback) {
      let postBody = globalResourcesSharedModelsFileDownload;
      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling filesPutFile");
      }
      // verify the required parameter 'globalResourcesSharedModelsFileDownload' is set
      if (globalResourcesSharedModelsFileDownload === undefined || globalResourcesSharedModelsFileDownload === null) {
        throw new Error("Missing the required parameter 'globalResourcesSharedModelsFileDownload' when calling filesPutFile");
      }

      let pathParams = {
        'ID': ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/Files/{ID}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the filesPutFileContents operation.
     * @callback module:api/FilesApi~filesPutFileContentsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload the contents of a file. The current State of the File should be 'Created'.
     * No Documentation Found.
     * @param {String} ID The file's metadata.
     * @param {module:api/FilesApi~filesPutFileContentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    filesPutFileContents(ID, callback) {
      let postBody = null;
      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling filesPutFileContents");
      }

      let pathParams = {
        'ID': ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v2/Files/{ID}/FileContents', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
