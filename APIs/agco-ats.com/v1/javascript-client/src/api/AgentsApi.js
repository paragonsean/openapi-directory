/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import APIModelsApiError from '../model/APIModelsApiError';
import APIPagedResponseBuildSystemSharedDTOAgent from '../model/APIPagedResponseBuildSystemSharedDTOAgent';
import BuildSystemSharedDTOActivityRun from '../model/BuildSystemSharedDTOActivityRun';
import BuildSystemSharedDTOAgent from '../model/BuildSystemSharedDTOAgent';
import BuildSystemSharedDTOAgentStatus from '../model/BuildSystemSharedDTOAgentStatus';

/**
* Agents service.
* @module api/AgentsApi
* @version v1
*/
export default class AgentsApi {

    /**
    * Constructs a new AgentsApi. 
    * @alias module:api/AgentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the agentsDeleteAgent operation.
     * @callback module:api/AgentsApi~agentsDeleteAgentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an Agent
     * Deletes an Agent. When successful, the response is empty.  If unsuccessful, an appropriate              ApiError is returned.
     * @param {Number} agentID The id of the Agent to delete.
     * @param {module:api/AgentsApi~agentsDeleteAgentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    agentsDeleteAgent(agentID, callback) {
      let postBody = null;
      // verify the required parameter 'agentID' is set
      if (agentID === undefined || agentID === null) {
        throw new Error("Missing the required parameter 'agentID' when calling agentsDeleteAgent");
      }

      let pathParams = {
        'agentID': agentID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/agents/{agentID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the agentsGetAgentActivityRun operation.
     * @callback module:api/AgentsApi~agentsGetAgentActivityRunCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuildSystemSharedDTOActivityRun} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an Agent's ActivityRun
     * Gets the activity run assigned to an agent.  When successful, the response is the ActivityRun              assigned to the Agent.  If unsuccessful, an appropriate ApiError is returned.
     * @param {Number} agentID The id of the Agent to get.
     * @param {module:api/AgentsApi~agentsGetAgentActivityRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuildSystemSharedDTOActivityRun}
     */
    agentsGetAgentActivityRun(agentID, callback) {
      let postBody = null;
      // verify the required parameter 'agentID' is set
      if (agentID === undefined || agentID === null) {
        throw new Error("Missing the required parameter 'agentID' when calling agentsGetAgentActivityRun");
      }

      let pathParams = {
        'agentID': agentID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = BuildSystemSharedDTOActivityRun;
      return this.apiClient.callApi(
        '/api/v2/agents/{agentID}/ActivityRun', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the agentsGetAgentAsync operation.
     * @callback module:api/AgentsApi~agentsGetAgentAsyncCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuildSystemSharedDTOAgent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Agent
     * Gets an Agent by ID. When successful, the response is the requested Agent.  If unsuccessful,              an appropriate ApiError is returned.
     * @param {Number} agentID The id of the Agent to get.
     * @param {module:api/AgentsApi~agentsGetAgentAsyncCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuildSystemSharedDTOAgent}
     */
    agentsGetAgentAsync(agentID, callback) {
      let postBody = null;
      // verify the required parameter 'agentID' is set
      if (agentID === undefined || agentID === null) {
        throw new Error("Missing the required parameter 'agentID' when calling agentsGetAgentAsync");
      }

      let pathParams = {
        'agentID': agentID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = BuildSystemSharedDTOAgent;
      return this.apiClient.callApi(
        '/api/v2/agents/{agentID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the agentsGetAgents operation.
     * @callback module:api/AgentsApi~agentsGetAgentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/APIPagedResponseBuildSystemSharedDTOAgent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Agents
     * Gets a collection of Agents. When successful, the response is a PagedResponse of Agents.                If unsuccessful, an appropriate ApiError is returned.
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] Optional. The page limit.  If not specified, the default page limit is 10.
     * @param {Number} [offset] Optional. The page offset.  If not specified, the default page offset is 0.
     * @param {module:api/AgentsApi~agentsGetAgentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/APIPagedResponseBuildSystemSharedDTOAgent}
     */
    agentsGetAgents(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = APIPagedResponseBuildSystemSharedDTOAgent;
      return this.apiClient.callApi(
        '/api/v2/agents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the agentsGetCurrentAgentActivityRun operation.
     * @callback module:api/AgentsApi~agentsGetCurrentAgentActivityRunCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuildSystemSharedDTOActivityRun} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the ActivityRun of Agent associated with the current user
     * Gets the activity run assigned to an agent.  When successful, the response is the ActivityRun              assigned to the Agent.  If unsuccessful, an appropriate ApiError is returned.
     * @param {module:api/AgentsApi~agentsGetCurrentAgentActivityRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuildSystemSharedDTOActivityRun}
     */
    agentsGetCurrentAgentActivityRun(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = BuildSystemSharedDTOActivityRun;
      return this.apiClient.callApi(
        '/api/v2/agents/Current/ActivityRun', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the agentsGetCurrentAgentAsync operation.
     * @callback module:api/AgentsApi~agentsGetCurrentAgentAsyncCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuildSystemSharedDTOAgent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Agent associated with the current user
     * Gets the Agent associated with the current user. When successful, the response is the requested Agent.  If unsuccessful,              an appropriate ApiError is returned.
     * @param {module:api/AgentsApi~agentsGetCurrentAgentAsyncCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuildSystemSharedDTOAgent}
     */
    agentsGetCurrentAgentAsync(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = BuildSystemSharedDTOAgent;
      return this.apiClient.callApi(
        '/api/v2/agents/Current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the agentsPostAgent operation.
     * @callback module:api/AgentsApi~agentsPostAgentCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an Agent
     * Creates an Agent.  The body of the POST is the Agent to create.  The AgentID will be assigned              on creation of the Agent.  When successful, the response is the AgentID.  If unsuccessful, an              appropriate ApiError is returned.
     * @param {module:model/BuildSystemSharedDTOAgent} buildSystemSharedDTOAgent The Agent to create.  The AgentID will be assigned on creation of the Agent.
     * @param {module:api/AgentsApi~agentsPostAgentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    agentsPostAgent(buildSystemSharedDTOAgent, callback) {
      let postBody = buildSystemSharedDTOAgent;
      // verify the required parameter 'buildSystemSharedDTOAgent' is set
      if (buildSystemSharedDTOAgent === undefined || buildSystemSharedDTOAgent === null) {
        throw new Error("Missing the required parameter 'buildSystemSharedDTOAgent' when calling agentsPostAgent");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/api/v2/agents', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the agentsPutAgent operation.
     * @callback module:api/AgentsApi~agentsPutAgentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an Agent
     * Updates an Agent.  The body of the PUT is the updated Agent.  When successful, the response is empty.              If unsuccessful, an appropriate ApiError is returned.
     * @param {Number} agentID The id of the Agent to update.
     * @param {module:model/BuildSystemSharedDTOAgent} buildSystemSharedDTOAgent The updated Agent
     * @param {module:api/AgentsApi~agentsPutAgentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    agentsPutAgent(agentID, buildSystemSharedDTOAgent, callback) {
      let postBody = buildSystemSharedDTOAgent;
      // verify the required parameter 'agentID' is set
      if (agentID === undefined || agentID === null) {
        throw new Error("Missing the required parameter 'agentID' when calling agentsPutAgent");
      }
      // verify the required parameter 'buildSystemSharedDTOAgent' is set
      if (buildSystemSharedDTOAgent === undefined || buildSystemSharedDTOAgent === null) {
        throw new Error("Missing the required parameter 'buildSystemSharedDTOAgent' when calling agentsPutAgent");
      }

      let pathParams = {
        'agentID': agentID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/agents/{agentID}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the agentsPutAgentActivityRun operation.
     * @callback module:api/AgentsApi~agentsPutAgentActivityRunCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the ActivityRun assigned to the Agent.
     * No Documentation Found.
     * @param {Number} agentID The id of the Agent to update.
     * @param {module:model/BuildSystemSharedDTOActivityRun} buildSystemSharedDTOActivityRun The ActivityRun assigned to the agent.  Only the ActivityRunID is used.
     * @param {module:api/AgentsApi~agentsPutAgentActivityRunCallback} callback The callback function, accepting three arguments: error, data, response
     */
    agentsPutAgentActivityRun(agentID, buildSystemSharedDTOActivityRun, callback) {
      let postBody = buildSystemSharedDTOActivityRun;
      // verify the required parameter 'agentID' is set
      if (agentID === undefined || agentID === null) {
        throw new Error("Missing the required parameter 'agentID' when calling agentsPutAgentActivityRun");
      }
      // verify the required parameter 'buildSystemSharedDTOActivityRun' is set
      if (buildSystemSharedDTOActivityRun === undefined || buildSystemSharedDTOActivityRun === null) {
        throw new Error("Missing the required parameter 'buildSystemSharedDTOActivityRun' when calling agentsPutAgentActivityRun");
      }

      let pathParams = {
        'agentID': agentID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/agents/{agentID}/ActivityRun', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the agentsPutAgentStatus operation.
     * @callback module:api/AgentsApi~agentsPutAgentStatusCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an Agent
     * Updates the status of an Agent.The body of the PUT is the updated Agent status.  When successful,              the response is empty.If unsuccessful, an appropriate ApiError is returned.
     * @param {Number} agentID The id of the Agent to update.
     * @param {module:model/BuildSystemSharedDTOAgentStatus} buildSystemSharedDTOAgentStatus The updated AgentStatus.
     * @param {module:api/AgentsApi~agentsPutAgentStatusCallback} callback The callback function, accepting three arguments: error, data, response
     */
    agentsPutAgentStatus(agentID, buildSystemSharedDTOAgentStatus, callback) {
      let postBody = buildSystemSharedDTOAgentStatus;
      // verify the required parameter 'agentID' is set
      if (agentID === undefined || agentID === null) {
        throw new Error("Missing the required parameter 'agentID' when calling agentsPutAgentStatus");
      }
      // verify the required parameter 'buildSystemSharedDTOAgentStatus' is set
      if (buildSystemSharedDTOAgentStatus === undefined || buildSystemSharedDTOAgentStatus === null) {
        throw new Error("Missing the required parameter 'buildSystemSharedDTOAgentStatus' when calling agentsPutAgentStatus");
      }

      let pathParams = {
        'agentID': agentID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/agents/{agentID}/Status', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
