/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import APIIPagedResponseGlobalResourcesSharedModelsLanguage from '../model/APIIPagedResponseGlobalResourcesSharedModelsLanguage';
import APIModelsApiError from '../model/APIModelsApiError';
import GlobalResourcesSharedModelsLanguage from '../model/GlobalResourcesSharedModelsLanguage';

/**
* Languages service.
* @module api/LanguagesApi
* @version v1
*/
export default class LanguagesApi {

    /**
    * Constructs a new LanguagesApi. 
    * @alias module:api/LanguagesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the languagesCreateLanguage operation.
     * @callback module:api/LanguagesApi~languagesCreateLanguageCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a Language to support for translations. Accepts a Language object. Returns the Id of the created object.
     * No Documentation Found.
     * @param {module:model/GlobalResourcesSharedModelsLanguage} globalResourcesSharedModelsLanguage 
     * @param {module:api/LanguagesApi~languagesCreateLanguageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    languagesCreateLanguage(globalResourcesSharedModelsLanguage, callback) {
      let postBody = globalResourcesSharedModelsLanguage;
      // verify the required parameter 'globalResourcesSharedModelsLanguage' is set
      if (globalResourcesSharedModelsLanguage === undefined || globalResourcesSharedModelsLanguage === null) {
        throw new Error("Missing the required parameter 'globalResourcesSharedModelsLanguage' when calling languagesCreateLanguage");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/api/v2/Languages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the languagesDeleteLanguage operation.
     * @callback module:api/LanguagesApi~languagesDeleteLanguageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a Language from those supported for translations. Marks language as deleted.
     * No Documentation Found.
     * @param {Number} localeID 
     * @param {module:api/LanguagesApi~languagesDeleteLanguageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    languagesDeleteLanguage(localeID, callback) {
      let postBody = null;
      // verify the required parameter 'localeID' is set
      if (localeID === undefined || localeID === null) {
        throw new Error("Missing the required parameter 'localeID' when calling languagesDeleteLanguage");
      }

      let pathParams = {
        'LocaleID': localeID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/Languages/{LocaleID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the languagesGetLanguage operation.
     * @callback module:api/LanguagesApi~languagesGetLanguageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GlobalResourcesSharedModelsLanguage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a language by its id. Returns a Language object
     * No Documentation Found.
     * @param {Number} localeID 
     * @param {module:api/LanguagesApi~languagesGetLanguageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GlobalResourcesSharedModelsLanguage}
     */
    languagesGetLanguage(localeID, callback) {
      let postBody = null;
      // verify the required parameter 'localeID' is set
      if (localeID === undefined || localeID === null) {
        throw new Error("Missing the required parameter 'localeID' when calling languagesGetLanguage");
      }

      let pathParams = {
        'LocaleID': localeID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = GlobalResourcesSharedModelsLanguage;
      return this.apiClient.callApi(
        '/api/v2/Languages/{LocaleID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the languagesGetLanguages operation.
     * @callback module:api/LanguagesApi~languagesGetLanguagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/APIIPagedResponseGlobalResourcesSharedModelsLanguage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of the languages for which translations are supported. Returns a PagedResponse of Language objects.
     * No Documentation Found.
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] limit the number of Language objects returned. Optional (defaults to 10).
     * @param {Number} [offset] the number of Language objects to skip. Optional (defaults to 0).
     * @param {Boolean} [includeDeleted] whether to include languages marked as deleted. Defaults to false
     * @param {module:api/LanguagesApi~languagesGetLanguagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/APIIPagedResponseGlobalResourcesSharedModelsLanguage}
     */
    languagesGetLanguages(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'includeDeleted': opts['includeDeleted']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = APIIPagedResponseGlobalResourcesSharedModelsLanguage;
      return this.apiClient.callApi(
        '/api/v2/Languages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the languagesUpdateLanguage operation.
     * @callback module:api/LanguagesApi~languagesUpdateLanguageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a languageâ€™s description. Accepts a Language object.
     * No Documentation Found.
     * @param {Number} localeID 
     * @param {module:model/GlobalResourcesSharedModelsLanguage} globalResourcesSharedModelsLanguage 
     * @param {module:api/LanguagesApi~languagesUpdateLanguageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    languagesUpdateLanguage(localeID, globalResourcesSharedModelsLanguage, callback) {
      let postBody = globalResourcesSharedModelsLanguage;
      // verify the required parameter 'localeID' is set
      if (localeID === undefined || localeID === null) {
        throw new Error("Missing the required parameter 'localeID' when calling languagesUpdateLanguage");
      }
      // verify the required parameter 'globalResourcesSharedModelsLanguage' is set
      if (globalResourcesSharedModelsLanguage === undefined || globalResourcesSharedModelsLanguage === null) {
        throw new Error("Missing the required parameter 'globalResourcesSharedModelsLanguage' when calling languagesUpdateLanguage");
      }

      let pathParams = {
        'LocaleID': localeID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/Languages/{LocaleID}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
