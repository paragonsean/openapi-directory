/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import APIIPagedResponseGlobalResourcesSharedModelsGlobalImage from '../model/APIIPagedResponseGlobalResourcesSharedModelsGlobalImage';
import APIModelsApiError from '../model/APIModelsApiError';
import GlobalResourcesSharedModelsGlobalImage from '../model/GlobalResourcesSharedModelsGlobalImage';

/**
* GlobalImages service.
* @module api/GlobalImagesApi
* @version v1
*/
export default class GlobalImagesApi {

    /**
    * Constructs a new GlobalImagesApi. 
    * @alias module:api/GlobalImagesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the globalImagesDeleteFile operation.
     * @callback module:api/GlobalImagesApi~globalImagesDeleteFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mark a file as 'Removed'. Disables download of the image and hides metadata from GET all method
     * No Documentation Found.
     * @param {String} ID The GlobalImage's id.
     * @param {module:api/GlobalImagesApi~globalImagesDeleteFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    globalImagesDeleteFile(ID, callback) {
      let postBody = null;
      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling globalImagesDeleteFile");
      }

      let pathParams = {
        'ID': ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/GlobalImages/{ID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the globalImagesGetGlobalImage operation.
     * @callback module:api/GlobalImagesApi~globalImagesGetGlobalImageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GlobalResourcesSharedModelsGlobalImage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a GlobalImage's metadata.
     * No Documentation Found.
     * @param {String} ID The GlobalImage's id.
     * @param {module:api/GlobalImagesApi~globalImagesGetGlobalImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GlobalResourcesSharedModelsGlobalImage}
     */
    globalImagesGetGlobalImage(ID, callback) {
      let postBody = null;
      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling globalImagesGetGlobalImage");
      }

      let pathParams = {
        'ID': ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = GlobalResourcesSharedModelsGlobalImage;
      return this.apiClient.callApi(
        '/api/v2/GlobalImages/{ID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the globalImagesGetGlobalImageContents operation.
     * @callback module:api/GlobalImagesApi~globalImagesGetGlobalImageContentsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download the contents of a GlobalImage. The current State of the GlobalImage should be 'Available'.
     * No Documentation Found.
     * @param {String} ID The global image metadata id.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [isFullImage] Indicated whether to download the full image or the thumbnail. Defaults to 'true'.
     * @param {module:api/GlobalImagesApi~globalImagesGetGlobalImageContentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    globalImagesGetGlobalImageContents(ID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling globalImagesGetGlobalImageContents");
      }

      let pathParams = {
        'ID': ID
      };
      let queryParams = {
        'isFullImage': opts['isFullImage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v2/GlobalImages/{ID}/ImageContents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the globalImagesGetGlobalImages operation.
     * @callback module:api/GlobalImagesApi~globalImagesGetGlobalImagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/APIIPagedResponseGlobalResourcesSharedModelsGlobalImage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a paged response of GlobalImage.
     * No Documentation Found.
     * @param {Object} opts Optional parameters
     * @param {String} [search] Optional. Searches for matching global images with the matching Category Name, Publisher or Description
     * @param {String} [categoryId] 
     * @param {String} [publisher] 
     * @param {Boolean} [includeDeleted] Indicates whether to include GlobalImages marked as removed.
     * @param {Number} [limit] Optional. The page limit. The default page limit is 10.
     * @param {Number} [offset] Optional. The page offset. The default page offset is 0.
     * @param {module:api/GlobalImagesApi~globalImagesGetGlobalImagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/APIIPagedResponseGlobalResourcesSharedModelsGlobalImage}
     */
    globalImagesGetGlobalImages(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'search': opts['search'],
        'categoryId': opts['categoryId'],
        'publisher': opts['publisher'],
        'includeDeleted': opts['includeDeleted'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = APIIPagedResponseGlobalResourcesSharedModelsGlobalImage;
      return this.apiClient.callApi(
        '/api/v2/GlobalImages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the globalImagesPostGlobalImage operation.
     * @callback module:api/GlobalImagesApi~globalImagesPostGlobalImageCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create the metadata for a GlobalImage before uploading. The State should be 'Created'.
     * No Documentation Found.
     * @param {module:model/GlobalResourcesSharedModelsGlobalImage} globalResourcesSharedModelsGlobalImage The file's metadata.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [overridePublisherOrDate] Whether to set the publisher and date to the provided values.
     * @param {module:api/GlobalImagesApi~globalImagesPostGlobalImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    globalImagesPostGlobalImage(globalResourcesSharedModelsGlobalImage, opts, callback) {
      opts = opts || {};
      let postBody = globalResourcesSharedModelsGlobalImage;
      // verify the required parameter 'globalResourcesSharedModelsGlobalImage' is set
      if (globalResourcesSharedModelsGlobalImage === undefined || globalResourcesSharedModelsGlobalImage === null) {
        throw new Error("Missing the required parameter 'globalResourcesSharedModelsGlobalImage' when calling globalImagesPostGlobalImage");
      }

      let pathParams = {
      };
      let queryParams = {
        'overridePublisherOrDate': opts['overridePublisherOrDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v2/GlobalImages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the globalImagesPutGlobalImage operation.
     * @callback module:api/GlobalImagesApi~globalImagesPutGlobalImageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the metadata for an image.
     * Update the metadata for an image. Size may not be modified by the client.                   Set status to 'Available' to publish an image. Both the image and thumbnail must be uploaded.                  Set status to 'Created' to reset an image's contents and re-upload.                   A file may only be 'Removed' by the DELETE method.
     * @param {String} ID The GlobalImage's id.
     * @param {module:model/GlobalResourcesSharedModelsGlobalImage} globalResourcesSharedModelsGlobalImage The GlobalImage's metadata
     * @param {Object} opts Optional parameters
     * @param {Boolean} [overridePublisherOrDate] Whether to set the publisher and date to the provided values.
     * @param {module:api/GlobalImagesApi~globalImagesPutGlobalImageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    globalImagesPutGlobalImage(ID, globalResourcesSharedModelsGlobalImage, opts, callback) {
      opts = opts || {};
      let postBody = globalResourcesSharedModelsGlobalImage;
      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling globalImagesPutGlobalImage");
      }
      // verify the required parameter 'globalResourcesSharedModelsGlobalImage' is set
      if (globalResourcesSharedModelsGlobalImage === undefined || globalResourcesSharedModelsGlobalImage === null) {
        throw new Error("Missing the required parameter 'globalResourcesSharedModelsGlobalImage' when calling globalImagesPutGlobalImage");
      }

      let pathParams = {
        'ID': ID
      };
      let queryParams = {
        'overridePublisherOrDate': opts['overridePublisherOrDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/GlobalImages/{ID}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the globalImagesPutGlobalImageContents operation.
     * @callback module:api/GlobalImagesApi~globalImagesPutGlobalImageContentsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload the contents of a GlobalImage. The current State of the File for the GlobalImage should be 'Created'.
     * Both the image and thumbnail must be uploaded.                  Set isFullImage = 'True' for Full Image, isFullImage = 'False' for Thumbnail
     * @param {String} ID The global image metadata id.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [isFullImage] Indicated whether this is the full image or the thumbnail. Defaults to 'true'.
     * @param {module:api/GlobalImagesApi~globalImagesPutGlobalImageContentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    globalImagesPutGlobalImageContents(ID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling globalImagesPutGlobalImageContents");
      }

      let pathParams = {
        'ID': ID
      };
      let queryParams = {
        'isFullImage': opts['isFullImage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v2/GlobalImages/{ID}/ImageContents', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
