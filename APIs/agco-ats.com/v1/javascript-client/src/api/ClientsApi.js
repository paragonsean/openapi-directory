/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import APIModelsApiError from '../model/APIModelsApiError';
import APIPagedResponseUpdateSystemModelsAvailableUpdateGroupSubscription from '../model/APIPagedResponseUpdateSystemModelsAvailableUpdateGroupSubscription';
import APIPagedResponseUpdateSystemModelsClient from '../model/APIPagedResponseUpdateSystemModelsClient';
import APIPagedResponseUpdateSystemModelsUpdateGroupSubscription from '../model/APIPagedResponseUpdateSystemModelsUpdateGroupSubscription';
import UpdateSystemModelsClient from '../model/UpdateSystemModelsClient';

/**
* Clients service.
* @module api/ClientsApi
* @version v1
*/
export default class ClientsApi {

    /**
    * Constructs a new ClientsApi. 
    * @alias module:api/ClientsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiV2ClientsIDGet operation.
     * @callback module:api/ClientsApi~apiV2ClientsIDGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateSystemModelsClient} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Client in the Update System.
     * No Documentation Found.
     * @param {String} ID The Client ID
     * @param {module:api/ClientsApi~apiV2ClientsIDGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateSystemModelsClient}
     */
    apiV2ClientsIDGet(ID, callback) {
      let postBody = null;
      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling apiV2ClientsIDGet");
      }

      let pathParams = {
        'ID': ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = UpdateSystemModelsClient;
      return this.apiClient.callApi(
        '/api/v2/Clients/{ID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clientsGet operation.
     * @callback module:api/ClientsApi~clientsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/APIPagedResponseUpdateSystemModelsClient} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a List of Clients in the Update System.
     * No Documentation Found.
     * @param {Object} opts Optional parameters
     * @param {String} [tag] Optional. Filter clients by Tag. Wildcards are supported (*).
     * @param {Number} [limit] Optional. The page limit. The default page limit is 10.
     * @param {Number} [offset] Optional. The page offset. The default page offset is 0.
     * @param {module:api/ClientsApi~clientsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/APIPagedResponseUpdateSystemModelsClient}
     */
    clientsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'Tag': opts['tag'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = APIPagedResponseUpdateSystemModelsClient;
      return this.apiClient.callApi(
        '/api/v2/Clients', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clientsGetAvailableSubscriptions operation.
     * @callback module:api/ClientsApi~clientsGetAvailableSubscriptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/APIPagedResponseUpdateSystemModelsAvailableUpdateGroupSubscription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Client's Available Update Group Subscriptions
     * No Documentation Found.
     * @param {String} ID The Client ID
     * @param {Object} opts Optional parameters
     * @param {String} [updateGroupID] Optional. Filter by Update Group.
     * @param {Number} [limit] Optional. The page limit. The default page limit is 10.
     * @param {Number} [offset] Optional. The page offset. The default page offset is 0.
     * @param {module:api/ClientsApi~clientsGetAvailableSubscriptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/APIPagedResponseUpdateSystemModelsAvailableUpdateGroupSubscription}
     */
    clientsGetAvailableSubscriptions(ID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling clientsGetAvailableSubscriptions");
      }

      let pathParams = {
        'ID': ID
      };
      let queryParams = {
        'UpdateGroupID': opts['updateGroupID'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = APIPagedResponseUpdateSystemModelsAvailableUpdateGroupSubscription;
      return this.apiClient.callApi(
        '/api/v2/Clients/{ID}/AvailableUpdateGroupSubscriptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clientsGetSubscriptions operation.
     * @callback module:api/ClientsApi~clientsGetSubscriptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/APIPagedResponseUpdateSystemModelsUpdateGroupSubscription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Client's Current Update Group Subscriptions
     * No Documentation Found.
     * @param {String} ID The Client ID
     * @param {Object} opts Optional parameters
     * @param {String} [updateGroupID] Optional. Filter by Update Group.
     * @param {Number} [limit] Optional. The page limit. The default page limit is 10.
     * @param {Number} [offset] Optional. The page offset. The default page offset is 0.
     * @param {module:api/ClientsApi~clientsGetSubscriptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/APIPagedResponseUpdateSystemModelsUpdateGroupSubscription}
     */
    clientsGetSubscriptions(ID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling clientsGetSubscriptions");
      }

      let pathParams = {
        'ID': ID
      };
      let queryParams = {
        'UpdateGroupID': opts['updateGroupID'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = APIPagedResponseUpdateSystemModelsUpdateGroupSubscription;
      return this.apiClient.callApi(
        '/api/v2/Clients/{ID}/UpdateGroupSubscriptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clientsPut operation.
     * @callback module:api/ClientsApi~clientsPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Client.
     * No Documentation Found.
     * @param {String} ID The Client ID
     * @param {module:model/UpdateSystemModelsClient} updateSystemModelsClient Updated Client Object.
     * @param {module:api/ClientsApi~clientsPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    clientsPut(ID, updateSystemModelsClient, callback) {
      let postBody = updateSystemModelsClient;
      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling clientsPut");
      }
      // verify the required parameter 'updateSystemModelsClient' is set
      if (updateSystemModelsClient === undefined || updateSystemModelsClient === null) {
        throw new Error("Missing the required parameter 'updateSystemModelsClient' when calling clientsPut");
      }

      let pathParams = {
        'ID': ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/Clients/{ID}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
