/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import APIModelsApiError from '../model/APIModelsApiError';
import APIModelsRoleUserChange from '../model/APIModelsRoleUserChange';
import APIModelsUserRoleChange from '../model/APIModelsUserRoleChange';
import APIPagedResponseAPIModelsRole from '../model/APIPagedResponseAPIModelsRole';
import APIPagedResponseAPIModelsUser from '../model/APIPagedResponseAPIModelsUser';
import APIPagedResponseAPIModelsUserEffectivePermission from '../model/APIPagedResponseAPIModelsUserEffectivePermission';

/**
* UserPermissions service.
* @module api/UserPermissionsApi
* @version v1
*/
export default class UserPermissionsApi {

    /**
    * Constructs a new UserPermissionsApi. 
    * @alias module:api/UserPermissionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiV2RolesIdUsersPut operation.
     * @callback module:api/UserPermissionsApi~apiV2RolesIdUsersPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Role's users
     * No Documentation Found.
     * @param {Number} id The Role's ID
     * @param {Array.<module:model/APIModelsRoleUserChange>} aPIModelsRoleUserChange A list of changes to the Role's Users
     * @param {module:api/UserPermissionsApi~apiV2RolesIdUsersPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV2RolesIdUsersPut(id, aPIModelsRoleUserChange, callback) {
      let postBody = aPIModelsRoleUserChange;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV2RolesIdUsersPut");
      }
      // verify the required parameter 'aPIModelsRoleUserChange' is set
      if (aPIModelsRoleUserChange === undefined || aPIModelsRoleUserChange === null) {
        throw new Error("Missing the required parameter 'aPIModelsRoleUserChange' when calling apiV2RolesIdUsersPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/Roles/{id}/Users', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2UsersCurrentPermissionsGet operation.
     * @callback module:api/UserPermissionsApi~apiV2UsersCurrentPermissionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/APIPagedResponseAPIModelsUserEffectivePermission} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a user's permissions
     * No Documentation Found.
     * @param {Object} opts Optional parameters
     * @param {String} [permission] Filter by permission name. Supports ending wildcard (*). Optional.
     * @param {Number} [limit] The page limit. The default page limit is 10.
     * @param {Number} [offset] The page offset. The default page offset is 0.
     * @param {module:api/UserPermissionsApi~apiV2UsersCurrentPermissionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/APIPagedResponseAPIModelsUserEffectivePermission}
     */
    apiV2UsersCurrentPermissionsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'Permission': opts['permission'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = APIPagedResponseAPIModelsUserEffectivePermission;
      return this.apiClient.callApi(
        '/api/v2/Users/Current/Permissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userPermissionsGetCurrentUserRoles operation.
     * @callback module:api/UserPermissionsApi~userPermissionsGetCurrentUserRolesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/APIPagedResponseAPIModelsRole} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the current user's roles
     * No Documentation Found.
     * @param {Object} opts Optional parameters
     * @param {String} [role] Filter by role name. Supports ending wildcard (*). Optional.
     * @param {Number} [limit] The page limit. The default page limit is 10.
     * @param {Number} [offset] The page offset. The default page offset is 0.
     * @param {module:api/UserPermissionsApi~userPermissionsGetCurrentUserRolesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/APIPagedResponseAPIModelsRole}
     */
    userPermissionsGetCurrentUserRoles(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'Role': opts['role'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = APIPagedResponseAPIModelsRole;
      return this.apiClient.callApi(
        '/api/v2/Users/Current/Roles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userPermissionsGetPermissions operation.
     * @callback module:api/UserPermissionsApi~userPermissionsGetPermissionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/APIPagedResponseAPIModelsUserEffectivePermission} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a user's permissions
     * No Documentation Found.
     * @param {Number} id The User's ID
     * @param {Object} opts Optional parameters
     * @param {String} [permission] Filter by permission name. Supports ending wildcard (*). Optional.
     * @param {Number} [limit] The page limit. The default page limit is 10.
     * @param {Number} [offset] The page offset. The default page offset is 0.
     * @param {module:api/UserPermissionsApi~userPermissionsGetPermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/APIPagedResponseAPIModelsUserEffectivePermission}
     */
    userPermissionsGetPermissions(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userPermissionsGetPermissions");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'Permission': opts['permission'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = APIPagedResponseAPIModelsUserEffectivePermission;
      return this.apiClient.callApi(
        '/api/v2/Users/{id}/Permissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userPermissionsGetRoles operation.
     * @callback module:api/UserPermissionsApi~userPermissionsGetRolesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/APIPagedResponseAPIModelsRole} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a user's roles
     * No Documentation Found.
     * @param {Number} id The User's ID
     * @param {Object} opts Optional parameters
     * @param {String} [role] Filter by role name. Supports ending wildcard (*). Optional.
     * @param {Number} [limit] The page limit. The default page limit is 10.
     * @param {Number} [offset] The page offset. The default page offset is 0.
     * @param {module:api/UserPermissionsApi~userPermissionsGetRolesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/APIPagedResponseAPIModelsRole}
     */
    userPermissionsGetRoles(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userPermissionsGetRoles");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'Role': opts['role'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = APIPagedResponseAPIModelsRole;
      return this.apiClient.callApi(
        '/api/v2/Users/{id}/Roles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userPermissionsGetUsers operation.
     * @callback module:api/UserPermissionsApi~userPermissionsGetUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/APIPagedResponseAPIModelsUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all user's in a role
     * No Documentation Found.
     * @param {Number} id The Role's ID
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] The page limit. The default page limit is 10.
     * @param {Number} [offset] The page offset. The default page offset is 0.
     * @param {module:api/UserPermissionsApi~userPermissionsGetUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/APIPagedResponseAPIModelsUser}
     */
    userPermissionsGetUsers(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userPermissionsGetUsers");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = APIPagedResponseAPIModelsUser;
      return this.apiClient.callApi(
        '/api/v2/Roles/{id}/Users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userPermissionsPut operation.
     * @callback module:api/UserPermissionsApi~userPermissionsPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a user's roles
     * No Documentation Found.
     * @param {Number} id The User's ID
     * @param {Array.<module:model/APIModelsUserRoleChange>} aPIModelsUserRoleChange A list of changes to the User's Roles
     * @param {module:api/UserPermissionsApi~userPermissionsPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userPermissionsPut(id, aPIModelsUserRoleChange, callback) {
      let postBody = aPIModelsUserRoleChange;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userPermissionsPut");
      }
      // verify the required parameter 'aPIModelsUserRoleChange' is set
      if (aPIModelsUserRoleChange === undefined || aPIModelsUserRoleChange === null) {
        throw new Error("Missing the required parameter 'aPIModelsUserRoleChange' when calling userPermissionsPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/Users/{id}/Roles', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
