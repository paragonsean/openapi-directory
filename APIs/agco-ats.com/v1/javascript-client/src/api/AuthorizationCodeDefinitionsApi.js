/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import APIIPagedResponseAuthorizationCodesSharedModelsAuthorizationCodeDefinition from '../model/APIIPagedResponseAuthorizationCodesSharedModelsAuthorizationCodeDefinition';
import APIModelsApiError from '../model/APIModelsApiError';
import AuthorizationCodesSharedModelsAuthorizationCodeDefinition from '../model/AuthorizationCodesSharedModelsAuthorizationCodeDefinition';

/**
* AuthorizationCodeDefinitions service.
* @module api/AuthorizationCodeDefinitionsApi
* @version v1
*/
export default class AuthorizationCodeDefinitionsApi {

    /**
    * Constructs a new AuthorizationCodeDefinitionsApi. 
    * @alias module:api/AuthorizationCodeDefinitionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiV2AuthorizationCodeDefinitionsIdGet operation.
     * @callback module:api/AuthorizationCodeDefinitionsApi~apiV2AuthorizationCodeDefinitionsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthorizationCodesSharedModelsAuthorizationCodeDefinition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an authorization code definition by its ID
     * No Documentation Found.
     * @param {String} id The ID of the authorization code definition.
     * @param {module:api/AuthorizationCodeDefinitionsApi~apiV2AuthorizationCodeDefinitionsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthorizationCodesSharedModelsAuthorizationCodeDefinition}
     */
    apiV2AuthorizationCodeDefinitionsIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV2AuthorizationCodeDefinitionsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = AuthorizationCodesSharedModelsAuthorizationCodeDefinition;
      return this.apiClient.callApi(
        '/api/v2/AuthorizationCodeDefinitions/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authorizationCodeDefinitionsAddCategoryToDefinition operation.
     * @callback module:api/AuthorizationCodeDefinitionsApi~authorizationCodeDefinitionsAddCategoryToDefinitionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a category to an authorizationCodeDefintion.
     * No Documentation Found.
     * @param {String} ID 
     * @param {String} categoryID A category ID, as a GUID.
     * @param {module:api/AuthorizationCodeDefinitionsApi~authorizationCodeDefinitionsAddCategoryToDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    authorizationCodeDefinitionsAddCategoryToDefinition(ID, categoryID, callback) {
      let postBody = null;
      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling authorizationCodeDefinitionsAddCategoryToDefinition");
      }
      // verify the required parameter 'categoryID' is set
      if (categoryID === undefined || categoryID === null) {
        throw new Error("Missing the required parameter 'categoryID' when calling authorizationCodeDefinitionsAddCategoryToDefinition");
      }

      let pathParams = {
        'ID': ID,
        'categoryID': categoryID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/AuthorizationCodeDefinitions/{ID}/Categories/{categoryID}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authorizationCodeDefinitionsDeleteAuthorizationCodeDefinition operation.
     * @callback module:api/AuthorizationCodeDefinitionsApi~authorizationCodeDefinitionsDeleteAuthorizationCodeDefinitionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disable an authorization code definition
     * No Documentation Found.
     * @param {String} id The ID of the authorization code definition.
     * @param {module:api/AuthorizationCodeDefinitionsApi~authorizationCodeDefinitionsDeleteAuthorizationCodeDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    authorizationCodeDefinitionsDeleteAuthorizationCodeDefinition(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling authorizationCodeDefinitionsDeleteAuthorizationCodeDefinition");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/AuthorizationCodeDefinitions/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authorizationCodeDefinitionsGetAuthorizationCodeDefinition operation.
     * @callback module:api/AuthorizationCodeDefinitionsApi~authorizationCodeDefinitionsGetAuthorizationCodeDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/APIIPagedResponseAuthorizationCodesSharedModelsAuthorizationCodeDefinition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get authorization code definitions.
     * Additional searches: validationFields[Name]=true and dataFields[Name]=true. These can be used to search for authorization code definitions that have the specified data or validation fields.
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] Optional. The page limit.  If not specified, the default page limit is 10.
     * @param {Number} [offset] Optional. The page offset.  If not specified, the default page offset is 0.
     * @param {String} [name] Optional. If specified, filters definitions by name. Starting and ending wildcards (*) supported.
     * @param {Number} [createdByUserID] Optional. If specified, filters definitions to those created by the given User ID.
     * @param {Number} [deletedByUserID] Optional. If specified, filters definitions to those deleted by the given User ID.
     * @param {Boolean} [includeDeleted] Optional. Whether to include deleted definitions. 'False' by default.
     * @param {String} [categoryID] Optional. If specified, filters definitions with the designated categoryID.
     * @param {module:api/AuthorizationCodeDefinitionsApi~authorizationCodeDefinitionsGetAuthorizationCodeDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/APIIPagedResponseAuthorizationCodesSharedModelsAuthorizationCodeDefinition}
     */
    authorizationCodeDefinitionsGetAuthorizationCodeDefinition(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'name': opts['name'],
        'createdByUserID': opts['createdByUserID'],
        'deletedByUserID': opts['deletedByUserID'],
        'includeDeleted': opts['includeDeleted'],
        'categoryID': opts['categoryID']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = APIIPagedResponseAuthorizationCodesSharedModelsAuthorizationCodeDefinition;
      return this.apiClient.callApi(
        '/api/v2/AuthorizationCodeDefinitions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authorizationCodeDefinitionsPostAuthorizationCodeDefinition operation.
     * @callback module:api/AuthorizationCodeDefinitionsApi~authorizationCodeDefinitionsPostAuthorizationCodeDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add an authorization code definition.
     * No Documentation Found.
     * @param {module:model/AuthorizationCodesSharedModelsAuthorizationCodeDefinition} authorizationCodesSharedModelsAuthorizationCodeDefinition An authorization code definition.
     * @param {module:api/AuthorizationCodeDefinitionsApi~authorizationCodeDefinitionsPostAuthorizationCodeDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    authorizationCodeDefinitionsPostAuthorizationCodeDefinition(authorizationCodesSharedModelsAuthorizationCodeDefinition, callback) {
      let postBody = authorizationCodesSharedModelsAuthorizationCodeDefinition;
      // verify the required parameter 'authorizationCodesSharedModelsAuthorizationCodeDefinition' is set
      if (authorizationCodesSharedModelsAuthorizationCodeDefinition === undefined || authorizationCodesSharedModelsAuthorizationCodeDefinition === null) {
        throw new Error("Missing the required parameter 'authorizationCodesSharedModelsAuthorizationCodeDefinition' when calling authorizationCodeDefinitionsPostAuthorizationCodeDefinition");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v2/AuthorizationCodeDefinitions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authorizationCodeDefinitionsPutAuthorizationCodeDefinition operation.
     * @callback module:api/AuthorizationCodeDefinitionsApi~authorizationCodeDefinitionsPutAuthorizationCodeDefinitionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an authorization code definition
     * No Documentation Found.
     * @param {String} id The ID of the authorization code definition.
     * @param {module:model/AuthorizationCodesSharedModelsAuthorizationCodeDefinition} authorizationCodesSharedModelsAuthorizationCodeDefinition An authorization code definition.
     * @param {module:api/AuthorizationCodeDefinitionsApi~authorizationCodeDefinitionsPutAuthorizationCodeDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    authorizationCodeDefinitionsPutAuthorizationCodeDefinition(id, authorizationCodesSharedModelsAuthorizationCodeDefinition, callback) {
      let postBody = authorizationCodesSharedModelsAuthorizationCodeDefinition;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling authorizationCodeDefinitionsPutAuthorizationCodeDefinition");
      }
      // verify the required parameter 'authorizationCodesSharedModelsAuthorizationCodeDefinition' is set
      if (authorizationCodesSharedModelsAuthorizationCodeDefinition === undefined || authorizationCodesSharedModelsAuthorizationCodeDefinition === null) {
        throw new Error("Missing the required parameter 'authorizationCodesSharedModelsAuthorizationCodeDefinition' when calling authorizationCodeDefinitionsPutAuthorizationCodeDefinition");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/AuthorizationCodeDefinitions/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authorizationCodeDefinitionsRemoveCategoryFromDefinition operation.
     * @callback module:api/AuthorizationCodeDefinitionsApi~authorizationCodeDefinitionsRemoveCategoryFromDefinitionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the category from the authorization code definition.
     * No Documentation Found.
     * @param {String} ID 
     * @param {String} categoryID A category ID, as a GUID.
     * @param {module:api/AuthorizationCodeDefinitionsApi~authorizationCodeDefinitionsRemoveCategoryFromDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    authorizationCodeDefinitionsRemoveCategoryFromDefinition(ID, categoryID, callback) {
      let postBody = null;
      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling authorizationCodeDefinitionsRemoveCategoryFromDefinition");
      }
      // verify the required parameter 'categoryID' is set
      if (categoryID === undefined || categoryID === null) {
        throw new Error("Missing the required parameter 'categoryID' when calling authorizationCodeDefinitionsRemoveCategoryFromDefinition");
      }

      let pathParams = {
        'ID': ID,
        'categoryID': categoryID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/AuthorizationCodeDefinitions/{ID}/Categories/{categoryID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
