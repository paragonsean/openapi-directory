/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import APIModelsPermission from '../model/APIModelsPermission';
import APIPagedResponseAPIModelsPermission from '../model/APIPagedResponseAPIModelsPermission';

/**
* Permissions service.
* @module api/PermissionsApi
* @version v1
*/
export default class PermissionsApi {

    /**
    * Constructs a new PermissionsApi. 
    * @alias module:api/PermissionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the permissionsDeletePermission operation.
     * @callback module:api/PermissionsApi~permissionsDeletePermissionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a Permission
     * No Documentation Found.
     * @param {Number} id Id of Permission
     * @param {module:api/PermissionsApi~permissionsDeletePermissionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    permissionsDeletePermission(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling permissionsDeletePermission");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/Permissions/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the permissionsGetPermission operation.
     * @callback module:api/PermissionsApi~permissionsGetPermissionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/APIModelsPermission} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a Permission
     * No Documentation Found.
     * @param {Number} id Id of Permission
     * @param {module:api/PermissionsApi~permissionsGetPermissionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/APIModelsPermission}
     */
    permissionsGetPermission(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling permissionsGetPermission");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = APIModelsPermission;
      return this.apiClient.callApi(
        '/api/v2/Permissions/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the permissionsGetPermissions operation.
     * @callback module:api/PermissionsApi~permissionsGetPermissionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/APIPagedResponseAPIModelsPermission} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Permissions
     * No Documentation Found.
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] Optional. The page limit. The default page limit is 10.
     * @param {Number} [offset] Optional. The page offset. The default page offset is 0.
     * @param {String} [name] Filter by permission name. Supports ending wildcard (*). Optional.
     * @param {module:api/PermissionsApi~permissionsGetPermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/APIPagedResponseAPIModelsPermission}
     */
    permissionsGetPermissions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'name': opts['name']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = APIPagedResponseAPIModelsPermission;
      return this.apiClient.callApi(
        '/api/v2/Permissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the permissionsPostPermission operation.
     * @callback module:api/PermissionsApi~permissionsPostPermissionCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a Permission
     * No Documentation Found.
     * @param {module:model/APIModelsPermission} aPIModelsPermission Permission to add
     * @param {module:api/PermissionsApi~permissionsPostPermissionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    permissionsPostPermission(aPIModelsPermission, callback) {
      let postBody = aPIModelsPermission;
      // verify the required parameter 'aPIModelsPermission' is set
      if (aPIModelsPermission === undefined || aPIModelsPermission === null) {
        throw new Error("Missing the required parameter 'aPIModelsPermission' when calling permissionsPostPermission");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/api/v2/Permissions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the permissionsPutPermission operation.
     * @callback module:api/PermissionsApi~permissionsPutPermissionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a Permission
     * No Documentation Found.
     * @param {Number} id Id of Permission
     * @param {module:model/APIModelsPermission} aPIModelsPermission The Updated Permission
     * @param {module:api/PermissionsApi~permissionsPutPermissionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    permissionsPutPermission(id, aPIModelsPermission, callback) {
      let postBody = aPIModelsPermission;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling permissionsPutPermission");
      }
      // verify the required parameter 'aPIModelsPermission' is set
      if (aPIModelsPermission === undefined || aPIModelsPermission === null) {
        throw new Error("Missing the required parameter 'aPIModelsPermission' when calling permissionsPutPermission");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/Permissions/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
