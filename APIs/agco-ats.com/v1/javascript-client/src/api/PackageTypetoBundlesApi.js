/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import APIModelsApiError from '../model/APIModelsApiError';
import APIPagedResponseUpdateSystemModelsPackageTypeIDtoBundle from '../model/APIPagedResponseUpdateSystemModelsPackageTypeIDtoBundle';
import UpdateSystemModelsPackageTypeIDtoBundle from '../model/UpdateSystemModelsPackageTypeIDtoBundle';

/**
* PackageTypetoBundles service.
* @module api/PackageTypetoBundlesApi
* @version v1
*/
export default class PackageTypetoBundlesApi {

    /**
    * Constructs a new PackageTypetoBundlesApi. 
    * @alias module:api/PackageTypetoBundlesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the packageTypetoBundlesDelete operation.
     * @callback module:api/PackageTypetoBundlesApi~packageTypetoBundlesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Package Type to Bundle Relationship.
     * No Documentation Found.
     * @param {String} bundleID The BundleID
     * @param {String} packageTypeID The PackageTypeID
     * @param {module:api/PackageTypetoBundlesApi~packageTypetoBundlesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    packageTypetoBundlesDelete(bundleID, packageTypeID, callback) {
      let postBody = null;
      // verify the required parameter 'bundleID' is set
      if (bundleID === undefined || bundleID === null) {
        throw new Error("Missing the required parameter 'bundleID' when calling packageTypetoBundlesDelete");
      }
      // verify the required parameter 'packageTypeID' is set
      if (packageTypeID === undefined || packageTypeID === null) {
        throw new Error("Missing the required parameter 'packageTypeID' when calling packageTypetoBundlesDelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'BundleID': bundleID,
        'PackageTypeID': packageTypeID
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/PackageTypetoBundles', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the packageTypetoBundlesGet operation.
     * @callback module:api/PackageTypetoBundlesApi~packageTypetoBundlesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/APIPagedResponseUpdateSystemModelsPackageTypeIDtoBundle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all of the Package Type to Bundle Relationships.
     * No Documentation Found.
     * @param {Object} opts Optional parameters
     * @param {String} [bundleID] Optional. Filter by BundleID.
     * @param {Number} [limit] Optional. The page limit. The default page limit is 10.
     * @param {Number} [offset] Optional. The page offset. The default page offset is 0.
     * @param {module:api/PackageTypetoBundlesApi~packageTypetoBundlesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/APIPagedResponseUpdateSystemModelsPackageTypeIDtoBundle}
     */
    packageTypetoBundlesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'BundleID': opts['bundleID'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = APIPagedResponseUpdateSystemModelsPackageTypeIDtoBundle;
      return this.apiClient.callApi(
        '/api/v2/PackageTypetoBundles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the packageTypetoBundlesPost operation.
     * @callback module:api/PackageTypetoBundlesApi~packageTypetoBundlesPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new Package Type ID to Bundle Relationship.
     * No Documentation Found.
     * @param {module:model/UpdateSystemModelsPackageTypeIDtoBundle} updateSystemModelsPackageTypeIDtoBundle The PackageTypeToBundle to add.
     * @param {module:api/PackageTypetoBundlesApi~packageTypetoBundlesPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    packageTypetoBundlesPost(updateSystemModelsPackageTypeIDtoBundle, callback) {
      let postBody = updateSystemModelsPackageTypeIDtoBundle;
      // verify the required parameter 'updateSystemModelsPackageTypeIDtoBundle' is set
      if (updateSystemModelsPackageTypeIDtoBundle === undefined || updateSystemModelsPackageTypeIDtoBundle === null) {
        throw new Error("Missing the required parameter 'updateSystemModelsPackageTypeIDtoBundle' when calling packageTypetoBundlesPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/PackageTypetoBundles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the packageTypetoBundlesPut operation.
     * @callback module:api/PackageTypetoBundlesApi~packageTypetoBundlesPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Package Type ID to Bundle Relationship.
     * No Documentation Found.
     * @param {module:model/UpdateSystemModelsPackageTypeIDtoBundle} updateSystemModelsPackageTypeIDtoBundle The PackageTypeToBundle to update.
     * @param {module:api/PackageTypetoBundlesApi~packageTypetoBundlesPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    packageTypetoBundlesPut(updateSystemModelsPackageTypeIDtoBundle, callback) {
      let postBody = updateSystemModelsPackageTypeIDtoBundle;
      // verify the required parameter 'updateSystemModelsPackageTypeIDtoBundle' is set
      if (updateSystemModelsPackageTypeIDtoBundle === undefined || updateSystemModelsPackageTypeIDtoBundle === null) {
        throw new Error("Missing the required parameter 'updateSystemModelsPackageTypeIDtoBundle' when calling packageTypetoBundlesPut");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/PackageTypetoBundles', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
