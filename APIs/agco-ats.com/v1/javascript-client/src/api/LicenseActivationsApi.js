/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import APIModelsApiError from '../model/APIModelsApiError';
import DealerDBModelsEDTLiteRegistration from '../model/DealerDBModelsEDTLiteRegistration';
import DealerDBModelsLicenseActivation from '../model/DealerDBModelsLicenseActivation';
import DealerDBModelsLicenseActivationConfirm from '../model/DealerDBModelsLicenseActivationConfirm';
import DealerDBModelsLicenseActivationCreate from '../model/DealerDBModelsLicenseActivationCreate';
import DealerDBModelsLicenseActivationUpdate from '../model/DealerDBModelsLicenseActivationUpdate';

/**
* LicenseActivations service.
* @module api/LicenseActivationsApi
* @version v1
*/
export default class LicenseActivationsApi {

    /**
    * Constructs a new LicenseActivationsApi. 
    * @alias module:api/LicenseActivationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the licenseActivationsPost operation.
     * @callback module:api/LicenseActivationsApi~licenseActivationsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DealerDBModelsLicenseActivation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a license activation.
     * No Documentation Found.
     * @param {module:model/DealerDBModelsLicenseActivationCreate} dealerDBModelsLicenseActivationCreate The data required for creating the license.
     * @param {module:api/LicenseActivationsApi~licenseActivationsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DealerDBModelsLicenseActivation}
     */
    licenseActivationsPost(dealerDBModelsLicenseActivationCreate, callback) {
      let postBody = dealerDBModelsLicenseActivationCreate;
      // verify the required parameter 'dealerDBModelsLicenseActivationCreate' is set
      if (dealerDBModelsLicenseActivationCreate === undefined || dealerDBModelsLicenseActivationCreate === null) {
        throw new Error("Missing the required parameter 'dealerDBModelsLicenseActivationCreate' when calling licenseActivationsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = DealerDBModelsLicenseActivation;
      return this.apiClient.callApi(
        '/api/v2/LicenseActivations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the licenseActivationsPostRegisterEDTLite operation.
     * @callback module:api/LicenseActivationsApi~licenseActivationsPostRegisterEDTLiteCallback
     * @param {String} error Error message, if any.
     * @param {Boolean} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register an EDT Lite with the Server
     * No Documentation Found.
     * @param {module:model/DealerDBModelsEDTLiteRegistration} dealerDBModelsEDTLiteRegistration The information required for registration.
     * @param {module:api/LicenseActivationsApi~licenseActivationsPostRegisterEDTLiteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Boolean}
     */
    licenseActivationsPostRegisterEDTLite(dealerDBModelsEDTLiteRegistration, callback) {
      let postBody = dealerDBModelsEDTLiteRegistration;
      // verify the required parameter 'dealerDBModelsEDTLiteRegistration' is set
      if (dealerDBModelsEDTLiteRegistration === undefined || dealerDBModelsEDTLiteRegistration === null) {
        throw new Error("Missing the required parameter 'dealerDBModelsEDTLiteRegistration' when calling licenseActivationsPostRegisterEDTLite");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = 'Boolean';
      return this.apiClient.callApi(
        '/api/v2/LicenseActivations/RegisterEDTLite', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the licenseActivationsPut operation.
     * @callback module:api/LicenseActivationsApi~licenseActivationsPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DealerDBModelsLicenseActivation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a license activiation.
     * No Documentation Found.
     * @param {String} ID The ID of the license.
     * @param {module:model/DealerDBModelsLicenseActivationUpdate} dealerDBModelsLicenseActivationUpdate The data required for updating the license.
     * @param {module:api/LicenseActivationsApi~licenseActivationsPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DealerDBModelsLicenseActivation}
     */
    licenseActivationsPut(ID, dealerDBModelsLicenseActivationUpdate, callback) {
      let postBody = dealerDBModelsLicenseActivationUpdate;
      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling licenseActivationsPut");
      }
      // verify the required parameter 'dealerDBModelsLicenseActivationUpdate' is set
      if (dealerDBModelsLicenseActivationUpdate === undefined || dealerDBModelsLicenseActivationUpdate === null) {
        throw new Error("Missing the required parameter 'dealerDBModelsLicenseActivationUpdate' when calling licenseActivationsPut");
      }

      let pathParams = {
        'ID': ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = DealerDBModelsLicenseActivation;
      return this.apiClient.callApi(
        '/api/v2/LicenseActivations/{ID}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the licenseActivationsPutConfirm operation.
     * @callback module:api/LicenseActivationsApi~licenseActivationsPutConfirmCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Confirm that the client has applied the updated license.
     * No Documentation Found.
     * @param {String} ID The ID of the license
     * @param {module:model/DealerDBModelsLicenseActivationConfirm} dealerDBModelsLicenseActivationConfirm The license data.
     * @param {module:api/LicenseActivationsApi~licenseActivationsPutConfirmCallback} callback The callback function, accepting three arguments: error, data, response
     */
    licenseActivationsPutConfirm(ID, dealerDBModelsLicenseActivationConfirm, callback) {
      let postBody = dealerDBModelsLicenseActivationConfirm;
      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling licenseActivationsPutConfirm");
      }
      // verify the required parameter 'dealerDBModelsLicenseActivationConfirm' is set
      if (dealerDBModelsLicenseActivationConfirm === undefined || dealerDBModelsLicenseActivationConfirm === null) {
        throw new Error("Missing the required parameter 'dealerDBModelsLicenseActivationConfirm' when calling licenseActivationsPutConfirm");
      }

      let pathParams = {
        'ID': ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/LicenseActivations/{ID}/Confirm', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
