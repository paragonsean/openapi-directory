/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import APIIPagedResponseAuthorizationCodesSharedModelsCategory from '../model/APIIPagedResponseAuthorizationCodesSharedModelsCategory';
import APIIPagedResponseAuthorizationCodesSharedModelsCategoryUserReport from '../model/APIIPagedResponseAuthorizationCodesSharedModelsCategoryUserReport';
import APIModelsApiError from '../model/APIModelsApiError';
import AuthorizationCodesSharedModelsCategory from '../model/AuthorizationCodesSharedModelsCategory';

/**
* AuthorizationCategories service.
* @module api/AuthorizationCategoriesApi
* @version v1
*/
export default class AuthorizationCategoriesApi {

    /**
    * Constructs a new AuthorizationCategoriesApi. 
    * @alias module:api/AuthorizationCategoriesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the authorizationCategoriesAddUser operation.
     * @callback module:api/AuthorizationCategoriesApi~authorizationCategoriesAddUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a category that a user can see.
     * No Documentation Found.
     * @param {String} id 
     * @param {Number} userID 
     * @param {module:api/AuthorizationCategoriesApi~authorizationCategoriesAddUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    authorizationCategoriesAddUser(id, userID, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling authorizationCategoriesAddUser");
      }
      // verify the required parameter 'userID' is set
      if (userID === undefined || userID === null) {
        throw new Error("Missing the required parameter 'userID' when calling authorizationCategoriesAddUser");
      }

      let pathParams = {
        'id': id,
        'userID': userID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/AuthorizationCategories/{id}/Users/{userID}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authorizationCategoriesDelete operation.
     * @callback module:api/AuthorizationCategoriesApi~authorizationCategoriesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove an authorization category.
     * No Documentation Found.
     * @param {String} id The ID of the authorization category.
     * @param {module:api/AuthorizationCategoriesApi~authorizationCategoriesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    authorizationCategoriesDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling authorizationCategoriesDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/AuthorizationCategories/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authorizationCategoriesGet operation.
     * @callback module:api/AuthorizationCategoriesApi~authorizationCategoriesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/APIIPagedResponseAuthorizationCodesSharedModelsCategory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get authorization categories.
     * No Documentation Found.
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] Optional. The page limit.  If not specified, the default page limit is 10.
     * @param {Number} [offset] Optional. The page offset.  If not specified, the default page offset is 0.
     * @param {Number} [userID] Optional. Filter by categories visible to the provided user with the provided userID.
     * @param {String} [definitionID] Optional. Filter by categories containing a definition with the provided ID.
     * @param {module:api/AuthorizationCategoriesApi~authorizationCategoriesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/APIIPagedResponseAuthorizationCodesSharedModelsCategory}
     */
    authorizationCategoriesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'userID': opts['userID'],
        'definitionID': opts['definitionID']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = APIIPagedResponseAuthorizationCodesSharedModelsCategory;
      return this.apiClient.callApi(
        '/api/v2/AuthorizationCategories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authorizationCategoriesGetUsers operation.
     * @callback module:api/AuthorizationCategoriesApi~authorizationCategoriesGetUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/APIIPagedResponseAuthorizationCodesSharedModelsCategoryUserReport} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a report of access that users have to Authorization Categories.
     * No Documentation Found.
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] Optional. Defaults to 10.
     * @param {Number} [offset] Optional. Defaults to 0.
     * @param {String} [userIDs] Optional. Includes only users with IDs on the provided comma-separated list.
     * @param {String} [categoryIDs] Optional. Includes only users with categories with IDs on the provided comma-separated list.
     * @param {Boolean} [includeCategories] If true, include full Authorization Category detail. Defaults to false.
     * @param {Boolean} [includeUsers] If true, include full User detail. Defaults to false.
     * @param {String} [userSearch] Optional. Includes only users with a Name, Username, or Email containing the provided value.
     * @param {module:api/AuthorizationCategoriesApi~authorizationCategoriesGetUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/APIIPagedResponseAuthorizationCodesSharedModelsCategoryUserReport}
     */
    authorizationCategoriesGetUsers(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'userIDs': opts['userIDs'],
        'categoryIDs': opts['categoryIDs'],
        'includeCategories': opts['includeCategories'],
        'includeUsers': opts['includeUsers'],
        'userSearch': opts['userSearch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = APIIPagedResponseAuthorizationCodesSharedModelsCategoryUserReport;
      return this.apiClient.callApi(
        '/api/v2/AuthorizationCategories/Users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authorizationCategoriesPost operation.
     * @callback module:api/AuthorizationCategoriesApi~authorizationCategoriesPostCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add an authorization category.
     * No Documentation Found.
     * @param {module:model/AuthorizationCodesSharedModelsCategory} authorizationCodesSharedModelsCategory An authorization category.
     * @param {module:api/AuthorizationCategoriesApi~authorizationCategoriesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    authorizationCategoriesPost(authorizationCodesSharedModelsCategory, callback) {
      let postBody = authorizationCodesSharedModelsCategory;
      // verify the required parameter 'authorizationCodesSharedModelsCategory' is set
      if (authorizationCodesSharedModelsCategory === undefined || authorizationCodesSharedModelsCategory === null) {
        throw new Error("Missing the required parameter 'authorizationCodesSharedModelsCategory' when calling authorizationCategoriesPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v2/AuthorizationCategories', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authorizationCategoriesPut operation.
     * @callback module:api/AuthorizationCategoriesApi~authorizationCategoriesPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an authorization category.
     * No Documentation Found.
     * @param {String} id 
     * @param {module:model/AuthorizationCodesSharedModelsCategory} authorizationCodesSharedModelsCategory An authorization category.
     * @param {module:api/AuthorizationCategoriesApi~authorizationCategoriesPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    authorizationCategoriesPut(id, authorizationCodesSharedModelsCategory, callback) {
      let postBody = authorizationCodesSharedModelsCategory;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling authorizationCategoriesPut");
      }
      // verify the required parameter 'authorizationCodesSharedModelsCategory' is set
      if (authorizationCodesSharedModelsCategory === undefined || authorizationCodesSharedModelsCategory === null) {
        throw new Error("Missing the required parameter 'authorizationCodesSharedModelsCategory' when calling authorizationCategoriesPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/AuthorizationCategories/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authorizationCategoriesRemoveUser operation.
     * @callback module:api/AuthorizationCategoriesApi~authorizationCategoriesRemoveUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a category a user could see.
     * No Documentation Found.
     * @param {String} id 
     * @param {Number} userID 
     * @param {module:api/AuthorizationCategoriesApi~authorizationCategoriesRemoveUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    authorizationCategoriesRemoveUser(id, userID, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling authorizationCategoriesRemoveUser");
      }
      // verify the required parameter 'userID' is set
      if (userID === undefined || userID === null) {
        throw new Error("Missing the required parameter 'userID' when calling authorizationCategoriesRemoveUser");
      }

      let pathParams = {
        'id': id,
        'userID': userID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/AuthorizationCategories/{id}/Users/{userID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
