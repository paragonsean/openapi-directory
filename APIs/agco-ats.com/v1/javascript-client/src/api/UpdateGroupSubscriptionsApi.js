/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import APIModelsApiError from '../model/APIModelsApiError';
import APIPagedResponseUpdateSystemModelsUpdateGroupSubscription from '../model/APIPagedResponseUpdateSystemModelsUpdateGroupSubscription';
import UpdateSystemModelsUpdateGroupSubscription from '../model/UpdateSystemModelsUpdateGroupSubscription';

/**
* UpdateGroupSubscriptions service.
* @module api/UpdateGroupSubscriptionsApi
* @version v1
*/
export default class UpdateGroupSubscriptionsApi {

    /**
    * Constructs a new UpdateGroupSubscriptionsApi. 
    * @alias module:api/UpdateGroupSubscriptionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the updateGroupSubscriptionsDeleteUpdateGroupSubscription operation.
     * @callback module:api/UpdateGroupSubscriptionsApi~updateGroupSubscriptionsDeleteUpdateGroupSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an Update Group Subscription
     * No Documentation Found.
     * @param {Number} updateGroupSubscriptionID The Update Group Subscription ID to delete
     * @param {module:api/UpdateGroupSubscriptionsApi~updateGroupSubscriptionsDeleteUpdateGroupSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateGroupSubscriptionsDeleteUpdateGroupSubscription(updateGroupSubscriptionID, callback) {
      let postBody = null;
      // verify the required parameter 'updateGroupSubscriptionID' is set
      if (updateGroupSubscriptionID === undefined || updateGroupSubscriptionID === null) {
        throw new Error("Missing the required parameter 'updateGroupSubscriptionID' when calling updateGroupSubscriptionsDeleteUpdateGroupSubscription");
      }

      let pathParams = {
        'UpdateGroupSubscriptionID': updateGroupSubscriptionID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/UpdateGroupSubscriptions/{UpdateGroupSubscriptionID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateGroupSubscriptionsGetUpdateGroupSubscription operation.
     * @callback module:api/UpdateGroupSubscriptionsApi~updateGroupSubscriptionsGetUpdateGroupSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateSystemModelsUpdateGroupSubscription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an Update Group Subscription
     * No Documentation Found.
     * @param {Number} updateGroupSubscriptionID The Update Group Subscription ID
     * @param {module:api/UpdateGroupSubscriptionsApi~updateGroupSubscriptionsGetUpdateGroupSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateSystemModelsUpdateGroupSubscription}
     */
    updateGroupSubscriptionsGetUpdateGroupSubscription(updateGroupSubscriptionID, callback) {
      let postBody = null;
      // verify the required parameter 'updateGroupSubscriptionID' is set
      if (updateGroupSubscriptionID === undefined || updateGroupSubscriptionID === null) {
        throw new Error("Missing the required parameter 'updateGroupSubscriptionID' when calling updateGroupSubscriptionsGetUpdateGroupSubscription");
      }

      let pathParams = {
        'UpdateGroupSubscriptionID': updateGroupSubscriptionID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = UpdateSystemModelsUpdateGroupSubscription;
      return this.apiClient.callApi(
        '/api/v2/UpdateGroupSubscriptions/{UpdateGroupSubscriptionID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateGroupSubscriptionsGetUpdateGroupSubscriptions operation.
     * @callback module:api/UpdateGroupSubscriptionsApi~updateGroupSubscriptionsGetUpdateGroupSubscriptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/APIPagedResponseUpdateSystemModelsUpdateGroupSubscription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Update Group Subscriptions
     * No Documentation Found.
     * @param {Object} opts Optional parameters
     * @param {String} [updateGroupID] Optional. Filter by Update Group ID.
     * @param {String} [packageTypeID] Optional. Filter by Package Type ID.
     * @param {String} [clientID] Optional. Filter by Client ID.
     * @param {Number} [limit] Optional. The page limit. The default page limit is 10.
     * @param {Number} [offset] Optional. The page offset. The default page offset is 0.
     * @param {module:api/UpdateGroupSubscriptionsApi~updateGroupSubscriptionsGetUpdateGroupSubscriptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/APIPagedResponseUpdateSystemModelsUpdateGroupSubscription}
     */
    updateGroupSubscriptionsGetUpdateGroupSubscriptions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'UpdateGroupID': opts['updateGroupID'],
        'PackageTypeID': opts['packageTypeID'],
        'ClientID': opts['clientID'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = APIPagedResponseUpdateSystemModelsUpdateGroupSubscription;
      return this.apiClient.callApi(
        '/api/v2/UpdateGroupSubscriptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateGroupSubscriptionsPostUpdateGroupSubscription operation.
     * @callback module:api/UpdateGroupSubscriptionsApi~updateGroupSubscriptionsPostUpdateGroupSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add an Update Group Subscription
     * No Documentation Found.
     * @param {module:model/UpdateSystemModelsUpdateGroupSubscription} updateSystemModelsUpdateGroupSubscription The Update Group Subscription to add
     * @param {module:api/UpdateGroupSubscriptionsApi~updateGroupSubscriptionsPostUpdateGroupSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    updateGroupSubscriptionsPostUpdateGroupSubscription(updateSystemModelsUpdateGroupSubscription, callback) {
      let postBody = updateSystemModelsUpdateGroupSubscription;
      // verify the required parameter 'updateSystemModelsUpdateGroupSubscription' is set
      if (updateSystemModelsUpdateGroupSubscription === undefined || updateSystemModelsUpdateGroupSubscription === null) {
        throw new Error("Missing the required parameter 'updateSystemModelsUpdateGroupSubscription' when calling updateGroupSubscriptionsPostUpdateGroupSubscription");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/api/v2/UpdateGroupSubscriptions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateGroupSubscriptionsPostUpdateGroupSubscriptions operation.
     * @callback module:api/UpdateGroupSubscriptionsApi~updateGroupSubscriptionsPostUpdateGroupSubscriptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * No Documentation Found.
     * No Documentation Found.
     * @param {Array.<module:model/UpdateSystemModelsUpdateGroupSubscription>} updateSystemModelsUpdateGroupSubscription 
     * @param {module:api/UpdateGroupSubscriptionsApi~updateGroupSubscriptionsPostUpdateGroupSubscriptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateGroupSubscriptionsPostUpdateGroupSubscriptions(updateSystemModelsUpdateGroupSubscription, callback) {
      let postBody = updateSystemModelsUpdateGroupSubscription;
      // verify the required parameter 'updateSystemModelsUpdateGroupSubscription' is set
      if (updateSystemModelsUpdateGroupSubscription === undefined || updateSystemModelsUpdateGroupSubscription === null) {
        throw new Error("Missing the required parameter 'updateSystemModelsUpdateGroupSubscription' when calling updateGroupSubscriptionsPostUpdateGroupSubscriptions");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/UpdateGroupSubscriptions/Batch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateGroupSubscriptionsPutUpdateGroupSubscription operation.
     * @callback module:api/UpdateGroupSubscriptionsApi~updateGroupSubscriptionsPutUpdateGroupSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an Update Group Subscription
     * No Documentation Found.
     * @param {Number} updateGroupSubscriptionID The Update Group Subscription ID
     * @param {module:model/UpdateSystemModelsUpdateGroupSubscription} updateSystemModelsUpdateGroupSubscription The updated Update Group Subscription
     * @param {module:api/UpdateGroupSubscriptionsApi~updateGroupSubscriptionsPutUpdateGroupSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateGroupSubscriptionsPutUpdateGroupSubscription(updateGroupSubscriptionID, updateSystemModelsUpdateGroupSubscription, callback) {
      let postBody = updateSystemModelsUpdateGroupSubscription;
      // verify the required parameter 'updateGroupSubscriptionID' is set
      if (updateGroupSubscriptionID === undefined || updateGroupSubscriptionID === null) {
        throw new Error("Missing the required parameter 'updateGroupSubscriptionID' when calling updateGroupSubscriptionsPutUpdateGroupSubscription");
      }
      // verify the required parameter 'updateSystemModelsUpdateGroupSubscription' is set
      if (updateSystemModelsUpdateGroupSubscription === undefined || updateSystemModelsUpdateGroupSubscription === null) {
        throw new Error("Missing the required parameter 'updateSystemModelsUpdateGroupSubscription' when calling updateGroupSubscriptionsPutUpdateGroupSubscription");
      }

      let pathParams = {
        'UpdateGroupSubscriptionID': updateGroupSubscriptionID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/UpdateGroupSubscriptions/{UpdateGroupSubscriptionID}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateGroupSubscriptionsPutUpdateGroupSubscriptions operation.
     * @callback module:api/UpdateGroupSubscriptionsApi~updateGroupSubscriptionsPutUpdateGroupSubscriptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * No Documentation Found.
     * No Documentation Found.
     * @param {Array.<module:model/UpdateSystemModelsUpdateGroupSubscription>} updateSystemModelsUpdateGroupSubscription 
     * @param {module:api/UpdateGroupSubscriptionsApi~updateGroupSubscriptionsPutUpdateGroupSubscriptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateGroupSubscriptionsPutUpdateGroupSubscriptions(updateSystemModelsUpdateGroupSubscription, callback) {
      let postBody = updateSystemModelsUpdateGroupSubscription;
      // verify the required parameter 'updateSystemModelsUpdateGroupSubscription' is set
      if (updateSystemModelsUpdateGroupSubscription === undefined || updateSystemModelsUpdateGroupSubscription === null) {
        throw new Error("Missing the required parameter 'updateSystemModelsUpdateGroupSubscription' when calling updateGroupSubscriptionsPutUpdateGroupSubscriptions");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/UpdateGroupSubscriptions/Batch', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
