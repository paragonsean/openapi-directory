/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import APIModelsRole from '../model/APIModelsRole';
import APIModelsRolePermissionChange from '../model/APIModelsRolePermissionChange';
import APIPagedResponseAPIModelsPermission from '../model/APIPagedResponseAPIModelsPermission';
import APIPagedResponseAPIModelsRole from '../model/APIPagedResponseAPIModelsRole';

/**
* Roles service.
* @module api/RolesApi
* @version v1
*/
export default class RolesApi {

    /**
    * Constructs a new RolesApi. 
    * @alias module:api/RolesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the rolesDeleteRole operation.
     * @callback module:api/RolesApi~rolesDeleteRoleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a User Role
     * No Documentation Found.
     * @param {Number} id The role's id
     * @param {module:api/RolesApi~rolesDeleteRoleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    rolesDeleteRole(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling rolesDeleteRole");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/Roles/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rolesGetRole operation.
     * @callback module:api/RolesApi~rolesGetRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/APIModelsRole} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a User Role
     * No Documentation Found.
     * @param {Number} id The role's id
     * @param {module:api/RolesApi~rolesGetRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/APIModelsRole}
     */
    rolesGetRole(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling rolesGetRole");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = APIModelsRole;
      return this.apiClient.callApi(
        '/api/v2/Roles/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rolesGetRolePermissions operation.
     * @callback module:api/RolesApi~rolesGetRolePermissionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/APIPagedResponseAPIModelsPermission} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the Permissions for a Role
     * No Documentation Found.
     * @param {Number} id The id of the Role
     * @param {Object} opts Optional parameters
     * @param {String} [name] Filter by permission name. Optional.
     * @param {Number} [limit] Optional. The page limit. The default page limit is 10.
     * @param {Number} [offset] Optional. The page offset. The default page offset is 0.
     * @param {module:api/RolesApi~rolesGetRolePermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/APIPagedResponseAPIModelsPermission}
     */
    rolesGetRolePermissions(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling rolesGetRolePermissions");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'name': opts['name'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = APIPagedResponseAPIModelsPermission;
      return this.apiClient.callApi(
        '/api/v2/Roles/{id}/Permissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rolesGetRoles operation.
     * @callback module:api/RolesApi~rolesGetRolesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/APIPagedResponseAPIModelsRole} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Roles
     * No Documentation Found.
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] Optional. The page limit. The default page limit is 10.
     * @param {Number} [offset] Optional. The page offset. The default page offset is 0.
     * @param {String} [name] Optional. Finds a role with the given name.
     * @param {Number} [permissionID] 
     * @param {String} [permissionName] Optional. Filters roles by whether they contain the provided permission.
     * @param {module:api/RolesApi~rolesGetRolesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/APIPagedResponseAPIModelsRole}
     */
    rolesGetRoles(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'name': opts['name'],
        'permissionID': opts['permissionID'],
        'permissionName': opts['permissionName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = APIPagedResponseAPIModelsRole;
      return this.apiClient.callApi(
        '/api/v2/Roles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rolesPostRole operation.
     * @callback module:api/RolesApi~rolesPostRoleCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a User Role
     * No Documentation Found.
     * @param {module:model/APIModelsRole} aPIModelsRole Role to add
     * @param {module:api/RolesApi~rolesPostRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    rolesPostRole(aPIModelsRole, callback) {
      let postBody = aPIModelsRole;
      // verify the required parameter 'aPIModelsRole' is set
      if (aPIModelsRole === undefined || aPIModelsRole === null) {
        throw new Error("Missing the required parameter 'aPIModelsRole' when calling rolesPostRole");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/api/v2/Roles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rolesPutRole operation.
     * @callback module:api/RolesApi~rolesPutRoleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a User Role
     * No Documentation Found.
     * @param {Number} id The role's id
     * @param {module:model/APIModelsRole} aPIModelsRole The Updated Role
     * @param {module:api/RolesApi~rolesPutRoleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    rolesPutRole(id, aPIModelsRole, callback) {
      let postBody = aPIModelsRole;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling rolesPutRole");
      }
      // verify the required parameter 'aPIModelsRole' is set
      if (aPIModelsRole === undefined || aPIModelsRole === null) {
        throw new Error("Missing the required parameter 'aPIModelsRole' when calling rolesPutRole");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/Roles/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rolesPutRolePermissions operation.
     * @callback module:api/RolesApi~rolesPutRolePermissionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Manage the Permissions for a Role
     * No Documentation Found.
     * @param {Number} id The id of the Role
     * @param {Array.<module:model/APIModelsRolePermissionChange>} aPIModelsRolePermissionChange Permissions Changes for the Role
     * @param {module:api/RolesApi~rolesPutRolePermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    rolesPutRolePermissions(id, aPIModelsRolePermissionChange, callback) {
      let postBody = aPIModelsRolePermissionChange;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling rolesPutRolePermissions");
      }
      // verify the required parameter 'aPIModelsRolePermissionChange' is set
      if (aPIModelsRolePermissionChange === undefined || aPIModelsRolePermissionChange === null) {
        throw new Error("Missing the required parameter 'aPIModelsRolePermissionChange' when calling rolesPutRolePermissions");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/Roles/{id}/Permissions', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
