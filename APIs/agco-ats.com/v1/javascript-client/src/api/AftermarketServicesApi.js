/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AGCOPowerServicesModelsECU from '../model/AGCOPowerServicesModelsECU';
import AGCOPowerServicesModelsProductionData from '../model/AGCOPowerServicesModelsProductionData';
import AGCOPowerServicesModelsUserStatus from '../model/AGCOPowerServicesModelsUserStatus';
import APIModelsApiError from '../model/APIModelsApiError';

/**
* AftermarketServices service.
* @module api/AftermarketServicesApi
* @version v1
*/
export default class AftermarketServicesApi {

    /**
    * Constructs a new AftermarketServicesApi. 
    * @alias module:api/AftermarketServicesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the aftermarketServicesGetCerts operation.
     * @callback module:api/AftermarketServicesApi~aftermarketServicesGetCertsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * No Documentation Found.
     * No Documentation Found.
     * @param {module:api/AftermarketServicesApi~aftermarketServicesGetCertsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    aftermarketServicesGetCerts(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v2/AftermarketServices/Certificates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the aftermarketServicesGetConnectionStatus operation.
     * @callback module:api/AftermarketServicesApi~aftermarketServicesGetConnectionStatusCallback
     * @param {String} error Error message, if any.
     * @param {Boolean} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check whether there is connectivity to AGCO Power Web Services
     * No Documentation Found.
     * @param {module:api/AftermarketServicesApi~aftermarketServicesGetConnectionStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Boolean}
     */
    aftermarketServicesGetConnectionStatus(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = 'Boolean';
      return this.apiClient.callApi(
        '/api/v2/AftermarketServices/Hello', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the aftermarketServicesGetEngineIQACodes operation.
     * @callback module:api/AftermarketServicesApi~aftermarketServicesGetEngineIQACodesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get injector codes given engine.
     * No Documentation Found.
     * @param {String} serialNumber The serial number of the engine.
     * @param {String} eDTInstanceId The EDT Instance Id of the kit calling this method.
     * @param {module:api/AftermarketServicesApi~aftermarketServicesGetEngineIQACodesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    aftermarketServicesGetEngineIQACodes(serialNumber, eDTInstanceId, callback) {
      let postBody = null;
      // verify the required parameter 'serialNumber' is set
      if (serialNumber === undefined || serialNumber === null) {
        throw new Error("Missing the required parameter 'serialNumber' when calling aftermarketServicesGetEngineIQACodes");
      }
      // verify the required parameter 'eDTInstanceId' is set
      if (eDTInstanceId === undefined || eDTInstanceId === null) {
        throw new Error("Missing the required parameter 'eDTInstanceId' when calling aftermarketServicesGetEngineIQACodes");
      }

      let pathParams = {
        'serialNumber': serialNumber
      };
      let queryParams = {
        'EDTInstanceId': eDTInstanceId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/api/v2/AftermarketServices/Engines/{serialNumber}/IQACodes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the aftermarketServicesGetProductionData operation.
     * @callback module:api/AftermarketServicesApi~aftermarketServicesGetProductionDataCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AGCOPowerServicesModelsProductionData>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get production calibration data for given engine.
     * No Documentation Found.
     * @param {String} serialNumber The serial number of the engine.
     * @param {String} eDTInstanceId The EDT Instance Id of the kit calling this method.
     * @param {module:api/AftermarketServicesApi~aftermarketServicesGetProductionDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AGCOPowerServicesModelsProductionData>}
     */
    aftermarketServicesGetProductionData(serialNumber, eDTInstanceId, callback) {
      let postBody = null;
      // verify the required parameter 'serialNumber' is set
      if (serialNumber === undefined || serialNumber === null) {
        throw new Error("Missing the required parameter 'serialNumber' when calling aftermarketServicesGetProductionData");
      }
      // verify the required parameter 'eDTInstanceId' is set
      if (eDTInstanceId === undefined || eDTInstanceId === null) {
        throw new Error("Missing the required parameter 'eDTInstanceId' when calling aftermarketServicesGetProductionData");
      }

      let pathParams = {
        'serialNumber': serialNumber
      };
      let queryParams = {
        'EDTInstanceId': eDTInstanceId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = [AGCOPowerServicesModelsProductionData];
      return this.apiClient.callApi(
        '/api/v2/AftermarketServices/Engines/{serialNumber}/ProductionData', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the aftermarketServicesGetUserStatus operation.
     * @callback module:api/AftermarketServicesApi~aftermarketServicesGetUserStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AGCOPowerServicesModelsUserStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the status of an EDT Kit Registration with AGCO Power Web Services
     * No Documentation Found.
     * @param {String} voucherCode 
     * @param {String} dealerCode 
     * @param {module:api/AftermarketServicesApi~aftermarketServicesGetUserStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AGCOPowerServicesModelsUserStatus}
     */
    aftermarketServicesGetUserStatus(voucherCode, dealerCode, callback) {
      let postBody = null;
      // verify the required parameter 'voucherCode' is set
      if (voucherCode === undefined || voucherCode === null) {
        throw new Error("Missing the required parameter 'voucherCode' when calling aftermarketServicesGetUserStatus");
      }
      // verify the required parameter 'dealerCode' is set
      if (dealerCode === undefined || dealerCode === null) {
        throw new Error("Missing the required parameter 'dealerCode' when calling aftermarketServicesGetUserStatus");
      }

      let pathParams = {
      };
      let queryParams = {
        'voucherCode': voucherCode,
        'dealerCode': dealerCode
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = AGCOPowerServicesModelsUserStatus;
      return this.apiClient.callApi(
        '/api/v2/AftermarketServices/UserStatuses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the aftermarketServicesPutECU operation.
     * @callback module:api/AftermarketServicesApi~aftermarketServicesPutECUCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AGCOPowerServicesModelsECU} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Activate or Deactivate an ECU, or Report an ECU as Damaged.
     * No Documentation Found.
     * @param {String} serialNumber The serial number of the ECU.
     * @param {String} eDTInstanceId The EDT Instance Id of the kit calling this method.
     * @param {module:model/AGCOPowerServicesModelsECU} aGCOPowerServicesModelsECU The ecu to modify.
     * @param {module:api/AftermarketServicesApi~aftermarketServicesPutECUCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AGCOPowerServicesModelsECU}
     */
    aftermarketServicesPutECU(serialNumber, eDTInstanceId, aGCOPowerServicesModelsECU, callback) {
      let postBody = aGCOPowerServicesModelsECU;
      // verify the required parameter 'serialNumber' is set
      if (serialNumber === undefined || serialNumber === null) {
        throw new Error("Missing the required parameter 'serialNumber' when calling aftermarketServicesPutECU");
      }
      // verify the required parameter 'eDTInstanceId' is set
      if (eDTInstanceId === undefined || eDTInstanceId === null) {
        throw new Error("Missing the required parameter 'eDTInstanceId' when calling aftermarketServicesPutECU");
      }
      // verify the required parameter 'aGCOPowerServicesModelsECU' is set
      if (aGCOPowerServicesModelsECU === undefined || aGCOPowerServicesModelsECU === null) {
        throw new Error("Missing the required parameter 'aGCOPowerServicesModelsECU' when calling aftermarketServicesPutECU");
      }

      let pathParams = {
        'serialNumber': serialNumber
      };
      let queryParams = {
        'EDTInstanceId': eDTInstanceId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = AGCOPowerServicesModelsECU;
      return this.apiClient.callApi(
        '/api/v2/AftermarketServices/ECUs/{serialNumber}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the aftermarketServicesPutIQACodes operation.
     * @callback module:api/AftermarketServicesApi~aftermarketServicesPutIQACodesCallback
     * @param {String} error Error message, if any.
     * @param {Boolean} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Report the IQA codes used by an engine
     * No Documentation Found.
     * @param {String} serialNumber The serial number of the Engine
     * @param {String} eDTInstanceId The EDT Instance Id of the kit calling this method.
     * @param {Array.<String>} requestBody A string array of IQA codes in physical order
     * @param {module:api/AftermarketServicesApi~aftermarketServicesPutIQACodesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Boolean}
     */
    aftermarketServicesPutIQACodes(serialNumber, eDTInstanceId, requestBody, callback) {
      let postBody = requestBody;
      // verify the required parameter 'serialNumber' is set
      if (serialNumber === undefined || serialNumber === null) {
        throw new Error("Missing the required parameter 'serialNumber' when calling aftermarketServicesPutIQACodes");
      }
      // verify the required parameter 'eDTInstanceId' is set
      if (eDTInstanceId === undefined || eDTInstanceId === null) {
        throw new Error("Missing the required parameter 'eDTInstanceId' when calling aftermarketServicesPutIQACodes");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling aftermarketServicesPutIQACodes");
      }

      let pathParams = {
        'serialNumber': serialNumber
      };
      let queryParams = {
        'EDTInstanceId': eDTInstanceId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = 'Boolean';
      return this.apiClient.callApi(
        '/api/v2/AftermarketServices/Engines/{serialNumber}/IQACodes', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the aftermarketServicesUpdateUserStatus operation.
     * @callback module:api/AftermarketServicesApi~aftermarketServicesUpdateUserStatusCallback
     * @param {String} error Error message, if any.
     * @param {Boolean} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the status of an EDT Kit Registration with AGCO Power Web Services
     * No Documentation Found.
     * @param {module:model/AGCOPowerServicesModelsUserStatus} aGCOPowerServicesModelsUserStatus 
     * @param {module:api/AftermarketServicesApi~aftermarketServicesUpdateUserStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Boolean}
     */
    aftermarketServicesUpdateUserStatus(aGCOPowerServicesModelsUserStatus, callback) {
      let postBody = aGCOPowerServicesModelsUserStatus;
      // verify the required parameter 'aGCOPowerServicesModelsUserStatus' is set
      if (aGCOPowerServicesModelsUserStatus === undefined || aGCOPowerServicesModelsUserStatus === null) {
        throw new Error("Missing the required parameter 'aGCOPowerServicesModelsUserStatus' when calling aftermarketServicesUpdateUserStatus");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = 'Boolean';
      return this.apiClient.callApi(
        '/api/v2/AftermarketServices/UserStatuses', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
