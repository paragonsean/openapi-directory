/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import APIModelsApiError from '../model/APIModelsApiError';
import APIPagedResponseBuildSystemSharedDTOActivity from '../model/APIPagedResponseBuildSystemSharedDTOActivity';
import BuildSystemSharedDTOActivity from '../model/BuildSystemSharedDTOActivity';

/**
* Activities service.
* @module api/ActivitiesApi
* @version v1
*/
export default class ActivitiesApi {

    /**
    * Constructs a new ActivitiesApi. 
    * @alias module:api/ActivitiesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the activitiesDeleteActivity operation.
     * @callback module:api/ActivitiesApi~activitiesDeleteActivityCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mark the delete flag for the Activity
     * Deletes an Activity. When successful, the response is empty.  If unsuccessful, an appropriate              ApiError is returned.
     * @param {Number} activityID The id of the activity to delete
     * @param {module:api/ActivitiesApi~activitiesDeleteActivityCallback} callback The callback function, accepting three arguments: error, data, response
     */
    activitiesDeleteActivity(activityID, callback) {
      let postBody = null;
      // verify the required parameter 'activityID' is set
      if (activityID === undefined || activityID === null) {
        throw new Error("Missing the required parameter 'activityID' when calling activitiesDeleteActivity");
      }

      let pathParams = {
        'activityID': activityID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/activities/{activityID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the activitiesGetActivities operation.
     * @callback module:api/ActivitiesApi~activitiesGetActivitiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/APIPagedResponseBuildSystemSharedDTOActivity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Activities
     * Gets a collection of Activities. When successful, the response is a PagedResponse of Activities.                If unsuccessful, an appropriate ApiError is returned.
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] Optional. The page limit.  If not specified, the default page limit is 10.
     * @param {Number} [offset] Optional. The page offset.  If not specified, the default page offset is 0.
     * @param {Boolean} [isIncludeDeleted] Does it include deleted activity, or not
     * @param {module:api/ActivitiesApi~activitiesGetActivitiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/APIPagedResponseBuildSystemSharedDTOActivity}
     */
    activitiesGetActivities(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'isIncludeDeleted': opts['isIncludeDeleted']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = APIPagedResponseBuildSystemSharedDTOActivity;
      return this.apiClient.callApi(
        '/api/v2/activities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the activitiesGetActivity operation.
     * @callback module:api/ActivitiesApi~activitiesGetActivityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuildSystemSharedDTOActivity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an Activity by ID
     * Gets an Activity by ID. When successful, the response is the requested Activity.  If unsuccessful,              an appropriate ApiError is returned.
     * @param {Number} activityID The ID of the Activity to get.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [isIncludeDeleted] Does it include deleted activity, or not
     * @param {module:api/ActivitiesApi~activitiesGetActivityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuildSystemSharedDTOActivity}
     */
    activitiesGetActivity(activityID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'activityID' is set
      if (activityID === undefined || activityID === null) {
        throw new Error("Missing the required parameter 'activityID' when calling activitiesGetActivity");
      }

      let pathParams = {
        'activityID': activityID
      };
      let queryParams = {
        'isIncludeDeleted': opts['isIncludeDeleted']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = BuildSystemSharedDTOActivity;
      return this.apiClient.callApi(
        '/api/v2/activities/{activityID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the activitiesPostActivity operation.
     * @callback module:api/ActivitiesApi~activitiesPostActivityCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an Activity
     * Creates an Activity.  The body of the POST is the Activity to create.  The ActivityID will be assigned              on creation of the Activity.  When successful, the response is the ActivityID.  If unsuccessful, an               appropriate ApiError is returned.
     * @param {module:model/BuildSystemSharedDTOActivity} buildSystemSharedDTOActivity The activity to create.  The ActivityID will be assigned on creation of the Activity.
     * @param {module:api/ActivitiesApi~activitiesPostActivityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    activitiesPostActivity(buildSystemSharedDTOActivity, callback) {
      let postBody = buildSystemSharedDTOActivity;
      // verify the required parameter 'buildSystemSharedDTOActivity' is set
      if (buildSystemSharedDTOActivity === undefined || buildSystemSharedDTOActivity === null) {
        throw new Error("Missing the required parameter 'buildSystemSharedDTOActivity' when calling activitiesPostActivity");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/api/v2/activities', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the activitiesPutActivity operation.
     * @callback module:api/ActivitiesApi~activitiesPutActivityCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an Activity
     * Updates an Activity.  The body of the PUT is the updated Activity.  When successful, the response is empty.              If unsuccessful, an appropriate ApiError is returned.
     * @param {Number} activityID The id of the activity to update
     * @param {module:model/BuildSystemSharedDTOActivity} buildSystemSharedDTOActivity The updated activity
     * @param {module:api/ActivitiesApi~activitiesPutActivityCallback} callback The callback function, accepting three arguments: error, data, response
     */
    activitiesPutActivity(activityID, buildSystemSharedDTOActivity, callback) {
      let postBody = buildSystemSharedDTOActivity;
      // verify the required parameter 'activityID' is set
      if (activityID === undefined || activityID === null) {
        throw new Error("Missing the required parameter 'activityID' when calling activitiesPutActivity");
      }
      // verify the required parameter 'buildSystemSharedDTOActivity' is set
      if (buildSystemSharedDTOActivity === undefined || buildSystemSharedDTOActivity === null) {
        throw new Error("Missing the required parameter 'buildSystemSharedDTOActivity' when calling activitiesPutActivity");
      }

      let pathParams = {
        'activityID': activityID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/activities/{activityID}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
