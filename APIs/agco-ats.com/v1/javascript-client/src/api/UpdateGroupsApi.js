/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import APIModelsApiError from '../model/APIModelsApiError';
import APIPagedResponseUpdateSystemModelsBundle from '../model/APIPagedResponseUpdateSystemModelsBundle';
import APIPagedResponseUpdateSystemModelsUpdateGroup from '../model/APIPagedResponseUpdateSystemModelsUpdateGroup';
import UpdateSystemModelsUpdateGroup from '../model/UpdateSystemModelsUpdateGroup';

/**
* UpdateGroups service.
* @module api/UpdateGroupsApi
* @version v1
*/
export default class UpdateGroupsApi {

    /**
    * Constructs a new UpdateGroupsApi. 
    * @alias module:api/UpdateGroupsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiV2UpdateGroupsIDGet operation.
     * @callback module:api/UpdateGroupsApi~apiV2UpdateGroupsIDGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateSystemModelsUpdateGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific Update Group by ID.
     * No Documentation Found.
     * @param {String} ID The ID of the Update Group
     * @param {module:api/UpdateGroupsApi~apiV2UpdateGroupsIDGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateSystemModelsUpdateGroup}
     */
    apiV2UpdateGroupsIDGet(ID, callback) {
      let postBody = null;
      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling apiV2UpdateGroupsIDGet");
      }

      let pathParams = {
        'ID': ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = UpdateSystemModelsUpdateGroup;
      return this.apiClient.callApi(
        '/api/v2/UpdateGroups/{ID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateGroupsAddUpdateGroupUser operation.
     * @callback module:api/UpdateGroupsApi~updateGroupsAddUpdateGroupUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add an updateGroup that a user can see.
     * No Documentation Found.
     * @param {String} id The ID of the update group
     * @param {Number} userID The userID to link to the update group
     * @param {module:api/UpdateGroupsApi~updateGroupsAddUpdateGroupUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateGroupsAddUpdateGroupUser(id, userID, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateGroupsAddUpdateGroupUser");
      }
      // verify the required parameter 'userID' is set
      if (userID === undefined || userID === null) {
        throw new Error("Missing the required parameter 'userID' when calling updateGroupsAddUpdateGroupUser");
      }

      let pathParams = {
        'id': id,
        'userID': userID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/UpdateGroups/{id}/Users/{userID}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateGroupsDelete operation.
     * @callback module:api/UpdateGroupsApi~updateGroupsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an Update Group.
     * No Documentation Found.
     * @param {String} ID The ID of the Update Group to Delete
     * @param {module:api/UpdateGroupsApi~updateGroupsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateGroupsDelete(ID, callback) {
      let postBody = null;
      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling updateGroupsDelete");
      }

      let pathParams = {
        'ID': ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/UpdateGroups/{ID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateGroupsGet operation.
     * @callback module:api/UpdateGroupsApi~updateGroupsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/APIPagedResponseUpdateSystemModelsUpdateGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of Update Groups.  Update Groups are used by the client to register for a specific type of update.
     * No Documentation Found.
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] Optional. The page limit. The default page limit is 10.
     * @param {Number} [offset] Optional. The page offset. The default page offset is 0.
     * @param {Number} [userID] Optional. The user ID to sort update groups by the user's access
     * @param {module:api/UpdateGroupsApi~updateGroupsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/APIPagedResponseUpdateSystemModelsUpdateGroup}
     */
    updateGroupsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'userID': opts['userID']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = APIPagedResponseUpdateSystemModelsUpdateGroup;
      return this.apiClient.callApi(
        '/api/v2/UpdateGroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateGroupsGetUpdateGroupBundles operation.
     * @callback module:api/UpdateGroupsApi~updateGroupsGetUpdateGroupBundlesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/APIPagedResponseUpdateSystemModelsBundle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of bundles for UpdateGroup.
     * No Documentation Found.
     * @param {String} ID The UpdateGroupID
     * @param {Boolean} includeInactive Include Inactive Bundles (true|false)
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] Optional. The page limit. The default page limit is 10.
     * @param {Number} [offset] Optional. The page offset. The default page offset is 0.
     * @param {module:api/UpdateGroupsApi~updateGroupsGetUpdateGroupBundlesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/APIPagedResponseUpdateSystemModelsBundle}
     */
    updateGroupsGetUpdateGroupBundles(ID, includeInactive, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling updateGroupsGetUpdateGroupBundles");
      }
      // verify the required parameter 'includeInactive' is set
      if (includeInactive === undefined || includeInactive === null) {
        throw new Error("Missing the required parameter 'includeInactive' when calling updateGroupsGetUpdateGroupBundles");
      }

      let pathParams = {
        'ID': ID
      };
      let queryParams = {
        'IncludeInactive': includeInactive,
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = APIPagedResponseUpdateSystemModelsBundle;
      return this.apiClient.callApi(
        '/api/v2/UpdateGroups/{ID}/Bundles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateGroupsPost operation.
     * @callback module:api/UpdateGroupsApi~updateGroupsPostCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new Update Group.  The report field is a string that has a dot based request for a specific piece of submitted data.
     * No Documentation Found.
     * @param {module:model/UpdateSystemModelsUpdateGroup} updateSystemModelsUpdateGroup 
     * @param {module:api/UpdateGroupsApi~updateGroupsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    updateGroupsPost(updateSystemModelsUpdateGroup, callback) {
      let postBody = updateSystemModelsUpdateGroup;
      // verify the required parameter 'updateSystemModelsUpdateGroup' is set
      if (updateSystemModelsUpdateGroup === undefined || updateSystemModelsUpdateGroup === null) {
        throw new Error("Missing the required parameter 'updateSystemModelsUpdateGroup' when calling updateGroupsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v2/UpdateGroups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateGroupsPut operation.
     * @callback module:api/UpdateGroupsApi~updateGroupsPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify an Update Group.
     * No Documentation Found.
     * @param {String} ID ID of the Update Group
     * @param {module:model/UpdateSystemModelsUpdateGroup} updateSystemModelsUpdateGroup The Update Group to update.
     * @param {module:api/UpdateGroupsApi~updateGroupsPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateGroupsPut(ID, updateSystemModelsUpdateGroup, callback) {
      let postBody = updateSystemModelsUpdateGroup;
      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling updateGroupsPut");
      }
      // verify the required parameter 'updateSystemModelsUpdateGroup' is set
      if (updateSystemModelsUpdateGroup === undefined || updateSystemModelsUpdateGroup === null) {
        throw new Error("Missing the required parameter 'updateSystemModelsUpdateGroup' when calling updateGroupsPut");
      }

      let pathParams = {
        'ID': ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/UpdateGroups/{ID}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateGroupsRemoveUpdateGroupUser operation.
     * @callback module:api/UpdateGroupsApi~updateGroupsRemoveUpdateGroupUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an update group a user could see.
     * No Documentation Found.
     * @param {String} id The ID of the update group
     * @param {Number} userID The userID to link to the update group
     * @param {module:api/UpdateGroupsApi~updateGroupsRemoveUpdateGroupUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateGroupsRemoveUpdateGroupUser(id, userID, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateGroupsRemoveUpdateGroupUser");
      }
      // verify the required parameter 'userID' is set
      if (userID === undefined || userID === null) {
        throw new Error("Missing the required parameter 'userID' when calling updateGroupsRemoveUpdateGroupUser");
      }

      let pathParams = {
        'id': id,
        'userID': userID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/UpdateGroups/{id}/Users/{userID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
