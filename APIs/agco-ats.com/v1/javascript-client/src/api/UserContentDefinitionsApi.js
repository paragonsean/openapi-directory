/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import APIModelsApiError from '../model/APIModelsApiError';
import APIPagedResponseContentSubmissionSharedBusinessEntitiesUserContentDefinition from '../model/APIPagedResponseContentSubmissionSharedBusinessEntitiesUserContentDefinition';
import ContentSubmissionSharedBusinessEntitiesUserContentDefinition from '../model/ContentSubmissionSharedBusinessEntitiesUserContentDefinition';

/**
* UserContentDefinitions service.
* @module api/UserContentDefinitionsApi
* @version v1
*/
export default class UserContentDefinitionsApi {

    /**
    * Constructs a new UserContentDefinitionsApi. 
    * @alias module:api/UserContentDefinitionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the userContentDefinitionsDeleteUserContentDefinition operation.
     * @callback module:api/UserContentDefinitionsApi~userContentDefinitionsDeleteUserContentDefinitionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a UserContentDefinition
     * Deletes an UserContentDefinition. When successful, the response is empty.  If unsuccessful, an appropriate              ApiError is returned.
     * @param {Number} userContentDefinitionID The ID of the UserContentDefinition to delete
     * @param {module:api/UserContentDefinitionsApi~userContentDefinitionsDeleteUserContentDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userContentDefinitionsDeleteUserContentDefinition(userContentDefinitionID, callback) {
      let postBody = null;
      // verify the required parameter 'userContentDefinitionID' is set
      if (userContentDefinitionID === undefined || userContentDefinitionID === null) {
        throw new Error("Missing the required parameter 'userContentDefinitionID' when calling userContentDefinitionsDeleteUserContentDefinition");
      }

      let pathParams = {
        'userContentDefinitionID': userContentDefinitionID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/UserContentDefinitions/{userContentDefinitionID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userContentDefinitionsGetUserContentDefinition operation.
     * @callback module:api/UserContentDefinitionsApi~userContentDefinitionsGetUserContentDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContentSubmissionSharedBusinessEntitiesUserContentDefinition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a UserContentDefinition by ID
     * Gets a UserContentDefinition by ID. When successful, the response is the requested UserContentDefinition.              If unsuccessful, an appropriate ApiError is returned.
     * @param {Number} userContentDefinitionID The ID of the UserContentDefinition to get.
     * @param {module:api/UserContentDefinitionsApi~userContentDefinitionsGetUserContentDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContentSubmissionSharedBusinessEntitiesUserContentDefinition}
     */
    userContentDefinitionsGetUserContentDefinition(userContentDefinitionID, callback) {
      let postBody = null;
      // verify the required parameter 'userContentDefinitionID' is set
      if (userContentDefinitionID === undefined || userContentDefinitionID === null) {
        throw new Error("Missing the required parameter 'userContentDefinitionID' when calling userContentDefinitionsGetUserContentDefinition");
      }

      let pathParams = {
        'userContentDefinitionID': userContentDefinitionID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = ContentSubmissionSharedBusinessEntitiesUserContentDefinition;
      return this.apiClient.callApi(
        '/api/v2/UserContentDefinitions/{userContentDefinitionID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userContentDefinitionsGetUserContentDefinitions operation.
     * @callback module:api/UserContentDefinitionsApi~userContentDefinitionsGetUserContentDefinitionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/APIPagedResponseContentSubmissionSharedBusinessEntitiesUserContentDefinition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get UserContentDefinitions
     * Gets a collection of UserContentDefinitions. When successful, the response is a PagedResponse of UserContentDefinitions.              If unsuccessful, an appropriate ApiError is returned.
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] Optional. The page limit.  If not specified, the default page limit is 10.
     * @param {Number} [offset] Optional. The page offset.  If not specified, the default page offset is 0.
     * @param {Number} [userID] Optional. Filter by UserID.
     * @param {Number} [contentDefinitionID] Optional. Filter by ContentDefinitionID
     * @param {module:api/UserContentDefinitionsApi~userContentDefinitionsGetUserContentDefinitionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/APIPagedResponseContentSubmissionSharedBusinessEntitiesUserContentDefinition}
     */
    userContentDefinitionsGetUserContentDefinitions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'userID': opts['userID'],
        'contentDefinitionID': opts['contentDefinitionID']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = APIPagedResponseContentSubmissionSharedBusinessEntitiesUserContentDefinition;
      return this.apiClient.callApi(
        '/api/v2/UserContentDefinitions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userContentDefinitionsPostUserContentDefinition operation.
     * @callback module:api/UserContentDefinitionsApi~userContentDefinitionsPostUserContentDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a UserContentDefinition
     * Creates a UserContentDefinition.  The body of the POST is the UserContentDefinition to create.              The UserContentDefinitionID will be assigned on creation of the Job.  When successful, the response              is the UserContentDefinitionID.  If unsuccessful, an appropriate ApiError is returned.
     * @param {module:model/ContentSubmissionSharedBusinessEntitiesUserContentDefinition} contentSubmissionSharedBusinessEntitiesUserContentDefinition The UserContentDefinition to create.
     * @param {module:api/UserContentDefinitionsApi~userContentDefinitionsPostUserContentDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    userContentDefinitionsPostUserContentDefinition(contentSubmissionSharedBusinessEntitiesUserContentDefinition, callback) {
      let postBody = contentSubmissionSharedBusinessEntitiesUserContentDefinition;
      // verify the required parameter 'contentSubmissionSharedBusinessEntitiesUserContentDefinition' is set
      if (contentSubmissionSharedBusinessEntitiesUserContentDefinition === undefined || contentSubmissionSharedBusinessEntitiesUserContentDefinition === null) {
        throw new Error("Missing the required parameter 'contentSubmissionSharedBusinessEntitiesUserContentDefinition' when calling userContentDefinitionsPostUserContentDefinition");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/api/v2/UserContentDefinitions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
