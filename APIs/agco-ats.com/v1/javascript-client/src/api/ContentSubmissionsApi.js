/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import APIModelsApiError from '../model/APIModelsApiError';
import APIPagedResponseContentSubmissionSharedBusinessEntitiesContentSubmission from '../model/APIPagedResponseContentSubmissionSharedBusinessEntitiesContentSubmission';
import APIPagedResponseContentSubmissionSharedBusinessEntitiesContentSubmissionAttribute from '../model/APIPagedResponseContentSubmissionSharedBusinessEntitiesContentSubmissionAttribute';
import BuildSystemSharedInterfacesIJobRun from '../model/BuildSystemSharedInterfacesIJobRun';
import ContentSubmissionSharedBusinessEntitiesContentSubmission from '../model/ContentSubmissionSharedBusinessEntitiesContentSubmission';
import ContentSubmissionSharedBusinessEntitiesContentSubmissionAttribute from '../model/ContentSubmissionSharedBusinessEntitiesContentSubmissionAttribute';

/**
* ContentSubmissions service.
* @module api/ContentSubmissionsApi
* @version v1
*/
export default class ContentSubmissionsApi {

    /**
    * Constructs a new ContentSubmissionsApi. 
    * @alias module:api/ContentSubmissionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the contentSubmissionsDeleteContentSubmission operation.
     * @callback module:api/ContentSubmissionsApi~contentSubmissionsDeleteContentSubmissionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a ContentSubmission
     * Deletes an ContentSubmission. When successful, the response is empty.  If unsuccessful, an appropriate              ApiError is returned.
     * @param {Number} contentSubmissionID The ID of the ContentSubmission to delete
     * @param {module:api/ContentSubmissionsApi~contentSubmissionsDeleteContentSubmissionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    contentSubmissionsDeleteContentSubmission(contentSubmissionID, callback) {
      let postBody = null;
      // verify the required parameter 'contentSubmissionID' is set
      if (contentSubmissionID === undefined || contentSubmissionID === null) {
        throw new Error("Missing the required parameter 'contentSubmissionID' when calling contentSubmissionsDeleteContentSubmission");
      }

      let pathParams = {
        'contentSubmissionID': contentSubmissionID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/ContentSubmissions/{contentSubmissionID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contentSubmissionsDeleteContentSubmissionAttribute operation.
     * @callback module:api/ContentSubmissionsApi~contentSubmissionsDeleteContentSubmissionAttributeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove an Attribute from a ContentSubmission
     * No Documentation Found.
     * @param {Number} contentSubmissionAttributeID The ID of the Attribute to remove.
     * @param {module:api/ContentSubmissionsApi~contentSubmissionsDeleteContentSubmissionAttributeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    contentSubmissionsDeleteContentSubmissionAttribute(contentSubmissionAttributeID, callback) {
      let postBody = null;
      // verify the required parameter 'contentSubmissionAttributeID' is set
      if (contentSubmissionAttributeID === undefined || contentSubmissionAttributeID === null) {
        throw new Error("Missing the required parameter 'contentSubmissionAttributeID' when calling contentSubmissionsDeleteContentSubmissionAttribute");
      }

      let pathParams = {
        'contentSubmissionAttributeID': contentSubmissionAttributeID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/ContentSubmissionAttributes/{contentSubmissionAttributeID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contentSubmissionsGetContentSubmission operation.
     * @callback module:api/ContentSubmissionsApi~contentSubmissionsGetContentSubmissionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContentSubmissionSharedBusinessEntitiesContentSubmission} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a ContentSubmission by ID
     * Gets a ContentSubmission by ID. When successful, the response is the requested ContentSubmission.              If unsuccessful, an appropriate ApiError is returned.
     * @param {Number} contentSubmissionID The ID of the ContentSubmission to get.
     * @param {Object} opts Optional parameters
     * @param {String} [includeAttributes] Names of Attributes to include when retrieving this submission. This should be a comma-separated list.
     * @param {module:api/ContentSubmissionsApi~contentSubmissionsGetContentSubmissionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContentSubmissionSharedBusinessEntitiesContentSubmission}
     */
    contentSubmissionsGetContentSubmission(contentSubmissionID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'contentSubmissionID' is set
      if (contentSubmissionID === undefined || contentSubmissionID === null) {
        throw new Error("Missing the required parameter 'contentSubmissionID' when calling contentSubmissionsGetContentSubmission");
      }

      let pathParams = {
        'contentSubmissionID': contentSubmissionID
      };
      let queryParams = {
        'includeAttributes': opts['includeAttributes']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = ContentSubmissionSharedBusinessEntitiesContentSubmission;
      return this.apiClient.callApi(
        '/api/v2/ContentSubmissions/{contentSubmissionID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contentSubmissionsGetContentSubmissionAttributes operation.
     * @callback module:api/ContentSubmissionsApi~contentSubmissionsGetContentSubmissionAttributesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/APIPagedResponseContentSubmissionSharedBusinessEntitiesContentSubmissionAttribute} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Attributes for a ContentSubmission
     * No Documentation Found.
     * @param {Number} contentSubmissionID The ID of the ContentSubmission.
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] Optional. The page limit.  If not specified, the default page limit is 10.
     * @param {Number} [offset] Optional. The page offset.  If not specified, the default page offset is 0.
     * @param {String} [name] Optional. Filter the attributes by Name.
     * @param {module:api/ContentSubmissionsApi~contentSubmissionsGetContentSubmissionAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/APIPagedResponseContentSubmissionSharedBusinessEntitiesContentSubmissionAttribute}
     */
    contentSubmissionsGetContentSubmissionAttributes(contentSubmissionID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'contentSubmissionID' is set
      if (contentSubmissionID === undefined || contentSubmissionID === null) {
        throw new Error("Missing the required parameter 'contentSubmissionID' when calling contentSubmissionsGetContentSubmissionAttributes");
      }

      let pathParams = {
        'contentSubmissionID': contentSubmissionID
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'name': opts['name']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = APIPagedResponseContentSubmissionSharedBusinessEntitiesContentSubmissionAttribute;
      return this.apiClient.callApi(
        '/api/v2/ContentSubmissions/{contentSubmissionID}/Attributes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contentSubmissionsGetContentSubmissionStatus operation.
     * @callback module:api/ContentSubmissionsApi~contentSubmissionsGetContentSubmissionStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuildSystemSharedInterfacesIJobRun} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the status of a ContentSubmission
     * No Documentation Found.
     * @param {Number} contentSubmissionID The ID of the ContentSubmission to get.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includeActivityRunDetails] True to include all status details if JobRun. Defaults to false
     * @param {module:api/ContentSubmissionsApi~contentSubmissionsGetContentSubmissionStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuildSystemSharedInterfacesIJobRun}
     */
    contentSubmissionsGetContentSubmissionStatus(contentSubmissionID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'contentSubmissionID' is set
      if (contentSubmissionID === undefined || contentSubmissionID === null) {
        throw new Error("Missing the required parameter 'contentSubmissionID' when calling contentSubmissionsGetContentSubmissionStatus");
      }

      let pathParams = {
        'contentSubmissionID': contentSubmissionID
      };
      let queryParams = {
        'includeActivityRunDetails': opts['includeActivityRunDetails']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = BuildSystemSharedInterfacesIJobRun;
      return this.apiClient.callApi(
        '/api/v2/ContentSubmissions/{contentSubmissionID}/Status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contentSubmissionsGetContentSubmissions operation.
     * @callback module:api/ContentSubmissionsApi~contentSubmissionsGetContentSubmissionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/APIPagedResponseContentSubmissionSharedBusinessEntitiesContentSubmission} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get ContentSubmissions
     * Gets a collection of ContentSubmissions. When successful, the response is a PagedResponse of ContentSubmissions. Additional searches: attributes[Name]=Value. This can be used to search for submissions that have the specified values for attributes. Beginning and ending wildcard (*) supported for value.              If unsuccessful, an appropriate ApiError is returned.
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] Optional. The page limit.  If not specified, the default page limit is 10.
     * @param {Number} [offset] Optional. The page offset.  If not specified, the default page offset is 0.
     * @param {Number} [userID] Optional. Filter by UserID.
     * @param {Number} [contentDefinitionID] Optional. Filter by ContentDefinitionID
     * @param {String} [includeAttributes] Names of Attributes to include when retrieving this submission. This should be a comma-separated list. If not provided, Attributes are not included. If '*', all Attributes are included.
     * @param {Number} [releaseID] Optional. Filter the submissions by whether they are part of the Release with the specified Release ID.
     * @param {Number} [typeID] Optional. Filter submissions by their ContentDefinition's Type ID.
     * @param {Number} [version] Optional. Filter submissions by their Version.
     * @param {Boolean} [includeDefinition] Optional. If true, includes the ContentDefinition for each submission.
     * @param {module:api/ContentSubmissionsApi~contentSubmissionsGetContentSubmissionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/APIPagedResponseContentSubmissionSharedBusinessEntitiesContentSubmission}
     */
    contentSubmissionsGetContentSubmissions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'userID': opts['userID'],
        'contentDefinitionID': opts['contentDefinitionID'],
        'includeAttributes': opts['includeAttributes'],
        'releaseID': opts['releaseID'],
        'typeID': opts['typeID'],
        'version': opts['version'],
        'includeDefinition': opts['includeDefinition']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = APIPagedResponseContentSubmissionSharedBusinessEntitiesContentSubmission;
      return this.apiClient.callApi(
        '/api/v2/ContentSubmissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contentSubmissionsPostContentSubmission operation.
     * @callback module:api/ContentSubmissionsApi~contentSubmissionsPostContentSubmissionCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a ContentSubmission
     * Creates a ContentSubmission.  The body of the POST is the ContentSubmission to create.              The ContentSubmissionID will be assigned on creation of the Job.  When successful, the response              is the ContentSubmissionID.  If unsuccessful, an appropriate ApiError is returned.
     * @param {module:model/ContentSubmissionSharedBusinessEntitiesContentSubmission} contentSubmissionSharedBusinessEntitiesContentSubmission The ContentSubmission to create.
     * @param {module:api/ContentSubmissionsApi~contentSubmissionsPostContentSubmissionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    contentSubmissionsPostContentSubmission(contentSubmissionSharedBusinessEntitiesContentSubmission, callback) {
      let postBody = contentSubmissionSharedBusinessEntitiesContentSubmission;
      // verify the required parameter 'contentSubmissionSharedBusinessEntitiesContentSubmission' is set
      if (contentSubmissionSharedBusinessEntitiesContentSubmission === undefined || contentSubmissionSharedBusinessEntitiesContentSubmission === null) {
        throw new Error("Missing the required parameter 'contentSubmissionSharedBusinessEntitiesContentSubmission' when calling contentSubmissionsPostContentSubmission");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/api/v2/ContentSubmissions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contentSubmissionsPostContentSubmissionAttribute operation.
     * @callback module:api/ContentSubmissionsApi~contentSubmissionsPostContentSubmissionAttributeCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add an Attribute to a ContentSubmission
     * No Documentation Found.
     * @param {Number} contentSubmissionID The ID of the ContentSubmission
     * @param {module:model/ContentSubmissionSharedBusinessEntitiesContentSubmissionAttribute} contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute The Attribute to add.
     * @param {module:api/ContentSubmissionsApi~contentSubmissionsPostContentSubmissionAttributeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    contentSubmissionsPostContentSubmissionAttribute(contentSubmissionID, contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute, callback) {
      let postBody = contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute;
      // verify the required parameter 'contentSubmissionID' is set
      if (contentSubmissionID === undefined || contentSubmissionID === null) {
        throw new Error("Missing the required parameter 'contentSubmissionID' when calling contentSubmissionsPostContentSubmissionAttribute");
      }
      // verify the required parameter 'contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute' is set
      if (contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute === undefined || contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute === null) {
        throw new Error("Missing the required parameter 'contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute' when calling contentSubmissionsPostContentSubmissionAttribute");
      }

      let pathParams = {
        'contentSubmissionID': contentSubmissionID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/api/v2/ContentSubmissions/{contentSubmissionID}/Attributes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contentSubmissionsPostContentSubmissionAttributes operation.
     * @callback module:api/ContentSubmissionsApi~contentSubmissionsPostContentSubmissionAttributesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * No Documentation Found.
     * No Documentation Found.
     * @param {Number} contentSubmissionID 
     * @param {Array.<module:model/ContentSubmissionSharedBusinessEntitiesContentSubmissionAttribute>} contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute 
     * @param {module:api/ContentSubmissionsApi~contentSubmissionsPostContentSubmissionAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    contentSubmissionsPostContentSubmissionAttributes(contentSubmissionID, contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute, callback) {
      let postBody = contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute;
      // verify the required parameter 'contentSubmissionID' is set
      if (contentSubmissionID === undefined || contentSubmissionID === null) {
        throw new Error("Missing the required parameter 'contentSubmissionID' when calling contentSubmissionsPostContentSubmissionAttributes");
      }
      // verify the required parameter 'contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute' is set
      if (contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute === undefined || contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute === null) {
        throw new Error("Missing the required parameter 'contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute' when calling contentSubmissionsPostContentSubmissionAttributes");
      }

      let pathParams = {
        'contentSubmissionID': contentSubmissionID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/ContentSubmissions/{contentSubmissionID}/Attributes/Batch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contentSubmissionsPutContentSubmission operation.
     * @callback module:api/ContentSubmissionsApi~contentSubmissionsPutContentSubmissionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a ContentSubmission
     * Updates a ContentSubmission.  The body of the PUT is the updated ContentSubmission.                When successful, the response is empty.  If unsuccessful, an appropriate ApiError is returned.
     * @param {Number} contentSubmissionID The ID of the ContentSubmission to update
     * @param {module:model/ContentSubmissionSharedBusinessEntitiesContentSubmission} contentSubmissionSharedBusinessEntitiesContentSubmission The updated ContentSubmission
     * @param {module:api/ContentSubmissionsApi~contentSubmissionsPutContentSubmissionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    contentSubmissionsPutContentSubmission(contentSubmissionID, contentSubmissionSharedBusinessEntitiesContentSubmission, callback) {
      let postBody = contentSubmissionSharedBusinessEntitiesContentSubmission;
      // verify the required parameter 'contentSubmissionID' is set
      if (contentSubmissionID === undefined || contentSubmissionID === null) {
        throw new Error("Missing the required parameter 'contentSubmissionID' when calling contentSubmissionsPutContentSubmission");
      }
      // verify the required parameter 'contentSubmissionSharedBusinessEntitiesContentSubmission' is set
      if (contentSubmissionSharedBusinessEntitiesContentSubmission === undefined || contentSubmissionSharedBusinessEntitiesContentSubmission === null) {
        throw new Error("Missing the required parameter 'contentSubmissionSharedBusinessEntitiesContentSubmission' when calling contentSubmissionsPutContentSubmission");
      }

      let pathParams = {
        'contentSubmissionID': contentSubmissionID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/ContentSubmissions/{contentSubmissionID}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contentSubmissionsPutContentSubmissionAttributeAsync operation.
     * @callback module:api/ContentSubmissionsApi~contentSubmissionsPutContentSubmissionAttributeAsyncCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an Attribute for a ContentSubmission
     * No Documentation Found.
     * @param {Number} contentSubmissionAttributeID The ID of the Attribute to update.
     * @param {module:model/ContentSubmissionSharedBusinessEntitiesContentSubmissionAttribute} contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute The Attribute to update.
     * @param {module:api/ContentSubmissionsApi~contentSubmissionsPutContentSubmissionAttributeAsyncCallback} callback The callback function, accepting three arguments: error, data, response
     */
    contentSubmissionsPutContentSubmissionAttributeAsync(contentSubmissionAttributeID, contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute, callback) {
      let postBody = contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute;
      // verify the required parameter 'contentSubmissionAttributeID' is set
      if (contentSubmissionAttributeID === undefined || contentSubmissionAttributeID === null) {
        throw new Error("Missing the required parameter 'contentSubmissionAttributeID' when calling contentSubmissionsPutContentSubmissionAttributeAsync");
      }
      // verify the required parameter 'contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute' is set
      if (contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute === undefined || contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute === null) {
        throw new Error("Missing the required parameter 'contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute' when calling contentSubmissionsPutContentSubmissionAttributeAsync");
      }

      let pathParams = {
        'contentSubmissionAttributeID': contentSubmissionAttributeID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/ContentSubmissionAttributes/{contentSubmissionAttributeID}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contentSubmissionsPutContentSubmissionAttributes operation.
     * @callback module:api/ContentSubmissionsApi~contentSubmissionsPutContentSubmissionAttributesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * No Documentation Found.
     * No Documentation Found.
     * @param {Array.<module:model/ContentSubmissionSharedBusinessEntitiesContentSubmissionAttribute>} contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute 
     * @param {module:api/ContentSubmissionsApi~contentSubmissionsPutContentSubmissionAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    contentSubmissionsPutContentSubmissionAttributes(contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute, callback) {
      let postBody = contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute;
      // verify the required parameter 'contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute' is set
      if (contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute === undefined || contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute === null) {
        throw new Error("Missing the required parameter 'contentSubmissionSharedBusinessEntitiesContentSubmissionAttribute' when calling contentSubmissionsPutContentSubmissionAttributes");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/ContentSubmissionAttributes/Batch', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
