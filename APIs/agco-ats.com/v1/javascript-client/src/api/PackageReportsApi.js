/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import APIModelsApiError from '../model/APIModelsApiError';
import UpdateSystemModelsPackageReport from '../model/UpdateSystemModelsPackageReport';

/**
* PackageReports service.
* @module api/PackageReportsApi
* @version v1
*/
export default class PackageReportsApi {

    /**
    * Constructs a new PackageReportsApi. 
    * @alias module:api/PackageReportsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiV2ClientsClientIDPackageReportsPut operation.
     * @callback module:api/PackageReportsApi~apiV2ClientsClientIDPackageReportsPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Submit a package report
     * No Documentation Found.
     * @param {String} clientID The Client ID
     * @param {module:model/UpdateSystemModelsPackageReport} updateSystemModelsPackageReport The Package Report
     * @param {module:api/PackageReportsApi~apiV2ClientsClientIDPackageReportsPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV2ClientsClientIDPackageReportsPut(clientID, updateSystemModelsPackageReport, callback) {
      let postBody = updateSystemModelsPackageReport;
      // verify the required parameter 'clientID' is set
      if (clientID === undefined || clientID === null) {
        throw new Error("Missing the required parameter 'clientID' when calling apiV2ClientsClientIDPackageReportsPut");
      }
      // verify the required parameter 'updateSystemModelsPackageReport' is set
      if (updateSystemModelsPackageReport === undefined || updateSystemModelsPackageReport === null) {
        throw new Error("Missing the required parameter 'updateSystemModelsPackageReport' when calling apiV2ClientsClientIDPackageReportsPut");
      }

      let pathParams = {
        'ClientID': clientID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/Clients/{ClientID}/PackageReports', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the packageReportsBatch operation.
     * @callback module:api/PackageReportsApi~packageReportsBatchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Submit a batch of package reports
     * No Documentation Found.
     * @param {String} clientID The Client ID
     * @param {Array.<module:model/UpdateSystemModelsPackageReport>} updateSystemModelsPackageReport The Package Reports
     * @param {module:api/PackageReportsApi~packageReportsBatchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    packageReportsBatch(clientID, updateSystemModelsPackageReport, callback) {
      let postBody = updateSystemModelsPackageReport;
      // verify the required parameter 'clientID' is set
      if (clientID === undefined || clientID === null) {
        throw new Error("Missing the required parameter 'clientID' when calling packageReportsBatch");
      }
      // verify the required parameter 'updateSystemModelsPackageReport' is set
      if (updateSystemModelsPackageReport === undefined || updateSystemModelsPackageReport === null) {
        throw new Error("Missing the required parameter 'updateSystemModelsPackageReport' when calling packageReportsBatch");
      }

      let pathParams = {
        'ClientID': clientID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/Clients/{ClientID}/PackageReports/Batch', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the packageReportsDefault operation.
     * @callback module:api/PackageReportsApi~packageReportsDefaultCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UpdateSystemModelsPackageReport>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the package reports for a client.
     * No Documentation Found.
     * @param {String} clientID The Client ID
     * @param {module:api/PackageReportsApi~packageReportsDefaultCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UpdateSystemModelsPackageReport>}
     */
    packageReportsDefault(clientID, callback) {
      let postBody = null;
      // verify the required parameter 'clientID' is set
      if (clientID === undefined || clientID === null) {
        throw new Error("Missing the required parameter 'clientID' when calling packageReportsDefault");
      }

      let pathParams = {
        'ClientID': clientID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = [UpdateSystemModelsPackageReport];
      return this.apiClient.callApi(
        '/api/v2/Clients/{ClientID}/PackageReports', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
