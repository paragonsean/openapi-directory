/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import APIModelsUser from '../model/APIModelsUser';
import APIPagedResponseAPIModelsUser from '../model/APIPagedResponseAPIModelsUser';

/**
* Users service.
* @module api/UsersApi
* @version v1
*/
export default class UsersApi {

    /**
    * Constructs a new UsersApi. 
    * @alias module:api/UsersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiV2UsersIdGet operation.
     * @callback module:api/UsersApi~apiV2UsersIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/APIModelsUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific user
     * No Documentation Found.
     * @param {Number} id The user ID
     * @param {module:api/UsersApi~apiV2UsersIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/APIModelsUser}
     */
    apiV2UsersIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV2UsersIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = APIModelsUser;
      return this.apiClient.callApi(
        '/api/v2/Users/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersDelete operation.
     * @callback module:api/UsersApi~usersDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a user
     * No Documentation Found.
     * @param {Number} id The user id
     * @param {module:api/UsersApi~usersDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/Users/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersGet operation.
     * @callback module:api/UsersApi~usersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/APIPagedResponseAPIModelsUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get users
     * No Documentation Found.
     * @param {Object} opts Optional parameters
     * @param {String} [username] Optional. Search by username. Supports beginning and ending wildcards (*).
     * @param {String} [email] Optional. Search by email. Supports beginning and ending wildcards (*).
     * @param {String} [name] Optional. Search by name. Supports beginning and ending wildcards (*).
     * @param {String} [hasRole] Optional. Return only users having the provided role name.
     * @param {Number} [limit] Optional. The page limit. The default page limit is 10.
     * @param {Number} [offset] Optional. The page offset. The default page offset is 0.
     * @param {module:api/UsersApi~usersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/APIPagedResponseAPIModelsUser}
     */
    usersGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'username': opts['username'],
        'email': opts['email'],
        'name': opts['name'],
        'hasRole': opts['hasRole'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = APIPagedResponseAPIModelsUser;
      return this.apiClient.callApi(
        '/api/v2/Users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersGetCurrentUser operation.
     * @callback module:api/UsersApi~usersGetCurrentUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/APIModelsUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the current user
     * No Documentation Found.
     * @param {module:api/UsersApi~usersGetCurrentUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/APIModelsUser}
     */
    usersGetCurrentUser(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = APIModelsUser;
      return this.apiClient.callApi(
        '/api/v2/Users/Current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersPost operation.
     * @callback module:api/UsersApi~usersPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/APIModelsUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a user
     * No Documentation Found.
     * @param {module:model/APIModelsUser} aPIModelsUser The user to create.
     * @param {module:api/UsersApi~usersPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/APIModelsUser}
     */
    usersPost(aPIModelsUser, callback) {
      let postBody = aPIModelsUser;
      // verify the required parameter 'aPIModelsUser' is set
      if (aPIModelsUser === undefined || aPIModelsUser === null) {
        throw new Error("Missing the required parameter 'aPIModelsUser' when calling usersPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = APIModelsUser;
      return this.apiClient.callApi(
        '/api/v2/Users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersPut operation.
     * @callback module:api/UsersApi~usersPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a user
     * No Documentation Found.
     * @param {Number} id The user id
     * @param {module:model/APIModelsUser} aPIModelsUser The user
     * @param {module:api/UsersApi~usersPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersPut(id, aPIModelsUser, callback) {
      let postBody = aPIModelsUser;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersPut");
      }
      // verify the required parameter 'aPIModelsUser' is set
      if (aPIModelsUser === undefined || aPIModelsUser === null) {
        throw new Error("Missing the required parameter 'aPIModelsUser' when calling usersPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/Users/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersPutCurrentUser operation.
     * @callback module:api/UsersApi~usersPutCurrentUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a user
     * No Documentation Found.
     * @param {module:model/APIModelsUser} aPIModelsUser The user
     * @param {module:api/UsersApi~usersPutCurrentUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersPutCurrentUser(aPIModelsUser, callback) {
      let postBody = aPIModelsUser;
      // verify the required parameter 'aPIModelsUser' is set
      if (aPIModelsUser === undefined || aPIModelsUser === null) {
        throw new Error("Missing the required parameter 'aPIModelsUser' when calling usersPutCurrentUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/Users/Current', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
