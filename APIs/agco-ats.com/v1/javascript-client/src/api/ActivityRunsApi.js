/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import APIModelsApiError from '../model/APIModelsApiError';
import APIPagedResponseBuildSystemSharedDTOActivityRun from '../model/APIPagedResponseBuildSystemSharedDTOActivityRun';
import BuildSystemSharedDTOActivityRun from '../model/BuildSystemSharedDTOActivityRun';
import BuildSystemSharedDTOActivityRunStatus from '../model/BuildSystemSharedDTOActivityRunStatus';

/**
* ActivityRuns service.
* @module api/ActivityRunsApi
* @version v1
*/
export default class ActivityRunsApi {

    /**
    * Constructs a new ActivityRunsApi. 
    * @alias module:api/ActivityRunsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the activityRunsGetActivityRun operation.
     * @callback module:api/ActivityRunsApi~activityRunsGetActivityRunCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuildSystemSharedDTOActivityRun} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an ActivityRun by ID
     * Gets an ActivityRun by ID. When successful, the response is the requested ActivityRun.  If unsuccessful,              an appropriate ApiError is returned.
     * @param {Number} activityRunID The ID of the ActivityRun to get.
     * @param {module:api/ActivityRunsApi~activityRunsGetActivityRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuildSystemSharedDTOActivityRun}
     */
    activityRunsGetActivityRun(activityRunID, callback) {
      let postBody = null;
      // verify the required parameter 'activityRunID' is set
      if (activityRunID === undefined || activityRunID === null) {
        throw new Error("Missing the required parameter 'activityRunID' when calling activityRunsGetActivityRun");
      }

      let pathParams = {
        'activityRunID': activityRunID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = BuildSystemSharedDTOActivityRun;
      return this.apiClient.callApi(
        '/api/v2/activityRuns/{activityRunID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the activityRunsGetActivityRunStatus operation.
     * @callback module:api/ActivityRunsApi~activityRunsGetActivityRunStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuildSystemSharedDTOActivityRunStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the ActivityRunStatus of an ActivityRun
     * Gets the ActivityRunStatus of an ActivityRun.  When successful, the response is the requested ActivityRunStatus.              If unsuccessful, an appropriate ApiError is returned.
     * @param {Number} activityRunID The ID of the ActivityRun to get ActivityRunStatus for.
     * @param {module:api/ActivityRunsApi~activityRunsGetActivityRunStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuildSystemSharedDTOActivityRunStatus}
     */
    activityRunsGetActivityRunStatus(activityRunID, callback) {
      let postBody = null;
      // verify the required parameter 'activityRunID' is set
      if (activityRunID === undefined || activityRunID === null) {
        throw new Error("Missing the required parameter 'activityRunID' when calling activityRunsGetActivityRunStatus");
      }

      let pathParams = {
        'activityRunID': activityRunID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = BuildSystemSharedDTOActivityRunStatus;
      return this.apiClient.callApi(
        '/api/v2/activityRuns/{activityRunID}/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the activityRunsGetActivityRuns operation.
     * @callback module:api/ActivityRunsApi~activityRunsGetActivityRunsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/APIPagedResponseBuildSystemSharedDTOActivityRun} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get ActivityRuns
     * Gets a collection of ActivityRuns. When successful, the response is a PagedResponse of ActivityRuns.                If unsuccessful, an appropriate ApiError is returned.
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] Optional. The page limit.  If not specified, the default page limit is 10.
     * @param {Number} [offset] Optional. The page offset.  If not specified, the default page offset is 0.
     * @param {module:model/String} [status] Optional. Filter activity runs by status.  Value should be a comma separated list of status to include.              If not specified, the default status filter is “InProgress”.
     * @param {module:api/ActivityRunsApi~activityRunsGetActivityRunsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/APIPagedResponseBuildSystemSharedDTOActivityRun}
     */
    activityRunsGetActivityRuns(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'status': opts['status']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = APIPagedResponseBuildSystemSharedDTOActivityRun;
      return this.apiClient.callApi(
        '/api/v2/activityRuns', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the activityRunsPutActivityRun operation.
     * @callback module:api/ActivityRunsApi~activityRunsPutActivityRunCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an ActivityRun
     * Updates the ActivityRunStatus of an ActivityRun.  The body of the PUT is the updated ActivityRunStatus.              When successful, the response is empty.  If unsuccessful, an appropriate ApiError is returned.
     * @param {Number} activityRunID The ID of the ActivityRun to update ActivityRunStatus for.
     * @param {module:model/BuildSystemSharedDTOActivityRun} buildSystemSharedDTOActivityRun The updated ActivityRun.
     * @param {module:api/ActivityRunsApi~activityRunsPutActivityRunCallback} callback The callback function, accepting three arguments: error, data, response
     */
    activityRunsPutActivityRun(activityRunID, buildSystemSharedDTOActivityRun, callback) {
      let postBody = buildSystemSharedDTOActivityRun;
      // verify the required parameter 'activityRunID' is set
      if (activityRunID === undefined || activityRunID === null) {
        throw new Error("Missing the required parameter 'activityRunID' when calling activityRunsPutActivityRun");
      }
      // verify the required parameter 'buildSystemSharedDTOActivityRun' is set
      if (buildSystemSharedDTOActivityRun === undefined || buildSystemSharedDTOActivityRun === null) {
        throw new Error("Missing the required parameter 'buildSystemSharedDTOActivityRun' when calling activityRunsPutActivityRun");
      }

      let pathParams = {
        'activityRunID': activityRunID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/activityRuns/{activityRunID}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the activityRunsPutActivityRunStatus operation.
     * @callback module:api/ActivityRunsApi~activityRunsPutActivityRunStatusCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the ActivityRunStatus of an ActivityRun
     * Updates the ActivityRunStatus of an ActivityRun.  The body of the PUT is the updated ActivityRunStatus.              When successful, the response is empty.  If unsuccessful, an appropriate ApiError is returned.
     * @param {Number} activityRunID The ID of the ActivityRun to update ActivityRunStatus for.
     * @param {module:model/BuildSystemSharedDTOActivityRunStatus} buildSystemSharedDTOActivityRunStatus The updated ActivityRunStatus.
     * @param {module:api/ActivityRunsApi~activityRunsPutActivityRunStatusCallback} callback The callback function, accepting three arguments: error, data, response
     */
    activityRunsPutActivityRunStatus(activityRunID, buildSystemSharedDTOActivityRunStatus, callback) {
      let postBody = buildSystemSharedDTOActivityRunStatus;
      // verify the required parameter 'activityRunID' is set
      if (activityRunID === undefined || activityRunID === null) {
        throw new Error("Missing the required parameter 'activityRunID' when calling activityRunsPutActivityRunStatus");
      }
      // verify the required parameter 'buildSystemSharedDTOActivityRunStatus' is set
      if (buildSystemSharedDTOActivityRunStatus === undefined || buildSystemSharedDTOActivityRunStatus === null) {
        throw new Error("Missing the required parameter 'buildSystemSharedDTOActivityRunStatus' when calling activityRunsPutActivityRunStatus");
      }

      let pathParams = {
        'activityRunID': activityRunID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/activityRuns/{activityRunID}/status', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
