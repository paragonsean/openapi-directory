/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DealerDBModelsVoucher model module.
 * @module model/DealerDBModelsVoucher
 * @version v1
 */
class DealerDBModelsVoucher {
    /**
     * Constructs a new <code>DealerDBModelsVoucher</code>.
     * A voucher for EDT activation
     * @alias module:model/DealerDBModelsVoucher
     */
    constructor() { 
        
        DealerDBModelsVoucher.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DealerDBModelsVoucher</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DealerDBModelsVoucher} obj Optional instance to populate.
     * @return {module:model/DealerDBModelsVoucher} The populated <code>DealerDBModelsVoucher</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DealerDBModelsVoucher();

            if (data.hasOwnProperty('CreatedDate')) {
                obj['CreatedDate'] = ApiClient.convertToType(data['CreatedDate'], 'Date');
            }
            if (data.hasOwnProperty('DealerCode')) {
                obj['DealerCode'] = ApiClient.convertToType(data['DealerCode'], 'String');
            }
            if (data.hasOwnProperty('Deleted')) {
                obj['Deleted'] = ApiClient.convertToType(data['Deleted'], 'Boolean');
            }
            if (data.hasOwnProperty('Email')) {
                obj['Email'] = ApiClient.convertToType(data['Email'], 'String');
            }
            if (data.hasOwnProperty('ExpirationDate')) {
                obj['ExpirationDate'] = ApiClient.convertToType(data['ExpirationDate'], 'Date');
            }
            if (data.hasOwnProperty('LicenseTo')) {
                obj['LicenseTo'] = ApiClient.convertToType(data['LicenseTo'], 'String');
            }
            if (data.hasOwnProperty('ModifiedBy')) {
                obj['ModifiedBy'] = ApiClient.convertToType(data['ModifiedBy'], 'String');
            }
            if (data.hasOwnProperty('OrderNumber')) {
                obj['OrderNumber'] = ApiClient.convertToType(data['OrderNumber'], 'String');
            }
            if (data.hasOwnProperty('Punched')) {
                obj['Punched'] = ApiClient.convertToType(data['Punched'], 'Boolean');
            }
            if (data.hasOwnProperty('PunchedDate')) {
                obj['PunchedDate'] = ApiClient.convertToType(data['PunchedDate'], 'Date');
            }
            if (data.hasOwnProperty('Purpose')) {
                obj['Purpose'] = ApiClient.convertToType(data['Purpose'], 'String');
            }
            if (data.hasOwnProperty('Type')) {
                obj['Type'] = ApiClient.convertToType(data['Type'], 'String');
            }
            if (data.hasOwnProperty('VoucherCode')) {
                obj['VoucherCode'] = ApiClient.convertToType(data['VoucherCode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DealerDBModelsVoucher</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DealerDBModelsVoucher</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['DealerCode'] && !(typeof data['DealerCode'] === 'string' || data['DealerCode'] instanceof String)) {
            throw new Error("Expected the field `DealerCode` to be a primitive type in the JSON string but got " + data['DealerCode']);
        }
        // ensure the json data is a string
        if (data['Email'] && !(typeof data['Email'] === 'string' || data['Email'] instanceof String)) {
            throw new Error("Expected the field `Email` to be a primitive type in the JSON string but got " + data['Email']);
        }
        // ensure the json data is a string
        if (data['LicenseTo'] && !(typeof data['LicenseTo'] === 'string' || data['LicenseTo'] instanceof String)) {
            throw new Error("Expected the field `LicenseTo` to be a primitive type in the JSON string but got " + data['LicenseTo']);
        }
        // ensure the json data is a string
        if (data['ModifiedBy'] && !(typeof data['ModifiedBy'] === 'string' || data['ModifiedBy'] instanceof String)) {
            throw new Error("Expected the field `ModifiedBy` to be a primitive type in the JSON string but got " + data['ModifiedBy']);
        }
        // ensure the json data is a string
        if (data['OrderNumber'] && !(typeof data['OrderNumber'] === 'string' || data['OrderNumber'] instanceof String)) {
            throw new Error("Expected the field `OrderNumber` to be a primitive type in the JSON string but got " + data['OrderNumber']);
        }
        // ensure the json data is a string
        if (data['Purpose'] && !(typeof data['Purpose'] === 'string' || data['Purpose'] instanceof String)) {
            throw new Error("Expected the field `Purpose` to be a primitive type in the JSON string but got " + data['Purpose']);
        }
        // ensure the json data is a string
        if (data['Type'] && !(typeof data['Type'] === 'string' || data['Type'] instanceof String)) {
            throw new Error("Expected the field `Type` to be a primitive type in the JSON string but got " + data['Type']);
        }
        // ensure the json data is a string
        if (data['VoucherCode'] && !(typeof data['VoucherCode'] === 'string' || data['VoucherCode'] instanceof String)) {
            throw new Error("Expected the field `VoucherCode` to be a primitive type in the JSON string but got " + data['VoucherCode']);
        }

        return true;
    }


}



/**
 * Read-Only. The date the voucher was created.
 * @member {Date} CreatedDate
 */
DealerDBModelsVoucher.prototype['CreatedDate'] = undefined;

/**
 * The dealer code the voucher is assigned to.  Required for commercial and right to repair vouchers.
 * @member {String} DealerCode
 */
DealerDBModelsVoucher.prototype['DealerCode'] = undefined;

/**
 * Read-Only. True if voucher has been deleted.
 * @member {Boolean} Deleted
 */
DealerDBModelsVoucher.prototype['Deleted'] = undefined;

/**
 * Required for internal vouchers.
 * @member {String} Email
 */
DealerDBModelsVoucher.prototype['Email'] = undefined;

/**
 * The expiration date of the voucher. Required for Temporary and Right to Repair Vouchers.
 * @member {Date} ExpirationDate
 */
DealerDBModelsVoucher.prototype['ExpirationDate'] = undefined;

/**
 * Required for Internal Vouchers
 * @member {String} LicenseTo
 */
DealerDBModelsVoucher.prototype['LicenseTo'] = undefined;

/**
 * Read-Only. The user that made the last modification to the voucher.
 * @member {String} ModifiedBy
 */
DealerDBModelsVoucher.prototype['ModifiedBy'] = undefined;

/**
 * The order number of a license. Required for Commercial and Right To Repair Vouchers. Not supported for other Vouchers.
 * @member {String} OrderNumber
 */
DealerDBModelsVoucher.prototype['OrderNumber'] = undefined;

/**
 * True if voucher has aleady been used.  False if the voucher has not been used.
 * @member {Boolean} Punched
 */
DealerDBModelsVoucher.prototype['Punched'] = undefined;

/**
 * Read-Only. The date the voucher was punched.
 * @member {Date} PunchedDate
 */
DealerDBModelsVoucher.prototype['PunchedDate'] = undefined;

/**
 * Required for Internal Vouchers. Not supported for other Vouchers.
 * @member {String} Purpose
 */
DealerDBModelsVoucher.prototype['Purpose'] = undefined;

/**
 * The type of voucher. Commercial is the default if not specified.
 * @member {module:model/DealerDBModelsVoucher.TypeEnum} Type
 */
DealerDBModelsVoucher.prototype['Type'] = undefined;

/**
 * The voucher code.
 * @member {String} VoucherCode
 */
DealerDBModelsVoucher.prototype['VoucherCode'] = undefined;





/**
 * Allowed values for the <code>Type</code> property.
 * @enum {String}
 * @readonly
 */
DealerDBModelsVoucher['TypeEnum'] = {

    /**
     * value: "Commercial"
     * @const
     */
    "Commercial": "Commercial",

    /**
     * value: "Internal"
     * @const
     */
    "Internal": "Internal",

    /**
     * value: "Temporary"
     * @const
     */
    "Temporary": "Temporary",

    /**
     * value: "RightToRepair"
     * @const
     */
    "RightToRepair": "RightToRepair"
};



export default DealerDBModelsVoucher;

