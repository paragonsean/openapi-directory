/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AGCOPowerServicesModelsProductionData model module.
 * @module model/AGCOPowerServicesModelsProductionData
 * @version v1
 */
class AGCOPowerServicesModelsProductionData {
    /**
     * Constructs a new <code>AGCOPowerServicesModelsProductionData</code>.
     * Production data for an AGCO Power engine.
     * @alias module:model/AGCOPowerServicesModelsProductionData
     * @param dataType {String} Type of data. Valid types are (but not limited to)              'PowerCalibration'
     * @param dataValues {Blob} Raw values of the calibration data
     */
    constructor(dataType, dataValues) { 
        
        AGCOPowerServicesModelsProductionData.initialize(this, dataType, dataValues);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, dataType, dataValues) { 
        obj['DataType'] = dataType;
        obj['DataValues'] = dataValues;
    }

    /**
     * Constructs a <code>AGCOPowerServicesModelsProductionData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AGCOPowerServicesModelsProductionData} obj Optional instance to populate.
     * @return {module:model/AGCOPowerServicesModelsProductionData} The populated <code>AGCOPowerServicesModelsProductionData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AGCOPowerServicesModelsProductionData();

            if (data.hasOwnProperty('DataType')) {
                obj['DataType'] = ApiClient.convertToType(data['DataType'], 'String');
            }
            if (data.hasOwnProperty('DataValues')) {
                obj['DataValues'] = ApiClient.convertToType(data['DataValues'], 'Blob');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AGCOPowerServicesModelsProductionData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AGCOPowerServicesModelsProductionData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AGCOPowerServicesModelsProductionData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['DataType'] && !(typeof data['DataType'] === 'string' || data['DataType'] instanceof String)) {
            throw new Error("Expected the field `DataType` to be a primitive type in the JSON string but got " + data['DataType']);
        }

        return true;
    }


}

AGCOPowerServicesModelsProductionData.RequiredProperties = ["DataType", "DataValues"];

/**
 * Type of data. Valid types are (but not limited to)              'PowerCalibration'
 * @member {String} DataType
 */
AGCOPowerServicesModelsProductionData.prototype['DataType'] = undefined;

/**
 * Raw values of the calibration data
 * @member {Blob} DataValues
 */
AGCOPowerServicesModelsProductionData.prototype['DataValues'] = undefined;






export default AGCOPowerServicesModelsProductionData;

