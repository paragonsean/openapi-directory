/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DealerDBModelsLicense model module.
 * @module model/DealerDBModelsLicense
 * @version v1
 */
class DealerDBModelsLicense {
    /**
     * Constructs a new <code>DealerDBModelsLicense</code>.
     * @alias module:model/DealerDBModelsLicense
     */
    constructor() { 
        
        DealerDBModelsLicense.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DealerDBModelsLicense</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DealerDBModelsLicense} obj Optional instance to populate.
     * @return {module:model/DealerDBModelsLicense} The populated <code>DealerDBModelsLicense</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DealerDBModelsLicense();

            if (data.hasOwnProperty('Active')) {
                obj['Active'] = ApiClient.convertToType(data['Active'], 'Boolean');
            }
            if (data.hasOwnProperty('CreatedDate')) {
                obj['CreatedDate'] = ApiClient.convertToType(data['CreatedDate'], 'Date');
            }
            if (data.hasOwnProperty('DeactivatedDate')) {
                obj['DeactivatedDate'] = ApiClient.convertToType(data['DeactivatedDate'], 'Date');
            }
            if (data.hasOwnProperty('LicenseActivationType')) {
                obj['LicenseActivationType'] = ApiClient.convertToType(data['LicenseActivationType'], 'String');
            }
            if (data.hasOwnProperty('LicenseID')) {
                obj['LicenseID'] = ApiClient.convertToType(data['LicenseID'], 'String');
            }
            if (data.hasOwnProperty('LicenseVersion')) {
                obj['LicenseVersion'] = ApiClient.convertToType(data['LicenseVersion'], 'String');
            }
            if (data.hasOwnProperty('RefreshDate')) {
                obj['RefreshDate'] = ApiClient.convertToType(data['RefreshDate'], 'Date');
            }
            if (data.hasOwnProperty('SystemInfo')) {
                obj['SystemInfo'] = ApiClient.convertToType(data['SystemInfo'], 'String');
            }
            if (data.hasOwnProperty('UpdatedLicenseVersion')) {
                obj['UpdatedLicenseVersion'] = ApiClient.convertToType(data['UpdatedLicenseVersion'], 'String');
            }
            if (data.hasOwnProperty('VoucherCode')) {
                obj['VoucherCode'] = ApiClient.convertToType(data['VoucherCode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DealerDBModelsLicense</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DealerDBModelsLicense</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['LicenseActivationType'] && !(typeof data['LicenseActivationType'] === 'string' || data['LicenseActivationType'] instanceof String)) {
            throw new Error("Expected the field `LicenseActivationType` to be a primitive type in the JSON string but got " + data['LicenseActivationType']);
        }
        // ensure the json data is a string
        if (data['LicenseID'] && !(typeof data['LicenseID'] === 'string' || data['LicenseID'] instanceof String)) {
            throw new Error("Expected the field `LicenseID` to be a primitive type in the JSON string but got " + data['LicenseID']);
        }
        // ensure the json data is a string
        if (data['LicenseVersion'] && !(typeof data['LicenseVersion'] === 'string' || data['LicenseVersion'] instanceof String)) {
            throw new Error("Expected the field `LicenseVersion` to be a primitive type in the JSON string but got " + data['LicenseVersion']);
        }
        // ensure the json data is a string
        if (data['SystemInfo'] && !(typeof data['SystemInfo'] === 'string' || data['SystemInfo'] instanceof String)) {
            throw new Error("Expected the field `SystemInfo` to be a primitive type in the JSON string but got " + data['SystemInfo']);
        }
        // ensure the json data is a string
        if (data['UpdatedLicenseVersion'] && !(typeof data['UpdatedLicenseVersion'] === 'string' || data['UpdatedLicenseVersion'] instanceof String)) {
            throw new Error("Expected the field `UpdatedLicenseVersion` to be a primitive type in the JSON string but got " + data['UpdatedLicenseVersion']);
        }
        // ensure the json data is a string
        if (data['VoucherCode'] && !(typeof data['VoucherCode'] === 'string' || data['VoucherCode'] instanceof String)) {
            throw new Error("Expected the field `VoucherCode` to be a primitive type in the JSON string but got " + data['VoucherCode']);
        }

        return true;
    }


}



/**
 * True if license is active.
 * @member {Boolean} Active
 */
DealerDBModelsLicense.prototype['Active'] = undefined;

/**
 * The date the license was created.
 * @member {Date} CreatedDate
 */
DealerDBModelsLicense.prototype['CreatedDate'] = undefined;

/**
 * The date the license was deactivated.
 * @member {Date} DeactivatedDate
 */
DealerDBModelsLicense.prototype['DeactivatedDate'] = undefined;

/**
 * The type of license (e.g. EDT, EDT Lite)
 * @member {module:model/DealerDBModelsLicense.LicenseActivationTypeEnum} LicenseActivationType
 */
DealerDBModelsLicense.prototype['LicenseActivationType'] = undefined;

/**
 * The LicenseID
 * @member {String} LicenseID
 */
DealerDBModelsLicense.prototype['LicenseID'] = undefined;

/**
 * The version of the license.
 * @member {String} LicenseVersion
 */
DealerDBModelsLicense.prototype['LicenseVersion'] = undefined;

/**
 * The date the license was refreshed.
 * @member {Date} RefreshDate
 */
DealerDBModelsLicense.prototype['RefreshDate'] = undefined;

/**
 * Information about the system which is licensed.
 * @member {String} SystemInfo
 */
DealerDBModelsLicense.prototype['SystemInfo'] = undefined;

/**
 * The updated version of the license.  A value in this field indicates that the update has not been confirmed.
 * @member {String} UpdatedLicenseVersion
 */
DealerDBModelsLicense.prototype['UpdatedLicenseVersion'] = undefined;

/**
 * The voucher code that generated the license.
 * @member {String} VoucherCode
 */
DealerDBModelsLicense.prototype['VoucherCode'] = undefined;





/**
 * Allowed values for the <code>LicenseActivationType</code> property.
 * @enum {String}
 * @readonly
 */
DealerDBModelsLicense['LicenseActivationTypeEnum'] = {

    /**
     * value: "EDT"
     * @const
     */
    "EDT": "EDT",

    /**
     * value: "EDTLite"
     * @const
     */
    "EDTLite": "EDTLite"
};



export default DealerDBModelsLicense;

